void sub_263701FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28) {
    std::__shared_weak_count::__release_weak(a28);
  }
  std::__shared_weak_count::__release_weak(a18);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *ABMServerInternal::getClientState_sync@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void **)(a1 + 152);
  result = (void *)(a1 + 152);
  v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a2;
    v7 = result;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        v10 = v4;
      }
      else {
        v10 = v4 + 1;
      }
      if (v9) {
        v7 = v4;
      }
      v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != result && v6 >= v7[4])
    {
      uint64_t v12 = v7[5];
      uint64_t v11 = v7[6];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

void ABMServerInternal::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 192);
  if (v2 != 3 && v2 != 5)
  {
    v5 = *(NSObject **)(a1 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)__p, a2);
      if (v8 >= 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315138;
      v10 = v6;
      _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Server error: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void ABMServerInternal::handleNewClient_sync(uint64_t a1@<X0>, xpc::object *a2@<X1>, const void **a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *a3 = 0;
  if ((*(_DWORD *)(a1 + 192) & 0xFFFFFFFE) == 4)
  {
    unint64_t v6 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    v7 = (char *)MEMORY[0x263E6A1A0](*(void *)a2);
    memset(__p, 170, sizeof(__p));
    size_t v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    BOOL v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      uint64_t v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v19 = v8 | 7;
      }
      uint64_t v20 = v19 + 1;
      v10 = operator new(v19 + 1);
      __p[1] = v9;
      __p[2] = (void *)(v20 | 0x8000000000000000);
      __p[0] = v10;
    }
    else
    {
      HIBYTE(__p[2]) = v8;
      v10 = __p;
      if (!v8) {
        goto LABEL_22;
      }
    }
    memcpy(v10, v7, (size_t)v9);
LABEL_22:
    *((unsigned char *)v9 + (void)v10) = 0;
    free(v7);
    int v21 = SHIBYTE(__p[2]);
    v22 = (void **)__p[0];
    v23 = to_string(*(_DWORD *)(a1 + 192));
    v24 = __p;
    if (v21 < 0) {
      v24 = v22;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v23;
    _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Rejecting new client %s because server state is '%s'", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  xpc::object::to_string((uint64_t *)__p, a2);
  uint64_t v11 = (std::string *)operator new(0x38uLL);
  uint64_t v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
  }
  v12[1].__r_.__value_.__s.__data_[0] = 0;
  v12[2].__r_.__value_.__r.__words[0] = 0;
  v12[1].__r_.__value_.__r.__words[2] = 0;
  v12[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].__r_.__value_.__r.__words[2];
  *(void *)buf = v12;
  v13 = operator new(0x20uLL);
  void *v13 = &unk_270EAB200;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  *(void *)&buf[8] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  else
  {
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_33;
    }
  }
  v15 = (char *)MEMORY[0x263E6A1A0](*(void *)a2);
  memset(__p, 170, sizeof(__p));
  size_t v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v25 = v16 | 7;
    }
    uint64_t v26 = v25 + 1;
    v18 = operator new(v25 + 1);
    __p[1] = v17;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(__p[2]) = v16;
  v18 = __p;
  if (v16) {
LABEL_29:
  }
    memcpy(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  free(v15);
  v27 = __p;
  if (SHIBYTE(__p[2]) < 0) {
    v27 = (void **)__p[0];
  }
  *(_DWORD *)v46 = 136315138;
  v47 = v27;
  _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I New client: %s", v46, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v29 = (uint64_t **)(a1 + 152);
    v28 = *(uint64_t **)(a1 + 152);
    if (v28) {
      goto LABEL_34;
    }
    goto LABEL_43;
  }
LABEL_33:
  v29 = (uint64_t **)(a1 + 152);
  v28 = *(uint64_t **)(a1 + 152);
  if (v28)
  {
LABEL_34:
    unint64_t v30 = *(void *)a2;
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t **)v28;
        unint64_t v32 = v28[4];
        if (v30 >= v32) {
          break;
        }
        v28 = *v31;
        v29 = v31;
        if (!*v31) {
          goto LABEL_44;
        }
      }
      if (v32 >= v30) {
        break;
      }
      v28 = v31[1];
      if (!v28)
      {
        v29 = v31 + 1;
        goto LABEL_44;
      }
    }
    v33 = (uint64_t *)v31;
    uint64_t v35 = *(void *)buf;
    uint64_t v34 = *(void *)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_43:
  v31 = v29;
LABEL_44:
  v33 = (uint64_t *)operator new(0x38uLL);
  v36 = *(void **)a2;
  v33[4] = *(void *)a2;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    v33[4] = (uint64_t)xpc_null_create();
  }
  v33[5] = 0;
  v33[6] = 0;
  uint64_t *v33 = 0;
  v33[1] = 0;
  v33[2] = (uint64_t)v31;
  *v29 = v33;
  uint64_t v37 = **(void **)(a1 + 144);
  v38 = v33;
  if (v37)
  {
    *(void *)(a1 + 144) = v37;
    v38 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v38);
  ++*(void *)(a1 + 160);
  uint64_t v35 = *(void *)buf;
  uint64_t v34 = *(void *)&buf[8];
  if (!*(void *)&buf[8]) {
    goto LABEL_51;
  }
LABEL_50:
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
LABEL_51:
  v39 = (std::__shared_weak_count *)v33[6];
  v33[5] = v35;
  v33[6] = v34;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  v43[0] = MEMORY[0x263EF8330];
  v43[1] = 0x40000000;
  v43[2] = ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v43[3] = &__block_descriptor_tmp_21;
  v43[4] = a1;
  v40 = _Block_copy(v43);
  v41 = *a3;
  *a3 = v40;
  if (v41) {
    _Block_release(v41);
  }
  v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
}

void sub_26370278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  operator delete(v21);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*v20) {
    _Block_release(*v20);
  }
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v5 = *a2;
  xpc_object_t v8 = v5;
  if (!v5)
  {
    xpc_object_t v8 = xpc_null_create();
    unint64_t v6 = *a3;
    xpc_object_t object = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  unint64_t v6 = *a3;
  xpc_object_t object = v6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 40))(v4, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_2637028D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void ABMServerInternal::handleClientError_sync(void *a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  xpc_object_t v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v38 = 0;
    v39 = 0;
    xpc_object_t v8 = a1 + 19;
    v7 = (void *)a1[19];
    if (!v7) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    v38 = 0;
    v39 = 0;
    xpc_object_t v8 = a1 + 19;
    v7 = (void *)a1[19];
    if (!v7)
    {
LABEL_15:
      v13 = 0;
      v14 = 0;
      goto LABEL_16;
    }
  }
  BOOL v9 = v8;
  do
  {
    unint64_t v10 = v7[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = v7 + 1;
    }
    if (v11) {
      BOOL v9 = v7;
    }
    v7 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v8 || (unint64_t)v6 < v9[4]) {
    goto LABEL_15;
  }
  v14 = (long long *)v9[5];
  v13 = (std::__shared_weak_count *)v9[6];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v38 = v14;
  v39 = v13;
LABEL_16:
  xpc_release(v6);
  if (!v14) {
    goto LABEL_62;
  }
  memset(__p, 170, 24);
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *v14;
    v40.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v15;
  }
  size_t v16 = std::string::insert(&v40, 0, "Client '", 8uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v41, "'", 1uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v20 = *(void *)a3;
      if (*(void *)a3 != MEMORY[0x263EF86A8]) {
        goto LABEL_23;
      }
LABEL_36:
      uint64_t v26 = a1[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          v27 = (void **)__p[0];
        }
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_26368A000, v26, OS_LOG_TYPE_DEFAULT, "#I %s disappeared", (uint8_t *)&v41, 0xCu);
      }
      v28 = (void *)a1[19];
      if (v28)
      {
        xpc_object_t v29 = *a2;
        uint64_t v30 = (uint64_t)v8;
        do
        {
          unint64_t v31 = v28[4];
          BOOL v32 = v31 >= (unint64_t)v29;
          if (v31 >= (unint64_t)v29) {
            v33 = v28;
          }
          else {
            v33 = v28 + 1;
          }
          if (v32) {
            uint64_t v30 = (uint64_t)v28;
          }
          v28 = (void *)*v33;
        }
        while (*v33);
        if ((void *)v30 != v8 && (unint64_t)v29 >= *(void *)(v30 + 32)) {
          std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(a1 + 18, v30);
        }
      }
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  uint64_t v20 = *(void *)a3;
  if (*(void *)a3 == MEMORY[0x263EF86A8]) {
    goto LABEL_36;
  }
LABEL_23:
  if (v20 == MEMORY[0x263EF86A0])
  {
    v22 = a1[14];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_60;
    }
    uint64_t v34 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v34 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    uint64_t v35 = "#D %s connection interrupted";
  }
  else
  {
    uint64_t v21 = MEMORY[0x263EF86C0];
    v22 = a1[14];
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v20 != v21)
    {
      if (v23)
      {
        xpc::object::to_string((uint64_t *)&v41, a3);
        v24 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          v24 = (void **)__p[0];
        }
        uint64_t v25 = (v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v41
            : (std::string *)v41.__r_.__value_.__r.__words[0];
        LODWORD(v40.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        WORD2(v40.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v40.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
        _os_log_debug_impl(&dword_26368A000, v22, OS_LOG_TYPE_DEBUG, "#D %s %s", (uint8_t *)&v40, 0x16u);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
      }
LABEL_60:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (!v23) {
      goto LABEL_60;
    }
    v36 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      v36 = (void **)__p[0];
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    uint64_t v35 = "#D %s will be terminated";
  }
  _os_log_debug_impl(&dword_26368A000, v22, OS_LOG_TYPE_DEBUG, v35, (uint8_t *)&v41, 0xCu);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_61:
  }
    operator delete(__p[0]);
LABEL_62:
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_263702D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_263702DBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handleMessage_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  xpc_object_t v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v35 = 0;
    v36 = 0;
    v7 = (void *)(a1 + 152);
    xpc_object_t v8 = *(void **)(a1 + 152);
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v35 = 0;
    v36 = 0;
    v7 = (void *)(a1 + 152);
    xpc_object_t v8 = *(void **)(a1 + 152);
    if (!v8)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_16;
    }
  }
  BOOL v9 = v7;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 1;
    }
    if (v11) {
      BOOL v9 = v8;
    }
    xpc_object_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || (unint64_t)v6 < v9[4]) {
    goto LABEL_15;
  }
  v13 = (long long *)v9[5];
  uint64_t v20 = (std::__shared_weak_count *)v9[6];
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v13;
  v36 = v20;
LABEL_16:
  xpc_release(v6);
  v14 = *(NSObject **)(a1 + 112);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (!v15) {
      goto LABEL_21;
    }
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v27 = *v13;
      v34.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v27;
    }
    int v28 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v29 = v34.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    uint64_t v25 = &v34;
    if (v28 < 0) {
      uint64_t v25 = (std::string *)v29;
    }
    if (v33 >= 0) {
      uint64_t v26 = __p;
    }
    else {
      uint64_t v26 = (void **)__p[0];
    }
  }
  else
  {
    if (!v15) {
      goto LABEL_21;
    }
    xpc::object::to_string((uint64_t *)&v34, (xpc::object *)a2);
    int v23 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    std::string::size_type v24 = v34.__r_.__value_.__r.__words[0];
    xpc::object::to_string((uint64_t *)__p, a3);
    uint64_t v25 = &v34;
    if (v23 < 0) {
      uint64_t v25 = (std::string *)v24;
    }
    if (v33 >= 0) {
      uint64_t v26 = __p;
    }
    else {
      uint64_t v26 = (void **)__p[0];
    }
  }
  *(_DWORD *)buf = 136315394;
  v38 = v25;
  __int16 v39 = 2080;
  std::string v40 = v26;
  _os_log_debug_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEBUG, "#D Message from %s:\n%s", buf, 0x16u);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_21:
  xpc_object_t v16 = *(xpc_object_t *)a3;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  uint64_t v17 = MEMORY[0x263E6A240](v16);
  uint64_t v18 = MEMORY[0x263EF8708];
  if (v17 == MEMORY[0x263EF8708])
  {
    xpc_object_t v19 = *a2;
    xpc_object_t v31 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v31 = v19;
    }
    ABMServerInternal::handleInternalMessage_sync(a1, &v31, (xpc_object_t *)&v34.__r_.__value_.__l.__data_);
    xpc_release(v19);
    xpc_object_t v31 = 0;
    xpc_object_t v16 = (xpc_object_t)v34.__r_.__value_.__r.__words[0];
  }
  if (MEMORY[0x263E6A240](v16) == v18)
  {
    uint64_t v21 = (_xpc_connection_s *)*a2;
    xpc_connection_t v30 = v21;
    if (v21)
    {
      xpc_retain(v21);
    }
    else
    {
      uint64_t v21 = (_xpc_connection_s *)xpc_null_create();
      xpc_connection_t v30 = v21;
    }
    ABMServerInternal::handlePublicMessage_sync(a1, &v30, (xpc_object_t *)&v34.__r_.__value_.__l.__data_);
    xpc_release(v21);
    xpc_connection_t v30 = 0;
  }
  xpc_release(v34.__r_.__value_.__l.__data_);
  v22 = v36;
  if (v36)
  {
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_263703150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
}

void sub_263703170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  xpc_release(v15);
  xpc_release(object);
  JUMPOUT(0x2637031ECLL);
}

void sub_263703190(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  xpc_release(v15);
  xpc_release(a15);
  JUMPOUT(0x2637031ECLL);
}

void sub_2637031FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  memset(__p, 170, sizeof(__p));
  xpc_object_t value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  int v7 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v8 = HIBYTE(__p[2]);
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if (v8 == strlen(kCommandCheckIn))
  {
    BOOL v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, kCommandCheckIn, v8))
    {
      memset(object, 170, sizeof(object));
      xpc_object_t v15 = xpc_dictionary_get_value(*a3, kKeyClientName);
      xpc_object_t v71 = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t v71 = xpc_null_create();
      }
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      xpc_release(v71);
      memset(buf, 170, 16);
      xpc_object_t v19 = *a2;
      if (*a2)
      {
        xpc_retain(*a2);
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        uint64_t v20 = (void *)(a1 + 152);
        uint64_t v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_52;
        }
      }
      else
      {
        xpc_object_t v19 = xpc_null_create();
        *(void *)buf = 0;
        *(void *)&buf[8] = 0;
        uint64_t v20 = (void *)(a1 + 152);
        uint64_t v21 = *(void **)(a1 + 152);
        if (!v21) {
          goto LABEL_52;
        }
      }
      v22 = v20;
      do
      {
        unint64_t v23 = v21[4];
        BOOL v24 = v23 >= (unint64_t)v19;
        if (v23 >= (unint64_t)v19) {
          uint64_t v25 = v21;
        }
        else {
          uint64_t v25 = v21 + 1;
        }
        if (v24) {
          v22 = v21;
        }
        uint64_t v21 = (void *)*v25;
      }
      while (*v25);
      if (v22 != v20 && (unint64_t)v19 >= v22[4])
      {
        uint64_t v27 = v22[5];
        uint64_t v26 = (std::__shared_weak_count *)v22[6];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)buf = v27;
        *(void *)&buf[8] = v26;
        goto LABEL_53;
      }
LABEL_52:
      uint64_t v26 = 0;
      uint64_t v27 = 0;
LABEL_53:
      xpc_release(v19);
      if (v27)
      {
        if ((xpc_object_t *)v27 != object)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            if (SHIBYTE(object[2]) >= 0) {
              v50 = object;
            }
            else {
              v50 = (xpc_object_t *)object[0];
            }
            if (SHIBYTE(object[2]) >= 0) {
              size_t v51 = HIBYTE(object[2]);
            }
            else {
              size_t v51 = (size_t)object[1];
            }
            std::string::__assign_no_alias<false>((void **)v27, v50, v51);
          }
          else if ((HIBYTE(object[2]) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((void *)v27, object[0], (size_t)object[1]);
          }
          else
          {
            long long v28 = *(_OWORD *)object;
            *(xpc_object_t *)(v27 + 16) = object[2];
            *(_OWORD *)uint64_t v27 = v28;
          }
        }
        *(unsigned char *)(v27 + 24) = 1;
      }
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      if (SHIBYTE(object[2]) < 0) {
        operator delete(object[0]);
      }
      int v44 = 0;
      goto LABEL_134;
    }
  }
  if (v8 != strlen(kCommandCheckOut)
    || (v7 >= 0 ? (unint64_t v10 = __p) : (unint64_t v10 = (void **)__p[0]), memcmp(v10, kCommandCheckOut, v8)))
  {
    if (v8 != strlen(kCommandEventsOn)
      || (v7 >= 0 ? (BOOL v11 = __p) : (BOOL v11 = (void **)__p[0]), memcmp(v11, kCommandEventsOn, v8)))
    {
      if (v8 != strlen(kCommandEventsOff)) {
        goto LABEL_160;
      }
      uint64_t v12 = v7 >= 0 ? __p : (void **)__p[0];
      if (memcmp(v12, kCommandEventsOff, v8)) {
        goto LABEL_160;
      }
      xpc_object_t v13 = xpc_dictionary_get_value(*a3, kKeyEventsList);
      object[0] = v13;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        object[0] = xpc_null_create();
      }
      xpc::bridge((uint64_t *)buf, (xpc *)object, v14);
      v45 = *(const void **)buf;
      if (!*(void *)buf) {
        goto LABEL_102;
      }
      CFTypeID v46 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v46 == CFArrayGetTypeID())
      {
        CFRetain(v45);
        v47 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_102;
        }
      }
      else
      {
        v45 = 0;
        v47 = *(const void **)buf;
        if (!*(void *)buf)
        {
LABEL_102:
          xpc_release(object[0]);
          if (v45) {
            uint64_t v48 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          }
          else {
            uint64_t v48 = 0;
          }
          if (v48)
          {
            xpc_object_t v49 = *a2;
            xpc_object_t v68 = v49;
            if (v49)
            {
              xpc_retain(v49);
              v67 = v45;
              if (v45)
              {
LABEL_108:
                CFRetain(v45);
                ABMServerInternal::registerNotification(a1, &v68, 0, &v67);
                CFRelease(v45);
                xpc_object_t v49 = v68;
                goto LABEL_124;
              }
            }
            else
            {
              xpc_object_t v49 = xpc_null_create();
              v67 = v45;
              xpc_object_t v68 = v49;
              if (v45) {
                goto LABEL_108;
              }
            }
            ABMServerInternal::registerNotification(a1, &v68, 0, &v67);
LABEL_124:
            xpc_release(v49);
            int v44 = 0;
            xpc_object_t v68 = 0;
            if (!v45) {
              goto LABEL_134;
            }
            goto LABEL_125;
          }
          int v44 = -534716414;
          if (v45) {
LABEL_125:
          }
            CFRelease(v45);
LABEL_134:
          xpc_object_t reply = xpc_dictionary_create_reply(*a3);
          if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
          {
            if (MEMORY[0x263E6A240](reply) == MEMORY[0x263EF8708])
            {
              xpc_retain(reply);
              xpc_object_t v53 = reply;
            }
            else
            {
              xpc_object_t v53 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v53 = xpc_null_create();
            xpc_object_t reply = 0;
          }
          xpc_release(reply);
          xpc_object_t v54 = xpc_int64_create(v44);
          if (!v54) {
            xpc_object_t v54 = xpc_null_create();
          }
          xpc_dictionary_set_value(v53, kKeyCommandResult, v54);
          xpc_object_t v55 = xpc_null_create();
          xpc_release(v54);
          xpc_release(v55);
          v56 = *(NSObject **)(a1 + 112);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            v63 = __p;
            if (SHIBYTE(__p[2]) < 0) {
              v63 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v44;
            _os_log_debug_impl(&dword_26368A000, v56, OS_LOG_TYPE_DEBUG, "#D Replying to client's command: %s, with return code: 0x%x", buf, 0x12u);
          }
          xpc_connection_send_message((xpc_connection_t)*a2, v53);
          xpc_object_t v57 = xpc_null_create();
          xpc_object_t v58 = xpc_null_create();
          xpc_object_t v59 = *a3;
          *a3 = v57;
          xpc_release(v59);
          xpc_release(v58);
          if (SHIBYTE(__p[2]) >= 0) {
            size_t v60 = HIBYTE(__p[2]);
          }
          else {
            size_t v60 = (size_t)__p[1];
          }
          if (v60 == strlen(kCommandEventsOn))
          {
            v61 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v61, kCommandEventsOn, v60) && *(_DWORD *)(a1 + 192) == 1)
            {
              v65[0] = MEMORY[0x263EF8330];
              v65[1] = 1174405120;
              v65[2] = ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
              v65[3] = &__block_descriptor_tmp_24_0;
              xpc_object_t v62 = *a2;
              v65[4] = a1;
              xpc_object_t v66 = v62;
              if (v62) {
                xpc_retain(v62);
              }
              else {
                xpc_object_t v66 = xpc_null_create();
              }
              ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v65);
              xpc_release(v66);
              xpc_object_t v66 = 0;
            }
          }
          xpc_release(v53);
          goto LABEL_160;
        }
      }
      CFRelease(v47);
      goto LABEL_102;
    }
    xpc_object_t v17 = xpc_dictionary_get_value(*a3, kKeyEventsList);
    object[0] = v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)object, v18);
    __int16 v39 = *(const void **)buf;
    if (*(void *)buf)
    {
      CFTypeID v40 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v40 == CFArrayGetTypeID())
      {
        CFRetain(v39);
        uint64_t v41 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_83;
        }
      }
      else
      {
        __int16 v39 = 0;
        uint64_t v41 = *(const void **)buf;
        if (!*(void *)buf) {
          goto LABEL_83;
        }
      }
      CFRelease(v41);
    }
LABEL_83:
    xpc_release(object[0]);
    if (v39) {
      uint64_t v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      uint64_t v42 = 0;
    }
    if (!v42)
    {
      int v44 = -534716414;
      if (!v39) {
        goto LABEL_134;
      }
LABEL_114:
      CFRelease(v39);
      goto LABEL_134;
    }
    xpc_object_t v43 = *a2;
    xpc_object_t v70 = v43;
    if (v43)
    {
      xpc_retain(v43);
      v69 = v39;
      if (v39)
      {
LABEL_89:
        CFRetain(v39);
        ABMServerInternal::registerNotification(a1, &v70, 1, &v69);
        CFRelease(v39);
        xpc_object_t v43 = v70;
        goto LABEL_113;
      }
    }
    else
    {
      xpc_object_t v43 = xpc_null_create();
      v69 = v39;
      xpc_object_t v70 = v43;
      if (v39) {
        goto LABEL_89;
      }
    }
    ABMServerInternal::registerNotification(a1, &v70, 1, &v69);
LABEL_113:
    xpc_release(v43);
    int v44 = 0;
    xpc_object_t v70 = 0;
    if (!v39) {
      goto LABEL_134;
    }
    goto LABEL_114;
  }
  memset(object, 170, sizeof(object));
  xpc_object_t v16 = xpc_dictionary_get_value(*a3, kKeyClientName);
  xpc_object_t v71 = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v71 = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v71);
  std::string::size_type v29 = *(void **)(a1 + 152);
  if (v29)
  {
    xpc_object_t v30 = *a2;
    uint64_t v31 = a1 + 152;
    do
    {
      unint64_t v32 = v29[4];
      BOOL v33 = v32 >= (unint64_t)v30;
      if (v32 >= (unint64_t)v30) {
        std::string v34 = v29;
      }
      else {
        std::string v34 = v29 + 1;
      }
      if (v33) {
        uint64_t v31 = (uint64_t)v29;
      }
      std::string::size_type v29 = (void *)*v34;
    }
    while (*v34);
    if (v31 != a1 + 152 && (unint64_t)v30 >= *(void *)(v31 + 32)) {
      std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase((void *)(a1 + 144), v31);
    }
  }
  xpc_object_t v35 = xpc_null_create();
  xpc_object_t v36 = xpc_null_create();
  xpc_object_t v37 = *a3;
  *a3 = v35;
  xpc_release(v37);
  xpc_release(v36);
  v38 = *(NSObject **)(a1 + 112);
  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_75;
  }
  v64 = object;
  if (SHIBYTE(object[2]) < 0) {
    v64 = (xpc_object_t *)object[0];
  }
  *(_DWORD *)buf = 136315138;
  *(void *)&uint8_t buf[4] = v64;
  _os_log_debug_impl(&dword_26368A000, v38, OS_LOG_TYPE_DEBUG, "#D Client '%s' checked out", buf, 0xCu);
  if (SHIBYTE(object[2]) < 0) {
LABEL_75:
  }
    operator delete(object[0]);
LABEL_160:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_263703BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ABMServerInternal::handlePublicMessage_sync(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*a3);
  uint64_t v7 = MEMORY[0x263EF8708];
  if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](reply) == v7)
    {
      xpc_retain(reply);
      xpc_object_t v8 = reply;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t reply = 0;
  }
  xpc_release(reply);
  if (*(_DWORD *)(a1 + 192) == 5)
  {
    if (MEMORY[0x263E6A240](v8) == v7)
    {
      xpc_object_t v9 = xpc_int64_create(-534716415);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandResult, v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x263E6A240](v11) == v7)
        {
          xpc_retain(v11);
          xpc_object_t v12 = v11;
        }
        else
        {
          xpc_object_t v12 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
      }
      xpc_release(v11);
      xpc_object_t v18 = xpc_string_create("Server not available");
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25EB8], v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (v12)
      {
        xpc_retain(v12);
        xpc_object_t v20 = v12;
      }
      else
      {
        xpc_object_t v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandData, v20);
      xpc_object_t v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_connection_send_message(*a2, v8);
      xpc_release(v12);
    }
    goto LABEL_38;
  }
  memset(__p, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&__p[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  uint64_t v14 = *(void *)(a1 + 288);
  xpc_object_t v15 = *a3;
  xpc_object_t v29 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 1174405120;
  v25[2] = ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
  v25[3] = &__block_descriptor_tmp_27;
  v25[4] = a1;
  xpc_object_t v26 = v8;
  if (!v8)
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_connection_t v16 = *a2;
    xpc_object_t v27 = v16;
    if (v16) {
      goto LABEL_23;
    }
LABEL_25:
    xpc_object_t v27 = xpc_null_create();
    goto LABEL_26;
  }
  xpc_retain(v8);
  xpc_connection_t v16 = *a2;
  xpc_object_t v27 = v16;
  if (!v16) {
    goto LABEL_25;
  }
LABEL_23:
  xpc_retain(v16);
LABEL_26:
  xpc_object_t v17 = _Block_copy(v25);
  long long v28 = v17;
  ServiceManager::runCommand(v14, (uint64_t)__p, &v29, &v28);
  if (v17) {
    _Block_release(v17);
  }
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_38:
  xpc_object_t v22 = xpc_null_create();
  xpc_object_t v23 = xpc_null_create();
  xpc_object_t v24 = *a3;
  *a3 = v22;
  xpc_release(v24);
  xpc_release(v23);
  xpc_release(v8);
}

void sub_26370417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object, uint64_t a16, xpc_object_t a17, xpc_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void ABMServerInternal::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_28;
  uint64_t v7 = *a2;
  v9[4] = a1;
  xpc_object_t object = v7;
  if (!v7)
  {
    xpc_object_t object = xpc_null_create();
    char v12 = a3;
    xpc_object_t v8 = *a4;
    CFTypeRef cf = v8;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v7);
  char v12 = a3;
  xpc_object_t v8 = *a4;
  CFTypeRef cf = v8;
  if (v8) {
LABEL_5:
  }
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
}

void ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  CFTypeRef cf = 0;
  uint64_t v3 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F25EC8], (const __CFString **)*MEMORY[0x263F26040], v3, v5);
  xpc_object_t v6 = *(void **)(a1 + 40);
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v7 = (const void *)*MEMORY[0x263F26260];
  size_t v8 = strlen((const char *)*MEMORY[0x263F26260]);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v12 = v8 | 7;
    }
    uint64_t v13 = v12 + 1;
    xpc_object_t v10 = (void **)operator new(v12 + 1);
    __dst[1] = v9;
    unint64_t v19 = v13 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_14:
    memmove(v10, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v10) = 0;
    CFTypeRef v11 = cf;
    if (!cf) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  HIBYTE(v19) = v8;
  xpc_object_t v10 = __dst;
  if (v8) {
    goto LABEL_14;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_17;
  }
LABEL_15:
  CFTypeID v14 = CFGetTypeID(v11);
  if (v14 == CFDictionaryGetTypeID())
  {
    xpc_object_t v17 = (ctu *)v11;
    CFRetain(v11);
    xpc_object_t v15 = v11;
    goto LABEL_18;
  }
LABEL_17:
  xpc_object_t v15 = 0;
  xpc_object_t v17 = 0;
LABEL_18:
  xpc_connection_t v16 = 0;
  ABMServerInternal::unicast_sync(v2, &object, (uint64_t)__dst, &v17, &v16);
  if (v15) {
    CFRelease(v15);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v11) {
    CFRelease(v11);
  }
}

void sub_263704584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t object, const void *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void ABMServerInternal::unicast_sync(void *a1, xpc_object_t *a2, uint64_t a3, ctu **a4, void **a5)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v10) == MEMORY[0x263EF8708])
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  xpc_release(v10);
  if (*a4) {
    uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13)
  {
    ctu::cf_to_xpc((uint64_t *)&v65, *a4, v12);
    xpc_dictionary_set_value(v11, kKeyEventData[0], v65);
    xpc_object_t v14 = v65;
    xpc_object_t v65 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v65);
    xpc_object_t v65 = 0;
  }
  xpc_object_t v15 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, kKeyCommand[0], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0) {
    xpc_object_t v17 = *(const char **)a3;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, kKeyEvent[0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = dispatch_group_create();
  xpc_object_t v21 = (std::__shared_weak_count *)a1[2];
  if (!v21 || (v22 = a1[1], (xpc_object_t v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = *a2;
    if (*a2) {
      goto LABEL_22;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v25 = *a2;
    if (*a2)
    {
LABEL_22:
      xpc_retain(v25);
      unint64_t v63 = 0;
      unint64_t v64 = 0;
      xpc_object_t v26 = a1 + 19;
      xpc_object_t v27 = (void *)a1[19];
      if (!v27) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
  }
  xpc_object_t v25 = xpc_null_create();
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  xpc_object_t v26 = a1 + 19;
  xpc_object_t v27 = (void *)a1[19];
  if (!v27)
  {
LABEL_36:
    unint64_t v32 = 0;
    goto LABEL_37;
  }
LABEL_26:
  long long v28 = v26;
  do
  {
    unint64_t v29 = v27[4];
    BOOL v30 = v29 >= (unint64_t)v25;
    if (v29 >= (unint64_t)v25) {
      uint64_t v31 = v27;
    }
    else {
      uint64_t v31 = v27 + 1;
    }
    if (v30) {
      long long v28 = v27;
    }
    xpc_object_t v27 = (void *)*v31;
  }
  while (*v31);
  if (v28 == v26 || (unint64_t)v25 < v28[4]) {
    goto LABEL_36;
  }
  unint64_t v32 = v28[5];
  unint64_t v39 = v28[6];
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v63 = v32;
  unint64_t v64 = v39;
LABEL_37:
  xpc_release(v25);
  if (!v32
    || (uint64_t *)(v32 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v32 + 32, (const void **)a3))
  {
    goto LABEL_66;
  }
  uint64_t SystemTime = TelephonyUtilGetSystemTime();
  uint64_t v49 = v22;
  std::string v34 = (xpc_connection_t *)a2;
  xpc_object_t v35 = a1[14];
  if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_51;
  }
  xpc_object_t v36 = (const void *)a3;
  if (*(char *)(a3 + 23) < 0)
  {
    xpc_object_t v36 = *(const void **)a3;
    unint64_t v37 = v63;
    if ((*(char *)(v63 + 23) & 0x80000000) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v37 = v63;
    if ((*(char *)(v63 + 23) & 0x80000000) == 0)
    {
LABEL_42:
      long long v38 = *(_OWORD *)v37;
      v62.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
      goto LABEL_48;
    }
  }
  std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
LABEL_48:
  CFTypeID v40 = &v62;
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    CFTypeID v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)buf = 136315650;
  v67 = v36;
  __int16 v68 = 2080;
  v69 = v40;
  __int16 v70 = 2048;
  uint64_t v71 = SystemTime;
  _os_log_impl(&dword_26368A000, v35, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    if (*a5) {
      goto LABEL_52;
    }
LABEL_65:
    a2 = (xpc_object_t *)v34;
    xpc_connection_send_message(*v34, v11);
    uint64_t v22 = v49;
    goto LABEL_66;
  }
LABEL_51:
  if (!*a5) {
    goto LABEL_65;
  }
LABEL_52:
  uint64_t v41 = a5;
  dispatch_group_enter(v20);
  uint64_t v42 = *v34;
  xpc_object_t v43 = a1[3];
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 1174405120;
  handler[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_36_0;
  handler[4] = a1;
  handler[5] = v49;
  v56 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v57 = v63;
  xpc_object_t v58 = (std::__shared_weak_count *)v64;
  if (v64) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v60 = SystemTime;
  v61 = v20;
  xpc_connection_send_message_with_reply(v42, v11, v43, handler);
  a5 = v41;
  a2 = (xpc_object_t *)v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v44 = v58;
  uint64_t v22 = v49;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
LABEL_66:
  if (!*a5) {
    goto LABEL_80;
  }
  v45 = a1[3];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_37;
  block[3] = &__block_descriptor_tmp_38_0;
  block[4] = a1;
  block[5] = v22;
  size_t v51 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v46 = *a2;
  xpc_object_t object = v46;
  if (!v46)
  {
    xpc_object_t object = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_69;
    }
LABEL_71:
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    goto LABEL_72;
  }
  xpc_retain(v46);
  if (*(char *)(a3 + 23) < 0) {
    goto LABEL_71;
  }
LABEL_69:
  std::string v53 = *(std::string *)a3;
LABEL_72:
  v47 = *a5;
  if (*a5) {
    v47 = _Block_copy(v47);
  }
  aBlock = v47;
  dispatch_group_notify(v20, v45, block);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_80:
  dispatch_release(v20);
  uint64_t v48 = (std::__shared_weak_count *)v64;
  if (v64 && !atomic_fetch_add((atomic_ullong *volatile)(v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v11);
}

void sub_263704CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v39 - 168);
  std::__shared_weak_count::__release_weak(v38);
  xpc_release(v37);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = MEMORY[0x263E6A240](*(void *)(a1 + 40));
  uint64_t v8 = MEMORY[0x263EF8708];
  if (v7 != MEMORY[0x263EF8708]) {
    return;
  }
  if (a2 != -534716414)
  {
    xpc_object_t v11 = xpc_int64_create(a2);
    if (v11) {
      goto LABEL_12;
    }
LABEL_11:
    xpc_object_t v11 = xpc_null_create();
LABEL_12:
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult, v11);
    xpc_object_t v12 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v12);
    if (MEMORY[0x263E6A240](*a3) == v8)
    {
      xpc_object_t v13 = (xpc_object_t)*a3;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData, v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    goto LABEL_27;
  }
  if (*(_DWORD *)(v6 + 192) != 3)
  {
    xpc_object_t v11 = xpc_int64_create(-534716414);
    if (v11) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v9) == v8)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v15 = xpc_int64_create(-534716415);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult, v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_string_create("Server not available");
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x263F25EB8], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v10)
  {
    xpc_retain(v10);
    xpc_object_t v19 = v10;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData, v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_release(v10);
LABEL_27:
  uint64_t v22 = *(void **)(a1 + 40);
  xpc_object_t v21 = *(_xpc_connection_s **)(a1 + 48);

  xpc_connection_send_message(v21, v22);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    CFAllocatorRef v5 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  else
  {
    *(void *)(a1 + 40) = xpc_null_create();
    CFAllocatorRef v5 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v5;
    if (v5) {
      return xpc_retain(v5);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (xpc::object *)(a1 + 40);
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 40);
  if (v4)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
    xpc_object_t v24 = 0;
    xpc_object_t v25 = 0;
    CFAllocatorRef v5 = (void *)(v2 + 152);
    uint64_t v6 = *(void **)(v2 + 152);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v24 = 0;
    xpc_object_t v25 = 0;
    CFAllocatorRef v5 = (void *)(v2 + 152);
    uint64_t v6 = *(void **)(v2 + 152);
    if (!v6)
    {
LABEL_15:
      xpc_object_t v11 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4) {
      xpc_object_t v10 = v6;
    }
    else {
      xpc_object_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v5 || (unint64_t)v4 < v7[4]) {
    goto LABEL_15;
  }
  xpc_object_t v11 = (char *)v7[5];
  xpc_object_t v18 = (std::__shared_weak_count *)v7[6];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v24 = v11;
  xpc_object_t v25 = v18;
LABEL_16:
  xpc_release(v4);
  if (!v11)
  {
    xpc_object_t v16 = *(NSObject **)(v2 + 112);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    xpc::object::to_string((uint64_t *)&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315138;
    xpc_object_t v27 = p_p;
    _os_log_error_impl(&dword_26368A000, v16, OS_LOG_TYPE_ERROR, "%s is not in client list", buf, 0xCu);
    goto LABEL_36;
  }
  int v12 = *(unsigned __int8 *)(a1 + 56);
  xpc_object_t v13 = *(const void **)(a1 + 48);
  CFTypeRef cf = v13;
  if (v13) {
    CFRetain(v13);
  }
  ServerClientState::registerNotification_sync((void **)&v24, v12 != 0, &cf);
  if (cf) {
    CFRelease(cf);
  }
  xpc_object_t v14 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v24[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v24, *((void *)v24 + 1));
    }
    else
    {
      long long v15 = *(_OWORD *)v24;
      __p.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    }
    xpc_object_t v19 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      xpc_object_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v20 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    xpc_object_t v27 = v19;
    __int16 v28 = 2112;
    uint64_t v29 = v20;
    _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s registered for: %@", buf, 0x16u);
LABEL_36:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_38:
  xpc_object_t v21 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_2637054C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2637054D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2637054E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (!v4)
  {
    *(void *)(a1 + 40) = xpc_null_create();
    CFTypeRef result = *(CFTypeRef *)(a2 + 48);
    *(void *)(a1 + 48) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  xpc_retain(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v3 = *(ctu **)(a1 + 64);
    uint64_t v7 = v3;
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  std::string v8 = *(std::string *)(a1 + 40);
  uint64_t v3 = *(ctu **)(a1 + 64);
  uint64_t v7 = v3;
  if (v3) {
LABEL_5:
  }
    CFRetain(v3);
LABEL_6:
  xpc_object_t v4 = *(const void **)(a1 + 72);
  if (v4) {
    CFAllocatorRef v5 = _Block_copy(v4);
  }
  else {
    CFAllocatorRef v5 = 0;
  }
  uint64_t v6 = v5;
  ABMServerInternal::broadcast_sync(v2, (uint64_t)&v8, &v7, &v6);
  if (v5) {
    _Block_release(v5);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_2637056C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    _Block_release(v16);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v6 = *(const void **)(a2 + 64);
    *(void *)(a1 + 64) = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  uint64_t v6 = *(const void **)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  CFTypeRef result = *(void **)(a2 + 72);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  *(void *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3) {
    CFRelease(v3);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    xpc_object_t v4 = *(void **)(a1 + 40);
    operator delete(v4);
  }
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(void *)(a1 + 32), xpc_object_t v4 = std::__shared_weak_count::lock(v2), (v15 = v4) != 0))
  {
    long long v5 = v4;
    if (*(void *)(a1 + 40))
    {
      uint64_t v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(long long **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        xpc_object_t v11 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          xpc_object_t v11 = (void *)*v11;
        }
        uint64_t v12 = *(void *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        xpc_object_t v17 = p_p;
        __int16 v18 = 2080;
        xpc_object_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = v12;
        _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    BOOL v9 = *(NSObject **)(a1 + 104);
    dispatch_group_leave(v9);
  }
}

void sub_2637059B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v4 = *(void *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_263705A64(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  std::string::size_type v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
LABEL_6:
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_7:

  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::pair<xpc::connection const,ServerClientState>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_32(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::string::size_type v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*(void *)(a1 + 40))
      {
        long long v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          long long v6 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            long long v6 = (void *)*v6;
          }
          *(_DWORD *)buf = 136315138;
          long long v8 = v6;
          _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I All clients responded to %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    std::string::size_type v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_263705CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  CFTypeRef result = *(void **)(a2 + 80);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  a1[10] = result;
  return result;
}

void sub_263705D78(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 80);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(void *)(a1 + 32), uint64_t v4 = std::__shared_weak_count::lock(v2), (v15 = v4) != 0))
  {
    long long v5 = v4;
    if (*(void *)(a1 + 40))
    {
      long long v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(long long **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        xpc_object_t v11 = (void *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0) {
          xpc_object_t v11 = (void *)*v11;
        }
        uint64_t v12 = *(void *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        xpc_object_t v17 = p_p;
        __int16 v18 = 2080;
        xpc_object_t v19 = v11;
        __int16 v20 = 2048;
        uint64_t v21 = v12;
        _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 104);
    dispatch_group_leave(v9);
  }
}

void sub_263705FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_37(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v10 = 0;
  xpc_object_t v11 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    xpc_object_t v11 = v4;
    if (v4)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      if (v10)
      {
        long long v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((uint64_t *)__p, (xpc::object *)(a1 + 56));
          long long v6 = (void **)__p[0];
          if (v9 >= 0) {
            long long v6 = __p;
          }
          uint64_t v7 = (void *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          *(_DWORD *)buf = 136315394;
          xpc_object_t v13 = v6;
          __int16 v14 = 2080;
          long long v15 = v7;
          _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Client '%s' responded to %s", buf, 0x16u);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_26370615C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263706170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(void **)(a2 + 56);
  a1[7] = v5;
  if (v5)
  {
    xpc_retain(v5);
    long long v6 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_5:
      long long v7 = *(_OWORD *)(a2 + 64);
      v6->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      goto LABEL_8;
    }
  }
  else
  {
    a1[7] = xpc_null_create();
    long long v6 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_8:
  CFTypeRef result = *(void **)(a2 + 88);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  a1[11] = result;
  return result;
}

void sub_26370622C(_Unwind_Exception *a1)
{
  xpc::connection::~connection(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t ABMServer::previousShutdownWasClean(ABMServer *this)
{
  if (qword_26A99F6C8 != -1) {
    dispatch_once(&qword_26A99F6C8, &__block_literal_global_1);
  }
  return _MergedGlobals_2;
}

void ___ZN9ABMServer24previousShutdownWasCleanEv_block_invoke()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v18 = 17;
  strcpy(__p, "/tmp/abm.shutdown");
  v0.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v0.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v0;
  *(timespec *)v19.st_qspare = v0;
  v19.st_birthtimespec = v0;
  *(timespec *)&v19.st_size = v0;
  v19.st_mtimespec = v0;
  v19.st_ctimespec = v0;
  *(timespec *)&v19.st_uid = v0;
  v19.st_atimespec = v0;
  *(timespec *)&v19.st_dev = v0;
  int v1 = stat(__p, &v19);
  int v2 = v1;
  if (v18 < 0)
  {
    operator delete(*(void **)__p);
    if (v2) {
      goto LABEL_3;
    }
LABEL_12:
    GetABMLogServer(&v15);
    long long v8 = *((void *)GetGlobalLogger(&v15) + 4);
    char v9 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = "abmserver";
      _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Previous shutdown was not clean", (uint8_t *)&v19, 0xCu);
    }
    _MergedGlobals_2 = 0;
    return;
  }
  if (!v1) {
    goto LABEL_12;
  }
LABEL_3:
  _MergedGlobals_2 = 1;
  HIBYTE(v19.st_gid) = 17;
  strcpy((char *)&v19, "/tmp/abm.shutdown");
  int v3 = open((const char *)&v19, 513, 420);
  int v4 = v3;
  if (SHIBYTE(v19.st_gid) < 0)
  {
    operator delete(*(void **)&v19.st_dev);
    if (v4 >= 1)
    {
      do
      {
LABEL_5:
        if (!close(v4)) {
          return;
        }
      }
      while (*__error() == 4);
      GetABMLogServer(&v13);
      long long v5 = *((void *)GetGlobalLogger(&v13) + 4);
      long long v6 = v14;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        return;
      }
      v19.st_dev = 136315394;
      *(void *)&v19.st_mode = "abmserver";
      WORD2(v19.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
      long long v7 = "%s: Failed closing %s";
      goto LABEL_27;
    }
  }
  else if (v3 >= 1)
  {
    goto LABEL_5;
  }
  GetABMLogServer(&v11);
  long long v5 = *((void *)GetGlobalLogger(&v11) + 4);
  uint64_t v10 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v19.st_dev = 136315394;
    *(void *)&v19.st_mode = "abmserver";
    WORD2(v19.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&v19.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    long long v7 = "%s: Failed creating %s";
LABEL_27:
    _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v19, 0x16u);
  }
}

void sub_263706670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263706684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263706698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2637066AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServer::getRunLoop(ABMServer *this)
{
  return *(void *)(*(void *)this + 208);
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "server.main");
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA8EE0;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA8EE0;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__on_zero_shared(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count ***)(a1 + 24);
  if (v1)
  {
    int v2 = v1[1];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      int v3 = v1;
    }
    else
    {
      int v3 = v1;
    }
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A770ELL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A770ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A770ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A770ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void *std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8F70;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_263706A48(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_263706A70(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_"
                     "ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3_"
                                "_110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA8FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<Registry>::__on_zero_shared(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }
  else
  {
    unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v3);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    xpc_release((xpc_object_t)a1[4]);
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_(void *a1)
{
  int v2 = (void *)*a1;
  unint64_t v3 = *(void **)*a1;
  int v4 = (void **)(*a1 + 8);
  if (*(char *)(*a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    v14.__r_.__value_.__r.__words[2] = *(void *)(*a1 + 24);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = (ctu *)v2[4];
  uint64_t v13 = v6;
  if (v6) {
    CFRetain(v6);
  }
  long long v7 = (const void *)v2[5];
  if (v7) {
    long long v8 = _Block_copy(v7);
  }
  else {
    long long v8 = 0;
  }
  uint64_t v12 = v8;
  ABMServerInternal::broadcast_sync(v3, (uint64_t)&v14, &v13, &v12);
  if (v8) {
    _Block_release(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    char v9 = (const void *)v2[5];
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  char v9 = (const void *)v2[5];
  if (v9) {
LABEL_17:
  }
    _Block_release(v9);
LABEL_18:
  uint64_t v10 = (const void *)v2[4];
  if (v10) {
    CFRelease(v10);
  }
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v4);
  }
  operator delete(v2);
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_263706E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v20 = *(const void **)(v17 + 40);
  if (v20) {
    _Block_release(v20);
  }
  uint64_t v21 = *(const void **)(v17 + 32);
  if (v21) {
    CFRelease(v21);
  }
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  operator delete((void *)v17);
  uint64_t v22 = (std::__shared_weak_count *)v16[2];
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void *___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      int v4 = v3;
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    long long v5 = (void *)a2;
    do
    {
      int v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      long long v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  long long v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  long long v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));

  operator delete((void *)a2);
}

uint64_t ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, const __CFString **a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  long long v8 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a3, (const char *)0x8000100, a4, v9);
  uint64_t v10 = value;
  if (v8) {
    BOOL v11 = value == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (v11)
  {
    if (!value) {
      goto LABEL_11;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, value);
  }
  CFRelease(v10);
LABEL_11:
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

void sub_263707100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_263707124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (BOOL v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  long long v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA9008;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::__shared_weak_count_vtbl **sys::UIObserver::create_default_global@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = (sys::UIObserver *)operator new(0x40uLL);
  sys::UIObserver::UIObserver(v3);

  return std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_263707390(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

sys::UIObserver *sys::UIObserver::UIObserver(sys::UIObserver *this)
{
  uint64_t v2 = dispatch_queue_create("sys::UIObserver", 0);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v2;
  if (v2)
  {
    unint64_t v3 = v2;
    dispatch_retain(v2);
    *((void *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  *((void *)this + 4) = &unk_270EA9128;
  int v4 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>((void *)this + 5, (uint64_t)v4);
  *((void *)this + 7) = 0xFFFFFFFF00000000;
  return this;
}

void sub_263707460(_Unwind_Exception *a1)
{
  operator delete(v2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_26370747C(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

uint64_t sys::UIObserver::handleDisplayLockedChange_sync(uint64_t this)
{
  if (*(_DWORD *)(this + 60) != -1)
  {
    uint64_t v1 = this;
    char v2 = SBSGetScreenLockStatus() != 0;
    return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v1 + 40), v2);
  }
  return this;
}

void sys::UIObserver::registerForScreenLockedNotification_sync(sys::UIObserver *this)
{
  char v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (v3 = *(void *)this, (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_19;
  v7[4] = v3;
  long long v8 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  notify_register_dispatch("com.apple.springboard.lockstate", (int *)this + 15, *((dispatch_queue_t *)this + 2), v7);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2637075F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5 && *(_DWORD *)(v5 + 60) != -1)
      {
        char v6 = SBSGetScreenLockStatus() != 0;
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 40), v6);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2637076E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sys::UIObserver::unregisterForScreenLockedNotification_sync(sys::UIObserver *this)
{
  uint64_t result = *((unsigned int *)this + 15);
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *((_DWORD *)this + 15) = -1;
  }
  return result;
}

void sys::UIObserver::observe(sys::UIObserver *this@<X0>, char a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  int v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4 || (v7 = *(void *)this, (long long v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFAllocatorRef v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3sys10UIObserver7observeEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_3;
  aBlock[4] = this;
  aBlock[5] = v7;
  uint64_t v20 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v11 = _Block_copy(aBlock);
  uint64_t v12 = v11;
  if (v11) {
    uint64_t v13 = (void (__cdecl *)(std::__shared_weak_count *__hidden))_Block_copy(v11);
  }
  else {
    uint64_t v13 = 0;
  }
  v10->~__shared_weak_count = v13;
  *a3 = v10;
  std::string v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9370;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v10;
  a3[1] = (std::__shared_weak_count_vtbl *)v14;
  if (v12) {
    _Block_release(v12);
  }
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  v16[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_7;
  v16[3] = &__block_descriptor_tmp_8_0;
  v16[4] = this;
  v16[5] = v10;
  uint64_t v17 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  char v18 = a2;
  ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped((uint64_t *)this, (uint64_t)v16);
  uint64_t v15 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_2637079A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  (*(void (**)(uint64_t))(v27 + 16))(v27);
  if (*v25) {
    _Block_release(*v25);
  }
  operator delete(v25);
  if (v26) {
    _Block_release(v26);
  }
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      char v6 = (uint64_t *)a1[5];
      if (v6)
      {
        v7[0] = MEMORY[0x263EF8330];
        v7[1] = 0x40000000;
        v7[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_2;
        v7[3] = &__block_descriptor_tmp_5;
        v7[4] = v3;
        ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(v6, (uint64_t)v7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZN3sys10UIObserver7observeEb_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(_DWORD *)(v1 + 56) - 1;
  *(_DWORD *)(v1 + 56) = v2;
  if (!v2)
  {
    uint64_t result = *(unsigned int *)(v1 + 60);
    if (result != -1)
    {
      uint64_t result = notify_cancel(result);
      *(_DWORD *)(v1 + 60) = -1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3sys10UIObserver7observeEb_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 56) = v3 + 1;
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  else
  {
    sys::UIObserver::registerForScreenLockedNotification_sync((sys::UIObserver *)v2);
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
  }
  if (*(_DWORD *)(v2 + 60) != -1)
  {
    char v4 = SBSGetScreenLockStatus() != 0;
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v2 + 40), v4);
  }
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::__shared_weak_count_vtbl **std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  char v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA90D8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  std::string __p = 0;
  if (!a2) {
    return a1;
  }
  char v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (!v6)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_7:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_8:
  uint64_t v7 = __p;
  std::string __p = 0;
  if (v7) {
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&__p, v7);
  }
  return a1;
}

void sub_263707DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A7A58) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A7A58 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A7A58)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A7A58 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::default_delete<sys::UIObserver>::operator()[abi:ne180100](int a1, void *__p)
{
  if (__p)
  {
    __p[4] = &unk_270EA9128;
    uint64_t v3 = (atomic_uint *)__p[6];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    char v4 = __p[3];
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = __p[2];
    if (v5) {
      dispatch_release(v5);
    }
    char v6 = (std::__shared_weak_count *)__p[1];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(__p);
  }
}

void *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_270EA9128;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *__p)
{
  *std::string __p = &unk_270EA9128;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  char v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  void *v4 = &unk_270EA92A8;
  v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2637081DC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_2637082FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)operator new(0x20uLL);
  uint64_t v14 = (uint64_t)&v14;
  uint64_t v15 = &v14;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v16 = 0;
  uint64_t v17 = v18;
  uint64_t v3 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v3, (uint64_t)&v14);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v2, (uint64_t)v3);
  char v4 = operator new(1uLL);
  v2[2] = (uint64_t)v4;
  v2[3] = 0;
  uint64_t v5 = operator new(0x18uLL);
  v5[1] = 0x100000001;
  void *v5 = &unk_270EA91E8;
  v5[2] = v4;
  v2[3] = (uint64_t)v5;
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18[0]);
  if (v16)
  {
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    uint64_t v8 = *v15;
    *(void *)(v8 + 8) = *(void *)(v14 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v16 = 0;
    if (v7 != &v14)
    {
      do
      {
        CFAllocatorRef v9 = (uint64_t *)v7[1];
        uint64_t v10 = (atomic_uint *)v7[3];
        if (v10)
        {
          if (atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
            if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
            }
          }
        }
        operator delete(v7);
        uint64_t v7 = v9;
      }
      while (v9 != &v14);
    }
  }
  a1[2] = *(void *)*a1;
  BOOL v11 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v11, 0);
  a1[3] = (uint64_t)v11;
  a1[4] = 0;
  uint64_t v12 = operator new(0x18uLL);
  v12[1] = 0x100000001;
  *uint64_t v12 = &unk_270EA9248;
  v12[2] = v11;
  a1[4] = (uint64_t)v12;
  return a1;
}

void sub_263708590(void *a1)
{
  __cxa_begin_catch(a1);
  pthread_mutex_destroy(v1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_2637085A8()
{
}

void sub_26370869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  BOOL v11 = (atomic_uint *)v9[3];
  if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
    if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr((uint64_t)v9);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_263708754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v11 = v10;
  operator delete(v11);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_26370877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  char v37 = a2;
  xpc_object_t v35 = 0;
  xpc_object_t v36 = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v3;
  long long v50 = v3;
  long long v47 = v3;
  long long v48 = v3;
  long long v45 = v3;
  long long v46 = v3;
  long long v43 = v3;
  long long v44 = v3;
  long long v41 = v3;
  long long v42 = v3;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v41;
  v52[0] = 0;
  v52[1] = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    uint64_t v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  uint64_t v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v38 = v8;
      CFAllocatorRef v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v38 = a1[2];
      CFAllocatorRef v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v38);
      uint64_t v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  BOOL v11 = v36;
  xpc_object_t v35 = v7;
  xpc_object_t v36 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v52[1]);
  uint64_t v12 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v52[0][-1].__opaque[55] >= 0)
    {
      uint64_t v13 = (char *)__p[1] + 16 * (uint64_t)v52[0];
      do
      {
        uint64_t v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v54 = v15;
  long long v55 = v15;
  *(_OWORD *)v52 = v15;
  long long v53 = v15;
  long long v50 = v15;
  *(_OWORD *)std::string __p = v15;
  long long v48 = v15;
  long long v49 = v15;
  long long v46 = v15;
  long long v47 = v15;
  long long v44 = v15;
  long long v45 = v15;
  long long v42 = v15;
  long long v43 = v15;
  long long v41 = v15;
  LOBYTE(v41) = 0;
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v57 = 10;
  xpc_object_t v58 = (char *)&v41 + 8;
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = &v37;
  uint64_t v16 = v35;
  uint64_t v17 = (uint64_t)*v35;
  unint64_t v32 = &v41;
  BOOL v33 = a1;
  uint64_t v34 = v17;
  *(void *)&long long v30 = *(void *)(v17 + 8);
  *((void *)&v30 + 1) = v17;
  *(void *)&long long v31 = &v41;
  *((void *)&v31 + 1) = v17;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v30);
  v29[0] = *v16;
  v29[1] = v29[0];
  v29[2] = &v41;
  v29[3] = v29[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v29);
  long long v38 = v30;
  long long v39 = v31;
  uint64_t v18 = v29[0];
  uint64_t v19 = v30;
  if ((void)v30 == v29[0])
  {
    if (HIDWORD(v61) <= v61) {
      goto LABEL_48;
    }
LABEL_47:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v33, v34);
    goto LABEL_48;
  }
  uint64_t v20 = (unsigned char *)v39;
  if (!*(unsigned char *)v39)
  {
    uint64_t v21 = *(void *)(*(void *)(v30 + 16) + 32);
    uint64_t v22 = *(void *)(v21 + 24);
    if (!v22)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_270EA5920;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t, void))((v22 & 0xFFFFFFFFFFFFFFFELL) + 8))(v21 + 32, **(unsigned __int8 **)(v39 + 272));
    if (!*v20) {
      *uint64_t v20 = 1;
    }
  }
  *(void *)&long long v38 = *(void *)(v19 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
  uint64_t v23 = v39;
  if (*(unsigned char *)v39) {
    *(unsigned char *)long long v39 = 0;
  }
  for (uint64_t i = v38; (void)v38 != v18; uint64_t i = v38)
  {
    uint64_t v25 = *(void *)(*(void *)(i + 16) + 32);
    uint64_t v26 = *(void *)(v25 + 24);
    if (!v26)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_270EA5920;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t, void))((v26 & 0xFFFFFFFFFFFFFFFELL) + 8))(v25 + 32, **(unsigned __int8 **)(v23 + 272));
    if (!*(unsigned char *)v23) {
      *(unsigned char *)uint64_t v23 = 1;
    }
    *(void *)&long long v38 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
    uint64_t v23 = v39;
    if (*(unsigned char *)v39) {
      *(unsigned char *)long long v39 = 0;
    }
  }
  if (*((_DWORD *)v32 + 71) > *((_DWORD *)v32 + 70)) {
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v41);
  __int16 v28 = v36;
  if (v36 && atomic_fetch_add(v36 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 16))(v28);
    if (atomic_fetch_add(v28 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v28 + 24))(v28);
    }
  }
  return result;
}

void sub_2637091C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_2637091D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_263709238(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x263709208);
}

void sub_263709270(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      size_t v51 = &__p[16 * a51];
      do
      {
        v52 = (atomic_uint *)*((void *)v51 - 1);
        if (v52)
        {
          if (atomic_fetch_add(v52 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v52 + 16))(v52);
            if (atomic_fetch_add(v52 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v52 + 24))(v52);
            }
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x263709360);
}

void sub_26370933C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x263709368);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v69[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  uint64_t v2 = a1;
  if (v1 == a1[1])
  {
LABEL_94:
    uint64_t v47 = v2[3];
    if (v47 != v1)
    {
      *(void *)&long long v48 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v65 = v48;
      long long v66 = v48;
      long long v63 = v48;
      long long v64 = v48;
      long long v61 = v48;
      long long v62 = v48;
      long long v59 = v48;
      long long v60 = v48;
      long long v57 = v48;
      long long v58 = v48;
      uint64_t v49 = *(void *)(v47 + 16);
      *(void *)&long long v67 = 10;
      *((void *)&v67 + 1) = &v57;
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = v49;
      (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
      uint64_t v50 = v2[2];
      v2[3] = v2[1];
      size_t v51 = *(_DWORD **)(v50 + 288);
      if (v51) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v51, &v57);
      }
      *(void *)(v50 + 288) = 0;
      (*(void (**)(void))(**((void **)&v68 + 1) + 32))(*((void *)&v68 + 1));
      unint64_t v52 = *((void *)&v67 + 1);
      if (*((void *)&v67 + 1))
      {
        if ((uint64_t)v68 - 1 >= 0)
        {
          unint64_t v53 = *((void *)&v67 + 1) + 16 * v68;
          do
          {
            long long v54 = *(atomic_uint **)(v53 - 8);
            if (v54)
            {
              if (atomic_fetch_add(v54 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v54 + 16))(v54);
                if (atomic_fetch_add(v54 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v54 + 24))(v54);
                }
              }
            }
            v53 -= 16;
          }
          while (v53 > v52);
        }
        if ((unint64_t)v67 >= 0xB) {
          operator delete(*((void **)&v67 + 1));
        }
      }
    }
    return;
  }
  while (1)
  {
    uint64_t v3 = v2[2];
    uint64_t v4 = *(void *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        uint64_t v11 = *(void *)(v3 + 264);
      }
      else
      {
        unint64_t v5 = *(void *)(v3 + 256);
        unint64_t v6 = v5 + 24 * v4;
        unint64_t v7 = v6;
        do
        {
          int v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            CFAllocatorRef v9 = *(atomic_uint **)(v6 - 8);
            if (v9)
            {
              if (atomic_fetch_add(v9 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v9 + 16))(v9);
                if (atomic_fetch_add(v9 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v9 + 24))(v9);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = *(void *)(v6 - 16);
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
            }
          }
          unint64_t v6 = v7;
        }
        while (v7 > v5);
        uint64_t v11 = *(void *)(v3 + 264);
        uint64_t v1 = *v2;
      }
      *(void *)(v3 + 264) = v11 - v4;
    }
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v67 = v12;
    long long v68 = v12;
    long long v65 = v12;
    long long v66 = v12;
    long long v63 = v12;
    long long v64 = v12;
    long long v61 = v12;
    long long v62 = v12;
    long long v59 = v12;
    long long v60 = v12;
    long long v57 = v12;
    long long v58 = v12;
    uint64_t v13 = *(void *)(v1 + 16);
    *(void *)&long long v67 = 10;
    *((void *)&v67 + 1) = &v57;
    *(void *)&long long v68 = 0;
    *((void *)&v68 + 1) = v13;
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    uint64_t v14 = *v2;
    uint64_t v15 = *(void *)(*v2 + 16);
    uint64_t v16 = v2[2];
    uint64_t v17 = *(uint64_t **)(v15 + 32);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17 != v17[1])
      {
        while (1)
        {
          memset(v69, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v18, (uint64_t)v69);
          if ((*(_DWORD *)v18 ^ (*(int *)v18 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v18 + 8) + 24))(*(void *)(v18 + 8))) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v19 = *(void *)(v18 + 16);
            if (v19 && atomic_load_explicit((atomic_uint *volatile)(v19 + 8), memory_order_acquire))
            {
LABEL_22:
              uint64_t v20 = *(void *)(v16 + 264);
              if (v20 == *(void *)(v16 + 248))
              {
                if (v20 == -1)
                {
                  uint64_t v22 = *(void **)(v16 + 256);
                }
                else
                {
                  if (4 * v20 <= (unint64_t)(v20 + 1)) {
                    unint64_t v21 = v20 + 1;
                  }
                  else {
                    unint64_t v21 = 4 * v20;
                  }
                  uint64_t v22 = (void *)(v16 + 8);
                  unint64_t v56 = v21;
                  if (v21 >= 0xB)
                  {
                    if (v21 >= 0xAAAAAAAAAAAAAABLL) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v22 = operator new(24 * v21);
                  }
                  uint64_t v23 = *(void *)(v16 + 256);
                  if (v20)
                  {
                    unint64_t v24 = 0;
                    uint64_t v25 = v23 + 24 * v20;
                    do
                    {
                      uint64_t v26 = (char *)&v22[v24 / 8];
                      uint64_t v27 = v23 + v24;
                      uint64_t v28 = *(void *)(v23 + v24 + 8);
                      if (*(_DWORD *)(v23 + v24) == *(int *)(v23 + v24) >> 31)
                      {
                        *((void *)v26 + 1) = v28;
                        uint64_t v29 = *(void *)(v27 + 16);
                        *((void *)v26 + 2) = v29;
                        if (v29) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 1u, memory_order_relaxed);
                        }
                      }
                      else
                      {
                        *((void *)v26 + 1) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
                      }
                      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27 ^ (*(int *)v27 >> 31);
                      v24 += 24;
                    }
                    while (v27 + 24 != v25);
                    uint64_t v23 = *(void *)(v16 + 256);
                    uint64_t v2 = a1;
                  }
                  if (v23) {
                    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(v16 + 8));
                  }
                  *(void *)(v16 + 248) = v56;
                  *(void *)(v16 + 256) = v22;
                  uint64_t v20 = *(void *)(v16 + 264);
                }
                xpc_object_t v36 = &v22[3 * v20 + 1];
                if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
                {
                  void *v36 = v69[1];
                  uint64_t v37 = v69[2];
                  v22[3 * v20 + 2] = v69[2];
                  if (v37) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 1u, memory_order_relaxed);
                  }
                }
                else
                {
                  void *v36 = (*(uint64_t (**)(void))(*(void *)v69[1] + 16))(v69[1]);
                }
                xpc_object_t v35 = (int *)&v22[3 * v20];
              }
              else
              {
                uint64_t v32 = *(void *)(v16 + 256);
                BOOL v33 = (void *)(v32 + 24 * v20 + 8);
                if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
                {
                  void *v33 = v69[1];
                  uint64_t v34 = v69[2];
                  *(void *)(v32 + 24 * v20 + 16) = v69[2];
                  if (v34) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 1u, memory_order_relaxed);
                  }
                }
                else
                {
                  void *v33 = (*(uint64_t (**)(void))(*(void *)v69[1] + 16))(v69[1]);
                }
                xpc_object_t v35 = (int *)(v32 + 24 * v20);
              }
              char v30 = 0;
              *xpc_object_t v35 = LODWORD(v69[0]) ^ (SLODWORD(v69[0]) >> 31);
              ++*(void *)(v16 + 264);
              if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31) {
                goto LABEL_41;
              }
              goto LABEL_61;
            }
          }
          if (*(unsigned char *)(v15 + 24))
          {
            *(unsigned char *)(v15 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v15, &v57);
          }
          char v30 = 1;
          if (LODWORD(v69[0]) == SLODWORD(v69[0]) >> 31)
          {
LABEL_41:
            uint64_t v31 = (atomic_uint *)v69[2];
            if (v69[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v69[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                }
              }
            }
            goto LABEL_63;
          }
LABEL_61:
          if (v69[1]) {
            (*(void (**)(void))(*(void *)v69[1] + 8))(v69[1]);
          }
LABEL_63:
          if ((v30 & 1) == 0)
          {
            v18 += 24;
            if (v18 != *(void *)(*(void *)(v15 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v14 = *v2;
          uint64_t v15 = *(void *)(*v2 + 16);
          uint64_t v16 = v2[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v15 + 24))
    {
      ++*(_DWORD *)(v16 + 280);
      uint64_t v38 = *(void *)(v15 + 16);
      if (v38)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v38 + 8), memory_order_acquire))
        {
          int v39 = 1;
          goto LABEL_80;
        }
        uint64_t v16 = v2[2];
        uint64_t v14 = *v2;
      }
      v2[3] = v14;
      if (v2[1] == v14)
      {
        long long v42 = *(_DWORD **)(v16 + 288);
        if (v42) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v42, &v57);
        }
        int v39 = 0;
        *(void *)(v16 + 288) = 0;
      }
      else
      {
        uint64_t v40 = *(void *)(v14 + 16);
        long long v41 = *(_DWORD **)(v16 + 288);
        if (v41) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v41, &v57);
        }
        *(void *)(v16 + 288) = v40;
        int v39 = 0;
        if (v40) {
          ++*(_DWORD *)(v40 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v16 + 284);
      int v39 = 1;
    }
LABEL_80:
    (*(void (**)(void))(**((void **)&v68 + 1) + 32))(*((void *)&v68 + 1));
    unint64_t v43 = *((void *)&v67 + 1);
    if (*((void *)&v67 + 1))
    {
      if ((uint64_t)v68 - 1 >= 0)
      {
        unint64_t v44 = *((void *)&v67 + 1) + 16 * v68;
        do
        {
          long long v45 = *(atomic_uint **)(v44 - 8);
          if (v45)
          {
            if (atomic_fetch_add(v45 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v45 + 16))(v45);
              if (atomic_fetch_add(v45 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v45 + 24))(v45);
              }
            }
          }
          v44 -= 16;
        }
        while (v44 > v43);
      }
      if ((unint64_t)v67 >= 0xB) {
        operator delete(*((void **)&v67 + 1));
      }
    }
    uint64_t v1 = *v2;
    uint64_t v46 = v2[1];
    if (!v39) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    *uint64_t v2 = v1;
    if (v1 == v46)
    {
      uint64_t v1 = v46;
      goto LABEL_94;
    }
  }
  if (v1 == v46) {
    goto LABEL_94;
  }
}

void sub_263709C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263709CA0(_Unwind_Exception *a1)
{
  unint64_t v3 = v1[21];
  if (v3)
  {
    uint64_t v4 = v1[22];
    if (v4 - 1 >= 0)
    {
      unint64_t v5 = v3 + 16 * v4;
      do
      {
        unint64_t v6 = *(atomic_uint **)(v5 - 8);
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        v5 -= 16;
      }
      while (v5 > v3);
    }
    if (v1[20] >= 0xBuLL)
    {
      operator delete((void *)v1[21]);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x263709FACLL);
}

void sub_263709E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v5 - 128);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263709E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263709E80(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v3)
    {
      uint64_t v4 = (atomic_uint **)(v2 + 16);
      do
      {
        if (*((_DWORD *)v4 - 4) == *((int *)v4 - 4) >> 31)
        {
          uint64_t v5 = *v4;
          if (*v4 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        else
        {
          uint64_t v6 = (uint64_t)*(v4 - 1);
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        v4 += 3;
        v3 -= 24;
      }
      while (v3);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x263709FACLL);
}

void sub_263709F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_end_catch();
  if (a4 >= 0xB)
  {
    operator delete(v5);
    boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v6 - 128);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x263709E4CLL);
}

void sub_263709FA4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2 && v2 - 1 >= 0)
  {
    unint64_t v3 = a1[31];
    unint64_t v4 = v3 + 24 * v2;
    unint64_t v5 = v4;
    do
    {
      int v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      if (v6 == v6 >> 31)
      {
        unint64_t v7 = *(atomic_uint **)(v4 - 8);
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v4 - 16);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      unint64_t v4 = v5;
    }
    while (v5 > v3);
  }
  if (a1[30] >= 0xBuLL)
  {
    CFAllocatorRef v9 = (void *)a1[31];
    operator delete(v9);
  }
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[8] = v4;
  v22[9] = v4;
  v22[6] = v4;
  v22[7] = v4;
  v22[4] = v4;
  v22[5] = v4;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v23 = 10;
  std::string __p = v22;
  uint64_t v25 = 0;
  uint64_t v26 = v5;
  pthread_mutex_lock(v5);
  if (**(void **)a1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1)
    {
      unint64_t v7 = (uint64_t *)operator new(0x20uLL);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      uint64_t v10 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v10, v9);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v7, (uint64_t)v10);
      v7[2] = v8[2];
      uint64_t v11 = v8[3];
      v7[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v21, (uint64_t)v7);
      long long v12 = *(uint64_t **)a1;
      uint64_t v13 = *(atomic_uint **)(a1 + 8);
      *(_OWORD *)a1 = v21;
      *(void *)&long long v21 = v12;
      *((void *)&v21 + 1) = v13;
      if (v13)
      {
        if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
          if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
          }
        }
      }
    }
    uint64_t v14 = *(uint64_t ***)a1;
    uint64_t v15 = **(uint64_t ***)a1;
    uint64_t v16 = v15[1];
    *(void *)&long long v21 = v16;
    if (v15 != (uint64_t *)v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          if (!*(unsigned char *)(v17 + 24)) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          *(void *)&long long v21 = v16;
          uint64_t v15 = *v14;
          if ((uint64_t *)v16 == *v14) {
            goto LABEL_15;
          }
        }
        uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v21);
        uint64_t v14 = *(uint64_t ***)a1;
        *(void *)&long long v21 = v16;
        uint64_t v15 = *v14;
      }
      while ((uint64_t *)v16 != *v14);
    }
LABEL_15:
    *(void *)(a1 + 16) = v16;
  }
  pthread_mutex_unlock(v26);
  uint64_t v18 = (char *)__p;
  if (__p)
  {
    if (v25 - 1 >= 0)
    {
      uint64_t v19 = (char *)__p + 16 * v25;
      do
      {
        uint64_t v20 = (atomic_uint *)*((void *)v19 - 1);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
            }
          }
        }
        v19 -= 16;
      }
      while (v19 > v18);
    }
    if (v23 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_26370A3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    long long v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        unint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_26370A6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA9330;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 24);
  if (v1)
  {
    (*((void (**)(void))*v1 + 2))();
    if (*v1) {
      _Block_release(*v1);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A7C9CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A7C9CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A7C9CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A7C9CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void AWDModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::supportsMultiClientAWD((capabilities::radio *)a1))
  {
    long long v4 = operator new(0xC0uLL);
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = *a1;
    unint64_t v7 = (std::__shared_weak_count *)a1[1];
    v11[0] = v6;
    v11[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AWDModule::AWDModule(v4, v11);
    *(void *)&long long block = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(&block, v5);
    ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(block + 48);
    long long v8 = block;
    long long block = 0uLL;
    *(_OWORD *)a2 = v8;
    if (v7)
    {
      uint64_t v10 = v8;
      std::__shared_weak_count::__release_weak(v7);
      *(void *)&long long v8 = v10;
    }
    uint64_t v12 = v8;
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 0x40000000;
    uint64_t v14 = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
    uint64_t v15 = &__block_descriptor_tmp_73;
    uint64_t v16 = v8 + 120;
    uint64_t v17 = &v12;
    unint64_t v9 = *(NSObject **)(v8 + 136);
    if (*(void *)(v8 + 144)) {
      dispatch_async_and_wait(v9, &block);
    }
    else {
      dispatch_sync(v9, &block);
    }
  }
}

void sub_26370AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v7);
  _Unwind_Resume(a1);
}

void sub_26370AC8C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AWDModule::init(AWDModule *this)
{
  uint64_t v3 = this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_73;
  block[4] = (char *)this + 120;
  block[5] = &v3;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void AWDModule::~AWDModule(AWDModule *this)
{
  *(void *)this = &unk_270EA93C0;
  *((void *)this + 6) = &unk_270EA9430;
  std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*((void **)this + 22));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *((void *)this + 6) = &unk_270EA97C0;
    MEMORY[0x263E68AF0]((char *)this + 56);
    uint64_t v3 = *((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *((void *)this + 6) = &unk_270EA97C0;
  MEMORY[0x263E68AF0]((char *)this + 56);
  uint64_t v3 = *((void *)this + 18);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  long long v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 4);
    long long v8 = (void *)*((void *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      long long v8 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v6;
    operator delete(v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  AWDModule::~AWDModule(this);

  operator delete(v1);
}

void *ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA97C0;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA97C0;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void non-virtual thunk to'AWDModule::~AWDModule(AWDModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  AWDModule::~AWDModule((AWDModule *)((char *)this - 48));

  operator delete(v1);
}

void *AWDModule::AWDModule(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_270EAD770;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v4);
    *a1 = &unk_270EA6BA0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    *a1 = &unk_270EA6BA0;
  }
  *a1 = &unk_270EA93C0;
  a1[6] = &unk_270EA9430;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v18, "com.apple.telephony.abm", "awd.mod");
  GetABMLogServer(&v16);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("awd.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    a1[18] = 0;
    dispatch_release(v6);
  }
  else
  {
    a1[18] = 0;
  }
  a1[6] = &unk_270EA97C0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v20);
  a1[7] = &unk_270EA5428;
  uint64_t v7 = v17;
  a1[13] = v16;
  a1[14] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  a1[6] = &unk_270EA9850;
  long long v8 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *a1 = &unk_270EA93C0;
  a1[6] = &unk_270EA9430;
  unint64_t v9 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v10 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v20, v9);
    long long v11 = v20;
    long long v20 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = off_26A99F170;
  }
  uint64_t v14 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  v19[0] = v10;
  v19[1] = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v10 + 64))(v10);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  a1[23] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_26370B39C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_26370B3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_26370B428(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *AWDModule::getName(AWDModule *this)
{
  return "awd.mod";
}

unsigned char *AWDModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *uint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AWDModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_20;
  uint64_t v5 = *a3;
  uint64_t v6 = (uint64_t *)(a1 + 120);
  v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9AWDModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AWDModule::initialize(uint64_t a1, NSObject **a2)
{
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  v5[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_20_0;
  uint64_t v3 = *a2;
  long long v4 = (uint64_t *)(a1 + 120);
  v5[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<AWDModule>::execute_wrapped(v4, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (long long v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x263F26310];
  size_t v7 = strlen((const char *)*MEMORY[0x263F26310]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v47 = v8;
    unint64_t v48 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v48) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_7;
  aBlock[4] = v1;
  aBlock[5] = v3;
  unint64_t v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  long long v45 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x263F26480];
  size_t v14 = strlen((const char *)*MEMORY[0x263F26480]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    size_t v47 = v15;
    unint64_t v48 = v18 | 0x8000000000000000;
    __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v48) = v14;
  uint64_t v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 1174405120;
  v40[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v40[3] = &__block_descriptor_tmp_9_1;
  v40[4] = v1;
  v40[5] = v3;
  long long v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v19 = _Block_copy(v40);
  long long v42 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v42);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  long long v20 = (const void *)*MEMORY[0x263F25FF0];
  size_t v21 = strlen((const char *)*MEMORY[0x263F25FF0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    unint64_t v23 = (void **)operator new(v24 + 1);
    size_t v47 = v22;
    unint64_t v48 = v25 | 0x8000000000000000;
    __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v48) = v21;
  unint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 1174405120;
  v37[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10;
  v37[3] = &__block_descriptor_tmp_13_2;
  v37[4] = v1;
  v37[5] = v3;
  uint64_t v38 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v37);
  int v39 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v39);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  uint64_t v27 = (const void *)*MEMORY[0x263F26340];
  size_t v28 = strlen((const char *)*MEMORY[0x263F26340]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    char v30 = (void **)operator new(v31 + 1);
    size_t v47 = v29;
    unint64_t v48 = v32 | 0x8000000000000000;
    __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v48) = v28;
  char v30 = (void **)&__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 1174405120;
  v34[2] = ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v34[3] = &__block_descriptor_tmp_17;
  v34[4] = v1;
  v34[5] = v3;
  xpc_object_t v35 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v33 = _Block_copy(v34);
  xpc_object_t v36 = v33;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v36);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_26370BBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      xpc_object_t v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32) {
          std::__shared_weak_count::__release_weak(a32);
        }
        uint64_t v37 = *(std::__shared_weak_count **)(v34 - 136);
        if (v37)
        {
          std::__shared_weak_count::__release_weak(v37);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  xpc_object_t v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      uint64_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      uint64_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    uint64_t v19 = operator new(0x28uLL);
    long long v20 = v19;
    *uint64_t v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_6(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      uint64_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      uint64_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    uint64_t v19 = operator new(0x28uLL);
    long long v20 = v19;
    *uint64_t v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_10(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      uint64_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      uint64_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    uint64_t v19 = operator new(0x28uLL);
    long long v20 = v19;
    *uint64_t v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_14(void *a1, xpc_object_t *a2, const void **a3)
{
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  size_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  char v9 = v8;
  uint64_t v10 = a1[5];
  if (v10)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[6];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = *a2;
    if (v12)
    {
      xpc_retain(v12);
      uint64_t v13 = *a3;
      if (*a3) {
        goto LABEL_8;
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      uint64_t v13 = *a3;
      if (*a3)
      {
LABEL_8:
        size_t v14 = _Block_copy(v13);
        size_t v15 = (std::__shared_weak_count *)v7[16];
        if (!v15) {
LABEL_24:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        goto LABEL_12;
      }
    }
    size_t v14 = 0;
    size_t v15 = (std::__shared_weak_count *)v7[16];
    if (!v15) {
      goto LABEL_24;
    }
LABEL_12:
    uint64_t v16 = v7[15];
    uint64_t v17 = std::__shared_weak_count::lock(v15);
    if (!v17) {
      goto LABEL_24;
    }
    uint64_t v18 = v17;
    uint64_t v19 = operator new(0x28uLL);
    long long v20 = v19;
    *uint64_t v19 = v10;
    v19[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    void v19[2] = v7;
    v19[3] = v12;
    xpc_object_t v21 = xpc_null_create();
    v20[4] = v14;
    size_t v22 = v7[17];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v23 = operator new(0x18uLL);
    void *v23 = v20;
    v23[1] = v16;
    v23[2] = v18;
    dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v21);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void AWDModule::sendPayload_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    char v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_22;
    uint64_t v10 = *(void **)a5;
    if (*(void *)a5) {
      uint64_t v10 = _Block_copy(v10);
    }
    size_t v15 = v10;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v6 + 56))(v6, &v17, a3, a4, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    else
    {
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    _Block_release(v12);
  }
  else
  {
    uint64_t v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_26368A000, v13, OS_LOG_TYPE_ERROR, "Cannot send payload because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a5 + 16))();
  }
}

void sub_26370C798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void AWDModule::enableMetricSubmission_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5)
  {
    size_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    uint64_t v16 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 1174405120;
    v12[2] = ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v12[3] = &__block_descriptor_tmp_25_0;
    size_t v8 = *(void **)a4;
    if (*(void *)a4) {
      size_t v8 = _Block_copy(v8);
    }
    uint64_t v13 = v8;
    aBlock = _Block_copy(v12);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(void *)v5 + 48))(v5, &v15, a3, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    char v9 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      uint64_t v10 = v13;
      if (!v13) {
        return;
      }
    }
    else
    {
      uint64_t v10 = v13;
      if (!v13) {
        return;
      }
    }
    _Block_release(v10);
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_26368A000, v11, OS_LOG_TYPE_ERROR, "Cannot enable metric submission because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
}

void sub_26370CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::clearConfiguration_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    size_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1174405120;
    v10[2] = ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_28_0;
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v11 = v6;
    aBlock = _Block_copy(v10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v4 + 64))(v4, &v13, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    else
    {
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    _Block_release(v8);
  }
  else
  {
    char v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "Cannot clear configuration because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a3 + 16))();
  }
}

void sub_26370CBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule23clearConfiguration_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::updateProperties_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    size_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1174405120;
    v10[2] = ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_31_0;
    uint64_t v6 = *(void **)a3;
    if (*(void *)a3) {
      uint64_t v6 = _Block_copy(v6);
    }
    uint64_t v11 = v6;
    aBlock = _Block_copy(v10);
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v4 + 72))(v4, &v13, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = v14;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    else
    {
      size_t v8 = v11;
      if (!v11) {
        return;
      }
    }
    _Block_release(v8);
  }
  else
  {
    char v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "Cannot update properties because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a3 + 16))();
  }
}

void sub_26370CDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule21updateProperties_syncENSt3__110shared_ptrIN3awd10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::queryMetric_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    char v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 1174405120;
    v14[2] = ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v14[3] = &__block_descriptor_tmp_34;
    uint64_t v10 = *(void **)a5;
    if (*(void *)a5) {
      uint64_t v10 = _Block_copy(v10);
    }
    uint64_t v15 = v10;
    aBlock = _Block_copy(v14);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v6 + 88))(v6, &v17, a3, a4, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v11 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    else
    {
      xpc_object_t v12 = v15;
      if (!v15) {
        return;
      }
    }
    _Block_release(v12);
  }
  else
  {
    uint64_t v13 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_26368A000, v13, OS_LOG_TYPE_ERROR, "Cannot query metric because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(void *)a5 + 16))();
  }
}

void sub_26370D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a13) {
    _Block_release(a13);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AWDModule::appCheckIn_sync(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v5 || (v7 = *(void *)(a1 + 120), (size_t v8 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (char *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (char *)operator new(0x58uLL);
  uint64_t v11 = v10;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_270EA9A18;
  xpc_object_t v12 = v10 + 24;
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    *((void *)v11 + 3) = v13;
    dispatch_retain(v13);
    *(_WORD *)(v11 + 33) = 0;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    v11[32] = a2;
    dispatch_release(v13);
  }
  else
  {
    *((void *)v10 + 3) = 0;
    *(_WORD *)(v10 + 33) = 0;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    v10[32] = a2;
  }
  *a3 = v12;
  a3[1] = v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  uint64_t v15 = (uint64_t **)(a1 + 176);
  size_t v14 = *(uint64_t **)(a1 + 176);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        unsigned int v17 = *((unsigned __int8 *)v14 + 32);
        if (v17 <= a2) {
          break;
        }
        size_t v14 = *v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_15;
        }
      }
      if (v17 >= a2) {
        break;
      }
      size_t v14 = v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_15;
      }
    }
    xpc_object_t v21 = v12;
    size_t v22 = (atomic_ullong *)v11;
    uint64_t v18 = v16;
LABEL_21:
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
    unint64_t v23 = (std::__shared_weak_count *)*((void *)v18 + 6);
    *((void *)v18 + 5) = v21;
    *((void *)v18 + 6) = v22;
    if (!v23) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v16 = (uint64_t **)(a1 + 176);
LABEL_15:
  uint64_t v18 = operator new(0x38uLL);
  *((unsigned char *)v18 + 32) = a2;
  *((void *)v18 + 5) = 0;
  *((void *)v18 + 6) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v16;
  void *v15 = (uint64_t *)v18;
  uint64_t v19 = **(void **)(a1 + 168);
  long long v20 = (uint64_t *)v18;
  if (v19)
  {
    *(void *)(a1 + 168) = v19;
    long long v20 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 176), v20);
  ++*(void *)(a1 + 184);
  xpc_object_t v21 = *a3;
  size_t v22 = (atomic_ullong *)a3[1];
  if (v22) {
    goto LABEL_21;
  }
  unint64_t v23 = (std::__shared_weak_count *)*((void *)v18 + 6);
  *((void *)v18 + 5) = v21;
  *((void *)v18 + 6) = 0;
  if (!v23)
  {
LABEL_23:
    uint64_t v24 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_22:
  if (atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  uint64_t v24 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
LABEL_24:
    uint64_t v25 = awd::asString();
    *(_DWORD *)buf = 136315138;
    uint64_t v45 = v25;
    _os_log_impl(&dword_26368A000, v24, OS_LOG_TYPE_DEFAULT, "#I New app checking-in: %s", buf, 0xCu);
  }
LABEL_25:
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_38_1;
  aBlock[4] = a1;
  aBlock[5] = v7;
  long long v42 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v43 = _Block_copy(aBlock);
  awd::AppContext::setHandler();
  if (v43) {
    _Block_release(v43);
  }
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 1174405120;
  v36[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_39;
  v36[3] = &__block_descriptor_tmp_41_0;
  v36[4] = a1;
  v36[5] = v7;
  uint64_t v37 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v38 = v12;
  int v39 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  uint64_t v40 = _Block_copy(v36);
  awd::AppContext::setHandler();
  if (v40) {
    _Block_release(v40);
  }
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 1174405120;
  v31[2] = ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_42;
  v31[3] = &__block_descriptor_tmp_46_0;
  v31[4] = a1;
  v31[5] = v7;
  uint64_t v32 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v33 = v12;
  uint64_t v34 = (std::__shared_weak_count *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
  xpc_object_t v35 = _Block_copy(v31);
  awd::AppContext::setHandler();
  if (v35) {
    _Block_release(v35);
  }
  if (*(void *)(a1 + 152))
  {
    uint64_t v26 = (std::__shared_weak_count *)a3[1];
    char v30 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    awd::AwdCommandDriver::checkIn();
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      uint64_t v27 = v34;
      if (!v34) {
        goto LABEL_41;
      }
LABEL_40:
      std::__shared_weak_count::__release_weak(v27);
      goto LABEL_41;
    }
LABEL_39:
    uint64_t v27 = v34;
    if (!v34) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  size_t v28 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    goto LABEL_39;
  }
  uint64_t v29 = awd::asString();
  *(_DWORD *)buf = 136315138;
  uint64_t v45 = v29;
  _os_log_error_impl(&dword_26368A000, v28, OS_LOG_TYPE_ERROR, "Cannot check in context of app %s because driver is unavailable", buf, 0xCu);
  uint64_t v27 = v34;
  if (v34) {
    goto LABEL_40;
  }
LABEL_41:
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_26370D604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  std::__shared_weak_count::__release_weak(v38);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v39);
  std::__shared_weak_count::__release_weak(v37);
  _Unwind_Resume(a1);
}

void sub_26370D6DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26370D6F8()
{
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke(void *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v8 = awd::asString();
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Client state: %s", buf, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_26370D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_39(void *a1, uint64_t a2, int *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  long long v42 = v7;
  if (!v7) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v13 = v7;
LABEL_52:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    return;
  }
  uint64_t v8 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Received trigger 0x%x", buf, 8u);
  }
  *(void *)buf = 0;
  unint64_t v44 = 0;
  uint64_t v10 = (std::__shared_weak_count *)a1[8];
  if (v10)
  {
    unint64_t v44 = std::__shared_weak_count::lock(v10);
    if (v44) {
      *(void *)buf = a1[7];
    }
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v11) == MEMORY[0x263EF8708])
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  unsigned int AppID = awd::AppContext::getAppID(*(awd::AppContext **)buf);
  xpc_object_t v15 = xpc_int64_create(AppID);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F268C8], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(a3[1]);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25E78], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_int64_create(a3[2]);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25EE8], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = xpc_int64_create(*a3);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25E38], v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  xpc_object_t v23 = xpc_int64_create(*((void *)a3 + 2));
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F25EE0], v23);
  xpc_object_t v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  uint64_t v25 = (const void *)*MEMORY[0x263F25DE0];
  size_t v26 = strlen((const char *)*MEMORY[0x263F25DE0]);
  if (v26 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v30 = v26 | 7;
    }
    uint64_t v31 = v30 + 1;
    size_t v28 = (void **)operator new(v30 + 1);
    __dst[1] = v27;
    unint64_t v40 = v31 | 0x8000000000000000;
    __dst[0] = v28;
LABEL_34:
    memmove(v28, v25, (size_t)v27);
    *((unsigned char *)v27 + (void)v28) = 0;
    xpc_object_t object = v12;
    if (v12) {
      goto LABEL_30;
    }
LABEL_35:
    xpc_object_t object = xpc_null_create();
    goto LABEL_36;
  }
  HIBYTE(v40) = v26;
  size_t v28 = __dst;
  if (v26) {
    goto LABEL_34;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v12;
  if (!v12) {
    goto LABEL_35;
  }
LABEL_30:
  xpc_retain(v12);
LABEL_36:
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v29);
  CFTypeRef v32 = cf;
  if (cf && (CFTypeID v33 = CFGetTypeID(cf), v33 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v38 = v32;
    CFRetain(v32);
  }
  else
  {
    CFTypeRef v38 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v6, (uint64_t)__dst, &v38, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v12);
  uint64_t v34 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  uint64_t v13 = v42;
  if (v42) {
    goto LABEL_52;
  }
}

void sub_26370DCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9AWDModuleEE56c41_ZTSNSt3__18weak_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN9AWDModule15appCheckIn_syncEN3awd5AppIDE_block_invoke_42(void *a1, int *a2, int a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (!v5) {
    return;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = std::__shared_weak_count::lock(v5);
  size_t v51 = v10;
  if (!v10) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v15 = v10;
LABEL_60:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  xpc_object_t v11 = *(NSObject **)(v9 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = a2[1];
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a3;
    LOWORD(v53) = 1024;
    *(_DWORD *)((char *)&v53 + 2) = v12;
    _os_log_impl(&dword_26368A000, v11, OS_LOG_TYPE_DEFAULT, "#I Received segment %d of metric 0x%x", buf, 0xEu);
  }
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (xpc_object_t v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v13) == MEMORY[0x263EF8708])
    {
      xpc_retain(v13);
      xpc_object_t v14 = v13;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t v13 = 0;
  }
  xpc_release(v13);
  *(void *)buf = 0;
  unint64_t v53 = 0;
  xpc_object_t v16 = (std::__shared_weak_count *)a1[8];
  if (v16)
  {
    xpc_object_t v16 = std::__shared_weak_count::lock(v16);
    unint64_t v53 = v16;
    if (v16)
    {
      xpc_object_t v16 = (std::__shared_weak_count *)a1[7];
      *(void *)buf = v16;
    }
  }
  unsigned int AppID = awd::AppContext::getAppID((awd::AppContext *)v16);
  xpc_object_t v18 = xpc_int64_create(AppID);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F268C8], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_int64_create(a2[3]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25E78], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(*a2);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25E08], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(a2[1]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25DC8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_BOOL_create(*((unsigned char *)a2 + 16));
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25DA8], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_BOOL_create(*((unsigned char *)a2 + 17));
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25F10], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if (*((unsigned char *)a2 + 24))
  {
    xpc_object_t v30 = xpc_int64_create(a2[5]);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25F08], v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  xpc_object_t v32 = xpc_data_create(*(const void **)a4, *(void *)(a4 + 8) - *(void *)a4);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x263F25DB0], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  uint64_t v34 = (const void *)*MEMORY[0x263F25DC0];
  size_t v35 = strlen((const char *)*MEMORY[0x263F25DC0]);
  if (v35 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v39 = v35 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v37 = (void **)operator new(v39 + 1);
    __dst[1] = v36;
    unint64_t v49 = v40 | 0x8000000000000000;
    __dst[0] = v37;
LABEL_42:
    memmove(v37, v34, (size_t)v36);
    *((unsigned char *)v36 + (void)v37) = 0;
    xpc_object_t object = v14;
    if (v14) {
      goto LABEL_38;
    }
LABEL_43:
    xpc_object_t object = xpc_null_create();
    goto LABEL_44;
  }
  HIBYTE(v49) = v35;
  uint64_t v37 = __dst;
  if (v35) {
    goto LABEL_42;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t object = v14;
  if (!v14) {
    goto LABEL_43;
  }
LABEL_38:
  xpc_retain(v14);
LABEL_44:
  xpc::bridge((uint64_t *)&cf, (xpc *)&object, v38);
  CFTypeRef v41 = cf;
  if (cf && (CFTypeID v42 = CFGetTypeID(cf), v42 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v47 = v41;
    CFRetain(v41);
  }
  else
  {
    CFTypeRef v47 = 0;
  }
  aBlock = 0;
  Service::broadcastEvent(v9, (uint64_t)__dst, &v47, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst[0]);
  }
  unint64_t v43 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  xpc_release(v14);
  xpc_object_t v15 = v51;
  if (v51) {
    goto LABEL_60;
  }
}

void sub_26370E448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA97C0;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA97C0;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_26370E870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_26370E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AWDModule>::shared_ptr[abi:ne180100]<AWDModule,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9800;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_26370E9B8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_26370E9E0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AWDModule *,std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule *)#1},std::allocator<AWDModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9AWDModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<AWDModule> ctu::SharedSynchronizable<AWDModule>::make_shared_ptr<AWDModule>(AWDModule*)::{lambda(AWDModule*)#1}::operator() const(AWDModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*a1);
    std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      unint64_t v3 = a1;
    }
    else
    {
      unint64_t v3 = a1;
    }
    operator delete(v3);
  }
}

void ctu::SharedLoggable<AWDModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA97C0;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI9AWDModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(**(void **)(a1 + 40) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

void ctu::SharedSynchronizable<AWDModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA9888;
  block[5] = v5;
  int v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9AWDModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v37 = 0;
  CFTypeRef v38 = &v37;
  uint64_t v39 = 0x2000000000;
  int v40 = -534716414;
  if (MEMORY[0x263E6A240](*(void *)(v2 + 24)) == MEMORY[0x263EF8708])
  {
    xpc_object_t value = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F268C8]);
    CFTypeRef v41 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      CFTypeRef v41 = (char *)xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
    xpc_release(v41);
    if (v13 != 1)
    {
      if (v13)
      {
        if ((v13 - 2) > 3u) {
          goto LABEL_2;
        }
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    uint64_t v15 = *(void *)(v3 + 176);
    if (!v15) {
      goto LABEL_33;
    }
    uint64_t v16 = v3 + 176;
    do
    {
      unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
      BOOL v18 = v17 >= v13;
      if (v17 >= v13) {
        xpc_object_t v19 = (uint64_t *)v15;
      }
      else {
        xpc_object_t v19 = (uint64_t *)(v15 + 8);
      }
      if (v18) {
        uint64_t v16 = v15;
      }
      uint64_t v15 = *v19;
    }
    while (*v19);
    if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
    {
      xpc_object_t v21 = *(char **)(v16 + 40);
      xpc_object_t v20 = *(std::__shared_weak_count **)(v16 + 48);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
LABEL_33:
      AWDModule::appCheckIn_sync(v3, v13, &v41);
      xpc_object_t v21 = v41;
      xpc_object_t v20 = (std::__shared_weak_count *)v42;
    }
    if (v21)
    {
      *((_DWORD *)v38 + 6) = -534716416;
      xpc_object_t v22 = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25EC0]);
      CFTypeRef v41 = v22;
      if (v22) {
        xpc_retain(v22);
      }
      else {
        CFTypeRef v41 = (char *)xpc_null_create();
      }
      unsigned __int8 v23 = xpc::dyn_cast_or_default((xpc *)&v41, (const object *)0xFFFFFFFFLL);
      xpc_release(v41);
      memset(__p, 170, sizeof(__p));
      xpc_object_t v24 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25DB0]);
      xpc_object_t object = v24;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      CFTypeRef v41 = 0;
      CFTypeID v42 = 0;
      uint64_t v43 = 0;
      xpc::dyn_cast_or_default();
      if (v41)
      {
        CFTypeID v42 = v41;
        operator delete(v41);
      }
      xpc_release(object);
      xpc_object_t v25 = __p[0];
      if (__p[1] != __p[0] && v23 <= 2u)
      {
        v34[0] = (uint64_t)v21;
        v34[1] = (uint64_t)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
        aBlock[3] = &unk_270EA98F8;
        aBlock[5] = v3;
        xpc_object_t v26 = *(void **)(v2 + 32);
        if (v26) {
          xpc_object_t v26 = _Block_copy(v26);
        }
        xpc_object_t v30 = v26;
        xpc_object_t v31 = v21;
        xpc_object_t v32 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        aBlock[4] = &v37;
        xpc_object_t v27 = _Block_copy(aBlock);
        xpc_object_t v33 = v27;
        AWDModule::sendPayload_sync(v3, v34, v23, (uint64_t)__p, (uint64_t)&v33);
        if (v27) {
          _Block_release(v27);
        }
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        xpc_object_t v28 = v32;
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v30) {
          _Block_release(v30);
        }
        xpc_object_t v25 = __p[0];
      }
      if (v25)
      {
        __p[1] = v25;
        operator delete(v25);
      }
    }
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_2:
  uint64_t v4 = v38;
  if (*((_DWORD *)v38 + 6) == -534716414)
  {
    uint64_t v5 = (char *)xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    CFTypeRef v41 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, char **))(v6 + 16))(v6, v7, &v41);
    xpc_release(v41);
    xpc_release(v8);
    _Block_object_dispose(&v37, 8);
  }
  else
  {
    _Block_object_dispose(&v37, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_26370F3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,xpc_object_t object,void *__p,uint64_t a24)
{
  if (v27) {
    _Block_release(v27);
  }
  if (a18 && !atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a21 && !atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
    std::__shared_weak_count::__release_weak(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Block_object_dispose((const void *)(v28 - 120), 8);
  xpc_object_t v30 = *(const void **)(v25 + 32);
  if (v30) {
    _Block_release(v30);
  }
  xpc_release(*(xpc_object_t *)(v25 + 24));
  *(void *)(v25 + 24) = 0;
  xpc_object_t v31 = *(std::__shared_weak_count **)(v25 + 8);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete((void *)v25);
  xpc_object_t v32 = (std::__shared_weak_count *)v24[2];
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(void *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = (std::__shared_weak_count *)a1[8];
    v15[0] = a1[7];
    v15[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2;
    aBlock[3] = &unk_270EA98C0;
    aBlock[4] = a1[4];
    char v13 = 1;
    uint64_t v5 = (void *)a1[6];
    if (v5) {
      uint64_t v5 = _Block_copy(v5);
    }
    int v12 = v5;
    uint64_t v6 = _Block_copy(aBlock);
    xpc_object_t v14 = v6;
    AWDModule::enableMetricSubmission_sync(v3, v15, 1, (uint64_t)&v14);
    if (v6) {
      _Block_release(v6);
    }
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v7 = v12;
      if (v12) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v7 = v12;
      if (v12) {
LABEL_11:
      }
        _Block_release(v7);
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = a1[6];
    xpc_object_t v16 = v8;
    xpc_object_t v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v9 + 16))(v9, 3760250880, &v16);
    xpc_release(v16);
    xpc_release(v10);
  }
}

void sub_26370F7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  if (((*(unsigned char *)(a1 + 48) != 0) & a2) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_26370F8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(void *a1, void *a2)
{
  size_t result = (void *)a2[6];
  if (result) {
    size_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[7];
  uint64_t v5 = a2[8];
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE56c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(const void **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  _Block_release(v3);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v28 = 0;
  xpc_object_t v29 = &v28;
  uint64_t v30 = 0x2000000000;
  int v31 = -534716414;
  if (MEMORY[0x263E6A240](*(void *)(v2 + 24)) == MEMORY[0x263EF8708])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F268C8]);
    xpc_object_t v32 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v32 = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v32, (const object *)0xFFFFFFFFLL);
    xpc_release(v32);
    if (v13 != 1)
    {
      if (v13)
      {
        if (v13 - 2 > 3) {
          goto LABEL_2;
        }
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    uint64_t v15 = *(void *)(v3 + 176);
    if (v15)
    {
      uint64_t v16 = v3 + 176;
      do
      {
        unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
        BOOL v18 = v17 >= v13;
        if (v17 >= v13) {
          xpc_object_t v19 = (uint64_t *)v15;
        }
        else {
          xpc_object_t v19 = (uint64_t *)(v15 + 8);
        }
        if (v18) {
          uint64_t v16 = v15;
        }
        uint64_t v15 = *v19;
      }
      while (*v19);
      if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
      {
        *((_DWORD *)v29 + 6) = -534716416;
        xpc_object_t v20 = *(std::__shared_weak_count **)(v16 + 48);
        v27[0] = *(void *)(v16 + 40);
        v27[1] = (uint64_t)v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v23[0] = MEMORY[0x263EF8330];
        v23[1] = 1174405120;
        v23[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke;
        v23[3] = &unk_270EA9968;
        v23[5] = v3;
        xpc_object_t v21 = *(void **)(v2 + 32);
        if (v21) {
          xpc_object_t v21 = _Block_copy(v21);
        }
        aBlock = v21;
        uint64_t v25 = v16;
        v23[4] = &v28;
        xpc_object_t v22 = _Block_copy(v23);
        xpc_object_t v26 = v22;
        AWDModule::clearConfiguration_sync(v3, v27, (uint64_t)&v26);
        if (v22) {
          _Block_release(v22);
        }
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
    }
  }
LABEL_2:
  uint64_t v4 = v29;
  if (*((_DWORD *)v29 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    xpc_object_t v32 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v32);
    xpc_release(v32);
    xpc_release(v8);
    _Block_object_dispose(&v28, 8);
  }
  else
  {
    _Block_object_dispose(&v28, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  xpc_object_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_26370FCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v23) {
    _Block_release(v23);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Block_object_dispose(&a20, 8);
  uint64_t v25 = *(const void **)(v21 + 32);
  if (v25) {
    _Block_release(v25);
  }
  xpc_release(*(xpc_object_t *)(v21 + 24));
  *(void *)(v21 + 24) = 0;
  xpc_object_t v26 = *(std::__shared_weak_count **)(v21 + 8);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  operator delete((void *)v21);
  xpc_object_t v27 = (std::__shared_weak_count *)v20[2];
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke(void *a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[7];
    xpc_object_t v5 = *(std::__shared_weak_count **)(v4 + 48);
    v16[0] = *(void *)(v4 + 40);
    v16[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2;
    aBlock[3] = &unk_270EA9930;
    aBlock[4] = a1[4];
    char v14 = 1;
    uint64_t v6 = (void *)a1[6];
    if (v6) {
      uint64_t v6 = _Block_copy(v6);
    }
    unsigned __int8 v13 = v6;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v15 = v7;
    AWDModule::enableMetricSubmission_sync(v3, v16, 0, (uint64_t)&v15);
    if (v7) {
      _Block_release(v7);
    }
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      xpc_object_t v8 = v13;
      if (v13) {
        goto LABEL_11;
      }
    }
    else
    {
      xpc_object_t v8 = v13;
      if (v13) {
LABEL_11:
      }
        _Block_release(v8);
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = a1[6];
    xpc_object_t v17 = v9;
    xpc_object_t v11 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v10 + 16))(v10, 3760250880, &v17);
    xpc_release(v17);
    xpc_release(v11);
  }
}

void sub_26370FFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2(uint64_t a1, unsigned __int8 a2)
{
  if (((*(unsigned char *)(a1 + 48) != 0) & a2) != 0) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_2637100F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  size_t result = *(void **)(a2 + 48);
  if (result) {
    size_t result = _Block_copy(result);
  }
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    _Block_release(v1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v43 = 0;
  unint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  int v46 = -534716414;
  if (MEMORY[0x263E6A240](*(void *)(v2 + 24)) == MEMORY[0x263EF8708])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F268C8]);
    v47[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v47[0] = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)v47, (const object *)0xFFFFFFFFLL);
    xpc_release(v47[0]);
    if (v13 <= 5u
      && (((1 << v13) & 0x36) != 0
       || !v13 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14)))
    {
      uint64_t v15 = *(void *)(v3 + 176);
      if (v15)
      {
        uint64_t v16 = v3 + 176;
        do
        {
          unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
          BOOL v18 = v17 >= v13;
          if (v17 >= v13) {
            xpc_object_t v19 = (uint64_t *)v15;
          }
          else {
            xpc_object_t v19 = (uint64_t *)(v15 + 8);
          }
          if (v18) {
            uint64_t v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
        {
          *((_DWORD *)v44 + 6) = -534716416;
          xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25E78]);
          v47[0] = v20;
          if (v20) {
            xpc_retain(v20);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v35 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25EE8]);
          v47[0] = v21;
          if (v21) {
            xpc_retain(v21);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v22 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25E38]);
          v47[0] = v23;
          if (v23) {
            xpc_retain(v23);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v24 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25E08]);
          v47[0] = v25;
          if (v25) {
            xpc_retain(v25);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v26 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25DC8]);
          v47[0] = v27;
          if (v27) {
            xpc_retain(v27);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v28 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          xpc_object_t v29 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25F18]);
          v47[0] = v29;
          if (v29) {
            xpc_retain(v29);
          }
          else {
            v47[0] = xpc_null_create();
          }
          int v30 = xpc::dyn_cast_or_default((xpc *)v47, 0);
          xpc_release(v47[0]);
          uint64_t v31 = *(void *)(v16 + 40);
          xpc_object_t v32 = *(std::__shared_weak_count **)(v16 + 48);
          v42[0] = v31;
          v42[1] = (uint64_t)v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v41[0] = v26;
          v41[1] = v28;
          v41[2] = 0;
          v41[3] = v30;
          v41[4] = -1431699456;
          v41[5] = -1431655936;
          v41[6] = -1431655936;
          v39[0] = v24;
          v39[1] = v35;
          v39[2] = v22;
          v39[3] = -1431655766;
          uint64_t v40 = 0;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
          aBlock[3] = &unk_270EA99A0;
          aBlock[4] = &v43;
          xpc_object_t v33 = *(void **)(v2 + 32);
          if (v33) {
            xpc_object_t v33 = _Block_copy(v33);
          }
          uint64_t v37 = v33;
          uint64_t v34 = _Block_copy(aBlock);
          CFTypeRef v38 = v34;
          AWDModule::queryMetric_sync(v3, v42, (uint64_t)v41, (uint64_t)v39, (uint64_t)&v38);
          if (v34) {
            _Block_release(v34);
          }
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          if (v37) {
            _Block_release(v37);
          }
        }
      }
    }
  }
  uint64_t v4 = v44;
  if (*((_DWORD *)v44 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    v47[0] = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, v47);
    xpc_release(v47[0]);
    xpc_release(v8);
    _Block_object_dispose(&v43, 8);
  }
  else
  {
    _Block_object_dispose(&v43, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  xpc_object_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_263710690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (v18) {
    _Block_release(v18);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  _Block_object_dispose((const void *)(v20 - 128), 8);
  int v22 = *(const void **)(v17 + 32);
  if (v22) {
    _Block_release(v22);
  }
  xpc_release(*(xpc_object_t *)(v17 + 24));
  *(void *)(v17 + 24) = 0;
  xpc_object_t v23 = *(std::__shared_weak_count **)(v17 + 8);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete((void *)v17);
  int v24 = (std::__shared_weak_count *)v16[2];
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_263710954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v31 = 0;
  xpc_object_t v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = -534716414;
  if (MEMORY[0x263E6A240](*(void *)(v2 + 24)) == MEMORY[0x263EF8708])
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F268C8]);
    xpc_object_t v35 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v35 = xpc_null_create();
    }
    unsigned __int8 v13 = xpc::dyn_cast_or_default((xpc *)&v35, (const object *)0xFFFFFFFFLL);
    xpc_release(v35);
    if (v13 <= 5u
      && (((1 << v13) & 0x36) != 0
       || !v13 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v14)))
    {
      uint64_t v15 = *(void *)(v3 + 176);
      if (v15)
      {
        uint64_t v16 = v3 + 176;
        do
        {
          unsigned int v17 = *(unsigned __int8 *)(v15 + 32);
          BOOL v18 = v17 >= v13;
          if (v17 >= v13) {
            xpc_object_t v19 = (uint64_t *)v15;
          }
          else {
            xpc_object_t v19 = (uint64_t *)(v15 + 8);
          }
          if (v18) {
            uint64_t v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 != v3 + 176 && *(unsigned __int8 *)(v16 + 32) <= v13)
        {
          *((_DWORD *)v32 + 6) = -534716416;
          xpc_object_t v20 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F26018]);
          xpc_object_t v35 = v20;
          if (v20) {
            xpc_retain(v20);
          }
          else {
            xpc_object_t v35 = xpc_null_create();
          }
          char v21 = xpc::dyn_cast_or_default((xpc *)&v35, 0);
          xpc_release(v35);
          xpc_object_t v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x263F25E68]);
          xpc_object_t v35 = v22;
          if (v22) {
            xpc_retain(v22);
          }
          else {
            xpc_object_t v35 = xpc_null_create();
          }
          char v23 = xpc::dyn_cast_or_default((xpc *)&v35, 0);
          xpc_release(v35);
          LOWORD(v35) = -21846;
          BYTE2(v35) = -86;
          LOBYTE(v35) = awd::AppContext::getProperties(*(awd::AppContext **)(v16 + 40));
          BYTE1(v35) = v23;
          BYTE2(v35) = v21;
          awd::AppContext::setProperties();
          int v24 = *(std::__shared_weak_count **)(v16 + 48);
          v30[0] = *(void *)(v16 + 40);
          v30[1] = (uint64_t)v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v27[0] = MEMORY[0x263EF8330];
          v27[1] = 1174405120;
          uint64_t v27[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke;
          v27[3] = &unk_270EA99D8;
          v27[4] = &v31;
          xpc_object_t v25 = *(void **)(v2 + 32);
          if (v25) {
            xpc_object_t v25 = _Block_copy(v25);
          }
          aBlock = v25;
          int v26 = _Block_copy(v27);
          xpc_object_t v29 = v26;
          AWDModule::updateProperties_sync(v3, v30, (uint64_t)&v29);
          if (v26) {
            _Block_release(v26);
          }
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
        }
      }
    }
  }
  uint64_t v4 = v32;
  if (*((_DWORD *)v32 + 6) == -534716414)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = *((unsigned int *)v4 + 6);
    xpc_object_t v35 = v5;
    xpc_object_t v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v35);
    xpc_release(v35);
    xpc_release(v8);
    _Block_object_dispose(&v31, 8);
  }
  else
  {
    _Block_object_dispose(&v31, 8);
    if (!v2) {
      goto LABEL_10;
    }
  }
  xpc_object_t v9 = *(const void **)(v2 + 32);
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete((void *)v2);
LABEL_10:
  xpc_object_t v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_263710D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v21) {
    _Block_release(v21);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Block_object_dispose(&a18, 8);
  char v23 = *(const void **)(v19 + 32);
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(*(xpc_object_t *)(v19 + 24));
  *(void *)(v19 + 24) = 0;
  int v24 = *(std::__shared_weak_count **)(v19 + 8);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete((void *)v19);
  xpc_object_t v25 = (std::__shared_weak_count *)v18[2];
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__4clEv_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 0;
  }
  else {
    int v3 = -534716416;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  xpc_object_t object = v5;
  xpc_object_t v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_263710FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::AppContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9A18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::AppContext>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[10];
  if (v2) {
    _Block_release(v2);
  }
  int v3 = (const void *)a1[9];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4) {
    _Block_release(v4);
  }
  xpc_object_t v5 = (const void *)a1[7];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)a1[5];
  if (v7) {
    _Block_release(v7);
  }
  xpc_object_t v8 = a1[3];
  if (v8)
  {
    dispatch_release(v8);
  }
}

uint64_t __cxx_global_var_init_47()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_26368A000);
  }
  return result;
}

PowerStats *PowerStats::create@<X0>(PowerStats **a1@<X8>)
{
  int v3 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v3);
  *a1 = v3;
  uint64_t result = (PowerStats *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_270EA9A68;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *((void *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_263711184(_Unwind_Exception *a1)
{
  PowerStats::~PowerStats(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_26371119C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void PowerStats::PowerStats(PowerStats *this)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, "com.apple.telephony.abm", "power.stats");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger(this, (const ctu::OsLogLogger *)v8);
  MEMORY[0x263E68B30](v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *(void *)((char *)this + 92) = 0x200000001;
  *((_DWORD *)this + 25) = -536870144;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, 0);
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  char v6 = 11;
  strcpy((char *)__p, "power.stats");
  AppleBasebandManager::create();
  long long v2 = v7;
  long long v7 = 0uLL;
  int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v7 + 1);
  if (*((void *)&v7 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_263711394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v17);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(v18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v16, *(void **)(v15 + 48));
  MEMORY[0x263E68B30](v15);
  _Unwind_Resume(a1);
}

const char *PowerStats::getName(PowerStats *this)
{
  return "power.stats";
}

void PowerStats::clear(PowerStats *this)
{
  long long v2 = (void *)((char *)this + 48);
  uint64_t v1 = (void *)*((void *)this + 6);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, v1);
  *(v2 - 1) = v2;
  *long long v2 = 0;
  v2[1] = 0;
}

void PowerStats::~PowerStats(PowerStats *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = *((void *)this + 14);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 13);
  if (v4) {
    _Block_release(v4);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, *((void **)this + 6));

  JUMPOUT(0x263E68B30);
}

void PowerStats::gotAssertion(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 88) = 1;
  int v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 1)
  {
    ++*(_DWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v6 = *(std::string *)a2;
    }
    xpc_object_t v5 = &v6;
    PowerStats::submitLowPowerEventMetric_sync(a1, 0, 1u, (const char *)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_18;
    }
  }
  else if (!v4)
  {
    if (a3 == 1)
    {
      ++*(_DWORD *)(a1 + 12);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v8 = *(std::string *)a2;
      }
      xpc_object_t v5 = &v8;
      PowerStats::submitLowPowerEventMetric_sync(a1, 2u, 0, (const char *)&v8);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
LABEL_18:
      }
        operator delete(v5->__r_.__value_.__l.__data_);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v7 = *(std::string *)a2;
      }
      xpc_object_t v5 = &v7;
      PowerStats::submitLowPowerEventMetric_sync(a1, 0, 0, (const char *)&v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_18;
      }
    }
  }
}

void PowerStats::submitLowPowerEventMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  std::string v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power event stats", (uint8_t *)v30, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x263EF8708];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26128], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26138], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (a4[23] < 0) {
    a4 = *(const char **)a4;
  }
  xpc_object_t v18 = xpc_string_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F25FA0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x263F26898]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25E20], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524464);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25ED0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25E18], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v26 = v11;
      xpc_object_t v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_34:
        int v28 = _Block_copy(v27);
        goto LABEL_37;
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      xpc_object_t v27 = *(const void **)(a1 + 104);
      if (v27) {
        goto LABEL_34;
      }
    }
    int v28 = 0;
LABEL_37:
    xpc_object_t v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 1174405120;
    uint64_t v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_21;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      xpc_object_t object = v26;
      if (v26)
      {
LABEL_39:
        xpc_retain(v26);
LABEL_42:
        dispatch_async(v29, v30);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        xpc_release(v26);
        goto LABEL_47;
      }
    }
    else
    {
      aBlock = 0;
      xpc_object_t object = v26;
      if (v26) {
        goto LABEL_39;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_42;
  }
LABEL_47:
  xpc_release(v13);
  xpc_release(v11);
}

uint64_t PowerStats::noPendingAssertion(uint64_t this)
{
  *(unsigned char *)(this + 88) = 0;
  return this;
}

void PowerStats::reportSystemStateChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 92) = v4;
  int v5 = *((_DWORD *)a3 + 2);
  if (v5 != -536870112)
  {
    if (v5 != -536870272) {
      return;
    }
    if (*((_DWORD *)a3 + 1) == 1)
    {
      if (*(unsigned char *)(a1 + 88))
      {
        std::string v6 = *(NSObject **)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Forced sleep while power assertion(s) held ", buf, 2u);
        }
        ++*(_DWORD *)(a1 + 20);
        char v16 = 0;
        LOBYTE(__p) = 0;
        PowerStats::submitLowPowerEventMetric_sync(a1, 1u, 1u, (const char *)&__p);
        if (v16 < 0) {
          operator delete(__p);
        }
      }
      ++*(_DWORD *)(a1 + 28);
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      *(void *)(a1 + 72) = SystemTime;
      uint64_t v8 = *(void *)(a1 + 64);
      if (!v8) {
        return;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 32);
      uint64_t SystemTime = TelephonyUtilGetSystemTime();
      *(void *)(a1 + 72) = SystemTime;
      uint64_t v8 = *(void *)(a1 + 64);
      if (!v8) {
        return;
      }
    }
    *(_DWORD *)(a1 + 80) = ((int)SystemTime - (int)v8) / 0x3E8u;
    return;
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v10 = TelephonyUtilGetSystemTime();
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    unsigned int v12 = ((int)v10 - (int)v11) / 0x3E8u;
    *(_DWORD *)(a1 + 84) = v12;
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 84);
  }
  unsigned int v13 = *(_DWORD *)(a2 + 4) == 1;
  unsigned int v14 = *(_DWORD *)(a1 + 80);

  PowerStats::submitWakeInfoMetric_sync(a1, v13, v12, v14);
}

void PowerStats::submitWakeInfoMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of wake info", (uint8_t *)v30, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x263EF8708];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26408], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_int64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26658], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_int64_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F265B0], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x263F26898]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25E20], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524465);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25ED0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25E18], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      xpc_object_t v26 = v11;
      xpc_object_t v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_32:
        int v28 = _Block_copy(v27);
        goto LABEL_35;
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      xpc_object_t v27 = *(const void **)(a1 + 104);
      if (v27) {
        goto LABEL_32;
      }
    }
    int v28 = 0;
LABEL_35:
    xpc_object_t v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x263EF8330];
    v30[1] = 1174405120;
    uint64_t v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    v30[3] = &__block_descriptor_tmp_21;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      xpc_object_t object = v26;
      if (v26)
      {
LABEL_37:
        xpc_retain(v26);
LABEL_40:
        dispatch_async(v29, v30);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        xpc_release(v26);
        goto LABEL_45;
      }
    }
    else
    {
      aBlock = 0;
      xpc_object_t object = v26;
      if (v26) {
        goto LABEL_37;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_40;
  }
LABEL_45:
  xpc_release(v13);
  xpc_release(v11);
}

void PowerStats::setPowerdownMessage(uint64_t a1, xpc_object_t *a2)
{
  CFArrayRef theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t value = xpc_dictionary_get_value(*a2, abm::kKeyPowerDownMessageList);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v4);
  CFArrayRef v5 = (const __CFArray *)cf[0];
  if (cf[0])
  {
    CFTypeID v6 = CFGetTypeID(cf[0]);
    if (v6 == CFArrayGetTypeID())
    {
      CFArrayRef theArray = v5;
      CFRetain(v5);
      CFTypeRef v7 = cf[0];
      if (!cf[0]) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  CFArrayRef v5 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v7 = cf[0];
  if (cf[0]) {
LABEL_9:
  }
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  CFIndex v8 = 0;
  xpc_object_t v9 = (uint64_t **)(a1 + 48);
  while (1)
  {
    CFIndex Count = CFArrayGetCount(v5);
    CFArrayRef v5 = theArray;
    if (Count <= v8) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
    CFDictionaryRef v12 = ValueAtIndex;
    if (!ValueAtIndex) {
      goto LABEL_13;
    }
    cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    cf[1] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeID v13 = CFGetTypeID(ValueAtIndex);
    if (v13 == CFDictionaryGetTypeID()) {
      CFDictionaryRef v14 = v12;
    }
    else {
      CFDictionaryRef v14 = 0;
    }
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)cf, v14);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageQMISvc);
    unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x263E68C90](&object);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageId);
    uint64_t v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x263E68C90](&object);
    xpc_object_t v17 = *v9;
    xpc_object_t v18 = (uint64_t **)(a1 + 48);
    xpc_object_t v19 = (uint64_t *)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v19 = v17;
          unsigned int v20 = *((_DWORD *)v17 + 7);
          if (Int == v20) {
            break;
          }
          if (Int >= v20)
          {
            if (v20 >= Int) {
              char v24 = 1;
            }
            else {
              char v24 = -1;
            }
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            goto LABEL_36;
          }
LABEL_21:
          xpc_object_t v17 = (uint64_t *)*v19;
          xpc_object_t v18 = (uint64_t **)v19;
          if (!*v19) {
            goto LABEL_38;
          }
        }
        unsigned int v21 = *((_DWORD *)v19 + 8);
        if (v16 < v21) {
          goto LABEL_21;
        }
        BOOL v22 = v21 == v16;
        if (v21 >= v16) {
          char v23 = 1;
        }
        else {
          char v23 = -1;
        }
        if (v22) {
          char v23 = 0;
        }
        if ((v23 & 0x80) == 0)
        {
LABEL_40:
          xpc_object_t v25 = (char *)v19;
          goto LABEL_12;
        }
LABEL_36:
        xpc_object_t v17 = (uint64_t *)v19[1];
        if (!v17)
        {
          xpc_object_t v18 = (uint64_t **)(v19 + 1);
          break;
        }
      }
    }
LABEL_38:
    xpc_object_t v25 = (char *)operator new(0x28uLL);
    *(void *)(v25 + 28) = Int | (unint64_t)(v16 << 32);
    *((_DWORD *)v25 + 9) = 0;
    *(void *)xpc_object_t v25 = 0;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = v19;
    void *v18 = (uint64_t *)v25;
    uint64_t v26 = **(void **)(a1 + 40);
    xpc_object_t v27 = (uint64_t *)v25;
    if (v26)
    {
      *(void *)(a1 + 40) = v26;
      xpc_object_t v27 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v27);
    ++*(void *)(a1 + 56);
    CFArrayRef v5 = theArray;
LABEL_12:
    ++*((_DWORD *)v25 + 9);
    MEMORY[0x263E68CD0](cf);
LABEL_13:
    ++v8;
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_2637124C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, xpc_object_t object)
{
}

void PowerStats::submitLowPowerStatsMetric_sync(os_log_t *this)
{
  long long v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power stats", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v3) == MEMORY[0x263EF8708])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v5) == MEMORY[0x263EF8708])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26520], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create((*((_DWORD *)this + 4) + *((_DWORD *)this + 2)));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26130], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(*((unsigned int *)this + 5));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26358], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*((unsigned int *)this + 6));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F25F50], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(*((unsigned int *)this + 8));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F261D8], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(*((unsigned int *)this + 7));
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26278], v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  xpc_object_t v19 = xpc_array_create(0, 0);
  if (v19 || (xpc_object_t v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v19) == MEMORY[0x263EF86D8])
    {
      xpc_retain(v19);
      xpc_object_t v20 = v19;
    }
    else
    {
      xpc_object_t v20 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    xpc_object_t v19 = 0;
  }
  xpc_release(v19);
  xpc_object_t xarray = v20;
  long long v57 = v4;
  xpc_object_t xdict = v6;
  os_log_t v21 = this[5];
  unint64_t v56 = this;
  BOOL v22 = (this + 6);
  if (v21 == (os_log_t)(this + 6))
  {
    unsigned int v23 = 0;
  }
  else
  {
    unsigned int v23 = 0;
    key = (char *)*MEMORY[0x263F26350];
    long long v60 = (char *)*MEMORY[0x263F26288];
    long long v59 = (char *)*MEMORY[0x263F25F48];
    char v24 = (const char *)*MEMORY[0x263F25F40];
    do
    {
      int64_t isa_high = HIDWORD(v21[3].isa);
      int64_t isa_low = LODWORD(v21[4].isa);
      int64_t v27 = HIDWORD(v21[4].isa);
      xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
      if (v28 || (xpc_object_t v28 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x263E6A240](v28) == MEMORY[0x263EF8708])
        {
          xpc_retain(v28);
          xpc_object_t v29 = v28;
        }
        else
        {
          xpc_object_t v29 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v29 = xpc_null_create();
        xpc_object_t v28 = 0;
      }
      xpc_release(v28);
      xpc_object_t v30 = xpc_int64_create(0);
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, key, v30);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      xpc_object_t v32 = xpc_int64_create(isa_high);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v60, v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      xpc_object_t v34 = xpc_int64_create(isa_low);
      if (!v34) {
        xpc_object_t v34 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v59, v34);
      xpc_object_t v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
      xpc_object_t v36 = xpc_int64_create(v27);
      if (!v36) {
        xpc_object_t v36 = xpc_null_create();
      }
      xpc_dictionary_set_value(v29, v24, v36);
      xpc_object_t v37 = xpc_null_create();
      xpc_release(v36);
      xpc_release(v37);
      xpc_array_append_value(xarray, v29);
      xpc_release(v29);
      isa = v21[1].isa;
      if (isa)
      {
        do
        {
          uint64_t v39 = isa;
          isa = isa->isa;
        }
        while (isa);
      }
      else
      {
        do
        {
          uint64_t v39 = v21[2].isa;
          BOOL v40 = v39->isa == (Class)v21;
          os_log_t v21 = v39;
        }
        while (!v40);
      }
      v23 += v27;
      os_log_t v21 = v39;
    }
    while (v39 != v22);
  }
  if (xarray)
  {
    xpc_retain(xarray);
    xpc_object_t v41 = xarray;
    CFTypeID v42 = xdict;
  }
  else
  {
    CFTypeID v42 = xdict;
    xpc_object_t v41 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x263F26280], v41);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  xpc_object_t v44 = xpc_int64_create(v23);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x263F26498], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  xpc_object_t v46 = xpc_string_create((const char *)*MEMORY[0x263F26898]);
  if (!v46) {
    xpc_object_t v46 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x263F25E20], v46);
  xpc_object_t v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  xpc_object_t v48 = xpc_int64_create(524466);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x263F25ED0], v48);
  xpc_object_t v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (v42)
  {
    xpc_retain(v42);
    xpc_object_t v50 = v42;
  }
  else
  {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x263F25E18], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v56[13] && v56[14])
  {
    if (v57)
    {
      xpc_retain(v57);
      xpc_object_t v52 = v57;
      os_log_t v53 = v56[13];
      if (v53)
      {
LABEL_73:
        uint64_t v54 = _Block_copy(v53);
        goto LABEL_76;
      }
    }
    else
    {
      xpc_object_t v52 = xpc_null_create();
      os_log_t v53 = v56[13];
      if (v53) {
        goto LABEL_73;
      }
    }
    uint64_t v54 = 0;
LABEL_76:
    long long v55 = v56[14];
    *(void *)buf = MEMORY[0x263EF8330];
    uint64_t v64 = 1174405120;
    long long v65 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke;
    long long v66 = &__block_descriptor_tmp_21;
    if (v54)
    {
      aBlock = _Block_copy(v54);
      xpc_object_t object = v52;
      if (v52)
      {
LABEL_78:
        xpc_retain(v52);
LABEL_81:
        dispatch_async(v55, buf);
        xpc_release(object);
        xpc_object_t object = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v54) {
          _Block_release(v54);
        }
        xpc_release(v52);
        goto LABEL_86;
      }
    }
    else
    {
      aBlock = 0;
      xpc_object_t object = v52;
      if (v52) {
        goto LABEL_78;
      }
    }
    xpc_object_t object = xpc_null_create();
    goto LABEL_81;
  }
LABEL_86:
  xpc_release(xarray);
  xpc_release(v42);
  xpc_release(v57);
}

void sub_263712EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  xpc_release(v16);
  xpc_release(object);
  xpc_release(a12);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

void PowerStats::reportStats(os_log_t *this, int a2)
{
  if (a2 == 524466) {
    PowerStats::submitLowPowerStatsMetric_sync(this);
  }
}

void PowerStats::registerStatsHandler(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)a2;
  if (*(void *)a2) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  if (v5) {
    _Block_release(v5);
  }
  xpc_object_t v6 = *(NSObject **)(a2 + 8);
  if (v6) {
    dispatch_retain(v6);
  }
  xpc_object_t v7 = *(NSObject **)(a1 + 112);
  *(void *)(a1 + 112) = v6;
  if (v7)
  {
    dispatch_release(v7);
  }
}

void PowerStats::dumpState(os_log_t *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  long long v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Power state ---------------", buf, 2u);
    long long v2 = *this;
    xpc_object_t v3 = &loc_2637A4000;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      xpc_object_t v4 = "NSt3__120__shared_ptr_pointerIPN5radio13HealthServiceENS_10shared_ptrIS2_E27__shared_ptr_default_deleteIS2_S2"
           "_EENS_9allocatorIS2_EEEE"
         + 133;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    xpc_object_t v3 = (void *)&loc_2637A4000;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  int v7 = *((_DWORD *)this + 3);
  *(_DWORD *)buf = v3[434];
  int v24 = v7;
  _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Idle sleep reverted due to BB events: %u", buf, 8u);
  long long v2 = *this;
  xpc_object_t v4 = "";
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  int v8 = *((_DWORD *)this + 2);
  int v9 = *((_DWORD *)this + 4);
  *(_DWORD *)buf = *((void *)v4 + 415);
  int v24 = v8;
  __int16 v25 = 1024;
  int v26 = v9;
  _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I BB events deferred on idle sleep: %u, on forced sleep: %u", buf, 0xEu);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  int v10 = *((_DWORD *)this + 5);
  *(_DWORD *)buf = v3[434];
  int v24 = v10;
  _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Forced sleep during BB event handling: %u", buf, 8u);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  int v12 = *((_DWORD *)this + 7);
  int v11 = *((_DWORD *)this + 8);
  int v13 = *((_DWORD *)this + 6);
  *(_DWORD *)buf = 67109632;
  int v24 = v11;
  __int16 v25 = 1024;
  int v26 = v12;
  __int16 v27 = 1024;
  int v28 = v13;
  _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Number of idle sleeps: %u, forced sleeps: %u, wakes: %u", buf, 0x14u);
  long long v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    os_log_t v5 = this[5];
    xpc_object_t v6 = (this + 6);
    if (v5 == (os_log_t)(this + 6)) {
      return;
    }
    goto LABEL_17;
  }
LABEL_14:
  int v14 = *((_DWORD *)this + 20);
  int v15 = *((_DWORD *)this + 21);
  *(_DWORD *)buf = *((void *)v4 + 415);
  int v24 = v14;
  __int16 v25 = 1024;
  int v26 = v15;
  _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Last wake duration: %u, sleep duration: %u", buf, 0xEu);
  os_log_t v5 = this[5];
  xpc_object_t v6 = (this + 6);
  if (v5 == (os_log_t)(this + 6)) {
    return;
  }
  do
  {
LABEL_17:
    xpc_object_t v16 = *this;
    if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
      int isa = (int)v5[4].isa;
      int isa_high = HIDWORD(v5[4].isa);
      int v19 = HIDWORD(v5[3].isa);
      *(_DWORD *)buf = 67109632;
      int v24 = v19;
      __int16 v25 = 1024;
      int v26 = isa;
      __int16 v27 = 1024;
      int v28 = isa_high;
      _os_log_impl(&dword_26368A000, v16, OS_LOG_TYPE_DEFAULT, "#I Received message QMI_SVC 0x%x, ID 0x%x, %u times after powerdown", buf, 0x14u);
    }
    xpc_object_t v20 = v5[1].isa;
    if (v20)
    {
      do
      {
        os_log_t v21 = v20;
        xpc_object_t v20 = v20->isa;
      }
      while (v20);
    }
    else
    {
      do
      {
        os_log_t v21 = v5[2].isa;
        BOOL v22 = v21->isa == (Class)v5;
        os_log_t v5 = v21;
      }
      while (!v22);
    }
    os_log_t v5 = v21;
  }
  while (v21 != v6);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(PowerStats **)(a1 + 24);
  if (v1)
  {
    PowerStats::~PowerStats(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A7FDALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A7FDALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A7FDALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A7FDALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_2637134E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    os_log_t v5 = _Block_copy(v4);
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    xpc_object_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSN8dispatch5blockIU13block_pointerFvN3xpc4dictEEEE40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E80])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F268B8])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F20528])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F20520]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E88]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x263F268F8]) && strcasecmp(v6, (const char *)*MEMORY[0x263F25EF0]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F78]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F80]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F38]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x263F25DD0]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F30]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E48]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E98]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x263F25E90]))
                        {
                          return defaults::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          int v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              int v9 = a1;
                            }
                            else {
                              int v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              int v10 = a2;
                            }
                            else {
                              int v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            int v12 = "prop.default";
                            __int16 v13 = 2080;
                            int v14 = v9;
                            __int16 v15 = 2080;
                            xpc_object_t v16 = v10;
                            _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E80]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x263F268B8])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x263F20528])
         && strcasecmp(a1, (const char *)*MEMORY[0x263F20520]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E88]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F268F8]) && strcasecmp(a1, (const char *)*MEMORY[0x263F25EF0]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F78]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F80]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F38]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x263F25DD0]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F30]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E48]))
                  {
                    xpc_object_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E98])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return defaults::tailspin::get(a2, (uint64_t)a3);
                  }
LABEL_60:
                  return defaults::profile::get(a2, (uint64_t)a3);
                }
LABEL_57:
                return defaults::systemlogs::get(a2, (uint64_t)a3);
              }
LABEL_54:
              return defaults::logfilter::get(a2, (uint64_t)a3);
            }
LABEL_51:
            return defaults::ttr::get(a2, (uint64_t)a3);
          }
LABEL_48:
          return defaults::compression::get(a2, (uint64_t)a3);
        }
LABEL_45:
        return defaults::bbipc::get(a2, (uint64_t)a3);
      }
LABEL_39:
      return defaults::ipc::get(a2, (uint64_t)a3);
    }
LABEL_42:
    return defaults::coredump::get(a2, (uint64_t)a3);
  }

  return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  v53[2] = *MEMORY[0x263EF8340];
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    os_log_t v5 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]);
    if (v5)
    {
      xpc_object_t v6 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F60]);
      if (v6)
      {
        int v7 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F260D8]);
        if (v7)
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E28]) && strcasecmp(a1, (const char *)*MEMORY[0x263F26500]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26008])) {
              goto LABEL_116;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x263F25FE0]))
            {
              int v8 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F28]);
              int v9 = a1;
              if (v8) {
                goto LABEL_10;
              }
LABEL_25:
              int v14 = capabilities::trace::defaultHistorySizeMB(v8);
              util::to_str<int>(v14, &v51);
LABEL_73:
              if (*((char *)a2 + 23) < 0) {
                operator delete((void *)*a2);
              }
              *(std::string *)a2 = v51;
              return 1;
            }
          }
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    int v15 = capabilities::trace::enabledByDefault(v5);
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v15);
LABEL_30:
    v53[0] = v51.__r_.__value_.__l.__size_;
    std::string::size_type v18 = v51.__r_.__value_.__r.__words[0];
    *(void *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0) {
      operator delete((void *)*a2);
    }
    std::string::size_type v20 = v53[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(void *)((char *)v53 + 7);
    *((unsigned char *)a2 + 23) = v19;
    return 1;
  }
  int v9 = *(const char **)a1;
  os_log_t v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25F20]);
  if (!v5) {
    goto LABEL_26;
  }
  xpc_object_t v6 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x263F25F60]);
  if (!v6)
  {
LABEL_27:
    int v16 = capabilities::trace::supportsHighTPutByDefault(v6);
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v16);
    goto LABEL_30;
  }
  int v7 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x263F260D8]);
  if (!v7)
  {
LABEL_28:
    int v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
    v53[0] = 0;
    *(void *)((char *)v53 + 7) = 0;
    std::to_string(&v51, v17);
    goto LABEL_30;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x263F25E28]) || !strcasecmp(v9, (const char *)*MEMORY[0x263F26500])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x263F26008])) {
    goto LABEL_116;
  }
  if (!strcasecmp(v9, (const char *)*MEMORY[0x263F25FE0]))
  {
LABEL_29:
    *(void *)((char *)v53 + 7) = 0;
    v53[0] = 0;
    std::to_string(&v51, 0);
    goto LABEL_30;
  }
  int v8 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x263F25F28]);
  if (!v8) {
    goto LABEL_25;
  }
LABEL_10:
  int v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x263F20720]);
  if (v10) {
    goto LABEL_11;
  }
  BOOL v22 = (capabilities::radio *)capabilities::radio::maverick(v10);
  if (v22 & 1) != 0 || (capabilities::radio::ice(v22))
  {
    util::to_str<diag::config::DuringAPSleep>(&v51);
    goto LABEL_73;
  }
  LOBYTE(v4) = a1[23];
LABEL_11:
  int v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0) {
    int v12 = a1;
  }
  else {
    int v12 = *(const char **)a1;
  }
  __int16 v13 = (capabilities::radio *)strcasecmp(v12, (const char *)*MEMORY[0x263F20710]);
  if (!v13)
  {
    if (capabilities::radio::maverick(v13)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    unsigned int v23 = a1;
  }
  else {
    unsigned int v23 = v11;
  }
  int v24 = (capabilities::radio *)strcasecmp(v23, (const char *)*MEMORY[0x263F20708]);
  if (!v24)
  {
    if (capabilities::radio::maverick(v24)) {
      goto LABEL_72;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    __int16 v25 = a1;
  }
  else {
    __int16 v25 = v11;
  }
  int v26 = (capabilities::radio *)strcasecmp(v25, (const char *)*MEMORY[0x263F20728]);
  if (!v26)
  {
    if (capabilities::radio::maverick(v26))
    {
      util::to_str<unsigned int>(&v51, 3u);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
    int v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0) {
    __int16 v27 = a1;
  }
  else {
    __int16 v27 = v11;
  }
  int v28 = (capabilities::radio *)strcasecmp(v27, (const char *)*MEMORY[0x263F20730]);
  if (!v28)
  {
    if (capabilities::radio::maverick(v28))
    {
      util::to_str<diag::config::Recovery>(&v51);
      goto LABEL_73;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    uint64_t v29 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F20718])) {
      goto LABEL_62;
    }
LABEL_72:
    util::to_str<BOOL>(&v51, 0);
    goto LABEL_73;
  }
  uint64_t v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F20718])) {
    goto LABEL_72;
  }
LABEL_62:
  xpc_object_t v30 = (capabilities::radio *)strcasecmp(v29, (const char *)*MEMORY[0x263F264F8]);
  if (!v30)
  {
    uint64_t v31 = capabilities::radio::maverick(v30);
    if (v31) {
      goto LABEL_78;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    xpc_object_t v32 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x263F26628]);
    xpc_object_t v33 = a1;
    if (v32) {
      goto LABEL_67;
    }
LABEL_77:
    uint64_t v31 = capabilities::radio::ice(v32);
    if (!v31)
    {
      xpc_object_t v35 = "None";
LABEL_82:
      std::string::__assign_external((std::string *)a2, v35);
      return 1;
    }
LABEL_78:
    if (config::hw::watch((config::hw *)v31)) {
      xpc_object_t v35 = "Lite";
    }
    else {
      xpc_object_t v35 = "Default";
    }
    goto LABEL_82;
  }
  xpc_object_t v33 = *(const char **)a1;
  xpc_object_t v32 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F26628]);
  if (!v32) {
    goto LABEL_77;
  }
LABEL_67:
  xpc_object_t v34 = (capabilities::radio *)strcasecmp(v33, (const char *)*MEMORY[0x263F20700]);
  if (!v34)
  {
    if (capabilities::radio::maverick(v34))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0) {
    xpc_object_t v36 = a1;
  }
  else {
    xpc_object_t v36 = *(const char **)a1;
  }
  xpc_object_t v37 = (capabilities::radio *)strcasecmp(v36, (const char *)*MEMORY[0x263F263D0]);
  if (!v37)
  {
    if (capabilities::radio::maverick(v37))
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((unsigned char *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F26038]))
    {
      CFTypeRef v38 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F26558]);
      if (v38)
      {
        if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26840])) {
          goto LABEL_72;
        }
        if (strcasecmp(a1, (const char *)*MEMORY[0x263F26810]) && strcasecmp(a1, (const char *)*MEMORY[0x263F26818]))
        {
          uint64_t v39 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F58]);
          if (v39)
          {
            BOOL v40 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x263F262E8]);
            if (v40)
            {
              xpc_object_t v41 = (defaults::bbtrace *)strcasecmp(a1, (const char *)*MEMORY[0x263F263E0]);
              CFTypeID v42 = a1;
              if (v41) {
                goto LABEL_101;
              }
LABEL_115:
              unsigned int count = defaults::bbtrace::transport_read_count(v41);
              util::to_str<unsigned int>(&v51, count);
              goto LABEL_73;
            }
LABEL_131:
            xpc_object_t v49 = (capabilities::abs *)capabilities::radio::vendor(v40);
            if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v49)) {
              unsigned int v50 = 0x4000;
            }
            else {
              unsigned int v50 = 0x8000;
            }
            util::to_str<unsigned int>(&v51, v50);
            goto LABEL_73;
          }
LABEL_130:
          unsigned int v48 = capabilities::trace::defaultFileSizeBytes(v39);
          util::to_str<unsigned int>(&v51, v48);
          goto LABEL_73;
        }
LABEL_116:
        if (*((char *)a2 + 23) < 0)
        {
          a2[1] = 0;
          a2 = (std::string::size_type *)*a2;
        }
        else
        {
          *((unsigned char *)a2 + 23) = 0;
        }
        *(unsigned char *)a2 = 0;
        return 1;
      }
LABEL_122:
      unsigned int v47 = capabilities::trace::defaultMemoryFileMaxCount(v38);
      util::to_str<unsigned int>(&v51, v47);
      goto LABEL_73;
    }
LABEL_120:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((unsigned char *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  CFTypeID v42 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F26038])) {
    goto LABEL_120;
  }
  CFTypeRef v38 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x263F26558]);
  if (!v38) {
    goto LABEL_122;
  }
  if (!strcasecmp(v42, (const char *)*MEMORY[0x263F26840])) {
    goto LABEL_72;
  }
  if (!strcasecmp(v42, (const char *)*MEMORY[0x263F26810]) || !strcasecmp(v42, (const char *)*MEMORY[0x263F26818])) {
    goto LABEL_116;
  }
  uint64_t v39 = (capabilities::trace *)strcasecmp(v42, (const char *)*MEMORY[0x263F25F58]);
  if (!v39) {
    goto LABEL_130;
  }
  BOOL v40 = (capabilities::radio *)strcasecmp(v42, (const char *)*MEMORY[0x263F262E8]);
  if (!v40) {
    goto LABEL_131;
  }
  xpc_object_t v41 = (defaults::bbtrace *)strcasecmp(v42, (const char *)*MEMORY[0x263F263E0]);
  if (!v41) {
    goto LABEL_115;
  }
LABEL_101:
  if (!strcasecmp(v42, (const char *)*MEMORY[0x263F26620]))
  {
    util::to_str<BOOL>(&v51, 1);
    goto LABEL_73;
  }
  xpc_object_t v43 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::string::size_type v44 = *MEMORY[0x263F268B8];
    if (a1[23] >= 0) {
      xpc_object_t v45 = a1;
    }
    else {
      xpc_object_t v45 = *(char **)a1;
    }
    LODWORD(v51.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v51.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v44;
    HIWORD(v51.__r_.__value_.__r.__words[2]) = 2080;
    xpc_object_t v52 = v45;
    _os_log_error_impl(&dword_26368A000, v43, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v51,
      0x20u);
    return 0;
  }
  return result;
}

void sub_26371457C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x263713F7CLL);
    }
    JUMPOUT(0x263713F84);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  uint64_t v16[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]);
  int v5 = (int)v4;
  if (v4)
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v7 = *MEMORY[0x263F25E88];
      if (*((char *)v3 + 23) >= 0) {
        int v8 = v3;
      }
      else {
        int v8 = (uint64_t *)*v3;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      int v15 = v8;
      _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
    }
  }
  else
  {
    int v9 = capabilities::trace::allowed(v4);
    v16[0] = 0;
    *(void *)((char *)v16 + 7) = 0;
    std::to_string(&v14, v9);
    v16[0] = v14.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v14.__r_.__value_.__r.__words[0];
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v16[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
    *(unsigned char *)(a2 + 23) = v11;
  }
  return v5 == 0;
}

void sub_263714754(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x263714700);
    }
    JUMPOUT(0x263714708);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    int v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25F20]);
    if (v4)
    {
      int v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x263F25F28]);
      if (v5) {
        goto LABEL_4;
      }
LABEL_9:
      int v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v19, 0, 15);
      std::to_string(&v17, v8);
      goto LABEL_13;
    }
LABEL_10:
    int v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if (v9) {
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    }
    memset(v19, 0, 15);
    std::to_string(&v17, (int)v9);
    goto LABEL_13;
  }
  int v4 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]);
  if (!v4) {
    goto LABEL_10;
  }
  int v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F28]);
  xpc_object_t v6 = a1;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_4:
  std::string::size_type v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v19, 0, 15);
    std::to_string(&v17, 4uLL);
LABEL_13:
    v19[0] = v17.__r_.__value_.__l.__size_;
    std::string::size_type v10 = v17.__r_.__value_.__r.__words[0];
    *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v12 = v19[0];
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 15) = *(void *)((char *)v19 + 7);
    *(unsigned char *)(a2 + 23) = v11;
    return 1;
  }
  std::string v14 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    std::string::size_type v15 = *MEMORY[0x263F268F8];
    if (a1[23] >= 0) {
      int v16 = a1;
    }
    else {
      int v16 = *(char **)a1;
    }
    LODWORD(v17.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v17.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = v15;
    HIWORD(v17.__r_.__value_.__r.__words[2]) = 2080;
    std::string::size_type v18 = v16;
    _os_log_error_impl(&dword_26368A000, v14, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v17,
      0x20u);
    return 0;
  }
  return result;
}

void sub_2637149A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x263714894);
    }
    JUMPOUT(0x26371489CLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    xpc_object_t v6 = *(const char **)a1;
    int v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25F20]);
    if (v4)
    {
      int v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x263F25F68]);
      if (v5) {
        goto LABEL_4;
      }
LABEL_12:
      int v12 = capabilities::ipc::defaultLogLevel(v5);
      v20[0] = 0;
      *(void *)((char *)v20 + 7) = 0;
      std::to_string(&v18, v12);
      goto LABEL_15;
    }
LABEL_13:
    int v13 = capabilities::trace::enabledByDefault(v4);
    v20[0] = 0;
    *(void *)((char *)v20 + 7) = 0;
    std::to_string(&v18, v13);
    goto LABEL_15;
  }
  int v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]);
  if (!v4) {
    goto LABEL_13;
  }
  int v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F68]);
  xpc_object_t v6 = a1;
  if (!v5) {
    goto LABEL_12;
  }
LABEL_4:
  std::string::size_type v7 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x263F260E0]);
  if (v7)
  {
    int v8 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v10 = *MEMORY[0x263F25F78];
      if (a1[23] >= 0) {
        char v11 = a1;
      }
      else {
        char v11 = *(char **)a1;
      }
      LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v10;
      HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
      char v19 = v11;
      _os_log_error_impl(&dword_26368A000, v8, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v18,
        0x20u);
      return 0;
    }
    return result;
  }
  int v14 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
  v20[0] = 0;
  *(void *)((char *)v20 + 7) = 0;
  std::to_string(&v18, v14);
LABEL_15:
  v20[0] = v18.__r_.__value_.__l.__size_;
  std::string::size_type v15 = v18.__r_.__value_.__r.__words[0];
  *(void *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v17 = v20[0];
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 15) = *(void *)((char *)v20 + 7);
  *(unsigned char *)(a2 + 23) = v16;
  return 1;
}

void sub_263714BD0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x263714B80);
    }
    JUMPOUT(0x263714B88);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F206F8])) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
      int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    }
    else {
      int CompressionMode = 2;
    }
    std::to_string(&v11, CompressionMode);
    goto LABEL_16;
  }
  int v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x263F206F8])) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F205A8]))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x263F25F80];
      if (a1[23] >= 0) {
        int v8 = a1;
      }
      else {
        int v8 = *(char **)a1;
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v11.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v11.__r_.__value_.__r.__words[2]) = 2080;
      int v12 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v11,
        0x20u);
      return 0;
    }
    return result;
  }
  std::to_string(&v11, 0);
LABEL_16:
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v11;
  return 1;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  uint64_t v15[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E28])) {
      goto LABEL_3;
    }
LABEL_10:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    memset(v15, 0, 15);
    std::to_string(&v13, IsCarrierBuild);
    goto LABEL_15;
  }
  int v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x263F25E28])) {
    goto LABEL_10;
  }
LABEL_3:
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F26550]))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x263F25F38];
      if (a1[23] >= 0) {
        int v8 = a1;
      }
      else {
        int v8 = *(char **)a1;
      }
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
      int v14 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v13,
        0x20u);
      return 0;
    }
    return result;
  }
  memset(v15, 0, 15);
  std::to_string(&v13, 43200);
LABEL_15:
  v15[0] = v13.__r_.__value_.__l.__size_;
  std::string::size_type v10 = v13.__r_.__value_.__r.__words[0];
  *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v12 = v15[0];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
  *(unsigned char *)(a2 + 23) = v11;
  return 1;
}

void sub_263714F6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x263714F1CLL);
    }
    JUMPOUT(0x263714F24);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  uint64_t v16[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F26168]))
    {
      if (strcasecmp(v4, (const char *)*MEMORY[0x263F26300])) {
        goto LABEL_4;
      }
LABEL_12:
      memset(v16, 0, 15);
      std::to_string(&v14, -1);
      goto LABEL_15;
    }
LABEL_13:
    memset(v16, 0, 15);
    std::to_string(&v14, 512);
    goto LABEL_15;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26168])) {
    goto LABEL_13;
  }
  int v4 = a1;
  if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26300])) {
    goto LABEL_12;
  }
LABEL_4:
  int v5 = (capabilities::trace *)strcasecmp(v4, (const char *)*MEMORY[0x263F26858]);
  if (v5)
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v8 = *MEMORY[0x263F25DD0];
      if (a1[23] >= 0) {
        int v9 = a1;
      }
      else {
        int v9 = *(char **)a1;
      }
      LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v8;
      HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v15 = v9;
      _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v14,
        0x20u);
      return 0;
    }
    return result;
  }
  int v10 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
  memset(v16, 0, 15);
  std::to_string(&v14, v10);
LABEL_15:
  v16[0] = v14.__r_.__value_.__l.__size_;
  std::string::size_type v11 = v14.__r_.__value_.__r.__words[0];
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v13 = v16[0];
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
  *(unsigned char *)(a2 + 23) = v12;
  return 1;
}

void sub_26371518C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x26371513CLL);
    }
    JUMPOUT(0x263715144);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  v17[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    int v5 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E28]))
    {
      int v4 = (capabilities::abs *)strcasecmp(v5, (const char *)*MEMORY[0x263F25F28]);
      if (v4) {
        goto LABEL_4;
      }
LABEL_12:
      int v10 = capabilities::abs::defaultSystemLogsHistory(v4);
      v17[0] = 0;
      *(void *)((char *)v17 + 7) = 0;
      std::to_string(&v15, v10);
      goto LABEL_18;
    }
LABEL_13:
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    *(void *)((char *)v17 + 7) = 0;
    v17[0] = 0;
    std::to_string(&v15, IsCarrierBuild);
    goto LABEL_18;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x263F25E28])) {
    goto LABEL_13;
  }
  int v4 = (capabilities::abs *)strcasecmp(a1, (const char *)*MEMORY[0x263F25F28]);
  int v5 = a1;
  if (!v4) {
    goto LABEL_12;
  }
LABEL_4:
  if (strcasecmp(v5, (const char *)*MEMORY[0x263F26468]))
  {
    xpc_object_t v6 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v8 = *MEMORY[0x263F25F30];
      if (a1[23] >= 0) {
        int v9 = a1;
      }
      else {
        int v9 = *(char **)a1;
      }
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v8;
      HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
      char v16 = v9;
      _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v15,
        0x20u);
      return 0;
    }
    return result;
  }
  *(void *)((char *)v17 + 7) = 0;
  v17[0] = 0;
  std::to_string(&v15, 1);
LABEL_18:
  v17[0] = v15.__r_.__value_.__l.__size_;
  std::string::size_type v12 = v15.__r_.__value_.__r.__words[0];
  *(void *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v14 = v17[0];
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 15) = *(void *)((char *)v17 + 7);
  *(unsigned char *)(a2 + 23) = v13;
  return 1;
}

void sub_2637153CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x26371537CLL);
    }
    JUMPOUT(0x263715384);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    int v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25DA0])) {
      goto LABEL_10;
    }
  }
  else
  {
    int v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x263F25DA0])) {
      goto LABEL_10;
    }
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F26828]))
  {
    int v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      std::string::size_type v7 = *MEMORY[0x263F25E48];
      if (a1[23] >= 0) {
        std::string::size_type v8 = a1;
      }
      else {
        std::string::size_type v8 = *(char **)a1;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v7;
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      char v13 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
      return 0;
    }
    return result;
  }
LABEL_10:
  memset(v14, 0, 15);
  std::to_string(&v12, 0);
  v14[0] = v12.__r_.__value_.__l.__size_;
  std::string::size_type v9 = v12.__r_.__value_.__r.__words[0];
  *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v11 = v14[0];
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
  *(unsigned char *)(a2 + 23) = v10;
  return 1;
}

void sub_2637155B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x263715568);
    }
    JUMPOUT(0x263715570);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1;
  v14[2] = *MEMORY[0x263EF8340];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v4 = strcasecmp(a1, (const char *)*MEMORY[0x263F25DA0]);
  if (v4)
  {
    int v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v6 = *MEMORY[0x263F25E98];
      if (*((char *)v3 + 23) >= 0) {
        std::string::size_type v7 = v3;
      }
      else {
        std::string::size_type v7 = (uint64_t *)*v3;
      }
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v6;
      HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
      char v13 = v7;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
        (uint8_t *)&v12,
        0x20u);
    }
  }
  else
  {
    memset(v14, 0, 15);
    std::to_string(&v12, 0);
    v14[0] = v12.__r_.__value_.__l.__size_;
    std::string::size_type v8 = v12.__r_.__value_.__r.__words[0];
    *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
    char v9 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    uint64_t v10 = v14[0];
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 15) = *(void *)((char *)v14 + 7);
    *(unsigned char *)(a2 + 23) = v9;
  }
  return v4 == 0;
}

void sub_26371574C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0) {
      JUMPOUT(0x2637156F8);
    }
    JUMPOUT(0x263715700);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x263F263C8]))
    {
LABEL_17:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F26458]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F260E8])) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v10 = (const char *)abm::helper::asString();
    size_t v11 = strlen(v10);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      char v13 = operator new(v14 + 1);
      *(void *)&v16[8] = v12;
      *(void *)&v16[16] = v15 | 0x8000000000000000;
      *(void *)char v16 = v13;
    }
    else
    {
      v16[23] = v11;
      char v13 = v16;
      if (!v11)
      {
        v16[0] = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
          a2->__r_.__value_.__r.__words[2] = *(void *)&v16[16];
          return 1;
        }
LABEL_31:
        operator delete(a2->__r_.__value_.__l.__data_);
        goto LABEL_23;
      }
    }
    memmove(v13, v10, v12);
    v13[v12] = 0;
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_31;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F263C8])) {
    goto LABEL_17;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F26458])) {
    goto LABEL_19;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F260E8]))
  {
LABEL_14:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild()) {
      char v9 = "1";
    }
    else {
      char v9 = "3";
    }
    std::string::__assign_external(a2, v9);
    return 1;
  }
LABEL_5:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F262E0])) {
    goto LABEL_17;
  }
  int v5 = GetOsLogContext()[1];
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v7 = *MEMORY[0x263F25E90];
    if (a1[23] >= 0) {
      std::string::size_type v8 = a1;
    }
    else {
      std::string::size_type v8 = *(char **)a1;
    }
    *(_DWORD *)char v16 = 136315650;
    *(void *)&v16[4] = "prop.default";
    *(_WORD *)&v16[12] = 2080;
    *(void *)&v16[14] = v7;
    *(_WORD *)&v16[22] = 2080;
    uint64_t v17 = v8;
    _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'", v16, 0x20u);
    return 0;
  }
  return result;
}

double util::to_str<BOOL>(std::string *a1, int __val)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_263715AB0(void *a1)
{
}

void sub_263715ABC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<int>@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_263715B34(void *a1)
{
}

void sub_263715B40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::resetModeOnAPBoot(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_263715BC8(void *a1)
{
}

void sub_263715BD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<unsigned int>(std::string *a1, unsigned int __val)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  double result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_263715C54(void *a1)
{
}

void sub_263715C60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  double result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_263715CD0(void *a1)
{
}

void sub_263715CDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this)) {
    return "Lite";
  }
  else {
    return "Default";
  }
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  uint64_t v1 = (config::hw *)capabilities::radio::ice(this);
  if (!v1) {
    return "None";
  }
  if (config::hw::watch(v1)) {
    return "Lite";
  }
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if ((v1 - 1) > 2) {
    int v2 = 23;
  }
  else {
    int v2 = dword_2637A8024[(int)v1 - 1];
  }
  shouldUseMinBasebandTransportIOReadCFIndex Count = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15) {
    int v4 = 36;
  }
  else {
    int v4 = 4;
  }
  if (v2 == 16) {
    int v5 = 36;
  }
  else {
    int v5 = v4;
  }
  if (v2 == 2) {
    unsigned int v6 = 16;
  }
  else {
    unsigned int v6 = v5;
  }
  if (shouldUseMinBasebandTransportIOReadCount) {
    return 4;
  }
  else {
    return v6;
  }
}

uint64_t defaults::bbtrace::trace_sleep_mode(defaults::bbtrace *this)
{
  return MEMORY[0x270F96D78](this);
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 80;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  uint64_t v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1)) {
    return 0x4000;
  }
  else {
    return 0x8000;
  }
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  double result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if (result)
  {
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  }
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) == 0)
  {
    uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild();
    if (!IsInternalBuild) {
      return 2;
    }
  }

  return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }
  else {
    return TelephonyUtilIsCarrierBuild();
  }
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

unint64_t defaults::tracesettings::config@<X0>(void *a1@<X8>)
{
  std::string v3 = (const char *)abm::helper::asString();
  unint64_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    std::string::size_type v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
  return result;
}

void DataStallDetection::create(capabilities::abs *a1@<X0>, uint64_t *a2@<X8>)
{
  if (capabilities::abs::supportsRadioHealth(a1))
  {
    int v4 = operator new(0xA0uLL);
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v8 = *(void *)a1;
    char v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    DataStallDetection::DataStallDetection((uint64_t)v4, &v8);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(a2, v5);
    ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
    uint64_t v7 = v9;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_263716330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_26371634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_263716360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t DataStallDetection::DataStallDetection(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_270EA9AE8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v24, "com.apple.telephony.abm", "net.stall");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v5 = dispatch_queue_create_with_target_V2("net.stall", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(void *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  *(void *)a1 = &unk_270EA9C38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v26);
  *(void *)(a1 + 8) = &unk_270EA5428;
  *(void *)(a1 + 56) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v25);
  *(void *)a1 = &unk_270EA9CC8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  *(void *)a1 = &unk_270EA9AE8;
  *(void *)(a1 + 104) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v8 = off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v26);
    long long v9 = v26;
    long long v26 = 0uLL;
    uint64_t v10 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v9;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    size_t v11 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (*((void *)&v26 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v8 = off_26A99F030;
  }
  size_t v12 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v13 = *(void *)(*(void *)v8 + 208);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)(a1 + 120) = v13;
  uint64_t v14 = _Block_copy(&__block_literal_global_2);
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  *(void *)(a1 + 128) = v14;
  *(void *)(a1 + 136) = v15;
  char v16 = (std::__shared_weak_count *)a2[1];
  unsigned int v23 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v17 = off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v26);
    long long v18 = v26;
    long long v26 = 0uLL;
    char v19 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    std::string::size_type v20 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (*((void *)&v26 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v17 = off_26A99F030;
  }
  os_log_t v21 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  v25[0] = v17;
  v25[1] = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return a1;
}

void sub_263716824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)(v9 + 16));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_2637168BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *DataStallDetection::getName(DataStallDetection *this)
{
  return "net.stall";
}

uint64_t dispatch::callback<void({block_pointer})(std::string)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void *ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA9C38;
  MEMORY[0x263E68AF0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  std::string v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EA9C38;
  MEMORY[0x263E68AF0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  std::string v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void DataStallDetection::~DataStallDetection(DataStallDetection *this)
{
  *(void *)this = &unk_270EA9AE8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 19);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string v3 = (__CFRunLoop *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_17;
    }
  }
  else
  {
    std::string v3 = (__CFRunLoop *)*((void *)this + 15);
    if (!v3) {
      goto LABEL_17;
    }
  }
  if (CFRunLoopIsWaiting(v3))
  {
    int v4 = dispatch_group_create();
    uint64_t v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v5);
    }
    uint64_t v6 = (__CFRunLoop *)*((void *)this + 15);
    uint64_t v7 = (const void *)*MEMORY[0x263EFFE88];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN18DataStallDetectionD2Ev_block_invoke;
    block[3] = &__block_descriptor_tmp_3_0;
    dispatch_group_t group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(group);
    }
    CFRunLoopPerformBlock(v6, v7, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 15));
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
LABEL_17:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v9 = *((void *)this + 17);
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 16);
  if (v10) {
    _Block_release(v10);
  }
  size_t v11 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)this = &unk_270EA9C38;
  MEMORY[0x263E68AF0]((char *)this + 8);
  size_t v12 = *((void *)this + 12);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

{
  void *v1;
  uint64_t vars8;

  DataStallDetection::~DataStallDetection(this);

  operator delete(v1);
}

void DataStallDetection::start(DataStallDetection *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (std::string v3 = std::__shared_weak_count::lock(v2)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v4 = v3;
  atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  __int16 v27 = 0;
  int v28 = 0;
  unint64_t v29 = 0;
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Start", buf, 2u);
  }
  __int16 v25 = (NetworkStatsInterface *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  v24[0] = *((void *)this + 13);
  v24[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::create(v24, (uint64_t *)&v25);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  BOOL v22 = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  NetworkStatsInterface::query(v25, &v22);
  uint64_t v7 = v22 + 1;
  uint64_t v8 = (void *)*v22;
  if ((void *)*v22 != v22 + 1)
  {
    do
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v9;
      *(_OWORD *)xpc_object_t v32 = v9;
      *(_OWORD *)&v32[16] = v9;
      *(_DWORD *)buf = *((_DWORD *)v8 + 8);
      v32[0] = *((unsigned char *)v8 + 48);
      *(void *)&uint8_t buf[8] = v8[5];
      if (*((char *)v8 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v32[8], (const std::string::value_type *)v8[7], v8[8]);
      }
      else
      {
        *(_OWORD *)&v32[8] = *(_OWORD *)(v8 + 7);
        *(void *)&v32[24] = v8[9];
      }
      uint64_t v10 = v28;
      if ((unint64_t)v28 >= v29)
      {
        int v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v27, (uint64_t)&v32[8]);
        if ((v32[31] & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
      else if ((v32[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)&v32[8], *(std::string::size_type *)&v32[16]);
        int v28 = v10 + 1;
        if ((v32[31] & 0x80000000) == 0)
        {
LABEL_23:
          size_t v12 = (void *)v8[1];
          if (!v12) {
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
      else
      {
        long long v11 = *(_OWORD *)&v32[8];
        v28->__r_.__value_.__r.__words[2] = *(void *)&v32[24];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        int v28 = v10 + 1;
        if ((v32[31] & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
      operator delete(*(void **)&v32[8]);
      size_t v12 = (void *)v8[1];
      if (!v12)
      {
        do
        {
LABEL_29:
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v14);
        goto LABEL_14;
      }
      do
      {
LABEL_27:
        uint64_t v13 = v12;
        size_t v12 = (void *)*v12;
      }
      while (v12);
LABEL_14:
      uint64_t v8 = v13;
    }
    while (v13 != v7);
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 0x40000000;
  v21[2] = ___ZN18DataStallDetection5startEv_block_invoke;
  v21[3] = &__block_descriptor_tmp_5_0;
  v21[4] = this;
  xpc_object_t v30 = v21;
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)xpc_object_t v32 = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *(void *)&v32[8] = &__block_descriptor_tmp_21_0;
  *(void *)&v32[16] = (char *)this + 72;
  *(void *)&v32[24] = &v30;
  uint64_t v15 = *((void *)this + 11);
  if (*((void *)this + 12))
  {
    dispatch_async_and_wait(v15, buf);
    char v16 = (std::__shared_weak_count *)v23;
    if (!v23) {
      goto LABEL_38;
    }
  }
  else
  {
    dispatch_sync(v15, buf);
    char v16 = (std::__shared_weak_count *)v23;
    if (!v23) {
      goto LABEL_38;
    }
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_38:
  uint64_t v17 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::string *)v27;
  if (v27)
  {
    char v19 = v28;
    std::string::size_type v20 = v27;
    if (v28 != v27)
    {
      do
      {
        if (SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19[-1].__r_.__value_.__l.__data_);
        }
        --v19;
      }
      while (v19 != v18);
      std::string::size_type v20 = v27;
    }
    int v28 = v18;
    operator delete(v20);
  }
  std::__shared_weak_count::__release_weak(v4);
}

void sub_2637170AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::vector<std::string>::~vector[abi:ne180100](&a21);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void ___ZN18DataStallDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void DataStallDetection::setCallback(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_4;
  v7[4] = a1;
  int v4 = *(void **)a2;
  if (*(void *)a2) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  int v2 = (void *)a1[4];
  std::string v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I setCallback", v8, 2u);
  }
  int v4 = (void *)a1[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = (const void *)v2[16];
  uint8_t v2[16] = v4;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = a1[6];
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = v2[17];
  v2[17] = v6;
  if (v7) {
    dispatch_release(v7);
  }
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 40);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  std::string v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stall");
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA9C38;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EA9C38;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (int v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    std::string v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_263717594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2637175B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9C78;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2637176DC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_263717704(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EA9C38;
  MEMORY[0x263E68AF0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EA9D00;
  block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *ABMServerRegistryBuilder::create@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_270EA9D40;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = v6;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

__n128 ABMServerRegistryBuilder::ABMServerRegistryBuilder(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void ABMServerRegistryBuilder::~ABMServerRegistryBuilder(ABMServerRegistryBuilder *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ABMServerRegistryBuilder::setupQMIServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  RegistryModel = (void **)Registry::getRegistryModel(*a2);
  uint64_t v6 = *RegistryModel;
  if (!**RegistryModel)
  {
    uint64_t v7 = *a3;
    if (*a3)
    {
      uint64_t v8 = a3[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      long long v9 = (std::__shared_weak_count *)v6[1];
      *uint64_t v6 = v7;
      v6[1] = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 8))(&v13);
      long long v10 = v13;
      long long v13 = 0uLL;
      long long v11 = (std::__shared_weak_count *)v6[1];
      *(_OWORD *)uint64_t v6 = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void ABMServerRegistryBuilder::setupRouterServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  uint64_t RegistryModel = Registry::getRegistryModel(*a2);
  uint64_t v6 = *(void *)RegistryModel;
  if (!*(void *)(*(void *)RegistryModel + 16))
  {
    uint64_t v7 = *a3;
    if (*a3)
    {
      uint64_t v8 = a3[1];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      long long v9 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v7;
      *(void *)(v6 + 24) = v8;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 16))(&v13);
      long long v10 = v13;
      long long v13 = 0uLL;
      long long v11 = *(std::__shared_weak_count **)(v6 + 24);
      *(_OWORD *)(v6 + 16) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9D40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if (result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_std::string::size_type size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__dst))
  {
    uint64_t v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    long long v18 = opendir(v17);
    if (v18)
    {
      char v19 = v18;
      std::string::size_type v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        long long v61 = 0;
        long long v62 = 0;
        uint64_t v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        os_log_t v21 = (char *)v61;
        long long v57 = v62;
        if (v61 == v62)
        {
          uint64_t updated = 0;
          if (v61) {
            goto LABEL_105;
          }
          return updated;
        }
        BOOL v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            long long v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          int v25 = v5[23];
          if (v25 >= 0) {
            size_t v26 = *((unsigned __int8 *)v5 + 23);
          }
          else {
            size_t v26 = *((void *)v5 + 1);
          }
          unint64_t v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v29 = v27 | 7;
            }
            uint64_t v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(void *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(void *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26) {
              goto LABEL_47;
            }
          }
          if (v25 >= 0) {
            uint64_t v31 = v5;
          }
          else {
            uint64_t v31 = *(const char **)v5;
          }
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            xpc_object_t v32 = &v60;
          }
          else {
            xpc_object_t v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v60.__r_.__value_.__l.__size_;
          }
          xpc_object_t v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0) {
            operator delete(*(void **)&__dst.st_dev);
          }
          std::string::size_type v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v36 = v60.__r_.__value_.__l.__size_;
          }
          if (v36 == 2)
          {
            CFTypeRef v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              CFTypeRef v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              size_t v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              __darwin_ino64_t v43 = v42;
              if (v42 >= 0x17)
              {
                uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17) {
                  uint64_t v45 = v42 | 7;
                }
                uint64_t v46 = v45 + 1;
                std::string::size_type v44 = operator new(v45 + 1);
                __dst.st_ino = v43;
                *(void *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(void *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                std::string::size_type v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  int st_gid_high = SHIBYTE(__dst.st_gid);
                  unsigned int v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0) {
                    xpc_object_t v49 = &__dst;
                  }
                  else {
                    xpc_object_t v49 = *(stat **)&__dst.st_dev;
                  }
                  uint64_t updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    unsigned int v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            xpc_object_t v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              xpc_object_t v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            }
            if (v37->__r_.__value_.__s.__data_[0] == 46) {
              goto LABEL_70;
            }
          }
          v39.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blkstd::string::size_type size = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespec = v39;
          *(timespec *)&__dst.st_std::string::size_type size = v39;
          __dst.st_mtimespec = v39;
          __dst.st_ctimespec = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespec = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v40 = &__p;
          }
          else {
            BOOL v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (stat((const char *)v40, &__dst)) {
            goto LABEL_70;
          }
          std::string v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          xpc_object_t v52 = opendir((const char *)v51);
          os_log_t v53 = v52;
          if (!v52) {
            goto LABEL_70;
          }
          uint64_t v54 = readdir(v52);
          closedir(v53);
          if (!v54) {
            goto LABEL_70;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v58 = __p;
          }
          uint64_t updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            unsigned int v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
LABEL_91:
            }
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57) {
            char v23 = 0;
          }
          else {
            char v23 = updated;
          }
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            os_log_t v21 = (char *)v61;
            if (!v61) {
              return updated;
            }
LABEL_105:
            long long v55 = (void **)v62;
            char v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0) {
                  operator delete(*(v55 - 3));
                }
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              char v16 = v61;
            }
            long long v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  size_t v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  __darwin_ino64_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(void *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(void *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  long long v9 = &__dst;
  if (v7) {
LABEL_13:
  }
    memmove(v9, v5, v8);
  *((unsigned char *)v9 + v8) = 0;
  int v12 = SHIBYTE(__dst.st_gid);
  long long v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0) {
    BOOL v14 = &__dst;
  }
  else {
    BOOL v14 = *(stat **)&__dst.st_dev;
  }
  uint64_t updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    char v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_2637186C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
}

void sub_2637186F4()
{
}

DIR *support::fs::isDir(const char *a1)
{
  uint64_t v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blkstd::string::size_type size = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_std::string::size_type size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v7)) {
    return 0;
  }
  if (v1[23] >= 0) {
    int v4 = v1;
  }
  else {
    int v4 = *(const char **)v1;
  }
  __n128 result = opendir(v4);
  if (result)
  {
    uint64_t v5 = result;
    timespec v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  __n128 result = opendir(a1);
  if (result)
  {
    int v4 = result;
    uint64_t v5 = readdir(result);
    if (v5)
    {
      timespec v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        size_t d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            uint64_t v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            uint64_t v11 = d_namlen | 7;
          }
          __darwin_ino64_t v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)stat __dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          __darwin_ino64_t v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            long long v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        long long v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            long long v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        timespec v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_263718994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    uint64_t v5 = getpwnam((const char *)__p);
    if (v5) {
      goto LABEL_4;
    }
LABEL_6:
    stat v7 = GetOsLogContext()[1];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      long long v10 = __p;
      _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    uint64_t v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
    goto LABEL_6;
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4 = (int)this;
  do
  {
    size_t v5 = __nbyte;
    if (!__nbyte) {
      break;
    }
    ssize_t v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  while (1)
  {
    size_t v5 = __nitems;
    if (!__nitems) {
      break;
    }
    size_t v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6) {
      return v5 == 0;
    }
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1 = (int)this;
  do
    int v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a1[23] >= 0) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = *(const char **)a1;
  }
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    long long v9 = operator new(v10 + 1);
    *(void *)&__dst[8] = v8;
    *(void *)&__dst[16] = v11 | 0x8000000000000000;
    *(void *)stat __dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  long long v9 = __dst;
  if (v7) {
LABEL_11:
  }
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0) {
    int v12 = __dst;
  }
  else {
    int v12 = *(const char **)__dst;
  }
  int v13 = open(v12, 0, 420);
  int v14 = v13;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_17:
      if (a2[23] >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(const char **)a2;
      }
      size_t v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v21 = v16 | 7;
        }
        uint64_t v22 = v21 + 1;
        long long v18 = operator new(v21 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v22 | 0x8000000000000000;
        *(void *)stat __dst = v18;
      }
      else
      {
        __dst[23] = v16;
        long long v18 = __dst;
        if (!v16)
        {
LABEL_31:
          v18[v17] = 0;
          if (__dst[23] >= 0) {
            char v23 = __dst;
          }
          else {
            char v23 = *(const char **)__dst;
          }
          int v24 = open(v23, 1541, 420);
          int v25 = v24;
          if ((__dst[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__dst);
            if ((v25 & 0x80000000) == 0) {
              goto LABEL_36;
            }
          }
          else if ((v24 & 0x80000000) == 0)
          {
LABEL_36:
            memset(__dst, 170, sizeof(__dst));
            ssize_t v26 = read(v14, __dst, 0x400uLL);
            if (v26 < 1)
            {
LABEL_42:
              BOOL v20 = v26 == 0;
              if (!v26 && a3)
              {
                *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&__dst[112] = v29;
                *(_OWORD *)&__dst[128] = v29;
                *(_OWORD *)&__dst[80] = v29;
                *(_OWORD *)&__dst[96] = v29;
                *(_OWORD *)&__dst[48] = v29;
                *(_OWORD *)&__dst[64] = v29;
                *(_OWORD *)&__dst[16] = v29;
                *(_OWORD *)&__dst[32] = v29;
                *(_OWORD *)stat __dst = v29;
                if (fstat(v14, (stat *)__dst)) {
                  BOOL v20 = 0;
                }
                else {
                  BOOL v20 = fchmod(v25, *(mode_t *)&__dst[4]) == 0;
                }
              }
            }
            else
            {
              unint64_t v27 = __dst;
              do
              {
                while (!v26)
                {
                  memset(__dst, 170, sizeof(__dst));
                  ssize_t v26 = read(v14, __dst, 0x400uLL);
                  unint64_t v27 = __dst;
                  if (v26 <= 0) {
                    goto LABEL_42;
                  }
                }
                ssize_t v28 = write(v25, v27, v26);
                v26 -= v28;
                v27 += v28;
              }
              while ((v28 & 0x8000000000000000) == 0);
              BOOL v20 = 0;
            }
            while (close(v25) && *__error() == 4)
              ;
            goto LABEL_52;
          }
          uint64_t v30 = GetOsLogContext()[1];
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0) {
              xpc_object_t v33 = a2;
            }
            else {
              xpc_object_t v33 = *(const char **)a2;
            }
            *(_DWORD *)stat __dst = 136315138;
            *(void *)&__dst[4] = v33;
            _os_log_error_impl(&dword_26368A000, v30, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
          }
          BOOL v20 = 0;
LABEL_52:
          while (close(v14) && *__error() == 4)
            ;
          return v20;
        }
      }
      memmove(v18, v15, v17);
      goto LABEL_31;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  char v19 = GetOsLogContext()[1];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0) {
      xpc_object_t v32 = a1;
    }
    else {
      xpc_object_t v32 = *(const char **)a1;
    }
    *(_DWORD *)stat __dst = 136315138;
    *(void *)&__dst[4] = v32;
    _os_log_error_impl(&dword_26368A000, v19, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
  }
  return 0;
}

void sub_263719060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x263EF8340];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  size_t v7 = *(char **)a2;
  size_t v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    int v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    size_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      long long v18 = v6 - 16;
      char v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)char v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = &v6[-v17 - 8];
        char v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    ssize_t v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    size_t v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x263E69400](&__b[2]);
  std::istream::~istream();
  MEMORY[0x263E69630](&__b[53]);
  return v4;
}

void sub_26371942C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  BOOL v4;
  uint64_t v6[90];

  v6[89] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  BOOL v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(void *)(v6[0] - 24)) | 4);
    }
  }
  v6[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x263E69400](&v6[2]);
  std::istream::~istream();
  MEMORY[0x263E69630](&v6[53]);
  return v4;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  unint64_t v3 = fopen(a1, "rb");
  if (v3)
  {
    BOOL v4 = v3;
    fseek(v3, 0, 2);
    unint64_t v5 = MEMORY[0x263E69B30](v4);
    if (v5 != -1)
    {
      size_t v6 = v5;
      unint64_t v8 = *(char **)a2;
      size_t v7 = *(char **)(a2 + 8);
      unint64_t v9 = (unint64_t)&v7[-*(void *)a2];
      size_t v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9) {
          *(void *)(a2 + 8) = &v8[v5];
        }
        goto LABEL_36;
      }
      uint64_t v11 = *(void *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(void *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        uint64_t v30 = *(char **)a2;
        uint64_t v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v11 - (void)v8;
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v5) {
        uint64_t v13 = v5;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v13;
      }
      uint64_t v15 = (char *)operator new(v14);
      size_t v16 = &v15[v9];
      unint64_t v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = &v15[v6];
        *(void *)(a2 + 16) = v17;
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          unint64_t v18 = 0;
          goto LABEL_26;
        }
        unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v20 = v7 - 16;
        long long v21 = &v15[v7 - 16 - v8];
        unint64_t v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)long long v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18) {
          goto LABEL_33;
        }
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v24 = &v7[-v18 - 8];
          uint64_t v25 = (char *)(v24 - v8);
          unint64_t v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v27 = *(void *)v24;
            v24 -= 8;
            *(void *)&v25[(void)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_33;
          }
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      ssize_t v28 = v16 - 1;
      do
      {
        char v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      size_t v7 = v8;
      size_t v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blkstd::string::size_type size = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_std::string::size_type size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v201 = v4;
  long long v199 = v4;
  long long v200 = v4;
  *(_OWORD *)&v198[0].__locale_ = v4;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v198, "^([/_\\-[:alnum:]]*)(.*)", 0);
  memset(&v197, 170, sizeof(v197));
  uint64_t v185 = a2;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v197 = *(std::string *)a1;
  }
  unsigned int v5 = 0;
  size_t v6 = &v204[24];
  uint64_t v186 = a1;
  v194 = &v204[24];
  while (1)
  {
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v202.st_blksize_t size = v7;
    *(timespec *)v202.st_qspare = v7;
    v202.st_birthtimespec = v7;
    *(timespec *)&v202.st_size_t size = v7;
    v202.st_mtimespec = v7;
    v202.st_ctimespec = v7;
    *(timespec *)&v202.st_uid = v7;
    v202.st_atimespec = v7;
    *(timespec *)&v202.st_dev = v7;
    if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v197;
    }
    else {
      unint64_t v8 = (std::string *)v197.__r_.__value_.__r.__words[0];
    }
    if (stat((const char *)v8, &v202))
    {
      *(std::string *)uint64_t v185 = v197;
      goto LABEL_333;
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0) {
      size_t v10 = (std::sub_match<const char *> *)a1;
    }
    else {
      size_t v10 = *(std::sub_match<const char *> **)a1;
    }
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a1 + 8);
    }
    uint64_t v11 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v10 + v9);
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v12;
    *(_OWORD *)size_t v6 = v12;
    *((_OWORD *)v6 + 1) = v12;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v207 = 0;
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    char v210 = 0;
    char v211 = 0;
    uint64_t v212 = 0;
    long long v203 = 0u;
    memset(v204, 0, 25);
    *(_OWORD *)&v202.st_birthtimespec.tv_nsec = v12;
    v202.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v202.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v202.st_mtimespec, 0, 17);
    memset(&v202.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v202.st_size) = 0;
    v202.st_blocks = 0;
    memset(&v202, 0, 41);
    int v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v198, v10, (std::sub_match<const char *> *)((char *)v10 + v9), (std::vector<std::csub_match> *)&v202, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v203, (uint64_t)v10, v11, (uint64_t *)&v202.st_dev, 0);
    if (*(void *)&v202.st_dev)
    {
      v202.st_ino = *(void *)&v202.st_dev;
      operator delete(*(void **)&v202.st_dev);
    }
    if (v210) {
      int v14 = v13 ^ 1;
    }
    else {
      int v14 = 1;
    }
    if ((void)v203)
    {
      *((void *)&v203 + 1) = v203;
      operator delete((void *)v203);
    }
    if ((v13 & v14) == 0) {
      break;
    }
    unsigned int v15 = v5 + 1;
    memset(__p, 170, 24);
    std::to_string((std::string *)&v203, v15);
    size_t v16 = std::string::insert((std::string *)&v203, 0, "$1-", 3uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&v202.st_uid = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v202.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unint64_t v18 = std::string::append((std::string *)&v202, "$2", 2uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    size_t v6 = v194;
    if (SHIBYTE(v202.st_gid) < 0)
    {
      operator delete(*(void **)&v202.st_dev);
      unsigned int v187 = v15;
      if ((v204[7] & 0x80000000) != 0) {
LABEL_298:
      }
        operator delete((void *)v203);
    }
    else
    {
      unsigned int v187 = v15;
      if ((v204[7] & 0x80000000) != 0) {
        goto LABEL_298;
      }
    }
    memset(&v195, 0, sizeof(v195));
    int v20 = *(char *)(a1 + 23);
    if (v20 >= 0) {
      long long v21 = (std::sub_match<const char *> *)a1;
    }
    else {
      long long v21 = *(std::sub_match<const char *> **)a1;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a1 + 8);
    }
    long long v23 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      long long v23 = (void **)__p[0];
    }
    __s = (char *)v23;
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v202.st_gen = v24;
    v202.st_size_t size = 0xAAAAAAAAAAAAAAAALL;
    v202.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v202.st_rdev + 1) = -1431655766;
    *(void *)&v202.st_dev = v21;
    v202.st_ino = (__darwin_ino64_t)v21 + v22;
    *(void *)&v202.st_uid = v198;
    v202.dev_t st_rdev = 0;
    memset(&v202.st_birthtimespec, 0, 17);
    memset(&v202.st_blocks, 0, 17);
    LOBYTE(v202.st_qspare[0]) = 0;
    v202.st_qspare[1] = 0;
    memset(&v202.st_atimespec, 0, 41);
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v24;
    *(_OWORD *)size_t v6 = v24;
    *((_OWORD *)v6 + 1) = v24;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    char v207 = 0;
    uint64_t v208 = 0;
    uint64_t v209 = 0;
    char v210 = 0;
    char v211 = 0;
    uint64_t v212 = 0;
    long long v203 = 0u;
    memset(v204, 0, 25);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v198, v21, (std::sub_match<const char *> *)((char *)v21 + v22), (std::vector<std::csub_match> *)&v203, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v202.st_atimespec, (uint64_t)v21, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v21 + v22), (uint64_t *)&v203, 0);
    if ((void)v203)
    {
      *((void *)&v203 + 1) = v203;
      operator delete((void *)v203);
    }
    tv_nsec = (void *)v202.st_atimespec.tv_nsec;
    if (v202.st_atimespec.tv_nsec != v202.st_atimespec.tv_sec)
    {
      size_t v189 = strlen(__s);
      unint64_t v26 = (unsigned __int8 *)&__s[v189];
      while (2)
      {
        tv_sec = (char *)v202.st_birthtimespec.tv_sec;
        uint64_t v29 = v202.st_birthtimespec.tv_nsec;
        while (tv_sec != (char *)v29)
        {
          char v33 = *tv_sec;
          if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
            {
              size_t size = HIBYTE(v195.__r_.__value_.__r.__words[2]);
              *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
              uint64_t v31 = &v195;
              goto LABEL_41;
            }
            xpc_object_t v34 = &v195;
            size_t size = 22;
LABEL_49:
            if (size + 1 > 2 * size) {
              unint64_t v36 = size + 1;
            }
            else {
              unint64_t v36 = 2 * size;
            }
            uint64_t v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17) {
              uint64_t v37 = v36 | 7;
            }
            if (v36 >= 0x17) {
              size_t v35 = v37 + 1;
            }
            else {
              size_t v35 = 23;
            }
LABEL_57:
            CFTypeRef v38 = (std::string *)operator new(v35);
            uint64_t v31 = v38;
            if (!size || (memmove(v38, v34, size), size != 22)) {
              operator delete(v34);
            }
            v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v195.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            goto LABEL_62;
          }
          size_t size = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v195.__r_.__value_.__l.__size_ == size)
          {
            if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v34 = (std::string *)v195.__r_.__value_.__r.__words[0];
            size_t v35 = 0x7FFFFFFFFFFFFFF7;
            if (size < 0x3FFFFFFFFFFFFFF3) {
              goto LABEL_49;
            }
            goto LABEL_57;
          }
          size_t size = v195.__r_.__value_.__l.__size_;
          uint64_t v31 = (std::string *)v195.__r_.__value_.__r.__words[0];
LABEL_62:
          v195.__r_.__value_.__l.__size_ = size + 1;
LABEL_41:
          xpc_object_t v32 = (char *)v31 + size;
          *xpc_object_t v32 = v33;
          v32[1] = 0;
          ++tv_sec;
        }
        if (v189)
        {
          for (uint64_t i = __s; i != (char *)v26; ++i)
          {
            int v43 = *i;
            if (v43 != 36) {
              goto LABEL_135;
            }
            std::string::size_type v44 = (unsigned __int8 *)(i + 1);
            if (i + 1 == (char *)v26) {
              goto LABEL_134;
            }
            int v45 = (char)*v44;
            int v43 = *v44;
            if (v45 <= 38)
            {
              if (v45 == 36)
              {
                ++i;
                unsigned __int8 v82 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_136;
                }
                goto LABEL_161;
              }
              if (v45 != 38) {
                goto LABEL_123;
              }
              uint64_t v46 = *(char **)v202.st_atimespec.tv_sec;
              unsigned int v47 = *(char **)(v202.st_atimespec.tv_sec + 8);
              if (*(char **)v202.st_atimespec.tv_sec == v47)
              {
LABEL_179:
                uint64_t i = (char *)v44;
                continue;
              }
              while (2)
              {
                while (2)
                {
                  char v49 = *v46;
                  unsigned __int8 v50 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                  {
                    size_t v52 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v195.__r_.__value_.__l.__size_ == v52)
                    {
                      if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                        goto LABEL_337;
                      }
                      std::string v51 = (std::string *)v195.__r_.__value_.__r.__words[0];
                      size_t v53 = 0x7FFFFFFFFFFFFFF7;
                      if (v52 < 0x3FFFFFFFFFFFFFF3) {
                        goto LABEL_82;
                      }
                      goto LABEL_90;
                    }
                    size_t v52 = v195.__r_.__value_.__l.__size_;
                    std::string::size_type v57 = v195.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                    {
                      *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                      unsigned int v48 = (char *)&v195 + v50;
                      *unsigned int v48 = v49;
                      v48[1] = 0;
                      if (++v46 == v47) {
                        goto LABEL_201;
                      }
                      continue;
                    }
                    std::string v51 = &v195;
                    size_t v52 = 22;
LABEL_82:
                    if (v52 + 1 > 2 * v52) {
                      unint64_t v54 = v52 + 1;
                    }
                    else {
                      unint64_t v54 = 2 * v52;
                    }
                    uint64_t v55 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17) {
                      uint64_t v55 = v54 | 7;
                    }
                    if (v54 >= 0x17) {
                      size_t v53 = v55 + 1;
                    }
                    else {
                      size_t v53 = 23;
                    }
LABEL_90:
                    unint64_t v56 = operator new(v53);
                    std::string::size_type v57 = (std::string::size_type)v56;
                    if (!v52 || (memmove(v56, v51, v52), v52 != 22)) {
                      operator delete(v51);
                    }
                    v195.__r_.__value_.__r.__words[0] = v57;
                    v195.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
                  }
                  break;
                }
                v195.__r_.__value_.__l.__size_ = v52 + 1;
                std::string v58 = (char *)(v57 + v52);
                *std::string v58 = v49;
                v58[1] = 0;
                if (++v46 == v47) {
                  goto LABEL_201;
                }
                continue;
              }
            }
            if (v45 != 39)
            {
              if (v45 == 96)
              {
                long long v59 = (char *)v202.st_birthtimespec.tv_sec;
                uint64_t v60 = v202.st_birthtimespec.tv_nsec;
                if (v202.st_birthtimespec.tv_sec == v202.st_birthtimespec.tv_nsec) {
                  goto LABEL_179;
                }
                while (2)
                {
                  while (2)
                  {
                    char v62 = *v59;
                    unsigned __int8 v63 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size_t v65 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v195.__r_.__value_.__l.__size_ == v65)
                      {
                        if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_337;
                        }
                        uint64_t v64 = (std::string *)v195.__r_.__value_.__r.__words[0];
                        size_t v66 = 0x7FFFFFFFFFFFFFF7;
                        if (v65 < 0x3FFFFFFFFFFFFFF3) {
                          goto LABEL_108;
                        }
                        goto LABEL_116;
                      }
                      size_t v65 = v195.__r_.__value_.__l.__size_;
                      std::string::size_type v70 = v195.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                        long long v61 = (char *)&v195 + v63;
                        char *v61 = v62;
                        v61[1] = 0;
                        if (++v59 == (char *)v60) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      uint64_t v64 = &v195;
                      size_t v65 = 22;
LABEL_108:
                      if (v65 + 1 > 2 * v65) {
                        unint64_t v67 = v65 + 1;
                      }
                      else {
                        unint64_t v67 = 2 * v65;
                      }
                      uint64_t v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17) {
                        uint64_t v68 = v67 | 7;
                      }
                      if (v67 >= 0x17) {
                        size_t v66 = v68 + 1;
                      }
                      else {
                        size_t v66 = 23;
                      }
LABEL_116:
                      v69 = operator new(v66);
                      std::string::size_type v70 = (std::string::size_type)v69;
                      if (!v65 || (memmove(v69, v64, v65), v65 != 22)) {
                        operator delete(v64);
                      }
                      v195.__r_.__value_.__r.__words[0] = v70;
                      v195.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
                    }
                    break;
                  }
                  v195.__r_.__value_.__l.__size_ = v65 + 1;
                  uint64_t v71 = (char *)(v70 + v65);
                  *uint64_t v71 = v62;
                  v71[1] = 0;
                  if (++v59 == (char *)v60) {
                    goto LABEL_201;
                  }
                  continue;
                }
              }
LABEL_123:
              if ((v43 - 48) <= 9)
              {
                unint64_t v72 = *v44 - 48;
                if (i + 2 != (char *)v26)
                {
                  uint64_t v73 = i[2];
                  unsigned int v74 = v73 - 48;
                  uint64_t v75 = v73 + 10 * (int)v72 - 48;
                  if (v74 > 9)
                  {
                    std::string::size_type v44 = (unsigned __int8 *)(i + 1);
                  }
                  else
                  {
                    unint64_t v72 = v75;
                    std::string::size_type v44 = (unsigned __int8 *)(i + 2);
                  }
                }
                __darwin_time_t v76 = v202.st_atimespec.tv_sec + 24 * (int)v72;
                BOOL v77 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3) > v72;
                p_tv_nsec = &v202.st_mtimespec.tv_nsec;
                if (v77) {
                  p_tv_nsec = (uint64_t *)v76;
                }
                v79 = (char *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v76 + 8);
                if (!v77) {
                  p_st_ctimespec = &v202.st_ctimespec;
                }
                v81 = (char *)p_st_ctimespec->tv_sec;
                if (v79 == (char *)p_st_ctimespec->tv_sec) {
                  goto LABEL_179;
                }
                while (2)
                {
                  while (2)
                  {
                    char v85 = *v79;
                    unsigned __int8 v86 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size_t v88 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v195.__r_.__value_.__l.__size_ == v88)
                      {
                        if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                          goto LABEL_337;
                        }
                        v87 = (std::string *)v195.__r_.__value_.__r.__words[0];
                        size_t v89 = 0x7FFFFFFFFFFFFFF7;
                        if (v88 < 0x3FFFFFFFFFFFFFF3) {
                          goto LABEL_145;
                        }
                        goto LABEL_153;
                      }
                      size_t v88 = v195.__r_.__value_.__l.__size_;
                      std::string::size_type v93 = v195.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v195.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v84 = (char *)&v195 + v86;
                        char *v84 = v85;
                        v84[1] = 0;
                        if (++v79 == v81) {
                          goto LABEL_201;
                        }
                        continue;
                      }
                      v87 = &v195;
                      size_t v88 = 22;
LABEL_145:
                      if (v88 + 1 > 2 * v88) {
                        unint64_t v90 = v88 + 1;
                      }
                      else {
                        unint64_t v90 = 2 * v88;
                      }
                      uint64_t v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17) {
                        uint64_t v91 = v90 | 7;
                      }
                      if (v90 >= 0x17) {
                        size_t v89 = v91 + 1;
                      }
                      else {
                        size_t v89 = 23;
                      }
LABEL_153:
                      v92 = operator new(v89);
                      std::string::size_type v93 = (std::string::size_type)v92;
                      if (!v88 || (memmove(v92, v87, v88), v88 != 22)) {
                        operator delete(v87);
                      }
                      v195.__r_.__value_.__r.__words[0] = v93;
                      v195.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                    }
                    break;
                  }
                  v195.__r_.__value_.__l.__size_ = v88 + 1;
                  v94 = (char *)(v93 + v88);
                  char *v94 = v85;
                  v94[1] = 0;
                  if (++v79 == v81) {
                    goto LABEL_201;
                  }
                  continue;
                }
              }
LABEL_134:
              LOBYTE(v43) = 36;
LABEL_135:
              unsigned __int8 v82 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                if (v82 == 22)
                {
                  v83 = &v195;
                  size_t v40 = 22;
                  goto LABEL_164;
                }
                size_t v40 = v82;
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (v82 + 1) & 0x7F;
                xpc_object_t v41 = &v195;
LABEL_66:
                size_t v42 = (char *)v41 + v40;
                unsigned char *v42 = v43;
                v42[1] = 0;
                continue;
              }
LABEL_161:
              size_t v40 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v195.__r_.__value_.__l.__size_ == v40)
              {
                if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
LABEL_337:
                }
                  std::string::__throw_length_error[abi:ne180100]();
                size_t v6 = v194;
                v83 = (std::string *)v195.__r_.__value_.__r.__words[0];
                size_t v95 = 0x7FFFFFFFFFFFFFF7;
                if (v40 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_164:
                  if (v40 + 1 > 2 * v40) {
                    unint64_t v96 = v40 + 1;
                  }
                  else {
                    unint64_t v96 = 2 * v40;
                  }
                  uint64_t v97 = (v96 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v96 | 7) != 0x17) {
                    uint64_t v97 = v96 | 7;
                  }
                  if (v96 >= 0x17) {
                    size_t v95 = v97 + 1;
                  }
                  else {
                    size_t v95 = 23;
                  }
                }
                v98 = (std::string *)operator new(v95);
                xpc_object_t v41 = v98;
                if (!v40 || (memmove(v98, v83, v40), v40 != 22)) {
                  operator delete(v83);
                }
                v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v195.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
              }
              else
              {
                size_t v40 = v195.__r_.__value_.__l.__size_;
                xpc_object_t v41 = (std::string *)v195.__r_.__value_.__r.__words[0];
              }
              v195.__r_.__value_.__l.__size_ = v40 + 1;
              goto LABEL_66;
            }
            st_blocks = (char *)v202.st_blocks;
            v100 = *(char **)&v202.st_blksize;
            if (v202.st_blocks == *(void *)&v202.st_blksize) {
              goto LABEL_179;
            }
            do
            {
              while (1)
              {
                char v102 = *st_blocks;
                unsigned __int8 v103 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                  break;
                }
                if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
                {
                  v104 = &v195;
                  size_t v105 = 22;
LABEL_187:
                  if (v105 + 1 > 2 * v105) {
                    unint64_t v107 = v105 + 1;
                  }
                  else {
                    unint64_t v107 = 2 * v105;
                  }
                  uint64_t v108 = (v107 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17) {
                    uint64_t v108 = v107 | 7;
                  }
                  if (v107 >= 0x17) {
                    size_t v106 = v108 + 1;
                  }
                  else {
                    size_t v106 = 23;
                  }
                  goto LABEL_195;
                }
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                v101 = (char *)&v195 + v103;
                char *v101 = v102;
                v101[1] = 0;
                if (++st_blocks == v100) {
                  goto LABEL_201;
                }
              }
              size_t v105 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v195.__r_.__value_.__l.__size_ != v105)
              {
                size_t v105 = v195.__r_.__value_.__l.__size_;
                std::string::size_type v110 = v195.__r_.__value_.__r.__words[0];
                goto LABEL_200;
              }
              if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                goto LABEL_337;
              }
              v104 = (std::string *)v195.__r_.__value_.__r.__words[0];
              size_t v106 = 0x7FFFFFFFFFFFFFF7;
              if (v105 < 0x3FFFFFFFFFFFFFF3) {
                goto LABEL_187;
              }
LABEL_195:
              v109 = operator new(v106);
              std::string::size_type v110 = (std::string::size_type)v109;
              if (!v105 || (memmove(v109, v104, v105), v105 != 22)) {
                operator delete(v104);
              }
              v195.__r_.__value_.__r.__words[0] = v110;
              v195.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
LABEL_200:
              v195.__r_.__value_.__l.__size_ = v105 + 1;
              v111 = (char *)(v110 + v105);
              char *v111 = v102;
              v111[1] = 0;
              ++st_blocks;
            }
            while (st_blocks != v100);
LABEL_201:
            uint64_t i = (char *)v44;
            size_t v6 = v194;
          }
        }
        v113 = (char *)v202.st_blocks;
        v112 = *(char **)&v202.st_blksize;
        dev_t st_rdev = v202.st_rdev;
        int v115 = v202.st_rdev | 0x800;
        v202.st_rdev |= 0x800u;
        uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
        v116 = &v202.st_mtimespec.tv_nsec;
        if (v202.st_atimespec.tv_nsec != v202.st_atimespec.tv_sec) {
          v116 = (void *)v202.st_atimespec.tv_sec;
        }
        v117 = (timespec *)(v202.st_atimespec.tv_sec + 8);
        if (v202.st_atimespec.tv_nsec == v202.st_atimespec.tv_sec) {
          v117 = &v202.st_ctimespec;
        }
        v118 = (std::sub_match<const char *> *)v117->tv_sec;
        st_ino = (std::sub_match<const char *> *)v202.st_ino;
        if (*v116 != v117->tv_sec)
        {
          v192 = *(char **)&v202.st_blksize;
          blkcnt_t v193 = v202.st_blocks;
          goto LABEL_208;
        }
        if ((std::sub_match<const char *> *)v202.st_ino != v118)
        {
          uint64_t v138 = *(void *)&v202.st_uid;
          *(void *)&long long v139 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v139;
          *((_OWORD *)v6 + 3) = v139;
          *(_OWORD *)size_t v6 = v139;
          *((_OWORD *)v6 + 1) = v139;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          char v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          char v210 = 0;
          char v211 = 0;
          uint64_t v212 = 0;
          long long v203 = 0u;
          memset(v204, 0, 25);
          int v140 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v138, v118, st_ino, (std::vector<std::csub_match> *)&v203, st_rdev | 0x860u);
          uint64_t v141 = v205;
          unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
          __darwin_time_t v143 = v202.st_atimespec.tv_sec;
          __darwin_time_t v144 = v202.st_atimespec.tv_nsec;
          unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
          if (v142 <= v145)
          {
            if (v142 < v145)
            {
              __darwin_time_t v144 = v202.st_atimespec.tv_sec + 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
              v202.st_atimespec.tv_nsec = v144;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)&v202.st_atimespec, v142 - v145);
            __darwin_time_t v143 = v202.st_atimespec.tv_sec;
            __darwin_time_t v144 = v202.st_atimespec.tv_nsec;
          }
          if (v144 == v143)
          {
            v158 = (char *)v203;
          }
          else
          {
            uint64_t v156 = 0;
            unint64_t v157 = 0;
            uint64_t v159 = *((void *)&v203 + 1);
            v158 = (char *)v203;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v158) >> 3) <= v157) {
                v160 = &v204[8];
              }
              else {
                v160 = &v158[v156];
              }
              *(void *)(v143 + v156) = (char *)v118 + *(void *)v160 - v141;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v157) {
                v161 = &v204[16];
              }
              else {
                v161 = (void *)(v203 + v156 + 8);
              }
              *(void *)(v202.st_atimespec.tv_sec + v156 + 8) = (char *)v118 + *v161 - v141;
              uint64_t v159 = *((void *)&v203 + 1);
              v158 = (char *)v203;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v157) {
                v162 = v6;
              }
              else {
                v162 = (char *)(v203 + v156 + 16);
              }
              char v163 = *v162;
              __darwin_time_t v143 = v202.st_atimespec.tv_sec;
              *(unsigned char *)(v202.st_atimespec.tv_sec + v156 + 16) = v163;
              ++v157;
              v156 += 24;
            }
            while (v157 < 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v143) >> 3));
          }
          v202.st_mtimespec.tv_nsec = (uint64_t)st_ino;
          v202.st_ctimespec.tv_sec = (__darwin_time_t)st_ino;
          v202.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v205 - v141;
          v202.st_birthtimespec.tv_nsec = (uint64_t)v118 + v206 - v141;
          LOBYTE(v202.st_size) = v207;
          LOBYTE(v202.st_ctimespec.tv_nsec) = 0;
          v202.st_blocks = (blkcnt_t)v118 + v208 - v141;
          *(void *)&v202.st_blksize_t size = (char *)v118 + v209 - v141;
          LOBYTE(v202.st_gen) = v210;
          LOBYTE(v202.st_qspare[0]) = v211;
          if (v158)
          {
            *((void *)&v203 + 1) = v158;
            operator delete(v158);
          }
          if (v140)
          {
            uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
LABEL_38:
            if ((void *)v202.st_atimespec.tv_nsec != v27) {
              continue;
            }
            while (2)
            {
              if (v113 == v112) {
                goto LABEL_326;
              }
              char v167 = *v113;
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
              {
                size_t v164 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v195.__r_.__value_.__l.__size_ == v164)
                {
                  if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  v168 = (std::string *)v195.__r_.__value_.__r.__words[0];
                  size_t v169 = 0x7FFFFFFFFFFFFFF7;
                  if (v164 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_283:
                    if (v164 + 1 > 2 * v164) {
                      unint64_t v170 = v164 + 1;
                    }
                    else {
                      unint64_t v170 = 2 * v164;
                    }
                    uint64_t v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17) {
                      uint64_t v171 = v170 | 7;
                    }
                    if (v170 >= 0x17) {
                      size_t v169 = v171 + 1;
                    }
                    else {
                      size_t v169 = 23;
                    }
                  }
                  v172 = (std::string *)operator new(v169);
                  v165 = v172;
                  if (!v164 || (memmove(v172, v168, v164), v164 != 22)) {
                    operator delete(v168);
                  }
                  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
                  v195.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
                }
                else
                {
                  size_t v164 = v195.__r_.__value_.__l.__size_;
                  v165 = (std::string *)v195.__r_.__value_.__r.__words[0];
                }
                v195.__r_.__value_.__l.__size_ = v164 + 1;
              }
              else
              {
                if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
                {
                  v168 = &v195;
                  size_t v164 = 22;
                  goto LABEL_283;
                }
                size_t v164 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
                *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
                v165 = &v195;
              }
              v166 = (char *)v165 + v164;
              unsigned char *v166 = v167;
              v166[1] = 0;
              ++v113;
              continue;
            }
          }
          v192 = v112;
          blkcnt_t v193 = (blkcnt_t)v113;
          v118 = (std::sub_match<const char *> *)((char *)v118 + 1);
          int v115 = v202.st_rdev;
          st_ino = (std::sub_match<const char *> *)v202.st_ino;
LABEL_208:
          __int16 v120 = v115;
          v202.dev_t st_rdev = v115 | 0x80;
          uint64_t v121 = *(void *)&v202.st_uid;
          *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v122;
          *((_OWORD *)v6 + 3) = v122;
          *(_OWORD *)size_t v6 = v122;
          *((_OWORD *)v6 + 1) = v122;
          uint64_t v205 = 0;
          uint64_t v206 = 0;
          char v207 = 0;
          uint64_t v208 = 0;
          uint64_t v209 = 0;
          char v210 = 0;
          char v211 = 0;
          uint64_t v212 = 0;
          long long v203 = 0u;
          memset(v204, 0, 25);
          uint64_t v191 = (uint64_t)st_ino;
          char v190 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v121, v118, st_ino, (std::vector<std::csub_match> *)&v203, v115 | 0x80u);
          uint64_t v123 = v205;
          unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
          __darwin_time_t v125 = v202.st_atimespec.tv_sec;
          v126 = (void *)v202.st_atimespec.tv_nsec;
          unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
          unint64_t v128 = v124 - v127;
          if (v124 <= v127)
          {
            if (v124 < v127)
            {
              v126 = (void *)(v202.st_atimespec.tv_sec + 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3));
              v202.st_atimespec.tv_nsec = (uint64_t)v126;
            }
            size_t v6 = v194;
            v113 = (char *)v193;
            __int16 v136 = v120;
            if (v126 != (void *)v202.st_atimespec.tv_sec)
            {
LABEL_235:
              uint64_t v147 = 0;
              unint64_t v148 = 0;
              uint64_t v149 = *((void *)&v203 + 1);
              uint64_t v150 = v203;
              do
              {
                unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3);
                v152 = (void *)(v150 + v147);
                if (v151 <= v148) {
                  v153 = &v204[8];
                }
                else {
                  v153 = v152;
                }
                *(void *)(v125 + v147) = (char *)v118 + *v153 - v123;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v148) {
                  v154 = &v204[16];
                }
                else {
                  v154 = (void *)(v203 + v147 + 8);
                }
                *(void *)(v202.st_atimespec.tv_sec + v147 + 8) = (char *)v118 + *v154 - v123;
                uint64_t v149 = *((void *)&v203 + 1);
                uint64_t v150 = v203;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3) <= v148) {
                  v155 = v6;
                }
                else {
                  v155 = (char *)(v203 + v147 + 16);
                }
                __darwin_time_t v125 = v202.st_atimespec.tv_sec;
                *(unsigned char *)(v202.st_atimespec.tv_sec + v147 + 16) = *v155;
                ++v148;
                v147 += 24;
              }
              while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v202.st_atimespec.tv_nsec - v125) >> 3));
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_nsec) >> 3) >= v128)
            {
              uint64_t v133 = v202.st_atimespec.tv_nsec + 24 * v128;
              uint64_t v146 = 8 * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3)
                   - 8 * ((v202.st_atimespec.tv_nsec - v202.st_atimespec.tv_sec) >> 3);
              do
              {
                void *v126 = 0;
                v126[1] = 0;
                *((unsigned char *)v126 + 16) = 0;
                v126 += 3;
                v146 -= 24;
              }
              while (v146);
              v202.st_atimespec.tv_nsec = v133;
              size_t v6 = v194;
              v113 = (char *)v193;
              __int16 v136 = v120;
            }
            else
            {
              if (v124 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v129 = 0x5555555555555556 * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_sec) >> 3);
              if (v129 <= v124) {
                unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v203 + 1) - v203) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v202.st_mtimespec.tv_sec - v202.st_atimespec.tv_sec) >> 3) >= 0x555555555555555) {
                unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v131 = operator new(24 * v130);
              __darwin_time_t v132 = (__darwin_time_t)v131 + 24 * v127;
              uint64_t v133 = (uint64_t)v131 + 24 * v124;
              uint64_t v134 = 24 * v124 - 24 * v127;
              __darwin_time_t v135 = v132;
              do
              {
                *(void *)__darwin_time_t v135 = 0;
                *(void *)(v135 + 8) = 0;
                *(unsigned char *)(v135 + 16) = 0;
                v135 += 24;
                v134 -= 24;
              }
              while (v134);
              v113 = (char *)v193;
              __int16 v136 = v120;
              if (v126 != (void *)v125)
              {
                do
                {
                  long long v137 = *(_OWORD *)(v126 - 3);
                  *(void *)(v132 - 8) = *(v126 - 1);
                  *(_OWORD *)(v132 - 24) = v137;
                  v132 -= 24;
                  v126 -= 3;
                }
                while (v126 != (void *)v125);
                v126 = (void *)v125;
              }
              v202.st_atimespec.tv_sec = v132;
              v202.st_atimespec.tv_nsec = v133;
              v202.st_mtimespec.tv_sec = (__darwin_time_t)v131 + 24 * v130;
              size_t v6 = v194;
              if (v126)
              {
                operator delete(v126);
                uint64_t v133 = v202.st_atimespec.tv_nsec;
              }
            }
            __darwin_time_t v125 = v202.st_atimespec.tv_sec;
            if (v133 != v202.st_atimespec.tv_sec) {
              goto LABEL_235;
            }
          }
          v202.st_mtimespec.tv_nsec = v191;
          v202.st_ctimespec.tv_sec = v191;
          v202.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v205 - v123;
          v202.st_birthtimespec.tv_nsec = (uint64_t)v118 + v206 - v123;
          LOBYTE(v202.st_size) = v207;
          LOBYTE(v202.st_ctimespec.tv_nsec) = 0;
          v202.st_blocks = (blkcnt_t)v118 + v208 - v123;
          *(void *)&v202.st_blksize_t size = (char *)v118 + v209 - v123;
          LOBYTE(v202.st_gen) = v210;
          if ((v136 & 0x800) == 0) {
            v202.st_qspare[1] = (uint64_t_t)v118 + v205 - v123;
          }
          LOBYTE(v202.st_qspare[0]) = v211;
          v112 = v192;
          if ((void)v203)
          {
            *((void *)&v203 + 1) = v203;
            operator delete((void *)v203);
          }
          uint64_t v27 = (void *)v202.st_atimespec.tv_sec;
          if (v190) {
            goto LABEL_38;
          }
        }
        break;
      }
      if (v27)
      {
        v202.st_atimespec.tv_nsec = (uint64_t)v27;
        operator delete(v27);
      }
      uint64_t v27 = 0;
      LOBYTE(v202.st_qspare[0]) = 0;
      memset(&v202.st_atimespec, 0, 41);
      memset(&v202.st_birthtimespec, 0, 17);
      memset(&v202.st_blocks, 0, 17);
      v202.st_qspare[1] = 0;
      goto LABEL_38;
    }
    if (!v22)
    {
      unsigned int v5 = v187;
      if (!v202.st_atimespec.tv_nsec) {
        goto LABEL_302;
      }
LABEL_301:
      v202.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
      goto LABEL_302;
    }
    do
    {
      while (1)
      {
        char first = (char)v21->first;
        unsigned __int8 v175 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (HIBYTE(v195.__r_.__value_.__r.__words[2]) == 22)
        {
          v176 = &v195;
          size_t v177 = 22;
LABEL_312:
          if (v177 + 1 > 2 * v177) {
            unint64_t v179 = v177 + 1;
          }
          else {
            unint64_t v179 = 2 * v177;
          }
          uint64_t v180 = (v179 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v179 | 7) != 0x17) {
            uint64_t v180 = v179 | 7;
          }
          if (v179 >= 0x17) {
            size_t v178 = v180 + 1;
          }
          else {
            size_t v178 = 23;
          }
          goto LABEL_320;
        }
        *((unsigned char *)&v195.__r_.__value_.__s + 23) = (*((unsigned char *)&v195.__r_.__value_.__s + 23) + 1) & 0x7F;
        v173 = (char *)&v195 + v175;
        char *v173 = first;
        v173[1] = 0;
        long long v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
        if (!--v22) {
          goto LABEL_326;
        }
      }
      size_t v177 = (v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v195.__r_.__value_.__l.__size_ != v177)
      {
        size_t v177 = v195.__r_.__value_.__l.__size_;
        std::string::size_type v182 = v195.__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if ((v195.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      v176 = (std::string *)v195.__r_.__value_.__r.__words[0];
      size_t v178 = 0x7FFFFFFFFFFFFFF7;
      if (v177 < 0x3FFFFFFFFFFFFFF3) {
        goto LABEL_312;
      }
LABEL_320:
      v181 = operator new(v178);
      std::string::size_type v182 = (std::string::size_type)v181;
      if (!v177 || (memmove(v181, v176, v177), v177 != 22)) {
        operator delete(v176);
      }
      v195.__r_.__value_.__r.__words[0] = v182;
      v195.__r_.__value_.__r.__words[2] = v178 | 0x8000000000000000;
LABEL_325:
      v195.__r_.__value_.__l.__size_ = v177 + 1;
      v183 = (char *)(v182 + v177);
      char *v183 = first;
      v183[1] = 0;
      long long v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
      --v22;
    }
    while (v22);
LABEL_326:
    tv_nsec = (void *)v202.st_atimespec.tv_sec;
    a1 = v186;
    unsigned int v5 = v187;
    if (v202.st_atimespec.tv_sec) {
      goto LABEL_301;
    }
LABEL_302:
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v197.__r_.__value_.__l.__data_);
      std::string v197 = v195;
      if (SHIBYTE(__p[2]) < 0) {
LABEL_5:
      }
        operator delete(__p[0]);
    }
    else
    {
      std::string v197 = v195;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_5;
      }
    }
  }
  *(unsigned char *)(v185 + 23) = 0;
  *(unsigned char *)uint64_t v185 = 0;
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v197.__r_.__value_.__l.__data_);
  }
LABEL_333:
  v184 = (std::__shared_weak_count *)v201;
  if ((void)v201 && !atomic_fetch_add((atomic_ullong *volatile)(v201 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
    std::__shared_weak_count::__release_weak(v184);
  }
  std::locale::~locale(v198);
}

void sub_26371ACE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
}

void sub_26371ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v29 = *MEMORY[0x263EF8340];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize_t size = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_size_t size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    timespec v27 = v5;
    timespec v28 = v5;
    timespec v25 = v5;
    timespec v26 = v5;
    timespec v23 = v5;
    timespec v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    timespec v22 = v5;
    *(timespec *)&__src.st_size_t size = v5;
    *(timespec *)&__src.st_blksize_t size = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    size_t v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_32:
    }
      std::string::__throw_length_error[abi:ne180100]();
    __darwin_ino64_t v7 = v6;
    int v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7) {
        goto LABEL_15;
      }
LABEL_16:
      *((unsigned char *)&p_dst->st_dev + v7) = 0;
      int v13 = v2[23];
      if (v13 >= 0) {
        int v14 = v2;
      }
      else {
        int v14 = *(const std::string::value_type **)v2;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = *((unsigned __int8 *)v2 + 23);
      }
      else {
        std::string::size_type v15 = *((void *)v2 + 1);
      }
      size_t v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0) {
        operator delete(*(void **)&__dst.st_dev);
      }
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize_t size = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_size_t size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = (const char *)a2;
      }
      else {
        long long v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      if (stat(v19, &__dst)) {
        return;
      }
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(a2->__r_.__value_.__l.__data_);
      }
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      timespec v27 = v9;
      timespec v28 = v9;
      timespec v25 = v9;
      timespec v26 = v9;
      timespec v23 = v9;
      timespec v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      timespec v22 = v9;
      *(timespec *)&__src.st_size_t size = v9;
      *(timespec *)&__src.st_blksize_t size = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      __darwin_ino64_t v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
    }
    uint64_t v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(void *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
  }
}

void sub_26371B0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  timespec v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize_t size = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size_t size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v29)) {
    return 1;
  }
  if (!a3)
  {
    if (v5[23] >= 0) {
      long long v21 = v5;
    }
    else {
      long long v21 = *(const char **)v5;
    }
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0) {
    __darwin_ino64_t v7 = v5;
  }
  else {
    __darwin_ino64_t v7 = *(const char **)v5;
  }
  if (*v7 == 47)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v27;
    *(void *)&__p[16] = v28;
  }
  uint64_t v8 = *(void *)&__p[32];
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0) {
          uint64_t v11 = v27;
        }
        else {
          uint64_t v11 = (void **)v27[0];
        }
        if (v28 >= 0) {
          std::string::size_type v12 = HIBYTE(v28);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v27[1];
        }
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        uint64_t v8 = *(void *)&__p[32];
      }
      uint64_t v13 = v8 + 24 * v9;
      int v14 = *(char *)(v13 + 23);
      std::string::size_type v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      std::string::size_type v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(void *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize_t size = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size_t size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      timespec v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        long long v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2)) {
          break;
        }
      }
      unint64_t v9 = v10;
      uint64_t v8 = *(void *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3) <= v9) {
        goto LABEL_42;
      }
    }
    uint64_t v20 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = 1;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_43:
  }
    operator delete(*(void **)__p);
LABEL_44:
  uint64_t v22 = *(void *)&__p[32];
  if (*(void *)&__p[32])
  {
    uint64_t v23 = *(void *)&__p[40];
    timespec v24 = *(void **)&__p[32];
    if (*(void *)&__p[40] != *(void *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      timespec v24 = *(void **)&__p[32];
    }
    *(void *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  return v20;
}

void sub_26371B384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  timespec v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x263EF8340];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_std::string::size_type size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &__dst)) {
    return 1;
  }
  size_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  unsigned int v5 = 0;
  while (1)
  {
    unsigned int v6 = v5;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)v42) >> 3);
    BOOL v3 = v7 <= v5;
    if (v7 <= v5) {
      break;
    }
    uint64_t v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        char v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = &__p;
      }
      if (v12->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_58;
      }
    }
    int v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0) {
      size_t v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v1->__pn_.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v16 >= 0x17)
    {
      uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v18 = v16 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(void *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15) {
        goto LABEL_38;
      }
    }
    if (v14 >= 0) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0) {
      long long v21 = &__p;
    }
    else {
      long long v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_std::string::size_type size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0) {
      timespec v26 = &__p;
    }
    else {
      timespec v26 = (std::string *)v23;
    }
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t v31 = &__p)
        : (uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (xpc_object_t v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      char v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        uint64_t v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (!remove(v28, v27)) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        stat v29 = &__p;
      }
      else {
        stat v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    unsigned int v5 = v6 + 1;
    if ((v30 & 1) == 0) {
      goto LABEL_75;
    }
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v35 = v1;
  }
  else {
    size_t v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v36 = (const char *)v1;
    }
    else {
      unint64_t v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    unlink(v36);
  }
LABEL_75:
  uint64_t v37 = (void **)v42;
  if (v42)
  {
    CFTypeRef v38 = v43;
    timespec v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      timespec v39 = v42;
    }
    int v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_26371B870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_26371B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  timespec v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (!remove(a1, a2)) {
    return 1;
  }
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v3 = (const char *)v2;
  }
  else {
    BOOL v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  }
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  BOOL v3 = a1;
  char v62 = 0;
  unsigned __int8 v63 = 0;
  uint64_t v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  time_t v56 = time(0);
  unsigned int v5 = (void **)v62;
  timespec v4 = v63;
  if (v62 == v63)
  {
    char v52 = 1;
    if (v62) {
      goto LABEL_105;
    }
    return v52 & 1;
  }
  double v6 = (double)a2;
  char v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    int v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2) {
      break;
    }
    if (v9 == 1)
    {
      int v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v61;
      }
      if (v10->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_95;
      }
    }
LABEL_19:
    memset(__p, 170, 24);
    int v12 = v3[23];
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v13 = *((void *)v3 + 1);
    }
    unint64_t v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v14 >= 0x17)
    {
      int v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v9;
      timespec v17 = v5;
      uint64_t v18 = v4;
      uint64_t v19 = v3;
      unint64_t v20 = a2;
      uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v21 = v14 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(void *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
      a2 = v20;
      BOOL v3 = v19;
      timespec v4 = v18;
      unsigned int v5 = v17;
      std::string::size_type v9 = v16;
      int v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13) {
        goto LABEL_33;
      }
    }
    if (v12 >= 0) {
      std::string::size_type v23 = v3;
    }
    else {
      std::string::size_type v23 = *(const char **)v3;
    }
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0) {
      char v24 = &v61;
    }
    else {
      char v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    timespec v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2) {
        goto LABEL_47;
      }
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_std::string::size_type size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_std::string::size_type size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0) {
        xpc_object_t v32 = __p;
      }
      else {
        xpc_object_t v32 = (void **)__p[0];
      }
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (unint64_t v36 = __p) : (unint64_t v36 = (void **)__p[0]),
            (uint64_t v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          xpc_object_t v34 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          xpc_object_t v34 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (size_t v35 = __p) : (size_t v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          int v30 = 0;
          char v57 = 1;
          char v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      int v40 = v3[23];
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v41 = *((void *)v3 + 1);
      }
      unint64_t v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        int v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        int v43 = (char *)&v59;
        *((unsigned char *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41) {
          goto LABEL_80;
        }
      }
      if (v40 >= 0) {
        uint64_t v46 = v3;
      }
      else {
        uint64_t v46 = *(const char **)v3;
      }
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v47 = &v61;
      }
      else {
        unsigned int v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      char v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&__dst.st_uid = *((void *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      char v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_88;
        }
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if (v51) {
          goto LABEL_89;
        }
LABEL_59:
        char v57 = 0;
        char v29 = 0;
        int v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if (v51) {
        goto LABEL_89;
      }
      goto LABEL_59;
    }
    char v29 = 0;
    int v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if (v29) {
      goto LABEL_95;
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3) {
      goto LABEL_97;
    }
LABEL_3:
    v5 += 3;
    if (v5 == v4) {
      goto LABEL_102;
    }
  }
  uint64_t v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v61;
  }
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822) {
    goto LABEL_19;
  }
LABEL_95:
  int v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_96;
  }
LABEL_93:
  if (v30 == 3) {
    goto LABEL_3;
  }
LABEL_97:
  if (!v30) {
    goto LABEL_3;
  }
LABEL_102:
  unsigned int v5 = (void **)v62;
  char v52 = v57;
  if (!v62) {
    return v52 & 1;
  }
LABEL_105:
  size_t v53 = v63;
  unint64_t v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0) {
        operator delete(*(v53 - 3));
      }
      v53 -= 3;
    }
    while (v53 != v5);
    unint64_t v54 = v62;
  }
  unsigned __int8 v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_26371BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  timespec v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blkstd::string::size_type size = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_std::string::size_type size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v16)) {
    goto LABEL_4;
  }
  long long v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  int v8 = opendir(v7);
  if (!v8) {
    goto LABEL_4;
  }
  std::string::size_type v9 = v8;
  int v10 = readdir(v8);
  closedir(v9);
  if (!v10) {
    goto LABEL_4;
  }
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v12 = v4;
  }
  else {
    int v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v13 = (const std::__fs::filesystem::path *)a3;
  }
  else {
    size_t v13 = *(const std::__fs::filesystem::path **)a3;
  }
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
LABEL_4:
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

void sub_26371C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((void *)__p[1] - 2));
  }
  else
  {
    long long v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((void *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    BOOL v3 = (void **)__p[1];
    timespec v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != __p[0]);
      timespec v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_26371C1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0) {
    return v1;
  }
  int v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  pid_t v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0) {
    return v1;
  }
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1 = (int)this;
  int v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  pid_t v5 = getpid();
  BOOL v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  *__error() = 0;
  if (a1[23] < 0)
  {
    long long v7 = opendir(*(const char **)a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_78:
    uint64_t v45 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      unsigned int v47 = __error();
      unsigned int v48 = strerror(*v47);
      v58.st_dev = 136315394;
      *(void *)&v58.st_mode = a1;
      WORD2(v58.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v58.st_ino + 6) = (__darwin_ino64_t)v48;
      _os_log_error_impl(&dword_26368A000, v45, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v58, 0x16u);
      return 0;
    }
    return result;
  }
  long long v7 = opendir(a1);
  if (!v7) {
    goto LABEL_78;
  }
LABEL_3:
  int v8 = v7;
  std::string::size_type v9 = readdir(v7);
  if (v9)
  {
    char v51 = a1;
    char v49 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      size_t v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17) {
        break;
      }
      __dst[23] = v11;
      size_t v13 = __dst;
      if (v11) {
        goto LABEL_12;
      }
LABEL_13:
      v13[v12] = 0;
      uint64_t v16 = __dst[23];
      int v17 = __dst[23];
      uint64_t v18 = *(void *)&__dst[8];
      if (__dst[23] >= 0) {
        std::string::size_type v19 = __dst[23];
      }
      else {
        std::string::size_type v19 = *(void *)&__dst[8];
      }
      if (v19 == 2)
      {
        uint64_t v21 = *(_WORD **)__dst;
        if (__dst[23] >= 0) {
          uint64_t v21 = __dst;
        }
        if (*v21 == 11822) {
          goto LABEL_73;
        }
      }
      else if (v19 == 1)
      {
        unint64_t v20 = *(unsigned char **)__dst;
        if (__dst[23] >= 0) {
          unint64_t v20 = __dst;
        }
        if (*v20 == 46) {
          goto LABEL_73;
        }
      }
      if (a4) {
        goto LABEL_53;
      }
      uint64_t v22 = v8;
      uint64_t v23 = a4;
      uint64_t v24 = a3;
      v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v58.st_blkstd::string::size_type size = v25;
      *(timespec *)v58.st_qspare = v25;
      v58.st_birthtimespec = v25;
      *(timespec *)&v58.st_std::string::size_type size = v25;
      v58.st_mtimespec = v25;
      v58.st_ctimespec = v25;
      *(timespec *)&v58.st_uid = v25;
      v58.st_atimespec = v25;
      *(timespec *)&v58.st_dev = v25;
      int v26 = v51[23];
      if (v26 >= 0) {
        size_t v27 = *((unsigned __int8 *)v51 + 23);
      }
      else {
        size_t v27 = *((void *)v51 + 1);
      }
      unint64_t v28 = v27 + 1;
      memset(&v52, 170, sizeof(v52));
      if (v27 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v28 >= 0x17)
      {
        uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v30 = v28 | 7;
        }
        uint64_t v31 = v30 + 1;
        char v29 = (char *)operator new(v30 + 1);
        v52.__r_.__value_.__l.__size_ = v27 + 1;
        v52.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&v52, 0, sizeof(v52));
        char v29 = (char *)&v52;
        *((unsigned char *)&v52.__r_.__value_.__s + 23) = v27 + 1;
        if (!v27) {
          goto LABEL_40;
        }
      }
      if (v26 >= 0) {
        xpc_object_t v32 = v51;
      }
      else {
        xpc_object_t v32 = *(const char **)v51;
      }
      memmove(v29, v32, v27);
LABEL_40:
      a3 = v24;
      *(_WORD *)&v29[v27] = 47;
      if (v17 >= 0) {
        char v33 = __dst;
      }
      else {
        char v33 = *(const std::string::value_type **)__dst;
      }
      xpc_object_t v34 = std::string::append(&v52, v33, v19);
      a4 = v23;
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v55[0] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v55[0] >= 0) {
        unint64_t v36 = __p;
      }
      else {
        unint64_t v36 = (void **)__p[0];
      }
      lstat((const char *)v36, &v58);
      int v8 = v22;
      if (SHIBYTE(v55[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          if ((v58.st_mode & 0xF000) != 0xA000) {
            goto LABEL_52;
          }
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      if ((v58.st_mode & 0xF000) != 0xA000)
      {
LABEL_52:
        uint64_t v16 = __dst[23];
        uint64_t v18 = *(void *)&__dst[8];
        LOBYTE(v17) = __dst[23];
LABEL_53:
        if ((v17 & 0x80u) == 0) {
          uint64_t v37 = (std::sub_match<const char *> *)__dst;
        }
        else {
          uint64_t v37 = *(std::sub_match<const char *> **)__dst;
        }
        if ((v17 & 0x80u) != 0) {
          uint64_t v16 = v18;
        }
        CFTypeRef v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
        *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v56 = v39;
        v55[6] = 0xAAAAAAAAAAAAAA00;
        v55[3] = 0xAAAAAAAAAAAAAAAALL;
        v55[4] = 0;
        v55[5] = 0;
        v55[7] = 0;
        v55[8] = 0;
        LOBYTE(v56) = 0;
        BYTE8(v56) = 0;
        uint64_t v57 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v55, 0, 25);
        *(_OWORD *)&v58.st_birthtimespec.tv_nsec = v39;
        v58.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v58.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        memset(&v58.st_mtimespec, 0, 17);
        memset(&v58.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v58.st_size) = 0;
        v58.st_blocks = 0;
        memset(&v58, 0, 41);
        int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v58, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v58.st_dev, 0);
        if (*(void *)&v58.st_dev)
        {
          v58.st_ino = *(void *)&v58.st_dev;
          operator delete(*(void **)&v58.st_dev);
        }
        if ((_BYTE)v56) {
          int v41 = v40 ^ 1;
        }
        else {
          int v41 = 1;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v40 & v41) != 0)
        {
          unint64_t v42 = *(void *)(a3 + 8);
          if (v42 >= *(void *)(a3 + 16))
          {
            uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              long long v43 = *(_OWORD *)__dst;
              *(void *)(v42 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v42 = v43;
            }
            uint64_t v44 = (std::string *)(v42 + 24);
            *(void *)(a3 + 8) = v42 + 24;
          }
          *(void *)(a3 + 8) = v44;
          char v49 = 1;
        }
      }
LABEL_73:
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      std::string::size_type v9 = readdir(v8);
      if (!v9) {
        goto LABEL_83;
      }
    }
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v13 = operator new(v14 + 1);
    *(void *)&__dst[8] = v12;
    *(void *)&__dst[16] = v15 | 0x8000000000000000;
    *(void *)stat __dst = v13;
LABEL_12:
    memmove(v13, d_name, v12);
    goto LABEL_13;
  }
  char v49 = 0;
LABEL_83:
  closedir(v8);
  return v49 & 1;
}

void sub_26371C834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  *(void *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_26371CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void support::fs::getBasePath(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (!a1[23])
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *((void *)a1 + 2);
      return;
    }
LABEL_6:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    memset(&__p, 170, sizeof(__p));
    support::fs::getFileName(&__p);
    size_t v4 = *((void *)v2 + 1);
    if ((v2[23] & 0x80u) == 0)
    {
      size_t v5 = v2[23];
    }
    else
    {
      BOOL v2 = *(unsigned __int8 **)v2;
      size_t v5 = v4;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v9 = &v2[v5];
    if (v5) {
      BOOL v10 = size == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      uint64_t v15 = &v2[v5];
    }
    else
    {
      uint64_t v14 = v2;
      uint64_t v15 = &v2[v5];
      do
      {
        if (*v14 == p_p->__r_.__value_.__s.__data_[0])
        {
          uint64_t v16 = 1;
          while (size != v16)
          {
            if (&v14[v16] == v9) {
              goto LABEL_20;
            }
            int v17 = v14[v16];
            int v18 = p_p->__r_.__value_.__s.__data_[v16++];
            if (v17 != v18) {
              goto LABEL_37;
            }
          }
          uint64_t v15 = v14;
        }
LABEL_37:
        ++v14;
      }
      while (v14 != v9);
    }
LABEL_20:
    BOOL v11 = v15 != v9 || size == 0;
    if (!v11 || v15 - v2 == -1) {
      goto LABEL_34;
    }
    if (v5 >= v15 - v2) {
      size_t v12 = v15 - v2;
    }
    else {
      size_t v12 = v5;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v12 >= 0x17)
    {
      uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v19 = v12 | 7;
      }
      uint64_t v20 = v19 + 1;
      size_t v13 = (long long *)operator new(v19 + 1);
      *((void *)&v22 + 1) = v12;
      unint64_t v23 = v20 | 0x8000000000000000;
      *(void *)&long long v22 = v13;
    }
    else
    {
      HIBYTE(v23) = v12;
      size_t v13 = &v22;
      if (!v12)
      {
        LOBYTE(v22) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v22;
          *(void *)(a2 + 16) = v23;
          char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_34:
          if (v7 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((unsigned char *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_49;
  }
  if (*((void *)a1 + 1)) {
    goto LABEL_6;
  }
  uint64_t v21 = *(const std::string::value_type **)a1;

  std::string::__init_copy_ctor_external((std::string *)a2, v21, 0);
}

void sub_26371CD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 170, sizeof(v69));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v69 = *(std::string *)a1;
  }
  size_t v4 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v5 = &v69;
  }
  else {
    size_t v5 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  std::string::size_type v7 = size + 1;
  do
  {
    std::string::size_type v8 = v7 - 1;
    if (v7 == 1) {
      goto LABEL_20;
    }
    int v9 = v5->__r_.__value_.__s.__data_[v7-- - 2];
  }
  while (v9 == 47);
  if (v8)
  {
    std::string::size_type v10 = v8 - 1;
    if ((*((unsigned char *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v69.__r_.__value_.__l.__size_ > v10)
      {
        v69.__r_.__value_.__l.__size_ = v8;
        goto LABEL_19;
      }
    }
    else if (v10 < HIBYTE(v69.__r_.__value_.__r.__words[2]))
    {
      *((unsigned char *)&v69.__r_.__value_.__s + 23) = v8 & 0x7F;
      size_t v4 = &v69;
LABEL_19:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_20:
  memset(&v68, 170, sizeof(v68));
  support::fs::getBasePath((unsigned __int8 *)&v69, (uint64_t)&v68);
  std::string::size_type v11 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = v69.__r_.__value_.__l.__size_;
  }
  if (!v11) {
    goto LABEL_33;
  }
  std::string::size_type v12 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v12 = v68.__r_.__value_.__l.__size_;
  }
  if (!v12)
  {
LABEL_33:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_130;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    goto LABEL_124;
  }
  memset(&v67, 170, sizeof(v67));
  support::fs::getFileName(&v67);
  int v13 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v14 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v14 = v67.__r_.__value_.__l.__size_;
  }
  unint64_t v15 = v14 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)(v14 + 13);
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v16;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    uint64_t v16 = __dst;
    HIBYTE(__dst[2]) = v14 + 13;
    if (!v14) {
      goto LABEL_44;
    }
  }
  if (v13 >= 0) {
    uint64_t v19 = &v67;
  }
  else {
    uint64_t v19 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  memmove(v16, v19, v14);
LABEL_44:
  strcpy((char *)v16 + v14, "-[[:alnum:]]*");
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v64[32] = v20;
  long long v65 = v20;
  *(_OWORD *)uint64_t v64 = v20;
  *(_OWORD *)&v64[16] = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v64, (uint64_t)__dst, 0);
  std::string v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v68;
  }
  std::locale::locale(&v54, (const std::locale *)v64);
  long long v55 = *(_OWORD *)&v64[8];
  long long v56 = *(_OWORD *)&v64[24];
  uint64_t v57 = *(void *)&v64[40];
  stat v58 = (std::__shared_weak_count *)v65;
  if ((void)v65) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v59 = *((void *)&v65 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v60, (uint64_t)&v54, (uint64_t)&v61, 0))
  {
    uint64_t v24 = v58;
    if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::locale::~locale(&v54);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    goto LABEL_84;
  }
  uint64_t v21 = (void **)v61;
  long long v22 = v62;
  unint64_t v23 = v58;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  std::locale::~locale(&v54);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v21 == v22)
    {
LABEL_84:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        xpc_object_t v34 = (void **)v61;
        if (!v61) {
          goto LABEL_120;
        }
        goto LABEL_113;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_112:
      xpc_object_t v34 = (void **)v61;
      if (!v61) {
        goto LABEL_120;
      }
      goto LABEL_113;
    }
  }
  else if (v21 == v22)
  {
    goto LABEL_84;
  }
  timespec v25 = (char *)v61;
  int v26 = (char *)v62;
  if (v61 != v62)
  {
    unsigned int v27 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v52, 170, sizeof(v52));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(void *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        long long v29 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v52.__r_.__value_.__r.__words[2] = *(void *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v29;
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v52;
      }
      else {
        uint64_t v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      unsigned int v31 = strtol((const char *)v30, 0, 0);
      if (v27 <= v31) {
        unsigned int v27 = v31;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_79:
          std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
          unint64_t v28 = (void *)v32;
          if (__p.__r_.__value_.__l.__size_ != v32)
          {
            do
            {
              if (*(char *)(v33 - 1) < 0) {
                operator delete(*(void **)(v33 - 24));
              }
              v33 -= 24;
            }
            while (v33 != v32);
            unint64_t v28 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v32;
          operator delete(v28);
        }
      }
      else
      {
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_79;
        }
      }
      v25 += 24;
      if (v25 == v26) {
        goto LABEL_89;
      }
    }
  }
  unsigned int v27 = 0;
LABEL_89:
  int v35 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v36 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v36 = v69.__r_.__value_.__l.__size_;
  }
  unint64_t v37 = v36 + 1;
  memset(&v52, 170, sizeof(v52));
  if (v36 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v37 >= 0x17)
  {
    uint64_t v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v39 = v37 | 7;
    }
    uint64_t v40 = v39 + 1;
    CFTypeRef v38 = (char *)operator new(v39 + 1);
    v52.__r_.__value_.__l.__size_ = v36 + 1;
    v52.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  }
  else
  {
    memset(&v52, 0, sizeof(v52));
    CFTypeRef v38 = (char *)&v52;
    *((unsigned char *)&v52.__r_.__value_.__s + 23) = v36 + 1;
    if (!v36) {
      goto LABEL_103;
    }
  }
  if (v35 >= 0) {
    int v41 = &v69;
  }
  else {
    int v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  memmove(v38, v41, v36);
LABEL_103:
  *(_WORD *)&v38[v36] = 45;
  std::to_string(&v51, v27);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v42 = &v51;
  }
  else {
    unint64_t v42 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v44 = std::string::append(&v52, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  uint64_t v46 = std::string::append(&__p, "/", 1uLL);
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_112;
  }
LABEL_134:
  operator delete(v52.__r_.__value_.__l.__data_);
  xpc_object_t v34 = (void **)v61;
  if (!v61) {
    goto LABEL_120;
  }
LABEL_113:
  unsigned int v48 = v62;
  uint64_t v49 = v34;
  if (v62 != v34)
  {
    do
    {
      if (*((char *)v48 - 1) < 0) {
        operator delete(*(v48 - 3));
      }
      v48 -= 3;
    }
    while (v48 != v34);
    uint64_t v49 = v61;
  }
  char v62 = v34;
  operator delete(v49);
LABEL_120:
  uint64_t v50 = (std::__shared_weak_count *)v65;
  if ((void)v65 && !atomic_fetch_add((atomic_ullong *volatile)(v65 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    std::locale::~locale((std::locale *)v64);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_124;
      }
      goto LABEL_129;
    }
  }
  else
  {
    std::locale::~locale((std::locale *)v64);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      goto LABEL_123;
    }
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_124:
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_130;
  }
LABEL_129:
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_125:
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_131:
    operator delete(v69.__r_.__value_.__l.__data_);
    return;
  }
LABEL_130:
  operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_131;
  }
}

void sub_26371D4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0) {
              goto LABEL_11;
            }
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0) {
LABEL_12:
        }
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, void *a2, void *a3, unint64_t *a4)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      int v7 = statvfs((const char *)a1, &v11);
      BOOL result = v7 == 0;
      if (v7) {
        return result;
      }
LABEL_7:
      *a4 = v11.f_frsize;
      uint64_t f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  memset(&v11, 0, sizeof(v11));
  int v9 = statvfs(*(const char **)a1, &v11);
  BOOL result = v9 == 0;
  if (!v9) {
    goto LABEL_7;
  }
  return result;
}

void *support::fs::readCurrentLine@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  uint64_t v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10) {
        break;
      }
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  int v6 = std::locale::use_facet(v9, MEMORY[0x263F8C108]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_26371D828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_26371D83C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = -86;
  MEMORY[0x263E69450](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    unsigned __int8 v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::string::size_type v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_26371D9CC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x26371D98CLL);
  }
  __cxa_rethrow();
}

void sub_26371DA48(_Unwind_Exception *a1)
{
}

uint64_t asString@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  void v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  uint64_t v34[2] = v4;
  long long v33 = v4;
  v34[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v32 = v4;
  long long v29 = v4;
  *(_OWORD *)stat __src = v4;
  long long v27 = v4;
  long long v28 = v4;
  long long v26 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Time: ", 6);
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)a1;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; Mode: ", 8);
  uint64_t v10 = (void *)std::ostream::operator<<();
  char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; Action: ", 10);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v13 = a1 + 32;
  uint64_t v12 = v14;
  int v15 = *(char *)(v13 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v13;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v13 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  if ((BYTE8(v33) & 0x10) != 0)
  {
    uint64_t v19 = (unsigned char *)v33;
    if ((void *)v33 < __src[1])
    {
      *(void **)&long long v33 = __src[1];
      uint64_t v19 = __src[1];
    }
    long long v20 = __src[0];
    size_t v18 = v19 - (char *)__src[0];
    if ((unint64_t)(v19 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_30;
    }
  }
  else
  {
    if ((BYTE8(v33) & 8) == 0)
    {
      size_t v18 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    long long v20 = (const void *)*((void *)&v28 + 1);
    size_t v18 = *((void *)&v29 + 1) - *((void *)&v28 + 1);
    if (*((void *)&v29 + 1) - *((void *)&v28 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_30:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    unint64_t v23 = operator new(v21 + 1);
    *((void *)a2 + 1) = v18;
    *((void *)a2 + 2) = v22 | 0x8000000000000000;
    *(void *)a2 = v23;
    a2 = v23;
    goto LABEL_25;
  }
  a2[23] = v18;
  if (v18) {
LABEL_25:
  }
    memmove(a2, v20, v18);
LABEL_26:
  a2[v18] = 0;
  *(void *)&long long v26 = *MEMORY[0x263F8C2B8];
  uint64_t v24 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v26 + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v27 = v24;
  *((void *)&v27 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x263E69630](v34);
}

void sub_26371DD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BBLogTracker::addLog(uint64_t **a1, long long *a2, int a3, uint64_t a4)
{
  int v13 = a3;
  char v11 = (std::string *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>((uint64_t)a2, &v13, a4, &v11);
  uint64_t v14 = a2;
  int v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
  uint64_t v8 = v11;
  uint64_t v7 = (uint64_t *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v9 = (std::__shared_weak_count *)v6[8];
  v6[7] = (uint64_t *)v8;
  v6[8] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_26371DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *BBLogTracker::getLog@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  BOOL result = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1, a2);
  if ((uint64_t *)(a1 + 8) != result)
  {
    uint64_t v7 = result[7];
    uint64_t v6 = result[8];
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *a3 = v7;
    a3[1] = v6;
  }
  return result;
}

void sub_26371DEC0(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::limitLogs(uint64_t *this, unsigned int a2)
{
  unint64_t v2 = a2;
  if (this[2] > (unint64_t)a2)
  {
    BOOL v3 = this;
    do
      this = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v3, *v3);
    while (v3[2] > v2);
  }
  return this;
}

void BBLogTracker::getLastLog(BBLogTracker *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (!*((void *)this + 2)) {
    return;
  }
  if (a2)
  {
    v46.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&v46.__darwin_suseconds_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
    gettimeofday(&v46, 0);
    __darwin_time_t tv_sec = v46.tv_sec;
    __darwin_suseconds_t tv_usec = v46.tv_usec;
    if (v46.tv_usec >= 0) {
      uint64_t v8 = v46.tv_usec;
    }
    else {
      uint64_t v8 = (v46.tv_usec + 1000000);
    }
    memset(v45, 170, sizeof(v45));
    Timestamp::Timestamp((Timestamp *)v45);
    if (v45[1])
    {
      int v9 = (uint64_t *)v45[1];
      while (1)
      {
        while (1)
        {
          char v11 = (uint64_t **)v9;
          int v12 = *((_DWORD *)v9 + 8);
          if (v12 < 1) {
            break;
          }
          int v9 = *v11;
          uint64_t v10 = v11;
          if (!*v11) {
            goto LABEL_21;
          }
        }
        if ((v12 & 0x80000000) == 0) {
          break;
        }
        int v9 = v11[1];
        if (!v9)
        {
          uint64_t v10 = v11 + 1;
          goto LABEL_21;
        }
      }
      uint64_t v19 = v11;
    }
    else
    {
      uint64_t v10 = (uint64_t **)&v45[1];
      char v11 = (uint64_t **)&v45[1];
LABEL_21:
      uint64_t v19 = operator new(0x38uLL);
      v19[8] = 0;
      *((void *)v19 + 5) = 0;
      *((void *)v19 + 6) = 0;
      *(void *)uint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = v11;
      std::__shared_weak_count *v10 = (uint64_t *)v19;
      long long v20 = (uint64_t *)v19;
      if (*(void *)v45[0])
      {
        v45[0] = *(void *)v45[0];
        long long v20 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v45[1], v20);
      ++v45[2];
    }
    *((void *)v19 + 5) = tv_sec - a2 + (tv_usec >> 31);
    *((void *)v19 + 6) = v8 | 0xAAAAAAAA00000000;
    unint64_t v23 = (void *)*((void *)this + 1);
    uint64_t v22 = (void *)((char *)this + 8);
    uint64_t v21 = v23;
    if (v23)
    {
      do
      {
        uint64_t v24 = v21;
        uint64_t v21 = (void *)v21[1];
      }
      while (v21);
    }
    else
    {
      timespec v25 = v22;
      do
      {
        uint64_t v24 = (void *)v25[2];
        BOOL v16 = *v24 == (void)v25;
        timespec v25 = v24;
      }
      while (v16);
    }
    Timestamp::asString((uint64_t)v45, 0, 9, v43);
    long long v28 = (const void *)v24[4];
    long long v27 = v24 + 4;
    long long v26 = v28;
    int v29 = *((char *)v27 + 23);
    if (v29 >= 0) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = v26;
    }
    if (v29 >= 0) {
      size_t v31 = *((unsigned __int8 *)v27 + 23);
    }
    else {
      size_t v31 = v27[1];
    }
    int v32 = (char)v44;
    long long v33 = (void *)v43[0];
    if ((v44 & 0x80u) == 0) {
      xpc_object_t v34 = v43;
    }
    else {
      xpc_object_t v34 = (void *)v43[0];
    }
    if ((v44 & 0x80u) == 0) {
      size_t v35 = v44;
    }
    else {
      size_t v35 = v43[1];
    }
    if (v35 >= v31) {
      size_t v36 = v31;
    }
    else {
      size_t v36 = v35;
    }
    int v37 = memcmp(v30, v34, v36);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_46;
      }
    }
    else if (v31 >= v35)
    {
LABEL_46:
      int v38 = 1;
      if ((v32 & 0x80000000) == 0)
      {
LABEL_48:
        if (v38)
        {
          uint64_t v39 = (void *)*v22;
          if (*v22)
          {
            do
            {
              uint64_t v40 = v39;
              uint64_t v39 = (void *)v39[1];
            }
            while (v39);
          }
          else
          {
            do
            {
              uint64_t v40 = (void *)v22[2];
              BOOL v16 = *v40 == (void)v22;
              uint64_t v22 = v40;
            }
            while (v16);
          }
          uint64_t v42 = v40[7];
          uint64_t v41 = v40[8];
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          *a3 = v42;
          a3[1] = v41;
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v45, (void *)v45[1]);
        return;
      }
LABEL_47:
      operator delete(v33);
      goto LABEL_48;
    }
    int v38 = 0;
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  uint64_t v14 = (char *)this + 8;
  int v13 = (char *)*((void *)this + 1);
  if (v13)
  {
    do
    {
      int v15 = v13;
      int v13 = (char *)*((void *)v13 + 1);
    }
    while (v13);
  }
  else
  {
    do
    {
      int v15 = (char *)*((void *)v14 + 2);
      BOOL v16 = *(void *)v15 == (void)v14;
      uint64_t v14 = v15;
    }
    while (v16);
  }
  uint64_t v18 = *((void *)v15 + 7);
  uint64_t v17 = *((void *)v15 + 8);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = v18;
  a3[1] = v17;
}

void sub_26371E1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_26371E1F0(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BBLogTracker::count(BBLogTracker *this)
{
  return *((unsigned int *)this + 4);
}

void std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  uint64_t v8 = (std::string *)operator new(0x50uLL);
  int v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270EA9D90;
  uint64_t v10 = v8 + 1;
  int v11 = *a2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v8[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  LODWORD(v9[2].__r_.__value_.__l.__data_) = v11;
  int v12 = (std::string *)((char *)v9 + 56);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9[3].__r_.__value_.__r.__words[0] = *(void *)(a3 + 16);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_26371E2E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA9D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<LogInfo>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    return;
  }
  unint64_t v2 = *(void **)(a1 + 24);

  operator delete(v2);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    if (v8 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    while (1)
    {
      int v11 = (uint64_t **)v6;
      uint64_t v14 = (const void *)v6[4];
      int v12 = v6 + 4;
      int v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        BOOL v16 = v12;
      }
      else {
        BOOL v16 = v13;
      }
      if (v15 >= 0) {
        size_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v17 = v12[1];
      }
      if (v17 >= v10) {
        size_t v18 = v10;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            return v11;
          }
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        uint64_t v6 = v11[1];
        if (!v6)
        {
          uint64_t v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_29;
        }
      }
    }
  }
  int v11 = a1 + 1;
LABEL_29:
  uint64_t v21 = operator new(0x48uLL);
  uint64_t v22 = (std::string *)(v21 + 4);
  unint64_t v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((void *)v23 + 1));
  }
  else
  {
    long long v24 = *v23;
    v21[6] = *((void *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  *uint64_t v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  uint64_t *v7 = v21;
  timespec v25 = (uint64_t *)**a1;
  long long v26 = v21;
  if (v25)
  {
    *a1 = v25;
    long long v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_26371E56C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(void *a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      BOOL v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    size_t v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      size_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  int v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
  return v4;
}

void sys::getCurrentBootSessionUUID(unsigned char *a1@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)&v19[13] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__s = v3;
  *(_OWORD *)int v19 = v3;
  size_t v15 = 37;
  if (!sysctlbyname("kern.bootsessionuuid", __s, &v15, 0, 0) && v15 == 37)
  {
    size_t v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v8 = v4 | 7;
      }
      uint64_t v9 = v8 + 1;
      size_t v10 = operator new(v8 + 1);
      *((void *)a1 + 1) = v5;
      *((void *)a1 + 2) = v9 | 0x8000000000000000;
      *(void *)a1 = v10;
      a1 = v10;
    }
    else
    {
      a1[23] = v4;
      if (!v4) {
        goto LABEL_17;
      }
    }
    memcpy(a1, __s, v5);
LABEL_17:
    a1[v5] = 0;
    return;
  }
  GetABMLogServer(&v13);
  BOOL v6 = *((void *)GetGlobalLogger(&v13) + 4);
  uint64_t v7 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v11 = __error();
    int v12 = strerror(*v11);
    *(_DWORD *)buf = 136315138;
    size_t v17 = v12;
    _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "Failed to get boot session uuid, error: %s", buf, 0xCu);
  }
  a1[23] = 0;
  *a1 = 0;
}

void sub_26371E848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sys::updateBootSessionUUID(sys *this)
{
  memset(&v19, 170, sizeof(v19));
  sys::getCurrentBootSessionUUID(&v19);
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&v20);
    long long v2 = v20;
    long long v20 = 0uLL;
    long long v3 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  size_t v17 = v1;
  size_t v18 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x263F26008];
  size_t v6 = strlen((const char *)*MEMORY[0x263F26008]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
LABEL_19:
    memmove(v8, v5, (size_t)v7);
    *((unsigned char *)v7 + (void)v8) = 0;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  HIBYTE(v16) = v6;
  uint64_t v8 = __dst;
  if (v6) {
    goto LABEL_19;
  }
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    std::string __p = v19;
    goto LABEL_21;
  }
LABEL_20:
  std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_21:
  *(void *)&long long v20 = __dst;
  *((void *)&v20 + 1) = &__p;
  uint64_t v21 = v1;
  os_unfair_lock_lock(v1 + 10);
  uint64_t v11 = SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v20);
  os_unfair_lock_unlock(v1 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_23:
      int v12 = v18;
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0]);
  int v12 = v18;
  if (!v18) {
    goto LABEL_28;
  }
LABEL_27:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v11;
    }
    goto LABEL_29;
  }
LABEL_28:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
  }
    operator delete(v19.__r_.__value_.__l.__data_);
  return v11;
}

void sub_26371EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

BOOL sys::isBootSessionChanged(sys *this)
{
  memset(__s1, 170, sizeof(__s1));
  sys::getCurrentBootSessionUUID(__s1);
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&v33);
    long long v2 = v33;
    long long v33 = 0uLL;
    long long v3 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  long long v27 = v1;
  long long v28 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x263F26008];
  size_t v6 = strlen((const char *)*MEMORY[0x263F26008]);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v26 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_18;
  }
  HIBYTE(v26) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  *(void *)&long long v33 = __dst;
  *((void *)&v33 + 1) = &__p;
  xpc_object_t v34 = v1;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::getPreference<std::string>(std::string const&,std::string &)::{lambda(void)#1}>(v1 + 6, (uint64_t)&v33);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v11 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  char v12 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0) {
    uint64_t v13 = (void *)HIBYTE(__s1[2]);
  }
  else {
    uint64_t v13 = __s1[1];
  }
  uint64_t v14 = (void *)HIBYTE(v31);
  int v15 = SHIBYTE(v31);
  if (v31 < 0) {
    uint64_t v14 = v30;
  }
  if (v13 != v14)
  {
    BOOL v22 = 1;
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (v31 >= 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if (SHIBYTE(__s1[2]) < 0)
  {
    BOOL v22 = memcmp(__s1[0], p_p, (size_t)__s1[1]) != 0;
    goto LABEL_45;
  }
  if (HIBYTE(__s1[2]))
  {
    uint64_t v17 = HIBYTE(__s1[2]) - 1;
    size_t v18 = __s1;
    do
    {
      int v20 = *(unsigned __int8 *)v18;
      size_t v18 = (void **)((char *)v18 + 1);
      int v19 = v20;
      int v21 = *p_p++;
      BOOL v22 = v19 != v21;
    }
    while (v19 == v21 && v17-- != 0);
LABEL_45:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_49:
    operator delete(__p);
    if ((HIBYTE(__s1[2]) & 0x80) == 0) {
      return v22;
    }
LABEL_50:
    operator delete(__s1[0]);
    return v22;
  }
  BOOL v22 = 0;
  if (SHIBYTE(v31) < 0) {
    goto LABEL_49;
  }
LABEL_46:
  if (v12 < 0) {
    goto LABEL_50;
  }
  return v22;
}

void sub_26371EE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sys::isHardwareModelChanged(sys *this)
{
  CFTypeRef v42 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__dst);
    long long v2 = __dst[0];
    __dst[0] = 0uLL;
    long long v3 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  std::string __p = v1;
  int v37 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x263F260F0];
  size_t v6 = strlen((const char *)*MEMORY[0x263F260F0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)&__dst[0] + 1) = v7;
    *(void *)&__dst[1] = v10 | 0x8000000000000000;
    *(void *)&__dst[0] = v8;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v6;
  uint64_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  os_unfair_lock_lock(v1 + 10);
  Preferences::getPreference<__CFDictionary const*>(v1, (const char *)__dst, &v42);
  os_unfair_lock_unlock(v1 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)v42;
  CFTypeRef cf = v42;
  if (v42) {
    CFRetain(v42);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v13);
  memset(__dst, 170, 24);
  uint64_t v14 = (const void *)*MEMORY[0x263F268C0];
  size_t v15 = strlen((const char *)*MEMORY[0x263F268C0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = (std::__shared_weak_count *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    int v37 = v16;
    int64_t v38 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v15;
  p_p = &__p;
  if (v15) {
LABEL_36:
  }
    memmove(p_p, v14, (size_t)v16);
  int v21 = (const char *)*MEMORY[0x263F26068];
  *((unsigned char *)&v16->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v21);
  ctu::cf::map_adapter::getString();
  BOOL v22 = (config::hw *)MEMORY[0x263E68C90](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  config::hw::product(v22);
  char v23 = BYTE7(__dst[1]);
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    long long v24 = (std::__shared_weak_count *)BYTE7(__dst[1]);
  }
  else {
    long long v24 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
  }
  timespec v25 = (std::__shared_weak_count *)HIBYTE(v38);
  int v26 = SHIBYTE(v38);
  if (v38 < 0) {
    timespec v25 = v37;
  }
  if (v24 != v25)
  {
    BOOL v18 = 1;
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
  if (v38 >= 0) {
    long long v27 = (unsigned __int8 *)&__p;
  }
  else {
    long long v27 = (unsigned __int8 *)__p;
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    BOOL v18 = memcmp(*(const void **)&__dst[0], v27, *((size_t *)&__dst[0] + 1)) != 0;
    goto LABEL_60;
  }
  if (BYTE7(__dst[1]))
  {
    uint64_t v28 = BYTE7(__dst[1]) - 1;
    int v29 = (unsigned __int8 *)__dst;
    do
    {
      int v31 = *v29++;
      int v30 = v31;
      int v32 = *v27++;
      BOOL v18 = v30 != v32;
    }
    while (v30 == v32 && v28-- != 0);
LABEL_60:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_65:
    operator delete(__p);
    if ((BYTE7(__dst[1]) & 0x80) == 0)
    {
LABEL_62:
      MEMORY[0x263E68CD0](v39);
      CFTypeRef v34 = cf;
      if (!cf) {
        return v18;
      }
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  BOOL v18 = 0;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_65;
  }
LABEL_61:
  if ((v23 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_66:
  operator delete(*(void **)&__dst[0]);
  MEMORY[0x263E68CD0](v39);
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_67:
  }
    CFRelease(v34);
  return v18;
}

void sub_26371F300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    MEMORY[0x263E68CD0](&a15);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x263E68CD0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_26371F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sys::isFWVersionChanged(unsigned __int8 *a1)
{
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  long long v2 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__dst);
    long long v3 = __dst[0];
    __dst[0] = 0uLL;
    size_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    size_t v5 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v2 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  std::string __p = v2;
  int v37 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v6 = (const void *)*MEMORY[0x263F260F0];
  size_t v7 = strlen((const char *)*MEMORY[0x263F260F0]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *((void *)&__dst[0] + 1) = v8;
    *(void *)&__dst[1] = v11 | 0x8000000000000000;
    *(void *)&__dst[0] = v9;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v7;
  uint64_t v9 = __dst;
  if (v7) {
LABEL_18:
  }
    memmove(v9, v6, v8);
  *((unsigned char *)v9 + v8) = 0;
  os_unfair_lock_lock(v2 + 10);
  Preferences::getPreference<__CFDictionary const*>(v2, (const char *)__dst, &cf);
  os_unfair_lock_unlock(v2 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v12 = cf;
    if (!cf) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v12 = cf;
    if (!cf) {
      return 0;
    }
  }
  CFTypeID v13 = CFGetTypeID(v12);
  if (v13 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)cf;
  CFTypeRef v40 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v14);
  memset(__dst, 170, 24);
  size_t v15 = (const void *)*MEMORY[0x263F268C0];
  size_t v16 = strlen((const char *)*MEMORY[0x263F268C0]);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (std::__shared_weak_count *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_p = operator new(v20 + 1);
    int v37 = v17;
    unint64_t v38 = v21 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v16;
  p_p = &__p;
  if (v16) {
LABEL_36:
  }
    memmove(p_p, v15, (size_t)v17);
  BOOL v22 = (const char *)*MEMORY[0x263F261C0];
  *((unsigned char *)&v17->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v22);
  ctu::cf::map_adapter::getString();
  MEMORY[0x263E68C90](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    uint64_t v24 = BYTE7(__dst[1]);
  }
  else {
    uint64_t v24 = *((void *)&__dst[0] + 1);
  }
  uint64_t v25 = a1[23];
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *((void *)a1 + 1);
  }
  if (v24 == v25)
  {
    if (v26 >= 0) {
      char v23 = a1;
    }
    else {
      char v23 = *(unsigned __int8 **)a1;
    }
    if ((BYTE7(__dst[1]) & 0x80) != 0)
    {
      long long v33 = *(void **)&__dst[0];
      BOOL v19 = memcmp(*(const void **)&__dst[0], v23, *((size_t *)&__dst[0] + 1)) != 0;
      goto LABEL_61;
    }
    if (!BYTE7(__dst[1]))
    {
      BOOL v19 = 0;
      MEMORY[0x263E68CD0](v39, v23);
      CFTypeRef v34 = v40;
      if (!v40) {
        return v19;
      }
      goto LABEL_63;
    }
    uint64_t v27 = BYTE7(__dst[1]) - 1;
    uint64_t v28 = (unsigned __int8 *)__dst;
    do
    {
      int v30 = *v28++;
      int v29 = v30;
      int v31 = *v23++;
      BOOL v19 = v29 != v31;
    }
    while (v29 == v31 && v27-- != 0);
    if ((BYTE7(__dst[1]) & 0x80) == 0) {
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if ((BYTE7(__dst[1]) & 0x80) == 0) {
      goto LABEL_62;
    }
  }
  long long v33 = *(void **)&__dst[0];
LABEL_61:
  operator delete(v33);
LABEL_62:
  MEMORY[0x263E68CD0](v39, v23);
  CFTypeRef v34 = v40;
  if (v40) {
LABEL_63:
  }
    CFRelease(v34);
  return v19;
}

BOOL sys::isOSVersionChanged(sys *this)
{
  CFTypeRef v42 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__dst);
    long long v2 = __dst[0];
    __dst[0] = 0uLL;
    long long v3 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v2;
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    size_t v4 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
    if (*((void *)&__dst[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v1 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  std::string __p = v1;
  int v37 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  size_t v5 = (const void *)*MEMORY[0x263F260F0];
  size_t v6 = strlen((const char *)*MEMORY[0x263F260F0]);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v8 = operator new(v9 + 1);
    *((void *)&__dst[0] + 1) = v7;
    *(void *)&__dst[1] = v10 | 0x8000000000000000;
    *(void *)&__dst[0] = v8;
    goto LABEL_18;
  }
  BYTE7(__dst[1]) = v6;
  size_t v8 = __dst;
  if (v6) {
LABEL_18:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  os_unfair_lock_lock(v1 + 10);
  Preferences::getPreference<__CFDictionary const*>(v1, (const char *)__dst, &v42);
  os_unfair_lock_unlock(v1 + 10);
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  else
  {
    CFTypeRef v11 = v42;
    if (!v42) {
      return 0;
    }
  }
  CFTypeID v12 = CFGetTypeID(v11);
  if (v12 != CFDictionaryGetTypeID()) {
    return 0;
  }
  CFDictionaryRef v13 = (const __CFDictionary *)v42;
  CFTypeRef cf = v42;
  if (v42) {
    CFRetain(v42);
  }
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, v13);
  memset(__dst, 170, 24);
  CFDictionaryRef v14 = (const void *)*MEMORY[0x263F268C0];
  size_t v15 = strlen((const char *)*MEMORY[0x263F268C0]);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = (std::__shared_weak_count *)v15;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    int v37 = v16;
    int64_t v38 = v20 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v38) = v15;
  p_p = &__p;
  if (v15) {
LABEL_36:
  }
    memmove(p_p, v14, (size_t)v16);
  uint64_t v21 = (const char *)*MEMORY[0x263F261C8];
  *((unsigned char *)&v16->__vftable + (void)p_p) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v43, v21);
  ctu::cf::map_adapter::getString();
  BOOL v22 = (config::build *)MEMORY[0x263E68C90](&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  config::build::version(v22);
  char v23 = BYTE7(__dst[1]);
  if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
    uint64_t v24 = (std::__shared_weak_count *)BYTE7(__dst[1]);
  }
  else {
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&__dst[0] + 1);
  }
  uint64_t v25 = (std::__shared_weak_count *)HIBYTE(v38);
  int v26 = SHIBYTE(v38);
  if (v38 < 0) {
    uint64_t v25 = v37;
  }
  if (v24 != v25)
  {
    BOOL v18 = 1;
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_65;
  }
  if (v38 >= 0) {
    uint64_t v27 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v27 = (unsigned __int8 *)__p;
  }
  if (SBYTE7(__dst[1]) < 0)
  {
    BOOL v18 = memcmp(*(const void **)&__dst[0], v27, *((size_t *)&__dst[0] + 1)) != 0;
    goto LABEL_60;
  }
  if (BYTE7(__dst[1]))
  {
    uint64_t v28 = BYTE7(__dst[1]) - 1;
    int v29 = (unsigned __int8 *)__dst;
    do
    {
      int v31 = *v29++;
      int v30 = v31;
      int v32 = *v27++;
      BOOL v18 = v30 != v32;
    }
    while (v30 == v32 && v28-- != 0);
LABEL_60:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_65:
    operator delete(__p);
    if ((BYTE7(__dst[1]) & 0x80) == 0)
    {
LABEL_62:
      MEMORY[0x263E68CD0](v39);
      CFTypeRef v34 = cf;
      if (!cf) {
        return v18;
      }
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  BOOL v18 = 0;
  if (SHIBYTE(v38) < 0) {
    goto LABEL_65;
  }
LABEL_61:
  if ((v23 & 0x80) == 0) {
    goto LABEL_62;
  }
LABEL_66:
  operator delete(*(void **)&__dst[0]);
  MEMORY[0x263E68CD0](v39);
  CFTypeRef v34 = cf;
  if (cf) {
LABEL_67:
  }
    CFRelease(v34);
  return v18;
}

void sub_26371FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    MEMORY[0x263E68CD0](&a15);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  MEMORY[0x263E68CD0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_26371FD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()(char **a1)
{
  uint64_t v1 = a1[1];
  long long v2 = a1[2];
  long long v3 = *a1;
  if (v1[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *((void *)v1 + 1));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *((void *)v1 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v9 = __p;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_6:
  if (v3[23] >= 0) {
    size_t v5 = v3;
  }
  else {
    size_t v5 = *(char **)v3;
  }
  uint64_t v6 = ctu::cf::plist_adapter::set<std::string>((int)v2, (uint64_t)&v9, v5);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v6;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v6;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_26371FE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v7 = *(std::string *)a2;
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  uint64_t v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x263E68C90](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  return 0;
}

void sub_263720060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t result, char a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_270EA9DE0;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

{
  *(void *)uint64_t result = &unk_270EA9DE0;
  *(unsigned char *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)a1 = &unk_270EA9DE0;
  *(unsigned char *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  std::string __p;

  *(void *)a1 = &unk_270EA9DE0;
  *(unsigned char *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2637201A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_263720268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::getType(HealthEvent *this)
{
  return *((char *)this + 8);
}

void HealthEvent::getTime(HealthEvent *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = v6;
  size_t v5 = v4;
  v6[0] = v4;
  *((unsigned char *)v4 + 24) = 1;
  v6[1] = (void *)1;
  *((void *)v4 + 5) = v3;
  *((void *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_263720318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t HealthEvent::getChronoTime(HealthEvent *this)
{
  return *((void *)this + 2);
}

uint64_t HealthEvent::setType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

void HealthEvent::setTime(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  *(void *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2637203C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::setTime(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t HealthEvent::asString@<X0>(HealthEvent *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v4;
  v36[8] = v4;
  v36[5] = v4;
  void v36[6] = v4;
  v36[3] = v4;
  v36[4] = v4;
  v36[1] = v4;
  v36[2] = v4;
  long long v35 = v4;
  v36[0] = v4;
  *(_OWORD *)long long v33 = v4;
  long long v34 = v4;
  long long v31 = v4;
  long long v32 = v4;
  long long v29 = v4;
  long long v30 = v4;
  long long v28 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"HealthEvent { Type='", 20);
  switch(*((unsigned char *)this + 8))
  {
    case 1:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      std::string v7 = "boot failure";
      goto LABEL_7;
    case 2:
      size_t v8 = (char *)operator new(0x19uLL);
      *(void *)uint64_t v27 = v8;
      *(_OWORD *)&v27[8] = xmmword_2637A5AB0;
      strcpy(v8, "boot attempts exhausted");
      uint64_t v6 = 23;
      goto LABEL_10;
    case 3:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1936942435;
      std::string v7 = "ping success";
      goto LABEL_7;
    case 4:
      uint64_t v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      std::string v7 = "ping failure";
LABEL_7:
      *(void *)uint64_t v27 = *(void *)v7;
      v27[12] = 0;
      break;
    case 5:
      uint64_t v6 = 11;
      v27[23] = 11;
      strcpy(v27, "erasing efs");
      break;
    default:
      uint64_t v6 = 7;
      v27[23] = 7;
      strcpy(v27, "unknown");
      break;
  }
  size_t v8 = v27;
LABEL_10:
  std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v8, v6);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' Time='", 8);
  uint64_t v11 = *((void *)this + 2);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int64_t v38 = &v39;
  CFTypeID v12 = operator new(0x38uLL);
  v12[8] = 0;
  *(void *)CFTypeID v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = &v39;
  int64_t v38 = (void **)v12;
  uint64_t v39 = v12;
  *((unsigned char *)v12 + 24) = 1;
  uint64_t v40 = 1;
  *((void *)v12 + 5) = v11;
  *((void *)v12 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v38, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v38, v39);
  if ((v26 & 0x80u) == 0) {
    CFDictionaryRef v13 = __p;
  }
  else {
    CFDictionaryRef v13 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v14 = v26;
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' }", 3);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if ((v27[23] & 0x80000000) == 0)
    {
LABEL_18:
      char v16 = BYTE8(v35);
      if ((BYTE8(v35) & 0x10) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      uint64_t v18 = v35;
      if ((unint64_t)v35 < *((void *)&v32 + 1))
      {
        *(void *)&long long v35 = *((void *)&v32 + 1);
        uint64_t v18 = *((void *)&v32 + 1);
      }
      uint64_t v19 = (const void *)v32;
      size_t v17 = v18 - v32;
      if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_37;
      }
      goto LABEL_26;
    }
  }
  else if ((v27[23] & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)v27);
  char v16 = BYTE8(v35);
  if ((BYTE8(v35) & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_19:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a2[23] = 0;
    goto LABEL_33;
  }
  uint64_t v19 = (const void *)*((void *)&v30 + 1);
  size_t v17 = *((void *)&v31 + 1) - *((void *)&v30 + 1);
  if (*((void *)&v31 + 1) - *((void *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_37:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_26:
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    BOOL v22 = operator new(v20 + 1);
    *((void *)a2 + 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_32;
  }
  a2[23] = v17;
  if (v17) {
LABEL_32:
  }
    memmove(a2, v19, v17);
LABEL_33:
  a2[v17] = 0;
  *(void *)&long long v28 = *MEMORY[0x263F8C2B8];
  uint64_t v23 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)&v28 + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&long long v29 = v23;
  *((void *)&v29 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x263E69630](v36);
}

void sub_263720860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_263720874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v21 - 72, *(void **)(v21 - 64));
  if (a20 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2637208FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *HealthEvent::toString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "boot failure");
      break;
    case 2:
      uint64_t result = (char *)operator new(0x19uLL);
      *(void *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_2637A5AB0;
      strcpy(result, "boot attempts exhausted");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping success");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping failure");
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "erasing efs");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void BootModule::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor((capabilities::radio *)a1) == 1)
  {
    long long v4 = operator new(0x1F0uLL);
    uint64_t v5 = (uint64_t)v4;
    uint64_t v6 = *a1;
    std::string v7 = (std::__shared_weak_count *)a1[1];
    v11[0] = v6;
    v11[1] = (uint64_t)v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v10[0] = 0;
    v10[1] = 0;
    BootModule::BootModule((uint64_t)v4, v11, v10);
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(&v12, v5);
    ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v12 + 48);
    long long v8 = v12;
    long long v12 = 0uLL;
    *(_OWORD *)a2 = v8;
    if (v7)
    {
      uint64_t v9 = v8;
      std::__shared_weak_count::__release_weak(v7);
      *(void *)&long long v8 = v9;
    }
    BootModule::init((BootModule *)v8);
  }
}

void sub_263720B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_263720C0C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BootModule::init(BootModule *this)
{
  uint64_t v5 = *((void *)this + 15);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  long long v4 = (char *)this + 120;
  if (!v3 || (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN10BootModule4initEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_18_0;
  v11[4] = this;
  v11[5] = v5;
  long long v12 = v7;
  CFDictionaryRef v13 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_213;
  void block[4] = v4;
  block[5] = &v13;
  uint64_t v9 = *((void *)this + 17);
  if (!*((void *)this + 18))
  {
    dispatch_sync(v9, block);
    uint64_t v10 = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_async_and_wait(v9, block);
  uint64_t v10 = v12;
  if (v12) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_8:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t BootModule::BootModule(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EAD770;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_270EA6BA0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_270EA6BA0;
  }
  *(void *)a1 = &unk_270EA9E10;
  *(void *)(a1 + 48) = &unk_270EA9E98;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v39, "com.apple.telephony.abm", "boot.mod");
  GetABMLogServer(&v44);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v8 = dispatch_queue_create_with_target_V2("boot.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_270EAA758;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *(void *)(a1 + 56) = &unk_270EA5428;
  uint64_t v9 = v45;
  *(void *)(a1 + 104) = v44;
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
  *(void *)(a1 + 48) = &unk_270EAA7E8;
  uint64_t v10 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v39);
  *(void *)a1 = &unk_270EA9E10;
  *(void *)(a1 + 48) = &unk_270EA9E98;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 15;
  uint64_t v11 = (config::hw *)dispatch_semaphore_create(0);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = v11;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = -1;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  config::hw::regionInfo(v11);
  *(void *)(a1 + 416) = dispatch_group_create();
  *(void *)(a1 + 424) = 0;
  long long v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_21;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_21:
  }
    memmove(p_dst, v12, v14);
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  char v40 = 11;
  strcpy((char *)v39, ".resetqueue");
  uint64_t v18 = std::string::append(&__dst, (const std::string::value_type *)v39, 0xBuLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v43 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)buf = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v43 >= 0) {
    uint64_t v20 = buf;
  }
  else {
    uint64_t v20 = *(uint8_t **)buf;
  }
  uint64_t v21 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  BOOL v22 = (sys *)dispatch_queue_create((const char *)v20, v21);
  *(void *)(a1 + 432) = v22;
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_38:
    operator delete(v39[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
  operator delete(*(void **)buf);
  if (v40 < 0) {
    goto LABEL_38;
  }
LABEL_27:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_39:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_28:
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = *a3;
  uint64_t v23 = a3[1];
  *(void *)(a1 + 488) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 256) = 8;
  if (sys::isBootSessionChanged(v22))
  {
    uint64_t v24 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_26368A000, v24, OS_LOG_TYPE_DEFAULT, "#I Resetting baseband boot stats", buf, 2u);
    }
    *(void *)(a1 + 448) = 0;
    return a1;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  if (!qword_26A99F3E8)
  {
    unsigned __int8 v26 = (HealthEventDB *)operator new(0xA0uLL);
    HealthEventDB::HealthEventDB(v26);
    uint64_t v25 = operator new(0x20uLL);
    *uint64_t v25 = &unk_270EAA828;
    v25[1] = 0;
    void v25[2] = 0;
    v25[3] = v26;
    uint64_t v27 = (std::__shared_weak_count *)off_26A99F3F0;
    qword_26A99F3E8 = (uint64_t)v26;
    off_26A99F3F0 = v25;
    if (!v27)
    {
      *(void *)buf = v26;
      *(void *)&uint8_t buf[8] = v25;
      goto LABEL_44;
    }
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  uint64_t v25 = off_26A99F3F0;
  *(void *)buf = qword_26A99F3E8;
  *(void *)&uint8_t buf[8] = off_26A99F3F0;
  if (off_26A99F3F0) {
LABEL_44:
  }
    atomic_fetch_add_explicit(v25 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  HealthEventDB::getHealthInfo(*(HealthEventDB **)buf, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
  long long v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  xpc_object_t value = xpc_dictionary_get_value(__dst.__r_.__value_.__l.__data_, "KeyBasebandStats");
  xpc_object_t v30 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_object_t v31 = xpc_null_create();
  uint64_t v32 = MEMORY[0x263EF8708];
  if (v30 && MEMORY[0x263E6A240](v30) == v32)
  {
    xpc_retain(v30);
    xpc_object_t v33 = v30;
  }
  else
  {
    xpc_object_t v33 = xpc_null_create();
  }
  if (MEMORY[0x263E6A240](v33) != v32)
  {
    if (v31)
    {
      xpc_retain(v31);
      xpc_object_t v34 = v31;
    }
    else
    {
      xpc_object_t v34 = xpc_null_create();
    }
    xpc_release(v33);
    xpc_object_t v33 = v34;
  }
  xpc_release(v31);
  xpc_release(v30);
  if (MEMORY[0x263E6A240](v33) != v32)
  {
    long long v35 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_26368A000, v35, OS_LOG_TYPE_ERROR, "Baseband boot stats not found", buf, 2u);
    }
    *(void *)(a1 + 448) = 0;
  }
  xpc_object_t v36 = xpc_dictionary_get_value(v33, (const char *)*MEMORY[0x263F26540]);
  *(void *)buf = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    *(void *)buf = xpc_null_create();
  }
  *(_DWORD *)(a1 + 448) = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v37 = xpc_dictionary_get_value(v33, (const char *)*MEMORY[0x263F26548]);
  *(void *)buf = v37;
  if (v37) {
    xpc_retain(v37);
  }
  else {
    *(void *)buf = xpc_null_create();
  }
  *(_DWORD *)(a1 + 452) = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc_release(v33);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_263721584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  pthread_mutex_unlock(&ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v25 + 480);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v25 + 464);
  uint64_t v32 = *(NSObject **)(v25 + 440);
  if (v32)
  {
    dispatch_resume(v32);
    xpc_object_t v33 = *(NSObject **)(v25 + 440);
    if (v33) {
      dispatch_release(v33);
    }
  }
  xpc_object_t v34 = *(NSObject **)(v25 + 432);
  if (v34) {
    dispatch_release(v34);
  }
  long long v35 = *(NSObject **)(v25 + 424);
  if (v35)
  {
    dispatch_group_leave(v35);
    xpc_object_t v36 = *(NSObject **)(v25 + 424);
    if (v36) {
      dispatch_release(v36);
    }
  }
  xpc_object_t v37 = *(NSObject **)(v25 + 416);
  if (v37)
  {
    dispatch_release(v37);
    if ((*(char *)(v25 + 415) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v38 = v30 + 64;
      if ((*(char *)(v25 + 375) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
  }
  else if ((*(char *)(v25 + 415) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*v27);
  uint64_t v38 = v30 + 64;
  if ((*(char *)(v25 + 375) & 0x80000000) == 0)
  {
LABEL_12:
    uint64_t v39 = (const void **)(v30 + 56);
    if ((*(char *)(v25 + 327) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v30 + 144));
  uint64_t v39 = (const void **)(v30 + 56);
  if ((*(char *)(v25 + 327) & 0x80000000) == 0)
  {
LABEL_13:
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v38);
    char v40 = *v39;
    if (!*v39) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v30 + 96));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v38);
  char v40 = *v39;
  if (!*v39)
  {
LABEL_20:
    uint64_t v41 = *(NSObject **)(v25 + 216);
    if (v41)
    {
      dispatch_group_leave(v41);
      CFTypeRef v42 = *(NSObject **)(v25 + 216);
      if (v42) {
        dispatch_release(v42);
      }
    }
    if (*(void *)v30)
    {
      dispatch_group_leave(*(dispatch_group_t *)v30);
      if (*(void *)v30) {
        dispatch_release(*(dispatch_object_t *)v30);
      }
    }
    int64_t v43 = *(NSObject **)(v25 + 200);
    if (v43) {
      dispatch_release(v43);
    }
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v30 - 32);
    if (*(char *)(v25 + 175) < 0) {
      operator delete(*v29);
    }
    ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v26);
    Service::~Service((Service *)v25);
    _Unwind_Resume(a1);
  }
LABEL_19:
  _Block_release(v40);
  goto LABEL_20;
}

void *ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAA758;
  MEMORY[0x263E68AF0](a1 + 1);
  long long v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EAA758;
  MEMORY[0x263E68AF0](a1 + 1);
  long long v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void BootModule::~BootModule(BootModule *this)
{
  *(void *)this = &unk_270EA9E10;
  *((void *)this + 6) = &unk_270EA9E98;
  long long v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v26 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v26, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *((void *)this + 55);
  if (v5)
  {
    dispatch_resume(v5);
    uint64_t v6 = *((void *)this + 55);
    if (v6) {
      dispatch_release(v6);
    }
  }
  std::string v7 = *((void *)this + 54);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 53);
  if (v8)
  {
    dispatch_group_leave(v8);
    uint64_t v9 = *((void *)this + 53);
    if (v9) {
      dispatch_release(v9);
    }
  }
  uint64_t v10 = *((void *)this + 52);
  if (v10) {
    dispatch_release(v10);
  }
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 327) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_26;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 44));
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
LABEL_22:
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 35);
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*((void **)this + 38));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 35);
  if (!v11) {
    goto LABEL_28;
  }
LABEL_27:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    long long v12 = (const void *)*((void *)this + 33);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_28:
  long long v12 = (const void *)*((void *)this + 33);
  if (v12) {
LABEL_29:
  }
    _Block_release(v12);
LABEL_30:
  size_t v13 = *((void *)this + 27);
  if (v13)
  {
    dispatch_group_leave(v13);
    std::string::size_type v14 = *((void *)this + 27);
    if (v14) {
      dispatch_release(v14);
    }
  }
  size_t v15 = *((void *)this + 26);
  if (v15)
  {
    dispatch_group_leave(v15);
    uint64_t v16 = *((void *)this + 26);
    if (v16) {
      dispatch_release(v16);
    }
  }
  uint64_t v17 = *((void *)this + 25);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 23);
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*((char *)this + 175) < 0) {
LABEL_41:
  }
    operator delete(*((void **)this + 19));
LABEL_42:
  *((void *)this + 6) = &unk_270EAA758;
  MEMORY[0x263E68AF0]((char *)this + 56);
  long long v19 = *((void *)this + 18);
  if (v19) {
    dispatch_release(v19);
  }
  uint64_t v20 = *((void *)this + 17);
  if (v20) {
    dispatch_release(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v22 = *((void *)this + 3);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 4);
    uint64_t v24 = (void *)*((void *)this + 3);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v22;
    operator delete(v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
}

{
  void *v1;
  uint64_t vars8;

  BootModule::~BootModule(this);

  operator delete(v1);
}

void non-virtual thunk to'BootModule::~BootModule(BootModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  BootModule::~BootModule((BootModule *)((char *)this - 48));

  operator delete(v1);
}

void BootModule::changeState_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v4 = *(NSObject **)(a1 + 88);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = *(int *)(a1 + 456);
    if (v6 > 8)
    {
      std::string v7 = "Unknown";
      if (a2 > 8) {
        goto LABEL_4;
      }
    }
    else
    {
      std::string v7 = off_2655D5288[v6];
      if (a2 > 8)
      {
LABEL_4:
        uint64_t v8 = "Unknown";
LABEL_7:
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v8;
        _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I boot state changing %{public}s -> %{public}s", buf, 0x16u);
        goto LABEL_8;
      }
    }
    uint64_t v8 = off_2655D5288[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 456) = a2;
  if (!capabilities::ipc::supportsPCI((capabilities::ipc *)v5)) {
    goto LABEL_43;
  }
  if ((*(_DWORD *)(a1 + 456) - 3) > 1)
  {
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 280);
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_43;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (!*(void *)(a1 + 216)) {
      goto LABEL_49;
    }
  }
  else
  {
    if (*(void *)(a1 + 272)) {
      goto LABEL_43;
    }
    uint64_t v9 = *(void **)(a1 + 264);
    if (v9) {
      uint64_t v9 = _Block_copy(v9);
    }
    aBlock = v9;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    uint64_t v10 = off_26A99F030;
    if (!off_26A99F030)
    {
      ABMServer::create_default_global(buf);
      long long v11 = *(_OWORD *)buf;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      long long v12 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
      off_26A99F030 = v11;
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      size_t v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v10 = off_26A99F030;
    }
    uint64_t v36 = v10;
    xpc_object_t v37 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    if (*(&off_26A99F030 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    pci::event::Listener::create();
    long long v14 = v39;
    long long v39 = 0uLL;
    size_t v15 = *(std::__shared_weak_count **)(a1 + 280);
    *(_OWORD *)(a1 + 272) = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (*((void *)&v39 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v39 + 1) + 16))(*((void *)&v39 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
    }
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    uint64_t v16 = *(NSObject **)(a1 + 88);
    if (*(void *)(a1 + 272))
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_26368A000, v16, OS_LOG_TYPE_DEFAULT, "#I Listening for PCI events", buf, 2u);
        if (!*(void *)(a1 + 216)) {
          goto LABEL_49;
        }
        goto LABEL_44;
      }
LABEL_43:
      if (!*(void *)(a1 + 216)) {
        goto LABEL_49;
      }
      goto LABEL_44;
    }
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_43;
    }
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_26368A000, v16, OS_LOG_TYPE_ERROR, "Could not create PCI event listener!", buf, 2u);
    if (!*(void *)(a1 + 216)) {
      goto LABEL_49;
    }
  }
LABEL_44:
  int v18 = *(_DWORD *)(a1 + 456);
  if (v18 != 4) {
    goto LABEL_50;
  }
  long long v19 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_26368A000, v19, OS_LOG_TYPE_DEFAULT, "#I Releasing shutdown request session", buf, 2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 7);
  uint64_t v20 = *(NSObject **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
LABEL_49:
  int v18 = *(_DWORD *)(a1 + 456);
LABEL_50:
  if (v18 != 7) {
    return;
  }
  *(void *)buf = 0;
  uint64_t v21 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    *(void *)buf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26678], v21, v23);
  uint64_t v24 = (const void *)*MEMORY[0x263F26650];
  size_t v25 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v25 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v29 = v25 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v27 = (void **)operator new(v29 + 1);
    __dst[1] = v26;
    unint64_t v35 = v30 | 0x8000000000000000;
    __dst[0] = v27;
LABEL_61:
    memmove(v27, v24, (size_t)v26);
    *((unsigned char *)v26 + (void)v27) = 0;
    uint64_t v28 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  HIBYTE(v35) = v25;
  uint64_t v27 = __dst;
  if (v25) {
    goto LABEL_61;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v28 = *(const void **)buf;
  if (!*(void *)buf) {
    goto LABEL_64;
  }
LABEL_62:
  CFTypeID v31 = CFGetTypeID(v28);
  if (v31 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v28;
    CFRetain(v28);
    goto LABEL_65;
  }
LABEL_64:
  CFTypeRef cf = 0;
LABEL_65:
  uint64_t v32 = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&v32);
  if (v32) {
    _Block_release(v32);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete(__dst[0]);
    if (!v28) {
      return;
    }
  }
  else if (!v28)
  {
    return;
  }
  CFRelease(v28);
}

void sub_26372231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,char a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(a1);
}

const char *BootModule::getName(BootModule *this)
{
  return "boot.mod";
}

void BootModule::requestReset(void *a1, const ResetInfo *a2, void **a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!capabilities::abs::shouldIgnoreResets((capabilities::abs *)v8))
  {
    size_t v13 = a1[54];
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_1;
    void block[4] = a1;
    block[5] = v7;
    uint64_t v17 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    ResetInfo::ResetInfo(&v18, a2);
    long long v14 = *a3;
    if (*a3) {
      long long v14 = _Block_copy(v14);
    }
    aBlock = v14;
    dispatch_async(v13, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v24 < 0)
    {
      operator delete(__p);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_26;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v21);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v19);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      size_t v15 = v17;
      if (!v17) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v18.__r_.__value_.__l.__data_);
    size_t v15 = v17;
    if (!v17) {
      goto LABEL_29;
    }
LABEL_28:
    std::__shared_weak_count::__release_weak(v15);
    goto LABEL_29;
  }
  uint64_t v10 = a1[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)
    && ((ResetInfo::asString(a2, v26), v27 >= 0) ? (long long v11 = v26) : (long long v11 = (void **)v26[0]),
        *(_DWORD *)buf = 136446210,
        uint64_t v29 = v11,
        _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Ignoring modem reset request: %{public}s", buf, 0xCu), v27 < 0))
  {
    operator delete(v26[0]);
    long long v12 = (void (**)(void *, void, void **))*a3;
    if (!*a3) {
      goto LABEL_29;
    }
  }
  else
  {
    long long v12 = (void (**)(void *, void, void **))*a3;
    if (!*a3) {
      goto LABEL_29;
    }
  }
  char v27 = 0;
  LOBYTE(v26[0]) = 0;
  v12[2](v12, 0, v26);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
LABEL_29:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_26372269C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  long long v4 = std::__shared_weak_count::lock(v2);
  char v24 = v4;
  if (!v4) {
    return;
  }
  BOOL v5 = v4;
  if (!a1[5]) {
    goto LABEL_15;
  }
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_22;
  void v12[4] = v3;
  ResetInfo::ResetInfo(&v13, (const ResetInfo *)(a1 + 7));
  uint64_t v6 = (const void *)a1[21];
  if (v6)
  {
    uint64_t v7 = _Block_copy(v6);
    uint64_t v8 = (uint64_t *)(v3 + 120);
    uint64_t v10 = a1[5];
    uint64_t v9 = (std::__shared_weak_count *)a1[6];
    aBlock = v7;
    uint64_t v21 = v10;
    char v22 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = (uint64_t *)(v3 + 120);
  uint64_t v11 = a1[5];
  uint64_t v9 = (std::__shared_weak_count *)a1[6];
  aBlock = 0;
  uint64_t v21 = v11;
  char v22 = v9;
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_21:
      operator delete(v14);
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
LABEL_23:
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
      goto LABEL_22;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v16);
  if (v15 < 0) {
    goto LABEL_21;
  }
LABEL_14:
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_22:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
}

void sub_2637228D0(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v2 = *(void **)(a1 + 32);
  unsigned int v3 = *((_DWORD *)v2 + 114);
  if (v3 > 8 || ((1 << v3) & 0x1C7) == 0)
  {
    long long v12 = v2[11];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
      std::string v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I Reset requested: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    (*(void (**)(void *, uint64_t))(*v2 + 96))(v2, 1);
    *(void *)std::string v61 = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v15 = v14;
    if (v14)
    {
      *(void *)std::string v61 = v14;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      *(void *)std::string v61 = v15;
      if (!v15)
      {
        xpc_object_t v16 = xpc_null_create();
        xpc_object_t v15 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x263E6A240](v15) == MEMORY[0x263EF8708])
    {
      xpc_retain(v15);
      goto LABEL_41;
    }
    xpc_object_t v16 = xpc_null_create();
LABEL_40:
    *(void *)std::string v61 = v16;
LABEL_41:
    xpc_release(v15);
    uint64_t v21 = (_OWORD *)(a1 + 40);
    ResetInfo::addToDict((ResetInfo *)(a1 + 40), (xpc_object_t *)v61);
    xpc_object_t v22 = *(xpc_object_t *)v61;
    xpc_object_t v60 = *(xpc_object_t *)v61;
    if (*(void *)v61)
    {
      xpc_retain(*(xpc_object_t *)v61);
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v60 = v22;
    }
    BootModule::submitBBResetMetric_sync((uint64_t)v2, &v60);
    xpc_release(v22);
    xpc_object_t v23 = *(xpc_object_t *)v61;
    xpc_object_t v59 = *(xpc_object_t *)v61;
    xpc_object_t v60 = 0;
    if (*(void *)v61)
    {
      xpc_retain(*(xpc_object_t *)v61);
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v59 = v23;
    }
    BootModule::updateAnalyticsEvent_sync((uint64_t)v2, &v59);
    xpc_release(v23);
    xpc_object_t v59 = 0;
    if (*(char *)(a1 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
      __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size == strlen((const char *)*MEMORY[0x263F26178]))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      BOOL v27 = memcmp(p_p, (const void *)*MEMORY[0x263F26178], size) == 0;
      if ((v24 & 0x80000000) == 0)
      {
LABEL_61:
        if (v27)
        {
          BootModule::reportStatisticsHardResetTime_sync((BootModule *)v2);
          goto LABEL_79;
        }
        if (*(char *)(a1 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v21;
          __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
        }
        int v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v29 = __p.__r_.__value_.__l.__size_;
        }
        if (v29 == strlen((const char *)*MEMORY[0x263F26180]))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v30 = &__p;
          }
          else {
            uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          BOOL v31 = memcmp(v30, (const void *)*MEMORY[0x263F26180], v29) == 0;
          if ((v28 & 0x80000000) == 0)
          {
LABEL_77:
            if (v31) {
              BootModule::reportStatisticsSoftReset_sync((BootModule *)v2);
            }
LABEL_79:
            memset(&buf, 170, 16);
            (*(void (**)(std::string *__return_ptr, void *))(*v2 + 80))(&buf, v2);
            std::string::size_type v32 = buf.__r_.__value_.__r.__words[0];
            if (!buf.__r_.__value_.__r.__words[0])
            {
LABEL_105:
              uint64_t v47 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
              if (buf.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
              xpc_release(*(xpc_object_t *)v61);
              return;
            }
            dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v33 = (char *)operator new(0x38uLL);
            strcpy(v33, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
            uint64_t v34 = capabilities::abs::resetAssertionTimeoutScalingFactor((capabilities::abs *)v33);
            uint64_t v35 = *(void *)(v32 + 104);
            std::string::__init_copy_ctor_external(&__p, v33, 0x33uLL);
            (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v35 + 24))(&object, v35, &__p, 360000 * v34);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            operator delete(v33);
            std::string::size_type v37 = *(void *)(a1 + 160);
            std::string::size_type v36 = *(void *)(a1 + 168);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
            __p.__r_.__value_.__l.__size_ = v37;
            __p.__r_.__value_.__r.__words[2] = v36;
            if (v36) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 16), 1uLL, memory_order_relaxed);
            }
            ResetInfo::ResetInfo(&v49, (const ResetInfo *)(a1 + 40));
            uint64_t v38 = *(void **)(a1 + 152);
            if (v38) {
              uint64_t v38 = _Block_copy(v38);
            }
            aBlock = v38;
            dispatch_object_t v57 = object;
            if (object)
            {
              dispatch_retain(object);
              long long v39 = object;
            }
            else
            {
              long long v39 = 0;
            }
            char v40 = v2[17];
            uint64_t v41 = (std::string *)operator new(0x98uLL);
            CFTypeRef v42 = (std::string::__raw *)v41;
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            std::string::size_type v43 = __p.__r_.__value_.__r.__words[2];
            v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            if (v43) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 16), 1uLL, memory_order_relaxed);
            }
            ResetInfo::ResetInfo(v41 + 1, (const ResetInfo *)&v49);
            uint64_t v44 = aBlock;
            if (aBlock) {
              uint64_t v44 = _Block_copy(aBlock);
            }
            dispatch_object_t v45 = v57;
            v42[5].__words[2] = (std::string::size_type)v44;
            v42[6].__words[0] = (std::string::size_type)v45;
            dispatch_object_t v57 = 0;
            dispatch_group_notify_f(v39, v40, v42, (dispatch_function_t)_ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_);
            if (v57) {
              dispatch_release(v57);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v55 < 0)
            {
              operator delete(v54);
              if ((v53 & 0x80000000) == 0)
              {
LABEL_99:
                if ((v51 & 0x80000000) == 0) {
                  goto LABEL_100;
                }
                goto LABEL_112;
              }
            }
            else if ((v53 & 0x80000000) == 0)
            {
              goto LABEL_99;
            }
            operator delete(v52);
            if ((v51 & 0x80000000) == 0)
            {
LABEL_100:
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_101;
              }
              goto LABEL_113;
            }
LABEL_112:
            operator delete(v50);
            if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_101:
              timeval v46 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
              if (!__p.__r_.__value_.__r.__words[2]) {
                goto LABEL_103;
              }
              goto LABEL_102;
            }
LABEL_113:
            operator delete(v49.__r_.__value_.__l.__data_);
            timeval v46 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
            if (!__p.__r_.__value_.__r.__words[2])
            {
LABEL_103:
              if (object) {
                dispatch_release(object);
              }
              goto LABEL_105;
            }
LABEL_102:
            std::__shared_weak_count::__release_weak(v46);
            goto LABEL_103;
          }
        }
        else
        {
          BOOL v31 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_77;
      }
    }
    else
    {
      BOOL v27 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  uint64_t v5 = (int)v3;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2637A8330;
  strcpy(__p.__r_.__value_.__l.__data_, "Reset rejected; Boot state is: ");
  if (v5 > 8) {
    uint64_t v6 = "Unknown";
  }
  else {
    uint64_t v6 = off_2655D5288[v5];
  }
  size_t v7 = strlen(v6);
  uint64_t v8 = std::string::append(&__p, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = v2[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    std::string::size_type v18 = buf.__r_.__value_.__r.__words[0];
    ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
    p_std::string buf = &buf;
    if (v17 < 0) {
      p_std::string buf = (std::string *)v18;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v20 = &__p;
    }
    else {
      char v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string v61 = 136315394;
    *(void *)&v61[4] = p_buf;
    __int16 v62 = 2080;
    uint64_t v63 = v20;
    _os_log_debug_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEBUG, "#D %s; %s", v61, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v11 = *(void *)(a1 + 152);
  if (!v11) {
    goto LABEL_16;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = buf;
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_17;
    }
  }
  else
  {
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
    }
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_2637230A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object)
{
  xpc_release(*(xpc_object_t *)(v28 - 128));
  _Unwind_Resume(a1);
}

void BootModule::submitBBResetMetric_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x263E6A240](*a2);
  uint64_t v5 = MEMORY[0x263EF8708];
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x263EF8708])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "No input is given", buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of baseband reset", buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v7) == v5)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v9 = xpc_BOOL_create(*(unsigned char *)(a1 + 288));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F25E40], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F268A8], v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F268B0], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    xpc_object_t v15 = *(const char **)v15;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F268E8], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  std::string::size_type v18 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    std::string::size_type v18 = *(const char **)v18;
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F268F0], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v21 = *(const char **)v21;
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F268A0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F25DE8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_string_create((const char *)*MEMORY[0x263F26898]);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F25E20], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  xpc_object_t v28 = xpc_int64_create(524310);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F25ED0], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  xpc_object_t v30 = *a2;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F25E18], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  std::string::size_type v32 = (const void *)*MEMORY[0x263F261A0];
  size_t v33 = strlen((const char *)*MEMORY[0x263F261A0]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v34 = v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    uint64_t v35 = operator new(v36 + 1);
    size_t v41 = v34;
    unint64_t v42 = v37 | 0x8000000000000000;
    *(void *)std::string buf = v35;
LABEL_47:
    memmove(v35, v32, v34);
    *((unsigned char *)v35 + v34) = 0;
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_43;
    }
LABEL_48:
    xpc_object_t object = xpc_null_create();
    goto LABEL_49;
  }
  HIBYTE(v42) = v33;
  uint64_t v35 = buf;
  if (v33) {
    goto LABEL_47;
  }
  buf[0] = 0;
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_48;
  }
LABEL_43:
  xpc_retain(v8);
LABEL_49:
  uint64_t v38 = 0;
  Service::runCommand(a1, (uint64_t)buf, &object, &v38);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v42) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v8);
}

void sub_263723778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::updateAnalyticsEvent_sync(uint64_t a1, xpc_object_t *a2)
{
  v214[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = MEMORY[0x263E6A240](*a2);
  uint64_t v5 = MEMORY[0x263EF8708];
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x263EF8708])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of baseband reset", (uint8_t *)&buf, 2u);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v7) == v5)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v9) == v5)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v11 = xpc_BOOL_create(*(unsigned char *)(a1 + 288));
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "inVoiceCall", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "rat", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "rat2", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0) {
    xpc_object_t v17 = *(const char **)v17;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "PLMN", v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    xpc_object_t v20 = *(const char **)v20;
  }
  xpc_object_t v21 = xpc_string_create(v20);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "PLMN2", v21);
  xpc_object_t v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  uint64_t v23 = *(void *)(a1 + 328);
  if (v23)
  {
    xpc_object_t v24 = xpc_uint64_create(v23);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "cellId", v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
  }
  uint64_t v26 = *(void *)(a1 + 376);
  if (v26)
  {
    xpc_object_t v27 = xpc_uint64_create(v26);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "cellId2", v27);
    xpc_object_t v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
  }
  uint64_t v29 = *(void *)(a1 + 336);
  if (v29)
  {
    xpc_object_t v30 = xpc_uint64_create(v29);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "tac", v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  uint64_t v32 = *(void *)(a1 + 384);
  if (v32)
  {
    xpc_object_t v33 = xpc_uint64_create(v32);
    if (!v33) {
      xpc_object_t v33 = xpc_null_create();
    }
    xpc_dictionary_set_value(v10, "tac2", v33);
    xpc_object_t v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
  }
  uint64_t v35 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v35 = *(const char **)v35;
  }
  xpc_object_t v36 = xpc_string_create(v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "sku", v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  xpc_object_t v38 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "operatingMode", v38);
  xpc_object_t v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F262A0]);
  *(void *)&long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  int v41 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  int is_transcription_pending = util::apfs::is_transcription_pending(v42);
  xpc_object_t v44 = xpc_BOOL_create(v41 & ~(_BYTE)is_transcription_pending);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "isMTBF", v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t v46 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26368]);
  *(void *)&long long buf = v46;
  if (v46) {
    xpc_retain(v46);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default(__s1, (xpc *)&buf, (const object *)*MEMORY[0x263F26718], v47);
  xpc_release((xpc_object_t)buf);
  if (is_transcription_pending)
  {
    unsigned int v48 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_26368A000, v48, OS_LOG_TYPE_DEFAULT, "#I APFS transcription is pending", (uint8_t *)&buf, 2u);
    }
    if (v41)
    {
      std::string v49 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_26368A000, v49, OS_LOG_TYPE_DEFAULT, "#I Downgrading Baseband Reset MTBF metric because APFS transcription is pending", (uint8_t *)&buf, 2u);
      }
    }
  }
  if (__s1[2] >= 0) {
    uint64_t v50 = (const char *)__s1;
  }
  else {
    uint64_t v50 = (const char *)__s1[0];
  }
  xpc_object_t v51 = xpc_string_create(v50);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "resetType", v51);
  xpc_object_t v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  size_t v53 = strlen((const char *)*MEMORY[0x263F267A0]);
  unint64_t v54 = v53;
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v53 != -1)
    {
      unint64_t v55 = HIBYTE(__s1[2]);
      long long v56 = __s1;
      goto LABEL_78;
    }
LABEL_302:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v53 == -1) {
    goto LABEL_302;
  }
  long long v56 = (uint64_t *)__s1[0];
  unint64_t v55 = __s1[1];
LABEL_78:
  if (v55 >= v54) {
    size_t v57 = v54;
  }
  else {
    size_t v57 = v55;
  }
  if (!memcmp(v56, (const void *)*MEMORY[0x263F267A0], v57) && v55 == v54)
  {
    xpc_object_t v58 = xpc_string_create((const char *)*MEMORY[0x263F26020]);
    if (!v58) {
      xpc_object_t v58 = xpc_null_create();
    }
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F26078], v58);
    xpc_object_t v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    goto LABEL_266;
  }
  memset(&__dst, 170, sizeof(__dst));
  xpc_object_t v60 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F262A8]);
  *(void *)&long long buf = v60;
  if (v60) {
    xpc_retain(v60);
  }
  else {
    *(void *)&long long buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&__dst, (xpc *)&buf, (const object *)"no-reset-reason", v61);
  xpc_release((xpc_object_t)buf);
  memset(&__str, 170, sizeof(__str));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __dst;
  }
  __int16 v62 = (const void *)*MEMORY[0x263F267D8];
  size_t v63 = strlen((const char *)*MEMORY[0x263F267D8]);
  size_t v64 = v63;
  if (SHIBYTE(__s1[2]) < 0)
  {
    if (v63 != -1)
    {
      uint64_t v65 = __s1[1];
      if (__s1[1] >= v63) {
        size_t v68 = v63;
      }
      else {
        size_t v68 = __s1[1];
      }
      std::string v67 = (capabilities::radio *)memcmp((const void *)__s1[0], v62, v68);
      if (v67) {
        goto LABEL_252;
      }
      goto LABEL_104;
    }
LABEL_304:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v63 == -1) {
    goto LABEL_304;
  }
  uint64_t v65 = HIBYTE(__s1[2]);
  if (HIBYTE(__s1[2]) >= v63) {
    size_t v66 = v63;
  }
  else {
    size_t v66 = HIBYTE(__s1[2]);
  }
  std::string v67 = (capabilities::radio *)memcmp(__s1, v62, v66);
  if (v67) {
    goto LABEL_252;
  }
LABEL_104:
  if (v65 == v64)
  {
    std::string v69 = (capabilities::radio *)capabilities::radio::maverick(v67);
    if (v69)
    {
      *(void *)&long long v70 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v200 = v70;
      long long v201 = v70;
      long long v198 = v70;
      long long v199 = v70;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v198, "(ATCS_TIMEOUT on message for svc=[0-9]*)(client=[0-9]*).*(txid=[0-9]*)(msgid=0x[a-zA-Z0-9]*)\\)(.*)", 0);
      *(void *)&long long v71 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v193 = 0xAAAAAAAAAAAAAA00;
      v190[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
      long long v196 = v71;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LOBYTE(v196) = 0;
      BYTE8(v196) = 0;
      uint64_t v197 = 0;
      memset(v190, 0, 41);
      unint64_t v209 = 0xAAAAAAAAAAAAAA00;
      *((void *)&v206[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v212 = v71;
      uint64_t v207 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      LOBYTE(v212) = 0;
      BYTE8(v212) = 0;
      uint64_t v213 = 0;
      long long buf = 0u;
      v206[0] = 0u;
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = (std::sub_match<const char *> *)&__dst;
      }
      else {
        p_dst = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      *(_OWORD *)((char *)v206 + 9) = 0uLL;
      int v74 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v198, p_dst, (std::sub_match<const char *> *)((char *)p_dst + size), (std::vector<std::csub_match> *)&buf, 0);
      std::string::size_type v75 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __darwin_time_t v76 = &__dst;
      }
      else {
        __darwin_time_t v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v75 = __dst.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v190, (uint64_t)v76, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v76 + v75), (uint64_t *)&buf, 0);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (!v74) {
        goto LABEL_246;
      }
      std::vector<std::ssub_match>::pointer begin = v190[0].__begin_;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
      if (v78 <= 1) {
        std::vector<std::ssub_match>::pointer v79 = (std::vector<std::ssub_match>::pointer)v190;
      }
      else {
        std::vector<std::ssub_match>::pointer v79 = v190[0].__begin_;
      }
      if (!v79[1].matched)
      {
        memset(&v189, 0, sizeof(v189));
        goto LABEL_161;
      }
      std::__wrap_iter<const char *>::iterator_type i = v79[1].first.__i_;
      std::__wrap_iter<const char *>::iterator_type v81 = v79[1].second.__i_;
      unint64_t v82 = v81 - i;
      if ((unint64_t)(v81 - i) > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v82 > 0x16)
      {
        uint64_t v92 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17) {
          uint64_t v92 = v82 | 7;
        }
        uint64_t v93 = v92 + 1;
        v83 = (char *)operator new(v92 + 1);
        v189.__r_.__value_.__l.__size_ = v81 - i;
        v189.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
        v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      }
      else
      {
        *((unsigned char *)&v189.__r_.__value_.__s + 23) = (_BYTE)v81 - (_BYTE)i;
        v83 = (char *)&v189;
      }
      if (i == v81)
      {
        v94 = v83;
      }
      else
      {
        if (v82 < 0x20 || (unint64_t)(v83 - i) < 0x20)
        {
          v94 = v83;
          size_t v95 = i;
        }
        else
        {
          v94 = &v83[v82 & 0xFFFFFFFFFFFFFFE0];
          size_t v95 = &i[v82 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v96 = (long long *)(i + 16);
          uint64_t v97 = v83 + 16;
          unint64_t v98 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v99 = *v96;
            *(v97 - 1) = *(v96 - 1);
            *uint64_t v97 = v99;
            v96 += 2;
            v97 += 2;
            v98 -= 32;
          }
          while (v98);
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_160;
          }
        }
        do
        {
          char v100 = *v95++;
          *v94++ = v100;
        }
        while (v95 != v81);
      }
LABEL_160:
      char *v94 = 0;
      std::vector<std::ssub_match>::pointer begin = v190[0].__begin_;
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
LABEL_161:
      p_matched = (std::__compressed_pair<std::ssub_match *> *)&begin[4].matched;
      if (v78 <= 4) {
        p_matched = &v190[1].__end_cap_;
      }
      unsigned int value_low = LOBYTE(p_matched->__value_);
      if (!value_low)
      {
        std::string::size_type v110 = 0;
        v111 = 0;
        uint64_t v186 = 0;
        unint64_t v187 = 0;
        unint64_t v188 = 0;
        goto LABEL_187;
      }
      BOOL v103 = v78 > 4;
      if (v78 <= 4) {
        v104 = &v190[1];
      }
      else {
        v104 = (std::vector<std::ssub_match> *)&begin[4];
      }
      std::vector<std::ssub_match>::pointer v105 = v104->__begin_;
      p_second = (std::vector<std::ssub_match>::pointer *)&begin[4].second;
      if (!v103) {
        p_second = &v190[1].__end_;
      }
      std::vector<std::ssub_match>::pointer v107 = *p_second;
      unint64_t v108 = (char *)*p_second - (char *)v105;
      if (v108 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v108 > 0x16)
      {
        uint64_t v112 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v108 | 7) != 0x17) {
          uint64_t v112 = v108 | 7;
        }
        uint64_t v113 = v112 + 1;
        v109 = operator new(v112 + 1);
        unint64_t v187 = v108;
        unint64_t v188 = v113 | 0x8000000000000000;
        uint64_t v186 = v109;
      }
      else
      {
        HIBYTE(v188) = *(unsigned char *)p_second - (_BYTE)v105;
        v109 = &v186;
      }
      if (v105 == v107)
      {
        v114 = v109;
      }
      else
      {
        if (v108 < 0x20 || (unint64_t)((char *)v109 - (char *)v105) < 0x20)
        {
          v114 = v109;
          int v115 = (char *)v105;
        }
        else
        {
          v114 = (char *)v109 + (v108 & 0xFFFFFFFFFFFFFFE0);
          int v115 = (char *)v105 + (v108 & 0xFFFFFFFFFFFFFFE0);
          v116 = &v105->matched;
          v117 = v109 + 1;
          unint64_t v118 = v108 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v119 = *(_OWORD *)v116;
            *(v117 - 1) = *((_OWORD *)v116 - 1);
            _OWORD *v117 = v119;
            v116 += 32;
            v117 += 2;
            v118 -= 32;
          }
          while (v118);
          if (v108 == (v108 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_186;
          }
        }
        do
        {
          char v120 = *v115++;
          *v114++ = v120;
        }
        while (v115 != (char *)v107);
      }
LABEL_186:
      unsigned char *v114 = 0;
      unsigned int value_low = HIBYTE(v188);
      v111 = (void **)v186;
      std::string::size_type v110 = v187;
LABEL_187:
      if ((value_low & 0x80u) == 0) {
        uint64_t v121 = &v186;
      }
      else {
        uint64_t v121 = v111;
      }
      if ((value_low & 0x80u) == 0) {
        std::string::size_type v122 = value_low;
      }
      else {
        std::string::size_type v122 = v110;
      }
      uint64_t v123 = std::string::append(&v189, (const std::string::value_type *)v121, v122);
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      *(void *)&v206[0] = *((void *)&v123->__r_.__value_.__l + 2);
      long long buf = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3);
      p_end_cap = (std::__compressed_pair<std::ssub_match *> *)&v190[0].__begin_[5].matched;
      if (v125 <= 5) {
        p_end_cap = &v190[1].__end_cap_;
      }
      unsigned int v127 = LOBYTE(p_end_cap->__value_);
      if (!v127)
      {
        std::string::size_type v135 = 0;
        __int16 v136 = 0;
        std::string __p = 0;
        unint64_t v184 = 0;
        unint64_t v185 = 0;
        goto LABEL_219;
      }
      BOOL v128 = v125 > 5;
      if (v125 <= 5) {
        std::vector<std::ssub_match>::pointer v129 = (std::vector<std::ssub_match>::pointer)&v190[1];
      }
      else {
        std::vector<std::ssub_match>::pointer v129 = v190[0].__begin_ + 5;
      }
      std::__wrap_iter<const char *>::iterator_type v130 = v129->first.__i_;
      p_end = (std::vector<std::ssub_match>::pointer *)&v190[0].__begin_[5].second;
      if (!v128) {
        p_end = &v190[1].__end_;
      }
      std::vector<std::ssub_match>::pointer v132 = *p_end;
      unint64_t v133 = (char *)*p_end - v130;
      if (v133 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v133 > 0x16)
      {
        uint64_t v137 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v133 | 7) != 0x17) {
          uint64_t v137 = v133 | 7;
        }
        uint64_t v138 = v137 + 1;
        p_p = operator new(v137 + 1);
        unint64_t v184 = v133;
        unint64_t v185 = v138 | 0x8000000000000000;
        std::string __p = p_p;
      }
      else
      {
        HIBYTE(v185) = *(unsigned char *)p_end - (_BYTE)v130;
        p_p = &__p;
      }
      if (v130 == (std::__wrap_iter<const char *>::iterator_type)v132)
      {
        long long v139 = p_p;
      }
      else
      {
        if (v133 < 0x20 || (unint64_t)((char *)p_p - v130) < 0x20)
        {
          long long v139 = p_p;
          int v140 = v130;
        }
        else
        {
          long long v139 = (char *)p_p + (v133 & 0xFFFFFFFFFFFFFFE0);
          int v140 = &v130[v133 & 0xFFFFFFFFFFFFFFE0];
          uint64_t v141 = (long long *)(v130 + 16);
          unint64_t v142 = p_p + 1;
          unint64_t v143 = v133 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v144 = *v141;
            *(v142 - 1) = *(v141 - 1);
            *unint64_t v142 = v144;
            v141 += 2;
            v142 += 2;
            v143 -= 32;
          }
          while (v143);
          if (v133 == (v133 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_218;
          }
        }
        do
        {
          char v145 = *v140++;
          *v139++ = v145;
        }
        while (v140 != (unsigned char *)v132);
      }
LABEL_218:
      *long long v139 = 0;
      unsigned int v127 = HIBYTE(v185);
      __int16 v136 = (void **)__p;
      std::string::size_type v135 = v184;
LABEL_219:
      if ((v127 & 0x80u) == 0) {
        uint64_t v146 = &__p;
      }
      else {
        uint64_t v146 = v136;
      }
      if ((v127 & 0x80u) == 0) {
        std::string::size_type v147 = v127;
      }
      else {
        std::string::size_type v147 = v135;
      }
      unint64_t v148 = std::string::append((std::string *)&buf, (const std::string::value_type *)v146, v147);
      std::string::size_type v149 = v148->__r_.__value_.__r.__words[0];
      v214[0] = v148->__r_.__value_.__l.__size_;
      *(void *)((char *)v214 + 7) = *(std::string::size_type *)((char *)&v148->__r_.__value_.__r.__words[1] + 7);
      char v150 = HIBYTE(v148->__r_.__value_.__r.__words[2]);
      v148->__r_.__value_.__l.__size_ = 0;
      v148->__r_.__value_.__r.__words[2] = 0;
      v148->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v149;
      __str.__r_.__value_.__l.__size_ = v214[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v214 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v150;
      if (SHIBYTE(v185) < 0)
      {
        operator delete(__p);
        if ((SBYTE7(v206[0]) & 0x80000000) == 0)
        {
LABEL_229:
          if ((SHIBYTE(v188) & 0x80000000) == 0) {
            goto LABEL_230;
          }
          goto LABEL_236;
        }
      }
      else if ((SBYTE7(v206[0]) & 0x80000000) == 0)
      {
        goto LABEL_229;
      }
      operator delete((void *)buf);
      if ((SHIBYTE(v188) & 0x80000000) == 0)
      {
LABEL_230:
        if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_231;
        }
        goto LABEL_237;
      }
LABEL_236:
      operator delete(v186);
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_231:
        size_t v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_232;
        }
        goto LABEL_238;
      }
LABEL_237:
      operator delete(v189.__r_.__value_.__l.__data_);
      size_t v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_232:
        if ((v151 & 0x80) != 0) {
          std::string::__assign_no_alias<true>(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = __str;
        }
LABEL_246:
        if (v190[0].__begin_)
        {
          v190[0].__end_ = v190[0].__begin_;
          operator delete(v190[0].__begin_);
        }
        v154 = (std::__shared_weak_count *)v201;
        if ((void)v201 && !atomic_fetch_add((atomic_ullong *volatile)(v201 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
        std::locale::~locale((std::locale *)&v198);
        goto LABEL_252;
      }
LABEL_238:
      if ((v151 & 0x80u) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v151 & 0x80u) == 0) {
        size_t v153 = v151;
      }
      else {
        size_t v153 = __str.__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, p_str, v153);
      goto LABEL_246;
    }
    if (capabilities::radio::ice(v69))
    {
      *(void *)&long long v84 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v200 = v84;
      long long v201 = v84;
      long long v198 = v84;
      long long v199 = v84;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v198, "(.*ARI_TIMEOUT -.*)( SZ\\([0-9]*\\).*)", 0);
      *(void *)&long long v85 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v193 = 0xAAAAAAAAAAAAAA00;
      v190[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
      long long v196 = v85;
      uint64_t v191 = 0;
      uint64_t v192 = 0;
      uint64_t v194 = 0;
      uint64_t v195 = 0;
      LOBYTE(v196) = 0;
      BYTE8(v196) = 0;
      uint64_t v197 = 0;
      memset(v190, 0, 41);
      unint64_t v209 = 0xAAAAAAAAAAAAAA00;
      *((void *)&v206[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v212 = v85;
      uint64_t v207 = 0;
      uint64_t v208 = 0;
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      LOBYTE(v212) = 0;
      BYTE8(v212) = 0;
      uint64_t v213 = 0;
      long long buf = 0u;
      v206[0] = 0u;
      std::string::size_type v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v87 = (std::sub_match<const char *> *)&__dst;
      }
      else {
        v87 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v86 = __dst.__r_.__value_.__l.__size_;
      }
      *(_OWORD *)((char *)v206 + 9) = 0uLL;
      int v88 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v198, v87, (std::sub_match<const char *> *)((char *)v87 + v86), (std::vector<std::csub_match> *)&buf, 0);
      std::string::size_type v89 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v90 = &__dst;
      }
      else {
        unint64_t v90 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v89 = __dst.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v190, (uint64_t)v90, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v90 + v89), (uint64_t *)&buf, 0);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (v88)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v190[0].__end_ - (char *)v190[0].__begin_) >> 3) <= 1) {
          uint64_t v91 = (uint64_t *)&v190[1];
        }
        else {
          uint64_t v91 = (uint64_t *)&v190[0].__begin_[1];
        }
        std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](&buf, v91);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = buf;
        __str.__r_.__value_.__r.__words[2] = *(void *)&v206[0];
        std::string::operator=(&__dst, &__str);
      }
      goto LABEL_246;
    }
  }
LABEL_252:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v155 = &__dst;
  }
  else {
    v155 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v156 = xpc_string_create((const char *)v155);
  if (!v156) {
    xpc_object_t v156 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "resetReason", v156);
  xpc_object_t v157 = xpc_null_create();
  xpc_release(v156);
  xpc_release(v157);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v158 = &__str;
  }
  else {
    v158 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v159 = xpc_string_create((const char *)v158);
  if (!v159) {
    xpc_object_t v159 = xpc_null_create();
  }
  xpc_dictionary_set_value(v10, "shortResetReason", v159);
  xpc_object_t v160 = xpc_null_create();
  xpc_release(v159);
  xpc_release(v160);
  xpc_object_t v161 = xpc_string_create((const char *)*MEMORY[0x263F26028]);
  if (!v161) {
    xpc_object_t v161 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F26078], v161);
  xpc_object_t v162 = xpc_null_create();
  xpc_release(v161);
  xpc_release(v162);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_266;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_266;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_266:
  xpc_object_t v163 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v163) {
    xpc_object_t v163 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F25FA8], v163);
  xpc_object_t v164 = xpc_null_create();
  xpc_release(v163);
  xpc_release(v164);
  xpc_object_t v165 = xpc_string_create("Reset");
  if (!v165) {
    xpc_object_t v165 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F26080], v165);
  xpc_object_t v166 = xpc_null_create();
  xpc_release(v165);
  xpc_release(v166);
  if (v10)
  {
    xpc_retain(v10);
    xpc_object_t v167 = v10;
  }
  else
  {
    xpc_object_t v167 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x263F26420], v167);
  xpc_object_t v168 = xpc_null_create();
  xpc_release(v167);
  xpc_release(v168);
  xpc_object_t v169 = xpc_dictionary_create(0, 0, 0);
  if (v169 || (xpc_object_t v169 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v169) == v5)
    {
      xpc_retain(v169);
      xpc_object_t v170 = v169;
    }
    else
    {
      xpc_object_t v170 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v170 = xpc_null_create();
    xpc_object_t v169 = 0;
  }
  xpc_release(v169);
  xpc_object_t v171 = xpc_string_create((const char *)*MEMORY[0x263F25DF0]);
  if (!v171) {
    xpc_object_t v171 = xpc_null_create();
  }
  xpc_dictionary_set_value(v170, (const char *)*MEMORY[0x263F25E20], v171);
  xpc_object_t v172 = xpc_null_create();
  xpc_release(v171);
  xpc_release(v172);
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v173 = v8;
  }
  else
  {
    xpc_object_t v173 = xpc_null_create();
  }
  xpc_dictionary_set_value(v170, (const char *)*MEMORY[0x263F25E18], v173);
  xpc_object_t v174 = xpc_null_create();
  xpc_release(v173);
  xpc_release(v174);
  unsigned __int8 v175 = (const void *)*MEMORY[0x263F261A0];
  size_t v176 = strlen((const char *)*MEMORY[0x263F261A0]);
  if (v176 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v177 = v176;
  if (v176 >= 0x17)
  {
    uint64_t v179 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17) {
      uint64_t v179 = v176 | 7;
    }
    uint64_t v180 = v179 + 1;
    p_long long buf = (long long *)operator new(v179 + 1);
    *((void *)&buf + 1) = v177;
    *(void *)&v206[0] = v180 | 0x8000000000000000;
    *(void *)&long long buf = p_buf;
LABEL_294:
    memmove(p_buf, v175, v177);
    *((unsigned char *)p_buf + v177) = 0;
    xpc_object_t object = v170;
    if (v170) {
      goto LABEL_290;
    }
LABEL_295:
    xpc_object_t object = xpc_null_create();
    goto LABEL_296;
  }
  BYTE7(v206[0]) = v176;
  p_long long buf = &buf;
  if (v176) {
    goto LABEL_294;
  }
  LOBYTE(buf) = 0;
  xpc_object_t object = v170;
  if (!v170) {
    goto LABEL_295;
  }
LABEL_290:
  xpc_retain(v170);
LABEL_296:
  v181 = 0;
  Service::runCommand(a1, (uint64_t)&buf, &object, &v181);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SBYTE7(v206[0]) < 0) {
    operator delete((void *)buf);
  }
  xpc_release(v170);
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
  xpc_release(v10);
  xpc_release(v8);
}

void sub_263724D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  xpc_release(v64);
  xpc_release(v63);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsHardResetTime_sync(BootModule *this)
{
  long long v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of hard reset time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v3) == MEMORY[0x263EF8708])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = time(0);
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x263F266B0], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  int64_t v8 = (*((_DWORD *)this + 112) + 1);
  *((_DWORD *)this + 112) = v8;
  xpc_object_t v9 = xpc_int64_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x263F26540], v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t object = v4;
  *(void *)long long buf = operator new(0x20uLL);
  long long v14 = xmmword_2637A67A0;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v11 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v11);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v14) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_2637253A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsSoftReset_sync(BootModule *this)
{
  long long v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of soft reset time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v3) == MEMORY[0x263EF8708])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = (*((_DWORD *)this + 113) + 1);
  *((_DWORD *)this + 113) = v5;
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x263F26548], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  *(void *)long long buf = operator new(0x20uLL);
  long long v11 = xmmword_2637A67A0;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int64_t v8 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v8);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_2637255DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t _ZZZZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEUb_EUb0_EN3__0D1Ev(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 144);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 136);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_15:
    operator delete(*(void **)(a1 + 24));
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return a1;
    }
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_15;
  }
LABEL_9:
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
LABEL_10:
  }
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1, void *a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 5));
  uint64_t result = (void *)a2[19];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[20];
  uint64_t v5 = a2[21];
  *(void *)(a1 + 152) = result;
  *(void *)(a1 + 160) = v6;
  *(void *)(a1 + 168) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 152);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_12:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_12;
  }
LABEL_8:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  xpc_object_t v4 = *(void **)(a1 + 40);

  operator delete(v4);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  ResetInfo::ResetInfo((std::string *)(a1 + 56), (const ResetInfo *)(a2 + 7));
  uint64_t result = (void *)a2[21];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 168) = result;
  return result;
}

void sub_263725854(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE56c15_ZTSK9ResetInfo168c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  long long v2 = *(const void **)(a1 + 168);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 103) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 104));
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 56));
    xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_14;
  }
LABEL_7:
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
LABEL_8:

  std::__shared_weak_count::__release_weak(v3);
}

void ___ZN10BootModule4initEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  xpc_object_t v3 = *(NSObject **)(v2 + 88);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  if (capabilities::ipc::supportsPCI((capabilities::ipc *)v4))
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule4initEv_block_invoke_9;
    aBlock[3] = &__block_descriptor_tmp_15_0;
    uint64_t v6 = a1[5];
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    aBlock[4] = v2;
    void aBlock[5] = v6;
    xpc_object_t v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v7 = _Block_copy(aBlock);
    int64_t v8 = *(const void **)(v2 + 264);
    *(void *)(v2 + 264) = v7;
    if (v8) {
      _Block_release(v8);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void ___ZN10BootModule4initEv_block_invoke_9(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    uint64_t v9 = a1[4];
    xpc_object_t v10 = std::__shared_weak_count::lock(v5);
    xpc_object_t v18 = v10;
    if (v10)
    {
      long long v11 = v10;
      if (!a1[5]) {
        goto LABEL_12;
      }
      memset(&v16, 170, sizeof(v16));
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v16 = *(std::string *)a3;
      }
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 1174405120;
      v12[2] = ___ZN10BootModule4initEv_block_invoke_2;
      v12[3] = &__block_descriptor_tmp_13_3;
      void v12[4] = v9;
      int v14 = a2;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v16;
      }
      int v15 = a4;
      ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v9 + 120), (uint64_t)v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_12:
          if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return;
          }
LABEL_16:
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          return;
        }
      }
      else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v16.__r_.__value_.__l.__data_);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_16;
      }
    }
  }
}

void sub_263725BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24 - 64);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 64))
  {
    int v5 = *(char *)(a1 + 63);
    if (v5 >= 0) {
      size_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    else {
      size_t v6 = *(void *)(a1 + 48);
    }
    unint64_t v7 = v6 + 11;
    memset(&v49, 170, sizeof(v49));
    if (v6 + 11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (void **)(a1 + 40);
    if (v7 > 0x16)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      xpc_object_t v12 = (char *)operator new(v10 + 1);
      v49.__r_.__value_.__l.__size_ = v6 + 11;
      v49.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      xpc_object_t v13 = v12 + 11;
      *(_DWORD *)(v12 + 7) = 540693582;
      *(void *)xpc_object_t v12 = *(void *)"PCI-EVENT: ";
      if (v5 >= 0) {
        int v14 = (void *)(a1 + 40);
      }
      else {
        int v14 = *v8;
      }
      memmove(v12 + 11, v14, v6);
      v13[v6] = 0;
      if (v6 == 27)
      {
        BOOL v15 = *v14 == 0x67676972742D5041 && v14[1] == 0x7361622064657265;
        BOOL v16 = v15 && v14[2] == 0x657220646E616265;
        if (v16 && *(void *)((char *)v14 + 19) == 0x746573657220646ELL) {
          std::string::append(&v49, " [likely caused by bbctl reset]", 0x1FuLL);
        }
      }
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
      *((unsigned char *)&v49.__r_.__value_.__s + 23) = v6 + 11;
      *(_DWORD *)((char *)v49.__r_.__value_.__r.__words + 7) = 540693582;
      v49.__r_.__value_.__r.__words[0] = *(void *)"PCI-EVENT: ";
      if (v6)
      {
        if (v5 >= 0) {
          uint64_t v9 = (void *)(a1 + 40);
        }
        else {
          uint64_t v9 = *v8;
        }
        memmove((char *)&v49.__r_.__value_.__r.__words[1] + 3, v9, v6);
      }
      *((unsigned char *)&v49.__r_.__value_.__r.__words[1] + v6 + 3) = 0;
    }
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v56 = v18;
    long long v57 = v18;
    long long v54 = v18;
    long long v55 = v18;
    long long v52 = v18;
    long long v53 = v18;
    *(_OWORD *)long long buf = v18;
    xpc_object_t v19 = (const void *)*MEMORY[0x263F26178];
    size_t v20 = strlen((const char *)*MEMORY[0x263F26178]);
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v20;
    if (v20 >= 0x17)
    {
      uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v23 = v20 | 7;
      }
      uint64_t v24 = v23 + 1;
      xpc_object_t v22 = operator new(v23 + 1);
      *(void *)&__dst[8] = v21;
      *(void *)&__dst[16] = v24 | 0x8000000000000000;
      *(void *)std::string __dst = v22;
    }
    else
    {
      __dst[23] = v20;
      xpc_object_t v22 = __dst;
      if (!v20)
      {
LABEL_43:
        v22[v21] = 0;
        xpc_object_t v25 = (const void *)*MEMORY[0x263F267D8];
        size_t v26 = strlen((const char *)*MEMORY[0x263F267D8]);
        if (v26 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v27 = v26;
        if (v26 >= 0x17)
        {
          uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17) {
            uint64_t v29 = v26 | 7;
          }
          uint64_t v30 = v29 + 1;
          xpc_object_t v28 = operator new(v29 + 1);
          *((void *)&v47 + 1) = v27;
          unint64_t v48 = v30 | 0x8000000000000000;
          *(void *)&long long v47 = v28;
        }
        else
        {
          HIBYTE(v48) = v26;
          xpc_object_t v28 = &v47;
          if (!v26)
          {
LABEL_51:
            v28[v27] = 0;
            Timestamp::Timestamp((Timestamp *)v43);
            Timestamp::asString((uint64_t)v43, 0, 9, __p);
            char v42 = 0;
            LOBYTE(v41) = 0;
            ResetInfo::ResetInfo((std::string *)buf, (long long *)__dst, &v47, (long long *)&v49, (uint64_t)__p, 7, &v41);
            if (v46 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_53:
                if ((__dst[23] & 0x80000000) == 0) {
                  goto LABEL_54;
                }
                goto LABEL_58;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0) {
                goto LABEL_53;
              }
            }
            operator delete((void *)v47);
            if ((__dst[23] & 0x80000000) == 0)
            {
LABEL_54:
              xpc_object_t v31 = v2[11];
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                goto LABEL_59;
              }
LABEL_78:
              if (*(char *)(a1 + 63) < 0) {
                int64_t v8 = (void **)*v8;
              }
              int v32 = *(_DWORD *)(a1 + 68);
              *(_DWORD *)std::string __dst = 136315394;
              *(void *)&__dst[4] = v8;
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = v32;
              _os_log_error_impl(&dword_26368A000, v31, OS_LOG_TYPE_ERROR, "PCI event: %s, sleeping for %u ms, then requesting Baseband reset", __dst, 0x12u);
LABEL_59:
              usleep(1000 * *(_DWORD *)(a1 + 68));
              ResetInfo::ResetInfo(&v34, (const ResetInfo *)buf);
              xpc_object_t v33 = 0;
              BootModule::requestReset(v2, (const ResetInfo *)&v34, &v33);
              if (v40 < 0)
              {
                operator delete(v39);
                if ((v38 & 0x80000000) == 0)
                {
LABEL_61:
                  if ((v36 & 0x80000000) == 0) {
                    goto LABEL_62;
                  }
                  goto LABEL_71;
                }
              }
              else if ((v38 & 0x80000000) == 0)
              {
                goto LABEL_61;
              }
              operator delete(v37);
              if ((v36 & 0x80000000) == 0)
              {
LABEL_62:
                if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_63;
                }
                goto LABEL_72;
              }
LABEL_71:
              operator delete(v35);
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_63:
                if ((SHIBYTE(v57) & 0x80000000) == 0) {
                  goto LABEL_64;
                }
                goto LABEL_73;
              }
LABEL_72:
              operator delete(v34.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
              {
LABEL_64:
                if ((SBYTE7(v55) & 0x80000000) == 0) {
                  goto LABEL_65;
                }
                goto LABEL_74;
              }
LABEL_73:
              operator delete(*((void **)&v56 + 1));
              if ((SBYTE7(v55) & 0x80000000) == 0)
              {
LABEL_65:
                if ((SHIBYTE(v53) & 0x80000000) == 0) {
                  goto LABEL_66;
                }
                goto LABEL_75;
              }
LABEL_74:
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_66:
                if ((SBYTE7(v52) & 0x80000000) == 0) {
                  goto LABEL_67;
                }
                goto LABEL_76;
              }
LABEL_75:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v52) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  return;
                }
                goto LABEL_77;
              }
LABEL_76:
              operator delete(*(void **)buf);
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                return;
              }
LABEL_77:
              operator delete(v49.__r_.__value_.__l.__data_);
              return;
            }
LABEL_58:
            operator delete(*(void **)__dst);
            xpc_object_t v31 = v2[11];
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_59;
            }
            goto LABEL_78;
          }
        }
        memmove(v28, v25, v27);
        goto LABEL_51;
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_43;
  }
  xpc_object_t v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I PCI event: %s", buf, 0xCu);
  }
}

void sub_2637261EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if ((a47 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

char *BootModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)uint64_t result = 256;
  result[2] = 3;
  *a1 = result;
  return result;
}

void BootModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  if (a2 == 3)
  {
    size_t v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1174405120;
    void v10[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_32;
    v10[3] = &__block_descriptor_tmp_37_1;
    unint64_t v7 = *a3;
    void v10[4] = a1;
    dispatch_group_t group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(group);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      int v5 = group;
      if (group) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (a2) {
        return;
      }
      long long v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      void v14[3] = &__block_descriptor_tmp_20_1;
      BOOL v4 = *a3;
      void v14[4] = a1;
      dispatch_group_t v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v15);
      }
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15) {
        return;
      }
      dispatch_group_leave(v15);
      int v5 = v15;
      if (!v15) {
        return;
      }
LABEL_18:
      dispatch_release(v5);
      return;
    }
    int64_t v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 1174405120;
    v12[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_21;
    v12[3] = &__block_descriptor_tmp_31_1;
    uint64_t v9 = *a3;
    void v12[4] = a1;
    dispatch_group_t object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(object);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      int v5 = object;
      if (object) {
        goto LABEL_18;
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown prepare", (uint8_t *)&buf, 2u);
  }
  unsigned int v4 = *(_DWORD *)(v2 + 456);
  if (v4 <= 8)
  {
    int v5 = 1 << v4;
    if ((v5 & 0x1E1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, 8);
      size_t v6 = *(NSObject **)(v2 + 216);
      *(void *)(v2 + 216) = 0;
      if (v6)
      {
        dispatch_group_leave(v6);
        dispatch_release(v6);
      }
    }
    else if ((v5 & 0xE) != 0)
    {
      unint64_t v7 = *(NSObject **)(a1 + 40);
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      int64_t v8 = *(NSObject **)(v2 + 216);
      *(void *)(v2 + 216) = v7;
      if (v8)
      {
        dispatch_group_leave(v8);
        dispatch_release(v8);
      }
      uint64_t v9 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_26368A000, v9, OS_LOG_TYPE_DEFAULT, "#I Holding shutdown request session", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 96))(v2, 7);
    }
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v2 + 80))(&v16, v2);
  unint64_t v10 = v16;
  if (v16)
  {
    uint64_t v11 = (char *)operator new(0x38uLL);
    strcpy(v11, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v12 = capabilities::abs::shutdownAssertionTimeoutScalingFactor((capabilities::abs *)v11);
    uint64_t v13 = *(void *)(v10 + 104);
    std::string::__init_copy_ctor_external(&buf, v11, 0x35uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v13 + 24))(&object, v13, &buf, 240000 * v12);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (object) {
      dispatch_release(object);
    }
    operator delete(v11);
  }
  int v14 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_263726834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_21(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown baseband", buf, 2u);
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_22;
  aBlock[3] = &__block_descriptor_tmp_28_1;
  unsigned int v4 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  unint64_t v7 = _Block_copy(aBlock);
  (*(void (**)(void *, void **))(*v2 + 112))(v2, &v7);
  if (v7) {
    _Block_release(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_2637269C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_22(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFMutableDictionaryRef v37 = 0;
  uint64_t v3 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    CFMutableDictionaryRef v37 = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26630], v3, v5);
  size_t v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (!v6 || (v7 = *(void *)(v2 + 120), (int64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (const void *)*MEMORY[0x263F26650];
  size_t v11 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v13 = (void **)operator new(v15 + 1);
    __dst[1] = v12;
    unint64_t v36 = v16 | 0x8000000000000000;
    __dst[0] = v13;
LABEL_15:
    memmove(v13, v10, (size_t)v12);
    *((unsigned char *)v12 + (void)v13) = 0;
    CFMutableDictionaryRef v14 = v37;
    if (!v37) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  HIBYTE(v36) = v11;
  uint64_t v13 = __dst;
  if (v11) {
    goto LABEL_15;
  }
  LOBYTE(__dst[0]) = 0;
  CFMutableDictionaryRef v14 = v37;
  if (!v37) {
    goto LABEL_18;
  }
LABEL_16:
  CFTypeID v17 = CFGetTypeID(v14);
  if (v17 == CFDictionaryGetTypeID())
  {
    CFTypeRef cf = v14;
    CFRetain(v14);
    goto LABEL_19;
  }
LABEL_18:
  CFTypeRef cf = 0;
LABEL_19:
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_24_1;
  long long v18 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  dispatch_group_t group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(group);
  }
  uint64_t v31 = v7;
  int v32 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v33 = _Block_copy(aBlock);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&v33);
  if (v33) {
    _Block_release(v33);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v19 = (const void *)*MEMORY[0x263F261B8];
  size_t v20 = strlen((const char *)*MEMORY[0x263F261B8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    xpc_object_t v22 = operator new(v23 + 1);
    __p[1] = v21;
    unint64_t v28 = v24 | 0x8000000000000000;
    __p[0] = v22;
    goto LABEL_34;
  }
  HIBYTE(v28) = v20;
  xpc_object_t v22 = __p;
  if (v20) {
LABEL_34:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  xpc_object_t v25 = 0;
  CFTypeRef v26 = 0;
  Service::broadcastEvent(v2, (uint64_t)__p, &v26, (const void **)&v25);
  if (v25) {
    _Block_release(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v37) {
    CFRelease(v37);
  }
}

void sub_263726DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,uint64_t a24,std::__shared_weak_count *a25,void *a26,char a27)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
  {
    operator delete(__p);
    uint64_t v30 = a25;
    if (!a25)
    {
LABEL_5:
      uint64_t v31 = group;
      if (!group) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v30 = a25;
    if (!a25) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v30);
  uint64_t v31 = group;
  if (!group) {
    goto LABEL_11;
  }
LABEL_9:
  dispatch_group_leave(v31);
  if (group) {
    dispatch_release(group);
  }
LABEL_11:
  std::__shared_weak_count::__release_weak(v27);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v28 - 88));
  _Unwind_Resume(a1);
}

void sub_263726E98(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_263726EAC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      CFAllocatorRef v5 = v4;
      uint64_t v6 = a1[6];
      if (v6)
      {
        v7[0] = MEMORY[0x263EF8330];
        v7[1] = 0x40000000;
        v7[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3;
        v7[3] = &__block_descriptor_tmp_23;
        v7[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v1 + 80))(&v6);
  unint64_t v2 = v6;
  if (v6)
  {
    uint64_t v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v4 = *(void *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v8, v3, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
  }
  CFAllocatorRef v5 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2637270F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_26372712C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    CFAllocatorRef v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_32(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, void *))(*v1 + 80))(&v17, v1);
  unint64_t v2 = v17;
  if (v17)
  {
    uint64_t v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v4 = *(void *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v19, v3, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    operator delete(v3);
    unint64_t v5 = v17;
    uint64_t v6 = (char *)operator new(0x38uLL);
    strcpy(v6, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    uint64_t v7 = *(void *)(v5 + 104);
    std::string::__init_copy_ctor_external(&v19, v6, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    operator delete(v6);
  }
  uint64_t v8 = v1[60];
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 80))(v8);
    unint64_t v10 = v1[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      size_t v11 = "failed";
      if (v9) {
        size_t v11 = "successful";
      }
      LODWORD(v19.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Baseband poweroff (forced) %s", (uint8_t *)&v19, 0xCu);
    }
  }
  uint64_t v12 = (std::__shared_weak_count *)v1[23];
  v1[22] = 0;
  v1[23] = 0;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  CFMutableDictionaryRef v14 = (std::__shared_weak_count *)v1[61];
  v1[60] = 0;
  v1[61] = 0;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v1[59];
  v1[58] = 0;
  v1[59] = 0;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_2637275AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2637275C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_263727600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BootModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_67_0;
  uint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  int v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  unint64_t v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const void *)*MEMORY[0x263F26578];
  size_t v7 = strlen((const char *)*MEMORY[0x263F26578]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = v8;
    unint64_t v66 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v66) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_42_1;
  aBlock[4] = v1;
  void aBlock[5] = v3;
  size_t v63 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  size_t v64 = v12;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v64);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v13 = (const void *)*MEMORY[0x263F26118];
  size_t v14 = strlen((const char *)*MEMORY[0x263F26118]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v16 = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v15;
    unint64_t v66 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v66) = v14;
  uint64_t v16 = &__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v59[0] = MEMORY[0x263EF8330];
  v59[1] = 1174405120;
  v59[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_43;
  v59[3] = &__block_descriptor_tmp_51_1;
  v59[4] = v1;
  v59[5] = v3;
  xpc_object_t v60 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::string v19 = _Block_copy(v59);
  std::string v61 = v19;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v61);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x263F265A0];
  size_t v21 = strlen((const char *)*MEMORY[0x263F265A0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (long long *)operator new(v24 + 1);
    *((void *)&__dst + 1) = v22;
    unint64_t v66 = v25 | 0x8000000000000000;
    *(void *)&long long __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v66) = v21;
  uint64_t v23 = &__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v56[0] = MEMORY[0x263EF8330];
  v56[1] = 1174405120;
  v56[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_52;
  v56[3] = &__block_descriptor_tmp_53_0;
  v56[4] = v3;
  long long v57 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v26 = _Block_copy(v56);
  uint64_t v58 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v58);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  size_t v27 = (const void *)*MEMORY[0x263F26318];
  size_t v28 = strlen((const char *)*MEMORY[0x263F26318]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v29 = v28;
  if (v28 >= 0x17)
  {
    uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v31 = v28 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v30 = (long long *)operator new(v31 + 1);
    *((void *)&__dst + 1) = v29;
    unint64_t v66 = v32 | 0x8000000000000000;
    *(void *)&long long __dst = v30;
    goto LABEL_48;
  }
  HIBYTE(v66) = v28;
  uint64_t v30 = &__dst;
  if (v28) {
LABEL_48:
  }
    memmove(v30, v27, v29);
  *((unsigned char *)v30 + v29) = 0;
  v53[0] = MEMORY[0x263EF8330];
  v53[1] = 1174405120;
  v53[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_54;
  void v53[3] = &__block_descriptor_tmp_57_2;
  v53[4] = v1;
  v53[5] = v3;
  long long v54 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v33 = _Block_copy(v53);
  long long v55 = v33;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v55);
  if (v33) {
    _Block_release(v33);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)__dst);
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  long long v52 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  std::string v34 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v35 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&__dst, v34);
    long long v36 = __dst;
    long long __dst = 0uLL;
    CFMutableDictionaryRef v37 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v36;
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
    char v38 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    uint64_t v35 = off_26A99F170;
  }
  xpc_object_t v39 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v47 = v35;
  uint64_t v48 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v35 + 16))(&v49, v35);
  unint64_t v51 = 0;
  long long v52 = 0;
  if (v50)
  {
    long long v52 = std::__shared_weak_count::lock(v50);
    if (v52) {
      unint64_t v51 = v49;
    }
    if (v50) {
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v51) {
      goto LABEL_86;
    }
  }
  else if (!v51)
  {
    goto LABEL_86;
  }
  *(void *)&long long __dst = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 1174405120;
  v45[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_58;
  void v45[3] = &__block_descriptor_tmp_64_0;
  v45[4] = v1;
  v45[5] = v3;
  char v46 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v40 = _Block_copy(v45);
  long long v41 = v1[17];
  if (v41) {
    dispatch_retain(v41);
  }
  *(void *)&long long __dst = v40;
  *((void *)&__dst + 1) = v41;
  if (!v40)
  {
    std::string::size_type v43 = 0;
    dispatch_object_t object = v41;
    if (!v41) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  std::string::size_type v43 = _Block_copy(v40);
  dispatch_object_t object = v41;
  if (v41) {
LABEL_75:
  }
    dispatch_retain(v41);
LABEL_76:
  radio::CommandDriver::watchClientState();
  if (object) {
    dispatch_release(object);
  }
  if (v43) {
    _Block_release(v43);
  }
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_86:
  char v42 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
  if (v60) {
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v63) {
    std::__shared_weak_count::__release_weak(v63);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_263727FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a37) {
    std::__shared_weak_count::__release_weak(a37);
  }
  if (a45) {
    std::__shared_weak_count::__release_weak(a45);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v46 - 144);
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    size_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 1174405120;
        void v10[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
        v10[3] = &__block_descriptor_tmp_38_2;
        void v10[4] = v6;
        int v9 = *a3;
        if (*a3) {
          int v9 = _Block_copy(v9);
        }
        aBlock = v9;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v4) == MEMORY[0x263EF8708])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 456))
  {
    case 1:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F26508]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 3:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F26308]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 4:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F263E8]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 6:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F26170]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 7:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F26678]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    case 8:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F26630]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
    default:
      xpc_object_t v6 = xpc_string_create((const char *)*MEMORY[0x263F26478]);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      break;
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F26140], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (*(unsigned char *)(v2 + 228))
  {
    size_t v8 = (const char *)(v2 + 152);
    if (*(char *)(v2 + 175) < 0) {
      size_t v8 = *(const char **)v8;
    }
    xpc_object_t v9 = xpc_string_create(v8);
    if (!v9) {
      xpc_object_t v9 = xpc_null_create();
    }
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v9);
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
  unsigned int v11 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v11, &xdict);
  xpc_release(xdict);
}

void sub_263728718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_43(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    xpc_object_t v7 = (uint64_t *)a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    std::string v67 = v8;
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5]) {
        goto LABEL_115;
      }
      uint64_t v10 = MEMORY[0x263E6A240](*a2);
      uint64_t v11 = MEMORY[0x263EF8708];
      if (v10 != MEMORY[0x263EF8708])
      {
        uint64_t v12 = v7[11];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
        }
        goto LABEL_115;
      }
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      std::string __p = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      long long buf = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t v60 = 0;
      unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
      ResetInfo::fetchFromDict((void **)&buf, a2);
      if (SBYTE7(v57) < 0)
      {
        std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = buf;
        v55.__r_.__value_.__r.__words[2] = v57;
      }
      char v13 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v55.__r_.__value_.__l.__size_;
      }
      if (size == strlen((const char *)*MEMORY[0x263F26178]))
      {
        size_t v15 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v55
            : (std::string *)v55.__r_.__value_.__r.__words[0];
        if (!memcmp(v15, (const void *)*MEMORY[0x263F26178], size))
        {
          BOOL v19 = 1;
          if ((v13 & 0x80) == 0)
          {
LABEL_34:
            if (!v19)
            {
              uint64_t v24 = v7[11];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                if (SBYTE7(v57) < 0)
                {
                  std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
                }
                else
                {
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = buf;
                  v55.__r_.__value_.__r.__words[2] = v57;
                }
                uint64_t v32 = &v55;
                if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v32 = (std::string *)v55.__r_.__value_.__r.__words[0];
                }
                LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
                _os_log_impl(&dword_26368A000, v24, OS_LOG_TYPE_DEFAULT, "#I Invalid reset request [%s] ignoring it", (uint8_t *)&__dst, 0xCu);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v55.__r_.__value_.__l.__data_);
                }
              }
              xpc_object_t v33 = xpc_null_create();
              uint64_t v34 = *a3;
              v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_object_t v35 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250882, &v55);
              xpc_release(v55.__r_.__value_.__l.__data_);
              xpc_release(v35);
LABEL_68:
              if (SHIBYTE(v65) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((SHIBYTE(v58) & 0x80000000) == 0) {
                    goto LABEL_71;
                  }
                  goto LABEL_75;
                }
              }
              else if ((SHIBYTE(v60) & 0x80000000) == 0)
              {
                goto LABEL_70;
              }
              operator delete((void *)v59);
              if ((SHIBYTE(v58) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SBYTE7(v57) & 0x80000000) == 0) {
                  goto LABEL_115;
                }
LABEL_76:
                operator delete((void *)buf);
LABEL_115:
                if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                return;
              }
LABEL_75:
              operator delete(*((void **)&v57 + 1));
              if ((SBYTE7(v57) & 0x80000000) == 0) {
                goto LABEL_115;
              }
              goto LABEL_76;
            }
            if ((*(unsigned int (**)(uint64_t *))(*v7 + 88))(v7))
            {
              memset(&v55, 170, sizeof(v55));
              uint64_t v20 = (const void *)*MEMORY[0x263F26118];
              size_t v21 = strlen((const char *)*MEMORY[0x263F26118]);
              if (v21 >= 0x7FFFFFFFFFFFFFF8) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v22 = v21;
              if (v21 >= 0x17)
              {
                uint64_t v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17) {
                  uint64_t v26 = v21 | 7;
                }
                uint64_t v27 = v26 + 1;
                p_dst = operator new(v26 + 1);
                __dst.__r_.__value_.__l.__size_ = v22;
                __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
                p_dst = &__dst;
                if (!v21)
                {
LABEL_58:
                  p_dst[v22] = 0;
                  size_t v28 = (char *)operator new(0x28uLL);
                  strcpy(v28, " rejected; ABM is shutting down ");
                  size_t v29 = std::string::append(&__dst, v28, 0x20uLL);
                  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                  v55.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v30;
                  v29->__r_.__value_.__l.__size_ = 0;
                  v29->__r_.__value_.__r.__words[2] = 0;
                  v29->__r_.__value_.__r.__words[0] = 0;
                  operator delete(v28);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    uint64_t v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_60:
                      if (!*a3) {
                        goto LABEL_103;
                      }
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    uint64_t v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_60;
                    }
                  }
                  long long v36 = &v55;
                  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    long long v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
                  _os_log_impl(&dword_26368A000, v31, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
                  if (!*a3)
                  {
LABEL_103:
                    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v55.__r_.__value_.__l.__data_);
                      xpc_object_t v9 = v67;
                      if ((SHIBYTE(v65) & 0x80000000) == 0)
                      {
LABEL_105:
                        if ((SHIBYTE(v60) & 0x80000000) == 0) {
                          goto LABEL_106;
                        }
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      xpc_object_t v9 = v67;
                      if ((SHIBYTE(v65) & 0x80000000) == 0) {
                        goto LABEL_105;
                      }
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v58) & 0x80000000) == 0) {
                        goto LABEL_107;
                      }
                      goto LABEL_113;
                    }
LABEL_112:
                    operator delete((void *)v59);
                    if ((SHIBYTE(v58) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v57) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                      goto LABEL_114;
                    }
LABEL_113:
                    operator delete(*((void **)&v57 + 1));
                    if ((SBYTE7(v57) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (!v9) {
                        return;
                      }
                      goto LABEL_115;
                    }
LABEL_114:
                    operator delete((void *)buf);
                    if (!v9) {
                      return;
                    }
                    goto LABEL_115;
                  }
LABEL_85:
                  xpc_object_t v54 = xpc_null_create();
                  std::string::size_type v37 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
                  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v37 = v55.__r_.__value_.__l.__size_;
                  }
                  if (!v37) {
                    goto LABEL_102;
                  }
                  xpc_object_t v38 = xpc_dictionary_create(0, 0, 0);
                  xpc_object_t v39 = v38;
                  if (v38)
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    xpc_object_t v39 = xpc_null_create();
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                    if (!v39)
                    {
                      xpc_object_t v40 = xpc_null_create();
                      xpc_object_t v39 = 0;
                      goto LABEL_95;
                    }
                  }
                  if (MEMORY[0x263E6A240](v39) == v11)
                  {
                    xpc_retain(v39);
LABEL_96:
                    xpc_release(v39);
                    xpc::dict::operator=(&v54, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
                    xpc_release(__dst.__r_.__value_.__l.__data_);
                    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      long long v41 = &v55;
                    }
                    else {
                      long long v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
                    }
                    xpc_object_t v52 = xpc_string_create((const char *)v41);
                    if (!v52) {
                      xpc_object_t v52 = xpc_null_create();
                    }
                    std::string::size_type v42 = *MEMORY[0x263F25EB8];
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
                    __dst.__r_.__value_.__l.__size_ = v42;
                    xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v52, &object);
                    xpc_release(object);
                    xpc_object_t object = 0;
                    xpc_release(v52);
                    xpc_object_t v52 = 0;
LABEL_102:
                    LODWORD(__dst.__r_.__value_.__l.__data_) = -534716415;
                    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v54);
                    xpc_release(v54);
                    goto LABEL_103;
                  }
                  xpc_object_t v40 = xpc_null_create();
LABEL_95:
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                  goto LABEL_96;
                }
              }
              memmove(p_dst, v20, v22);
              goto LABEL_58;
            }
            v43[0] = MEMORY[0x263EF8330];
            v43[1] = 1174405120;
            void v43[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
            v43[3] = &__block_descriptor_tmp_48_1;
            v43[4] = v7;
            ResetInfo::ResetInfo(&v44, (const ResetInfo *)&buf);
            uint64_t v25 = (void *)*a3;
            if (*a3) {
              uint64_t v25 = _Block_copy(v25);
            }
            aBlock = v25;
            ctu::SharedSynchronizable<BootModule>::execute_wrapped(v7 + 15, (uint64_t)v43);
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v50 < 0)
            {
              operator delete(v49);
              if ((v48 & 0x80000000) == 0)
              {
LABEL_49:
                if ((v46 & 0x80000000) == 0) {
                  goto LABEL_50;
                }
                goto LABEL_79;
              }
            }
            else if ((v48 & 0x80000000) == 0)
            {
              goto LABEL_49;
            }
            operator delete(v47);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_50:
              if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_68;
              }
LABEL_80:
              operator delete(v44.__r_.__value_.__l.__data_);
              goto LABEL_68;
            }
LABEL_79:
            operator delete(v45);
            if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_68;
            }
            goto LABEL_80;
          }
LABEL_33:
          operator delete(v55.__r_.__value_.__l.__data_);
          goto LABEL_34;
        }
      }
      if (SBYTE7(v57) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = buf;
        __dst.__r_.__value_.__r.__words[2] = v57;
      }
      int v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v17 = __dst.__r_.__value_.__l.__size_;
      }
      if (v17 == strlen((const char *)*MEMORY[0x263F26180]))
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &__dst;
        }
        else {
          uint64_t v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        BOOL v19 = memcmp(v18, (const void *)*MEMORY[0x263F26180], v17) == 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_32:
          if ((*((unsigned char *)&v55.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
      else
      {
        BOOL v19 = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_32;
        }
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_263728FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **xpc::dict::operator=(void **a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_45(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  xpc_object_t v3 = (const ResetInfo *)(a1 + 5);
  ResetInfo::ResetInfo(&v17, (const ResetInfo *)(a1 + 5));
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
  v7[3] = &__block_descriptor_tmp_47_1;
  ResetInfo::ResetInfo(&v8, v3);
  xpc_object_t v4 = (void *)a1[19];
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  aBlock = v4;
  xpc_object_t v5 = _Block_copy(v7);
  int v16 = v5;
  BootModule::requestReset(v2, (const ResetInfo *)&v17, &v16);
  if (v5) {
    _Block_release(v5);
  }
  if (v23 < 0)
  {
    operator delete(__p);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v20);
  if ((v19 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    operator delete(v17.__r_.__value_.__l.__data_);
    xpc_object_t v6 = aBlock;
    if (!aBlock) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_13:
  operator delete(v18);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
LABEL_9:
  xpc_object_t v6 = aBlock;
  if (aBlock) {
LABEL_15:
  }
    _Block_release(v6);
LABEL_16:
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v9);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_2637292B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,uint64_t a28,void *a29)
{
  if (v30) {
    _Block_release(v30);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(v29);
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void sub_2637292F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v18 = a2;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v6) == MEMORY[0x263EF8708])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v7;
LABEL_9:
  xpc_release(v6);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1]) {
      goto LABEL_17;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (!*((unsigned char *)a3 + 23))
  {
    goto LABEL_17;
  }
  xpc_object_t v8 = xpc_string_create((const char *)a3);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
LABEL_17:
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = operator new(0x38uLL);
  v11[8] = 0;
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v20;
  char v19 = v11;
  v20[0] = v11;
  *((unsigned char *)v11 + 24) = 1;
  v20[1] = (void *)1;
  *((void *)v11 + 5) = v10;
  *((void *)v11 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v19, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16 >= 0) {
    char v12 = __p;
  }
  else {
    char v12 = (void **)__p[0];
  }
  xpc_object_t v13 = xpc_string_create((const char *)v12);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F26030], v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 144), &v18, &xdict);
  xpc_release(xdict);
}

void sub_263729514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, char a14, uint64_t a15)
{
}

void *__copy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 32), (const ResetInfo *)(a2 + 32));
  xpc_object_t result = *(void **)(a2 + 144);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 144) = result;
  return result;
}

void __destroy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 144);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  xpc_object_t v3 = *(void **)(a1 + 32);

  operator delete(v3);
}

void *__copy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 40));
  xpc_object_t result = *(void **)(a2 + 152);
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  *(void *)(a1 + 152) = result;
  return result;
}

void __destroy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 152);
  if (v2) {
    _Block_release(v2);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_11:
  xpc_object_t v3 = *(void **)(a1 + 40);

  operator delete(v3);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_52(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    xpc_object_t v6 = std::__shared_weak_count::lock(v4);
    xpc_object_t v14 = v6;
    if (v6)
    {
      if (!*(void *)(a1 + 32))
      {
        xpc_object_t v9 = v6;
LABEL_14:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v8 = v7;
      if (v7)
      {
        xpc_object_t object = v7;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t object = v8;
        if (!v8)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v8 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x263E6A240](v8) == MEMORY[0x263EF8708])
      {
        xpc_retain(v8);
        goto LABEL_13;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_12:
      xpc_object_t object = v10;
LABEL_13:
      xpc_release(v8);
      unsigned int v11 = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v11, &object);
      xpc_release(object);
      xpc_object_t v9 = v14;
      if (!v14) {
        return;
      }
      goto LABEL_14;
    }
  }
}

void sub_263729878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_54(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  xpc_object_t v8 = std::__shared_weak_count::lock(v4);
  uint64_t v26 = v8;
  if (!v8) {
    return;
  }
  xpc_object_t v9 = v8;
  if (!a1[5]) {
    goto LABEL_18;
  }
  if (MEMORY[0x263E6A240](*a2) != MEMORY[0x263EF8708])
  {
    xpc_object_t v10 = v7[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *MEMORY[0x263F26318];
      *(_DWORD *)xpc_object_t object = 136315138;
      *(void *)&object[4] = v25;
      _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_18;
    }
    xpc_object_t v11 = xpc_null_create();
    char v12 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    *(void *)xpc_object_t object = v11;
    xpc_object_t v13 = xpc_null_create();
    v12[2](v12, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v13);
    goto LABEL_18;
  }
  xpc_object_t v14 = (xpc_object_t)*a2;
  if (v14)
  {
    xpc_retain(v14);
    size_t v15 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3) {
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    size_t v15 = (void (**)(const void *, uint64_t, unsigned char *))*a3;
    if (*a3)
    {
LABEL_10:
      char v16 = _Block_copy(v15);
      std::string v17 = (std::__shared_weak_count *)v7[16];
      if (!v17) {
LABEL_23:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  char v16 = 0;
  std::string v17 = (std::__shared_weak_count *)v7[16];
  if (!v17) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v18 = v7[15];
  char v19 = std::__shared_weak_count::lock(v17);
  if (!v19) {
    goto LABEL_23;
  }
  uint64_t v20 = v19;
  char v21 = operator new(0x18uLL);
  *char v21 = v7;
  v21[1] = v14;
  xpc_object_t v22 = xpc_null_create();
  v21[2] = v16;
  char v23 = v7[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v24 = operator new(0x18uLL);
  *uint64_t v24 = v21;
  v24[1] = v18;
  uint64_t v24[2] = v20;
  dispatch_async_f(v23, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
  xpc_object_t v9 = v26;
  if (v26) {
    goto LABEL_18;
  }
}

void sub_263729B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_58(void *a1, uint64_t a2, ctu **a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v9 = v7;
      if (a1[5])
      {
        ctu::cf_to_xpc((uint64_t *)object, *a3, v8);
        xpc_object_t v10 = *(xpc_object_t *)object;
        uint64_t v11 = MEMORY[0x263EF8708];
        if (*(void *)object && MEMORY[0x263E6A240](*(void *)object) == v11) {
          xpc_retain(v10);
        }
        else {
          xpc_object_t v10 = xpc_null_create();
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x263E6A240](v10) == v11)
        {
          xpc_object_t value = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x263F8B858]);
          *(void *)xpc_object_t object = value;
          if (value) {
            xpc_retain(value);
          }
          else {
            *(void *)xpc_object_t object = xpc_null_create();
          }
          *(unsigned char *)(v6 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(*(xpc_object_t *)object);
          xpc_object_t v13 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(v6 + 192)) {
              xpc_object_t v14 = "started";
            }
            else {
              xpc_object_t v14 = "stopped";
            }
            *(_DWORD *)xpc_object_t object = 136315138;
            *(void *)&object[4] = v14;
            _os_log_impl(&dword_26368A000, v13, OS_LOG_TYPE_DEFAULT, "#I Transport client %s", object, 0xCu);
          }
        }
        xpc_release(v10);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_263729DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void BootModule::start(void *a1, dispatch_object_t *a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (uint64_t v11 = a1[15], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v13 = v12;
  xpc_object_t v14 = operator new(0x20uLL);
  void *v14 = v5;
  v14[1] = v7;
  v14[2] = v9;
  void v14[3] = a1;
  size_t v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v14;
  v16[1] = v11;
  uint64_t v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void BootModule::finishInitialization_sync(BootModule *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (xpc_object_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(BootModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v60 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v60) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  long long v58 = 0;
  AppleBasebandManager::create();
  long long v12 = v61;
  long long v61 = 0uLL;
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 59);
  *((_OWORD *)this + 29) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)*((void *)&v61 + 1);
  if (!*((void *)&v61 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v15 = v58;
    if (!v58) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  size_t v15 = v58;
  if (v58) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v60) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v16 = abm::kEventTransportIsReady;
  size_t v17 = strlen(abm::kEventTransportIsReady);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    char v19 = (void **)operator new(v20 + 1);
    v56[1] = v18;
    unint64_t v57 = v21 | 0x8000000000000000;
    v56[0] = v19;
    goto LABEL_29;
  }
  HIBYTE(v57) = v17;
  char v19 = v56;
  if (v17) {
LABEL_29:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_75_0;
  aBlock[4] = this;
  void aBlock[5] = v3;
  long long v53 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v22 = _Block_copy(aBlock);
  char v23 = *((void *)this + 17);
  if (v23) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v54 = v22;
  dispatch_object_t v55 = v23;
  AppleBasebandManager::setEventHandler();
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  uint64_t v24 = (const void *)*MEMORY[0x263F26490];
  size_t v25 = strlen((const char *)*MEMORY[0x263F26490]);
  if (v25 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v28 = v25 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = operator new(v28 + 1);
    __p[1] = v26;
    unint64_t v51 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_45;
  }
  HIBYTE(v51) = v25;
  uint64_t v27 = __p;
  if (v25) {
LABEL_45:
  }
    memmove(v27, v24, (size_t)v26);
  *((unsigned char *)v26 + (void)v27) = 0;
  v46[0] = MEMORY[0x263EF8330];
  v46[1] = 1174405120;
  v46[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_76;
  v46[3] = &__block_descriptor_tmp_79_1;
  uint8_t v46[4] = this;
  void v46[5] = v3;
  uint64_t v47 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v30 = _Block_copy(v46);
  uint64_t v31 = *((void *)this + 17);
  if (v31) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  char v48 = v30;
  dispatch_object_t object = v31;
  AppleBasebandManager::setEventHandler();
  if (object) {
    dispatch_release(object);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v32 = (const void *)*MEMORY[0x263F26788];
  size_t v33 = strlen((const char *)*MEMORY[0x263F26788]);
  if (v33 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17) {
      uint64_t v36 = v33 | 7;
    }
    uint64_t v37 = v36 + 1;
    xpc_object_t v35 = operator new(v36 + 1);
    v44[1] = v34;
    unint64_t v45 = v37 | 0x8000000000000000;
    v44[0] = v35;
    goto LABEL_61;
  }
  HIBYTE(v45) = v33;
  xpc_object_t v35 = v44;
  if (v33) {
LABEL_61:
  }
    memmove(v35, v32, (size_t)v34);
  *((unsigned char *)v34 + (void)v35) = 0;
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 1174405120;
  v40[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_80;
  v40[3] = &__block_descriptor_tmp_83_0;
  v40[4] = this;
  v40[5] = v3;
  long long v41 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v38 = _Block_copy(v40);
  xpc_object_t v39 = *((void *)this + 17);
  if (v39) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  std::string::size_type v42 = v38;
  dispatch_object_t v43 = v39;
  AppleBasebandManager::setEventHandler();
  if (v43) {
    dispatch_release(v43);
  }
  if (v42) {
    _Block_release(v42);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 58));
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_26372A5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke(void *a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (BootModule *)a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  std::string v44 = v4;
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (!a1[5]) {
    goto LABEL_58;
  }
  uint64_t v6 = *((int *)v3 + 114);
  if (v6 != 3)
  {
    uint64_t v16 = *((void *)v3 + 11);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_58;
    }
    if (v6 > 8) {
      size_t v17 = "Unknown";
    }
    else {
      size_t v17 = off_2655D52D0[v6];
    }
    uint64_t v34 = *MEMORY[0x263F263E8];
    *(_DWORD *)state = 136315394;
    *(void *)&state[4] = v17;
    *(_WORD *)&state[12] = 2080;
    *(void *)&state[14] = v34;
    _os_log_impl(&dword_26368A000, v16, OS_LOG_TYPE_DEFAULT, "#I State is '%s'; don't send '%s' event", state, 0x16u);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_59:
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return;
    }
    return;
  }
  dispatch_object_t object = _os_activity_create(&dword_26368A000, "Baseband state: transport is ready", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter((os_activity_t)object, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  (*(void (**)(BootModule *, uint64_t))(*(void *)v3 + 96))(v3, 4);
  CFTypeRef cf = 0;
  uint64_t v7 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v10 = Mutable;
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  uint64_t v11 = (const __CFString **)*MEMORY[0x263F26140];
  *(void *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v11, (const char *)0x8000100, v7, v9);
  long long v12 = (const __CFString **)*MEMORY[0x263F263E8];
  xpc_object_t v13 = *(const void **)state;
  uint64_t v46 = *(void *)state;
  *(void *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v12, (const char *)0x8000100, v7, v14);
  size_t v15 = *(const void **)state;
  unint64_t v45 = *(__CFDictionary **)state;
  if (v13 && *(void *)state)
  {
    CFDictionarySetValue(v10, v13, *(const void **)state);
  }
  else if (!*(void *)state)
  {
    goto LABEL_15;
  }
  CFRelease(v15);
LABEL_15:
  if (v13) {
    CFRelease(v13);
  }
  unint64_t v45 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  BootModule::calculateBootStatistics_sync(v3, &v45);
  char v19 = v45;
  if (v45) {
    uint64_t v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    uint64_t v21 = (const __CFString **)*MEMORY[0x263F264A8];
    *(void *)state = 0;
    ctu::cf::convert_copy((ctu::cf *)state, v21, (const char *)0x8000100, v7, v18);
    xpc_object_t v22 = *(const void **)state;
    uint64_t v46 = *(void *)state;
    *(void *)state = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v22) {
        CFDictionarySetValue(v10, v22, v19);
      }
      CFRelease(v19);
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  char v23 = (const void *)*MEMORY[0x263F26650];
  size_t v24 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v24 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v26 = (void **)operator new(v27 + 1);
    __dst[1] = v25;
    unint64_t v40 = v28 | 0x8000000000000000;
    __dst[0] = v26;
  }
  else
  {
    HIBYTE(v40) = v24;
    uint64_t v26 = __dst;
    if (!v24) {
      goto LABEL_35;
    }
  }
  memmove(v26, v23, (size_t)v25);
LABEL_35:
  *((unsigned char *)v25 + (void)v26) = 0;
  CFTypeRef v29 = cf;
  if (cf && (CFTypeID v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v38 = v29;
    CFRetain(v29);
  }
  else
  {
    CFTypeRef v38 = 0;
  }
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 1174405120;
  v35[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2;
  v35[3] = &__block_descriptor_tmp_71_0;
  uint64_t v32 = a1[5];
  uint64_t v31 = (std::__shared_weak_count *)a1[6];
  v35[4] = v3;
  v35[5] = v32;
  uint64_t v36 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock = _Block_copy(v35);
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &v38, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  size_t v33 = *((void *)v3 + 26);
  *((void *)v3 + 26) = 0;
  if (v33)
  {
    dispatch_group_leave(v33);
    dispatch_release(v33);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (object) {
    os_release(object);
  }
  uint64_t v5 = v44;
  if (v44)
  {
LABEL_58:
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
    goto LABEL_59;
  }
}

void sub_26372ABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,__int16 a26,char a27,char a28)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 80));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 88));
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 96));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  ctu::os::scoped_activity::~scoped_activity(&a25);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void BootModule::calculateBootStatistics_sync(BootModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  v19[1] = *MEMORY[0x263EF8340];
  int v4 = TelephonyUtilSystemMachTime();
  uint64_t v5 = *((void *)this + 29);
  unsigned int v6 = v4 - v5;
  int v7 = *((_DWORD *)this + 60);
  xpc_object_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v4 - v5;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband total boot time = %u millisec", (uint8_t *)v19, 8u);
    xpc_object_t v8 = *((void *)this + 11);
    unsigned int v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      unsigned int v10 = v4 - v7;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_3;
    }
  }
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v9;
  _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband image push time = %u millisec", (uint8_t *)v19, 8u);
  xpc_object_t v8 = *((void *)this + 11);
  unsigned int v10 = v4 - v7;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_13:
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v10;
  _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband engage time     = %u millisec", (uint8_t *)v19, 8u);
  xpc_object_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    int v11 = *((_DWORD *)this + 56);
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v11;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband boot attempts   = %u", (uint8_t *)v19, 8u);
  }
LABEL_6:
  BootModule::submitMetric_sync(this, *((_DWORD *)this + 56), v6, 1);
  *((_DWORD *)this + 56) = 0;
  v19[0] = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  size_t v15 = Mutable;
  if (Mutable) {
    v19[0] = Mutable;
  }
  ctu::cf::update<char const*,unsigned int>(Mutable, (const __CFString **)*MEMORY[0x263F26088], v6, v12, v14);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x263F26428], v9, v12, v16);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x263F261E0], v10, v12, v17);
  if (v15)
  {
    CFTypeID v18 = CFGetTypeID(v15);
    if (v18 == CFDictionaryGetTypeID())
    {
      *a2 = v15;
      CFRetain(v15);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_26372AFC0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_26372AFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 0x40000000;
        v6[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3;
        v6[3] = &__block_descriptor_tmp_68_0;
        v6[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(v1 + 456);
  if (v2 == 4)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v1 + 80))(&v9);
    unint64_t v3 = v9;
    if (v9)
    {
      int v4 = (char *)operator new(0x38uLL);
      strcpy(v4, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
      uint64_t v5 = *(void *)(v3 + 104);
      std::string::__init_copy_ctor_external(&v11, v4, 0x33uLL);
      (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 32))(v5, &v11);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      operator delete(v4);
    }
    unsigned int v6 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    int v7 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 8) {
        xpc_object_t v8 = "Unknown";
      }
      else {
        xpc_object_t v8 = off_2655D5318[v2];
      }
      LODWORD(v11.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v11.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I State is '%s' not releasing power assertion yet", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_26372B2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_26372B2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_76(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        unsigned int v6 = *(BootController **)(v3 + 480);
        if (v6) {
          BootController::markNonvolatileDataErased(v6);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_26372B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_80(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&cf, *a2);
      CFTypeRef v9 = cf;
      if (cf) {
        unint64_t v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        unint64_t v10 = 0;
      }
      if (v10)
      {
        v12[0] = 0xAAAAAAAAAAAAAAAALL;
        v12[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, (const __CFDictionary *)cf);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v14, (const char *)*MEMORY[0x263F26430]);
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v12, v14);
        MEMORY[0x263E68C90](&v14);
        *(_DWORD *)(v5 + 256) = Int;
        MEMORY[0x263E68CD0](v12);
        CFTypeRef v9 = cf;
      }
      if (v9) {
        CFRelease(v9);
      }
    }
  }
}

void BootModule::submitMetric_sync(BootModule *this, unsigned int a2, uint64_t a3, BOOL a4)
{
  uint64_t v8 = *((void *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of bootup time", buf, 2u);
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  uint64_t v10 = MEMORY[0x263EF8708];
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v9) == v10)
    {
      xpc_retain(v9);
      xpc_object_t v11 = v9;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v12) == v10)
    {
      xpc_retain(v12);
      xpc_object_t v13 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v12 = 0;
  }
  xpc_release(v12);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F25F90], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_uint64_create(a3);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F25FF8], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_BOOL_create(a4);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F25F98], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  xpc_object_t v20 = xpc_string_create((const char *)*MEMORY[0x263F26898]);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25E20], v20);
  xpc_object_t v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  xpc_object_t v22 = xpc_int64_create(524384);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25ED0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v24 = v13;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x263F25E18], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = (const void *)*MEMORY[0x263F261A0];
  size_t v27 = strlen((const char *)*MEMORY[0x263F261A0]);
  if (v27 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    CFTypeRef v29 = operator new(v30 + 1);
    size_t v35 = v28;
    unint64_t v36 = v31 | 0x8000000000000000;
    *(void *)long long buf = v29;
LABEL_36:
    memmove(v29, v26, v28);
    *((unsigned char *)v29 + v28) = 0;
    xpc_object_t object = v11;
    if (v11) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  HIBYTE(v36) = v27;
  CFTypeRef v29 = buf;
  if (v27) {
    goto LABEL_36;
  }
  buf[0] = 0;
  xpc_object_t object = v11;
  if (v11)
  {
LABEL_32:
    xpc_retain(v11);
    goto LABEL_38;
  }
LABEL_37:
  xpc_object_t object = xpc_null_create();
LABEL_38:
  uint64_t v32 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v32);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v36) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v13);
  xpc_release(v11);
}

void sub_26372B990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::handleBootFailed_sync(uint64_t a1, const void **a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  os_activity_t v99 = _os_activity_create(&dword_26368A000, "Baseband state: boot up failed", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter(v99, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  memset(v98, 170, sizeof(v98));
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  size_t v6 = v5 + 23;
  memset(state, 170, 24);
  if (v5 + 23 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0xFFFFFFFFFFFFFFE9)
  {
    int v7 = &state[23];
    state[23] = v5 + 23;
    qmemcpy(state, "modem boot up failure [", 23);
LABEL_10:
    if (v4 >= 0) {
      xpc_object_t v11 = a2;
    }
    else {
      xpc_object_t v11 = *a2;
    }
    memmove(v7, v11, v5);
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  uint64_t v10 = (char *)operator new(v8 + 1);
  *(void *)&state[8] = v5 + 23;
  *(void *)&state[16] = v9 | 0x8000000000000000;
  *(void *)state = v10;
  qmemcpy(v10, "modem boot up failure [", 23);
  int v7 = v10 + 23;
  if (v5) {
    goto LABEL_10;
  }
LABEL_14:
  v7[v5] = 0;
  xpc_object_t v12 = std::string::append((std::string *)state, "]", 1uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v98[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v98 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((state[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)state);
    if (*(unsigned char *)(a1 + 229)) {
      goto LABEL_19;
    }
  }
  else if (*(unsigned char *)(a1 + 229))
  {
    goto LABEL_19;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 224);
  if (v14 <= *(_DWORD *)(a1 + 196))
  {
    CFTypeRef v38 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state = 67109120;
      *(_DWORD *)&state[4] = v14;
      _os_log_error_impl(&dword_26368A000, v38, OS_LOG_TYPE_ERROR, "Attempting to boot baseband again; attempt=%d",
        state,
        8u);
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v104 = v39;
    long long v105 = v39;
    long long v102 = v39;
    long long v103 = v39;
    *(_OWORD *)&state[16] = v39;
    long long v101 = v39;
    *(_OWORD *)state = v39;
    unint64_t v40 = (const void *)*MEMORY[0x263F26178];
    size_t v41 = strlen((const char *)*MEMORY[0x263F26178]);
    if (v41 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v42 = v41;
    if (v41 >= 0x17)
    {
      uint64_t v62 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v62 = v41 | 7;
      }
      uint64_t v63 = v62 + 1;
      dispatch_object_t v43 = operator new(v62 + 1);
      *((void *)&v96 + 1) = v42;
      unint64_t v97 = v63 | 0x8000000000000000;
      *(void *)&long long v96 = v43;
    }
    else
    {
      HIBYTE(v97) = v41;
      dispatch_object_t v43 = &v96;
      if (!v41)
      {
LABEL_115:
        v43[v42] = 0;
        uint64_t v64 = (const void *)*MEMORY[0x263F26710];
        size_t v65 = strlen((const char *)*MEMORY[0x263F26710]);
        if (v65 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v66 = v65;
        if (v65 >= 0x17)
        {
          uint64_t v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17) {
            uint64_t v68 = v65 | 7;
          }
          uint64_t v69 = v68 + 1;
          std::string v67 = operator new(v68 + 1);
          *((void *)&v94 + 1) = v66;
          unint64_t v95 = v69 | 0x8000000000000000;
          *(void *)&long long v94 = v67;
        }
        else
        {
          HIBYTE(v95) = v65;
          std::string v67 = &v94;
          if (!v65)
          {
LABEL_123:
            v67[v66] = 0;
            Timestamp::Timestamp((Timestamp *)&cf);
            Timestamp::asString((uint64_t)&cf, 0, 9, __p);
            char v89 = 0;
            LOBYTE(v88) = 0;
            ResetInfo::ResetInfo((std::string *)state, &v96, &v94, (long long *)v98, (uint64_t)__p, 4, &v88);
            if (v93 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v91);
              if ((SHIBYTE(v95) & 0x80000000) == 0)
              {
LABEL_125:
                if ((SHIBYTE(v97) & 0x80000000) == 0) {
                  goto LABEL_126;
                }
LABEL_137:
                operator delete((void *)v96);
LABEL_126:
                ResetInfo::ResetInfo(&v81, (const ResetInfo *)state);
                uint64_t v80 = 0;
                BootModule::requestReset(a1, &v81, &v80);
                if (v87 < 0)
                {
                  operator delete(v86);
                  if ((v85 & 0x80000000) == 0)
                  {
LABEL_128:
                    if ((v83 & 0x80000000) == 0) {
                      goto LABEL_129;
                    }
                    goto LABEL_140;
                  }
                }
                else if ((v85 & 0x80000000) == 0)
                {
                  goto LABEL_128;
                }
                operator delete(v84);
                if ((v83 & 0x80000000) == 0)
                {
LABEL_129:
                  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_130;
                  }
                  goto LABEL_141;
                }
LABEL_140:
                operator delete(v82);
                if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_130:
                  if ((SHIBYTE(v105) & 0x80000000) == 0) {
                    goto LABEL_131;
                  }
                  goto LABEL_142;
                }
LABEL_141:
                operator delete(v81.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v105) & 0x80000000) == 0)
                {
LABEL_131:
                  if ((SBYTE7(v103) & 0x80000000) == 0) {
                    goto LABEL_132;
                  }
                  goto LABEL_143;
                }
LABEL_142:
                operator delete(*((void **)&v104 + 1));
                if ((SBYTE7(v103) & 0x80000000) == 0)
                {
LABEL_132:
                  if ((SHIBYTE(v101) & 0x80000000) == 0) {
                    goto LABEL_133;
                  }
                  goto LABEL_144;
                }
LABEL_143:
                operator delete((void *)v102);
                if ((SHIBYTE(v101) & 0x80000000) == 0)
                {
LABEL_133:
                  if ((state[23] & 0x80000000) == 0) {
                    goto LABEL_103;
                  }
LABEL_145:
                  operator delete(*(void **)state);
                  goto LABEL_103;
                }
LABEL_144:
                operator delete(*(void **)&state[24]);
                if ((state[23] & 0x80000000) == 0) {
                  goto LABEL_103;
                }
                goto LABEL_145;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v91);
              if ((SHIBYTE(v95) & 0x80000000) == 0) {
                goto LABEL_125;
              }
            }
            operator delete((void *)v94);
            if ((SHIBYTE(v97) & 0x80000000) == 0) {
              goto LABEL_126;
            }
            goto LABEL_137;
          }
        }
        memmove(v67, v64, v66);
        goto LABEL_123;
      }
    }
    memmove(v43, v40, v42);
    goto LABEL_115;
  }
LABEL_19:
  xpc_object_t v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)state = 0;
    _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "Baseband is declared dead; no more boot attempts",
      state,
      2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 6);
  CFTypeRef cf = 0;
  uint64_t v16 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26170], v16, v18);
  xpc_object_t v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v19 || (uint64_t v20 = *(void *)(a1 + 120), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v22 = v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(void *)&long long v94 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v94 + 1) = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v23 = (uint64_t *)off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(state);
    long long v24 = *(_OWORD *)state;
    *(void *)state = 0;
    *(void *)&state[8] = 0;
    xpc_object_t v25 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = *(std::__shared_weak_count **)&state[8];
    if (*(void *)&state[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&state[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    xpc_object_t v23 = (uint64_t *)off_26A99F030;
  }
  *(void *)&long long v94 = v23;
  *((void *)&v94 + 1) = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  size_t v27 = (const void *)*MEMORY[0x263F26650];
  size_t v28 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFTypeRef v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    uint64_t v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v32 = v28 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v30 = (void **)operator new(v32 + 1);
    __dst[1] = v29;
    unint64_t v79 = v33 | 0x8000000000000000;
    __dst[0] = v30;
LABEL_45:
    memmove(v30, v27, (size_t)v29);
    *((unsigned char *)v29 + (void)v30) = 0;
    CFTypeRef v31 = cf;
    if (!cf) {
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  HIBYTE(v79) = v28;
  uint64_t v30 = __dst;
  if (v28) {
    goto LABEL_45;
  }
  LOBYTE(__dst[0]) = 0;
  CFTypeRef v31 = cf;
  if (!cf) {
    goto LABEL_48;
  }
LABEL_46:
  CFTypeID v34 = CFGetTypeID(v31);
  if (v34 == CFDictionaryGetTypeID())
  {
    BOOL v77 = v31;
    CFRetain(v31);
    goto LABEL_49;
  }
LABEL_48:
  CFTypeRef v31 = 0;
  BOOL v77 = 0;
LABEL_49:
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_88;
  aBlock[4] = a1;
  void aBlock[5] = v20;
  std::string::size_type v75 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v35 = _Block_copy(aBlock);
  __darwin_time_t v76 = v35;
  ABMServer::broadcast(v23, (uint64_t)__dst, &v77, &v76);
  if (v35) {
    _Block_release(v35);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (SHIBYTE(v79) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v36 = xpc_dictionary_create(0, 0, 0);
  if (v36 || (xpc_object_t v36 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v36) == MEMORY[0x263EF8708])
    {
      xpc_retain(v36);
      xpc_object_t v37 = v36;
    }
    else
    {
      xpc_object_t v37 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    xpc_object_t v36 = 0;
  }
  xpc_release(v36);
  xpc_object_t v44 = xpc_int64_create(4);
  if (!v44) {
    xpc_object_t v44 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x263F25E10], v44);
  xpc_object_t v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  if (v98[23] >= 0) {
    uint64_t v46 = v98;
  }
  else {
    uint64_t v46 = *(const char **)v98;
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x263F263C0], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  Timestamp::Timestamp((Timestamp *)&v96);
  Timestamp::asString((uint64_t)&v96, 0, 9, state);
  if (state[23] >= 0) {
    unint64_t v49 = state;
  }
  else {
    unint64_t v49 = *(const char **)state;
  }
  xpc_object_t v50 = xpc_string_create(v49);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x263F26030], v50);
  xpc_object_t v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if ((state[23] & 0x80000000) != 0) {
    operator delete(*(void **)state);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v96, *((void **)&v96 + 1));
  xpc_object_t v52 = (const void *)*MEMORY[0x263F261B0];
  size_t v53 = strlen((const char *)*MEMORY[0x263F261B0]);
  if (v53 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v54 = v53;
  if (v53 >= 0x17)
  {
    uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17) {
      uint64_t v56 = v53 | 7;
    }
    uint64_t v57 = v56 + 1;
    dispatch_object_t v55 = operator new(v56 + 1);
    *(void *)&state[8] = v54;
    *(void *)&state[16] = v57 | 0x8000000000000000;
    *(void *)state = v55;
LABEL_89:
    memmove(v55, v52, v54);
    v55[v54] = 0;
    xpc_object_t object = v37;
    if (v37) {
      goto LABEL_85;
    }
LABEL_90:
    xpc_object_t object = xpc_null_create();
    goto LABEL_91;
  }
  state[23] = v53;
  dispatch_object_t v55 = state;
  if (v53) {
    goto LABEL_89;
  }
  state[0] = 0;
  xpc_object_t object = v37;
  if (!v37) {
    goto LABEL_90;
  }
LABEL_85:
  xpc_retain(v37);
LABEL_91:
  v70[0] = MEMORY[0x263EF8330];
  v70[1] = 1174405120;
  v70[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_89;
  v70[3] = &__block_descriptor_tmp_93;
  v70[4] = a1;
  v70[5] = v20;
  long long v71 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v58 = _Block_copy(v70);
  unint64_t v72 = v58;
  Service::runCommand(a1, (uint64_t)state, &object, &v72);
  if (v58) {
    _Block_release(v58);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if ((state[23] & 0x80000000) != 0) {
    operator delete(*(void **)state);
  }
  if (v71) {
    std::__shared_weak_count::__release_weak(v71);
  }
  xpc_release(v37);
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  long long v59 = (std::__shared_weak_count *)*((void *)&v94 + 1);
  if (!*((void *)&v94 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::__shared_weak_count::__release_weak(v22);
    CFTypeRef v60 = cf;
    if (!cf) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  std::__shared_weak_count::__release_weak(v22);
  CFTypeRef v60 = cf;
  if (cf) {
LABEL_102:
  }
    CFRelease(v60);
LABEL_103:
  if ((v98[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v98);
    os_activity_t v61 = v99;
    if (!v99) {
      return;
    }
  }
  else
  {
    os_activity_t v61 = v99;
    if (!v99) {
      return;
    }
  }
  os_release(v61);
}

void sub_26372C680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  ResetInfo::~ResetInfo(&a32);
  ResetInfo::~ResetInfo((void **)(v32 - 224));
  if (*(char *)(v32 - 233) < 0) {
    operator delete(*(void **)(v32 - 256));
  }
  ctu::os::scoped_activity::~scoped_activity((void **)(v32 - 232));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (void *)a1[4];
  int v4 = std::__shared_weak_count::lock(v2);
  unsigned int v14 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v10 = v4;
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    return;
  }
  size_t v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, void *))(*v3 + 80))(&v11, v3);
  unint64_t v6 = v11;
  if (v11)
  {
    int v7 = (char *)operator new(0x38uLL);
    strcpy(v7, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v8 = *(void *)(v6 + 104);
    std::string::__init_copy_ctor_external(&v15, v7, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, &v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    operator delete(v7);
  }
  uint64_t v9 = (std::__shared_weak_count *)v12;
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
}

void sub_26372CB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  operator delete(v19);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_26372CB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_89(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    int v7 = (void *)a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = a1[5];
      if (v10)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v11 = *a3;
        if (*a3)
        {
          xpc_retain(*a3);
          unint64_t v12 = (std::__shared_weak_count *)v7[16];
          if (!v12) {
LABEL_17:
          }
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          unint64_t v12 = (std::__shared_weak_count *)v7[16];
          if (!v12) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = v7[15];
        unsigned int v14 = std::__shared_weak_count::lock(v12);
        if (!v14) {
          goto LABEL_17;
        }
        std::string v15 = v14;
        uint64_t v16 = operator new(0x28uLL);
        *uint64_t v16 = v7;
        v16[1] = v10;
        uint64_t v16[2] = v9;
        *((_DWORD *)v16 + 6) = a2;
        v16[4] = v11;
        xpc_object_t v17 = xpc_null_create();
        CFAllocatorRef v18 = v7[17];
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v19 = operator new(0x18uLL);
        *xpc_object_t v19 = v16;
        v19[1] = v13;
        void v19[2] = v15;
        dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void BootModule::handleReset_sync(uint64_t a1, uint64_t a2, void **a3)
{
  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    std::string v53 = *(std::string *)(a2 + 48);
    unint64_t v6 = (void **)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  unint64_t v6 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
LABEL_3:
  }
    operator delete(*v6);
LABEL_4:
  *(std::string *)unint64_t v6 = v53;
  xpc_object_t v52 = 0;
  uint64_t v7 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    xpc_object_t v52 = Mutable;
  }
  else {
    CFMutableDictionaryRef Mutable = v52;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26508], v7, v9);
  ResetInfo::addToDict(a2, &v52, v10, v11, v12);
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  unint64_t v13 = off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v53);
    long long v14 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
    std::string v15 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    size_t size = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
    if (v53.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v53.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v13 = off_26A99F030;
  }
  unint64_t v50 = v13;
  unint64_t v51 = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  xpc_object_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v17 || (v18 = *(void *)(a1 + 120), (xpc_object_t v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_object_t v21 = (uint64_t *)v50;
  xpc_object_t v22 = (const void *)*MEMORY[0x263F26650];
  size_t v23 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v23 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v24 = (void *)v23;
  if (v23 >= 0x17)
  {
    uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v27 = v23 | 7;
    }
    uint64_t v28 = v27 + 1;
    xpc_object_t v25 = (void **)operator new(v27 + 1);
    __dst[1] = v24;
    unint64_t v49 = v28 | 0x8000000000000000;
    __dst[0] = v25;
LABEL_31:
    memmove(v25, v22, (size_t)v24);
    *((unsigned char *)v24 + (void)v25) = 0;
    uint64_t v26 = v52;
    if (!v52) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  HIBYTE(v49) = v23;
  xpc_object_t v25 = __dst;
  if (v23) {
    goto LABEL_31;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v26 = v52;
  if (!v52) {
    goto LABEL_34;
  }
LABEL_32:
  CFTypeID v29 = CFGetTypeID(v26);
  if (v29 == CFDictionaryGetTypeID())
  {
    xpc_object_t v47 = v26;
    CFRetain(v26);
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v26 = 0;
  xpc_object_t v47 = 0;
LABEL_35:
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 1174405120;
  v36[2] = ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v36[3] = &__block_descriptor_tmp_96_0;
  v36[4] = a1;
  v36[5] = v18;
  xpc_object_t v37 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ResetInfo::ResetInfo(&v38, (const ResetInfo *)a2);
  uint64_t v30 = *a3;
  if (*a3) {
    uint64_t v30 = _Block_copy(v30);
  }
  aBlock = v30;
  CFTypeRef v31 = _Block_copy(v36);
  uint64_t v46 = v31;
  ABMServer::broadcast(v21, (uint64_t)__dst, (const void **)&v47, &v46);
  if (v31) {
    _Block_release(v31);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v32 = aBlock;
    if (!aBlock) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  uint64_t v32 = aBlock;
  if (aBlock) {
LABEL_45:
  }
    _Block_release(v32);
LABEL_46:
  if (v44 < 0)
  {
    operator delete(__p);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_48:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_49;
      }
      goto LABEL_59;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete(v41);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_60:
    operator delete(v38.__r_.__value_.__l.__data_);
    uint64_t v33 = v37;
    if (!v37) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_59:
  operator delete(v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_60;
  }
LABEL_50:
  uint64_t v33 = v37;
  if (v37) {
LABEL_51:
  }
    std::__shared_weak_count::__release_weak(v33);
LABEL_52:
  std::__shared_weak_count::__release_weak(v20);
  CFTypeID v34 = (std::__shared_weak_count *)v51;
  if (!v51 || atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v35 = v52;
    if (!v52) {
      return;
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  size_t v35 = v52;
  if (v52) {
LABEL_55:
  }
    CFRelease(v35);
}

void sub_26372D264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  int v4 = std::__shared_weak_count::lock(v2);
  long long v24 = v4;
  if (!v4) {
    return;
  }
  size_t v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_27;
  }
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v22 = *(std::string *)(a1 + 56);
  }
  int v6 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v22.__r_.__value_.__l.__size_;
  }
  if (size == strlen((const char *)*MEMORY[0x263F26180]))
  {
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v22;
    }
    else {
      uint64_t v8 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    BOOL v9 = memcmp(v8, (const void *)*MEMORY[0x263F26180], size) == 0;
    if ((v6 & 0x80000000) == 0)
    {
LABEL_15:
      uint64_t v10 = v3[11];
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9) {
        goto LABEL_16;
      }
LABEL_32:
      if (v11)
      {
        LOWORD(v22.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform hard reset", (uint8_t *)&v22, 2u);
      }
      ResetInfo::ResetInfo(&v17, (const ResetInfo *)(a1 + 56));
      long long v14 = *(const void **)(a1 + 168);
      if (v14) {
        std::string v15 = _Block_copy(v14);
      }
      else {
        std::string v15 = 0;
      }
      uint64_t v16 = v15;
      BootModule::hardReset_sync((uint64_t)v3, (uint64_t)&v17, (uint64_t *)&v16);
      if (v15) {
        _Block_release(v15);
      }
      unint64_t v13 = &v17;
      if (v18 < 0) {
        goto LABEL_23;
      }
      goto LABEL_24;
    }
  }
  else
  {
    BOOL v9 = 0;
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  uint64_t v10 = v3[11];
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v9) {
    goto LABEL_32;
  }
LABEL_16:
  if (v11)
  {
    LOWORD(v22.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform soft reset", (uint8_t *)&v22, 2u);
  }
  ResetInfo::ResetInfo(&v20, (const ResetInfo *)(a1 + 56));
  CFAllocatorRef v12 = *(void **)(a1 + 168);
  if (v12) {
    CFAllocatorRef v12 = _Block_copy(v12);
  }
  aBlock = v12;
  (*(void (**)(void *, std::string *, void **))(*v3 + 104))(v3, &v20, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  unint64_t v13 = &v20;
  if (v21 < 0) {
LABEL_23:
  }
    operator delete((void *)v13[3].__r_.__value_.__r.__words[2]);
LABEL_24:
  if ((SHIBYTE(v13[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_37:
    operator delete(v13[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  operator delete(v13[2].__r_.__value_.__l.__data_);
  if (SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
LABEL_26:
  if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_27;
  }
LABEL_38:
  operator delete(v13->__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_28:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_26372D634(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_26372D648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (v10) {
    _Block_release(v10);
  }
  ResetInfo::~ResetInfo(&a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v11 - 80);
  _Unwind_Resume(a1);
}

void sub_26372D674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,void *a25)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a25);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void sub_26372D6A0(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void BootModule::hardReset_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  unint64_t v6 = off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v49);
    long long v7 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v7;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    size_t size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v49.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    unint64_t v6 = off_26A99F030;
  }
  unint64_t v47 = v6;
  unint64_t v48 = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(unsigned char *)(a1 + 228) = 0;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v49 = *(std::string *)(a2 + 24);
  }
  int v10 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v11 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v11 = v49.__r_.__value_.__l.__size_;
  }
  if (v11 != strlen((const char *)*MEMORY[0x263F26710]))
  {
    BOOL v13 = 0;
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_27:
    operator delete(v49.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_23;
    }
LABEL_28:
    std::string v17 = *(void **)(a1 + 480);
    if (v17)
    {
      uint64_t v16 = (void (**)(void))(*v17 + 64);
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFAllocatorRef v12 = &v49;
  }
  else {
    CFAllocatorRef v12 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  BOOL v13 = memcmp(v12, (const void *)*MEMORY[0x263F26710], v11) == 0;
  if (v10 < 0) {
    goto LABEL_27;
  }
LABEL_22:
  if (!v13) {
    goto LABEL_28;
  }
LABEL_23:
  long long v14 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v49.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_26368A000, v14, OS_LOG_TYPE_ERROR, "Falling back to baseband powercycle as bootup failed", (uint8_t *)&v49, 2u);
    std::string v15 = *(void **)(a1 + 480);
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  std::string v15 = *(void **)(a1 + 480);
  if (v15)
  {
LABEL_25:
    uint64_t v16 = (void (**)(void))(*v15 + 72);
LABEL_30:
    (*v16)();
  }
LABEL_31:
  uint64_t v18 = *a3;
  if (*a3)
  {
    *((unsigned char *)&v49.__r_.__value_.__s + 23) = 0;
    v49.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, void, std::string *))(v18 + 16))(v18, 0, &v49);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
  v49.__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  std::string v22 = (const void *)v49.__r_.__value_.__r.__words[0];
  if (Mutable)
  {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    if (v22)
    {
      CFRelease(v22);
      CFMutableDictionaryRef Mutable = (__CFDictionary *)v49.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)v49.__r_.__value_.__r.__words[0];
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26478], v19, v21);
  ResetInfo::addToDict(a2, (__CFDictionary **)&v49, v23, v24, v25);
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v26 || (uint64_t v27 = *(void *)(a1 + 120), (v28 = std::__shared_weak_count::lock(v26)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v29 = v28;
  atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = (uint64_t *)v47;
  CFTypeRef v31 = (const void *)*MEMORY[0x263F26650];
  size_t v32 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v32 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v36 = v32 | 7;
    }
    uint64_t v37 = v36 + 1;
    CFTypeID v34 = (void **)operator new(v36 + 1);
    __dst[1] = v33;
    unint64_t v46 = v37 | 0x8000000000000000;
    __dst[0] = v34;
LABEL_50:
    memmove(v34, v31, (size_t)v33);
    *((unsigned char *)v33 + (void)v34) = 0;
    size_t v35 = (const void *)v49.__r_.__value_.__r.__words[0];
    if (!v49.__r_.__value_.__r.__words[0]) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  HIBYTE(v46) = v32;
  CFTypeID v34 = __dst;
  if (v32) {
    goto LABEL_50;
  }
  LOBYTE(__dst[0]) = 0;
  size_t v35 = (const void *)v49.__r_.__value_.__r.__words[0];
  if (!v49.__r_.__value_.__r.__words[0]) {
    goto LABEL_53;
  }
LABEL_51:
  CFTypeID v38 = CFGetTypeID(v35);
  if (v38 == CFDictionaryGetTypeID())
  {
    char v44 = v35;
    CFRetain(v35);
    goto LABEL_54;
  }
LABEL_53:
  size_t v35 = 0;
  char v44 = 0;
LABEL_54:
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 1174405120;
  v41[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v41[3] = &__block_descriptor_tmp_100_0;
  v41[4] = a1;
  v41[5] = v27;
  char v42 = v29;
  atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v39 = _Block_copy(v41);
  dispatch_object_t v43 = v39;
  ABMServer::broadcast(v30, (uint64_t)__dst, &v44, &v43);
  if (v39) {
    _Block_release(v39);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__dst[0]);
  }
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak(v29);
  if (v49.__r_.__value_.__r.__words[0]) {
    CFRelease(v49.__r_.__value_.__l.__data_);
  }
  char v40 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_26372DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_26372DC60(_Unwind_Exception *a1)
{
}

void sub_26372DC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (*(char *)(v24 - 73) < 0)
  {
    operator delete(*(void **)(v24 - 96));
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 0x40000000;
        v6[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
        v6[3] = &__block_descriptor_tmp_97;
        v6[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
}

void BootModule::boot_sync(BootModule *this)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unsigned int v2 = *((_DWORD *)this + 114) - 2;
  if (v2 <= 6)
  {
    uint64_t v3 = *((void *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = off_2655D5360[v2];
      LODWORD(v38) = 136315138;
      *(void *)((char *)&v38 + 4) = v4;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootup request rejected as we are already in %s state", (uint8_t *)&v38, 0xCu);
    }
    return;
  }
  (*(void (**)(BootModule *, uint64_t))(*(void *)this + 96))(this, 2);
  ++*((_DWORD *)this + 56);
  uint64_t v6 = *((void *)this + 15);
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  uint64_t v36 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (uint64_t v37 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000;
  char v35 = 0;
  BOOL v9 = dispatch_group_create();
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = &v38;
  uint64_t v39 = 0x4002000000;
  char v40 = __Block_byref_object_copy__0;
  size_t v41 = __Block_byref_object_dispose__0;
  char v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (capabilities::abs::shouldBoot((capabilities::abs *)v9))
  {
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule9boot_syncEv_block_invoke;
    block[3] = &unk_270EAA570;
    void block[6] = this;
    block[7] = v6;
    CFTypeRef v31 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    void block[4] = &v32;
    block[5] = &v38;
    dispatch_group_async(v9, global_queue, block);
    size_t v11 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    CFAllocatorRef v12 = *((void *)this + 11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I Faking bootup", buf, 2u);
    }
    uint64_t v13 = *((void *)this + 22);
    long long v14 = (char *)operator new(0x20uLL);
    uint64_t v27 = v14;
    long long v28 = xmmword_2637A8340;
    strcpy(v14, "Wait for Ready on Fake Boot");
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_133;
    aBlock[3] = &__block_descriptor_tmp_134;
    aBlock[4] = this;
    void aBlock[5] = v6;
    uint64_t v24 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    dispatch_group_t group = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(group);
    }
    std::string v15 = _Block_copy(aBlock);
    uint64_t v26 = v15;
    ResetDetection::add(v13, (uint64_t)&v27, 0, &v26, -1);
    if (v15) {
      _Block_release(v15);
    }
    operator delete(v14);
    *((unsigned char *)v33 + 24) = 1;
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    uint64_t v16 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
  }
  std::string v17 = *((void *)this + 17);
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 1174405120;
  v20[2] = ___ZN10BootModule9boot_syncEv_block_invoke_135;
  void v20[3] = &unk_270EAA668;
  v20[6] = this;
  v20[7] = v36;
  CFAllocatorRef v21 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v20[4] = &v32;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  v20[5] = &v38;
  dispatch_group_notify(v9, v17, v20);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v18 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    _Block_object_dispose(&v38, 8);
    if ((SHIBYTE(v44) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  _Block_object_dispose(&v38, 8);
  if (SHIBYTE(v44) < 0) {
LABEL_35:
  }
    operator delete(v42);
LABEL_36:
  if (v9) {
    dispatch_release(v9);
  }
  _Block_object_dispose(&v32, 8);
  uint64_t v19 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_26372E3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_group_t group)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void BootModule::checkFSSyncStatus_sync(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(void *)(a1 + 120), (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (const void *)*MEMORY[0x263F26570];
  size_t v9 = strlen((const char *)*MEMORY[0x263F26570]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    size_t v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    unint64_t v24 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_12;
  }
  HIBYTE(v24) = v9;
  size_t v11 = __dst;
  if (v9) {
LABEL_12:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  xpc_object_t v14 = xpc_null_create();
  xpc_object_t v22 = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_101;
  aBlock[4] = a1;
  std::string v15 = *a2;
  if (*a2) {
    std::string v15 = _Block_copy(v15);
  }
  uint64_t v18 = v15;
  uint64_t v19 = v5;
  std::string v20 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = _Block_copy(aBlock);
  CFAllocatorRef v21 = v16;
  Service::runCommand(a1, (uint64_t)__dst, &v22, &v21);
  if (v16) {
    _Block_release(v16);
  }
  xpc_release(v14);
  xpc_object_t v22 = 0;
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v18) {
    _Block_release(v18);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_26372E6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v26) {
    _Block_release(v26);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v27);
  if (a25 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke(void *a1, int a2, xpc_object_t *a3)
{
  int v4 = (std::__shared_weak_count *)a1[7];
  if (!v4) {
    return;
  }
  long long v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  size_t v9 = v8;
  if (a1[6])
  {
    xpc_object_t v10 = *a3;
    if (*a3)
    {
      xpc_retain(*a3);
      size_t v11 = (const void *)a1[5];
      if (v11) {
        goto LABEL_6;
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      size_t v11 = (const void *)a1[5];
      if (v11)
      {
LABEL_6:
        uint64_t v12 = _Block_copy(v11);
        uint64_t v13 = (std::__shared_weak_count *)v7[16];
        if (!v13) {
LABEL_25:
        }
          std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_10:
        uint64_t v14 = v7[15];
        std::string v15 = std::__shared_weak_count::lock(v13);
        if (!v15) {
          goto LABEL_25;
        }
        uint64_t v16 = v15;
        std::string v17 = operator new(0x18uLL);
        *(_DWORD *)std::string v17 = a2;
        v17[1] = v10;
        xpc_object_t v18 = xpc_null_create();
        if (v12) {
          uint64_t v19 = _Block_copy(v12);
        }
        else {
          uint64_t v19 = 0;
        }
        v17[2] = v19;
        std::string v20 = v7[17];
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        CFAllocatorRef v21 = operator new(0x18uLL);
        *CFAllocatorRef v21 = v17;
        v21[1] = v14;
        v21[2] = v16;
        dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_);
        if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (!v12) {
            goto LABEL_19;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          if (!v12)
          {
LABEL_19:
            xpc_release(v18);
            goto LABEL_20;
          }
        }
        _Block_release(v12);
        goto LABEL_19;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = (std::__shared_weak_count *)v7[16];
    if (!v13) {
      goto LABEL_25;
    }
    goto LABEL_10;
  }
LABEL_20:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void *__copy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(void *a1, void *a2)
{
  xpc_object_t result = (void *)a2[5];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[6];
  uint64_t v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void BootModule::softReset_sync(uint64_t a1, const ResetInfo *a2, void **a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A99F6E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v27 = (config::hw *)__cxa_guard_acquire(&qword_26A99F6E0);
    if (v27)
    {
      int v28 = config::hw::watch(v27);
      uint64_t v29 = 12;
      if (v28) {
        uint64_t v29 = 18;
      }
      _MergedGlobals_3 = v29;
      __cxa_guard_release(&qword_26A99F6E0);
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v6 || (v7 = *(void *)(a1 + 120), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v50 = 0;
    xpc_object_t v10 = std::__shared_weak_count::lock(v8);
    unint64_t v51 = v10;
    if (v10)
    {
LABEL_6:
      uint64_t v50 = v7;
      goto LABEL_9;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v50 = 0;
    xpc_object_t v10 = std::__shared_weak_count::lock(v9);
    unint64_t v51 = v10;
    if (v10) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
LABEL_9:
  unint64_t v48 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v49 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_121;
  aBlock[4] = a1;
  void aBlock[5] = v7;
  uint64_t v39 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v11 = *a3;
  if (*a3) {
    size_t v11 = _Block_copy(v11);
  }
  char v40 = v11;
  ResetInfo::ResetInfo(&v41, a2);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = *(NSObject **)(a1 + 136);
  if (v13) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  unint64_t v48 = v12;
  dispatch_object_t v49 = v13;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v37 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v15 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&v52, v14);
    long long v16 = v52;
    long long v52 = 0uLL;
    std::string v17 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v16;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    xpc_object_t v18 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    if (*((void *)&v52 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v15 = off_26A99F170;
  }
  uint64_t v19 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v32 = v15;
  uint64_t v33 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v15 + 16))(&v34, v15);
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v35)
  {
    uint64_t v37 = std::__shared_weak_count::lock(v35);
    if (v37) {
      unint64_t v36 = v34;
    }
    if (v35) {
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = v36;
    if (!v36) {
      goto LABEL_43;
    }
  }
  else
  {
    unint64_t v20 = v36;
    if (!v36) {
      goto LABEL_43;
    }
  }
  uint64_t v21 = *(void *)(a1 + 480);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 5);
  }
  xpc_object_t v22 = v48;
  if (v48) {
    xpc_object_t v22 = _Block_copy(v48);
  }
  uint64_t v30 = v22;
  dispatch_object_t object = v49;
  if (v49) {
    dispatch_retain(v49);
  }
  (*(void (**)(unint64_t, uint64_t, void **))(*(void *)v20 + 56))(v20, 8000000000, &v30);
  if (object) {
    dispatch_release(object);
  }
  if (v30) {
    _Block_release(v30);
  }
LABEL_43:
  uint64_t v23 = v37;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v49) {
    dispatch_release(v49);
  }
  if (v48) {
    _Block_release(v48);
  }
  if (v47 < 0)
  {
    operator delete(__p);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_52:
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_58;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v42);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_54:
    unint64_t v24 = v40;
    if (!v40) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v41.__r_.__value_.__l.__data_);
  unint64_t v24 = v40;
  if (v40) {
LABEL_60:
  }
    _Block_release(v24);
LABEL_61:
  CFAllocatorRef v25 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v51;
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_26372EF60(_Unwind_Exception *a1)
{
}

void sub_26372EF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  ResetInfo::~ResetInfo(v25);
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v26 + 40);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v27 - 96);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(void *a1, ctu::cf **a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[4];
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  if (*a2) {
    int v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    int v4 = 0;
  }
  if (!v4)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Soft reset issued; waiting for reset detection",
        buf,
        2u);
    }
    uint64_t v8 = *(void *)(v3 + 176);
    size_t v9 = (char *)operator new(0x20uLL);
    unint64_t v46 = v9;
    long long v47 = xmmword_2637A8350;
    strcpy(v9, "Soft Reset Wait for Reset");
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 1174405120;
    v35[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_103;
    v35[3] = &__block_descriptor_tmp_117;
    uint64_t v11 = a1[5];
    xpc_object_t v10 = (std::__shared_weak_count *)a1[6];
    v35[4] = v3;
    v35[5] = v11;
    unint64_t v36 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (void *)a1[7];
    if (v12) {
      uint64_t v12 = _Block_copy(v12);
    }
    aBlock = v12;
    ResetInfo::ResetInfo(&v38, (const ResetInfo *)(a1 + 8));
    uint64_t v13 = _Block_copy(v35);
    char v45 = v13;
    dispatch_time_t v14 = dispatch_time(0, 1000000000 * _MergedGlobals_3);
    ResetDetection::add(v8, (uint64_t)&v46, 1, &v45, v14);
    if (v13) {
      _Block_release(v13);
    }
    operator delete(v9);
    if (v44 < 0)
    {
      operator delete(__p);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_26;
      }
    }
    else if ((v42 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v41);
    if ((v40 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v39);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v15 = aBlock;
      if (!aBlock) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v38.__r_.__value_.__l.__data_);
    uint64_t v15 = aBlock;
    if (!aBlock)
    {
LABEL_29:
      long long v16 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
        if ((SHIBYTE(v67) & 0x80000000) == 0) {
          return;
        }
        goto LABEL_82;
      }
      goto LABEL_81;
    }
LABEL_28:
    _Block_release(v15);
    goto LABEL_29;
  }
  ctu::cf::show((uint64_t *)buf, *a2, a2);
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  long long v66 = *(_OWORD *)buf;
  uint64_t v67 = v69;
  uint64_t v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    std::string v17 = &v66;
    if (v67 < 0) {
      std::string v17 = (long long *)v66;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "Soft reset failed; falling back to hard reset: %{public}s",
      buf,
      0xCu);
    uint64_t v6 = a1[7];
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = a1[7];
    if ((SHIBYTE(v67) & 0x80000000) == 0)
    {
LABEL_9:
      *(_OWORD *)long long buf = v66;
      *(void *)&long long v69 = v67;
      goto LABEL_37;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v66, *((std::string::size_type *)&v66 + 1));
LABEL_37:
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v6 + 16))(v6, 3760250880, buf);
  if (SBYTE7(v69) < 0)
  {
    operator delete(*(void **)buf);
    uint64_t v18 = v3 + 152;
    if ((long long *)(v3 + 152) == &v66) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v18 = v3 + 152;
    if ((long long *)(v3 + 152) == &v66) {
      goto LABEL_52;
    }
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (v67 >= 0) {
      uint64_t v19 = &v66;
    }
    else {
      uint64_t v19 = (long long *)v66;
    }
    if (v67 >= 0) {
      size_t v20 = HIBYTE(v67);
    }
    else {
      size_t v20 = *((void *)&v66 + 1);
    }
    std::string::__assign_no_alias<false>((void **)v18, v19, v20);
  }
  else if (v67 < 0)
  {
    std::string::__assign_no_alias<true>((void *)v18, (void *)v66, *((size_t *)&v66 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v18 = v66;
    *(void *)(v18 + 16) = v67;
  }
LABEL_52:
  uint64_t v21 = *(void *)(v3 + 480);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 104))(v21, 7);
  }
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v73 = v22;
  long long v74 = v22;
  long long v71 = v22;
  long long v72 = v22;
  long long v69 = v22;
  long long v70 = v22;
  *(_OWORD *)long long buf = v22;
  uint64_t v23 = (const void *)*MEMORY[0x263F26178];
  size_t v24 = strlen((const char *)*MEMORY[0x263F26178]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    p_dst = (long long *)operator new(v27 + 1);
    *((void *)&__dst + 1) = v25;
    unint64_t v65 = v28 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_61;
  }
  HIBYTE(v65) = v24;
  p_dst = &__dst;
  if (v24) {
LABEL_61:
  }
    memmove(p_dst, v23, v25);
  *((unsigned char *)p_dst + v25) = 0;
  uint64_t v29 = (const void *)*MEMORY[0x263F26718];
  size_t v30 = strlen((const char *)*MEMORY[0x263F26718]);
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v31 = v30;
  if (v30 >= 0x17)
  {
    uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v33 = v30 | 7;
    }
    uint64_t v34 = v33 + 1;
    uint64_t v32 = operator new(v33 + 1);
    *((void *)&v62 + 1) = v31;
    unint64_t v63 = v34 | 0x8000000000000000;
    *(void *)&long long v62 = v32;
    goto LABEL_69;
  }
  HIBYTE(v63) = v30;
  uint64_t v32 = &v62;
  if (v30) {
LABEL_69:
  }
    memmove(v32, v29, v31);
  *((unsigned char *)v32 + v31) = 0;
  Timestamp::Timestamp((Timestamp *)v58);
  Timestamp::asString((uint64_t)v58, 0, 9, v60);
  char v57 = 0;
  LOBYTE(v56) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v62, (long long *)v18, (uint64_t)v60, 7, &v56);
  if ((v61 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
    if ((SHIBYTE(v63) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_85:
    operator delete((void *)v62);
    if ((SHIBYTE(v65) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_86;
  }
  operator delete(v60[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
  if (SHIBYTE(v63) < 0) {
    goto LABEL_85;
  }
LABEL_72:
  if ((SHIBYTE(v65) & 0x80000000) == 0) {
    goto LABEL_73;
  }
LABEL_86:
  operator delete((void *)__dst);
LABEL_73:
  ResetInfo::ResetInfo(&v49, (const ResetInfo *)buf);
  unint64_t v48 = 0;
  BootModule::handleReset_sync(v3, (uint64_t)&v49, &v48);
  if (v55 < 0)
  {
    operator delete(v54);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_75:
      if ((v51 & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_89;
    }
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v52);
  if ((v51 & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v50);
  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v74) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v49.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SBYTE7(v72) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete(*((void **)&v73 + 1));
  if ((SBYTE7(v72) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete((void *)v71);
  if (SHIBYTE(v70) < 0)
  {
LABEL_93:
    operator delete(*((void **)&v69 + 1));
    if (SBYTE7(v69) < 0) {
      goto LABEL_94;
    }
LABEL_81:
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_82;
  }
LABEL_80:
  if ((SBYTE7(v69) & 0x80000000) == 0) {
    goto LABEL_81;
  }
LABEL_94:
  operator delete(*(void **)buf);
  if (SHIBYTE(v67) < 0) {
LABEL_82:
  }
    operator delete((void *)v66);
}

void sub_26372F738(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_103(void *a1, int a2)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[4];
  if (!a2)
  {
    uint64_t v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset detection observed for soft reset", (uint8_t *)&buf, 2u);
    }
    usleep(0x249F0u);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_104;
    aBlock[3] = &__block_descriptor_tmp_112_0;
    aBlock[4] = v3;
    uint64_t v8 = (void *)a1[7];
    if (v8) {
      uint64_t v8 = _Block_copy(v8);
    }
    unint64_t v65 = v8;
    ResetInfo::ResetInfo(&v66, (const ResetInfo *)(a1 + 8));
    size_t v9 = (std::__shared_weak_count *)a1[6];
    uint64_t v73 = a1[5];
    long long v74 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v10 = _Block_copy(aBlock);
    uint64_t v75 = v10;
    BootModule::checkFSSyncStatus_sync(v3, &v75);
    if (v10) {
      _Block_release(v10);
    }
    uint64_t v11 = v74;
    if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((v70 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_45;
      }
    }
    else if ((v72 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(__p);
    if ((v70 & 0x80000000) == 0)
    {
LABEL_23:
      if ((v68 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v69);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v67);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      uint64_t v12 = v65;
      if (!v65) {
        return;
      }
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v66.__r_.__value_.__l.__data_);
    uint64_t v12 = v65;
    if (!v65) {
      return;
    }
LABEL_48:
    _Block_release(v12);
    return;
  }
  int v4 = (char *)operator new(0x38uLL);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_2637A8360;
  strcpy(v4, "Soft reset failed; timeout waiting for reset detection");
  uint64_t v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    uint64_t v6 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  uint64_t v6 = *(NSObject **)(v3 + 88);
  BOOL v14 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (IsCarrierBuild)
  {
    if (!v14)
    {
LABEL_7:
      if ((std::string *)(v3 + 152) != &v63)
      {
        if (*(char *)(v3 + 175) < 0)
        {
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v16 = &v63;
          }
          else {
            long long v16 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v63.__r_.__value_.__l.__size_;
          }
          std::string::__assign_no_alias<false>((void **)(v3 + 152), v16, size);
        }
        else if ((*((unsigned char *)&v63.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((void *)(v3 + 152), v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)(v3 + 152) = v63;
        }
      }
      uint64_t v18 = a1[7];
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      }
      else
      {
        long long buf = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        *(void *)&long long v77 = *((void *)&v63.__r_.__value_.__l + 2);
      }
      (*(void (**)(uint64_t, uint64_t, long long *))(v18 + 16))(v18, 3760250880, &buf);
      if (SBYTE7(v77) < 0) {
        operator delete((void *)buf);
      }
      *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v81 = v19;
      long long v82 = v19;
      long long v79 = v19;
      long long v80 = v19;
      long long v77 = v19;
      long long v78 = v19;
      long long buf = v19;
      size_t v20 = (const void *)*MEMORY[0x263F26178];
      size_t v21 = strlen((const char *)*MEMORY[0x263F26178]);
      if (v21 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v22 = v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        p_dst = (long long *)operator new(v24 + 1);
        *((void *)&__dst + 1) = v22;
        unint64_t v62 = v25 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v62) = v21;
        p_dst = &__dst;
        if (!v21)
        {
LABEL_63:
          *((unsigned char *)p_dst + v22) = 0;
          uint64_t v26 = (const void *)*MEMORY[0x263F267D0];
          size_t v27 = strlen((const char *)*MEMORY[0x263F267D0]);
          if (v27 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v28 = v27;
          if (v27 >= 0x17)
          {
            uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v30 = v27 | 7;
            }
            uint64_t v31 = v30 + 1;
            uint64_t v29 = operator new(v30 + 1);
            *((void *)&v59 + 1) = v28;
            unint64_t v60 = v31 | 0x8000000000000000;
            *(void *)&long long v59 = v29;
          }
          else
          {
            HIBYTE(v60) = v27;
            uint64_t v29 = &v59;
            if (!v27)
            {
LABEL_71:
              v29[v28] = 0;
              Timestamp::Timestamp((Timestamp *)v55);
              Timestamp::asString((uint64_t)v55, 0, 9, v57);
              char v54 = 0;
              LOBYTE(v53) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v59, (long long *)(v3 + 152), (uint64_t)v57, 7, &v53);
              if (v58 < 0)
              {
                operator delete(v57[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v55, v56);
                if ((SHIBYTE(v60) & 0x80000000) == 0)
                {
LABEL_73:
                  if ((SHIBYTE(v62) & 0x80000000) == 0) {
                    goto LABEL_74;
                  }
LABEL_85:
                  operator delete((void *)__dst);
LABEL_74:
                  ResetInfo::ResetInfo(&v46, (const ResetInfo *)&buf);
                  char v45 = 0;
                  BootModule::handleReset_sync(v3, (uint64_t)&v46, &v45);
                  if (v52 < 0)
                  {
                    operator delete(v51);
                    if ((v50 & 0x80000000) == 0)
                    {
LABEL_76:
                      if ((v48 & 0x80000000) == 0) {
                        goto LABEL_77;
                      }
                      goto LABEL_88;
                    }
                  }
                  else if ((v50 & 0x80000000) == 0)
                  {
                    goto LABEL_76;
                  }
                  operator delete(v49);
                  if ((v48 & 0x80000000) == 0)
                  {
LABEL_77:
                    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      goto LABEL_78;
                    }
                    goto LABEL_89;
                  }
LABEL_88:
                  operator delete(v47);
                  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_78:
                    if ((SHIBYTE(v82) & 0x80000000) == 0) {
                      goto LABEL_79;
                    }
                    goto LABEL_90;
                  }
LABEL_89:
                  operator delete(v46.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v82) & 0x80000000) == 0)
                  {
LABEL_79:
                    if ((SBYTE7(v80) & 0x80000000) == 0) {
                      goto LABEL_80;
                    }
                    goto LABEL_91;
                  }
LABEL_90:
                  operator delete(*((void **)&v81 + 1));
                  if ((SBYTE7(v80) & 0x80000000) == 0)
                  {
LABEL_80:
                    if ((SHIBYTE(v78) & 0x80000000) == 0) {
                      goto LABEL_81;
                    }
                    goto LABEL_92;
                  }
LABEL_91:
                  operator delete((void *)v79);
                  if ((SHIBYTE(v78) & 0x80000000) == 0)
                  {
LABEL_81:
                    if ((SBYTE7(v77) & 0x80000000) == 0) {
                      goto LABEL_110;
                    }
LABEL_93:
                    operator delete((void *)buf);
                    goto LABEL_110;
                  }
LABEL_92:
                  operator delete(*((void **)&v77 + 1));
                  if ((SBYTE7(v77) & 0x80000000) == 0) {
                    goto LABEL_110;
                  }
                  goto LABEL_93;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v55, v56);
                if ((SHIBYTE(v60) & 0x80000000) == 0) {
                  goto LABEL_73;
                }
              }
              operator delete((void *)v59);
              if ((SHIBYTE(v62) & 0x80000000) == 0) {
                goto LABEL_74;
              }
              goto LABEL_85;
            }
          }
          memmove(v29, v26, v28);
          goto LABEL_71;
        }
      }
      memmove(p_dst, v20, v22);
      goto LABEL_63;
    }
LABEL_6:
    LOWORD(buf) = 0;
    _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Dumping logs", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  if (v14)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I Falling back to hard reset", (uint8_t *)&buf, 2u);
  }
  ResetInfo::ResetInfo(&v38, (const ResetInfo *)(a1 + 8));
  v34[0] = MEMORY[0x263EF8330];
  v34[1] = 1174405120;
  uint64_t v34[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_114;
  v34[3] = &__block_descriptor_tmp_115;
  uint64_t v15 = (void *)a1[7];
  if (v15) {
    uint64_t v15 = _Block_copy(v15);
  }
  char v35 = v15;
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v36, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v36 = v63;
  }
  uint64_t v32 = _Block_copy(v34);
  uint64_t v37 = v32;
  BootModule::hardReset_sync(v3, (uint64_t)&v38, (uint64_t *)&v37);
  if (v32) {
    _Block_release(v32);
  }
  if (v44 < 0)
  {
    operator delete(v43);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_99:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_106;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v41);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
LABEL_108:
    operator delete(v36.__r_.__value_.__l.__data_);
    uint64_t v33 = v35;
    if (!v35) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
LABEL_107:
  operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_108;
  }
LABEL_102:
  uint64_t v33 = v35;
  if (v35) {
LABEL_109:
  }
    _Block_release(v33);
LABEL_110:
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_263730060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ResetInfo::~ResetInfo(&a19);
  if (a68 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_104(void *a1, int a2, int a3)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[4];
  uint64_t v7 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Check FS Sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
  if ((a2 & 1) != 0 || a3)
  {
    if (a2) {
      BOOL v14 = "Baseband shutdown during baseband filesystem sync";
    }
    else {
      BOOL v14 = "Baseband never started filesystem sync";
    }
    v80.__r_.__value_.__r.__words[2] = 0x13AAAAAA00AAAAAALL;
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)"Soft reset failed: ";
    *(_DWORD *)((char *)&v80.__r_.__value_.__r.__words[1] + 7) = 540697701;
    if (a2) {
      std::string::size_type v15 = 49;
    }
    else {
      std::string::size_type v15 = 38;
    }
    std::string::append(&v80, v14, v15);
    if ((std::string *)(v6 + 152) != &v80)
    {
      if (*(char *)(v6 + 175) < 0)
      {
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v80;
        }
        else {
          uint64_t v37 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v80.__r_.__value_.__l.__size_;
        }
        std::string::__assign_no_alias<false>((void **)(v6 + 152), v37, size);
      }
      else if ((*((unsigned char *)&v80.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((void *)(v6 + 152), v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)(v6 + 152) = v80;
      }
    }
    uint64_t v39 = *(NSObject **)(v6 + 88);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      std::string v41 = &v80;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v41 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v41;
      _os_log_error_impl(&dword_26368A000, v39, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      uint64_t v40 = a1[5];
      if ((*((unsigned char *)&v80.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v40 = a1[5];
      if ((*((unsigned char *)&v80.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_73:
        *(_OWORD *)long long buf = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        *(void *)&long long v82 = *((void *)&v80.__r_.__value_.__l + 2);
        goto LABEL_78;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)buf, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
LABEL_78:
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v40 + 16))(v40, 3760250880, buf);
    if (SBYTE7(v82) < 0)
    {
      operator delete(*(void **)buf);
      uint64_t v42 = *(void *)(v6 + 480);
      if (!v42) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v42 = *(void *)(v6 + 480);
      if (!v42)
      {
LABEL_83:
        *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v86 = v43;
        long long v87 = v43;
        long long v84 = v43;
        long long v85 = v43;
        long long v82 = v43;
        long long v83 = v43;
        *(_OWORD *)long long buf = v43;
        char v44 = (const void *)*MEMORY[0x263F26178];
        size_t v45 = strlen((const char *)*MEMORY[0x263F26178]);
        if (v45 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v46 = v45;
        if (v45 >= 0x17)
        {
          uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17) {
            uint64_t v48 = v45 | 7;
          }
          uint64_t v49 = v48 + 1;
          long long v47 = (long long *)operator new(v48 + 1);
          *((void *)&v78 + 1) = v46;
          unint64_t v79 = v49 | 0x8000000000000000;
          *(void *)&long long v78 = v47;
        }
        else
        {
          HIBYTE(v79) = v45;
          long long v47 = &v78;
          if (!v45)
          {
LABEL_91:
            *((unsigned char *)v47 + v46) = 0;
            char v50 = (const void *)*MEMORY[0x263F26838];
            size_t v51 = strlen((const char *)*MEMORY[0x263F26838]);
            if (v51 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v52 = v51;
            if (v51 >= 0x17)
            {
              uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v51 | 7) != 0x17) {
                uint64_t v54 = v51 | 7;
              }
              uint64_t v55 = v54 + 1;
              long long v53 = operator new(v54 + 1);
              *((void *)&v76 + 1) = v52;
              unint64_t v77 = v55 | 0x8000000000000000;
              *(void *)&long long v76 = v53;
            }
            else
            {
              HIBYTE(v77) = v51;
              long long v53 = &v76;
              if (!v51)
              {
LABEL_99:
                v53[v52] = 0;
                Timestamp::Timestamp((Timestamp *)v72);
                Timestamp::asString((uint64_t)v72, 0, 9, __p);
                char v71 = 0;
                LOBYTE(v70) = 0;
                ResetInfo::ResetInfo((std::string *)buf, &v78, &v76, (long long *)(v6 + 152), (uint64_t)__p, 7, &v70);
                if (v75 < 0)
                {
                  operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v72, v73);
                  if ((SHIBYTE(v77) & 0x80000000) == 0)
                  {
LABEL_101:
                    if ((SHIBYTE(v79) & 0x80000000) == 0) {
                      goto LABEL_102;
                    }
LABEL_114:
                    operator delete((void *)v78);
LABEL_102:
                    ResetInfo::ResetInfo(&v63, (const ResetInfo *)buf);
                    unint64_t v62 = 0;
                    BootModule::handleReset_sync(v6, (uint64_t)&v63, &v62);
                    if (v69 < 0)
                    {
                      operator delete(v68);
                      if ((v67 & 0x80000000) == 0)
                      {
LABEL_104:
                        if ((v65 & 0x80000000) == 0) {
                          goto LABEL_105;
                        }
                        goto LABEL_117;
                      }
                    }
                    else if ((v67 & 0x80000000) == 0)
                    {
                      goto LABEL_104;
                    }
                    operator delete(v66);
                    if ((v65 & 0x80000000) == 0)
                    {
LABEL_105:
                      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_106;
                      }
                      goto LABEL_118;
                    }
LABEL_117:
                    operator delete(v64);
                    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v87) & 0x80000000) == 0) {
                        goto LABEL_107;
                      }
                      goto LABEL_119;
                    }
LABEL_118:
                    operator delete(v63.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v87) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v85) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                      goto LABEL_120;
                    }
LABEL_119:
                    operator delete(*((void **)&v86 + 1));
                    if ((SBYTE7(v85) & 0x80000000) == 0)
                    {
LABEL_108:
                      if ((SHIBYTE(v83) & 0x80000000) == 0) {
                        goto LABEL_109;
                      }
                      goto LABEL_121;
                    }
LABEL_120:
                    operator delete((void *)v84);
                    if ((SHIBYTE(v83) & 0x80000000) == 0)
                    {
LABEL_109:
                      if ((SBYTE7(v82) & 0x80000000) == 0) {
                        goto LABEL_110;
                      }
                      goto LABEL_122;
                    }
LABEL_121:
                    operator delete(*((void **)&v82 + 1));
                    if ((SBYTE7(v82) & 0x80000000) == 0)
                    {
LABEL_110:
                      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        return;
                      }
                      goto LABEL_123;
                    }
LABEL_122:
                    operator delete(*(void **)buf);
                    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                      return;
                    }
LABEL_123:
                    operator delete(v80.__r_.__value_.__l.__data_);
                    return;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v72, v73);
                  if ((SHIBYTE(v77) & 0x80000000) == 0) {
                    goto LABEL_101;
                  }
                }
                operator delete((void *)v76);
                if ((SHIBYTE(v79) & 0x80000000) == 0) {
                  goto LABEL_102;
                }
                goto LABEL_114;
              }
            }
            memmove(v53, v50, v52);
            goto LABEL_99;
          }
        }
        memmove(v47, v44, v46);
        goto LABEL_91;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 104))(v42, 7);
    goto LABEL_83;
  }
  uint64_t v8 = *(void *)(v6 + 480);
  if (v8)
  {
    size_t v9 = (capabilities::ipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 104))(v8, 6);
    if (capabilities::ipc::supportsPCI(v9)) {
      (*(void (**)(void))(**(void **)(v6 + 480) + 64))(*(void *)(v6 + 480));
    }
  }
  uint64_t v10 = a1[5];
  BYTE7(v82) = 0;
  buf[0] = 0;
  (*(void (**)(void))(v10 + 16))();
  if (SBYTE7(v82) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)&long long v78 = 0;
  uint64_t v11 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    *(void *)&long long v78 = Mutable;
  }
  else {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)v78;
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26478], v11, v13);
  ResetInfo::addToDict((uint64_t)(a1 + 6), (__CFDictionary **)&v78, v16, v17, v18);
  v80.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v80.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  long long v19 = (uint64_t *)off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(buf);
    long long v20 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    size_t v21 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    size_t v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    long long v19 = (uint64_t *)off_26A99F030;
  }
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v80.__r_.__value_.__l.__size_ = *(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v23 = (const void *)*MEMORY[0x263F26650];
  size_t v24 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v28 = v24 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v26 = (void **)operator new(v28 + 1);
    __dst[1] = v25;
    unint64_t v61 = v29 | 0x8000000000000000;
    __dst[0] = v26;
LABEL_41:
    memmove(v26, v23, (size_t)v25);
    *((unsigned char *)v25 + (void)v26) = 0;
    size_t v27 = (const void *)v78;
    if (!(void)v78) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  HIBYTE(v61) = v24;
  uint64_t v26 = __dst;
  if (v24) {
    goto LABEL_41;
  }
  LOBYTE(__dst[0]) = 0;
  size_t v27 = (const void *)v78;
  if (!(void)v78) {
    goto LABEL_44;
  }
LABEL_42:
  CFTypeID v30 = CFGetTypeID(v27);
  if (v30 == CFDictionaryGetTypeID())
  {
    long long v59 = v27;
    CFRetain(v27);
    goto LABEL_45;
  }
LABEL_44:
  size_t v27 = 0;
  long long v59 = 0;
LABEL_45:
  v56[0] = MEMORY[0x263EF8330];
  v56[1] = 1174405120;
  v56[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_108;
  v56[3] = &__block_descriptor_tmp_110;
  uint64_t v32 = a1[20];
  uint64_t v31 = (std::__shared_weak_count *)a1[21];
  v56[4] = v6;
  void v56[5] = v32;
  char v57 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = _Block_copy(v56);
  char v58 = v33;
  ABMServer::broadcast(v19, (uint64_t)__dst, &v59, &v58);
  if (v33) {
    _Block_release(v33);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v34 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    char v35 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
    if (!v80.__r_.__value_.__l.__size_) {
      goto LABEL_57;
    }
  }
  else
  {
    char v35 = (std::__shared_weak_count *)v80.__r_.__value_.__l.__size_;
    if (!v80.__r_.__value_.__l.__size_) {
      goto LABEL_57;
    }
  }
  if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    std::string v36 = (const void *)v78;
    if ((void)v78) {
      goto LABEL_58;
    }
    return;
  }
LABEL_57:
  std::string v36 = (const void *)v78;
  if ((void)v78) {
LABEL_58:
  }
    CFRelease(v36);
}

void sub_263730B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_109;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(std::string *a1, void *a2)
{
  int v4 = (void *)a2[5];
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  ResetInfo::ResetInfo(a1 + 2, (const ResetInfo *)(a2 + 6));
  std::string::size_type v5 = a2[21];
  a1[6].__r_.__value_.__r.__words[2] = a2[20];
  a1[7].__r_.__value_.__r.__words[0] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_263730E74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 40);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_4:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    uint64_t v3 = *(const void **)(a1 + 40);
    if (!v3) {
      return;
    }
    goto LABEL_14;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
LABEL_14:
  }
    _Block_release(v3);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_114(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_263731004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a2 + 32);
  if (v4) {
    int v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  std::string::size_type v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_263731088(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(const void **)(a1 + 32);
    if (!v2) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
LABEL_5:
  }
    _Block_release(v2);
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[6];
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v5 = (void *)a2[7];
  if (v5) {
    std::string::size_type v5 = _Block_copy(v5);
  }
  *(void *)(a1 + 56) = v5;
  ResetInfo::ResetInfo((std::string *)(a1 + 64), (const ResetInfo *)(a2 + 8));
}

void sub_26373115C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(const void **)(v2 + 56);
  if (v4) {
    _Block_release(v4);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = *(const void **)(a1 + 56);
    if (!v2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
LABEL_11:
  }
    _Block_release(v2);
LABEL_12:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BootModule::shutdown_sync(uint64_t a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  uint64_t v42 = &v41;
  uint64_t v43 = 0x4002000000;
  char v44 = __Block_byref_object_copy__0;
  size_t v45 = __Block_byref_object_dispose__0;
  memset(&v46, 0, sizeof(v46));
  if (*(_DWORD *)(a1 + 456) == 8)
  {
    std::string::__assign_external(&v46, "BootModule already in shutdown state", 0x24uLL);
    uint64_t v3 = (void (**)(void *, void, std::string *))*a2;
    if (*((char *)v42 + 63) < 0) {
      std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v42[5], v42[6]);
    }
    else {
      std::string buf = *(std::string *)(v42 + 5);
    }
    v3[2](v3, 0, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      _Block_object_dispose(&v41, 8);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_66;
    }
LABEL_65:
    _Block_object_dispose(&v41, 8);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_66;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 128);
  uint64_t v39 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (uint64_t v40 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v37 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &unk_270EAA538;
  void aBlock[5] = a1;
  void aBlock[6] = v6;
  char v35 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[4] = &v41;
  uint64_t v8 = (void (**)(void *, void, std::string *))*a2;
  if (*a2) {
    uint64_t v8 = (void (**)(void *, void, std::string *))_Block_copy(v8);
  }
  std::string v36 = v8;
  size_t v9 = _Block_copy(aBlock);
  uint64_t v10 = *(NSObject **)(a1 + 136);
  if (v10) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  uint64_t v37 = v9;
  dispatch_object_t object = v10;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v33 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v11 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v12 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)&buf, v11);
    long long v13 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    BOOL v14 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    size_t size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v12 = off_26A99F170;
  }
  uint64_t v16 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  uint64_t v28 = v12;
  uint64_t v29 = *(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v12 + 16))(&v30, v12);
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  if (v31)
  {
    uint64_t v33 = std::__shared_weak_count::lock(v31);
    if (v33) {
      unint64_t v32 = v30;
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v17 = v32;
    if (!v32) {
      goto LABEL_44;
    }
  }
  else
  {
    unint64_t v17 = v32;
    if (!v32) {
      goto LABEL_44;
    }
  }
  if (*(unsigned char *)(a1 + 192))
  {
    CFAllocatorRef v18 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
      _os_log_impl(&dword_26368A000, v18, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband requested with timeout %llu sec", (uint8_t *)&buf, 0xCu);
    }
    long long v19 = v37;
    if (v37) {
      long long v19 = _Block_copy(v37);
    }
    uint64_t v26 = v19;
    dispatch_object_t v27 = object;
    if (object) {
      dispatch_retain(object);
    }
    (*(void (**)(unint64_t, uint64_t, void **))(*(void *)v17 + 64))(v17, 10000000000, &v26);
    if (v27) {
      dispatch_release(v27);
    }
    if (v26) {
      _Block_release(v26);
    }
    goto LABEL_52;
  }
LABEL_44:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 8);
  if (*(void *)(a1 + 480))
  {
    std::string::__assign_external((std::string *)(v42 + 5), "Transport clients are not started yet", 0x25uLL);
    long long v20 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = v42 + 5;
      if (*((char *)v42 + 63) < 0) {
        uint64_t v25 = (void *)*v25;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_error_impl(&dword_26368A000, v20, OS_LOG_TYPE_ERROR, "Poweroff baseband request skipped (powercycle anyway); Error: %s",
        (uint8_t *)&buf,
        0xCu);
    }
    (*(void (**)(void))(**(void **)(a1 + 480) + 72))(*(void *)(a1 + 480));
  }
  size_t v21 = (void (**)(void *, void, std::string *))*a2;
  if (*((char *)v42 + 63) < 0) {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v42[5], v42[6]);
  }
  else {
    std::string buf = *(std::string *)(v42 + 5);
  }
  v21[2](v21, 3760250880, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_52:
  size_t v22 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37) {
    _Block_release(v37);
  }
  if (v36) {
    _Block_release(v36);
  }
  uint64_t v23 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    size_t v24 = v40;
    if (!v40) {
      goto LABEL_65;
    }
  }
  else
  {
    size_t v24 = v40;
    if (!v40) {
      goto LABEL_65;
    }
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  _Block_object_dispose(&v41, 8);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
LABEL_66:
  }
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_26373193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a27);
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v29 + 48);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(void *a1, ctu::cf **a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)a1[5];
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    (*(void (**)(void, uint64_t))(*v3 + 96))(a1[5], 8);
    ctu::cf::show((uint64_t *)&buf, *a2, v6);
    uint64_t v7 = *(void *)(a1[4] + 8);
    uint64_t v8 = (void **)(v7 + 40);
    if (*(char *)(v7 + 63) < 0) {
      operator delete(*v8);
    }
    *(std::string *)uint64_t v8 = buf;
    size_t v9 = v3[11];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1[4] + 8);
      size_t v24 = (void *)(v23 + 40);
      if (*(char *)(v23 + 63) < 0) {
        size_t v24 = (void *)*v24;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "#I Poweroff baseband request failed; Error: %{public}s",
        (uint8_t *)&buf,
        0xCu);
      uint64_t v10 = v3[60];
      if (!v10) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v10 = v3[60];
      if (!v10)
      {
LABEL_10:
        uint64_t v11 = *(void *)(a1[4] + 8);
        uint64_t v12 = a1[8];
        if (*(char *)(v11 + 63) < 0) {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
        }
        else {
          std::string buf = *(std::string *)(v11 + 40);
        }
        (*(void (**)(uint64_t, uint64_t, std::string *))(v12 + 16))(v12, 3760250880, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v10 + 72))(v10);
    goto LABEL_10;
  }
  long long v13 = v3[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband request delivered; waiting for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  uint64_t v14 = v3[22];
  std::string::size_type v15 = (char *)operator new(0x28uLL);
  uint64_t v29 = v15;
  long long v30 = xmmword_2637A4D60;
  strcpy(v15, "Poweroff: Wait for reset detection");
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_124;
  aBlock[3] = &unk_270EAA500;
  uint64_t v17 = a1[6];
  uint64_t v16 = (std::__shared_weak_count *)a1[7];
  void aBlock[5] = v3;
  void aBlock[6] = v17;
  uint64_t v26 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFAllocatorRef v18 = (void *)a1[8];
  if (v18) {
    CFAllocatorRef v18 = _Block_copy(v18);
  }
  uint64_t v19 = a1[4];
  dispatch_object_t v27 = v18;
  aBlock[4] = v19;
  long long v20 = _Block_copy(aBlock);
  uint64_t v28 = v20;
  dispatch_time_t v21 = dispatch_time(0, 10000000000);
  ResetDetection::add(v14, (uint64_t)&v29, 1, &v28, v21);
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v15);
  if (v27) {
    _Block_release(v27);
  }
  size_t v22 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_263731DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_124(void *a1, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)a1[5];
  (*(void (**)(void *, uint64_t))(*v4 + 96))(v4, 8);
  if (a2)
  {
    std::string::size_type v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    uint64_t v6 = *(void *)(a1[4] + 8);
    if (*(char *)(v6 + 63) < 0) {
      operator delete(*(void **)(v6 + 40));
    }
    *(void *)(v6 + 40) = v5;
    *(_OWORD *)(v6 + 48) = xmmword_2637A8370;
    uint64_t v7 = v4[11];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1[4] + 8);
      uint64_t v14 = (void *)(v13 + 40);
      if (*(char *)(v13 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
      uint64_t v8 = *(void *)(a1[4] + 8);
      uint64_t v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a1[4] + 8);
      uint64_t v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
      {
LABEL_6:
        std::string __p = *(std::string *)(v8 + 40);
LABEL_17:
        (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250883, &__p);
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 40), *(void *)(v8 + 48));
    goto LABEL_17;
  }
  uint64_t v10 = v4[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband success", (uint8_t *)&__p, 2u);
  }
  uint64_t v11 = *(void *)(a1[4] + 8);
  uint64_t v12 = a1[8];
  if (*(char *)(v11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
  }
  else {
    std::string __p = *(std::string *)(v11 + 40);
  }
  (*(void (**)(uint64_t, void, std::string *))(v12 + 16))(v12, 0, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t result = v4[60];
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
  }
  uint64_t result = v4[60];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 72))(result);
  }
  return result;
}

void sub_2637320F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[8];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(void *)(v2 + 480) != 0;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)
    || (*(unsigned char *)(v2 + 229) = 1, uint64_t v3 = *(NSObject **)(v2 + 88), !os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    uint64_t v4 = *(void *)(a1[4] + 8);
    if (*(unsigned char *)(v4 + 24)) {
      goto LABEL_4;
    }
LABEL_11:
    *(unsigned char *)(v4 + 24) = 0;
    if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  LOWORD(v11) = 0;
  _os_log_error_impl(&dword_26368A000, v3, OS_LOG_TYPE_ERROR, "Boot controller object has not been created!", (uint8_t *)&v11, 2u);
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (!*(unsigned char *)(v4 + 24)) {
    goto LABEL_11;
  }
LABEL_4:
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480)
                                                                                           + 48))(*(void *)(v2 + 480), *(void *)(a1[5] + 8) + 40);
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
LABEL_5:
    *(void *)(v2 + 232) = TelephonyUtilSystemMachTime();
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 480)
                                                                                             + 56))(*(void *)(v2 + 480), *(void *)(a1[5] + 8) + 40);
    if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
    {
      std::string::size_type v5 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *(void *)(a1[5] + 8);
        uint64_t v7 = (void *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        int v11 = 136315138;
        uint64_t v12 = v7;
        uint64_t v8 = "Failed on booting!: Reason: %s";
LABEL_17:
        _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
        return;
      }
    }
    return;
  }
LABEL_12:
  *(unsigned char *)(v2 + 229) = 1;
  std::string::size_type v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v10 = (void *)(v9 + 40);
    if (*(char *)(v9 + 63) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = 136315138;
    uint64_t v12 = v10;
    uint64_t v8 = "Failed on preparation for booting!: Reason: %s";
    goto LABEL_17;
  }
}

uint64_t __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_133(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "#I Recovery detected", v2, 2u);
  }
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    std::string::size_type v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_135(void *a1)
{
  uint64_t v1 = (void *)a1[6];
  if ((*((_DWORD *)v1 + 114) - 7) < 2) {
    return;
  }
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v29 = _os_activity_create(&dword_26368A000, "Baseband state: booted", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v29, &state);
    os_activity_scope_leave(&state);
    uint64_t v3 = v1[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband bootup succeeded", (uint8_t *)&state, 2u);
    }
    (*(void (**)(void *, uint64_t))(*v1 + 96))(v1, 3);
    v1[30] = TelephonyUtilSystemMachTime();
    state.opaque[0] = 0;
    uint64_t v4 = *MEMORY[0x263EFFB08];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable) {
      state.opaque[0] = (uint64_t)Mutable;
    }
    ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26308], v4, v6);
    uint64_t v7 = (std::__shared_weak_count *)v1[16];
    if (!v7 || (uint64_t v8 = v1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v10 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    BootModule::reportStatisticsBootUpTime_sync((BootModule *)v1);
    int v11 = (const void *)*MEMORY[0x263F26650];
    size_t v12 = strlen((const char *)*MEMORY[0x263F26650]);
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (void *)v12;
    if (v12 >= 0x17)
    {
      uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v17 = v12 | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v14 = (void **)operator new(v17 + 1);
      __dst[1] = v13;
      unint64_t v28 = v18 | 0x8000000000000000;
      __dst[0] = v14;
    }
    else
    {
      HIBYTE(v28) = v12;
      uint64_t v14 = __dst;
      if (!v12)
      {
        LOBYTE(__dst[0]) = 0;
        std::string::size_type v15 = (const void *)state.opaque[0];
        if (!state.opaque[0]) {
          goto LABEL_25;
        }
LABEL_23:
        CFTypeID v19 = CFGetTypeID(v15);
        if (v19 == CFDictionaryGetTypeID())
        {
          CFTypeRef cf = v15;
          CFRetain(v15);
LABEL_26:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)v1, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (SHIBYTE(v28) < 0) {
            operator delete(__dst[0]);
          }
          long long v20 = a1[9];
          dispatch_time_t v21 = v1[17];
          block[0] = MEMORY[0x263EF8330];
          block[1] = 1174405120;
          block[2] = ___ZN10BootModule9boot_syncEv_block_invoke_136;
          block[3] = &__block_descriptor_tmp_148_0;
          void block[4] = v1;
          block[5] = v8;
          size_t v24 = v10;
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_group_notify(v20, v21, block);
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          std::__shared_weak_count::__release_weak(v10);
          if (v15) {
            CFRelease(v15);
          }
          if (v29) {
            os_release(v29);
          }
          return;
        }
LABEL_25:
        CFTypeRef cf = 0;
        goto LABEL_26;
      }
    }
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    std::string::size_type v15 = (const void *)state.opaque[0];
    if (!state.opaque[0]) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  uint64_t v16 = v1[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_error_impl(&dword_26368A000, v16, OS_LOG_TYPE_ERROR, "Baseband bootup failed", (uint8_t *)&state, 2u);
  }
  (*(void (**)(void *, uint64_t))(*v1 + 96))(v1, 5);
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 0x40000000;
  v22[2] = ___ZN10BootModule9boot_syncEv_block_invoke_149;
  v22[3] = &unk_2655D5228;
  v22[4] = a1[5];
  v22[5] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v1 + 15, (uint64_t)v22);
}

void sub_263732ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 96));
  ctu::os::scoped_activity::~scoped_activity((void **)(v31 - 104));
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsBootUpTime_sync(BootModule *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of bootup time", buf, 2u);
  }
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v3) == MEMORY[0x263EF8708])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  int64_t v5 = time(0);
  xpc_object_t v6 = xpc_int64_create(v5);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v4, (const char *)*MEMORY[0x263F26670], v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t object = v4;
  *(void *)std::string buf = operator new(0x20uLL);
  long long v11 = xmmword_2637A67A0;
  strcpy(*(char **)buf, "CommandUpdateBBBootStats");
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v8 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v8);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v11) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(v4);
}

void sub_263732D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_136(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(v2 + 176);
  xpc_object_t v4 = (char *)operator new(0x19uLL);
  long long v11 = v4;
  long long v12 = xmmword_2637A5AB0;
  strcpy(v4, "Baseband Recovered Gate");
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_145;
  uint64_t v6 = a1[5];
  int64_t v5 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  void aBlock[5] = v6;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v7 = _Block_copy(aBlock);
  uint64_t v10 = v7;
  ResetDetection::add(v3, (uint64_t)&v11, 0, &v10, -1);
  if (v7) {
    _Block_release(v7);
  }
  operator delete(v4);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_263732EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (BootModule *)a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v17 = v4;
    if (v4)
    {
      int64_t v5 = v4;
      if (a1[5])
      {
        BootModule::bbResetFlag(v3, 0);
        uint64_t v6 = *((void *)v3 + 22);
        xpc_object_t v7 = (char *)operator new(0x19uLL);
        uint64_t v14 = v7;
        long long v15 = xmmword_2637A5AB0;
        strcpy(v7, "Baseband Crash Recovery");
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_3;
        aBlock[3] = &__block_descriptor_tmp_142;
        uint64_t v9 = a1[5];
        uint64_t v8 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        void aBlock[5] = v9;
        long long v12 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = _Block_copy(aBlock);
        uint64_t v13 = v10;
        ResetDetection::add(v6, (uint64_t)&v14, 1, &v13, -1);
        if (v10) {
          _Block_release(v10);
        }
        operator delete(v7);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_26373308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    _Block_release(v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  operator delete(v16);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void sub_2637330C8(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void BootModule::bbResetFlag(BootModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (v5 = *((void *)this + 15), (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  unsigned char v8[8] = a2;
  uint64_t v9 = *((void *)this + 17);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  void v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_3(void *a1)
{
  uint64_t v1 = (BootModule *)a1[4];
  if ((*((_DWORD *)v1 + 114) - 7) >= 2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      xpc_object_t v4 = std::__shared_weak_count::lock(v3);
      char v57 = v4;
      if (v4)
      {
        if (!a1[5])
        {
          uint64_t v10 = v4;
LABEL_60:
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
        BootModule::bbResetFlag(v1, 1);
        *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v54 = v5;
        long long v55 = v5;
        long long v52 = v5;
        long long v53 = v5;
        *(_OWORD *)&v50[16] = v5;
        long long v51 = v5;
        *(_OWORD *)char v50 = v5;
        uint64_t v6 = (const void *)*MEMORY[0x263F26178];
        size_t v7 = strlen((const char *)*MEMORY[0x263F26178]);
        if (v7 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v8 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v11 = v7 | 7;
          }
          uint64_t v12 = v11 + 1;
          p_dst = (long long *)operator new(v11 + 1);
          *((void *)&__dst + 1) = v8;
          unint64_t v49 = v12 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v49) = v7;
          p_dst = &__dst;
          if (!v7)
          {
LABEL_14:
            *((unsigned char *)p_dst + v8) = 0;
            uint64_t v13 = (const void *)*MEMORY[0x263F267A0];
            size_t v14 = strlen((const char *)*MEMORY[0x263F267A0]);
            if (v14 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v15 = v14;
            if (v14 >= 0x17)
            {
              uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17) {
                uint64_t v17 = v14 | 7;
              }
              uint64_t v18 = v17 + 1;
              uint64_t v16 = (long long *)operator new(v17 + 1);
              *((void *)&v46 + 1) = v15;
              unint64_t v47 = v18 | 0x8000000000000000;
              *(void *)&long long v46 = v16;
            }
            else
            {
              HIBYTE(v47) = v14;
              uint64_t v16 = &v46;
              if (!v14)
              {
LABEL_22:
                *((unsigned char *)v16 + v15) = 0;
                CFTypeID v19 = (char *)operator new(0x20uLL);
                char v44 = v19;
                long long v45 = xmmword_2637A8380;
                strcpy(v19, "** baseband crash detected");
                Timestamp::Timestamp((Timestamp *)v40);
                Timestamp::asString((uint64_t)v40, 0, 9, __p);
                char v39 = 0;
                LOBYTE(v38) = 0;
                ResetInfo::ResetInfo((std::string *)v50, &__dst, &v46, (long long *)&v44, (uint64_t)__p, 3, &v38);
                if (v43 < 0) {
                  operator delete(__p[0]);
                }
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v40, v41);
                operator delete(v19);
                if (SHIBYTE(v47) < 0) {
                  operator delete((void *)v46);
                }
                if (SHIBYTE(v49) < 0) {
                  operator delete((void *)__dst);
                }
                ResetInfo::ResetInfo(&v31, (const ResetInfo *)v50);
                uint64_t v30 = 0;
                BootModule::requestReset(v1, &v31, &v30);
                if (v37 < 0)
                {
                  operator delete(v36);
                  if ((v35 & 0x80000000) == 0)
                  {
LABEL_30:
                    if ((v33 & 0x80000000) == 0) {
                      goto LABEL_31;
                    }
                    goto LABEL_53;
                  }
                }
                else if ((v35 & 0x80000000) == 0)
                {
                  goto LABEL_30;
                }
                operator delete(v34);
                if ((v33 & 0x80000000) == 0)
                {
LABEL_31:
                  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_32;
                  }
LABEL_54:
                  operator delete(v31.__r_.__value_.__l.__data_);
LABEL_32:
                  long long v20 = (const void *)*MEMORY[0x263F26518];
                  size_t v21 = strlen((const char *)*MEMORY[0x263F26518]);
                  if (v21 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  size_t v22 = (void *)v21;
                  if (v21 >= 0x17)
                  {
                    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17) {
                      uint64_t v24 = v21 | 7;
                    }
                    uint64_t v25 = v24 + 1;
                    uint64_t v23 = operator new(v24 + 1);
                    v28[1] = v22;
                    unint64_t v29 = v25 | 0x8000000000000000;
                    v28[0] = v23;
                  }
                  else
                  {
                    HIBYTE(v29) = v21;
                    uint64_t v23 = v28;
                    if (!v21)
                    {
LABEL_40:
                      *((unsigned char *)v22 + (void)v23) = 0;
                      aBlock = 0;
                      CFTypeRef cf = 0;
                      Service::broadcastEvent((uint64_t)v1, (uint64_t)v28, &cf, (const void **)&aBlock);
                      if (aBlock) {
                        _Block_release(aBlock);
                      }
                      if (cf) {
                        CFRelease(cf);
                      }
                      if (SHIBYTE(v29) < 0)
                      {
                        operator delete(v28[0]);
                        if ((SHIBYTE(v55) & 0x80000000) == 0)
                        {
LABEL_46:
                          if ((SBYTE7(v53) & 0x80000000) == 0) {
                            goto LABEL_47;
                          }
                          goto LABEL_57;
                        }
                      }
                      else if ((SHIBYTE(v55) & 0x80000000) == 0)
                      {
                        goto LABEL_46;
                      }
                      operator delete(*((void **)&v54 + 1));
                      if ((SBYTE7(v53) & 0x80000000) == 0)
                      {
LABEL_47:
                        if ((SHIBYTE(v51) & 0x80000000) == 0) {
                          goto LABEL_48;
                        }
                        goto LABEL_58;
                      }
LABEL_57:
                      operator delete((void *)v52);
                      if ((SHIBYTE(v51) & 0x80000000) == 0)
                      {
LABEL_48:
                        if ((v50[23] & 0x80000000) == 0) {
                          goto LABEL_49;
                        }
                        goto LABEL_59;
                      }
LABEL_58:
                      operator delete(*(void **)&v50[24]);
                      if ((v50[23] & 0x80000000) == 0)
                      {
LABEL_49:
                        uint64_t v10 = v57;
                        if (!v57) {
                          return;
                        }
                        goto LABEL_60;
                      }
LABEL_59:
                      operator delete(*(void **)v50);
                      uint64_t v10 = v57;
                      if (!v57) {
                        return;
                      }
                      goto LABEL_60;
                    }
                  }
                  memmove(v23, v20, (size_t)v22);
                  goto LABEL_40;
                }
LABEL_53:
                operator delete(v32);
                if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_32;
                }
                goto LABEL_54;
              }
            }
            memmove(v16, v13, v15);
            goto LABEL_22;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_14;
      }
    }
  }
}

void sub_263733658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ResetInfo::~ResetInfo((void **)(v43 - 192));
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v43 - 80);
    _Unwind_Resume(a1);
  }
  ResetInfo::~ResetInfo((void **)(v43 - 192));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_149(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(char *)(v2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 40), *(void *)(v2 + 48));
  }
  else {
    std::string __p = *(std::string *)(v2 + 40);
  }
  BootModule::handleBootFailed_sync(v1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_263733808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(void *a1, void *a2)
{
  uint64_t v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  a1[9] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void BootModule::setVoiceCall_sync(BootModule *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v3 || (v5 = *((void *)this + 15), (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *((void *)this + 52);
  uint64_t v10 = *((void *)this + 17);
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = this;
  v11[1] = v5;
  uint64_t v11[2] = v7;
  *((unsigned char *)v11 + 24) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_2637339D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat1_sync(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = a1;
  v11[1] = v5;
  uint64_t v11[2] = v7;
  *((_DWORD *)v11 + 6) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_263733AE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat2_sync(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = a1;
  v11[1] = v5;
  uint64_t v11[2] = v7;
  *((_DWORD *)v11 + 6) = a2;
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v7);
}

void sub_263733BF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setPLMN1_sync(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v11[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_263733D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t BootModule::setPLMN1_sync(std::string)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BootModule::setPLMN2_sync(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v9 = a1[52];
  uint64_t v10 = a1[17];
  uint64_t v11 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v11[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v9, v10, v11, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_263733F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void BootModule::setCellId_sync(void *a1, uint64_t a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (size_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = a1[52];
  long long v12 = a1[17];
  uint64_t v13 = operator new(0x28uLL);
  void *v13 = a1;
  v13[1] = v7;
  v13[2] = v9;
  v13[3] = a2;
  *((_DWORD *)v13 + 8) = a3;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v9);
}

void sub_2637340A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setAreaCode_sync(void *a1, uint64_t a2, int a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (size_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = a1[52];
  long long v12 = a1[17];
  uint64_t v13 = operator new(0x28uLL);
  void *v13 = a1;
  v13[1] = v7;
  v13[2] = v9;
  v13[3] = a2;
  *((_DWORD *)v13 + 8) = a3;
  dispatch_group_notify_f(v11, v12, v13, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);

  std::__shared_weak_count::__release_weak(v9);
}

void sub_2637341C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void *std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  if (!*((unsigned char *)a2 + 16))
  {
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  uint64_t v4 = *a2;
  uint64_t v3 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v3[-*a2];
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)result + 23) = v5;
    if ((char *)v4 != v3) {
      goto LABEL_5;
    }
LABEL_15:
    *(unsigned char *)uint64_t v2 = 0;
    return result;
  }
  uint64_t v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v12 = v5 | 7;
  }
  uint64_t v13 = v12 + 1;
  uint64_t result = operator new(v12 + 1);
  v2[1] = v5;
  v2[2] = v13 | 0x8000000000000000;
  *uint64_t v2 = result;
  uint64_t v2 = result;
  if ((char *)v4 == v3) {
    goto LABEL_15;
  }
LABEL_5:
  if (v5 < 0x20 || (unint64_t)v2 - v4 < 0x20)
  {
    uint64_t v6 = v2;
    uint64_t v7 = (char *)v4;
  }
  else
  {
    uint64_t v6 = (char *)v2 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v7 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
    size_t v8 = (long long *)(v4 + 16);
    uint64_t v9 = v2 + 2;
    unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *uint64_t v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    if (v5 == (v5 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_18;
    }
  }
  do
  {
    char v14 = *v7++;
    *v6++ = v14;
  }
  while (v7 != v3);
LABEL_18:
  *uint64_t v6 = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    size_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAA758;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAA758;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2637345CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2637345E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<BootModule>::shared_ptr[abi:ne180100]<BootModule,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAA798;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_263734714(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_26373473C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAA758;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<HealthEventDB *,std::shared_ptr<HealthEventDB>::__shared_ptr_default_delete<HealthEventDB,HealthEventDB>,std::allocator<HealthEventDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A8625) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A8625 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A8625)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A8625 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void _ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_15;
  }
  size_t v5 = v4;
  if (!*((void *)__p + 1)) {
    goto LABEL_13;
  }
  ResetInfo::ResetInfo(&v12, (const ResetInfo *)(__p + 24));
  uint64_t v6 = (const void *)*((void *)__p + 17);
  if (v6) {
    uint64_t v7 = _Block_copy(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v11 = v7;
  BootModule::handleReset_sync(v3, (uint64_t)&v12, &v11);
  if (v7) {
    _Block_release(v7);
  }
  if (v18 < 0)
  {
    operator delete(__pa);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_11:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_12;
      }
LABEL_33:
      operator delete(v13);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      goto LABEL_34;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v15);
  if (v14 < 0) {
    goto LABEL_33;
  }
LABEL_12:
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_34:
  operator delete(v12.__r_.__value_.__l.__data_);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_15:
  size_t v8 = *((void *)__p + 18);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (const void *)*((void *)__p + 17);
  if (v9) {
    _Block_release(v9);
  }
  if (__p[135] < 0)
  {
    operator delete(*((void **)__p + 14));
    if ((__p[95] & 0x80000000) == 0)
    {
LABEL_21:
      if ((__p[71] & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((__p[95] & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)__p + 9));
  if ((__p[71] & 0x80000000) == 0)
  {
LABEL_22:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_29:
    operator delete(*((void **)__p + 3));
    unint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v10) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_28:
  operator delete(*((void **)__p + 6));
  if (__p[47] < 0) {
    goto LABEL_29;
  }
LABEL_23:
  unint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v10) {
LABEL_24:
  }
    std::__shared_weak_count::__release_weak(v10);
LABEL_25:
  operator delete(__p);
}

void sub_263734CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (v14) {
    _Block_release(v14);
  }
  ResetInfo::~ResetInfo(&a11);
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v16 = v11[18];
    if (!v16) {
      goto LABEL_5;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    char v16 = v11[18];
    if (!v16)
    {
LABEL_5:
      uint64_t v17 = (const void *)v11[17];
      if (!v17)
      {
LABEL_10:
        ResetInfo::~ResetInfo(v13);
        char v18 = (std::__shared_weak_count *)v11[2];
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        operator delete(v11);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v17);
      goto LABEL_10;
    }
  }
  dispatch_release(v16);
  uint64_t v17 = (const void *)v11[17];
  if (!v17) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ctu::SharedSynchronizable<BootModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  size_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EAA870;
  block[5] = v5;
  std::string v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  unint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = (const char *)*MEMORY[0x263F25E40];
  uint64_t v4 = **(void **)a1;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(*(void *)a1 + 8), (const char *)*MEMORY[0x263F25E40])) {
    goto LABEL_26;
  }
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], v3);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (!v6)
  {
    size_t v8 = *(NSObject **)(v4 + 440);
    *(void *)(v4 + 440) = 0;
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v7 = *(NSObject **)(v4 + 432);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 432));
    dispatch_suspend(v7);
  }
  size_t v8 = *(NSObject **)(v4 + 440);
  *(void *)(v4 + 440) = v7;
  if (v8)
  {
LABEL_11:
    dispatch_resume(v8);
    dispatch_release(v8);
  }
LABEL_12:
  BootModule::setVoiceCall_sync((BootModule *)v4, v6);
  uint64_t v9 = (const void *)*MEMORY[0x263F25EA8];
  size_t v10 = strlen((const char *)*MEMORY[0x263F25EA8]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    std::string v12 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    unint64_t v59 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_20:
    memmove(v12, v9, (size_t)v11);
    *((unsigned char *)v11 + (void)v12) = 0;
    uint64_t v13 = (void *)v2[1];
    xpc_object_t v57 = v13;
    if (v13) {
      goto LABEL_16;
    }
LABEL_21:
    xpc_object_t v57 = xpc_null_create();
    goto LABEL_22;
  }
  HIBYTE(v59) = v10;
  std::string v12 = __dst;
  if (v10) {
    goto LABEL_20;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v13 = (void *)v2[1];
  xpc_object_t v57 = v13;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_16:
  xpc_retain(v13);
LABEL_22:
  aBlock = 0;
  Service::broadcastEvent(v4, (uint64_t)__dst, &v57, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v57);
  xpc_object_t v57 = 0;
  if (SHIBYTE(v59) < 0) {
    operator delete(__dst[0]);
  }
LABEL_26:
  char v16 = (const char *)*MEMORY[0x263F268A8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268A8]))
  {
    xpc_object_t v17 = xpc_dictionary_get_value((xpc_object_t)v2[1], v16);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17) {
      xpc_retain(v17);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat1_sync((void *)v4, v18);
  }
  CFTypeID v19 = (const char *)*MEMORY[0x263F268B0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268B0]))
  {
    xpc_object_t v20 = xpc_dictionary_get_value((xpc_object_t)v2[1], v19);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    if (v20) {
      xpc_retain(v20);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    int v21 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat2_sync((void *)v4, v21);
  }
  size_t v22 = (const char *)*MEMORY[0x263F268E8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268E8]))
  {
    memset(&object, 170, sizeof(object));
    xpc_object_t v23 = xpc_dictionary_get_value((xpc_object_t)v2[1], v22);
    xpc_object_t v54 = v23;
    if (v23) {
      xpc_retain(v23);
    }
    else {
      xpc_object_t v54 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&object, (xpc *)&v54, (const object *)"", v24);
    xpc_release(v54);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v53, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    }
    else {
      std::string v53 = object;
    }
    BootModule::setPLMN1_sync((void *)v4, (uint64_t)&v53);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_45:
  uint64_t v25 = (const char *)*MEMORY[0x263F268F0];
  if (!xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268F0])) {
    goto LABEL_56;
  }
  memset(&object, 170, sizeof(object));
  xpc_object_t v26 = xpc_dictionary_get_value((xpc_object_t)v2[1], v25);
  xpc_object_t v54 = v26;
  if (v26) {
    xpc_retain(v26);
  }
  else {
    xpc_object_t v54 = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&object, (xpc *)&v54, (const object *)"", v27);
  xpc_release(v54);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = object;
  }
  BootModule::setPLMN2_sync((void *)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
  }
  else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(object.__r_.__value_.__l.__data_);
LABEL_56:
  unint64_t v28 = (const char *)*MEMORY[0x263F25D90];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F25D90]))
  {
    xpc_object_t v29 = xpc_dictionary_get_value((xpc_object_t)v2[1], v28);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    if (v29) {
      xpc_retain(v29);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v30 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((void *)v4, v30, 0);
  }
  std::string v31 = (const char *)*MEMORY[0x263F25D98];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F25D98]))
  {
    xpc_object_t v32 = xpc_dictionary_get_value((xpc_object_t)v2[1], v31);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if (v32) {
      xpc_retain(v32);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v33 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((void *)v4, v33, 1);
  }
  uint64_t v34 = (const char *)*MEMORY[0x263F25DF8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F25DF8]))
  {
    xpc_object_t v35 = xpc_dictionary_get_value((xpc_object_t)v2[1], v34);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if (v35) {
      xpc_retain(v35);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v36 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((void *)v4, v36, 0);
  }
  char v37 = (const char *)*MEMORY[0x263F25E00];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F25E00]))
  {
    xpc_object_t v38 = xpc_dictionary_get_value((xpc_object_t)v2[1], v37);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    if (v38) {
      xpc_retain(v38);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    uint64_t v39 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((void *)v4, v39, 1);
  }
  uint64_t v40 = (const char *)*MEMORY[0x263F268D0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268D0])
    || xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268D8]))
  {
    xpc_object_t v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], v40);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    if (v41) {
      xpc_retain(v41);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v42 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
    {
      xpc_object_t v43 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F268D8]);
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      if (v43) {
        xpc_retain(v43);
      }
      else {
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      int v44 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object.__r_.__value_.__l.__data_);
      if (!v44)
      {
        long long v46 = *(NSObject **)(v4 + 440);
        *(void *)(v4 + 440) = 0;
        if (!v46) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
    long long v45 = *(NSObject **)(v4 + 432);
    if (v45)
    {
      dispatch_retain(*(dispatch_object_t *)(v4 + 432));
      dispatch_suspend(v45);
    }
    long long v46 = *(NSObject **)(v4 + 440);
    *(void *)(v4 + 440) = v45;
    if (v46)
    {
LABEL_91:
      dispatch_resume(v46);
      dispatch_release(v46);
    }
  }
LABEL_92:
  if (v2[2])
  {
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    xpc_object_t v49 = xpc_null_create();
    (*(void (**)(uint64_t, void, std::string *))(v48 + 16))(v48, 0, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    char v50 = (const void *)v2[2];
    if (v50) {
      _Block_release(v50);
    }
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  long long v51 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  operator delete(a1);
}

void sub_26373571C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *aBlock,xpc_object_t a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *(const void **)(v31 + 16);
  if (v33) {
    _Block_release(v33);
  }
  xpc_release(*(xpc_object_t *)(v31 + 8));
  operator delete((void *)v31);
  uint64_t v34 = (std::__shared_weak_count *)v30[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v30);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(BootModule ***)a1;
  BootModule::finishInitialization_sync(**(BootModule ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_263735A54(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[3];
  uint64_t v4 = *(NSObject **)(v3 + 136);
  dispatch_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  GetABMLogServer(&v33);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  uint64_t v5 = off_26A99F030;
  if (!off_26A99F030)
  {
    ABMServer::create_default_global(&v37);
    long long v6 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v7 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
    off_26A99F030 = v6;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    size_t size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v37.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    uint64_t v5 = off_26A99F030;
  }
  uint64_t v9 = (std::__shared_weak_count *)*(&off_26A99F030 + 1);
  if (*(&off_26A99F030 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F030 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ResetDetection::create(&object, &v33, *(void *)(*(void *)v5 + 208), (uint64_t *)&v36);
  long long v10 = v36;
  long long v36 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v3 + 184);
  *(_OWORD *)(v3 + 176) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::string v12 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v13 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v14 = *(void *)(v3 + 176);
  v37.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  v37.__r_.__value_.__l.__size_ = 0x40000000;
  v37.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN14ResetDetection5startEv_block_invoke;
  xpc_object_t v38 = &__block_descriptor_tmp_3;
  uint64_t v39 = v14;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v14 + 72), (uint64_t)&v37);
  uint64_t v15 = v2[2];
  if (v15)
  {
    dispatch_retain((dispatch_object_t)v2[2]);
    dispatch_group_enter(v15);
  }
  char v16 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v15;
  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
  }
  *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v3 + 80))(&v36, v3);
  uint64_t v17 = v36;
  if ((void)v36)
  {
    dispatch_object_t v32 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    int v18 = (char *)operator new(0x38uLL);
    strcpy(v18, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    uint64_t v19 = capabilities::abs::bootupAssertionTimeoutScalingFactor((capabilities::abs *)v18);
    uint64_t v20 = *(void *)(v17 + 104);
    std::string::__init_copy_ctor_external(&v37, v18, 0x33uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(void *)v20 + 24))(&v32, v20, &v37, 180000 * v19);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    operator delete(v18);
    uint64_t v22 = *v2;
    uint64_t v21 = v2[1];
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
    }
    dispatch_object_t v23 = v32;
    if (v32)
    {
      dispatch_retain(v32);
      uint64_t v24 = v32;
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(NSObject **)(v3 + 136);
    xpc_object_t v26 = operator new(0x20uLL);
    *xpc_object_t v26 = v3;
    v26[1] = v22;
    v26[2] = v21;
    v26[3] = v23;
    dispatch_group_notify_f(v24, v25, v26, (dispatch_function_t)dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    if (v32) {
      dispatch_release(v32);
    }
  }
  dispatch_object_t v27 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = v2[2];
  if (v28)
  {
    dispatch_group_leave(v28);
    xpc_object_t v29 = v2[2];
    if (v29) {
      dispatch_release(v29);
    }
  }
  uint64_t v30 = (std::__shared_weak_count *)v2[1];
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v2);
  uint64_t v31 = (std::__shared_weak_count *)a1[2];
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(a1);
}

void sub_263735FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (a11 && !atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  dispatch_object_t v23 = v21[2];
  if (v23)
  {
    dispatch_group_leave(v23);
    uint64_t v24 = v21[2];
    if (v24) {
      dispatch_release(v24);
    }
  }
  uint64_t v25 = (std::__shared_weak_count *)v21[1];
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(v21);
  xpc_object_t v26 = (std::__shared_weak_count *)v20[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(BootModule **__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (!v2) {
    goto LABEL_31;
  }
  uint64_t v3 = *__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_31;
  }
  uint64_t v5 = v4;
  long long v6 = __p[1];
  if (v6)
  {
    if (*((_DWORD *)v3 + 114))
    {
      uint64_t v7 = *MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x263F26140], (const __CFString **)*MEMORY[0x263F26478], v7, v9);
      long long v10 = (const void *)*MEMORY[0x263F26650];
      size_t v11 = strlen((const char *)*MEMORY[0x263F26650]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        unint64_t v25 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v25) = v11;
        uint64_t v13 = __dst;
        if (!v11)
        {
          LOBYTE(__dst[0]) = 0;
          if (!Mutable) {
            goto LABEL_17;
          }
LABEL_15:
          CFTypeID v16 = CFGetTypeID(Mutable);
          if (v16 == CFDictionaryGetTypeID())
          {
            CFTypeRef cf = Mutable;
            CFRetain(Mutable);
LABEL_18:
            v20[0] = MEMORY[0x263EF8330];
            v20[1] = 1174405120;
            v20[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke;
            void v20[3] = &__block_descriptor_tmp_217;
            v20[4] = v3;
            v20[5] = v6;
            uint64_t v21 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            aBlock = _Block_copy(v20);
            Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (SHIBYTE(v25) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v17 = v21;
            if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            goto LABEL_29;
          }
LABEL_17:
          CFTypeRef cf = 0;
          goto LABEL_18;
        }
      }
      memmove(v13, v10, (size_t)v12);
      *((unsigned char *)v12 + (void)v13) = 0;
      if (!Mutable) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    BootModule::reportStatisticsHardResetTime_sync(v3);
    BootModule::boot_sync(v3);
  }
LABEL_29:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_31:
  int v18 = __p[3];
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)__p[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(__p);
}

void sub_263736514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, CFTypeRef cf, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    dispatch_object_t v27 = v23[3];
    if (!v27) {
      goto LABEL_14;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    dispatch_object_t v27 = v23[3];
    if (!v27)
    {
LABEL_14:
      unint64_t v28 = (std::__shared_weak_count *)v23[2];
      if (!v28) {
        goto LABEL_15;
      }
      goto LABEL_18;
    }
  }
  dispatch_release(v27);
  unint64_t v28 = (std::__shared_weak_count *)v23[2];
  if (!v28)
  {
LABEL_15:
    operator delete(v23);
    _Unwind_Resume(a1);
  }
LABEL_18:
  std::__shared_weak_count::__release_weak(v28);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_214;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2(uint64_t a1)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  if (*(_DWORD *)(*a1 + 24))
  {
    uint64_t v3 = *(NSObject **)(*v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)(v2 + 4));
      uint64_t v4 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      long long v10 = v4;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Dumping logs failed: %s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v2[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(a1);
}

void sub_263736860(_Unwind_Exception *a1)
{
  xpc_release(*v3);
  v2[4] = 0;
  uint64_t v5 = (std::__shared_weak_count *)v2[2];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  long long v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_263736918(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_(xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)*a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 1;
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x263F260B0]);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    xpc_object_t v6 = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x263F260B8]);
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  uint64_t v7 = (void (**)(xpc_object_t, uint64_t, uint64_t))v2[2];
  if (v7)
  {
    v7[2](v7, v3, v4);
    xpc_object_t v8 = v2[2];
    if (v8) {
      _Block_release(v8);
    }
  }
  xpc_release(v2[1]);
  operator delete(v2);
  CFAllocatorRef v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_263736A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v13 = *(const void **)(v11 + 16);
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  uint64_t v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        int v6 = *((unsigned __int8 *)__p + 24);
        *(unsigned char *)(v3 + 288) = v6;
        uint64_t v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          xpc_object_t v8 = "YES";
          if (!v6) {
            xpc_object_t v8 = "NO";
          }
          int v10 = 136315138;
          uint64_t v11 = v8;
          _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I Voice Call: %s", (uint8_t *)&v10, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 296) = *((_DWORD *)__p + 6);
        int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          uint64_t v7 = v11 >= 0 ? &__pa : (void **)__pa;
          int v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT1: %s (%d)", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__pa);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void sub_263736DEC(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 344) = *((_DWORD *)__p + 6);
        int v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          uint64_t v7 = v11 >= 0 ? &__pa : (void **)__pa;
          int v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)std::string buf = 136315394;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT2: %s (%d)", buf, 0x12u);
          if (v11 < 0) {
            operator delete(__pa);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CFAllocatorRef v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void sub_263736FCC(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (!v4)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  if (*((void *)__p + 1))
  {
    int v6 = __p + 24;
    uint64_t v7 = (void **)(v3 + 304);
    if ((char *)(v3 + 304) != __p + 24)
    {
      char v8 = __p[47];
      if (*(char *)(v3 + 327) < 0)
      {
        if (v8 >= 0) {
          int v10 = __p + 24;
        }
        else {
          int v10 = (char *)*((void *)__p + 3);
        }
        if (v8 >= 0) {
          size_t v11 = __p[47];
        }
        else {
          size_t v11 = *((void *)__p + 4);
        }
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((void *)__p + 4));
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v3 + 320) = *((void *)__p + 5);
        *(_OWORD *)uint64_t v7 = v9;
      }
    }
    uint64_t v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0) {
        int v6 = *(_OWORD **)v6;
      }
      int v14 = 136315138;
      int v15 = v6;
      _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN1: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0) {
LABEL_22:
  }
    operator delete(*((void **)__p + 3));
LABEL_23:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void sub_2637371DC(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  operator delete(*v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v5)
  {
LABEL_4:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)__p;
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  if (*((void *)__p + 1))
  {
    int v6 = __p + 24;
    uint64_t v7 = (void **)(v3 + 352);
    if ((char *)(v3 + 352) != __p + 24)
    {
      char v8 = __p[47];
      if (*(char *)(v3 + 375) < 0)
      {
        if (v8 >= 0) {
          int v10 = __p + 24;
        }
        else {
          int v10 = (char *)*((void *)__p + 3);
        }
        if (v8 >= 0) {
          size_t v11 = __p[47];
        }
        else {
          size_t v11 = *((void *)__p + 4);
        }
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((void *)__p + 4));
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v3 + 368) = *((void *)__p + 5);
        *(_OWORD *)uint64_t v7 = v9;
      }
    }
    uint64_t v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0) {
        int v6 = *(_OWORD **)v6;
      }
      int v14 = 136315138;
      int v15 = v6;
      _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN2: %s", (uint8_t *)&v14, 0xCu);
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    if ((__p[47] & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0) {
LABEL_22:
  }
    operator delete(*((void **)__p + 3));
LABEL_23:
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void sub_263737404(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  operator delete(*v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v5)
  {
LABEL_4:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        uint64_t v6 = __p[3];
        unsigned int v7 = *((_DWORD *)__p + 8);
        *(void *)(v3 + 48 * v7 + 328) = v6;
        char v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109376;
          v10[1] = v7 + 1;
          __int16 v11 = 2048;
          uint64_t v12 = v6;
          _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I CellId%d: %llu", (uint8_t *)v10, 0x12u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    long long v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    uint64_t v3 = *__p;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (__p[1])
      {
        uint64_t v6 = __p[3];
        unsigned int v7 = *((_DWORD *)__p + 8);
        *(void *)(v3 + 48 * v7 + 336) = v6;
        char v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v10[0] = 67109376;
          v10[1] = v7 + 1;
          __int16 v11 = 2048;
          uint64_t v12 = v6;
          _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I AreaCode%d: %llu", (uint8_t *)v10, 0x12u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    long long v9 = (std::__shared_weak_count *)__p[2];
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(NSObject ****a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*((unsigned char *)*a1 + 8))
  {
    uint64_t v4 = v3[52];
    if (v4)
    {
      dispatch_retain(v3[52]);
      dispatch_group_enter(v4);
    }
    uint64_t v5 = v3[53];
    v3[53] = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    uint64_t v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = 0;
      unsigned int v7 = "#I The baseband reset was detected.";
      char v8 = (uint8_t *)&v13;
LABEL_12:
      _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    long long v9 = v3[53];
    v3[53] = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    uint64_t v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = 0;
      unsigned int v7 = "#I The baseband reset-flag is reset.";
      char v8 = (uint8_t *)&v12;
      goto LABEL_12;
    }
  }
  int v10 = v3[55];
  v3[55] = 0;
  if (v10)
  {
    dispatch_resume(v10);
    dispatch_release(v10);
  }
  operator delete(v2);
  __int16 v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

uint64_t __cxx_global_var_init_172()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_173()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_174()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_175()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_26368A000);
  }
  return result;
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E80])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F268B8])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F20528])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F20520]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E88]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x263F268F8]) && strcasecmp(v6, (const char *)*MEMORY[0x263F25EF0]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F78]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F80]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F38]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x263F25DD0]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F30]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E48]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E98]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x263F25E90]))
                        {
                          return prop::tracesettings::get(a2, a3);
                        }
                        else
                        {
                          unsigned int v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              long long v9 = a1;
                            }
                            else {
                              long long v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              int v10 = a2;
                            }
                            else {
                              int v10 = *(char **)a2;
                            }
                            int v11 = 136315650;
                            __int16 v12 = "prop";
                            __int16 v13 = 2080;
                            int v14 = v9;
                            __int16 v15 = 2080;
                            uint64_t v16 = v10;
                            _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
                              (uint8_t *)&v11,
                              0x20u);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E80]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x263F268B8])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x263F20528])
         && strcasecmp(a1, (const char *)*MEMORY[0x263F20520]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E88]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F268F8]) && strcasecmp(a1, (const char *)*MEMORY[0x263F25EF0]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F78]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F80]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F38]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x263F25DD0]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F30]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E48]))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E98])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::get(a2, a3);
                  }
LABEL_60:
                  return prop::profile::get(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::get(a2, a3);
              }
LABEL_54:
              return prop::logfilter::get(a2, a3);
            }
LABEL_51:
            return prop::ttr::get(a2, a3);
          }
LABEL_48:
          return prop::compression::get(a2, a3);
        }
LABEL_45:
        return prop::bbipc::get(a2, a3);
      }
LABEL_39:
      return prop::ipc::get(a2, a3);
    }
LABEL_42:
    return prop::coredump::get(a2, a3);
  }

  return prop::bbtrace::get(a2, a3);
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F268B8];
  size_t v5 = strlen((const char *)*MEMORY[0x263F268B8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_26373813C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25E88];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25E88]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_263738244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F268F8];
  size_t v5 = strlen((const char *)*MEMORY[0x263F268F8]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_26373834C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25F78];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25F78]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_263738454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25F80];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25F80]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_26373855C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25F38];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25F38]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_263738664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25DD0];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25DD0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_26373876C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25F30];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25F30]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_263738874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25E48];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25E48]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_26373897C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25E98];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25E98]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_263738A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  uint64_t v4 = (const void *)*MEMORY[0x263F25E90];
  size_t v5 = strlen((const char *)*MEMORY[0x263F25E90]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    unsigned int v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  unsigned int v7 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v7, v4, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  BOOL v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  return v10;
}

void sub_263738B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a1[23] < 0)
  {
    uint64_t v6 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E80])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F268B8])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F20528])
      && strcasecmp(v6, (const char *)*MEMORY[0x263F20520]))
    {
      if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E88]))
      {
        if (strcasecmp(v6, (const char *)*MEMORY[0x263F268F8]) && strcasecmp(v6, (const char *)*MEMORY[0x263F25EF0]))
        {
          if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F78]))
          {
            if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F80]))
            {
              if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F38]))
              {
                if (strcasecmp(v6, (const char *)*MEMORY[0x263F25DD0]))
                {
                  if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F30]))
                  {
                    if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E48]))
                    {
                      if (strcasecmp(v6, (const char *)*MEMORY[0x263F25E98]))
                      {
LABEL_16:
                        if (!strcasecmp(v6, (const char *)*MEMORY[0x263F25E90]))
                        {
                          return prop::tracesettings::set(a2, (uint64_t)a3);
                        }
                        else
                        {
                          unsigned int v7 = GetOsLogContext()[1];
                          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                          {
                            if (a1[23] >= 0) {
                              uint64_t v9 = a1;
                            }
                            else {
                              uint64_t v9 = *(char **)a1;
                            }
                            if (a2[23] >= 0) {
                              BOOL v10 = a2;
                            }
                            else {
                              BOOL v10 = *(char **)a2;
                            }
                            if (a3[23] >= 0) {
                              int v11 = a3;
                            }
                            else {
                              int v11 = *(char **)a3;
                            }
                            int v12 = 136315906;
                            unint64_t v13 = "prop";
                            __int16 v14 = 2080;
                            __int16 v15 = v9;
                            __int16 v16 = 2080;
                            uint64_t v17 = v10;
                            __int16 v18 = 2080;
                            uint64_t v19 = v11;
                            _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
                              (uint8_t *)&v12,
                              0x2Au);
                          }
                          return 0;
                        }
                      }
                      goto LABEL_33;
                    }
                    goto LABEL_60;
                  }
                  goto LABEL_57;
                }
                goto LABEL_54;
              }
              goto LABEL_51;
            }
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        goto LABEL_39;
      }
      goto LABEL_42;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E80]) {
         && strcasecmp(a1, (const char *)*MEMORY[0x263F268B8])
  }
         && strcasecmp(a1, (const char *)*MEMORY[0x263F20528])
         && strcasecmp(a1, (const char *)*MEMORY[0x263F20520]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E88]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F268F8]) && strcasecmp(a1, (const char *)*MEMORY[0x263F25EF0]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F78]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F80]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F38]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x263F25DD0]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F30]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E48]))
                  {
                    uint64_t v6 = a1;
                    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E98])) {
                      goto LABEL_16;
                    }
LABEL_33:
                    return prop::tailspin::set((uint64_t)a2, a3);
                  }
LABEL_60:
                  return prop::profile::set(a2, a3);
                }
LABEL_57:
                return prop::systemlogs::set(a2, a3);
              }
LABEL_54:
              return prop::logfilter::set(a2, a3);
            }
LABEL_51:
            return prop::ttr::set(a2, a3);
          }
LABEL_48:
          return prop::compression::set(a2, a3);
        }
LABEL_45:
        return prop::bbipc::set(a2, a3);
      }
LABEL_39:
      return prop::ipc::set(a2, a3);
    }
LABEL_42:
    return prop::coredump::set((uint64_t)a2, a3);
  }

  return prop::bbtrace::set(a2, a3);
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  uint64_t v2 = a2;
  uint64_t v91 = *MEMORY[0x263EF8340];
  memset(&v86, 170, sizeof(v86));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(const char **)v2;
    }
    if (strcmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v86 = *(std::string *)a2;
    if (strcmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v86)) {
    goto LABEL_217;
  }
LABEL_8:
  int v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F60]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x263F260D8]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E28]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x263F26500]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x263F26008]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x263F25FE0]))
                {
                  size_t v5 = (char *)*MEMORY[0x263F25F28];
                  uint64_t v6 = a1;
                  if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F28])) {
                    goto LABEL_17;
                  }
                  goto LABEL_33;
                }
LABEL_97:
                *(_DWORD *)long long __dst = -1431655766;
                if (!util::convert<int>(&v86, __dst, 0)) {
                  goto LABEL_217;
                }
                int v47 = *(_DWORD *)__dst;
                std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
                LODWORD(__p.__r_.__value_.__l.__data_) = v47;
                uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
LABEL_109:
                uint64_t v12 = v14;
LABEL_110:
                if ((__dst[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__dst);
                }
                goto LABEL_218;
              }
LABEL_83:
              std::string v37 = (const void *)*MEMORY[0x263F268B8];
              size_t v38 = strlen((const char *)*MEMORY[0x263F268B8]);
              if (v38 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              size_t v39 = v38;
              if (v38 >= 0x17)
              {
                uint64_t v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v38 | 7) != 0x17) {
                  uint64_t v48 = v38 | 7;
                }
                uint64_t v49 = v48 + 1;
                uint64_t v40 = operator new(v48 + 1);
                *(void *)&__dst[8] = v39;
                *(void *)&__dst[16] = v49 | 0x8000000000000000;
                *(void *)long long __dst = v40;
              }
              else
              {
                __dst[23] = v38;
                uint64_t v40 = __dst;
                if (!v38) {
                  goto LABEL_103;
                }
              }
              memmove(v40, v37, v39);
LABEL_103:
              v40[v39] = 0;
              uint64_t v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v86);
              goto LABEL_109;
            }
LABEL_69:
            *(_DWORD *)long long __dst = -1431655766;
            if (!util::convert<int>(&v86, __dst, 0)) {
              goto LABEL_217;
            }
            int v29 = *(_DWORD *)__dst;
            uint64_t v30 = (const void *)*MEMORY[0x263F268B8];
            size_t v31 = strlen((const char *)*MEMORY[0x263F268B8]);
            if (v31 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v32 = v31;
            if (v31 >= 0x17)
            {
              uint64_t v50 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17) {
                uint64_t v50 = v31 | 7;
              }
              uint64_t v51 = v50 + 1;
              uint64_t v33 = operator new(v50 + 1);
              *(void *)&__dst[8] = v32;
              *(void *)&__dst[16] = v51 | 0x8000000000000000;
              *(void *)long long __dst = v33;
            }
            else
            {
              __dst[23] = v31;
              uint64_t v33 = __dst;
              if (!v31) {
                goto LABEL_108;
              }
            }
            memmove(v33, v30, v32);
LABEL_108:
            v33[v32] = 0;
            LODWORD(__p.__r_.__value_.__l.__data_) = v29;
            uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
            goto LABEL_109;
          }
LABEL_59:
          LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
          dispatch_object_t v23 = (capabilities::radio *)util::convert<int>(&v86, &__p, 0);
          int v24 = (int)v23;
          unint64_t v25 = (capabilities::radio *)capabilities::radio::maverick(v23);
          if (v25)
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) < 5) {
              char v26 = v24;
            }
            else {
              char v26 = 0;
            }
            if ((v26 & 1) == 0) {
              goto LABEL_217;
            }
          }
          else
          {
            int v34 = capabilities::radio::ice(v25);
            if ((v34 & v24) == 1)
            {
              uint64_t v12 = 0;
              if (LODWORD(__p.__r_.__value_.__l.__data_) > 6 || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x45) == 0) {
                goto LABEL_218;
              }
            }
            else if ((v24 & ~v34) != 1)
            {
              goto LABEL_217;
            }
          }
          xpc_object_t v41 = (const void *)*MEMORY[0x263F268B8];
          size_t v42 = strlen((const char *)*MEMORY[0x263F268B8]);
          if (v42 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v43 = v42;
          if (v42 >= 0x17)
          {
            uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17) {
              uint64_t v45 = v42 | 7;
            }
            uint64_t v46 = v45 + 1;
            int v44 = operator new(v45 + 1);
            *(void *)&__dst[8] = v43;
            *(void *)&__dst[16] = v46 | 0x8000000000000000;
            *(void *)long long __dst = v44;
          }
          else
          {
            __dst[23] = v42;
            int v44 = __dst;
            if (!v42) {
              goto LABEL_96;
            }
          }
          memmove(v44, v41, v43);
LABEL_96:
          v44[v43] = 0;
          uint64_t v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
          goto LABEL_109;
        }
LABEL_50:
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (!util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_217;
        }
        __int16 v15 = (const void *)*MEMORY[0x263F268B8];
        size_t v20 = strlen((const char *)*MEMORY[0x263F268B8]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v17 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v35 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v35 = v20 | 7;
          }
          uint64_t v36 = v35 + 1;
          __int16 v18 = operator new(v35 + 1);
          *(void *)&__dst[8] = v17;
          *(void *)&__dst[16] = v36 | 0x8000000000000000;
          *(void *)long long __dst = v18;
        }
        else
        {
          __dst[23] = v20;
          __int16 v18 = __dst;
          if (!v20) {
            goto LABEL_82;
          }
        }
        goto LABEL_81;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
        goto LABEL_217;
      }
      __int16 v15 = (const void *)*MEMORY[0x263F268B8];
      size_t v19 = strlen((const char *)*MEMORY[0x263F268B8]);
      if (v19 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v17 = v19;
      if (v19 >= 0x17)
      {
        uint64_t v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v27 = v19 | 7;
        }
        uint64_t v28 = v27 + 1;
        __int16 v18 = operator new(v27 + 1);
        *(void *)&__dst[8] = v17;
        *(void *)&__dst[16] = v28 | 0x8000000000000000;
        *(void *)long long __dst = v18;
      }
      else
      {
        __dst[23] = v19;
        __int16 v18 = __dst;
        if (!v19) {
          goto LABEL_82;
        }
      }
      goto LABEL_81;
    }
LABEL_40:
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
      goto LABEL_217;
    }
    __int16 v15 = (const void *)*MEMORY[0x263F268B8];
    size_t v16 = strlen((const char *)*MEMORY[0x263F268B8]);
    if (v16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v17 = v16;
    if (v16 >= 0x17)
    {
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      __int16 v18 = operator new(v21 + 1);
      *(void *)&__dst[8] = v17;
      *(void *)&__dst[16] = v22 | 0x8000000000000000;
      *(void *)long long __dst = v18;
    }
    else
    {
      __dst[23] = v16;
      __int16 v18 = __dst;
      if (!v16) {
        goto LABEL_82;
      }
    }
LABEL_81:
    memmove(v18, v15, v17);
LABEL_82:
    v18[v17] = 0;
    uint64_t v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
    goto LABEL_109;
  }
  uint64_t v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25F20])) {
    goto LABEL_40;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x263F25F60])) {
    goto LABEL_45;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x263F260D8])) {
    goto LABEL_50;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x263F25E28])) {
    goto LABEL_59;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x263F26500])) {
    goto LABEL_69;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x263F26008])) {
    goto LABEL_83;
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x263F25FE0])) {
    goto LABEL_97;
  }
  size_t v5 = (char *)*MEMORY[0x263F25F28];
  if (strcasecmp(v6, (const char *)*MEMORY[0x263F25F28]))
  {
LABEL_17:
    unsigned int v7 = (capabilities::radio *)strcasecmp(v6, (const char *)*MEMORY[0x263F20720]);
    if (!v7)
    {
      long long v52 = (capabilities::radio *)capabilities::radio::maverick(v7);
      if (v52 & 1) != 0 || (capabilities::radio::ice(v52))
      {
        *(_DWORD *)long long __dst = -1431655766;
        if ((util::convert<int>(&v86, __dst, 0) & 1) == 0) {
          goto LABEL_217;
        }
        int v53 = *(_DWORD *)__dst;
        if (*(_DWORD *)__dst > 2u) {
          goto LABEL_217;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
        LODWORD(__p.__r_.__value_.__l.__data_) = v53;
        uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
    }
    uint64_t v8 = *(const char **)a1;
    if ((v4 & 0x80u) == 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(const char **)a1;
    }
    BOOL v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x263F20710]);
    if (!v10)
    {
      if (capabilities::radio::maverick(v10))
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_215;
        }
        goto LABEL_217;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      xpc_object_t v54 = a1;
    }
    else {
      xpc_object_t v54 = v8;
    }
    long long v55 = (capabilities::radio *)strcasecmp(v54, (const char *)*MEMORY[0x263F20708]);
    if (!v55)
    {
      if (capabilities::radio::maverick(v55))
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_215;
        }
        goto LABEL_217;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      long long v56 = a1;
    }
    else {
      long long v56 = v8;
    }
    xpc_object_t v57 = (capabilities::radio *)strcasecmp(v56, (const char *)*MEMORY[0x263F20728]);
    if (!v57)
    {
      if (capabilities::radio::maverick(v57))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v86, &__p)) {
          goto LABEL_217;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
        uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
      uint64_t v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      char v58 = a1;
    }
    else {
      char v58 = v8;
    }
    unint64_t v59 = (capabilities::radio *)strcasecmp(v58, (const char *)*MEMORY[0x263F20730]);
    if (!v59)
    {
      if (capabilities::radio::maverick(v59))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum()) {
          goto LABEL_217;
        }
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
        int data = (int)__p.__r_.__value_.__l.__data_;
        uint64_t v14 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_109;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      unint64_t v60 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F20718]))
      {
LABEL_145:
        unint64_t v61 = (capabilities::radio *)strcasecmp(v60, (const char *)*MEMORY[0x263F264F8]);
        if (!v61)
        {
          if (capabilities::radio::maverick(v61)) {
            goto LABEL_190;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          unint64_t v62 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F26628])) {
            goto LABEL_190;
          }
        }
        else
        {
          unint64_t v62 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26628])) {
            goto LABEL_190;
          }
        }
        std::string v63 = (capabilities::radio *)strcasecmp(v62, (const char *)*MEMORY[0x263F20700]);
        if (!v63)
        {
          if (capabilities::radio::maverick(v63)) {
            goto LABEL_190;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0) {
          uint64_t v64 = a1;
        }
        else {
          uint64_t v64 = *(const char **)a1;
        }
        char v65 = (capabilities::radio *)strcasecmp(v64, (const char *)*MEMORY[0x263F263D0]);
        if (!v65)
        {
          if (capabilities::radio::maverick(v65))
          {
LABEL_190:
            std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
            uint64_t v14 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v86);
            goto LABEL_109;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          std::string v66 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F26558])) {
            goto LABEL_190;
          }
          if (strcasecmp(v66, (const char *)*MEMORY[0x263F26840]))
          {
            if (!strcasecmp(v66, (const char *)*MEMORY[0x263F26810])
              || !strcasecmp(v66, (const char *)*MEMORY[0x263F26818]))
            {
              goto LABEL_190;
            }
            if (strcasecmp(v66, (const char *)*MEMORY[0x263F25F58]))
            {
              if (!strcasecmp(v66, (const char *)*MEMORY[0x263F262E8])
                || !strcasecmp(v66, (const char *)*MEMORY[0x263F263E0]))
              {
                goto LABEL_190;
              }
LABEL_174:
              if (!strcasecmp(v66, (const char *)*MEMORY[0x263F26620]))
              {
                __p.__r_.__value_.__s.__data_[0] = -86;
                if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0))
                {
LABEL_215:
                  std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
                  uint64_t v14 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
                  goto LABEL_109;
                }
LABEL_217:
                uint64_t v12 = 0;
                goto LABEL_218;
              }
              char v67 = GetOsLogContext()[1];
              if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
                goto LABEL_217;
              }
              uint64_t v68 = *MEMORY[0x263F268B8];
              if (a1[23] >= 0) {
                char v69 = a1;
              }
              else {
                char v69 = *(char **)a1;
              }
              long long v70 = &v86;
              if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v70 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)long long __dst = 136315906;
              *(void *)&__dst[4] = "prop";
              *(_WORD *)&__dst[12] = 2080;
              *(void *)&__dst[14] = v68;
              *(_WORD *)&__dst[22] = 2080;
              uint64_t v88 = v69;
              __int16 v89 = 2080;
              unint64_t v90 = v70;
              char v71 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
              char v72 = v67;
              uint32_t v73 = 42;
LABEL_182:
              _os_log_error_impl(&dword_26368A000, v72, OS_LOG_TYPE_ERROR, v71, __dst, v73);
              goto LABEL_217;
            }
LABEL_196:
            int data = -1431655766;
            long long v74 = (capabilities::radio *)util::convert<unsigned int>(&v86, &data);
            if (v74)
            {
              unsigned int v75 = data;
              long long v76 = (capabilities::abs *)capabilities::radio::vendor(v74);
              shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v76);
              if (shouldUseMinBasebandTransportIOReadSize) {
                unsigned int v78 = 0x4000;
              }
              else {
                unsigned int v78 = 0x8000;
              }
              if (v75 >= v78)
              {
                if (!v75)
                {
                  long long v81 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_217;
                  }
                  *(_WORD *)long long __dst = 0;
                  char v71 = "file size cannot be 0";
                  char v72 = v81;
                  uint32_t v73 = 2;
                  goto LABEL_182;
                }
              }
              else
              {
                unint64_t v79 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v79)) {
                  unsigned int v75 = 0x4000;
                }
                else {
                  unsigned int v75 = 0x8000;
                }
              }
              int data = 1 << (__clz(v75) ^ 0x1F);
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
              long long v74 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
              int v80 = (int)v74;
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
            }
            else
            {
              int v80 = 0;
            }
            int __val = capabilities::trace::defaultHistorySizeMB(v74);
            std::string::basic_string[abi:ne180100]<0>(__dst, v5);
            prop::bbtrace::get<int>(__dst, &__val);
            if ((__dst[23] & 0x80000000) != 0) {
              operator delete(*(void **)__dst);
            }
            if (v80)
            {
              std::string::basic_string[abi:ne180100]<0>(__dst, v5);
              std::to_string(&__p, __val);
              uint64_t v12 = prop::bbtrace::set(__dst, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_110;
            }
            goto LABEL_217;
          }
        }
        else
        {
          if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26558])) {
            goto LABEL_190;
          }
          if (strcasecmp(a1, (const char *)*MEMORY[0x263F26840]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x263F26810])
              || !strcasecmp(a1, (const char *)*MEMORY[0x263F26818]))
            {
              goto LABEL_190;
            }
            if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F58]))
            {
              if (!strcasecmp(a1, (const char *)*MEMORY[0x263F262E8])) {
                goto LABEL_190;
              }
              std::string v66 = a1;
              if (!strcasecmp(a1, (const char *)*MEMORY[0x263F263E0])) {
                goto LABEL_190;
              }
              goto LABEL_174;
            }
            goto LABEL_196;
          }
        }
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
          goto LABEL_215;
        }
        goto LABEL_217;
      }
    }
    else
    {
      unint64_t v60 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F20718])) {
        goto LABEL_145;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v86, (BOOL *)&__p, 0)) {
      goto LABEL_215;
    }
    goto LABEL_217;
  }
LABEL_33:
  LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
  int v11 = (capabilities::trace *)util::convert<int>(&v86, &__p, 0);
  uint64_t v12 = (uint64_t)v11;
  if (SLODWORD(__p.__r_.__value_.__l.__data_) < 0) {
    int v13 = (int)v11;
  }
  else {
    int v13 = 0;
  }
  if (v13 == 1) {
    LODWORD(__p.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v11);
  }
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x263F268B8]);
    uint64_t v14 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
    goto LABEL_109;
  }
LABEL_218:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_26373A374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  memset(&v18, 170, sizeof(v18));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v18)) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F25F20]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x263F25E88];
      if (*(char *)(a1 + 23) >= 0) {
        unsigned int v7 = (const char *)a1;
      }
      else {
        unsigned int v7 = *(const char **)a1;
      }
      uint64_t v8 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      size_t v20 = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_24;
  }
  char v17 = -86;
  if (!util::convert<BOOL>(&v18, (BOOL *)&v17, 0))
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  uint64_t v9 = (const void *)*MEMORY[0x263F25E88];
  size_t v10 = strlen((const char *)*MEMORY[0x263F25E88]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v12 = operator new(v15 + 1);
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
    *(void *)std::string buf = v12;
    goto LABEL_31;
  }
  buf[23] = v10;
  uint64_t v12 = buf;
  if (v10) {
LABEL_31:
  }
    memmove(v12, v9, v11);
  v12[v11] = 0;
  uint64_t v13 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v17);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_25:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_26373A7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v33 = *MEMORY[0x263EF8340];
  memset(&v28, 170, sizeof(v28));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v28 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v28)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F28])) {
        goto LABEL_11;
      }
      goto LABEL_22;
    }
LABEL_30:
    LOBYTE(v27) = -86;
    if (util::convert<BOOL>(&v28, (BOOL *)&v27, 0))
    {
      uint64_t v16 = (const void *)*MEMORY[0x263F268F8];
      size_t v17 = strlen((const char *)*MEMORY[0x263F268F8]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v18 = v17;
      if (v17 >= 0x17)
      {
        uint64_t v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v22 = v17 | 7;
        }
        uint64_t v23 = v22 + 1;
        size_t v19 = operator new(v22 + 1);
        *(void *)&uint8_t buf[8] = v18;
        *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
        *(void *)std::string buf = v19;
      }
      else
      {
        buf[23] = v17;
        size_t v19 = buf;
        if (!v17) {
          goto LABEL_43;
        }
      }
      memmove(v19, v16, v18);
LABEL_43:
      v19[v18] = 0;
      uint64_t v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v27);
      goto LABEL_49;
    }
LABEL_35:
    uint64_t v20 = 0;
    goto LABEL_36;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25F20])) {
    goto LABEL_30;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F25F28]))
  {
LABEL_11:
    size_t v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
    if (v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
    {
      uint64_t v6 = GetOsLogContext()[1];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *MEMORY[0x263F268F8];
        if (a1[23] >= 0) {
          uint64_t v8 = a1;
        }
        else {
          uint64_t v8 = *(char **)a1;
        }
        uint64_t v9 = &v28;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "prop";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v7;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v30 = v8;
        __int16 v31 = 2080;
        size_t v32 = v9;
        _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
          buf,
          0x2Au);
      }
    }
    goto LABEL_35;
  }
LABEL_22:
  int v27 = -1431655766;
  int v10 = util::convert<int>(&v28, &v27, 0);
  if (v27 >= 0) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  if (v11 != 1) {
    goto LABEL_35;
  }
  uint64_t v12 = (const void *)*MEMORY[0x263F268F8];
  size_t v13 = strlen((const char *)*MEMORY[0x263F268F8]);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v25 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v25 = v13 | 7;
    }
    uint64_t v26 = v25 + 1;
    uint64_t v15 = operator new(v25 + 1);
    *(void *)&uint8_t buf[8] = v14;
    *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
    *(void *)std::string buf = v15;
  }
  else
  {
    buf[23] = v13;
    uint64_t v15 = buf;
    if (!v13) {
      goto LABEL_48;
    }
  }
  memmove(v15, v12, v14);
LABEL_48:
  v15[v14] = 0;
  uint64_t v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v27);
LABEL_49:
  uint64_t v20 = v24;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_26373ABC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v36 = *MEMORY[0x263EF8340];
  memset(&v31, 170, sizeof(v31));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v31 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v31)) {
    goto LABEL_36;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F20]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F68])) {
        goto LABEL_11;
      }
LABEL_21:
      int v30 = -1431655766;
      if (!util::convert<int>(&v31, &v30, 0)) {
        goto LABEL_36;
      }
      uint64_t v9 = (const void *)*MEMORY[0x263F25F78];
      size_t v10 = strlen((const char *)*MEMORY[0x263F25F78]);
      if (v10 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v11 = v10;
      if (v10 >= 0x17)
      {
        uint64_t v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v25 = v10 | 7;
        }
        uint64_t v26 = v25 + 1;
        uint64_t v12 = operator new(v25 + 1);
        *(void *)&uint8_t buf[8] = v11;
        *(void *)&uint8_t buf[16] = v26 | 0x8000000000000000;
        *(void *)std::string buf = v12;
      }
      else
      {
        buf[23] = v10;
        uint64_t v12 = buf;
        if (!v10) {
          goto LABEL_47;
        }
      }
      memmove(v12, v9, v11);
LABEL_47:
      v12[v11] = 0;
      uint64_t v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v30);
      goto LABEL_53;
    }
LABEL_26:
    LOBYTE(v30) = -86;
    if (!util::convert<BOOL>(&v31, (BOOL *)&v30, 0)) {
      goto LABEL_36;
    }
    size_t v13 = (const void *)*MEMORY[0x263F25F78];
    size_t v14 = strlen((const char *)*MEMORY[0x263F25F78]);
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v15 = v14;
    if (v14 >= 0x17)
    {
      uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v22 = v14 | 7;
      }
      uint64_t v23 = v22 + 1;
      uint64_t v16 = operator new(v22 + 1);
      *(void *)&uint8_t buf[8] = v15;
      *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
      *(void *)std::string buf = v16;
    }
    else
    {
      buf[23] = v14;
      uint64_t v16 = buf;
      if (!v14) {
        goto LABEL_42;
      }
    }
    memmove(v16, v13, v15);
LABEL_42:
    v16[v15] = 0;
    uint64_t v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v30);
    goto LABEL_53;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25F20])) {
    goto LABEL_26;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F25F68])) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F260E0]))
  {
    int v30 = -1431655766;
    if (!util::convert<unsigned int>(&v31, &v30)) {
      goto LABEL_36;
    }
    size_t v17 = (const void *)*MEMORY[0x263F25F78];
    size_t v18 = strlen((const char *)*MEMORY[0x263F25F78]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v27 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v27 = v18 | 7;
      }
      uint64_t v28 = v27 + 1;
      uint64_t v20 = operator new(v27 + 1);
      *(void *)&uint8_t buf[8] = v19;
      *(void *)&uint8_t buf[16] = v28 | 0x8000000000000000;
      *(void *)std::string buf = v20;
    }
    else
    {
      buf[23] = v18;
      uint64_t v20 = buf;
      if (!v18) {
        goto LABEL_52;
      }
    }
    memmove(v20, v17, v19);
LABEL_52:
    v20[v19] = 0;
    uint64_t v24 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v30);
LABEL_53:
    uint64_t v21 = v24;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v21;
      }
    }
    else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v21;
    }
LABEL_57:
    operator delete(v31.__r_.__value_.__l.__data_);
    return v21;
  }
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *MEMORY[0x263F25F78];
    if (a1[23] >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(char **)a1;
    }
    uint64_t v8 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v33 = v7;
    __int16 v34 = 2080;
    uint64_t v35 = v8;
    _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_36:
  uint64_t v21 = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_57;
  }
  return v21;
}

void sub_26373B0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v32 = *MEMORY[0x263EF8340];
  memset(&v27, 170, sizeof(v27));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v27 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::compression::get(a1, (uint64_t)&v27)) {
    goto LABEL_42;
  }
LABEL_8:
  int v4 = a1[23];
  size_t v5 = *(const char **)a1;
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(const char **)a1;
  }
  if (strcasecmp(v6, (const char *)*MEMORY[0x263F206F8]))
  {
    uint64_t v7 = 0;
    goto LABEL_26;
  }
  int v26 = 0;
  if (util::convert<int>(&v27, &v26, 0))
  {
    uint64_t v8 = (const void *)*MEMORY[0x263F25F80];
    size_t v9 = strlen((const char *)*MEMORY[0x263F25F80]);
    if (v9 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      size_t v11 = operator new(v12 + 1);
      *(void *)&__dst[8] = v10;
      *(void *)&__dst[16] = v13 | 0x8000000000000000;
      *(void *)long long __dst = v11;
    }
    else
    {
      __dst[23] = v9;
      size_t v11 = __dst;
      if (!v9)
      {
LABEL_23:
        v11[v10] = 0;
        uint64_t v7 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, &v26);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        goto LABEL_25;
      }
    }
    memmove(v11, v8, v10);
    goto LABEL_23;
  }
  uint64_t v7 = 0;
LABEL_25:
  LOBYTE(v4) = a1[23];
  size_t v5 = *(const char **)a1;
LABEL_26:
  if ((v4 & 0x80u) == 0) {
    size_t v14 = a1;
  }
  else {
    size_t v14 = v5;
  }
  if (strcasecmp(v14, (const char *)*MEMORY[0x263F205A8]))
  {
    size_t v15 = GetOsLogContext()[1];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *MEMORY[0x263F25F80];
      if (a1[23] >= 0) {
        size_t v17 = a1;
      }
      else {
        size_t v17 = *(char **)a1;
      }
      size_t v18 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long __dst = 136315906;
      *(void *)&__dst[4] = "prop";
      *(_WORD *)&__dst[12] = 2080;
      *(void *)&__dst[14] = v16;
      *(_WORD *)&__dst[22] = 2080;
      int v29 = v17;
      __int16 v30 = 2080;
      std::string v31 = v18;
      _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
        __dst,
        0x2Au);
    }
    goto LABEL_49;
  }
  LOBYTE(v26) = 1;
  if (!util::convert<BOOL>(&v27, (BOOL *)&v26, 0))
  {
LABEL_42:
    uint64_t v7 = 0;
    goto LABEL_49;
  }
  size_t v19 = (const void *)*MEMORY[0x263F25F80];
  size_t v20 = strlen((const char *)*MEMORY[0x263F25F80]);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v21 = v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    *(void *)&__dst[8] = v21;
    *(void *)&__dst[16] = v24 | 0x8000000000000000;
    *(void *)long long __dst = v22;
    goto LABEL_46;
  }
  __dst[23] = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_46:
  }
    memmove(v22, v19, v21);
  v22[v21] = 0;
  uint64_t v7 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&v26);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
LABEL_49:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_26373B4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  memset(&v25, 170, sizeof(v25));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v25 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v25)) {
    goto LABEL_35;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E28])) {
      goto LABEL_10;
    }
LABEL_19:
    unsigned int v24 = -1431655766;
    int v9 = util::convert<unsigned int>(&v25, &v24);
    if (v24 < 4) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (v10 == 1)
    {
      size_t v11 = (const void *)*MEMORY[0x263F25F38];
      size_t v12 = strlen((const char *)*MEMORY[0x263F25F38]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v20 = v12 | 7;
        }
        uint64_t v21 = v20 + 1;
        size_t v14 = operator new(v20 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v21 | 0x8000000000000000;
        *(void *)std::string buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_47;
        }
      }
      goto LABEL_46;
    }
LABEL_35:
    uint64_t v18 = 0;
    goto LABEL_36;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E28])) {
    goto LABEL_19;
  }
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F26550]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x263F25F38];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      std::string v27 = v7;
      __int16 v28 = 2080;
      int v29 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_35;
  }
  unsigned int v24 = -1431655766;
  int v15 = util::convert<unsigned int>(&v25, &v24);
  if (v24) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  if (v16 != 1) {
    goto LABEL_35;
  }
  size_t v11 = (const void *)*MEMORY[0x263F25F38];
  size_t v17 = strlen((const char *)*MEMORY[0x263F25F38]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v22 = v17 | 7;
    }
    uint64_t v23 = v22 + 1;
    size_t v14 = operator new(v22 + 1);
    *(void *)&uint8_t buf[8] = v13;
    *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
    *(void *)std::string buf = v14;
    goto LABEL_46;
  }
  buf[23] = v17;
  size_t v14 = buf;
  if (v17) {
LABEL_46:
  }
    memmove(v14, v11, v13);
LABEL_47:
  v14[v13] = 0;
  uint64_t v18 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v24);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_26373B8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v37 = *MEMORY[0x263EF8340];
  memset(&v32, 170, sizeof(v32));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v32 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v32)) {
    goto LABEL_42;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F26168]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F26300])) {
        goto LABEL_11;
      }
LABEL_21:
      int v31 = -1431655766;
      int v9 = util::convert<int>(&v32, &v31, 0);
      if (v31 > -2) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 != 1) {
        goto LABEL_42;
      }
      size_t v11 = (const void *)*MEMORY[0x263F25DD0];
      size_t v12 = strlen((const char *)*MEMORY[0x263F25DD0]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v26 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v26 = v12 | 7;
        }
        uint64_t v27 = v26 + 1;
        size_t v14 = operator new(v26 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
        *(void *)std::string buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_48;
        }
      }
LABEL_47:
      memmove(v14, v11, v13);
LABEL_48:
      v14[v13] = 0;
      uint64_t v25 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v31);
      goto LABEL_58;
    }
LABEL_29:
    int v31 = -1431655766;
    int v15 = util::convert<int>(&v32, &v31, 0);
    if (v31 > -2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v16 != 1) {
      goto LABEL_42;
    }
    size_t v11 = (const void *)*MEMORY[0x263F25DD0];
    size_t v17 = strlen((const char *)*MEMORY[0x263F25DD0]);
    if (v17 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = v17;
    if (v17 >= 0x17)
    {
      uint64_t v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v23 = v17 | 7;
      }
      uint64_t v24 = v23 + 1;
      size_t v14 = operator new(v23 + 1);
      *(void *)&uint8_t buf[8] = v13;
      *(void *)&uint8_t buf[16] = v24 | 0x8000000000000000;
      *(void *)std::string buf = v14;
    }
    else
    {
      buf[23] = v17;
      size_t v14 = buf;
      if (!v17) {
        goto LABEL_48;
      }
    }
    goto LABEL_47;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F26168])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F26300])) {
    goto LABEL_21;
  }
LABEL_11:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F26858]))
  {
    LOBYTE(v31) = 1;
    if (!util::convert<BOOL>(&v32, (BOOL *)&v31, 0)) {
      goto LABEL_42;
    }
    uint64_t v18 = (const void *)*MEMORY[0x263F25DD0];
    size_t v19 = strlen((const char *)*MEMORY[0x263F25DD0]);
    if (v19 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v20 = v19;
    if (v19 >= 0x17)
    {
      uint64_t v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v28 = v19 | 7;
      }
      uint64_t v29 = v28 + 1;
      uint64_t v21 = operator new(v28 + 1);
      *(void *)&uint8_t buf[8] = v20;
      *(void *)&uint8_t buf[16] = v29 | 0x8000000000000000;
      *(void *)std::string buf = v21;
    }
    else
    {
      buf[23] = v19;
      uint64_t v21 = buf;
      if (!v19) {
        goto LABEL_57;
      }
    }
    memmove(v21, v18, v20);
LABEL_57:
    v21[v20] = 0;
    uint64_t v25 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v31);
LABEL_58:
    uint64_t v22 = v25;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v22;
      }
    }
    else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v22;
    }
LABEL_62:
    operator delete(v32.__r_.__value_.__l.__data_);
    return v22;
  }
  size_t v5 = GetOsLogContext()[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *MEMORY[0x263F25DD0];
    if (a1[23] >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(char **)a1;
    }
    uint64_t v8 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2080;
    __int16 v34 = v7;
    __int16 v35 = 2080;
    uint64_t v36 = v8;
    _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_42:
  uint64_t v22 = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
  return v22;
}

void sub_26373BDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(&v35, 170, sizeof(v35));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v35 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v35)) {
    goto LABEL_46;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25E28]))
    {
      int v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F25F28])) {
        goto LABEL_11;
      }
LABEL_21:
      unsigned int v34 = -1431655766;
      int v9 = util::convert<int>(&v35, &v34, 0);
      if ((int)v34 > 0) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      if (v10 != 1) {
        goto LABEL_46;
      }
      size_t v11 = (const void *)*MEMORY[0x263F25F30];
      size_t v12 = strlen((const char *)*MEMORY[0x263F25F30]);
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v13 = v12;
      if (v12 >= 0x17)
      {
        uint64_t v27 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v27 = v12 | 7;
        }
        uint64_t v28 = v27 + 1;
        size_t v14 = operator new(v27 + 1);
        *(void *)&uint8_t buf[8] = v13;
        *(void *)&uint8_t buf[16] = v28 | 0x8000000000000000;
        *(void *)std::string buf = v14;
      }
      else
      {
        buf[23] = v12;
        size_t v14 = buf;
        if (!v12) {
          goto LABEL_54;
        }
      }
      memmove(v14, v11, v13);
LABEL_54:
      v14[v13] = 0;
      uint64_t v29 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v34);
      goto LABEL_65;
    }
LABEL_29:
    unsigned int v34 = -1431655766;
    if (TelephonyUtilIsInternalBuild()) {
      int IsCarrierBuild = 1;
    }
    else {
      int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    }
    if (!util::convert<unsigned int>(&v35, &v34)) {
      goto LABEL_46;
    }
    unsigned int v16 = IsCarrierBuild ? 3 : 2;
    if (v34 >= v16) {
      goto LABEL_46;
    }
    size_t v17 = (const void *)*MEMORY[0x263F25F30];
    size_t v18 = strlen((const char *)*MEMORY[0x263F25F30]);
    if (v18 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v19 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v30 = v18 | 7;
      }
      uint64_t v31 = v30 + 1;
      size_t v20 = operator new(v30 + 1);
      *(void *)&uint8_t buf[8] = v19;
      *(void *)&uint8_t buf[16] = v31 | 0x8000000000000000;
      *(void *)std::string buf = v20;
    }
    else
    {
      buf[23] = v18;
      size_t v20 = buf;
      if (!v18) {
        goto LABEL_59;
      }
    }
    memmove(v20, v17, v19);
LABEL_59:
    v20[v19] = 0;
    uint64_t v29 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v34);
    goto LABEL_65;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25E28])) {
    goto LABEL_29;
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x263F25F28])) {
    goto LABEL_21;
  }
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F26468]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x263F25F30];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v35;
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v37 = v7;
      __int16 v38 = 2080;
      size_t v39 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_46;
  }
  LOBYTE(v34) = -86;
  if (!util::convert<BOOL>(&v35, (BOOL *)&v34, 0))
  {
LABEL_46:
    uint64_t v25 = 0;
    goto LABEL_47;
  }
  uint64_t v21 = (const void *)*MEMORY[0x263F25F30];
  size_t v22 = strlen((const char *)*MEMORY[0x263F25F30]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v32 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v32 = v22 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v24 = operator new(v32 + 1);
    *(void *)&uint8_t buf[8] = v23;
    *(void *)&uint8_t buf[16] = v33 | 0x8000000000000000;
    *(void *)std::string buf = v24;
  }
  else
  {
    buf[23] = v22;
    uint64_t v24 = buf;
    if (!v22) {
      goto LABEL_64;
    }
  }
  memmove(v24, v21, v23);
LABEL_64:
  v24[v23] = 0;
  uint64_t v29 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v34);
LABEL_65:
  uint64_t v25 = v29;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_47:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_26373C300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  memset(&v25, 170, sizeof(v25));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v25 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::profile::get(a1, (uint64_t)&v25)) {
    goto LABEL_29;
  }
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    int v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F25DA0])) {
      goto LABEL_10;
    }
LABEL_19:
    LOBYTE(v24) = -86;
    if (!util::convert<BOOL>(&v25, (BOOL *)&v24, 0)) {
      goto LABEL_29;
    }
    int v9 = (const void *)*MEMORY[0x263F25E48];
    size_t v10 = strlen((const char *)*MEMORY[0x263F25E48]);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = v10;
    if (v10 >= 0x17)
    {
      uint64_t v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v19 = v10 | 7;
      }
      uint64_t v20 = v19 + 1;
      size_t v12 = operator new(v19 + 1);
      *(void *)&uint8_t buf[8] = v11;
      *(void *)&uint8_t buf[16] = v20 | 0x8000000000000000;
      *(void *)std::string buf = v12;
    }
    else
    {
      buf[23] = v10;
      size_t v12 = buf;
      if (!v10) {
        goto LABEL_37;
      }
    }
    memmove(v12, v9, v11);
LABEL_37:
    v12[v11] = 0;
    uint64_t v21 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v24);
    goto LABEL_43;
  }
  int v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F25DA0])) {
    goto LABEL_19;
  }
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F26828]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x263F25E48];
      if (a1[23] >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(char **)a1;
      }
      uint64_t v8 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v27 = v7;
      __int16 v28 = 2080;
      uint64_t v29 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_29;
  }
  int v24 = -1431655766;
  if (!util::convert<int>(&v25, &v24, 0))
  {
LABEL_29:
    uint64_t v17 = 0;
    goto LABEL_30;
  }
  size_t v13 = (const void *)*MEMORY[0x263F25E48];
  size_t v14 = strlen((const char *)*MEMORY[0x263F25E48]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v22 = v14 | 7;
    }
    uint64_t v23 = v22 + 1;
    unsigned int v16 = operator new(v22 + 1);
    *(void *)&uint8_t buf[8] = v15;
    *(void *)&uint8_t buf[16] = v23 | 0x8000000000000000;
    *(void *)std::string buf = v16;
  }
  else
  {
    buf[23] = v14;
    unsigned int v16 = buf;
    if (!v14) {
      goto LABEL_42;
    }
  }
  memmove(v16, v13, v15);
LABEL_42:
  v16[v15] = 0;
  uint64_t v21 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v25);
LABEL_43:
  uint64_t v17 = v21;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_30:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_26373C6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v23 = *MEMORY[0x263EF8340];
  memset(&v18, 170, sizeof(v18));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    if (v2[23] < 0) {
      uint64_t v2 = *(char **)v2;
    }
    if (strcasecmp(v2, "default")) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string v18 = *(std::string *)a2;
    if (strcasecmp(a2, "default")) {
      goto LABEL_8;
    }
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v18)) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(char *)(a1 + 23) >= 0) {
    int v4 = (const char *)a1;
  }
  else {
    int v4 = *(const char **)a1;
  }
  if (strcasecmp(v4, (const char *)*MEMORY[0x263F25DA0]))
  {
    size_t v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *MEMORY[0x263F25E98];
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v7 = (const char *)a1;
      }
      else {
        uint64_t v7 = *(const char **)a1;
      }
      uint64_t v8 = &v18;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v20 = v7;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
    goto LABEL_24;
  }
  char v17 = -86;
  if (!util::convert<BOOL>(&v18, (BOOL *)&v17, 0))
  {
LABEL_24:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  int v9 = (const void *)*MEMORY[0x263F25E98];
  size_t v10 = strlen((const char *)*MEMORY[0x263F25E98]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v15 = v10 | 7;
    }
    uint64_t v16 = v15 + 1;
    size_t v12 = operator new(v15 + 1);
    *(void *)&uint8_t buf[8] = v11;
    *(void *)&uint8_t buf[16] = v16 | 0x8000000000000000;
    *(void *)std::string buf = v12;
    goto LABEL_31;
  }
  buf[23] = v10;
  size_t v12 = buf;
  if (v10) {
LABEL_31:
  }
    memmove(v12, v9, v11);
  v12[v11] = 0;
  uint64_t v13 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v17);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_25:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_26373C9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  memset(&v30, 170, sizeof(v30));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v30 = *(std::string *)a2;
  }
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x263F263C8]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x263F26458]))
      {
        uint64_t v3 = a1;
        if (strcasecmp(a1, (const char *)*MEMORY[0x263F260E8])) {
          goto LABEL_8;
        }
LABEL_19:
        uint64_t v8 = (const void *)*MEMORY[0x263F25E90];
        size_t v9 = strlen((const char *)*MEMORY[0x263F25E90]);
        if (v9 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v10 = v9;
        if (v9 >= 0x17)
        {
          uint64_t v24 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17) {
            uint64_t v24 = v9 | 7;
          }
          uint64_t v25 = v24 + 1;
          size_t v11 = operator new(v24 + 1);
          *(void *)&uint8_t buf[8] = v10;
          *(void *)&uint8_t buf[16] = v25 | 0x8000000000000000;
          *(void *)std::string buf = v11;
        }
        else
        {
          buf[23] = v9;
          size_t v11 = buf;
          if (!v9) {
            goto LABEL_36;
          }
        }
LABEL_35:
        memmove(v11, v8, v10);
LABEL_36:
        v11[v10] = 0;
        uint64_t v19 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v30);
        goto LABEL_57;
      }
LABEL_28:
      uint64_t v8 = (const void *)*MEMORY[0x263F25E90];
      size_t v16 = strlen((const char *)*MEMORY[0x263F25E90]);
      if (v16 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v10 = v16;
      if (v16 >= 0x17)
      {
        uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v17 = v16 | 7;
        }
        uint64_t v18 = v17 + 1;
        size_t v11 = operator new(v17 + 1);
        *(void *)&uint8_t buf[8] = v10;
        *(void *)&uint8_t buf[16] = v18 | 0x8000000000000000;
        *(void *)std::string buf = v11;
      }
      else
      {
        buf[23] = v16;
        size_t v11 = buf;
        if (!v16) {
          goto LABEL_36;
        }
      }
      goto LABEL_35;
    }
LABEL_23:
    int v29 = -1431655766;
    if (!util::convert<int>(&v30, &v29, 0)) {
      goto LABEL_46;
    }
    size_t v12 = (const void *)*MEMORY[0x263F25E90];
    size_t v13 = strlen((const char *)*MEMORY[0x263F25E90]);
    if (v13 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = v13;
    if (v13 >= 0x17)
    {
      uint64_t v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v20 = v13 | 7;
      }
      uint64_t v21 = v20 + 1;
      uint64_t v15 = operator new(v20 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&uint8_t buf[16] = v21 | 0x8000000000000000;
      *(void *)std::string buf = v15;
    }
    else
    {
      buf[23] = v13;
      uint64_t v15 = buf;
      if (!v13) {
        goto LABEL_56;
      }
    }
LABEL_55:
    memmove(v15, v12, v14);
LABEL_56:
    v15[v14] = 0;
    uint64_t v19 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v29);
LABEL_57:
    uint64_t v23 = v19;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v23;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return v23;
    }
LABEL_61:
    operator delete(v30.__r_.__value_.__l.__data_);
    return v23;
  }
  uint64_t v3 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x263F263C8])) {
    goto LABEL_23;
  }
  if (!strcasecmp(v3, (const char *)*MEMORY[0x263F26458])) {
    goto LABEL_28;
  }
  if (!strcasecmp(v3, (const char *)*MEMORY[0x263F260E8])) {
    goto LABEL_19;
  }
LABEL_8:
  if (!strcasecmp(v3, (const char *)*MEMORY[0x263F262E0]))
  {
    int v29 = -1431655766;
    if (!util::convert<int>(&v30, &v29, 0)) {
      goto LABEL_46;
    }
    size_t v12 = (const void *)*MEMORY[0x263F25E90];
    size_t v22 = strlen((const char *)*MEMORY[0x263F25E90]);
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = v22;
    if (v22 >= 0x17)
    {
      uint64_t v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v26 = v22 | 7;
      }
      uint64_t v27 = v26 + 1;
      uint64_t v15 = operator new(v26 + 1);
      *(void *)&uint8_t buf[8] = v14;
      *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
      *(void *)std::string buf = v15;
    }
    else
    {
      buf[23] = v22;
      uint64_t v15 = buf;
      if (!v22) {
        goto LABEL_56;
      }
    }
    goto LABEL_55;
  }
  int v4 = GetOsLogContext()[1];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *MEMORY[0x263F25E90];
    if (a1[23] >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(char **)a1;
    }
    uint64_t v7 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v32 = v6;
    __int16 v33 = 2080;
    unsigned int v34 = v7;
    _os_log_error_impl(&dword_26368A000, v4, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
  }
LABEL_46:
  uint64_t v23 = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_61;
  }
  return v23;
}

void sub_26373CF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_26373D060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    BOOL v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    unint64_t v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "on")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "yes")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "full")) {
    goto LABEL_28;
  }
  if (!strcasecmp((const char *)a1, "streaming")) {
    goto LABEL_28;
  }
  BOOL v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite")) {
    goto LABEL_28;
  }
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    unint64_t v7 = 1;
    goto LABEL_29;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = std::stol(a1, &__idx, a3);
  uint64_t v8 = 0;
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == size && v7 < 2) {
    goto LABEL_29;
  }
  return v8;
}

uint64_t sub_26373D364(void *a1)
{
  return 0;
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x263E68CE0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_270EA8570;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v23;
    off_26A99F2D8 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_26A99F2D0;
  size_t v22 = off_26A99F2D8;
  uint64_t v30 = qword_26A99F2D0;
  uint64_t v31 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_26373D718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x263E68CE0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_270EA8570;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v23;
    off_26A99F2D8 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_26A99F2D0;
  size_t v22 = off_26A99F2D8;
  uint64_t v30 = qword_26A99F2D0;
  uint64_t v31 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_26373DB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  memset(__p, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  std::string::size_type v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v23 = operator new(0x18uLL);
    MEMORY[0x263E68CE0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_270EA8570;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v23;
    off_26A99F2D8 = v22;
    if (!v24)
    {
      uint64_t v30 = (uint64_t)v23;
      uint64_t v31 = (std::__shared_weak_count *)v22;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  LODWORD(v23) = qword_26A99F2D0;
  size_t v22 = off_26A99F2D8;
  uint64_t v30 = qword_26A99F2D0;
  uint64_t v31 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v29.__r_.__value_.__r.__words[2] = v21;
LABEL_42:
    std::string __dst = v29;
    goto LABEL_43;
  }
  std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
LABEL_43:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v25 = (char *)__p;
  }
  else {
    uint64_t v25 = (char *)__p[0];
  }
  uint64_t v26 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v25);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(v29.__r_.__value_.__l.__data_);
    uint64_t v27 = v31;
    if (!v31) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  uint64_t v27 = v31;
  if (!v31)
  {
LABEL_53:
    if ((v21 & 0x8000000000000000) == 0) {
      goto LABEL_54;
    }
LABEL_57:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return v26;
    }
LABEL_58:
    operator delete(__p[0]);
    return v26;
  }
LABEL_52:
  if (atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if ((v21 & 0x8000000000000000) != 0) {
    goto LABEL_57;
  }
LABEL_54:
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_58;
  }
  return v26;
}

void sub_26373DFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0) {
    operator delete(v30);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  memset(v30, 170, 24);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  unint64_t v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    size_t v12 = a1;
  }
  else {
    size_t v12 = *a1;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    size_t v14 = (const std::string::value_type *)a2;
  }
  else {
    size_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  size_t v16 = std::string::append(&__dst, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  uint64_t v30[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v30 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v18 = (void **)((char *)v30 + HIBYTE(v30[2]));
  }
  else {
    uint64_t v18 = (void **)((char *)v30[0] + (unint64_t)v30[1]);
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v19 = v30;
  }
  else {
    uint64_t v19 = (void **)v30[0];
  }
  for (; v19 != v18; uint64_t v19 = (void **)((char *)v19 + 1))
    *(unsigned char *)uint64_t v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    std::string::size_type v21 = operator new(0x18uLL);
    MEMORY[0x263E68CE0](v21, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    long long v20 = operator new(0x20uLL);
    *long long v20 = &unk_270EA8570;
    v20[1] = 0;
    v20[2] = 0;
    void v20[3] = v21;
    size_t v22 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v21;
    off_26A99F2D8 = v20;
    if (!v22)
    {
      uint64_t v28 = (uint64_t)v21;
      std::string v29 = (std::__shared_weak_count *)v20;
      goto LABEL_38;
    }
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  LODWORD(v21) = qword_26A99F2D0;
  long long v20 = off_26A99F2D8;
  uint64_t v28 = qword_26A99F2D0;
  std::string v29 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_38:
  }
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  if (SHIBYTE(v30[2]) >= 0) {
    uint64_t v23 = (char *)v30;
  }
  else {
    uint64_t v23 = (char *)v30[0];
  }
  uint64_t v24 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_50:
      uint64_t v25 = v29;
      if (!v29) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  uint64_t v25 = v29;
  if (!v29) {
    goto LABEL_55;
  }
LABEL_54:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((SHIBYTE(v30[2]) & 0x80000000) == 0) {
      return v24;
    }
    goto LABEL_56;
  }
LABEL_55:
  if (SHIBYTE(v30[2]) < 0) {
LABEL_56:
  }
    operator delete(v30[0]);
  return v24;
}

void sub_26373E440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v4) = strcasecmp((const char *)a1, "false");
    if (!v4) {
      goto LABEL_29;
    }
    LODWORD(v4) = strcasecmp((const char *)a1, "off");
    if (!v4) {
      goto LABEL_29;
    }
    LODWORD(v4) = strcasecmp((const char *)a1, "no");
    if (!v4) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      unint64_t v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v4) = 1;
    goto LABEL_29;
  }
  unint64_t v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v4) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!v4) {
    goto LABEL_29;
  }
  LODWORD(v4) = strcasecmp(v5, "off");
  if (!v4) {
    goto LABEL_29;
  }
  LODWORD(v4) = strcasecmp(v5, "no");
  if (!v4) {
    goto LABEL_29;
  }
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_30:
    LODWORD(v4) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background")) {
    goto LABEL_30;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = std::stol(a1, &__idx, 0);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx != size || (v4 & 0x8000000000000000) != 0 || HIDWORD(v4)) {
    return 0;
  }
LABEL_29:
  *a2 = v4;
  return 1;
}

uint64_t sub_26373E724(void *a1)
{
  return 0;
}

void prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p)) {
    util::convert<int>(&__p, a2, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_26373E7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  BOOL v34 = 0;
  if ((prop::tracesettings *)*MEMORY[0x263F25F30] == this)
  {
    size_t v6 = strlen((const char *)this);
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
LABEL_59:
    }
      std::string::__throw_length_error[abi:ne180100]();
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v17 = v6 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      size_t v32 = v7;
      unint64_t v33 = v18 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v6;
      p_dst = (void **)&__dst;
      if (!v6)
      {
LABEL_35:
        *((unsigned char *)p_dst + v7) = 0;
        uint64_t v19 = (const void *)*MEMORY[0x263F25E28];
        size_t v20 = strlen((const char *)*MEMORY[0x263F25E28]);
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v21 = v20;
        if (v20 >= 0x17)
        {
          uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v23 = v20 | 7;
          }
          uint64_t v24 = v23 + 1;
          size_t v22 = operator new(v23 + 1);
          size_t v29 = v21;
          unint64_t v30 = v24 | 0x8000000000000000;
          uint64_t v28 = v22;
        }
        else
        {
          HIBYTE(v30) = v20;
          size_t v22 = &v28;
          if (!v20)
          {
LABEL_43:
            *((unsigned char *)v22 + v21) = 0;
            memset(&__p, 0, sizeof(__p));
            int v25 = -1431655766;
            if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
            {
              int v35 = -1431655766;
              int v26 = util::convert<int>(&__p, &v35, 0);
              if (v26) {
                int v25 = v35;
              }
              else {
                int v25 = -1431655766;
              }
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_51:
                if (SHIBYTE(v30) < 0)
                {
                  operator delete(v28);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_53:
                    if (!v26) {
                      return v34;
                    }
                    return v25 != 0;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_53;
                }
                operator delete(__dst);
                if (!v26) {
                  return v34;
                }
                return v25 != 0;
              }
            }
            else
            {
              int v26 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_51;
              }
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(p_dst, this, v7);
    goto LABEL_35;
  }
  size_t v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_59;
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v9 = v3 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v5 = (void **)operator new(v9 + 1);
    size_t v32 = v4;
    unint64_t v33 = v10 | 0x8000000000000000;
    std::string __dst = v5;
    goto LABEL_13;
  }
  HIBYTE(v33) = v3;
  unint64_t v5 = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memcpy(v5, this, v4);
  *((unsigned char *)v5 + v4) = 0;
  uint64_t v11 = (const void *)*MEMORY[0x263F25F20];
  size_t v12 = strlen((const char *)*MEMORY[0x263F25F20]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    size_t v14 = operator new(v15 + 1);
    size_t v29 = v13;
    unint64_t v30 = v16 | 0x8000000000000000;
    uint64_t v28 = v14;
    goto LABEL_21;
  }
  HIBYTE(v30) = v12;
  size_t v14 = &v28;
  if (v12) {
LABEL_21:
  }
    memmove(v14, v11, v13);
  *((unsigned char *)v14 + v13) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p)) {
    util::convert<BOOL>(&__p, &v34, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v33) < 0) {
        goto LABEL_30;
      }
      return v34;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28);
  if (SHIBYTE(v33) < 0) {
LABEL_30:
  }
    operator delete(__dst);
  return v34;
}

void sub_26373EB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25F30], v2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E88], v3)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25EF0], v5)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25F78], v6))
  {
    return 1;
  }
  uint64_t v9 = (prop::tracesettings *)*MEMORY[0x263F25E98];

  return prop::tracesettings::enabled(v9, v7);
}

BOOL prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v2))
  {
    return 1;
  }
  unint64_t v5 = (prop::tracesettings *)*MEMORY[0x263F25EF0];

  return prop::tracesettings::enabled(v5, v3);
}

BOOL prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v2))
  {
    return 1;
  }
  unint64_t v5 = (prop::tracesettings *)*MEMORY[0x263F25EF0];

  return prop::tracesettings::enabled(v5, v3);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(v30, 170, sizeof(v30));
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = v6 + 1;
  std::string __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  size_t v29 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    size_t v29 = (std::__shared_weak_count *)(v6 + 1);
    v30[0] = v13 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    size_t v29 = 0;
    v30[0] = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v30[0]) = v6 + 1;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    size_t v14 = a1;
  }
  else {
    size_t v14 = *a1;
  }
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  uint64_t v18 = std::string::append((std::string *)&__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v30[3] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v30[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(__dst);
  }
  if (v30[3] >= 0) {
    size_t v20 = (char *)&v30[1] + HIBYTE(v30[3]);
  }
  else {
    size_t v20 = (char *)(v30[1] + v30[2]);
  }
  if (v30[3] >= 0) {
    size_t v21 = (char *)&v30[1];
  }
  else {
    size_t v21 = (char *)v30[1];
  }
  for (; v21 != v20; ++v21)
    *size_t v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v23 = (void **)operator new(0x18uLL);
    MEMORY[0x263E68CE0](v23, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    size_t v22 = operator new(0x20uLL);
    void *v22 = &unk_270EA8570;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    uint64_t v24 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v23;
    off_26A99F2D8 = v22;
    if (!v24)
    {
      std::string __dst = v23;
      size_t v29 = (std::__shared_weak_count *)v22;
      goto LABEL_41;
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  uint64_t v23 = (void **)qword_26A99F2D0;
  size_t v22 = off_26A99F2D8;
  std::string __dst = (void **)qword_26A99F2D0;
  size_t v29 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_41:
  }
    atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v30[3] >= 0) {
    int v25 = (const char *)&v30[1];
  }
  else {
    int v25 = (const char *)v30[1];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v31, v25);
  int v26 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v31);
  if (v26)
  {
    ctu::cf::assign();
    CFRelease(v26);
  }
  MEMORY[0x263E68C90](&v31);
  uint64_t v27 = v29;
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v30[3]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v30[3]) < 0) {
LABEL_50:
  }
    operator delete((void *)v30[1]);
}

uint64_t __cxx_global_var_init_11()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t *GetOsLogContext(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A99F6F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A99F6F0))
  {
    qword_26A99F710 = 0;
    qword_26A99F708 = 0;
    __cxa_atexit(MEMORY[0x263F8BDA8], &qword_26A99F708, &dword_26368A000);
    __cxa_guard_release(&qword_26A99F6F0);
  }
  if (_MergedGlobals_4 != -1) {
    dispatch_once(&_MergedGlobals_4, &__block_literal_global_3);
  }
  return &qword_26A99F708;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A99F700, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A99F700))
  {
    MEMORY[0x263E68BA0](&unk_26A99F718);
    __cxa_atexit(MEMORY[0x263F8BDB0], &unk_26A99F718, &dword_26368A000);
    __cxa_guard_release(&qword_26A99F700);
  }
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  v5[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_3_1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  v5[4] = *a1;
  size_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (qword_26A99F6F8 == -1)
  {
    size_t v3 = v6;
    if (!v6) {
      return &unk_26A99F718;
    }
  }
  else
  {
    dispatch_once(&qword_26A99F6F8, v5);
    size_t v3 = v6;
    if (!v6) {
      return &unk_26A99F718;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return &unk_26A99F718;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return &unk_26A99F718;
}

void sub_26373F3F4(_Unwind_Exception *a1)
{
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26A99F6F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26A99F6F0))
  {
    qword_26A99F710 = 0;
    qword_26A99F708 = 0;
    __cxa_atexit(MEMORY[0x263F8BDA8], &qword_26A99F708, &dword_26368A000);
    __cxa_guard_release(&qword_26A99F6F0);
  }
  if (_MergedGlobals_4 != -1) {
    dispatch_once(&_MergedGlobals_4, &__block_literal_global_3);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, (const ctu::OsLogContext *)&qword_26A99F708);
  MEMORY[0x263E68B90](v6, v5, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  uint64_t v3 = v7;
  uint64_t v2 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v4 = (std::__shared_weak_count *)qword_26A99F750;
  qword_26A99F748 = v3;
  qword_26A99F750 = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x263E68BB0](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_26373F55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::__shared_weak_count_vtbl **TraceCAReporter::create@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v3);
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;

  return std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_26373F664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void TraceCAReporter::TraceCAReporter(TraceCAReporter *this)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v74, "com.apple.telephony.abm", "ca.trace.reporter");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("TraceCAReporter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 3) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((TraceCAReporter *)((char *)this + 32), (const ctu::OsLogLogger *)&__dst);
  MEMORY[0x263E68B30](&__dst);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
  size_t v4 = (const char *)*MEMORY[0x263F25F20];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x263F25F20], MEMORY[0x263F26830]);
  uint64_t v68 = v4;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v78, (char *)*MEMORY[0x263F25F28], MEMORY[0x263F261E8]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v82, (char *)*MEMORY[0x263F26558], MEMORY[0x263F263A0]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v86, (char *)*MEMORY[0x263F25E28], MEMORY[0x263F25EB0]);
  uint64_t v5 = 0;
  size_t v6 = (void *)((char *)this + 64);
  char v69 = (char *)this + 64;
  long long v70 = (void ***)((char *)this + 80);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  do
  {
    uint64_t v7 = &v74 + 2 * v5;
    int v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v8 >= 0) {
      uint64_t v9 = &v74 + 2 * v5;
    }
    else {
      uint64_t v9 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    if (v8 >= 0) {
      unint64_t size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    }
    else {
      unint64_t size = v7->__r_.__value_.__l.__size_;
    }
    unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, (uint64_t *)v9, size);
    unint64_t v12 = v11;
    unint64_t v13 = *((void *)this + 9);
    if (!v13)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_63;
    }
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v15 = v11;
      if (v11 >= v13) {
        unint64_t v15 = v11 % v13;
      }
    }
    else
    {
      unint64_t v15 = (v13 - 1) & v11;
    }
    uint64_t v16 = *(uint64_t ***)(*v6 + 8 * v15);
    if (v16)
    {
      std::string::size_type v17 = *v16;
      if (*v16)
      {
        char v18 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v18 >= 0) {
          std::string::size_type v19 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v19 = v7->__r_.__value_.__l.__size_;
        }
        if (v18 >= 0) {
          size_t v20 = &v74 + 2 * v5;
        }
        else {
          size_t v20 = (std::string *)v7->__r_.__value_.__r.__words[0];
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v26 = v17[1];
            if (v26 == v12)
            {
              uint64_t v27 = *((unsigned __int8 *)v17 + 39);
              if ((v27 & 0x80u) == 0) {
                uint64_t v28 = *((unsigned __int8 *)v17 + 39);
              }
              else {
                uint64_t v28 = v17[3];
              }
              if (v28 == v19)
              {
                size_t v29 = (const void **)(v17 + 2);
                if ((v27 & 0x80) != 0)
                {
                  if (!memcmp(*v29, v20, v17[3])) {
                    goto LABEL_7;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v17 + 39)) {
                    goto LABEL_7;
                  }
                  unint64_t v30 = v20;
                  while (*(unsigned __int8 *)v29 == v30->__r_.__value_.__s.__data_[0])
                  {
                    size_t v29 = (const void **)((char *)v29 + 1);
                    unint64_t v30 = (std::string *)((char *)v30 + 1);
                    if (!--v27) {
                      goto LABEL_7;
                    }
                  }
                }
              }
            }
            else if ((v26 & (v13 - 1)) != v15)
            {
              goto LABEL_62;
            }
            std::string::size_type v17 = (uint64_t *)*v17;
            if (!v17) {
              goto LABEL_62;
            }
          }
        }
        while (1)
        {
          unint64_t v21 = v17[1];
          if (v21 == v12)
          {
            uint64_t v22 = *((unsigned __int8 *)v17 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v17 + 39);
            }
            else {
              uint64_t v23 = v17[3];
            }
            if (v23 == v19)
            {
              uint64_t v24 = (const void **)(v17 + 2);
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp(*v24, v20, v17[3])) {
                  goto LABEL_7;
                }
              }
              else
              {
                if (!*((unsigned char *)v17 + 39)) {
                  goto LABEL_7;
                }
                int v25 = v20;
                while (*(unsigned __int8 *)v24 == v25->__r_.__value_.__s.__data_[0])
                {
                  uint64_t v24 = (const void **)((char *)v24 + 1);
                  int v25 = (std::string *)((char *)v25 + 1);
                  if (!--v22) {
                    goto LABEL_7;
                  }
                }
              }
            }
          }
          else
          {
            if (v21 >= v13) {
              v21 %= v13;
            }
            if (v21 != v15)
            {
LABEL_62:
              size_t v6 = (void *)((char *)this + 64);
              break;
            }
          }
          std::string::size_type v17 = (uint64_t *)*v17;
          if (!v17) {
            goto LABEL_62;
          }
        }
      }
    }
LABEL_63:
    unint64_t v73 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v31 = operator new(0x40uLL);
    size_t v32 = v31;
    std::string __dst = (void **)v31;
    char v72 = (char *)this + 80;
    LOBYTE(v73) = 0;
    *uint64_t v31 = 0;
    v31[1] = v12;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v31 + 2), v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    }
    else
    {
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v31[4] = *((void *)&v7->__r_.__value_.__l + 2);
    }
    unint64_t v33 = (std::string *)(v32 + 5);
    BOOL v34 = &v74 + 2 * v5 + 1;
    if (SHIBYTE(v7[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v33, v34->__r_.__value_.__l.__data_, *(&v76 + 6 * v5));
    }
    else
    {
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v32[7] = *(&v77 + 6 * v5);
    }
    LOBYTE(v73) = 1;
    float v35 = (float)(unint64_t)(*((void *)this + 11) + 1);
    float v36 = *((float *)this + 24);
    if (v13 && (float)(v36 * (float)v13) >= v35) {
      goto LABEL_97;
    }
    BOOL v37 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3) {
      BOOL v37 = 1;
    }
    unint64_t v38 = v37 | (2 * v13);
    unint64_t v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39) {
      size_t prime = v39;
    }
    else {
      size_t prime = v38;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v41 = *(int8x8_t *)((char *)this + 72);
    if (prime > *(void *)&v41) {
      goto LABEL_81;
    }
    if (prime < *(void *)&v41)
    {
      unint64_t v42 = vcvtps_u32_f32((float)*((unint64_t *)this + 11) / *((float *)this + 24));
      if (*(void *)&v41 < 3uLL || (uint8x8_t v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (prime <= v42) {
        size_t prime = v42;
      }
      if (prime < *(void *)&v41) {
LABEL_81:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>((uint64_t)v6, prime);
    }
    unint64_t v13 = *((void *)this + 9);
    unint64_t v45 = v13 - 1;
    if ((v13 & (v13 - 1)) == 0)
    {
      unint64_t v15 = v45 & v12;
      uint64_t v46 = *(void ****)(*v6 + 8 * (v45 & v12));
      int v47 = __dst;
      if (!v46) {
        goto LABEL_98;
      }
      goto LABEL_5;
    }
    if (v12 < v13)
    {
      unint64_t v15 = v12;
LABEL_97:
      uint64_t v46 = *(void ****)(*v6 + 8 * v15);
      int v47 = __dst;
      if (!v46) {
        goto LABEL_98;
      }
      goto LABEL_5;
    }
    unint64_t v15 = v12 % v13;
    uint64_t v46 = *(void ****)(*v6 + 8 * (v12 % v13));
    int v47 = __dst;
    if (!v46)
    {
LABEL_98:
      long long *v47 = *v70;
      *long long v70 = __dst;
      *(void *)(*v6 + 8 * v15) = v70;
      if (*__dst)
      {
        unint64_t v48 = *((void *)*__dst + 1);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v48 >= v13) {
            v48 %= v13;
          }
        }
        else
        {
          v48 &= v13 - 1;
        }
        *(void *)(*v6 + 8 * v48) = __dst;
      }
      goto LABEL_6;
    }
LABEL_5:
    long long *v47 = *v46;
    *uint64_t v46 = __dst;
LABEL_6:
    ++*((void *)this + 11);
LABEL_7:
    ++v5;
    size_t v6 = (void *)((char *)this + 64);
  }
  while (v5 != 4);
  if ((v89 & 0x80000000) == 0)
  {
    uint64_t v49 = v68;
    if ((v87 & 0x80000000) == 0) {
      goto LABEL_108;
    }
LABEL_133:
    operator delete(v86);
    if (v85 < 0) {
      goto LABEL_134;
    }
LABEL_109:
    if ((v83 & 0x80000000) == 0) {
      goto LABEL_110;
    }
LABEL_135:
    operator delete(v82);
    if (v81 < 0) {
      goto LABEL_136;
    }
LABEL_111:
    if ((v79 & 0x80000000) == 0) {
      goto LABEL_112;
    }
LABEL_137:
    operator delete(v78);
    if (SHIBYTE(v77) < 0) {
      goto LABEL_138;
    }
LABEL_113:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_114;
    }
LABEL_139:
    operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_114;
  }
  operator delete(__p);
  uint64_t v49 = v68;
  if (v87 < 0) {
    goto LABEL_133;
  }
LABEL_108:
  if ((v85 & 0x80000000) == 0) {
    goto LABEL_109;
  }
LABEL_134:
  operator delete(v84);
  if (v83 < 0) {
    goto LABEL_135;
  }
LABEL_110:
  if ((v81 & 0x80000000) == 0) {
    goto LABEL_111;
  }
LABEL_136:
  operator delete(v80);
  if (v79 < 0) {
    goto LABEL_137;
  }
LABEL_112:
  if ((SHIBYTE(v77) & 0x80000000) == 0) {
    goto LABEL_113;
  }
LABEL_138:
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_139;
  }
LABEL_114:
  gettimeofday((timeval *)this + 3, 0);
  size_t v50 = strlen(v49);
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v51 = v50;
  if (v50 >= 0x17)
  {
    uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v53 = v50 | 7;
    }
    uint64_t v54 = v53 + 1;
    p_dst = (void **)operator new(v53 + 1);
    char v72 = (char *)v51;
    unint64_t v73 = v54 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_121;
  }
  HIBYTE(v73) = v50;
  p_dst = (void **)&__dst;
  if (v50) {
LABEL_121:
  }
    memmove(p_dst, v49, v51);
  *((unsigned char *)p_dst + v51) = 0;
  memset(&v74, 0, sizeof(v74));
  uint64_t v55 = prop::bbtrace::get((char *)&__dst, (uint64_t)&v74);
  if (v55) {
    uint64_t v55 = util::convert<BOOL>(&v74, (BOOL *)this + 40, 0);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73) < 0) {
      goto LABEL_141;
    }
  }
  else
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0) {
      goto LABEL_126;
    }
LABEL_141:
    operator delete(__dst);
  }
LABEL_126:
  if (!capabilities::radio::maverick((capabilities::radio *)v55))
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x263F29D80], MEMORY[0x263F261F0]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
    goto LABEL_155;
  }
  long long v56 = (const void *)*MEMORY[0x263F20720];
  size_t v57 = strlen((const char *)*MEMORY[0x263F20720]);
  if (v57 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v58 = v57;
  if (v57 >= 0x17)
  {
    uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17) {
      uint64_t v60 = v57 | 7;
    }
    uint64_t v61 = v60 + 1;
    unint64_t v59 = (std::string *)operator new(v60 + 1);
    v74.__r_.__value_.__l.__size_ = v58;
    v74.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    goto LABEL_145;
  }
  *((unsigned char *)&v74.__r_.__value_.__s + 23) = v57;
  unint64_t v59 = &v74;
  if (v57) {
LABEL_145:
  }
    memmove(v59, v56, v58);
  v59->__r_.__value_.__s.__data_[v58] = 0;
  unint64_t v62 = &v75;
  std::string v63 = (const void *)*MEMORY[0x263F261F0];
  size_t v64 = strlen((const char *)*MEMORY[0x263F261F0]);
  if (v64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v65 = v64;
  if (v64 >= 0x17)
  {
    uint64_t v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17) {
      uint64_t v66 = v64 | 7;
    }
    uint64_t v67 = v66 + 1;
    unint64_t v62 = operator new(v66 + 1);
    size_t v76 = v65;
    unint64_t v77 = v67 | 0x8000000000000000;
    unsigned int v75 = v62;
    goto LABEL_153;
  }
  HIBYTE(v77) = v64;
  if (v64) {
LABEL_153:
  }
    memmove(v62, v63, v65);
  *((unsigned char *)v62 + v65) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
LABEL_155:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_159:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_159;
  }
}

void sub_26373FFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&__p);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a14);
  ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(v27);
  _Unwind_Resume(a1);
}

void sub_2637400BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  do
  {
    v20 -= 48;
    std::pair<std::string,std::string>::~pair((uint64_t)v20);
  }
  while (v20 != &a19);
  ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(v19);
  _Unwind_Resume(a1);
}

void sub_2637401A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_10:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(void *a1)
{
  MEMORY[0x263E68B30](a1 + 4);
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TraceCAReporter::prepTraceStats(TraceCAReporter *a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(v37, 170, sizeof(v37));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26158]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long __p = 0uLL;
  uint64_t v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25E30]);
  xpc_object_t v35 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v35 = xpc_null_create();
  }
  long long __p = 0uLL;
  uint64_t v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v35);
  if (!TraceCAReporter::supportedTraceDomainToReport((uint64_t)a1, (char *)object)) {
    goto LABEL_14;
  }
  if (SHIBYTE(v37[2]) >= 0) {
    int v8 = v37;
  }
  else {
    int v8 = (void **)v37[0];
  }
  uint64_t v9 = (const char *)*MEMORY[0x263F25F20];
  if (strcasecmp((const char *)v8, (const char *)*MEMORY[0x263F25F20]))
  {
    uint64_t v10 = *((void *)a1 + 4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v8;
      _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&__p, 0xCu);
    }
LABEL_14:
    *a3 = xpc_null_create();
    goto LABEL_15;
  }
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  uint64_t v12 = MEMORY[0x263EF8708];
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v11) == v12)
    {
      xpc_retain(v11);
      xpc_object_t v13 = v11;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x263F26398]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F25FA8], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  xpc_object_t v16 = xpc_string_create((const char *)*MEMORY[0x263F25FC8]);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26080], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t v18 = xpc_string_create((const char *)*MEMORY[0x263F26028]);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26078], v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  *(void *)&long long __p = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v20 = xpc_null_create();
  *(void *)&long long __p = v20;
  if (SHIBYTE(v37[2]) >= 0) {
    unint64_t v21 = v37;
  }
  else {
    unint64_t v21 = (void **)v37[0];
  }
  if (!strcasecmp((const char *)v21, v9))
  {
    xpc_object_t v23 = *a2;
    xpc_object_t v34 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v34 = v23;
    }
    TraceCAReporter::prepTraceStatsEnabled((uint64_t)a1, &v34, &v35);
    xpc_object_t v22 = v35;
    xpc_object_t v35 = xpc_null_create();
    *(void *)&long long __p = v22;
    xpc_release(v20);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    xpc_release(v23);
    xpc_object_t v34 = 0;
  }
  else
  {
    xpc_object_t v22 = v20;
  }
  if (MEMORY[0x263E6A240](v22) == v12)
  {
    TraceCAReporter::gatherMissingBasebandTraceState(a1, (xpc_object_t *)&__p);
    xpc_object_t v24 = (xpc_object_t)__p;
    if ((void)__p) {
      xpc_retain((xpc_object_t)__p);
    }
    else {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x263F26420], v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v27 = v26;
    if (v26)
    {
      *a3 = v26;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
      *a3 = v27;
      if (!v27)
      {
        xpc_object_t v28 = xpc_null_create();
        xpc_object_t v27 = 0;
        goto LABEL_53;
      }
    }
    if (MEMORY[0x263E6A240](v27) == v12)
    {
      xpc_retain(v27);
LABEL_54:
      xpc_release(v27);
      xpc_object_t v29 = xpc_string_create((const char *)*MEMORY[0x263F25DF0]);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_object_t v30 = *a3;
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x263F25E20], v29);
      xpc_object_t v31 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v31);
      if (v13)
      {
        xpc_retain(v13);
        xpc_object_t v30 = *a3;
        xpc_object_t v32 = v13;
      }
      else
      {
        xpc_object_t v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F25E18], v32);
      xpc_object_t v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      xpc_object_t v22 = (xpc_object_t)__p;
      goto LABEL_60;
    }
    xpc_object_t v28 = xpc_null_create();
LABEL_53:
    *a3 = v28;
    goto LABEL_54;
  }
  *a3 = xpc_null_create();
LABEL_60:
  xpc_release(v22);
  xpc_release(v13);
LABEL_15:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v37[0]);
    return;
  }
  operator delete(object[0]);
  if (SHIBYTE(v37[2]) < 0) {
    goto LABEL_19;
  }
}

void sub_263740844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL TraceCAReporter::supportedTraceDomainToReport(uint64_t a1, char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = a2[23];
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = a2;
    if (strcasecmp(a2, (const char *)*MEMORY[0x263F25E80])) {
      goto LABEL_3;
    }
    return 1;
  }
  uint64_t v5 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x263F25E80])) {
    return 1;
  }
LABEL_3:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x263F20520])) {
    return 1;
  }
  size_t v6 = *(NSObject **)(a1 + 32);
  BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v8 = *(char **)a2;
    if (v4 >= 0) {
      int v8 = a2;
    }
    int v9 = 136315138;
    uint64_t v10 = v8;
    _os_log_error_impl(&dword_26368A000, v6, OS_LOG_TYPE_ERROR, "Trace domain %s is not supported to report to CA", (uint8_t *)&v9, 0xCu);
    return 0;
  }
  return result;
}

BOOL TraceCAReporter::supportedTracePropertyToReport(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  int v4 = strcasecmp(v3, (const char *)*MEMORY[0x263F25F20]);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      int v8 = v3;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&v7, 0xCu);
    }
  }
  return v4 == 0;
}

void TraceCAReporter::prepTraceStatsEnabled(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  memset(v54, 170, sizeof(v54));
  size_t v6 = (char *)*MEMORY[0x263F26158];
  char v53 = 12;
  strcpy((char *)__p, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)v54, *a2, v6, (uint64_t)__p);
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  memset(&v51, 170, sizeof(v51));
  int v7 = (char *)*MEMORY[0x263F26220];
  char v50 = 12;
  strcpy((char *)v49, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)&v51, *a2, v7, (uint64_t)v49);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  memset(__s1, 170, sizeof(__s1));
  int v8 = (char *)*MEMORY[0x263F26798];
  char v47 = 12;
  strcpy((char *)v46, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)__s1, *a2, v8, (uint64_t)v46);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  uint64_t v9 = v54[23];
  int v10 = v54[23];
  if (v54[23] < 0) {
    uint64_t v9 = *(void *)&v54[8];
  }
  if (v9 == 12)
  {
    uint64_t v11 = *(char **)v54;
    if (v54[23] >= 0) {
      uint64_t v11 = v54;
    }
    uint64_t v12 = *(void *)v11;
    int v13 = *((_DWORD *)v11 + 2);
    if (v12 == 0x6963657053746F4ELL && v13 == 1684367718) {
      goto LABEL_48;
    }
  }
  std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    xpc_object_t v16 = &v51;
  }
  else
  {
    std::string::size_type size = v51.__r_.__value_.__l.__size_;
    xpc_object_t v16 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if (size == 12
    && v16->__r_.__value_.__r.__words[0] == 0x6963657053746F4ELL
    && LODWORD(v16->__r_.__value_.__r.__words[1]) == 1684367718)
  {
LABEL_48:
    xpc_object_t v31 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      unint64_t v42 = *(char **)v54;
      if (v10 >= 0) {
        unint64_t v42 = v54;
      }
      uint8x8_t v43 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint8x8_t v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v42;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v43;
      _os_log_error_impl(&dword_26368A000, v31, OS_LOG_TYPE_ERROR, "Missing one of the key/value: key is %s, value is %s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!strcmp((const char *)v16, "default") && !defaults::bbtrace::get(v54, (std::string::size_type *)&v51))
  {
LABEL_52:
    xpc_object_t v30 = xpc_null_create();
    goto LABEL_53;
  }
  BOOL v45 = 0;
  util::convert<BOOL>(&v51, &v45, 0);
  if (*(unsigned char *)(a1 + 40) != v45) {
    goto LABEL_64;
  }
  abm::asString();
  if (SHIBYTE(__s1[2]) >= 0) {
    xpc_object_t v18 = (void *)HIBYTE(__s1[2]);
  }
  else {
    xpc_object_t v18 = __s1[1];
  }
  unint64_t v19 = v56;
  int v20 = (char)v56;
  if ((v56 & 0x80u) != 0) {
    unint64_t v19 = *(void *)&buf[8];
  }
  if (v18 != (void *)v19)
  {
    BOOL v27 = 1;
    if (((char)v56 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_63;
  }
  if ((v56 & 0x80u) == 0) {
    unint64_t v21 = buf;
  }
  else {
    unint64_t v21 = *(uint8_t **)buf;
  }
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    BOOL v27 = memcmp(__s1[0], v21, (size_t)__s1[1]) != 0;
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_63;
  }
  if (!HIBYTE(__s1[2]))
  {
    BOOL v27 = 0;
    if (((char)v56 & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_63:
    operator delete(*(void **)buf);
    if (v27) {
      goto LABEL_46;
    }
    goto LABEL_64;
  }
  uint64_t v22 = HIBYTE(__s1[2]) - 1;
  xpc_object_t v23 = __s1;
  do
  {
    int v25 = *(unsigned __int8 *)v23;
    xpc_object_t v23 = (void **)((char *)v23 + 1);
    int v24 = v25;
    int v26 = *v21++;
    BOOL v27 = v24 != v26;
  }
  while (v24 == v26 && v22-- != 0);
  if ((char)v56 < 0) {
    goto LABEL_63;
  }
LABEL_45:
  if (v27)
  {
LABEL_46:
    xpc_object_t v29 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v44 = __s1;
      if (SHIBYTE(__s1[2]) < 0) {
        uint64_t v44 = (void **)__s1[0];
      }
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v45;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v44;
      _os_log_debug_impl(&dword_26368A000, v29, OS_LOG_TYPE_DEBUG, "#D No state transistion, not reporting to CA(state: %d, triggerInterface: %s)", buf, 0x12u);
    }
    xpc_object_t v30 = xpc_null_create();
LABEL_53:
    *a3 = v30;
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_64:
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v33 = v32;
  if (v32)
  {
    *a3 = v32;
  }
  else
  {
    xpc_object_t v33 = xpc_null_create();
    *a3 = v33;
    if (!v33)
    {
      xpc_object_t v34 = xpc_null_create();
      xpc_object_t v33 = 0;
      goto LABEL_71;
    }
  }
  if (MEMORY[0x263E6A240](v33) == MEMORY[0x263EF8708])
  {
    xpc_retain(v33);
    goto LABEL_72;
  }
  xpc_object_t v34 = xpc_null_create();
LABEL_71:
  *a3 = v34;
LABEL_72:
  xpc_release(v33);
  TraceCAReporter::gatherDurationInformation((TraceCAReporter *)a1, a3);
  if (*(unsigned char *)(a1 + 40)) {
    xpc_object_t v35 = "On";
  }
  else {
    xpc_object_t v35 = "Off";
  }
  xpc_object_t v36 = xpc_string_create(v35);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_object_t v37 = *a3;
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x263F26830], v36);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v38);
  if (SHIBYTE(__s1[2]) >= 0) {
    uint64_t v39 = __s1;
  }
  else {
    uint64_t v39 = (void **)__s1[0];
  }
  xpc_object_t v40 = xpc_string_create((const char *)v39);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x263F261F8], v40);
  xpc_object_t v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  *(unsigned char *)(a1 + 40) = v45;
  if (SHIBYTE(__s1[2]) < 0) {
LABEL_54:
  }
    operator delete(__s1[0]);
LABEL_55:
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v54[23] & 0x80000000) == 0) {
      return;
    }
LABEL_59:
    operator delete(*(void **)v54);
    return;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (v54[23] < 0) {
    goto LABEL_59;
  }
}

void sub_2637411FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void TraceCAReporter::gatherMissingBasebandTraceState(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x263E6A240](*a2);
  uint64_t v5 = MEMORY[0x263EF8708];
  if (v4 != MEMORY[0x263EF8708])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v6) == v5)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  for (std::__wrap_iter<const char *>::iterator_type i = (uint64_t *)*((void *)this + 10); i; std::__wrap_iter<const char *>::iterator_type i = (uint64_t *)*i)
  {
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)xpc_object_t v23 = v11;
    *(_OWORD *)&v23[16] = v11;
    long long v22 = v11;
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v22, (const std::string::value_type *)i[2], i[3]);
      if ((*((char *)i + 63) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)&v23[8] = *(_OWORD *)(i + 5);
        *(void *)&v23[24] = i[7];
        goto LABEL_17;
      }
    }
    else
    {
      long long v22 = *((_OWORD *)i + 1);
      *(void *)xpc_object_t v23 = i[4];
      if ((*((char *)i + 63) & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)&v23[8], (const std::string::value_type *)i[5], i[6]);
LABEL_17:
    memset(&v21, 170, sizeof(v21));
    if ((v23[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v22;
      v21.__r_.__value_.__r.__words[2] = *(void *)v23;
    }
    memset(&v20, 170, sizeof(v20));
    if ((v23[31] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&v23[8], *(std::string::size_type *)&v23[16]);
    }
    else {
      std::string v20 = *(std::string *)&v23[8];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v20;
    }
    else {
      uint64_t v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (xpc_dictionary_get_value(*a2, (const char *)v12))
    {
LABEL_37:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_44;
    }
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v19 = 0;
    prop::bbtrace::get((char *)&v21, (uint64_t)v18);
    TraceCAReporter::convertPlistValToCAInformation((char *)&v21, (uint64_t)v18, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v14 = xpc_string_create((const char *)p_p);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      xpc_object_t v15 = &v20;
    }
    else {
      xpc_object_t v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    xpc_dictionary_set_value(*a2, (const char *)v15, v14);
    xpc_object_t v16 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if ((v23[31] & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v23[31] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v23[7] & 0x80000000) != 0) {
        goto LABEL_47;
      }
      continue;
    }
LABEL_46:
    operator delete(*(void **)&v23[8]);
    if ((v23[7] & 0x80000000) != 0) {
LABEL_47:
    }
      operator delete((void *)v22);
  }
}

void sub_263741618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    std::pair<std::string,std::string>::~pair((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a25);
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void TraceCAReporter::getOrDefault<std::string>(uint64_t a1, xpc_object_t xdict, char *key, uint64_t a4)
{
  memset(v10, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(xdict, key);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&v10[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  xpc_object_t v7 = (void *)HIBYTE(v10[2]);
  int v8 = SHIBYTE(v10[2]);
  if (SHIBYTE(v10[2]) < 0) {
    xpc_object_t v7 = v10[1];
  }
  if (v7)
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(void **)(a1 + 16) = v10[2];
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(void *)(a1 + 16) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    if (v8 < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_2637417BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

double TraceCAReporter::gatherDurationInformation(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x263E6A240](*a2);
  uint64_t v5 = MEMORY[0x263EF8708];
  if (v4 != MEMORY[0x263EF8708])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v6) == v5)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  v15.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v15.__darwin_suseconds_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v15, 0);
  uint64_t v11 = *((void *)this + 6);
  int v10 = (timeval *)((char *)this + 48);
  xpc_object_t v12 = xpc_int64_create(v15.tv_sec - v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x263F26010], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  double result = *(double *)&v15.tv_sec;
  timeval *v10 = v15;
  return result;
}

std::string *TraceCAReporter::convertPlistValToCAInformation@<X0>(char *a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = a3;
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((v4[23] & 0x80000000) == 0)
    {
LABEL_3:
      double result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x263F26558]);
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    if ((a1[23] & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = *(char **)v4;
  double result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x263F26558]);
  if (result)
  {
LABEL_4:
    if (!strcasecmp(v4, (const char *)*MEMORY[0x263F25E28]))
    {
      int v14 = -1431655766;
      util::convert<int>((const std::string *)a2, &v14, 0);
      xpc_object_t v13 = (const std::string::value_type *)trace::toString();
      return std::string::__assign_external(v5, v13);
    }
    else if (!strcasecmp(v4, (const char *)*MEMORY[0x263F25F20]) {
           || !strcasecmp(v4, (const char *)*MEMORY[0x263F29D80])
    }
           || (double result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x263F20720]), !result))
    {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v7 = *(void *)(a2 + 8);
      }
      if (v7 == 1)
      {
        if (*(char *)(a2 + 23) >= 0) {
          xpc_object_t v8 = (unsigned char *)a2;
        }
        else {
          xpc_object_t v8 = *(unsigned char **)a2;
        }
        if (*v8 == 48) {
          xpc_object_t v9 = "Off";
        }
        else {
          xpc_object_t v9 = "On";
        }
      }
      else
      {
        xpc_object_t v9 = "On";
      }
      return std::string::__assign_external(v5, v9);
    }
    return result;
  }
LABEL_19:
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (v10 == 1)
  {
    xpc_object_t v12 = v11 >= 0 ? (unsigned char *)a2 : *(unsigned char **)a2;
    if (*v12 == 48)
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        v5->__r_.__value_.__l.__size_ = 8;
        uint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((unsigned char *)&v5->__r_.__value_.__s + 23) = 8;
      }
      strcpy((char *)v5, "No limit");
    }
  }
  return result;
}

void sub_263741B78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    xpc_object_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  xpc_object_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  int v11 = (void *)(a1 + 24);
  xpc_object_t v12 = *a3;
  size_t v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v11 = operator new(v15 + 1);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v16 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((unsigned char *)v11 + v14) = 0;
  return a1;
}

void sub_263741CDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAA930;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2) {
    return a1;
  }
  size_t v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      a2->~__shared_weak_unsigned int count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  a2->~__shared_weak_unsigned int count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_263741E10(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_263741E38(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke(void *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      size_t v7 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_19:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_19;
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  unint64_t v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3) {
    operator delete(v3);
  }
  MEMORY[0x263E68B30](a1 + 4);
  uint64_t v4 = a1[3];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = a1[2];
  if (v5) {
    dispatch_release(v5);
  }
  size_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  size_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        xpc_object_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          size_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *xpc_object_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          size_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
LABEL_25:
          size_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          size_t v7 = v16;
          uint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned char *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v4[23];
        if (v15 >= 0) {
          uint64_t v16 = v4[23];
        }
        else {
          uint64_t v16 = *((void *)v4 + 1);
        }
        if (v15 < 0) {
          uint64_t v4 = *(unsigned char **)v4;
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v9)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                int v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v4, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (std::__wrap_iter<const char *>::iterator_type i = v4; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    int v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v9)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              std::string v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v4, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (j = v4; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  std::string v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v12) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  unint64_t v44 = 0xAAAAAAAAAAAAAA00;
  BOOL v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  *(void *)BOOL v27 = 0;
  *((void *)v27 + 1) = v9;
  xpc_object_t v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v27 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  LOBYTE(v44) = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v10 && (float)(v30 * (float)v10) >= v29) {
    goto LABEL_82;
  }
  BOOL v31 = 1;
  if (v10 >= 3) {
    BOOL v31 = (v10 & (v10 - 1)) != 0;
  }
  unint64_t v32 = v31 | (2 * v10);
  unint64_t v33 = vcvtps_u32_f32(v29 / v30);
  if (v32 <= v33) {
    size_t prime = v33;
  }
  else {
    size_t prime = v32;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  int8x8_t v35 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v35) {
    goto LABEL_66;
  }
  if (prime < *(void *)&v35)
  {
    unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      unint64_t v36 = std::__next_prime(v36);
    }
    else
    {
      uint64_t v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2) {
        unint64_t v36 = v38;
      }
    }
    if (prime <= v36) {
      size_t prime = v36;
    }
    if (prime < *(void *)&v35) {
LABEL_66:
    }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v39 = v10 - 1;
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v9 >= v10)
    {
      unint64_t v12 = v9 % v10;
      xpc_object_t v40 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
      xpc_object_t v41 = (void *)v43[0];
      if (!v40) {
        goto LABEL_85;
      }
      goto LABEL_83;
    }
    unint64_t v12 = v9;
LABEL_82:
    xpc_object_t v40 = *(void **)(*(void *)a1 + 8 * v12);
    xpc_object_t v41 = (void *)v43[0];
    if (!v40) {
      goto LABEL_85;
    }
    goto LABEL_83;
  }
  unint64_t v12 = v39 & v9;
  xpc_object_t v40 = *(void **)(*(void *)a1 + 8 * (v39 & v9));
  xpc_object_t v41 = (void *)v43[0];
  if (!v40)
  {
LABEL_85:
    void *v41 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v42 = *(void *)(*(void *)v43[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v42 >= v10) {
          v42 %= v10;
        }
      }
      else
      {
        v42 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v43[0];
    }
    goto LABEL_91;
  }
LABEL_83:
  void *v41 = *v40;
  void *v40 = v43[0];
LABEL_91:
  ++*(void *)(a1 + 24);
}

void sub_263742638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_26374264C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ClientGetLogServer(void *a1@<X8>)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  void block[4] = &qword_26A99F760;
  if (_MergedGlobals_5 == -1)
  {
    uint64_t v2 = *(void *)algn_26A99F768;
    *a1 = qword_26A99F760;
    a1[1] = v2;
    if (!v2) {
      return;
    }
  }
  else
  {
    dispatch_once(&_MergedGlobals_5, block);
    uint64_t v2 = *(void *)algn_26A99F768;
    *a1 = qword_26A99F760;
    a1[1] = v2;
    if (!v2) {
      return;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2637A8790;
  strcpy(*(char **)__p, "AppleBasebandManagerClientLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v24;
  long long v24 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (!*((void *)&v24 + 1)) {
      goto LABEL_5;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_5:
  if ((__p[23] & 0x80000000) != 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[7] = v6;
  v22[8] = v6;
  v22[5] = v6;
  void v22[6] = v6;
  v22[3] = v6;
  v22[4] = v6;
  v22[1] = v6;
  v22[2] = v6;
  long long v21 = v6;
  v22[0] = v6;
  *(_OWORD *)uint64_t v19 = v6;
  long long v20 = v6;
  long long v17 = v6;
  long long v18 = v6;
  *(_OWORD *)std::string __p = v6;
  *(_OWORD *)&__p[16] = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"/tmp/ABM.", 9);
  unint64_t v8 = getprogname();
  size_t v9 = strlen(v8);
  unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  LOBYTE(v24) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v24, 1);
  getpid();
  std::ostream::operator<<();
  uint8x8_t v11 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v11->~__shared_weak_unsigned int count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_270EA7418;
  *(void *)&long long v24 = v11;
  unint64_t v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EA7480;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v11;
  *((void *)&v24 + 1) = v12;
  char v15 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::addWriter();
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)std::string __p = *MEMORY[0x263F8C2C8];
  *(void *)&__p[*(void *)(*(void *)__p - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&__p[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x263E69630](v22);
}

void sub_263742B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v16 - 48);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void LogTracker::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0xE0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LogTracker::LogTracker((uint64_t)v4, v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(a2, v5);
  ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_263742C30(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::LogTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EAD770;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_270EAAD08;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_270EAAD08;
  }
  *(void *)a1 = &unk_270EAA980;
  *(void *)(a1 + 48) = &unk_270EAA9F0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", "logtracker.mod");
  GetABMLogServer(&v10);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("logtracker.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_270EAAD78;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)(a1 + 56) = &unk_270EA5428;
  unint64_t v7 = v11;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(void *)(a1 + 48) = &unk_270EAAE08;
  unint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_270EAA980;
  *(void *)(a1 + 48) = &unk_270EAA9F0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  return a1;
}

void sub_263742F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v16);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v15);
  _Unwind_Resume(a1);
}

void sub_263742F78(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void LogTracker::~LogTracker(LogTracker *this)
{
  *(void *)this = &unk_270EAA980;
  *((void *)this + 6) = &unk_270EAA9F0;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v3 = *((void *)this + 26);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v5 = *((void *)this + 22);
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
LABEL_8:
  }
    dispatch_release(v5);
LABEL_9:
  std::__tree<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<support::misc::Watchdog>>>>::destroy(*((void *)this + 20));
  *((void *)this + 6) = &unk_270EAAD78;
  MEMORY[0x263E68AF0]((char *)this + 56);
  uint64_t v6 = *((void *)this + 18);
  if (v6) {
    dispatch_release(v6);
  }
  unint64_t v7 = *((void *)this + 17);
  if (v7) {
    dispatch_release(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 4);
    uint8x8_t v11 = (void *)*((void *)this + 3);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint8x8_t v11 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v9;
    operator delete(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  LogTracker::~LogTracker(this);

  operator delete(v1);
}

void non-virtual thunk to'LogTracker::~LogTracker(LogTracker *this)
{
}

{
  void *v1;
  uint64_t vars8;

  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));

  operator delete(v1);
}

const char *LogTracker::getName(LogTracker *this)
{
  return "logtracker.mod";
}

void LogTracker::initialize(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[16];
  if (!v10 || (uint64_t v11 = a1[15], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = v5;
  v14[1] = v7;
  v14[2] = a1;
  void v14[3] = v9;
  char v15 = a1[17];
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v14;
  v16[1] = v11;
  uint64_t v16[2] = v13;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v17 = (std::__shared_weak_count *)a1[16];
  if (!v17 || (v18 = a1[15], (uint64_t v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v20 = v19;
  long long v21 = operator new(8uLL);
  *long long v21 = a1;
  uint64_t v22 = a1[17];
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v23 = operator new(0x18uLL);
  void *v23 = v21;
  v23[1] = v18;
  v23[2] = v20;
  dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::finishInitialization_sync(LogTracker *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (const char *)(*(uint64_t (**)(LogTracker *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v33 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v33) = v7;
    uint64_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  CFTypeRef cf = 0;
  AppleBasebandManager::create();
  long long v12 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 24);
  *(_OWORD *)((char *)this + 184) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v15 = cf;
    if (!cf) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  CFTypeRef v15 = cf;
  if (cf) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__dst[0]);
    if (*((void *)this + 23))
    {
LABEL_22:
      uint64_t v16 = (const void *)*MEMORY[0x263F26238];
      size_t v17 = strlen((const char *)*MEMORY[0x263F26238]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = (void *)v17;
      if (v17 >= 0x17)
      {
        uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v21 = v17 | 7;
        }
        uint64_t v22 = v21 + 1;
        uint64_t v19 = operator new(v21 + 1);
        __p[1] = v18;
        unint64_t v30 = v22 | 0x8000000000000000;
        __p[0] = v19;
      }
      else
      {
        HIBYTE(v30) = v17;
        uint64_t v19 = __p;
        if (!v17) {
          goto LABEL_33;
        }
      }
      memmove(v19, v16, (size_t)v18);
LABEL_33:
      *((unsigned char *)v18 + (void)v19) = 0;
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 3321888768;
      void v25[2] = ___ZN10LogTracker25finishInitialization_syncEv_block_invoke;
      v25[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
      v25[4] = this;
      void v25[5] = v3;
      int v26 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v23 = _Block_copy(v25);
      long long v24 = *((void *)this + 17);
      if (v24) {
        dispatch_retain(*((dispatch_object_t *)this + 17));
      }
      aBlock = v23;
      dispatch_object_t object = v24;
      AppleBasebandManager::setEventHandler();
      if (object) {
        dispatch_release(object);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
      AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 23));
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      goto LABEL_43;
    }
  }
  else if (*((void *)this + 23))
  {
    goto LABEL_22;
  }
  long long v20 = *((void *)this + 11);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_26368A000, v20, OS_LOG_TYPE_ERROR, "Failed to create AppleBasebandManager instance", buf, 2u);
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_2637437E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker25finishInitialization_syncEv_block_invoke(void *a1, abm::client::Event **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    BOOL v27 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v18 = v6;
LABEL_43:
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        return;
      }
      CFDictionaryRef v25 = (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData((uint64_t *)&v25, *a2);
      if (v25) {
        size_t v7 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        size_t v7 = 0;
      }
      if (v7)
      {
        v24[0] = 0xAAAAAAAAAAAAAAAALL;
        v24[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, v25);
        memset(buf, 170, sizeof(buf));
        unint64_t v8 = (const char *)*MEMORY[0x263F26268];
        char v22 = 0;
        LOBYTE(__p[0]) = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v20, v8);
        ctu::cf::map_adapter::getString();
        MEMORY[0x263E68C90](v20);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        uint8_t v9 = buf[23];
        if ((buf[23] & 0x80u) == 0) {
          size_t v10 = buf[23];
        }
        else {
          size_t v10 = *(void *)&buf[8];
        }
        if (v10 == strlen((const char *)*MEMORY[0x263F26800]))
        {
          uint64_t v11 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          if (!memcmp(v11, (const void *)*MEMORY[0x263F26800], v10))
          {
            long long v12 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I Cleaning up log dump db due to change in hardware model", (uint8_t *)__p, 2u);
            }
            pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
            uint64_t v13 = (LogDumpDB *)xmmword_26A99F438;
            if (!(void)xmmword_26A99F438)
            {
              LogDumpDB::create_default_global((LogDumpDB *)__p);
              long long v14 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              CFTypeRef v15 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F438 + 1);
              xmmword_26A99F438 = v14;
              if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
              uint64_t v16 = (std::__shared_weak_count *)__p[1];
              if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
              uint64_t v13 = (LogDumpDB *)xmmword_26A99F438;
            }
            size_t v17 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F438 + 1);
            v20[0] = v13;
            v20[1] = *((void *)&xmmword_26A99F438 + 1);
            if (*((void *)&xmmword_26A99F438 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F438 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
            LogDumpDB::clearDB(v13);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            uint8_t v9 = buf[23];
          }
        }
        if ((v9 & 0x80) != 0) {
          operator delete(*(void **)buf);
        }
        MEMORY[0x263E68CD0](v24);
      }
      else
      {
        uint64_t v19 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_26368A000, v19, OS_LOG_TYPE_DEFAULT, "#I Empty info passed", buf, 2u);
        }
      }
      if (v25) {
        CFRelease(v25);
      }
      uint64_t v18 = v27;
      if (v27) {
        goto LABEL_43;
      }
    }
  }
}

void sub_263743C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  if (a23 < 0) {
    operator delete(__p);
  }
  MEMORY[0x263E68CD0](&a24);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v24 - 56));
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_263743C9C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void LogTracker::shutdown(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v7 = v6;
  unint64_t v8 = operator new(0x10uLL);
  *unint64_t v8 = a1;
  v8[1] = v3;
  uint8_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LogTracker::dumpLogInternal_sync(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  BOOL v50 = 0;
  uint64_t v6 = (const void *)*MEMORY[0x263F25F20];
  size_t v7 = strlen((const char *)*MEMORY[0x263F25F20]);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint8_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v49 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v49) = v7;
  uint8_t v9 = __dst;
  if (v7) {
LABEL_8:
  }
    memmove(v9, v6, (size_t)v8);
  *((unsigned char *)v8 + (void)v9) = 0;
  memset(&v51, 0, sizeof(v51));
  if (prop::tailspin::get((char *)__dst, (uint64_t)&v51)) {
    util::convert<BOOL>(&v51, &v50, 0);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
LABEL_13:
      long long v12 = "120__shared_ptr_pointerIP10SharedDataNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE";
      if (v50) {
        goto LABEL_14;
      }
LABEL_23:
      BOOL v50 = 0;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
  long long v12 = "NSt3__120__shared_ptr_pointerIP10SharedDataNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE"
      + 6;
  if (!v50) {
    goto LABEL_23;
  }
LABEL_14:
  int IsInternalBuild = TelephonyUtilIsInternalBuild();
  BOOL v50 = IsInternalBuild;
  if (IsInternalBuild)
  {
    long long v14 = *(NSObject **)(a1 + 208);
    if (v14)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 208));
      dispatch_group_enter(v14);
    }
    global_queue = dispatch_get_global_queue(21, 0);
    block[0] = MEMORY[0x263EF8330];
    block[1] = *((void *)v12 + 174);
    block[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
    block[3] = &__block_descriptor_57_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE_e5_v8__0l;
    void block[4] = a1;
    dispatch_group_t group = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(group);
    }
    xpc_object_t v16 = *a2;
    xpc_object_t object = v16;
    if (v16) {
      xpc_retain(v16);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    BOOL v47 = v50;
    dispatch_async(global_queue, block);
    xpc_release(object);
    xpc_object_t object = 0;
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (v14)
    {
      dispatch_group_leave(v14);
      dispatch_release(v14);
    }
  }
LABEL_30:
  size_t v17 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v17 || (v18 = *(void *)(a1 + 120), (uint64_t v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v20 = v19;
  p_shared_weak_owners = &v19->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = *((void *)v12 + 174);
  aBlock[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_6;
  aBlock[3] = &__block_descriptor_72_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE_e28_v20__0i8_dict__object__v__12l;
  aBlock[4] = a1;
  void aBlock[5] = v18;
  xpc_object_t v41 = v20;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*a3)
  {
    char v22 = _Block_copy(*a3);
    xpc_object_t v23 = *a2;
    unint64_t v42 = v22;
    xpc_object_t v43 = v23;
    if (v23)
    {
LABEL_36:
      xpc_retain(v23);
      goto LABEL_39;
    }
  }
  else
  {
    xpc_object_t v23 = *a2;
    unint64_t v42 = 0;
    xpc_object_t v43 = v23;
    if (v23) {
      goto LABEL_36;
    }
  }
  xpc_object_t v43 = xpc_null_create();
LABEL_39:
  uint64_t v24 = _Block_copy(aBlock);
  CFDictionaryRef v25 = (const void *)*MEMORY[0x263F26688];
  size_t v26 = strlen((const char *)*MEMORY[0x263F26688]);
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v27 = v26;
  if (v26 >= 0x17)
  {
    uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v31 = v26 | 7;
    }
    uint64_t v32 = v31 + 1;
    xpc_object_t v28 = (std::string *)operator new(v31 + 1);
    v51.__r_.__value_.__l.__size_ = v27;
    v51.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  }
  else
  {
    *((unsigned char *)&v51.__r_.__value_.__s + 23) = v26;
    xpc_object_t v28 = &v51;
    if (!v26)
    {
      v51.__r_.__value_.__s.__data_[0] = 0;
      xpc_object_t v29 = *a2;
      xpc_object_t v39 = v29;
      if (v29) {
        goto LABEL_43;
      }
LABEL_49:
      xpc_object_t v29 = xpc_null_create();
      xpc_object_t v39 = v29;
      if (v24) {
        goto LABEL_44;
      }
      goto LABEL_50;
    }
  }
  memmove(v28, v25, v27);
  v28->__r_.__value_.__s.__data_[v27] = 0;
  xpc_object_t v29 = *a2;
  xpc_object_t v39 = v29;
  if (!v29) {
    goto LABEL_49;
  }
LABEL_43:
  xpc_retain(v29);
  if (v24)
  {
LABEL_44:
    unint64_t v30 = _Block_copy(v24);
    goto LABEL_51;
  }
LABEL_50:
  unint64_t v30 = 0;
LABEL_51:
  uint64_t v38 = v30;
  Service::runCommand(a1, (uint64_t)&v51, &v39, &v38);
  if (v30) {
    _Block_release(v30);
  }
  xpc_release(v29);
  xpc_object_t v39 = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F263C0]);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int8x8_t v35 = xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v51, (const object *)"", v34);
  LogTracker::sendUserNotificationForDump((uint64_t)v35, (const void **)__p);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v51.__r_.__value_.__l.__data_);
  if (v24) {
    _Block_release(v24);
  }
  xpc_release(v43);
  xpc_object_t v43 = 0;
  if (v42) {
    _Block_release(v42);
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  std::__shared_weak_count::__release_weak(v20);
}

void sub_263744308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *aBlock,xpc_object_t object)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v28 - 104));
  if (v27) {
    _Block_release(v27);
  }
  xpc_release(object);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void sub_2637443D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 208);
  uint64_t v6 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  xpc_object_t v4 = *(xpc_object_t *)(a1 + 48);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v5 = v4;
  }
  LogTracker::diagnosticToolsLog_sync(v2, &v6, &v5, *(unsigned __int8 *)(a1 + 56));
  xpc_release(v4);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_2637444C8(_Unwind_Exception *a1)
{
  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void LogTracker::diagnosticToolsLog_sync(uint64_t a1, NSObject **a2, xpc_object_t *a3, int a4)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  memset(v88, 170, sizeof(v88));
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26030]);
  *(void *)&long long object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)buf);
  Timestamp::asString(v9, 0, 9, v87);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v87[2]) < 0) {
    operator delete((void *)v87[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)buf, *(void **)&buf[8]);
  xpc_release((xpc_object_t)object);
  memset(v87, 170, sizeof(v87));
  xpc_object_t v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26218]);
  *(void *)std::string buf = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  xpc::dyn_cast_or_default(v87, (xpc *)buf, (const object *)*MEMORY[0x263F204D0], v11);
  xpc_release(*(xpc_object_t *)buf);
  long long v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = "NO";
    if (a4) {
      uint64_t v13 = "YES";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v13;
    _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I Tailspin: %s", buf, 0xCu);
    long long v12 = *(NSObject **)(a1 + 88);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    long long v14 = v87;
    if (v87[2] < 0) {
      long long v14 = (uint64_t *)v87[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I DumpPath: %s", buf, 0xCu);
  }
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v86 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v83);
  abm::HelperClient::create();
  CFTypeRef v15 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v85) {
      goto LABEL_20;
    }
  }
  else if (v85)
  {
LABEL_20:
    xpc_object_t v16 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v16 || (uint64_t v17 = *(void *)(a1 + 120), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v19 = v18;
    p_shared_weak_owners = &v18->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v19);
    }
    char v81 = (const void *)0xAAAAAAAAAAAAAAAALL;
    dispatch_object_t v82 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke;
    aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
    aBlock[4] = a1;
    void aBlock[5] = v17;
    char v79 = v19;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v21 = *a2;
    dispatch_group_t group = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(group);
    }
    char v22 = _Block_copy(aBlock);
    xpc_object_t v23 = *(NSObject **)(a1 + 136);
    if (v23) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    }
    char v81 = v22;
    dispatch_object_t v82 = v23;
    if (!a4) {
      goto LABEL_117;
    }
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    uint64_t v25 = MEMORY[0x263EF8708];
    if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v24) == v25)
      {
        xpc_retain(v24);
        xpc_object_t v26 = v24;
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
      xpc_object_t v24 = 0;
    }
    xpc_release(v24);
    if (MEMORY[0x263E6A240](v26) != v25)
    {
      uint64_t v28 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_26368A000, v28, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", buf, 2u);
      }
LABEL_116:
      xpc_release(v26);
      xpc_object_t v23 = v82;
LABEL_117:
      if (v23) {
        dispatch_release(v23);
      }
      if (v81) {
        _Block_release(v81);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v79) {
        std::__shared_weak_count::__release_weak(v79);
      }
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_127;
    }
    xpc_object_t v29 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26460]);
    *(void *)std::string buf = v29;
    if (v29) {
      xpc_retain(v29);
    }
    else {
      *(void *)std::string buf = xpc_null_create();
    }
    int v30 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    memset(buf, 170, sizeof(buf));
    xpc_object_t v31 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F263C0]);
    *(void *)&long long object = v31;
    if (v31) {
      xpc_retain(v31);
    }
    else {
      *(void *)&long long object = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)buf, (xpc *)&object, (const object *)"", v32);
    xpc_release((xpc_object_t)object);
    if ((buf[23] & 0x80u) == 0) {
      unint64_t v33 = buf;
    }
    else {
      unint64_t v33 = *(uint8_t **)buf;
    }
    xpc_object_t v34 = xpc_string_create((const char *)v33);
    if (!v34) {
      xpc_object_t v34 = xpc_null_create();
    }
    xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F20600], v34);
    xpc_object_t v35 = xpc_null_create();
    xpc_release(v34);
    xpc_release(v35);
    xpc_object_t v36 = xpc_int64_create(v30);
    if (!v36) {
      xpc_object_t v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F20548], v36);
    xpc_object_t v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
    uint64_t v38 = (const void *)*MEMORY[0x263F204C8];
    size_t v39 = strlen((const char *)*MEMORY[0x263F204C8]);
    if (v39 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v40 = v39;
    if (v39 >= 0x17)
    {
      uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17) {
        uint64_t v42 = v39 | 7;
      }
      uint64_t v43 = v42 + 1;
      p_dst = (std::string *)operator new(v42 + 1);
      __dst.__r_.__value_.__l.__size_ = v40;
      __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v39;
      p_dst = &__dst;
      if (!v39)
      {
LABEL_62:
        p_dst->__r_.__value_.__s.__data_[v40] = 0;
        if (v87[2] >= 0) {
          unint64_t v44 = (const std::string::value_type *)v87;
        }
        else {
          unint64_t v44 = (const std::string::value_type *)v87[0];
        }
        if (v87[2] >= 0) {
          std::string::size_type v45 = HIBYTE(v87[2]);
        }
        else {
          std::string::size_type v45 = v87[1];
        }
        uint64_t v46 = std::string::insert(&__dst, 0, v44, v45);
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v88[2]) >= 0) {
          unint64_t v48 = (const std::string::value_type *)v88;
        }
        else {
          unint64_t v48 = (const std::string::value_type *)v88[0];
        }
        if (SHIBYTE(v88[2]) >= 0) {
          std::string::size_type v49 = HIBYTE(v88[2]);
        }
        else {
          std::string::size_type v49 = (std::string::size_type)v88[1];
        }
        BOOL v50 = std::string::append(&v74, v48, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        long long v52 = (const void *)*MEMORY[0x263F204B8];
        size_t v53 = strlen((const char *)*MEMORY[0x263F204B8]);
        if (v53 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v54 = v53;
        if (v53 >= 0x17)
        {
          uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v53 | 7) != 0x17) {
            uint64_t v56 = v53 | 7;
          }
          uint64_t v57 = v56 + 1;
          p_p = operator new(v56 + 1);
          size_t v71 = v54;
          int64_t v72 = v57 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v72) = v53;
          p_p = &__p;
          if (!v53)
          {
LABEL_82:
            *((unsigned char *)p_p + v54) = 0;
            if (v72 >= 0) {
              std::string::size_type v58 = (const std::string::value_type *)&__p;
            }
            else {
              std::string::size_type v58 = (const std::string::value_type *)__p;
            }
            if (v72 >= 0) {
              std::string::size_type v59 = HIBYTE(v72);
            }
            else {
              std::string::size_type v59 = v71;
            }
            uint64_t v60 = std::string::append(&v75, v58, v59);
            long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            int64_t v77 = v60->__r_.__value_.__r.__words[2];
            long long object = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            if (v77 >= 0) {
              p_long long object = (const char *)&object;
            }
            else {
              p_long long object = (const char *)object;
            }
            xpc_object_t v63 = xpc_string_create(p_object);
            if (!v63) {
              xpc_object_t v63 = xpc_null_create();
            }
            xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F20538], v63);
            xpc_object_t v64 = xpc_null_create();
            xpc_release(v63);
            xpc_release(v64);
            if (SHIBYTE(v77) < 0)
            {
              operator delete((void *)object);
              if ((SHIBYTE(v72) & 0x80000000) == 0)
              {
LABEL_95:
                if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_96;
                }
                goto LABEL_103;
              }
            }
            else if ((SHIBYTE(v72) & 0x80000000) == 0)
            {
              goto LABEL_95;
            }
            operator delete(__p);
            if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_96:
              if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_97;
              }
              goto LABEL_104;
            }
LABEL_103:
            operator delete(v75.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_97:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_98;
              }
              goto LABEL_105;
            }
LABEL_104:
            operator delete(v74.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_98:
              xpc_object_t v69 = v26;
              if (v26) {
                goto LABEL_99;
              }
              goto LABEL_106;
            }
LABEL_105:
            operator delete(__dst.__r_.__value_.__l.__data_);
            xpc_object_t v69 = v26;
            if (v26)
            {
LABEL_99:
              xpc_retain(v26);
              size_t v65 = (void *)v81;
              if (!v81) {
                goto LABEL_108;
              }
              goto LABEL_107;
            }
LABEL_106:
            xpc_object_t v69 = xpc_null_create();
            size_t v65 = (void *)v81;
            if (!v81)
            {
LABEL_108:
              uint64_t v67 = v65;
              uint64_t v68 = v82;
              if (v82) {
                dispatch_retain(v82);
              }
              abm::HelperClient::perform();
              if (v68) {
                dispatch_release(v68);
              }
              if (v67) {
                _Block_release(v67);
              }
              xpc_release(v69);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              goto LABEL_116;
            }
LABEL_107:
            size_t v65 = _Block_copy(v65);
            goto LABEL_108;
          }
        }
        memmove(p_p, v52, v54);
        goto LABEL_82;
      }
    }
    memmove(p_dst, v38, v40);
    goto LABEL_62;
  }
  std::string::size_type v27 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_26368A000, v27, OS_LOG_TYPE_ERROR, "Failed to create helper client object", buf, 2u);
  }
LABEL_127:
  uint64_t v66 = (std::__shared_weak_count *)v86;
  if (v86 && !atomic_fetch_add((atomic_ullong *volatile)(v86 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v88[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_134:
      operator delete(v88[0]);
      return;
    }
  }
  else if ((SHIBYTE(v87[2]) & 0x80000000) == 0)
  {
    goto LABEL_130;
  }
  operator delete((void *)v87[0]);
  if (SHIBYTE(v88[2]) < 0) {
    goto LABEL_134;
  }
}

void sub_263744EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,dispatch_group_t group)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_6(void *a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  size_t v7 = (void *)a1[4];
  unint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    long long v12 = (const void *)a1[7];
    if (v12) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    long long v12 = (const void *)a1[7];
    if (v12)
    {
LABEL_9:
      uint64_t v13 = _Block_copy(v12);
      xpc_object_t v14 = (xpc_object_t)a1[8];
      if (v14) {
        goto LABEL_10;
      }
LABEL_14:
      xpc_object_t v14 = xpc_null_create();
      CFTypeRef v15 = (std::__shared_weak_count *)v7[16];
      if (!v15) {
        goto LABEL_27;
      }
      goto LABEL_15;
    }
  }
  uint64_t v13 = 0;
  xpc_object_t v14 = (xpc_object_t)a1[8];
  if (!v14) {
    goto LABEL_14;
  }
LABEL_10:
  xpc_retain(v14);
  CFTypeRef v15 = (std::__shared_weak_count *)v7[16];
  if (!v15) {
LABEL_27:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_15:
  uint64_t v16 = v7[15];
  uint64_t v17 = std::__shared_weak_count::lock(v15);
  if (!v17) {
    goto LABEL_27;
  }
  uint64_t v18 = v17;
  uint64_t v19 = operator new(0x28uLL);
  *(void *)uint64_t v19 = v7;
  void v19[2] = a2;
  *((void *)v19 + 2) = v11;
  xpc_object_t v20 = xpc_null_create();
  if (!v13)
  {
    *((void *)v19 + 3) = 0;
    *((void *)v19 + 4) = v14;
    if (v14) {
      goto LABEL_18;
    }
LABEL_20:
    *((void *)v19 + 4) = xpc_null_create();
    goto LABEL_21;
  }
  *((void *)v19 + 3) = _Block_copy(v13);
  *((void *)v19 + 4) = v14;
  if (!v14) {
    goto LABEL_20;
  }
LABEL_18:
  xpc_retain(v14);
LABEL_21:
  uint64_t v21 = v7[17];
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  char v22 = operator new(0x18uLL);
  void *v22 = v19;
  v22[1] = v16;
  v22[2] = v18;
  dispatch_async_f(v21, v22, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  xpc_release(v14);
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v20);
}

xpc_object_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (const void *)a2[7];
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    size_t v7 = (void *)a2[8];
    a1[7] = v6;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  else
  {
    size_t v7 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
  }
  xpc_object_t result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void LogTracker::sendUserNotificationForDump(uint64_t a1, const void **a2)
{
  uint64_t v3 = (const void *)*MEMORY[0x263F25E28];
  size_t v4 = strlen((const char *)*MEMORY[0x263F25E28]);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    unint64_t v31 = v5;
    unint64_t v32 = v8 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memmove(p_dst, v3, v5);
  *((unsigned char *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  int v9 = -1431655766;
  if (prop::ttr::get((char *)&__dst, (uint64_t)&__p))
  {
    *(_DWORD *)std::string::size_type v27 = -1431655766;
    if (util::convert<int>(&__p, v27, 0)) {
      int v9 = *(_DWORD *)v27;
    }
    else {
      int v9 = -1431655766;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  unint64_t v31 = 0xAAAAAAAAAA005D73;
  unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
  std::string __dst = *(void ***)"[Settings]";
  if (TelephonyUtilIsInternalBuild()) {
    int IsCarrierBuild = 1;
  }
  else {
    int IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  }
  if (IsCarrierBuild && v9)
  {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v11 >= 0xA) {
        size_t v12 = 10;
      }
      else {
        size_t v12 = *((unsigned __int8 *)a2 + 23);
      }
      int v13 = memcmp(a2, &__dst, v12);
      if (v12 != 10) {
        return;
      }
LABEL_32:
      if (v13) {
        return;
      }
      memset(&v29[16], 0, 32);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v29[23] = 22;
      qmemcpy(v29, "Telephony_Dump_Started", 22);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "LogDump");
      if ((v11 & 0x80) != 0)
      {
        if (a2[1])
        {
LABEL_35:
          if ((v11 & 0x80u) == 0) {
            size_t v15 = v11;
          }
          else {
            size_t v15 = (size_t)a2[1];
          }
          unint64_t v16 = v15 + 8;
          memset(v27, 170, sizeof(v27));
          if (v15 + 8 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v16 >= 0x17)
          {
            uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17) {
              uint64_t v18 = v16 | 7;
            }
            uint64_t v19 = v18 + 1;
            xpc_object_t v20 = operator new(v18 + 1);
            *(void *)&v27[8] = v15 + 8;
            *(void *)&v27[16] = v19 | 0x8000000000000000;
            *(void *)std::string::size_type v27 = v20;
            *xpc_object_t v20 = 0x203A6E6F73616552;
            uint64_t v17 = v20 + 1;
          }
          else
          {
            uint64_t v17 = &v27[8];
            *(void *)&v27[16] = 0;
            v27[23] = v15 + 8;
            *(_OWORD *)std::string::size_type v27 = 0x203A6E6F73616552uLL;
            if (!v15) {
              goto LABEL_51;
            }
          }
          if ((v11 & 0x80u) == 0) {
            uint64_t v21 = a2;
          }
          else {
            uint64_t v21 = *a2;
          }
          memmove(v17, v21, v15);
LABEL_51:
          v17[v15] = 0;
          *(void *)&v29[40] = *(void *)&v27[16];
          *(_OWORD *)&v29[24] = *(_OWORD *)v27;
          std::string v23 = __p;
          *(_OWORD *)xpc_object_t v24 = *(_OWORD *)v29;
          uint64_t v25 = *(void *)&v29[16];
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)&v29[24], *(std::string::size_type *)&v29[32]);
            int v22 = 1;
LABEL_54:
            support::ui::showNotification(0, (uint64_t)&v23, 0);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v25) & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_57;
                }
                goto LABEL_62;
              }
            }
            else if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v24[0]);
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if (!v22) {
                return;
              }
              goto LABEL_58;
            }
LABEL_62:
            operator delete(v23.__r_.__value_.__l.__data_);
            if (!v22) {
              return;
            }
LABEL_58:
            operator delete(*(void **)&v29[24]);
            return;
          }
LABEL_52:
          int v22 = 0;
          std::string v26 = *(std::string *)&v29[24];
          goto LABEL_54;
        }
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      std::string v23 = __p;
      *(_OWORD *)xpc_object_t v24 = *(_OWORD *)v29;
      uint64_t v25 = *(void *)&v29[16];
      goto LABEL_52;
    }
    if ((unint64_t)a2[1] >= 0xA) {
      size_t v14 = 10;
    }
    else {
      size_t v14 = (size_t)a2[1];
    }
    int v13 = memcmp(*a2, &__dst, v14);
    if (v14 == 10) {
      goto LABEL_32;
    }
  }
}

void sub_2637459AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    support::ui::NotificationInfo::~NotificationInfo(&a27);
    _Unwind_Resume(a1);
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a27);
  _Unwind_Resume(a1);
}

void sub_2637459F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_263745A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

void sub_263745A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::moveBasebandServicesLog_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v6) == MEMORY[0x263EF8708])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t v8 = xpc_array_create(0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v8) == MEMORY[0x263EF86D8])
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_int64_create(7);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x263F20688], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26218]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unint64_t v44 = 0;
  dispatch_object_t v45 = 0;
  uint64_t v46 = 0;
  xpc::dyn_cast_or_default();
  if (v43 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v14 = xpc_string_create(p_p);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x263F20598], v14);
  xpc_object_t v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v43 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t v16 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26030]);
  xpc_object_t object = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unint64_t v44 = 0;
  dispatch_object_t v45 = 0;
  uint64_t v46 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v46) < 0) {
    operator delete(v44);
  }
  if (v43 >= 0) {
    uint64_t v17 = (const char *)&__p;
  }
  else {
    uint64_t v17 = (const char *)__p;
  }
  xpc_object_t v18 = xpc_string_create(v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_array_append_value(v9, v18);
  xpc_release(v18);
  if (v43 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  if (v9)
  {
    xpc_retain(v9);
    xpc_object_t v19 = v9;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x263F20608], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  uint64_t v21 = (std::__shared_weak_count *)a1[16];
  if (!v21 || (v22 = a1[15], (std::string v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v24 = v23;
  p_shared_weak_owners = &v23->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  unint64_t v44 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v45 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = v22;
  uint64_t v38 = v24;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v26 = *a2;
  dispatch_group_t group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  std::string::size_type v27 = _Block_copy(aBlock);
  uint64_t v28 = a1[17];
  if (v28) {
    dispatch_retain(v28);
  }
  unint64_t v44 = v27;
  dispatch_object_t v45 = v28;
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v35);
  abm::HelperClient::create();
  xpc_object_t v29 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v34 = v7;
    if (v7) {
      goto LABEL_51;
    }
LABEL_54:
    xpc_object_t v34 = xpc_null_create();
    int v30 = v44;
    if (!v44) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  xpc_object_t v34 = v7;
  if (!v7) {
    goto LABEL_54;
  }
LABEL_51:
  xpc_retain(v7);
  int v30 = v44;
  if (v44) {
LABEL_55:
  }
    int v30 = _Block_copy(v30);
LABEL_56:
  unint64_t v32 = v30;
  unint64_t v33 = v45;
  if (v45) {
    dispatch_retain(v45);
  }
  abm::HelperClient::perform();
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  xpc_release(v34);
  unint64_t v31 = (std::__shared_weak_count *)v42;
  if (v42 && !atomic_fetch_add((atomic_ullong *volatile)(v42 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v45) {
    dispatch_release(v45);
  }
  if (v44) {
    _Block_release(v44);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_263746044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_group_t group,xpc_object_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v31 - 88);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  std::__shared_weak_count::__release_weak(v30);
  xpc_release(v29);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v4 = a2[6];
  a1[6] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[6];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 48);
    if (v3) {
      dispatch_release(v3);
    }
  }
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void LogTracker::getConfiguration(LogTracker *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  uint64_t v5 = MEMORY[0x263EF8708];
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v4) == v5)
    {
      xpc_retain(v4);
      xpc_object_t v6 = v4;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x263E6A240](v6) != v5)
  {
    xpc_object_t v7 = *((void *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "Failed to create config dictionary", (uint8_t *)&__p, 2u);
    }
    *a2 = xpc_null_create();
    goto LABEL_239;
  }
  unint64_t v111 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v112 = 0xAAAAAAAAAAAAAALL;
  *(void *)&value[1] = 0xAAAAAAAAAAAAAA00;
  value[0] = 0;
  BOOL v113 = 0;
  xpc_object_t v8 = (const void *)*MEMORY[0x263F25F20];
  size_t v9 = strlen((const char *)*MEMORY[0x263F25F20]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    xpc_object_t v11 = operator new(v12 + 1);
    size_t v108 = v10;
    unint64_t v109 = v13 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v11;
    goto LABEL_18;
  }
  HIBYTE(v109) = v9;
  xpc_object_t v11 = &v107;
  if (v9) {
LABEL_18:
  }
    memmove(v11, v8, v10);
  *((unsigned char *)v11 + v10) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::coredump::get((char *)&v107, (uint64_t)&__p))
  {
    int v14 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    int v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v14) {
      goto LABEL_34;
    }
  }
  else if (!v14)
  {
    goto LABEL_34;
  }
  if (v113) {
    xpc_object_t v15 = "enabled";
  }
  else {
    xpc_object_t v15 = "disabled";
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F266F8], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
LABEL_34:
  BOOL v113 = 0;
  size_t v18 = strlen((const char *)v8);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v20 = operator new(v21 + 1);
    size_t v108 = v19;
    unint64_t v109 = v22 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v20;
    goto LABEL_41;
  }
  HIBYTE(v109) = v18;
  xpc_object_t v20 = &v107;
  if (v18) {
LABEL_41:
  }
    memmove(v20, v8, v19);
  *((unsigned char *)v20 + v19) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    int v23 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else
  {
    int v23 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_47:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v23) {
      goto LABEL_57;
    }
  }
  else if (!v23)
  {
    goto LABEL_57;
  }
  if (v113) {
    xpc_object_t v24 = "enabled";
  }
  else {
    xpc_object_t v24 = "disabled";
  }
  xpc_object_t v25 = xpc_string_create(v24);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F267C0], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_57:
  if (SHIBYTE(v112) < 0)
  {
    unint64_t v111 = 0;
    std::string::size_type v27 = *(unsigned char **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    std::string::size_type v27 = &value[1];
  }
  *std::string::size_type v27 = 0;
  uint64_t v28 = (const void *)*MEMORY[0x263F25E28];
  size_t v29 = strlen((const char *)*MEMORY[0x263F25E28]);
  if (v29 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v30 = v29;
  if (v29 >= 0x17)
  {
    uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17) {
      uint64_t v32 = v29 | 7;
    }
    uint64_t v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_67;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29;
  p_p = &__p;
  if (v29) {
LABEL_67:
  }
    memmove(p_p, v28, v30);
  p_p->__r_.__value_.__s.__data_[v30] = 0;
  BOOL v34 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  BOOL v35 = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v35) {
      goto LABEL_78;
    }
  }
  else if (!v34)
  {
    goto LABEL_78;
  }
  if (v112 >= 0) {
    xpc_object_t v36 = (const char *)&value[1];
  }
  else {
    xpc_object_t v36 = *(const char **)&value[1];
  }
  xpc_object_t v37 = xpc_string_create(v36);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F266E8], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
LABEL_78:
  BOOL v113 = 0;
  size_t v39 = (const void *)*MEMORY[0x263F20720];
  size_t v40 = strlen((const char *)*MEMORY[0x263F20720]);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v41 = v40;
  if (v40 >= 0x17)
  {
    uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v43 = v40 | 7;
    }
    uint64_t v44 = v43 + 1;
    unint64_t v42 = operator new(v43 + 1);
    size_t v108 = v41;
    unint64_t v109 = v44 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v42;
    goto LABEL_85;
  }
  HIBYTE(v109) = v40;
  unint64_t v42 = &v107;
  if (v40) {
LABEL_85:
  }
    memmove(v42, v39, v41);
  *((unsigned char *)v42 + v41) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    int v45 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  else
  {
    int v45 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v45) {
      goto LABEL_101;
    }
  }
  else if (!v45)
  {
    goto LABEL_101;
  }
  if (v113) {
    uint64_t v46 = "enabled";
  }
  else {
    uint64_t v46 = "disabled";
  }
  xpc_object_t v47 = xpc_string_create(v46);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26880], v47);
  xpc_object_t v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
LABEL_101:
  if (SHIBYTE(v112) < 0)
  {
    unint64_t v111 = 0;
    std::string::size_type v49 = *(unsigned char **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    std::string::size_type v49 = &value[1];
  }
  *std::string::size_type v49 = 0;
  BOOL v50 = (const void *)*MEMORY[0x263F264F8];
  size_t v51 = strlen((const char *)*MEMORY[0x263F264F8]);
  if (v51 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v52 = v51;
  if (v51 >= 0x17)
  {
    uint64_t v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17) {
      uint64_t v54 = v51 | 7;
    }
    uint64_t v55 = v54 + 1;
    size_t v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_111;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v51;
  size_t v53 = &__p;
  if (v51) {
LABEL_111:
  }
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  BOOL v56 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  BOOL v57 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v57) {
      goto LABEL_122;
    }
  }
  else if (!v56)
  {
    goto LABEL_122;
  }
  if (v112 >= 0) {
    std::string::size_type v58 = (const char *)&value[1];
  }
  else {
    std::string::size_type v58 = *(const char **)&value[1];
  }
  xpc_object_t v59 = xpc_string_create(v58);
  if (!v59) {
    xpc_object_t v59 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F267F8], v59);
  xpc_object_t v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
LABEL_122:
  BOOL v113 = 0;
  size_t v61 = strlen((const char *)v8);
  if (v61 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v62 = v61;
  if (v61 >= 0x17)
  {
    uint64_t v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17) {
      uint64_t v64 = v61 | 7;
    }
    uint64_t v65 = v64 + 1;
    xpc_object_t v63 = operator new(v64 + 1);
    size_t v108 = v62;
    unint64_t v109 = v65 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v63;
    goto LABEL_129;
  }
  HIBYTE(v109) = v61;
  xpc_object_t v63 = &v107;
  if (v61) {
LABEL_129:
  }
    memmove(v63, v8, v62);
  *((unsigned char *)v63 + v62) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::ipc::get((char *)&v107, (uint64_t)&__p))
  {
    int v66 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  else
  {
    int v66 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_135;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v66) {
      goto LABEL_145;
    }
  }
  else if (!v66)
  {
    goto LABEL_145;
  }
  if (v113) {
    uint64_t v67 = "enabled";
  }
  else {
    uint64_t v67 = "disabled";
  }
  xpc_object_t v68 = xpc_string_create(v67);
  if (!v68) {
    xpc_object_t v68 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F265F8], v68);
  xpc_object_t v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
LABEL_145:
  BOOL v113 = 0;
  size_t v70 = strlen((const char *)v8);
  if (v70 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v71 = v70;
  if (v70 >= 0x17)
  {
    uint64_t v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17) {
      uint64_t v73 = v70 | 7;
    }
    uint64_t v74 = v73 + 1;
    int64_t v72 = operator new(v73 + 1);
    size_t v108 = v71;
    unint64_t v109 = v74 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v72;
    goto LABEL_152;
  }
  HIBYTE(v109) = v70;
  int64_t v72 = &v107;
  if (v70) {
LABEL_152:
  }
    memmove(v72, v8, v71);
  *((unsigned char *)v72 + v71) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbipc::get((char *)&v107, (uint64_t)&__p))
  {
    int v75 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  else
  {
    int v75 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_158:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v75) {
      goto LABEL_168;
    }
  }
  else if (!v75)
  {
    goto LABEL_168;
  }
  if (v113) {
    size_t v76 = "enabled";
  }
  else {
    size_t v76 = "disabled";
  }
  xpc_object_t v77 = xpc_string_create(v76);
  if (!v77) {
    xpc_object_t v77 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26600], v77);
  xpc_object_t v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
LABEL_168:
  BOOL v113 = 0;
  size_t v79 = strlen((const char *)v8);
  if (v79 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v80 = v79;
  if (v79 >= 0x17)
  {
    uint64_t v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17) {
      uint64_t v82 = v79 | 7;
    }
    uint64_t v83 = v82 + 1;
    char v81 = operator new(v82 + 1);
    size_t v108 = v80;
    unint64_t v109 = v83 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v81;
    goto LABEL_175;
  }
  HIBYTE(v109) = v79;
  char v81 = &v107;
  if (v79) {
LABEL_175:
  }
    memmove(v81, v8, v80);
  *((unsigned char *)v81 + v80) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::tailspin::get((char *)&v107, (uint64_t)&__p))
  {
    int v84 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  else
  {
    int v84 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_181;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_181:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v84) {
      goto LABEL_191;
    }
  }
  else if (!v84)
  {
    goto LABEL_191;
  }
  if (v113) {
    unint64_t v85 = "enabled";
  }
  else {
    unint64_t v85 = "disabled";
  }
  xpc_object_t v86 = xpc_string_create(v85);
  if (!v86) {
    xpc_object_t v86 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F26700], v86);
  xpc_object_t v87 = xpc_null_create();
  xpc_release(v86);
  xpc_release(v87);
LABEL_191:
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    int CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    int CompressionMode = 2;
  }
  uint64_t v90 = (const void *)*MEMORY[0x263F206F8];
  size_t v91 = strlen((const char *)*MEMORY[0x263F206F8]);
  if (v91 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v92 = v91;
  if (v91 >= 0x17)
  {
    uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17) {
      uint64_t v94 = v91 | 7;
    }
    uint64_t v95 = v94 + 1;
    char v93 = operator new(v94 + 1);
    size_t v108 = v92;
    unint64_t v109 = v95 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v93;
  }
  else
  {
    HIBYTE(v109) = v91;
    char v93 = &v107;
    if (!v91) {
      goto LABEL_203;
    }
  }
  memmove(v93, v90, v92);
LABEL_203:
  *((unsigned char *)v93 + v92) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::compression::get((char *)&v107, (uint64_t)&__p))
  {
    int v114 = -1431655766;
    if (util::convert<int>(&__p, &v114, 0)) {
      int CompressionMode = v114;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v109) & 0x80000000) == 0) {
      goto LABEL_208;
    }
  }
  else if ((SHIBYTE(v109) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v107);
LABEL_208:
  std::to_string(&__p, CompressionMode);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v96 = &__p;
  }
  else {
    long long v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v97 = xpc_string_create((const char *)v96);
  if (!v97) {
    xpc_object_t v97 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F266F0], v97);
  xpc_object_t v98 = xpc_null_create();
  xpc_release(v97);
  xpc_release(v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  value[0] = 0;
  size_t v99 = strlen((const char *)v28);
  if (v99 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v100 = v99;
  if (v99 >= 0x17)
  {
    uint64_t v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17) {
      uint64_t v102 = v99 | 7;
    }
    uint64_t v103 = v102 + 1;
    long long v101 = operator new(v102 + 1);
    size_t v108 = v100;
    unint64_t v109 = v103 | 0x8000000000000000;
    std::vector<std::ssub_match>::pointer v107 = v101;
    goto LABEL_222;
  }
  HIBYTE(v109) = v99;
  long long v101 = &v107;
  if (v99) {
LABEL_222:
  }
    memmove(v101, v28, v100);
  *((unsigned char *)v101 + v100) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::systemlogs::get((char *)&v107, (uint64_t)&__p))
  {
    int v104 = util::convert<int>(&__p, value, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  else
  {
    int v104 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v104) {
      goto LABEL_237;
    }
LABEL_234:
    xpc_object_t v105 = xpc_int64_create(value[0]);
    if (!v105) {
      xpc_object_t v105 = xpc_null_create();
    }
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F266A8], v105);
    xpc_object_t v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    goto LABEL_237;
  }
  if (v104) {
    goto LABEL_234;
  }
LABEL_237:
  *a2 = v6;
  xpc_object_t v6 = xpc_null_create();
  if (SHIBYTE(v112) < 0) {
    operator delete(*(void **)&value[1]);
  }
LABEL_239:
  xpc_release(v6);
}

void sub_263747270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void sub_26374732C()
{
}

void LogTracker::copyPreference(uint64_t a1@<X0>, const void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = MEMORY[0x263EF8708];
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v6) == v7)
    {
      xpc_retain(v6);
      xpc_object_t v8 = v6;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  if (MEMORY[0x263E6A240](v8) != v7)
  {
    size_t v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "Failed to create preference dictionary", buf, 2u);
    }
    *a3 = xpc_null_create();
    goto LABEL_39;
  }
  int v10 = *((char *)a2 + 23);
  if (v10 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  unint64_t v12 = v11 + 34;
  memset(buf, 170, 24);
  if (v11 + 34 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v12 > 0x16)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    *(void *)&uint8_t buf[8] = v11 + 34;
    *(void *)&uint8_t buf[16] = (v14 + 1) | 0x8000000000000000;
    *(void *)std::string buf = operator new(v14 + 1);
    qmemcpy(*(void **)buf, "/var/wireless/Library/Preferences/", 34);
    uint64_t v13 = (unsigned char *)(*(void *)buf + 34);
    if (!v11) {
      goto LABEL_24;
    }
  }
  else
  {
    qmemcpy(buf, "/var/wireless/Library/Preferences/", sizeof(buf));
    uint64_t v13 = v23;
  }
  if (v10 >= 0) {
    xpc_object_t v15 = a2;
  }
  else {
    xpc_object_t v15 = *a2;
  }
  memmove(v13, v15, v11);
LABEL_24:
  v13[v11] = 0;
  if (ctu::fs::file_exists())
  {
    if ((buf[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else {
      std::string __p = *(std::string *)buf;
    }
    util::readPlistToCFDictionary((uint64_t)&__p, &cf);
    ctu::cf_to_xpc((uint64_t *)&object, (ctu *)cf, v17);
    xpc_object_t v16 = object;
    if (object && MEMORY[0x263E6A240](object) == v7) {
      xpc_retain(v16);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_object_t v18 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v18);
    xpc_release(object);
    xpc_object_t object = 0;
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    xpc_object_t v16 = v8;
  }
  *a3 = v16;
  xpc_object_t v8 = xpc_null_create();
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_39:
  xpc_release(v8);
}

void sub_263747620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      int v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            size_t v11 = __p;
          }
          else {
            size_t v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          xpc_object_t v15 = v11;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed to collect logs. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEBUG, "#D The log has been created", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t TelephonyXPC::Result::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch(result)
  {
    case 0xE020E000:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "kInternalError");
      return result;
    case 0xE020E001:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "kServerError");
      return result;
    case 0xE020E002:
      uint64_t v2 = "kCommandError";
      goto LABEL_12;
    case 0xE020E003:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "kTimeout");
      return result;
    case 0xE020E004:
      uint64_t v2 = "kNotSupported";
      goto LABEL_12;
    case 0xE020E005:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "kRetry");
      return result;
    case 0xE020E006:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "kPermissionDenied");
      return result;
    case 0xE020E007:
      uint64_t v2 = "kNotAvailable";
LABEL_12:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v2;
      *(void *)(a2 + 5) = *(void *)(v2 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
    default:
      if (result)
      {
        *(unsigned char *)(a2 + 23) = 17;
        strcpy((char *)a2, "kInvalidErrorCode");
      }
      else
      {
        *(unsigned char *)(a2 + 23) = 8;
        strcpy((char *)a2, "kSuccess");
      }
      break;
  }
  return result;
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void LogTracker::systemLog_sync(uint64_t a1, dispatch_object_t *a2, xpc_object_t *a3, void *a4)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F25F30]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  int v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (uint64_t v11 = *(void *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v70 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v71 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_100_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v11;
  int v75 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_object_t v76 = *a2;
  if (v76)
  {
    dispatch_retain(v76);
    if (v76) {
      dispatch_group_enter(v76);
    }
  }
  uint64_t v15 = a4[3];
  if (!v15) {
    goto LABEL_14;
  }
  if ((void *)v15 != a4)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
LABEL_14:
    xpc_object_t v78 = (void *)v15;
    goto LABEL_16;
  }
  xpc_object_t v78 = v77;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v77);
LABEL_16:
  int v79 = v9;
  uint64_t v16 = _Block_copy(aBlock);
  xpc_object_t v17 = *(NSObject **)(a1 + 136);
  if (v17) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  }
  size_t v70 = v16;
  dispatch_object_t v71 = v17;
  memset(object, 170, sizeof(object));
  xpc_object_t v18 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26030]);
  v61[0] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v61[0] = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v67);
  Timestamp::asString((uint64_t)v67, 0, 9, __p);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v67, (void *)v67[1]);
  xpc_release(v61[0]);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v19 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26218]);
  v67[0] = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    v67[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)v67, (const object *)*MEMORY[0x263F204D0], v20);
  xpc_release(v67[0]);
  memset(v67, 170, sizeof(v67));
  xpc_object_t v21 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F263C0]);
  v61[0] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v61[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v67, (xpc *)v61, (const object *)"", v22);
  xpc_release(v61[0]);
  unint64_t v65 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v63);
  abm::HelperClient::create();
  int v23 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
  if (v24 || (xpc_object_t v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v24) == MEMORY[0x263EF8708])
    {
      xpc_retain(v24);
      xpc_object_t v25 = v24;
    }
    else
    {
      xpc_object_t v25 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v25 = xpc_null_create();
    xpc_object_t v24 = 0;
  }
  xpc_release(v24);
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v26 = object;
  }
  else {
    xpc_object_t v26 = (xpc_object_t *)object[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x263F20618], v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  if (SHIBYTE(v67[2]) >= 0) {
    size_t v29 = v67;
  }
  else {
    size_t v29 = (xpc_object_t *)v67[0];
  }
  xpc_object_t v30 = xpc_string_create((const char *)v29);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x263F20600], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v32 = __p;
  }
  else {
    uint64_t v32 = (void **)__p[0];
  }
  xpc_object_t v33 = xpc_string_create((const char *)v32);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x263F20538], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  BOOL v35 = (const void *)*MEMORY[0x263F25F28];
  size_t v36 = strlen((const char *)*MEMORY[0x263F25F28]);
  if (v36 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v37 = v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    p_dst = (long long *)operator new(v39 + 1);
    *((void *)&__dst + 1) = v37;
    unint64_t v73 = v40 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_60;
  }
  HIBYTE(v73) = v36;
  p_dst = &__dst;
  if (v36) {
LABEL_60:
  }
    memmove(p_dst, v35, v37);
  *((unsigned char *)p_dst + v37) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)v61);
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)__dst);
  }
  if (v62 >= 0) {
    size_t v41 = v61;
  }
  else {
    size_t v41 = (xpc_object_t *)v61[0];
  }
  xpc_object_t v42 = xpc_string_create((const char *)v41);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x263F20530], v42);
  xpc_object_t v43 = xpc_null_create();
  xpc_release(v42);
  xpc_release(v43);
  uint64_t v44 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    if (v9 != 2) {
      goto LABEL_70;
    }
LABEL_111:
    xpc_object_t v50 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26468]);
    *(void *)&long long __dst = v50;
    if (v50) {
      xpc_retain(v50);
    }
    else {
      *(void *)&long long __dst = xpc_null_create();
    }
    char v51 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_object_t v52 = xpc_BOOL_create(v51);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x263F206C0], v52);
    xpc_object_t v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    xpc_release((xpc_object_t)__dst);
    xpc_object_t v57 = v25;
    if (v25)
    {
      xpc_retain(v25);
      uint64_t v54 = v70;
      if (!v70)
      {
LABEL_121:
        uint64_t v55 = v54;
        BOOL v56 = v71;
        if (v71) {
          dispatch_retain(v71);
        }
        abm::HelperClient::perform();
        if (v56) {
          dispatch_release(v56);
        }
        if (v55) {
          _Block_release(v55);
        }
        xpc_release(v57);
        if (SHIBYTE(v62) < 0) {
          goto LABEL_84;
        }
        goto LABEL_85;
      }
    }
    else
    {
      xpc_object_t v57 = xpc_null_create();
      uint64_t v54 = v70;
      if (!v70) {
        goto LABEL_121;
      }
    }
    uint64_t v54 = _Block_copy(v54);
    goto LABEL_121;
  }
  uint64_t v49 = abm::helper::asString();
  LODWORD(__dst) = 136315138;
  *(void *)((char *)&__dst + 4) = v49;
  _os_log_debug_impl(&dword_26368A000, v44, OS_LOG_TYPE_DEBUG, "#D System Logs: %s", (uint8_t *)&__dst, 0xCu);
  if (v9 == 2) {
    goto LABEL_111;
  }
LABEL_70:
  if (v9 != 1) {
    goto LABEL_83;
  }
  xpc_object_t v60 = v25;
  if (v25)
  {
    xpc_retain(v25);
    int v45 = v70;
    if (!v70) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  xpc_object_t v60 = xpc_null_create();
  int v45 = v70;
  if (v70) {
LABEL_75:
  }
    int v45 = _Block_copy(v45);
LABEL_76:
  std::string::size_type v58 = v45;
  xpc_object_t v59 = v71;
  if (v71) {
    dispatch_retain(v71);
  }
  abm::HelperClient::perform();
  if (v59) {
    dispatch_release(v59);
  }
  if (v58) {
    _Block_release(v58);
  }
  xpc_release(v60);
LABEL_83:
  if (SHIBYTE(v62) < 0) {
LABEL_84:
  }
    operator delete(v61[0]);
LABEL_85:
  xpc_release(v25);
  uint64_t v46 = (std::__shared_weak_count *)v66;
  if (v66 && !atomic_fetch_add((atomic_ullong *volatile)(v66 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_107;
    }
  }
  else if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_108;
  }
LABEL_107:
  operator delete(__p[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_90:
    xpc_object_t v47 = v71;
    if (!v71) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
LABEL_108:
  operator delete(object[0]);
  xpc_object_t v47 = v71;
  if (v71) {
LABEL_91:
  }
    dispatch_release(v47);
LABEL_92:
  if (v70) {
    _Block_release(v70);
  }
  if (v78 == v77)
  {
    (*(void (**)(void *))(v77[0] + 32))(v77);
    xpc_object_t v48 = v76;
    if (!v76) {
      goto LABEL_102;
    }
    goto LABEL_100;
  }
  if (v78) {
    (*(void (**)(void))(*v78 + 40))();
  }
  xpc_object_t v48 = v76;
  if (v76)
  {
LABEL_100:
    dispatch_group_leave(v48);
    if (v76) {
      dispatch_release(v76);
    }
  }
LABEL_102:
  if (v75) {
    std::__shared_weak_count::__release_weak(v75);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_2637484A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,xpc_object_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,xpc_object_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke(void *a1, unsigned int *a2, void **a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  if (a1[11])
  {
    int v11 = *a2;
    unint64_t v12 = *a3;
    xpc_object_t object = v12;
    if (v12)
    {
      xpc_retain(v12);
      LOBYTE(__p[0]) = v11 == 0;
      uint64_t v13 = a1[11];
      if (v13)
      {
LABEL_10:
        (*(void (**)(uint64_t, void **, xpc_object_t *))(*(void *)v13 + 48))(v13, __p, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        goto LABEL_11;
      }
    }
    else
    {
      xpc_object_t object = xpc_null_create();
      LOBYTE(__p[0]) = v11 == 0;
      uint64_t v13 = a1[11];
      if (v13) {
        goto LABEL_10;
      }
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_11:
  if (*a2)
  {
    uint64_t v14 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = abm::helper::asString();
      TelephonyXPC::Result::toString(*a2, (uint64_t)__p);
      if (v18 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v21 = v15;
      __int16 v22 = 2080;
      int v23 = v16;
      _os_log_error_impl(&dword_26368A000, v14, OS_LOG_TYPE_ERROR, "Failed to collect system logs mode: %s result: %s", buf, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_26374895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    xpc_object_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t result = a2[11];
  if (!result) {
    goto LABEL_9;
  }
  if ((void *)result != a2 + 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_9:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(void))(*(void *)a2[11] + 24))(a2[11]);
}

void sub_263748A60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[7];
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
LABEL_7:
    dispatch_group_leave(v4);
    uint64_t v5 = a1[7];
    if (v5) {
      dispatch_release(v5);
    }
  }
LABEL_9:
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::function<void ()(BOOL,xpc::dict)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void LogTracker::archiveLogs_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26820]);
  *(void *)std::string buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v9 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)buf);
  if (!v9)
  {
    int v11 = a1[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_26368A000, v11, OS_LOG_TYPE_ERROR, "Compression is disabled!", buf, 2u);
    }
    return;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F266C0]);
  *(void *)std::string buf = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)std::string buf = xpc_null_create();
  }
  char v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  memset(buf, 170, 24);
  xpc_object_t v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26030]);
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&v49);
  Timestamp::asString((uint64_t)&v49, 0, 9, v51);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v51[2]) < 0) {
    operator delete((void *)v51[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v49, v50);
  xpc_release(object);
  memset(v51, 170, sizeof(v51));
  xpc_object_t v14 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F26218]);
  xpc_object_t v49 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v49 = xpc_null_create();
  }
  xpc::dyn_cast_or_default(v51, (xpc *)&v49, (const object *)*MEMORY[0x263F204D0], v15);
  xpc_release(v49);
  uint64_t v16 = (std::__shared_weak_count *)a1[16];
  if (!v16 || (uint64_t v17 = a1[15], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  p_shared_weak_owners = &v18->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_object_t v49 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v50 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v17;
  xpc_object_t v47 = v19;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v21 = *a2;
  dispatch_group_t group = v21;
  if (v21)
  {
    dispatch_retain(v21);
    dispatch_group_enter(group);
  }
  __int16 v22 = _Block_copy(aBlock);
  int v23 = a1[17];
  if (v23) {
    dispatch_retain(v23);
  }
  xpc_object_t v49 = v22;
  dispatch_object_t v50 = v23;
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v42);
  abm::HelperClient::create();
  uint64_t v24 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  xpc_object_t v25 = xpc_dictionary_create(0, 0, 0);
  if (v25 || (xpc_object_t v25 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v25) == MEMORY[0x263EF8708])
    {
      xpc_retain(v25);
      xpc_object_t v26 = v25;
    }
    else
    {
      xpc_object_t v26 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v26 = xpc_null_create();
    xpc_object_t v25 = 0;
  }
  xpc_release(v25);
  if (v51[2] >= 0) {
    xpc_object_t v27 = (const char *)v51;
  }
  else {
    xpc_object_t v27 = (const char *)v51[0];
  }
  xpc_object_t v28 = xpc_string_create(v27);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F20630], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v30 = buf;
  }
  else {
    xpc_object_t v30 = *(uint8_t **)buf;
  }
  xpc_object_t v31 = xpc_string_create((const char *)v30);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F20618], v31);
  xpc_object_t v32 = xpc_null_create();
  xpc_release(v31);
  xpc_release(v32);
  xpc_object_t v33 = xpc_int64_create(v9);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F206F8], v33);
  xpc_object_t v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  xpc_object_t v35 = xpc_BOOL_create(v12);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F205A8], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v41 = v26;
  if (v26)
  {
    xpc_retain(v26);
    xpc_object_t v37 = v49;
    if (!v49) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  xpc_object_t v41 = xpc_null_create();
  xpc_object_t v37 = v49;
  if (v49) {
LABEL_57:
  }
    xpc_object_t v37 = _Block_copy(v37);
LABEL_58:
  uint64_t v39 = v37;
  uint64_t v40 = v50;
  if (v50) {
    dispatch_retain(v50);
  }
  abm::HelperClient::perform();
  if (v40) {
    dispatch_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  xpc_release(v41);
  xpc_release(v26);
  xpc_object_t v38 = (std::__shared_weak_count *)v45;
  if (v45 && !atomic_fetch_add((atomic_ullong *volatile)(v45 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v50) {
    dispatch_release(v50);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v47) {
    std::__shared_weak_count::__release_weak(v47);
  }
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(v51[2]) & 0x80000000) == 0)
  {
    if (((char)buf[23] & 0x80000000) == 0) {
      return;
    }
LABEL_80:
    operator delete(*(void **)buf);
    return;
  }
  operator delete((void *)v51[0]);
  if ((char)buf[23] < 0) {
    goto LABEL_80;
  }
}

void sub_26374928C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,xpc_object_t a25,uint64_t a26)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v27);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a25);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v26);
  if (*(char *)(v28 - 97) < 0) {
    operator delete(*(void **)(v28 - 120));
  }
  if (*(char *)(v28 - 73) < 0)
  {
    operator delete(*(void **)(v28 - 96));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      xpc_object_t v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            int v11 = __p;
          }
          else {
            int v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v15 = v11;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Compression failed. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

void LogTracker::processLogarchive_sync(void *a1, NSObject **a2, const char *a3, void *a4)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (uint64_t v9 = a1[15], (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v49 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_96_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v9;
  xpc_object_t v52 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v13 = *a2;
  dispatch_group_t group = v13;
  if (v13)
  {
    dispatch_retain(v13);
    dispatch_group_enter(group);
  }
  uint64_t v14 = a4[3];
  if (v14)
  {
    if ((void *)v14 == a4)
    {
      uint64_t v55 = v54;
      (*(void (**)(void *, void *))(*a4 + 24))(a4, v54);
      goto LABEL_12;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  uint64_t v55 = (void *)v14;
LABEL_12:
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = a1[17];
  if (v16) {
    dispatch_retain(v16);
  }
  xpc_object_t v49 = v15;
  dispatch_object_t object = v16;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v45);
  abm::HelperClient::create();
  uint64_t v17 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v18) == MEMORY[0x263EF8708])
    {
      xpc_retain(v18);
      xpc_object_t v19 = v18;
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v18 = 0;
  }
  xpc_release(v18);
  unint64_t v20 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    uint64_t v21 = *(const char **)a3;
    uint64_t v22 = *((void *)a3 + 1);
  }
  else
  {
    uint64_t v21 = a3;
    uint64_t v22 = *((unsigned __int8 *)a3 + 23);
  }
  int v23 = v21 - 1;
  do
  {
    if (!v22)
    {
      unint64_t v25 = 0;
      memset(__dst, 170, sizeof(__dst));
      if ((v20 & 0x80) != 0) {
        goto LABEL_82;
      }
LABEL_31:
      xpc_object_t v26 = a3;
      if (v25 <= v20)
      {
        size_t v27 = v20 - v25;
        if (v20 - v25 >= 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_84;
        }
        goto LABEL_33;
      }
LABEL_86:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v24 = v23[v22--];
  }
  while (v24 != 92 && v24 != 47);
  unint64_t v25 = v22 + 1;
  memset(__dst, 170, sizeof(__dst));
  if ((v20 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_82:
  unint64_t v20 = *((void *)a3 + 1);
  if (v20 < v25) {
    goto LABEL_86;
  }
  xpc_object_t v26 = *(const char **)a3;
  size_t v27 = v20 - v25;
  if (v20 - v25 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_84:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_33:
  if (v27 >= 0x17)
  {
    uint64_t v37 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v37 = v27 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v28 = (void **)operator new(v37 + 1);
    __dst[1] = (void *)v27;
    _OWORD __dst[2] = (void *)(v38 | 0x8000000000000000);
    __dst[0] = v28;
LABEL_51:
    memmove(v28, &v26[v25], v27);
    *((unsigned char *)v28 + v27) = 0;
    if (a3[23] < 0) {
      goto LABEL_52;
    }
    goto LABEL_36;
  }
  HIBYTE(__dst[2]) = v27;
  uint64_t v28 = __dst;
  if (v20 != v25) {
    goto LABEL_51;
  }
  *((unsigned char *)__dst + v27) = 0;
  if ((a3[23] & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_52:
  a3 = *(const char **)a3;
LABEL_36:
  xpc_object_t v29 = xpc_string_create(a3);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x263F20630], v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  if (SHIBYTE(__dst[2]) >= 0) {
    xpc_object_t v31 = (const char *)__dst;
  }
  else {
    xpc_object_t v31 = (const char *)__dst[0];
  }
  xpc_object_t v32 = xpc_string_create(v31);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x263F20660], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v34 = xpc_int64_create(2);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x263F206F8], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  xpc_object_t v43 = v19;
  if (!v19)
  {
    xpc_object_t v43 = xpc_null_create();
    xpc_object_t v36 = v49;
    if (!v49) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  xpc_retain(v19);
  xpc_object_t v36 = v49;
  if (v49) {
LABEL_54:
  }
    xpc_object_t v36 = _Block_copy(v36);
LABEL_55:
  xpc_object_t v41 = v36;
  uint64_t v42 = object;
  if (object) {
    dispatch_retain(object);
  }
  abm::HelperClient::perform();
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  xpc_release(v43);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  xpc_release(v19);
  uint64_t v39 = (std::__shared_weak_count *)v48;
  if (v48 && !atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v49) {
    _Block_release(v49);
  }
  if (v55 == v54)
  {
    (*(void (**)(void *))(v54[0] + 32))(v54);
    uint64_t v40 = group;
    if (!group) {
      goto LABEL_78;
    }
    goto LABEL_76;
  }
  if (v55) {
    (*(void (**)(void))(*v55 + 40))();
  }
  uint64_t v40 = group;
  if (group)
  {
LABEL_76:
    dispatch_group_leave(v40);
    if (group) {
      dispatch_release(group);
    }
  }
LABEL_78:
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_263749C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,dispatch_group_t group)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke(void *a1, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = a1[11];
      if (v9)
      {
        LOBYTE(__p[0]) = *a2 == 0;
        (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, __p);
      }
      uint64_t v10 = *a2;
      int v11 = *(NSObject **)(v5 + 88);
      if (v10)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v10, (uint64_t)__p);
          if (v14 >= 0) {
            char v12 = __p;
          }
          else {
            char v12 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v16 = v12;
          _os_log_error_impl(&dword_26368A000, v11, OS_LOG_TYPE_ERROR, "Logarchive compression failed. Result: %s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_26368A000, v11, OS_LOG_TYPE_DEBUG, "#D Logarchive compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[7];
  a1[7] = v5;
  if (v5)
  {
    dispatch_retain(v5);
    xpc_object_t v6 = a1[7];
    if (v6) {
      dispatch_group_enter(v6);
    }
  }
  uint64_t result = a2[11];
  if (!result) {
    goto LABEL_9;
  }
  if ((void *)result != a2 + 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_9:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(void))(*(void *)a2[11] + 24))(a2[11]);
}

void sub_26374A078(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(void *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = (void *)a1[11];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = a1[7];
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
LABEL_7:
    dispatch_group_leave(v4);
    uint64_t v5 = a1[7];
    if (v5) {
      dispatch_release(v5);
    }
  }
LABEL_9:
  xpc_object_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::function<void ()(BOOL)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void LogTracker::jsonSummary_sync(void *a1, NSObject **a2, xpc_object_t *a3)
{
  if (TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild())
  {
    xpc_object_t v6 = (const void *)*MEMORY[0x263F26258];
    size_t v7 = strlen((const char *)*MEMORY[0x263F26258]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      unint64_t v31 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v31) = v7;
      uint64_t v9 = __dst;
      if (!v7) {
        goto LABEL_11;
      }
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((unsigned char *)v8 + (void)v9) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
    char v12 = (std::__shared_weak_count *)a1[16];
    if (!v12 || (uint64_t v13 = a1[15], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v15 = v14;
    p_shared_weak_owners = &v14->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v23 = v13;
    int v24 = v15;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v17 = *a2;
    unint64_t v25 = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v17);
    }
    xpc_object_t v18 = *a3;
    xpc_object_t v26 = v18;
    if (v18)
    {
      xpc_retain(v18);
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v26 = v18;
    }
    size_t v27 = a1;
    xpc_object_t v19 = a1[22];
    unint64_t v20 = a1[17];
    uint64_t v21 = operator new(0x28uLL);
    *uint64_t v21 = v13;
    v21[1] = v15;
    uint64_t v23 = 0;
    int v24 = 0;
    v21[2] = v17;
    if (v17)
    {
      dispatch_retain(v17);
      dispatch_group_enter(v17);
    }
    v21[3] = v18;
    if (v18) {
      xpc_retain(v18);
    }
    else {
      v21[3] = xpc_null_create();
    }
    v21[4] = a1;
    dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    xpc_release(v18);
    if (v17)
    {
      dispatch_group_leave(v17);
      dispatch_release(v17);
    }
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  uint64_t v22 = a1[11];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v23) = 0;
    _os_log_error_impl(&dword_26368A000, v22, OS_LOG_TYPE_ERROR, "JSON summary is not supported!", (uint8_t *)&v23, 2u);
  }
}

void sub_26374A4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_26374A4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a15);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionSupported(LogTracker *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

void LogTracker::postLogCollectionExternal_sync(void *a1, xpc_object_t *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[26];
  dispatch_object_t v31 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  xpc_object_t v30 = *a2;
  xpc_object_t v5 = v30;
  if (v30)
  {
    xpc_retain(v30);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v30 = v5;
  }
  xpc_object_t v34 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v31, &v30, v33);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void *))(*v34 + 40))(v34);
  }
  xpc_release(v5);
  xpc_object_t v30 = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  xpc_object_t v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (v7 = a1[15], (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v28 = v8;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    xpc_object_t v29 = *a2;
    if (*a2)
    {
LABEL_16:
      xpc_retain(v11);
      goto LABEL_19;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v28 = v9;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    xpc_object_t v11 = *a2;
    xpc_object_t v29 = *a2;
    if (*a2) {
      goto LABEL_16;
    }
  }
  xpc_object_t v11 = xpc_null_create();
  xpc_object_t v29 = v11;
LABEL_19:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v12 = *a2;
  xpc_object_t v25 = *a2;
  if (*a2)
  {
    xpc_retain(v12);
    xpc_object_t v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    object_8 = v11;
    if (v11) {
      goto LABEL_21;
    }
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v25 = v12;
    xpc_object_t v26 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    object_8 = v11;
    if (v11)
    {
LABEL_21:
      xpc_retain(v11);
      xpc_object_t v13 = *a2;
      uint64_t v17 = a1;
      xpc_object_t v18 = *a2;
      if (*a2) {
        goto LABEL_22;
      }
      goto LABEL_27;
    }
  }
  xpc_object_t v11 = xpc_null_create();
  object_8 = v11;
  xpc_object_t v13 = *a2;
  uint64_t v17 = a1;
  xpc_object_t v18 = *a2;
  if (*a2)
  {
LABEL_22:
    xpc_retain(v13);
    *(void *)&long long v19 = v7;
    *((void *)&v19 + 1) = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unint64_t v20 = a1;
    xpc_object_t v21 = v12;
    if (v12) {
      goto LABEL_23;
    }
LABEL_28:
    xpc_object_t v21 = xpc_null_create();
    *(void *)&long long v22 = v7;
    *((void *)&v22 + 1) = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = a1;
    xpc_object_t v24 = v11;
    if (v11) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
LABEL_27:
  xpc_object_t v18 = xpc_null_create();
  *(void *)&long long v19 = v7;
  *((void *)&v19 + 1) = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v20 = a1;
  xpc_object_t v21 = v12;
  if (!v12) {
    goto LABEL_28;
  }
LABEL_23:
  xpc_retain(v12);
  *(void *)&long long v22 = v7;
  *((void *)&v22 + 1) = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = a1;
  xpc_object_t v24 = v11;
  if (v11)
  {
LABEL_24:
    xpc_retain(v11);
    goto LABEL_30;
  }
LABEL_29:
  xpc_object_t v24 = xpc_null_create();
LABEL_30:
  char v14 = a1[26];
  uint64_t v15 = a1[17];
  uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = operator new(0x50uLL);
  *uint64_t v16 = v17;
  v16[1] = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v16[1] = xpc_null_create();
  }
  *((_OWORD *)v16 + 1) = v19;
  v16[4] = v20;
  v16[5] = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    v16[5] = xpc_null_create();
  }
  *((_OWORD *)v16 + 3) = v22;
  v16[8] = v23;
  v16[9] = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    v16[9] = xpc_null_create();
  }
  uint64_t v32 = 0;
  dispatch_group_notify_f(v14, v15, v16, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v32);
  xpc_release(v24);
  xpc_release(v21);
  xpc_release(v18);
  xpc_release(object_8);
  std::__shared_weak_count::__release_weak(v26);
  xpc_release(v25);
  std::__shared_weak_count::__release_weak(v9);
  xpc_release(v29);
  std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_26374AA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void LogTracker::postLogCollectionInternal_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v199 = *MEMORY[0x263EF8340];
  memset(v184, 170, sizeof(v184));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26150]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  uint64_t v141 = (char *)*MEMORY[0x263F26230];
  xpc::dyn_cast_or_default((uint64_t *)v184, (xpc *)object, (const object *)*MEMORY[0x263F26230], v5);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(v183, 170, sizeof(v183));
  xpc_object_t v6 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F26148]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v183, (xpc *)object, (const object *)"", v7);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(v182, 170, sizeof(v182));
  xpc_object_t v8 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F26368]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v182, (xpc *)object, (const object *)"", v9);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&v181, 170, sizeof(v181));
  uint64_t v10 = (const char *)*MEMORY[0x263F263C0];
  xpc_object_t v11 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F263C0]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v181, (xpc *)object, (const object *)"", v12);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&__s, 170, sizeof(__s));
  xpc_object_t v13 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F26030]);
  __p[0] = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    __p[0] = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)__dst);
  Timestamp::asString((uint64_t)__dst, 0, 9, object);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object[0].__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__dst, *(void **)&__dst[8]);
  xpc_release(__p[0]);
  xpc_object_t v14 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F25E10]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v15 = xpc::dyn_cast_or_default((xpc *)object, (const object *)7);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  memset(&v179, 170, sizeof(v179));
  xpc_object_t v16 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F26298]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&v179, (xpc *)object, (const object *)"", v17);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  xpc_object_t v18 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F26820]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v142 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  char v178 = 1;
  xpc_object_t v21 = (const void *)*MEMORY[0x263F26858];
  size_t v22 = strlen((const char *)*MEMORY[0x263F26858]);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v23 = v22;
  uint64_t v143 = a1;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    xpc_object_t v24 = operator new(v25 + 1);
    *(void *)&__dst[8] = v23;
    *(void *)&__dst[16] = v26 | 0x8000000000000000;
    *(void *)long long __dst = v24;
    goto LABEL_38;
  }
  __dst[23] = v22;
  xpc_object_t v24 = __dst;
  if (v22) {
LABEL_38:
  }
    memmove(v24, v21, v23);
  v24[v23] = 0;
  memset(object, 0, 24);
  if (prop::logfilter::get(__dst, (uint64_t)object)) {
    util::convert<BOOL>(object, (BOOL *)&v178, 0);
  }
  size_t v27 = (void *)a1;
  if (SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(object[0].__r_.__value_.__l.__data_);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_43:
      if (v178) {
        goto LABEL_44;
      }
      goto LABEL_48;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)__dst);
  if (v178)
  {
LABEL_44:
    *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unint64_t v188 = v28;
    *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v28;
    *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v28;
    *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v28;
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v28;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v177, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v177 = __s;
    }
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v176, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
    }
    else {
      std::string v176 = v179;
    }
    ResetInfo::ResetInfo(object, (long long *)v183, (long long *)v182, (long long *)&v181, (uint64_t)&v177, v15, (long long *)&v176);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v176.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
    }
    else if ((SHIBYTE(v177.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(v177.__r_.__value_.__l.__data_);
LABEL_56:
    pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
    xpc_object_t v30 = (void *)xmmword_26A99F438;
    if (!(void)xmmword_26A99F438)
    {
      LogDumpDB::create_default_global((LogDumpDB *)__dst);
      long long v31 = *(_OWORD *)__dst;
      *(_OWORD *)long long __dst = 0uLL;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F438 + 1);
      xmmword_26A99F438 = v31;
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      xpc_object_t v33 = *(std::__shared_weak_count **)&__dst[8];
      if (*(void *)&__dst[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      xpc_object_t v30 = (void *)xmmword_26A99F438;
    }
    xpc_object_t v34 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F438 + 1);
    __p[0] = v30;
    __p[1] = *((xpc_object_t *)&xmmword_26A99F438 + 1);
    if (*((void *)&xmmword_26A99F438 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F438 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
    BOOL isDuplicated = LogDumpDB::isDuplicated((uint64_t)v30, (uint64_t)object, 1200);
    BOOL v36 = isDuplicated;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v36)
      {
LABEL_69:
        std::string::append(&v181, " (duplicated signature detected)", 0x20uLL);
        if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v181;
        }
        else {
          uint64_t v37 = (std::string *)v181.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v38 = xpc_string_create((const char *)v37);
        if (!v38) {
          xpc_object_t v38 = xpc_null_create();
        }
        xpc_dictionary_set_value(*v2, v10, v38);
        xpc_object_t v39 = xpc_null_create();
        xpc_release(v38);
        xpc_release(v39);
        if ((v188[15] & 0x80000000) != 0)
        {
          operator delete((void *)object[3].__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_76:
            if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_77;
            }
            goto LABEL_139;
          }
        }
        else if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_76;
        }
        operator delete(object[2].__r_.__value_.__l.__data_);
        if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_78:
            char v40 = 1;
            goto LABEL_96;
          }
LABEL_140:
          operator delete(object[0].__r_.__value_.__l.__data_);
          goto LABEL_78;
        }
LABEL_139:
        operator delete(object[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_78;
        }
        goto LABEL_140;
      }
    }
    else if (isDuplicated)
    {
      goto LABEL_69;
    }
    if ((v188[15] & 0x80000000) != 0)
    {
      operator delete((void *)object[3].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_84:
        if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_85;
        }
        goto LABEL_135;
      }
    }
    else if ((SHIBYTE(object[2].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_84;
    }
    operator delete(object[2].__r_.__value_.__l.__data_);
    if ((SHIBYTE(object[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
LABEL_136:
      operator delete(object[0].__r_.__value_.__l.__data_);
      goto LABEL_86;
    }
LABEL_135:
    operator delete(object[1].__r_.__value_.__l.__data_);
    if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_136;
  }
LABEL_48:
  xpc_object_t v29 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v29, OS_LOG_TYPE_DEFAULT, "#I Duplicated Signature Detection is disabled", (uint8_t *)object, 2u);
  }
LABEL_86:
  if (SHIBYTE(v184[2]) >= 0) {
    size_t v41 = HIBYTE(v184[2]);
  }
  else {
    size_t v41 = (size_t)v184[1];
  }
  if (v41 == strlen(v141))
  {
    if (SHIBYTE(v184[2]) >= 0) {
      uint64_t v42 = v184;
    }
    else {
      uint64_t v42 = (std::string::value_type **)v184[0];
    }
    char v40 = 0;
    if (!memcmp(v42, v141, v41))
    {
      xpc_object_t v43 = (const char *)*MEMORY[0x263F25F30];
      goto LABEL_220;
    }
  }
  else
  {
    char v40 = 0;
  }
LABEL_96:
  memset(v157, 170, 24);
  xpc_object_t v44 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F26218]);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  if (v44) {
    xpc_retain(v44);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v157, (xpc *)object, (const object *)*MEMORY[0x263F204D0], v45);
  xpc_release(object[0].__r_.__value_.__l.__data_);
  if (!v142)
  {
    unint64_t v194 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v193 = v50;
    long long v192 = v50;
    *(_OWORD *)&v191[16] = v50;
    *(_OWORD *)uint64_t v191 = v50;
    long long v190 = v50;
    *(_OWORD *)&v189[32] = v50;
    *(_OWORD *)&v189[16] = v50;
    *(_OWORD *)std::string v189 = v50;
    *(_OWORD *)&v188[16] = v50;
    *(_OWORD *)unint64_t v188 = v50;
    *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v50;
    *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v50;
    *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v50;
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v50;
    *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v50;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)object);
    char v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(object, (uint64_t)".*(", 3);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s.__r_.__value_.__l.__size_;
    }
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)p_s, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)").*", 3);
    *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[32] = v55;
    *(_OWORD *)char v145 = v55;
    *(_OWORD *)long long __dst = v55;
    *(_OWORD *)&__dst[16] = v55;
    if ((v188[8] & 0x10) != 0)
    {
      std::string::size_type v58 = *(void *)v188;
      if (*(void *)v188 < object[2].__r_.__value_.__l.__size_)
      {
        *(void *)unint64_t v188 = object[2].__r_.__value_.__l.__size_;
        std::string::size_type v58 = object[2].__r_.__value_.__l.__size_;
      }
      std::string::pointer data = object[2].__r_.__value_.__l.__data_;
      size_t v56 = v58 - object[2].__r_.__value_.__r.__words[0];
      if (v58 - object[2].__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_142;
      }
    }
    else
    {
      if ((v188[8] & 8) == 0)
      {
        size_t v56 = 0;
        BYTE7(v149) = 0;
        xpc_object_t v57 = __p;
        goto LABEL_125;
      }
      std::string::pointer data = object[1].__r_.__value_.__l.__data_;
      size_t v56 = object[1].__r_.__value_.__r.__words[2] - object[1].__r_.__value_.__r.__words[0];
      if (object[1].__r_.__value_.__r.__words[2] - object[1].__r_.__value_.__r.__words[0] > 0x7FFFFFFFFFFFFFF7) {
LABEL_142:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v56 >= 0x17)
    {
      uint64_t v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v56 | 7) != 0x17) {
        uint64_t v60 = v56 | 7;
      }
      uint64_t v61 = v60 + 1;
      xpc_object_t v57 = operator new(v60 + 1);
      __p[1] = (xpc_object_t)v56;
      *(void *)&long long v149 = v61 | 0x8000000000000000;
      __p[0] = v57;
    }
    else
    {
      BYTE7(v149) = v56;
      xpc_object_t v57 = __p;
      if (!v56)
      {
LABEL_125:
        *((unsigned char *)v57 + v56) = 0;
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)__dst, (uint64_t)__p, 0);
        if (SBYTE7(v149) < 0) {
          operator delete(__p[0]);
        }
        xpc_object_t v163 = 0;
        xpc_object_t v162 = 0;
        *(void *)xpc_object_t v164 = 0;
        std::locale::locale(&v170, (const std::locale *)__dst);
        long long v171 = *(_OWORD *)&__dst[8];
        long long v172 = *(_OWORD *)&__dst[24];
        uint64_t v173 = *(void *)&__dst[40];
        xpc_object_t v174 = (std::__shared_weak_count *)v145[0];
        if (v145[0]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v145[0] + 1, 1uLL, memory_order_relaxed);
        }
        unsigned __int8 v175 = v145[1];
        ctu::fs::get_filtered_files();
        char v139 = v40;
        int v140 = v2;
        uint64_t v62 = v174;
        if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
          std::locale::~locale(&v170);
          uint64_t v63 = (std::__shared_weak_count *)v162;
          uint64_t v64 = v163;
          if ((v157[23] & 0x80000000) == 0) {
            goto LABEL_132;
          }
        }
        else
        {
          std::locale::~locale(&v170);
          uint64_t v63 = (std::__shared_weak_count *)v162;
          uint64_t v64 = v163;
          if ((v157[23] & 0x80000000) == 0)
          {
LABEL_132:
            std::string v168 = *(std::string *)v157;
            goto LABEL_145;
          }
        }
        std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)v157, *(std::string::size_type *)&v157[8]);
LABEL_145:
        uint64_t v169 = v143;
        if (v63 == v64)
        {
LABEL_199:
          char v93 = (void *)v168.__r_.__value_.__r.__words[0];
          int v94 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          memset(&v168, 0, sizeof(v168));
          if (v94 < 0)
          {
            operator delete(v93);
            if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v168.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v95 = (std::__shared_weak_count *)v162;
          uint64_t v2 = v140;
          if (v162)
          {
            long long v96 = v163;
            xpc_object_t v97 = v162;
            if (v163 != v162)
            {
              do
              {
                if (SHIBYTE(v96[-1].__shared_weak_owners_) < 0) {
                  operator delete(v96[-1].__vftable);
                }
                --v96;
              }
              while (v96 != v95);
              xpc_object_t v97 = v162;
            }
            xpc_object_t v163 = v95;
            operator delete(v97);
          }
          xpc_object_t v98 = (std::__shared_weak_count *)v145[0];
          if (v145[0] && !atomic_fetch_add((atomic_ullong *volatile)v145[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
          std::locale::~locale((std::locale *)__dst);
          object[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
          *(std::string::size_type *)((char *)object[0].__r_.__value_.__r.__words
                                    + *(void *)(object[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
          object[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
          if (SHIBYTE(object[3].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(object[3].__r_.__value_.__l.__data_);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x263E69630](&v188[16]);
          char v40 = v139;
          goto LABEL_216;
        }
        while (1)
        {
          uint64_t v65 = v169;
          int v66 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v67 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v67 = v168.__r_.__value_.__l.__size_;
          }
          unint64_t v68 = v67 + 1;
          memset(v155, 170, 24);
          if (v67 + 1 > 0x7FFFFFFFFFFFFFF7) {
LABEL_333:
          }
            std::string::__throw_length_error[abi:ne180100]();
          if (v68 >= 0x17)
          {
            uint64_t v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v68 | 7) != 0x17) {
              uint64_t v70 = v68 | 7;
            }
            uint64_t v71 = v70 + 1;
            xpc_object_t v69 = operator new(v70 + 1);
            *(void *)&v155[16] = v71 | 0x8000000000000000;
            *(void *)v155 = v69;
            *(void *)&v155[8] = v67 + 1;
            size_t v27 = (void *)v143;
          }
          else
          {
            memset(v155, 0, 24);
            xpc_object_t v69 = v155;
            v155[23] = v67 + 1;
            if (!v67) {
              goto LABEL_163;
            }
          }
          if (v66 >= 0) {
            int64_t v72 = &v168;
          }
          else {
            int64_t v72 = (std::string *)v168.__r_.__value_.__r.__words[0];
          }
          memmove(v69, v72, v67);
LABEL_163:
          *(_WORD *)&v69[v67] = 47;
          int shared_weak_owners_high = SHIBYTE(v63->__shared_weak_owners_);
          if (shared_weak_owners_high >= 0) {
            uint64_t v74 = (const std::string::value_type *)v63;
          }
          else {
            uint64_t v74 = (const std::string::value_type *)v63->__vftable;
          }
          if (shared_weak_owners_high >= 0) {
            std::string::size_type shared_owners = HIBYTE(v63->__shared_weak_owners_);
          }
          else {
            std::string::size_type shared_owners = v63->__shared_owners_;
          }
          dispatch_object_t v76 = std::string::append((std::string *)v155, v74, shared_owners);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          *(void *)&long long v149 = *((void *)&v76->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          int v78 = ctu::fs::remove_dir();
          if (SBYTE7(v149) < 0)
          {
            operator delete(__p[0]);
            if ((v155[23] & 0x80000000) != 0)
            {
LABEL_174:
              operator delete(*(void **)v155);
              int v79 = *(NSObject **)(v65 + 88);
              if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_148;
              }
              goto LABEL_175;
            }
          }
          else if ((v155[23] & 0x80000000) != 0)
          {
            goto LABEL_174;
          }
          int v79 = *(NSObject **)(v65 + 88);
          if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_148;
          }
LABEL_175:
          int v80 = SHIBYTE(v168.__r_.__value_.__r.__words[2]);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v81 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v81 = v168.__r_.__value_.__l.__size_;
          }
          unint64_t v82 = v81 + 1;
          memset(v155, 170, 24);
          if (v81 + 1 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_333;
          }
          if (v82 >= 0x17)
          {
            uint64_t v84 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17) {
              uint64_t v84 = v82 | 7;
            }
            uint64_t v85 = v84 + 1;
            uint64_t v83 = operator new(v84 + 1);
            *(void *)&v155[16] = v85 | 0x8000000000000000;
            *(void *)v155 = v83;
            *(void *)&v155[8] = v81 + 1;
          }
          else
          {
            memset(v155, 0, 24);
            uint64_t v83 = v155;
            v155[23] = v81 + 1;
            if (!v81) {
              goto LABEL_189;
            }
          }
          if (v80 >= 0) {
            xpc_object_t v86 = &v168;
          }
          else {
            xpc_object_t v86 = (std::string *)v168.__r_.__value_.__r.__words[0];
          }
          memmove(v83, v86, v81);
LABEL_189:
          *(_WORD *)&v83[v81] = 47;
          if (v63->__shared_weak_owners_ >= 0) {
            xpc_object_t v87 = (const char *)v63;
          }
          else {
            xpc_object_t v87 = (const char *)v63->__vftable;
          }
          size_t v88 = strlen(v87);
          char v89 = std::string::append((std::string *)v155, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          *(void *)&long long v149 = *((void *)&v89->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          size_t v91 = "Failed";
          if (v78) {
            size_t v91 = "Succeeded";
          }
          size_t v92 = __p;
          if (SBYTE7(v149) < 0) {
            size_t v92 = (xpc_object_t *)__p[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          long long v196 = v91;
          __int16 v197 = 2080;
          long long v198 = v92;
          _os_log_impl(&dword_26368A000, v79, OS_LOG_TYPE_DEFAULT, "#I %s to remove path: %s", buf, 0x16u);
          size_t v27 = (void *)v143;
          if (SBYTE7(v149) < 0)
          {
            operator delete(__p[0]);
            if ((v155[23] & 0x80000000) != 0) {
              goto LABEL_198;
            }
          }
          else if ((v155[23] & 0x80000000) != 0)
          {
LABEL_198:
            operator delete(*(void **)v155);
          }
LABEL_148:
          if (++v63 == v64) {
            goto LABEL_199;
          }
        }
      }
    }
    memmove(v57, data, v56);
    goto LABEL_125;
  }
  int v46 = ctu::fs::remove_dir();
  unint64_t v47 = *(NSObject **)(v143 + 88);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v48 = "Failed";
    if (v46) {
      unint64_t v48 = "Succeeded";
    }
    xpc_object_t v49 = v157;
    if (v157[23] < 0) {
      xpc_object_t v49 = *(unsigned char **)v157;
    }
    LODWORD(object[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)object[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
    WORD2(object[0].__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&object[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v49;
    _os_log_impl(&dword_26368A000, v47, OS_LOG_TYPE_DEFAULT, "#I %s to remove dump path: %s", (uint8_t *)object, 0x16u);
  }
LABEL_216:
  xpc_object_t v99 = xpc_int64_create(0);
  if (!v99) {
    xpc_object_t v99 = xpc_null_create();
  }
  xpc_object_t v43 = (const char *)*MEMORY[0x263F25F30];
  xpc_dictionary_set_value(*v2, (const char *)*MEMORY[0x263F25F30], v99);
  xpc_object_t v100 = xpc_null_create();
  xpc_release(v99);
  xpc_release(v100);
  if ((v157[23] & 0x80000000) != 0) {
    operator delete(*(void **)v157);
  }
LABEL_220:
  xpc_object_t v101 = xpc_dictionary_get_value(*v2, v43);
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
  if (v101) {
    xpc_retain(v101);
  }
  else {
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v102 = xpc::dyn_cast_or_default((xpc *)object, 0);
  char v103 = v40;
  int v104 = v2;
  xpc_release(object[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v184[2]) >= 0) {
    size_t v105 = HIBYTE(v184[2]);
  }
  else {
    size_t v105 = (size_t)v184[1];
  }
  if (v105 == strlen(v141))
  {
    xpc_object_t v106 = SHIBYTE(v184[2]) >= 0 ? v184 : (std::string::value_type **)v184[0];
    if (!memcmp(v106, v141, v105) && v102 != 2)
    {
      std::vector<std::ssub_match>::pointer v107 = v27[26];
      dispatch_object_t v167 = v107;
      if (v107)
      {
        dispatch_retain(v107);
        dispatch_group_enter(v107);
      }
      xpc_object_t v108 = *v104;
      xpc_object_t v166 = v108;
      if (v108)
      {
        xpc_retain(v108);
      }
      else
      {
        xpc_object_t v108 = xpc_null_create();
        xpc_object_t v166 = v108;
      }
      uint64_t v186 = 0;
      LogTracker::systemLog_sync((uint64_t)v27, &v167, &v166, v185);
      if (v186 == v185)
      {
        (*(void (**)(void *))(v185[0] + 32))(v185);
      }
      else if (v186)
      {
        (*(void (**)(void))(*v186 + 40))();
      }
      xpc_release(v108);
      xpc_object_t v166 = 0;
      if (v107)
      {
        dispatch_group_leave(v107);
        dispatch_release(v107);
      }
    }
  }
  unint64_t v109 = (std::__shared_weak_count *)v27[16];
  if (!v109 || (std::string::size_type v110 = (void *)v27[15], (v111 = std::__shared_weak_count::lock(v109)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v112 = v111;
  p_shared_weak_owners = &v111->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v111->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v112);
  }
  v165.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v114 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v114 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v164[16] = v114;
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v114;
  *(_OWORD *)xpc_object_t v164 = v114;
  xpc_object_t v162 = v110;
  xpc_object_t v163 = v112;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  *(void *)xpc_object_t v164 = v27;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&v164[8], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&v164[8] = __s;
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v165, v181.__r_.__value_.__l.__data_, v181.__r_.__value_.__l.__size_);
  }
  else {
    std::string v165 = v181;
  }
  *(void *)&long long v115 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v115 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)xpc_object_t v161 = v115;
  *(_OWORD *)&v161[16] = v115;
  long long v159 = v115;
  long long v160 = v115;
  *(_OWORD *)&v157[16] = v115;
  long long v158 = v115;
  *(void *)xpc_object_t v157 = v110;
  *(void *)&v157[8] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&v157[16] = v27;
  v157[24] = v103;
  *(_DWORD *)&v157[28] = v102;
  xpc_object_t v116 = *v104;
  *(void *)&long long v158 = v116;
  if (v116)
  {
    xpc_retain(v116);
    v117 = v163;
    *((void *)&v158 + 1) = v162;
    *(void *)&long long v159 = v163;
    if (!v163) {
      goto LABEL_256;
    }
    goto LABEL_255;
  }
  *(void *)&long long v158 = xpc_null_create();
  v117 = v163;
  *((void *)&v158 + 1) = v162;
  *(void *)&long long v159 = v163;
  if (v163) {
LABEL_255:
  }
    atomic_fetch_add_explicit(&v117->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_256:
  *((void *)&v159 + 1) = *(void *)v164;
  if ((v164[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v160, *(const std::string::value_type **)&v164[8], *(std::string::size_type *)&v164[16]);
  }
  else
  {
    long long v160 = *(_OWORD *)&v164[8];
    *(void *)xpc_object_t v161 = *(void *)&v164[24];
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)&v161[8], v165.__r_.__value_.__l.__data_, v165.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)&v161[8] = v165;
  }
  *(void *)&long long v118 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v118 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v156[5] = v118;
  v156[6] = v118;
  v156[3] = v118;
  v156[4] = v118;
  v156[1] = v118;
  v156[2] = v118;
  *(_OWORD *)&v155[16] = v118;
  v156[0] = v118;
  *(void *)v155 = v110;
  *(void *)&v155[8] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v119 = *v104;
  *(void *)&v155[16] = v27;
  *(void *)&v155[24] = v119;
  if (v119) {
    xpc_retain(v119);
  }
  else {
    *(void *)&v155[24] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v156, (uint64_t)v157);
  *(void *)&long long v120 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v120 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v154[5] = v120;
  v154[6] = v120;
  v154[3] = v120;
  v154[4] = v120;
  v154[1] = v120;
  v154[2] = v120;
  long long v153 = v120;
  v154[0] = v120;
  *(_OWORD *)size_t v151 = v120;
  long long v152 = v120;
  long long v149 = v120;
  *(_OWORD *)char v150 = v120;
  __p[0] = v110;
  __p[1] = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v149 = v27;
  DWORD2(v149) = v142;
  BYTE12(v149) = v103;
  if (SHIBYTE(v184[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v150, v184[0], (std::string::size_type)v184[1]);
  }
  else
  {
    *(_OWORD *)char v150 = *(_OWORD *)v184;
    v151[0] = v184[2];
  }
  xpc_object_t v121 = *v104;
  v151[1] = v121;
  if (v121)
  {
    xpc_retain(v121);
    uint64_t v122 = *(void *)&v155[8];
    long long v152 = *(_OWORD *)v155;
    if (!*(void *)&v155[8]) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
  v151[1] = xpc_null_create();
  uint64_t v122 = *(void *)&v155[8];
  long long v152 = *(_OWORD *)v155;
  if (*(void *)&v155[8]) {
LABEL_272:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 16), 1uLL, memory_order_relaxed);
LABEL_273:
  long long v153 = *(_OWORD *)&v155[16];
  if (*(void *)&v155[24]) {
    xpc_retain(*(xpc_object_t *)&v155[24]);
  }
  else {
    *((void *)&v153 + 1) = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v154, (uint64_t)v156);
  *(void *)&long long v123 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v123 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147[7] = v123;
  v147[8] = v123;
  v147[5] = v123;
  v147[6] = v123;
  v147[3] = v123;
  v147[4] = v123;
  v147[1] = v123;
  v147[2] = v123;
  *(_OWORD *)uint64_t v146 = v123;
  v147[0] = v123;
  *(_OWORD *)&__dst[32] = v123;
  *(_OWORD *)char v145 = v123;
  *(_OWORD *)&__dst[16] = v123;
  xpc_object_t v124 = *v104;
  *(void *)long long __dst = v27;
  *(void *)&__dst[8] = v124;
  if (v124) {
    xpc_retain(v124);
  }
  else {
    *(void *)&__dst[8] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&__dst[16], (uint64_t)__p);
  *(void *)&long long v193 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v125 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v125 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v192 = v125;
  *(_OWORD *)&v191[16] = v125;
  *(_OWORD *)uint64_t v191 = v125;
  long long v190 = v125;
  *(_OWORD *)&v189[32] = v125;
  *(_OWORD *)&v189[16] = v125;
  *(_OWORD *)std::string v189 = v125;
  *(_OWORD *)&v188[16] = v125;
  *(_OWORD *)unint64_t v188 = v125;
  *(_OWORD *)&object[3].__r_.__value_.__r.__words[1] = v125;
  *(_OWORD *)&object[2].__r_.__value_.__r.__words[2] = v125;
  *(_OWORD *)&object[2].__r_.__value_.__l.__data_ = v125;
  *(_OWORD *)&object[1].__r_.__value_.__r.__words[1] = v125;
  *(_OWORD *)&object[0].__r_.__value_.__r.__words[2] = v125;
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
  object[0].__r_.__value_.__l.__size_ = (std::string::size_type)v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  object[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
  *(_OWORD *)&object[1].__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
  if (*(void *)&__dst[8]) {
    xpc_retain(*(xpc_object_t *)&__dst[8]);
  }
  else {
    object[1].__r_.__value_.__l.__size_ = (std::string::size_type)xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&object[1].__r_.__value_.__r.__words[2], (uint64_t)&__dst[16]);
  v126 = v27[26];
  unsigned int v127 = v27[17];
  BOOL v128 = (char *)operator new(0xF8uLL);
  long long v129 = *(_OWORD *)&object[0].__r_.__value_.__l.__data_;
  long long v130 = *(_OWORD *)&object[0].__r_.__value_.__r.__words[2];
  *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)BOOL v128 = v129;
  *((_OWORD *)v128 + 1) = v130;
  v131 = (void *)object[1].__r_.__value_.__l.__size_;
  *((void *)v128 + 4) = object[1].__r_.__value_.__l.__size_;
  if (v131) {
    xpc_retain(v131);
  }
  else {
    *((void *)v128 + 4) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 40) = *(_OWORD *)&object[1].__r_.__value_.__r.__words[2];
  object[1].__r_.__value_.__r.__words[2] = 0;
  object[2].__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v132 = object[3].__r_.__value_.__r.__words[2];
  *((void *)v128 + 7) = object[2].__r_.__value_.__l.__size_;
  *(void *)(v128 + 61) = *(std::string::size_type *)((char *)&object[2].__r_.__value_.__r.__words[1] + 5);
  *(_OWORD *)(v128 + 72) = *(_OWORD *)&object[3].__r_.__value_.__l.__data_;
  memset(&object[3], 0, sizeof(std::string));
  unint64_t v133 = *(void **)v188;
  *((void *)v128 + 11) = v132;
  *((void *)v128 + 12) = v133;
  if (v133) {
    xpc_retain(v133);
  }
  else {
    *((void *)v128 + 12) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 104) = *(_OWORD *)&v188[8];
  *(void *)&v188[16] = 0;
  *(void *)&v188[8] = 0;
  uint64_t v134 = *(void **)v189;
  *((void *)v128 + 15) = *(void *)&v188[24];
  *((void *)v128 + 16) = v134;
  if (v134) {
    xpc_retain(v134);
  }
  else {
    *((void *)v128 + 16) = xpc_null_create();
  }
  *(_OWORD *)(v128 + 136) = *(_OWORD *)&v189[8];
  *(void *)&v189[16] = 0;
  *(void *)&v189[8] = 0;
  *(_OWORD *)(v128 + 152) = *(_OWORD *)&v189[24];
  std::string::size_type v135 = *(void **)&v189[40];
  *((void *)v128 + 21) = *(void *)&v189[40];
  if (v135) {
    xpc_retain(v135);
  }
  else {
    *((void *)v128 + 21) = xpc_null_create();
  }
  uint64_t v136 = *(void *)&v191[24];
  *((void *)v128 + 24) = *(void *)v191;
  *((_OWORD *)v128 + 11) = v190;
  long long v190 = 0uLL;
  *(_OWORD *)(v128 + 200) = *(_OWORD *)&v191[8];
  *((void *)v128 + 27) = v136;
  *(void *)&v191[16] = 0;
  *(void *)&v191[8] = 0;
  *((_OWORD *)v128 + 14) = v192;
  *((void *)v128 + 30) = v193;
  *(void *)&v191[24] = 0;
  long long v192 = 0uLL;
  *(void *)&long long v193 = 0;
  dispatch_group_notify_f(v126, v127, v128, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)object);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v147);
  xpc_release(v146[1]);
  v146[1] = 0;
  if (SHIBYTE(v146[0]) < 0) {
    operator delete(v145[0]);
  }
  if (*(void *)&__dst[24]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[24]);
  }
  xpc_release(*(xpc_object_t *)&__dst[8]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v152);
  xpc_release(v151[1]);
  v151[1] = 0;
  if (SHIBYTE(v151[0]) < 0) {
    operator delete(v150[0]);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v155);
  if ((v161[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v161[8]);
    if ((v161[7] & 0x80000000) == 0)
    {
LABEL_306:
      uint64_t v137 = (std::__shared_weak_count *)v159;
      if (!(void)v159) {
        goto LABEL_308;
      }
      goto LABEL_307;
    }
  }
  else if ((v161[7] & 0x80000000) == 0)
  {
    goto LABEL_306;
  }
  operator delete((void *)v160);
  uint64_t v137 = (std::__shared_weak_count *)v159;
  if ((void)v159) {
LABEL_307:
  }
    std::__shared_weak_count::__release_weak(v137);
LABEL_308:
  xpc_release((xpc_object_t)v158);
  *(void *)&long long v158 = 0;
  if (*(void *)&v157[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v157[8]);
  }
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v165.__r_.__value_.__l.__data_);
    if ((v164[31] & 0x80000000) == 0)
    {
LABEL_312:
      uint64_t v138 = v163;
      if (!v163) {
        goto LABEL_314;
      }
      goto LABEL_313;
    }
  }
  else if ((v164[31] & 0x80000000) == 0)
  {
    goto LABEL_312;
  }
  operator delete(*(void **)&v164[8]);
  uint64_t v138 = v163;
  if (v163) {
LABEL_313:
  }
    std::__shared_weak_count::__release_weak(v138);
LABEL_314:
  std::__shared_weak_count::__release_weak(v112);
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_316:
      if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_317;
      }
      goto LABEL_329;
    }
  }
  else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_316;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_317:
    if ((SHIBYTE(v182[2]) & 0x80000000) == 0) {
      goto LABEL_318;
    }
    goto LABEL_330;
  }
LABEL_329:
  operator delete(v181.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v182[2]) & 0x80000000) == 0)
  {
LABEL_318:
    if ((SHIBYTE(v183[2]) & 0x80000000) == 0) {
      goto LABEL_319;
    }
    goto LABEL_331;
  }
LABEL_330:
  operator delete(v182[0]);
  if ((SHIBYTE(v183[2]) & 0x80000000) == 0)
  {
LABEL_319:
    if ((SHIBYTE(v184[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_332:
    operator delete(v184[0]);
    return;
  }
LABEL_331:
  operator delete(v183[0]);
  if (SHIBYTE(v184[2]) < 0) {
    goto LABEL_332;
  }
}

void sub_26374C5CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_26374CB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a50 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0x20F]) < 0)
    {
LABEL_5:
      operator delete(a73);
      if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0) {
        JUMPOUT(0x26374CA90);
      }
      JUMPOUT(0x26374CA88);
    }
  }
  else if (SLOBYTE(STACK[0x20F]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x26374CA80);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  xpc_object_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5)
  {
    xpc_retain(v5);
    uint64_t v6 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 32) = xpc_null_create();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
LABEL_5:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v7;
  }
  xpc_object_t v8 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_26374CC70(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(void *)(v1 + 32) = 0;
  xpc_object_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(void *)(a1 + 16) = v5;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v6;
  }
  long long v7 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v7;
  if (v7)
  {
    xpc_retain(v7);
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *(void *)(a1 + 56) = xpc_null_create();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  if (v8) {
LABEL_8:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
LABEL_9:
  long long v9 = *(void **)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *(void *)(a1 + 88) = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(a1 + 96, a2 + 96);
  return a1;
}

void sub_26374CDB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 104);
  xpc_release(*(xpc_object_t *)(a1 + 96));
  *(void *)(a1 + 96) = 0;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5::~$_5(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 80);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::~$_4(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 64);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::markPurgeable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77[7] = v6;
  v77[8] = v6;
  v77[5] = v6;
  v77[6] = v6;
  void v77[3] = v6;
  v77[4] = v6;
  v77[1] = v6;
  v77[2] = v6;
  long long v76 = v6;
  v77[0] = v6;
  *(_OWORD *)uint64_t v74 = v6;
  long long v75 = v6;
  long long v72 = v6;
  long long v73 = v6;
  long long v70 = v6;
  long long v71 = v6;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)".*(", 3);
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(void *)a3;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  xpc_object_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)").*", 3);
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v68[32] = v12;
  long long v69 = v12;
  *(_OWORD *)unint64_t v68 = v12;
  *(_OWORD *)&v68[16] = v12;
  if ((BYTE8(v76) & 0x10) != 0)
  {
    uint64_t v15 = v76;
    if ((unint64_t)v76 < *((void *)&v73 + 1))
    {
      *(void *)&long long v76 = *((void *)&v73 + 1);
      uint64_t v15 = *((void *)&v73 + 1);
    }
    xpc_object_t v16 = (const void *)v73;
    __darwin_ino64_t v13 = v15 - v73;
    if ((unint64_t)(v15 - v73) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_29;
    }
  }
  else
  {
    if ((BYTE8(v76) & 8) == 0)
    {
      __darwin_ino64_t v13 = 0;
      HIBYTE(__dst.st_gid) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    xpc_object_t v16 = (const void *)*((void *)&v71 + 1);
    __darwin_ino64_t v13 = *((void *)&v72 + 1) - *((void *)&v71 + 1);
    if (*((void *)&v72 + 1) - *((void *)&v71 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_29:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (stat *)operator new(v17 + 1);
    *(void *)&__dst.st_uid = v18 | 0x8000000000000000;
    *(void *)&__dst.st_dev = p_dst;
    __dst.st_ino = v13;
    goto LABEL_19;
  }
  HIBYTE(__dst.st_gid) = v13;
  p_dst = &__dst;
  if (v13) {
LABEL_19:
  }
    memmove(p_dst, v16, v13);
LABEL_20:
  *((unsigned char *)&p_dst->st_dev + v13) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v68, (uint64_t)&__dst, 0);
  if (SHIBYTE(__dst.st_gid) < 0) {
    operator delete(*(void **)&__dst.st_dev);
  }
  uint64_t v65 = 0;
  int v66 = 0;
  uint64_t v67 = 0;
  std::locale::locale(&v59, (const std::locale *)v68);
  long long v60 = *(_OWORD *)&v68[8];
  long long v61 = *(_OWORD *)&v68[24];
  uint64_t v62 = *(void *)&v68[40];
  uint64_t v63 = (std::__shared_weak_count *)v69;
  if ((void)v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v64 = *((void *)&v69 + 1);
  ctu::fs::get_filtered_files();
  long long v19 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    std::locale::~locale(&v59);
    unint64_t v20 = (void **)v65;
    xpc_object_t v21 = v66;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  else
  {
    std::locale::~locale(&v59);
    unint64_t v20 = (void **)v65;
    xpc_object_t v21 = v66;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_27:
      std::string v57 = *(std::string *)a2;
      goto LABEL_32;
    }
  }
  std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_32:
  uint64_t v58 = a1;
  while (v20 != v21)
  {
    uint64_t v23 = v58;
    xpc_object_t v24 = (void *)*((unsigned __int8 *)v20 + 23);
    int v25 = (char)v24;
    if ((char)v24 < 0) {
      xpc_object_t v24 = v20[1];
    }
    if (v24 == (void *)2)
    {
      if (v25 >= 0) {
        size_t v27 = v20;
      }
      else {
        size_t v27 = *v20;
      }
      if (*v27 == 11822) {
        goto LABEL_38;
      }
    }
    else if (v24 == (void *)1)
    {
      uint64_t v26 = v25 >= 0 ? v20 : (void **)*v20;
      if (*(unsigned char *)v26 == 46) {
        goto LABEL_38;
      }
    }
    memset(&__sz, 170, sizeof(__sz));
    int v28 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v57.__r_.__value_.__l.__size_;
    }
    unint64_t v30 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v30 >= 0x17)
    {
      uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v32 = v30 | 7;
      }
      uint64_t v33 = v32 + 1;
      long long v31 = (stat *)operator new(v32 + 1);
      *(void *)&__dst.st_uid = v33 | 0x8000000000000000;
      *(void *)&__dst.st_dev = v31;
      __dst.st_ino = size + 1;
    }
    else
    {
      memset(&__dst, 0, 24);
      long long v31 = &__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size) {
        goto LABEL_66;
      }
    }
    if (v28 >= 0) {
      xpc_object_t v34 = &v57;
    }
    else {
      xpc_object_t v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    memmove(v31, v34, size);
LABEL_66:
    *(_WORD *)((char *)&v31->st_dev + size) = 47;
    int v35 = *((char *)v20 + 23);
    if (v35 >= 0) {
      BOOL v36 = (const std::string::value_type *)v20;
    }
    else {
      BOOL v36 = (const std::string::value_type *)*v20;
    }
    if (v35 >= 0) {
      std::string::size_type v37 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      std::string::size_type v37 = (std::string::size_type)v20[1];
    }
    xpc_object_t v38 = std::string::append((std::string *)&__dst, v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __sz.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0) {
      operator delete(*(void **)&__dst.st_dev);
    }
    v40.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v40.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize_t size = v40;
    *(timespec *)__dst.st_qspare = v40;
    __dst.st_birthtimespec = v40;
    *(timespec *)&__dst.st_size_t size = v40;
    __dst.st_mtimespec = v40;
    __dst.st_ctimespec = v40;
    *(timespec *)&__dst.st_uid = v40;
    __dst.st_atimespec = v40;
    *(timespec *)&__dst.st_dev = v40;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_sz = &__sz;
    }
    else {
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    }
    if (!stat((const char *)p_sz, &__dst))
    {
      uint64_t v42 = (__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__sz
          : (std::string *)__sz.__r_.__value_.__r.__words[0];
      xpc_object_t v43 = opendir((const char *)v42);
      xpc_object_t v44 = v43;
      if (v43)
      {
        uint64_t v45 = readdir(v43);
        closedir(v44);
        if (v45)
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__dst.st_dev = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *(void *)&__dst.st_uid = *((void *)&__sz.__r_.__value_.__l + 2);
          }
          char v81 = 2;
          strcpy((char *)__p, ".*");
          LogTracker::markPurgeable(v23, &__dst, __p);
          if (v81 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0) {
              goto LABEL_78;
            }
          }
          else if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
          {
            goto LABEL_78;
          }
          operator delete(*(void **)&__dst.st_dev);
        }
      }
    }
LABEL_78:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v79, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v79 = __sz;
    }
    BOOL v46 = util::markPurgeableFile((uint64_t *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      unint64_t v47 = *(NSObject **)(v23 + 88);
      unint64_t v48 = v47;
      if (v46)
      {
LABEL_90:
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v22 = &__sz;
          }
          else {
            size_t v22 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v85 = v22;
          _os_log_impl(&dword_26368A000, v47, OS_LOG_TYPE_DEFAULT, "#I %s is marked to be purgeable", buf, 0xCu);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    else
    {
      unint64_t v47 = *(NSObject **)(v23 + 88);
      unint64_t v48 = v47;
      if (v46) {
        goto LABEL_90;
      }
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v49 = &__sz;
      }
      else {
        xpc_object_t v49 = (std::string *)__sz.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v85 = v49;
      _os_log_error_impl(&dword_26368A000, v47, OS_LOG_TYPE_ERROR, "Failed to mark %s to be purgeable", buf, 0xCu);
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_95:
      operator delete(__sz.__r_.__value_.__l.__data_);
      goto LABEL_38;
    }
LABEL_94:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_95;
    }
LABEL_38:
    v20 += 3;
  }
  long long v50 = (void *)v57.__r_.__value_.__r.__words[0];
  int v51 = SHIBYTE(v57.__r_.__value_.__r.__words[2]);
  memset(&v57, 0, sizeof(v57));
  if (v51 < 0)
  {
    operator delete(v50);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v52 = (void **)v65;
  if (v65)
  {
    xpc_object_t v53 = v66;
    uint64_t v54 = v65;
    if (v66 != v65)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      uint64_t v54 = v65;
    }
    int v66 = v52;
    operator delete(v54);
  }
  long long v55 = (std::__shared_weak_count *)v69;
  if ((void)v69 && !atomic_fetch_add((atomic_ullong *volatile)(v69 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  std::locale::~locale((std::locale *)v68);
  *(void *)&long long v70 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v70 + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v70 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v75) < 0) {
    operator delete(v74[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x263E69630](v77);
}

void sub_26374D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void LogTracker::houseKeepingLogs_sync(uint64_t a1, const char *a2)
{
  if (TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild()) {
    goto LABEL_15;
  }
  uint64_t v4 = (const void *)*MEMORY[0x263F204D0];
  size_t v5 = strlen((const char *)*MEMORY[0x263F204D0]);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    unint64_t v45 = v9 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_11:
    memmove(v7, v4, (size_t)v6);
    *((unsigned char *)v6 + (void)v7) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    goto LABEL_13;
  }
  HIBYTE(v45) = v5;
  long long v7 = __dst;
  if (v5) {
    goto LABEL_11;
  }
  LOBYTE(__dst[0]) = 0;
  if (a2[23] < 0) {
    goto LABEL_12;
  }
LABEL_7:
  std::string v43 = *(std::string *)a2;
LABEL_13:
  LogTracker::markPurgeable(a1, (uint64_t)__dst, (uint64_t)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst[0]);
LABEL_15:
  uint64_t v10 = (const void *)*MEMORY[0x263F204E8];
  size_t v11 = strlen((const char *)*MEMORY[0x263F204E8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    __darwin_ino64_t v13 = operator new(v14 + 1);
    __p[1] = v12;
    unint64_t v42 = v15 | 0x8000000000000000;
    __p[0] = v13;
LABEL_23:
    memmove(v13, v10, (size_t)v12);
    *((unsigned char *)v12 + (void)v13) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  HIBYTE(v42) = v11;
  __darwin_ino64_t v13 = __p;
  if (v11) {
    goto LABEL_23;
  }
  LOBYTE(__p[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_19:
    std::string v40 = *(std::string *)a2;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_25:
  LogTracker::markPurgeable(a1, (uint64_t)__p, (uint64_t)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
LABEL_27:
  xpc_object_t v16 = (const void *)*MEMORY[0x263F20508];
  size_t v17 = strlen((const char *)*MEMORY[0x263F20508]);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    long long v19 = operator new(v20 + 1);
    v38[1] = v18;
    unint64_t v39 = v21 | 0x8000000000000000;
    v38[0] = v19;
LABEL_35:
    memmove(v19, v16, (size_t)v18);
    *((unsigned char *)v18 + (void)v19) = 0;
    if ((a2[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  HIBYTE(v39) = v17;
  long long v19 = v38;
  if (v17) {
    goto LABEL_35;
  }
  LOBYTE(v38[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_31:
    std::string v37 = *(std::string *)a2;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_37:
  LogTracker::markPurgeable(a1, (uint64_t)v38, (uint64_t)&v37);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_44:
    operator delete(v38[0]);
    if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], v24)) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0) {
    goto LABEL_44;
  }
LABEL_39:
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], v22)) {
    goto LABEL_47;
  }
LABEL_45:
  if (!prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v23)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25EF0], v25))
  {
    return;
  }
LABEL_47:
  xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
  if (v26 || (xpc_object_t v26 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v26) == MEMORY[0x263EF8708])
    {
      xpc_retain(v26);
      xpc_object_t v27 = v26;
    }
    else
    {
      xpc_object_t v27 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v27 = xpc_null_create();
    xpc_object_t v26 = 0;
  }
  xpc_release(v26);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  xpc_object_t v28 = xpc_string_create(a2);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x263F20618], v28);
  xpc_object_t v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v33);
  abm::HelperClient::create();
  unint64_t v30 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    xpc_object_t v32 = v27;
    if (v27) {
      goto LABEL_60;
    }
LABEL_62:
    xpc_object_t v32 = xpc_null_create();
    goto LABEL_63;
  }
  xpc_object_t v32 = v27;
  if (!v27) {
    goto LABEL_62;
  }
LABEL_60:
  xpc_retain(v27);
LABEL_63:
  abm::HelperClient::perform();
  xpc_release(v32);
  long long v31 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  xpc_release(v27);
}

void sub_26374DF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 65) < 0) {
    operator delete(*(void **)(v40 - 88));
  }
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isDefaultCarrierProfileInstalled(LogTracker *this)
{
  int v10 = -1431655766;
  uint64_t v1 = (const void *)*MEMORY[0x263F26828];
  size_t v2 = strlen((const char *)*MEMORY[0x263F26828]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v9) = v2;
  uint64_t v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::profile::get((char *)__dst, (uint64_t)&__p)) {
    util::convert<int>(&__p, &v10, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return v10 != 0;
    }
LABEL_15:
    operator delete(__dst[0]);
    return v10 != 0;
  }
  if (SHIBYTE(v9) < 0) {
    goto LABEL_15;
  }
  return v10 != 0;
}

void sub_26374E1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isInternalProperty_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, _DWORD *a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  v36[0] = 0;
  v36[1] = 0;
  int64_t v37 = 0;
  v34[0] = 0;
  v34[1] = 0;
  int64_t v35 = 0;
  memset(&string, 0, sizeof(string));
  uint64_t v8 = MEMORY[0x263E6A240](*a2);
  uint64_t v9 = MEMORY[0x263EF8708];
  if (v8 != MEMORY[0x263EF8708])
  {
    BOOL v10 = 0;
    goto LABEL_3;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25E30]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  *(_OWORD *)unint64_t v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  int64_t v37 = v32.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(object);
  xpc_object_t v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26158]);
  xpc_object_t objecta = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
  *(_OWORD *)xpc_object_t v34 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  int64_t v35 = v32.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(objecta);
  xpc_object_t v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26220]);
  xpc_object_t objectb = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t objectb = xpc_null_create();
  }
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(string.__r_.__value_.__l.__data_);
  }
  std::string string = v32;
  xpc_release(objectb);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x263F25F80]))
    {
      if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x263F25F38]))
      {
        if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x263F25F30]))
        {
          size_t v22 = (char *)*MEMORY[0x263F25E48];
          if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x263F25E48]))
          {
            size_t v22 = (char *)*MEMORY[0x263F25E98];
            if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x263F25E98]))
            {
              size_t v22 = (char *)*MEMORY[0x263F25E90];
              uint64_t v23 = (const char *)v36;
              xpc_object_t v24 = (const char *)v36;
LABEL_56:
              if (strcasecmp(v24, v22))
              {
                size_t v22 = (char *)*MEMORY[0x263F25DD0];
                if (strcasecmp(v23, (const char *)*MEMORY[0x263F25DD0]))
                {
                  BOOL v10 = 0;
                  goto LABEL_3;
                }
              }
              goto LABEL_74;
            }
          }
          goto LABEL_74;
        }
LABEL_64:
        BOOL v27 = prop::systemlogs::get((char *)v34, (uint64_t)&string);
        goto LABEL_69;
      }
      goto LABEL_60;
    }
LABEL_59:
    BOOL v27 = prop::compression::get((char *)v34, (uint64_t)&string);
LABEL_69:
    BOOL v10 = v27;
    goto LABEL_3;
  }
  uint64_t v23 = v36[0];
  if (!strcasecmp(v36[0], (const char *)*MEMORY[0x263F25F80])) {
    goto LABEL_59;
  }
  if (strcasecmp(v36[0], (const char *)*MEMORY[0x263F25F38]))
  {
    if (strcasecmp(v36[0], (const char *)*MEMORY[0x263F25F30]))
    {
      size_t v22 = (char *)*MEMORY[0x263F25E48];
      if (strcasecmp(v36[0], (const char *)*MEMORY[0x263F25E48]))
      {
        size_t v22 = (char *)*MEMORY[0x263F25E98];
        if (strcasecmp(v36[0], (const char *)*MEMORY[0x263F25E98]))
        {
          size_t v22 = (char *)*MEMORY[0x263F25E90];
          xpc_object_t v24 = v36[0];
          goto LABEL_56;
        }
      }
LABEL_74:
      std::string::basic_string[abi:ne180100]<0>(&__p, v22);
      BOOL v10 = prop::get((char *)&__p, (char *)v34, (uint64_t)&string);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_3;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v35 >= 0) {
    int v25 = v34;
  }
  else {
    int v25 = (void **)v34[0];
  }
  xpc_object_t v26 = (TapToRadar *)strcasecmp((const char *)v25, (const char *)*MEMORY[0x263F25E28]);
  if (v26)
  {
    BOOL v27 = prop::ttr::get((char *)v34, (uint64_t)&string);
    goto LABEL_69;
  }
  int Mode = TapToRadar::getMode(v26);
  util::to_str<int>(Mode, &__p);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(string.__r_.__value_.__l.__data_);
  }
  std::string string = __p;
  BOOL v10 = 1;
LABEL_3:
  if (MEMORY[0x263E6A240](*a3) != v9) {
    goto LABEL_22;
  }
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_) {
      goto LABEL_22;
    }
    p_std::string string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&string.__r_.__value_.__s + 23)) {
      goto LABEL_22;
    }
    p_std::string string = &string;
  }
  xpc_object_t v15 = xpc_string_create((const char *)p_string);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x263F26220], v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
LABEL_22:
  if (!v10)
  {
    *a4 = -534716416;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
LABEL_33:
    if (SHIBYTE(v35) < 0) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  size_t v17 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *a4 = 0;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  uint64_t v18 = v36;
  if (v37 < 0) {
    uint64_t v18 = (char **)v36[0];
  }
  long long v19 = v34;
  if (v35 < 0) {
    long long v19 = (void **)v34[0];
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
  uint64_t v20 = &string;
  if ((string.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v20 = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"get";
  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
  unint64_t v39 = v19;
  __int16 v40 = 2080;
  size_t v41 = v20;
  _os_log_impl(&dword_26368A000, v17, OS_LOG_TYPE_DEFAULT, "#I Internal %s trace property: %s, %s = %s", (uint8_t *)&__p, 0x2Au);
  *a4 = 0;
  if ((SHIBYTE(string.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_37:
  operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
LABEL_38:
    operator delete(v34[0]);
    if (SHIBYTE(v37) < 0) {
      goto LABEL_39;
    }
    return v10;
  }
LABEL_34:
  if (SHIBYTE(v37) < 0) {
LABEL_39:
  }
    operator delete(v36[0]);
  return v10;
}

void sub_26374EA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a20);
  if ((a32 & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(a27);
  goto LABEL_7;
}

void LogTracker::getLoggingConfig(xpc_object_t *a1@<X8>)
{
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_2637A8360;
  strcpy(v21.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/ABMHelper.framework/");
  uint64_t v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "com.apple.commcenter.logconfig");
  uint64_t v4 = std::string::append(&v21, v3, 0x1EuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (config::hw::watch((config::hw *)v4))
  {
    strcpy(__s, ".watchos");
    unsigned int v6 = 8;
  }
  else
  {
    strcpy(__s, ".ios");
    unsigned int v6 = 4;
  }
  char v20 = v6;
  long long v7 = std::string::append(&v22, __s, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v23, ".plist", 6uLL);
  BOOL v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type size = v9->__r_.__value_.__l.__size_;
  std::string::size_type v12 = v9->__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    operator delete(v3);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v12 & 0x8000000000000000) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    std::string::__init_copy_ctor_external(&v18, v10, size);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  operator delete(v3);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
LABEL_8:
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v18.__r_.__value_.__l.__size_ = size;
  v18.__r_.__value_.__r.__words[2] = v12;
LABEL_15:
  util::readPlistToCFDictionary((uint64_t)&v18, &v22);
  xpc_object_t v14 = (void *)v22.__r_.__value_.__r.__words[0];
  if (!v22.__r_.__value_.__r.__words[0]
    || (CFTypeID v15 = CFGetTypeID(v22.__r_.__value_.__l.__data_), v15 != CFDictionaryGetTypeID()))
  {
    xpc_object_t v14 = 0;
    v23.__r_.__value_.__r.__words[0] = 0;
    xpc_object_t v16 = (const void *)v22.__r_.__value_.__r.__words[0];
    if (!v22.__r_.__value_.__r.__words[0]) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  CFRetain(v14);
  xpc_object_t v16 = (const void *)v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0]) {
LABEL_20:
  }
    CFRelease(v16);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::cf_to_xpc((uint64_t *)&v22, (ctu *)v14, v13);
  size_t v17 = (void *)v22.__r_.__value_.__r.__words[0];
  *a1 = (xpc_object_t)v22.__r_.__value_.__r.__words[0];
  if (v17 && MEMORY[0x263E6A240](v17) == MEMORY[0x263EF8708]) {
    xpc_retain(v17);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_release(v22.__r_.__value_.__l.__data_);
  if (v14) {
    CFRelease(v14);
  }
  if ((v12 & 0x8000000000000000) != 0) {
    operator delete(v10);
  }
}

void sub_26374EE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v34 < 0) {
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::checkLoggingVersion_sync(NSObject **this)
{
  v64[3] = *MEMORY[0x263EF8340];
  if (!capabilities::trace::allowed((capabilities::trace *)this)) {
    return;
  }
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  LogTracker::getLoggingConfig(&xdict);
  int v61 = 0;
  memset(&v60, 0, sizeof(v60));
  size_t v2 = (const void *)*MEMORY[0x263F25E90];
  size_t v3 = strlen((const char *)*MEMORY[0x263F25E90]);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (long long *)operator new(v6 + 1);
    *((void *)&__dst + 1) = v4;
    v64[0] = v7 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v64[0]) = v3;
  p_dst = &__dst;
  if (v3) {
LABEL_9:
  }
    memmove(p_dst, v2, v4);
  *((unsigned char *)p_dst + v4) = 0;
  long long v8 = (const void *)*MEMORY[0x263F263C8];
  size_t v9 = strlen((const char *)*MEMORY[0x263F263C8]);
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    size_t v11 = operator new(v12 + 1);
    __p[1] = v10;
    unint64_t v59 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v59) = v9;
  size_t v11 = __p;
  if (v9) {
LABEL_17:
  }
    memmove(v11, v8, (size_t)v10);
  *((unsigned char *)v10 + (void)v11) = 0;
  BOOL v14 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
    {
LABEL_20:
      if (v14) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  if (v14)
  {
LABEL_21:
    util::convert<int>(&v60, &v61, 0);
    xpc_object_t value = xpc_dictionary_get_value(xdict, "LoggingConfigVersion");
    *(void *)&long long __dst = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)&long long __dst = xpc_null_create();
    }
    int v18 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_release((xpc_object_t)__dst);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
      int v57 = 0;
      size_t v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_30:
        size_t v20 = v19;
        if (v19 >= 0x17)
        {
          uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v22 = v19 | 7;
          }
          uint64_t v23 = v22 + 1;
          std::string v21 = (long long *)operator new(v22 + 1);
          *((void *)&__dst + 1) = v20;
          v64[0] = v23 | 0x8000000000000000;
          *(void *)&long long __dst = v21;
        }
        else
        {
          HIBYTE(v64[0]) = v19;
          std::string v21 = &__dst;
          if (!v19)
          {
LABEL_37:
            *((unsigned char *)v21 + v20) = 0;
            xpc_object_t v24 = (const char *)*MEMORY[0x263F262E0];
            size_t v25 = strlen((const char *)*MEMORY[0x263F262E0]);
            if (v25 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            xpc_object_t v26 = (void *)v25;
            if (v25 >= 0x17)
            {
              uint64_t v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17) {
                uint64_t v28 = v25 | 7;
              }
              uint64_t v29 = v28 + 1;
              BOOL v27 = operator new(v28 + 1);
              __p[1] = v26;
              unint64_t v59 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v59) = v25;
              BOOL v27 = __p;
              if (!v25)
              {
LABEL_45:
                *((unsigned char *)v26 + (void)v27) = 0;
                BOOL v30 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
                if (SHIBYTE(v59) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                  {
LABEL_47:
                    if (v30)
                    {
LABEL_48:
                      long long v31 = (capabilities::radio *)util::convert<int>(&v60, &v57, 0);
                      int v32 = capabilities::radio::product(v31);
                      uint64_t v33 = this[11];
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                      {
                        *(void *)&long long __dst = __PAIR64__(v61, 67109888);
                        WORD4(__dst) = 1024;
                        *(_DWORD *)((char *)&__dst + 10) = v18;
                        HIWORD(__dst) = 1024;
                        LODWORD(v64[0]) = v57;
                        WORD2(v64[0]) = 1024;
                        *(_DWORD *)((char *)v64 + 6) = v32;
                        _os_log_impl(&dword_26368A000, v33, OS_LOG_TYPE_DEFAULT, "#I Stored Logging Version: %d, Default Logging Version: %d, Stored Product ID: %d, Current Product ID: %d", (uint8_t *)&__dst, 0x1Au);
                      }
                      if (v61 < v18 || v57 != v32)
                      {
                        uint64_t v34 = this[11];
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__dst) = 0;
                          _os_log_impl(&dword_26368A000, v34, OS_LOG_TYPE_DEFAULT, "#I Updating Log Configuration", (uint8_t *)&__dst, 2u);
                        }
                        xpc_object_t object = xdict;
                        if (xdict) {
                          xpc_retain(xdict);
                        }
                        else {
                          xpc_object_t object = xpc_null_create();
                        }
                        v55[23] = 13;
                        strcpy(v55, "Not Specified");
                        LogTracker::updateLoggingSettings_sync(this, 2, (std::string::size_type *)&object, (uint64_t)v55);
                        xpc_release(object);
                        xpc_object_t object = 0;
                        xpc_object_t v35 = xpc_dictionary_create(0, 0, 0);
                        if (v35 || (xpc_object_t v35 = xpc_null_create()) != 0)
                        {
                          if (MEMORY[0x263E6A240](v35) == MEMORY[0x263EF8708])
                          {
                            xpc_retain(v35);
                            xpc_object_t v36 = v35;
                          }
                          else
                          {
                            xpc_object_t v36 = xpc_null_create();
                          }
                        }
                        else
                        {
                          xpc_object_t v36 = xpc_null_create();
                          xpc_object_t v35 = 0;
                        }
                        xpc_release(v35);
                        xpc_object_t v37 = xpc_string_create((const char *)v2);
                        if (!v37) {
                          xpc_object_t v37 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x263F25E30], v37);
                        xpc_object_t v38 = xpc_null_create();
                        xpc_release(v37);
                        xpc_release(v38);
                        xpc_object_t v39 = xpc_string_create((const char *)v8);
                        if (!v39) {
                          xpc_object_t v39 = xpc_null_create();
                        }
                        __int16 v40 = (const char *)*MEMORY[0x263F26158];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x263F26158], v39);
                        xpc_object_t v41 = xpc_null_create();
                        xpc_release(v39);
                        xpc_release(v41);
                        __p[0] = 0;
                        __p[1] = 0;
                        unint64_t v59 = 0;
                        std::to_string((std::string *)&__dst, v18);
                        *(_OWORD *)std::string __p = __dst;
                        unint64_t v59 = v64[0];
                        if (v64[0] >= 0) {
                          uint64_t v42 = __p;
                        }
                        else {
                          uint64_t v42 = (void **)__p[0];
                        }
                        xpc_object_t v43 = xpc_string_create((const char *)v42);
                        if (!v43) {
                          xpc_object_t v43 = xpc_null_create();
                        }
                        xpc_object_t v44 = (const char *)*MEMORY[0x263F26220];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x263F26220], v43);
                        xpc_object_t v45 = xpc_null_create();
                        xpc_release(v43);
                        xpc_release(v45);
                        if (SHIBYTE(v59) < 0) {
                          operator delete(__p[0]);
                        }
                        xpc_object_t v54 = v36;
                        if (v36) {
                          xpc_retain(v36);
                        }
                        else {
                          xpc_object_t v54 = xpc_null_create();
                        }
                        aBlock = 0;
                        LogTracker::setProperty_sync(this, &v54, (uint64_t *)&aBlock);
                        if (aBlock) {
                          _Block_release(aBlock);
                        }
                        xpc_release(v54);
                        xpc_object_t v54 = 0;
                        xpc_object_t v46 = xpc_string_create(v24);
                        if (!v46) {
                          xpc_object_t v46 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, v40, v46);
                        xpc_object_t v47 = xpc_null_create();
                        xpc_release(v46);
                        xpc_release(v47);
                        __p[0] = 0;
                        __p[1] = 0;
                        unint64_t v59 = 0;
                        std::to_string((std::string *)&__dst, v32);
                        *(_OWORD *)std::string __p = __dst;
                        unint64_t v59 = v64[0];
                        if (v64[0] >= 0) {
                          unint64_t v48 = __p;
                        }
                        else {
                          unint64_t v48 = (void **)__p[0];
                        }
                        xpc_object_t v49 = xpc_string_create((const char *)v48);
                        if (!v49) {
                          xpc_object_t v49 = xpc_null_create();
                        }
                        xpc_dictionary_set_value(v36, v44, v49);
                        xpc_object_t v50 = xpc_null_create();
                        xpc_release(v49);
                        xpc_release(v50);
                        if (SHIBYTE(v59) < 0) {
                          operator delete(__p[0]);
                        }
                        xpc_object_t v52 = v36;
                        if (v36) {
                          xpc_retain(v36);
                        }
                        else {
                          xpc_object_t v52 = xpc_null_create();
                        }
                        int v51 = 0;
                        LogTracker::setProperty_sync(this, &v52, (uint64_t *)&v51);
                        if (v51) {
                          _Block_release(v51);
                        }
                        xpc_release(v52);
                        xpc_object_t v52 = 0;
                        xpc_release(v36);
                      }
                      goto LABEL_101;
                    }
LABEL_60:
                    xpc_object_t v16 = this[11];
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__dst) = 0;
                      size_t v17 = "Failed to get stored Device ID";
                      goto LABEL_62;
                    }
                    goto LABEL_101;
                  }
                }
                else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
                operator delete((void *)__dst);
                if (v30) {
                  goto LABEL_48;
                }
                goto LABEL_60;
              }
            }
            memmove(v27, v24, (size_t)v26);
            goto LABEL_45;
          }
        }
        memmove(v21, v2, v20);
        goto LABEL_37;
      }
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v60.__r_.__value_.__s + 23) = 0;
      int v57 = 0;
      size_t v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_30;
      }
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_25:
  xpc_object_t v16 = this[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst) = 0;
    size_t v17 = "Failed to get stored version";
LABEL_62:
    _os_log_error_impl(&dword_26368A000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&__dst, 2u);
  }
LABEL_101:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  xpc_release(xdict);
}

void sub_26374F7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,xpc_object_t a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::updateLoggingSettings_sync(void *a1, int a2, std::string::size_type *a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x263E6A240](*a3);
  uint64_t v9 = MEMORY[0x263EF8708];
  if (v8 != MEMORY[0x263EF8708])
  {
    LogTracker::getLoggingConfig((xpc_object_t *)&v55.__r_.__value_.__l.__data_);
    std::string::size_type v10 = v55.__r_.__value_.__r.__words[0];
    xpc_object_t v11 = xpc_null_create();
    uint64_t v12 = (void *)*a3;
    *a3 = v10;
    xpc_release(v12);
    xpc_release(v11);
  }
  int v56 = a2;
  memset(&v55, 170, sizeof(v55));
  LogTracker::validateSelectedConfig_sync((uint64_t)a1, &v56, &v55);
  xpc_object_t v54 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v55;
  }
  else {
    uint64_t v13 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v51, &v54);
  xpc_object_t v14 = v54;
  applier[0] = MEMORY[0x263EF8330];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  applier[3] = &__block_descriptor_64_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = a1;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v53 = *(std::string *)a4;
  }
  xpc_dictionary_apply(v14, applier);
  if (!TelephonyUtilIsCarrierBuild() || (TelephonyUtilIsInternalBuild() & 1) != 0)
  {
LABEL_68:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  memset(&v51, 0, sizeof(v51));
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v15) == v9)
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  BOOL isDefaultCarrierProfileInstalled = LogTracker::isDefaultCarrierProfileInstalled(v17);
  int v19 = v56;
  if (v56 == 1 && isDefaultCarrierProfileInstalled)
  {
    std::string::__assign_external(&v51, (const std::string::value_type *)*MEMORY[0x263F20670]);
    std::string v21 = a1[11];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      uint64_t v22 = "#D Uninstall a profile";
      goto LABEL_76;
    }
LABEL_30:
    BOOL v27 = (std::__shared_weak_count *)a1[16];
    if (!v27) {
      goto LABEL_77;
    }
    goto LABEL_31;
  }
  BOOL v23 = LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)isDefaultCarrierProfileInstalled);
  char v24 = v19 != 2 || v23;
  if (v24) {
    goto LABEL_67;
  }
  xpc_object_t v25 = xpc_BOOL_create(1);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x263F206C0], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  std::string::__assign_external(&v51, (const std::string::value_type *)*MEMORY[0x263F20658]);
  std::string v21 = a1[11];
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_30;
  }
  *(_WORD *)std::string buf = 0;
  uint64_t v22 = "#D Install a profile";
LABEL_76:
  _os_log_debug_impl(&dword_26368A000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 2u);
  BOOL v27 = (std::__shared_weak_count *)a1[16];
  if (!v27) {
LABEL_77:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_31:
  uint64_t v28 = a1[15];
  uint64_t v29 = std::__shared_weak_count::lock(v27);
  if (!v29) {
    goto LABEL_77;
  }
  BOOL v30 = v29;
  p_shared_weak_owners = &v29->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v30);
  }
  memset(buf, 170, sizeof(buf));
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_45;
  aBlock[3] = &__block_descriptor_80_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  void aBlock[5] = v28;
  unint64_t v48 = v30;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v51;
  }
  int v32 = _Block_copy(aBlock);
  uint64_t v33 = a1[17];
  if (v33) {
    dispatch_retain(v33);
  }
  *(void *)std::string buf = v32;
  *(void *)&uint8_t buf[8] = v33;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v43);
  abm::HelperClient::create();
  uint64_t v34 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t v35 = xpc_string_create((const char *)*MEMORY[0x263F206F0]);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x263F20578], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v42 = v16;
  if (v16)
  {
    xpc_retain(v16);
    xpc_object_t v37 = *(void **)buf;
    if (!*(void *)buf) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  xpc_object_t v42 = xpc_null_create();
  xpc_object_t v37 = *(void **)buf;
  if (*(void *)buf) {
LABEL_48:
  }
    xpc_object_t v37 = _Block_copy(v37);
LABEL_49:
  __int16 v40 = v37;
  xpc_object_t v41 = *(NSObject **)&buf[8];
  if (*(void *)&buf[8]) {
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  }
  abm::HelperClient::perform();
  if (v41) {
    dispatch_release(v41);
  }
  if (v40) {
    _Block_release(v40);
  }
  xpc_release(v42);
  xpc_object_t v38 = (std::__shared_weak_count *)v46;
  if (v46 && !atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  std::__shared_weak_count::__release_weak(v30);
LABEL_67:
  xpc_release(v16);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_68;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
LABEL_69:
  }
    operator delete(v53.__r_.__value_.__l.__data_);
LABEL_70:
  xpc_release(v54);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_263750028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  std::__shared_weak_count::__release_weak(v49);
  xpc_release(v48);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  xpc_release(*(xpc_object_t *)(v50 - 120));
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  _Unwind_Resume(a1);
}

void LogTracker::setProperty_sync(void *a1, xpc_object_t *a2, uint64_t *a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    uint64_t v62 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v62 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v7) == MEMORY[0x263EF8708])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  uint64_t v62 = v8;
LABEL_9:
  xpc_release(v7);
  memset(&v61, 170, sizeof(v61));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25E30]);
  v60[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v60[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v60[0]);
  memset(v60, 170, sizeof(v60));
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26158]);
  object[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F26220]);
  xpc_object_t v58 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v58 = xpc_null_create();
  }
  long long buf = 0uLL;
  unint64_t v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v58);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v57, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v61;
  }
  char isSupported = abm::trace::isSupported();
  char v13 = isSupported;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_23:
      LODWORD(v58) = -534716416;
      xpc_object_t v14 = *a2;
      xpc_object_t v51 = v14;
      if (v14)
      {
        xpc_retain(v14);
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v51 = v14;
      }
      BOOL isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)a1, &v51, &v62, &v58);
      xpc_release(v14);
      xpc_object_t v51 = 0;
      if (isInternalProperty_sync)
      {
        if (*a3) {
          dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a3, (unsigned int *)&v58, &v62);
        }
        goto LABEL_89;
      }
      if ((*(unsigned int (**)(void *))(*a1 + 88))(a1))
      {
        int v18 = prop::set((char *)&v61, (char *)v60, (char *)object);
        if (*a3)
        {
          if (v18) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = 3760250880;
          }
          xpc_object_t v20 = xpc_null_create();
          uint64_t v21 = *a3;
          *(void *)&long long buf = v20;
          xpc_object_t v22 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, long long *))(v21 + 16))(v21, v19, &buf);
          xpc_release((xpc_object_t)buf);
          xpc_release(v22);
        }
        goto LABEL_89;
      }
      xpc_object_t v38 = (const void *)*MEMORY[0x263F26740];
      size_t v39 = strlen((const char *)*MEMORY[0x263F26740]);
      if (v39 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v40 = v39;
      if (v39 >= 0x17)
      {
        uint64_t v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17) {
          uint64_t v42 = v39 | 7;
        }
        uint64_t v43 = v42 + 1;
        p_long long buf = (long long *)operator new(v42 + 1);
        *((void *)&buf + 1) = v40;
        unint64_t v64 = v43 | 0x8000000000000000;
        *(void *)&long long buf = p_buf;
      }
      else
      {
        HIBYTE(v64) = v39;
        p_long long buf = &buf;
        if (!v39) {
          goto LABEL_78;
        }
      }
      memmove(p_buf, v38, v40);
LABEL_78:
      *((unsigned char *)p_buf + v40) = 0;
      xpc_object_t v44 = *a2;
      xpc_object_t v50 = v44;
      if (v44)
      {
        xpc_retain(v44);
      }
      else
      {
        xpc_object_t v44 = xpc_null_create();
        xpc_object_t v50 = v44;
      }
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 3321888768;
      xpc_object_t v47[2] = ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
      v47[3] = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      unint64_t v45 = (void *)*a3;
      if (*a3) {
        unint64_t v45 = _Block_copy(v45);
      }
      unint64_t v48 = v45;
      unint64_t v46 = _Block_copy(v47);
      xpc_object_t v49 = v46;
      Service::runCommand((uint64_t)a1, (uint64_t)&buf, &v50, &v49);
      if (v46) {
        _Block_release(v46);
      }
      xpc_release(v44);
      xpc_object_t v50 = 0;
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)buf);
      }
      if (v48) {
        _Block_release(v48);
      }
      goto LABEL_89;
    }
  }
  else if (isSupported)
  {
    goto LABEL_23;
  }
  xpc_object_t v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v15 = *a2;
  xpc_object_t v56 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v56 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&buf, (xpc *)&v56, v16);
  BOOL v23 = (void *)buf;
  if (!(void)buf || (CFTypeID v24 = CFGetTypeID((CFTypeRef)buf), v24 != CFDictionaryGetTypeID()))
  {
    xpc_object_t v58 = 0;
    xpc_object_t v25 = (const void *)buf;
    if (!(void)buf) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  xpc_object_t v58 = v23;
  CFRetain(v23);
  xpc_object_t v25 = (const void *)buf;
  if ((void)buf) {
LABEL_44:
  }
    CFRelease(v25);
LABEL_45:
  xpc_release(v56);
  xpc_object_t v26 = (const void *)*MEMORY[0x263F26400];
  size_t v27 = strlen((const char *)*MEMORY[0x263F26400]);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    uint64_t v29 = (void **)operator new(v31 + 1);
    __dst[1] = v28;
    unint64_t v55 = v32 | 0x8000000000000000;
    __dst[0] = v29;
LABEL_53:
    memmove(v29, v26, (size_t)v28);
    *((unsigned char *)v28 + (void)v29) = 0;
    xpc_object_t v30 = v58;
    CFTypeRef cf = v58;
    if (!v58) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  HIBYTE(v55) = v27;
  uint64_t v29 = __dst;
  if (v27) {
    goto LABEL_53;
  }
  LOBYTE(__dst[0]) = 0;
  xpc_object_t v30 = v58;
  CFTypeRef cf = v58;
  if (v58) {
LABEL_54:
  }
    CFRetain(v30);
LABEL_55:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    uint64_t v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
LABEL_61:
      if (!*a3) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_61;
    }
  }
  xpc_object_t v37 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    xpc_object_t v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = v37;
  _os_log_debug_impl(&dword_26368A000, v33, OS_LOG_TYPE_DEBUG, "#D The property (%s) not supported in setting", (uint8_t *)&buf, 0xCu);
  if (!*a3) {
    goto LABEL_63;
  }
LABEL_62:
  xpc_object_t v34 = xpc_null_create();
  uint64_t v35 = *a3;
  *(void *)&long long buf = v34;
  xpc_object_t v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, long long *))(v35 + 16))(v35, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v36);
LABEL_63:
  if (v30) {
    CFRelease(v30);
  }
LABEL_89:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_94:
    operator delete(v60[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  operator delete(object[0]);
  if (SHIBYTE(v60[2]) < 0) {
    goto LABEL_94;
  }
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_95;
  }
LABEL_92:
  xpc_release(v62);
}

void sub_2637508BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void LogTracker::validateSelectedConfig_sync(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  xpc_object_t v6 = (const char *)abm::helper::asString();
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    a3->__r_.__value_.__l.__size_ = v8;
    a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_9:
    memmove(v9, v6, v8);
    *((unsigned char *)v9 + v8) = 0;
    if (*a2 != 5) {
      return;
    }
    goto LABEL_10;
  }
  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v7;
  uint64_t v9 = a3;
  if (v7) {
    goto LABEL_9;
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  if (*a2 != 5) {
    return;
  }
LABEL_10:
  *a2 = 2;
  uint64_t v12 = (const std::string::value_type *)abm::helper::asString();
  std::string::__assign_external(a3, v12);
  char v13 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v14 = 0;
    _os_log_impl(&dword_26368A000, v13, OS_LOG_TYPE_DEFAULT, "#I Update the logging config to Default as the requested logging config is not supported", v14, 2u);
  }
}

void sub_263750C94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (object)
  {
    xpc_object_t v6 = object;
    xpc_retain(object);
    goto LABEL_4;
  }
  xpc_object_t v6 = xpc_null_create();
  if (v6)
  {
LABEL_4:
    if (MEMORY[0x263E6A240](v6) == MEMORY[0x263EF8708])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
    goto LABEL_8;
  }
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v6 = 0;
LABEL_8:
  xpc_release(v6);
  applier[0] = MEMORY[0x263EF8330];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2;
  applier[3] = &__block_descriptor_72_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = v5;
  void applier[5] = a2;
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  xpc_dictionary_apply(v7, applier);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v7);
  return 1;
}

void sub_263750DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  xpc_object_t v6 = *(void **)(a1 + 32);
  xpc_object_t v7 = v6[11];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    xpc_object_t v24 = a3;
    if (a3) {
      xpc_retain(a3);
    }
    else {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&v24, (const object *)"", v20);
    if (v26 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315650;
    uint64_t v28 = v19;
    __int16 v29 = 2080;
    xpc_object_t v30 = a2;
    __int16 v31 = 2080;
    uint64_t v32 = v21;
    _os_log_debug_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEBUG, "#D tracename: %s, traceKey: %s, traceValue: %s", buf, 0x20u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    xpc_release(v24);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v8) == MEMORY[0x263EF8708])
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  xpc_object_t v10 = xpc_string_create(*(const char **)(a1 + 40));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F25E30], v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  xpc_object_t v12 = xpc_string_create(a2);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F26158], v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  if (a3) {
    xpc_retain(a3);
  }
  else {
    a3 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F26220], a3);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(a3);
  xpc_release(v14);
  xpc_object_t v15 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    xpc_object_t v15 = *(const char **)v15;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F26798], v16);
  xpc_object_t v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  aBlock = 0;
  LogTracker::setProperty_sync(v6, &object, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  return 1;
}

void sub_263751158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_45(uint64_t a1, int *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  size_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        int v9 = *a2;
        xpc_object_t v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            xpc_object_t v11 = (void *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0) {
              xpc_object_t v11 = (void *)*v11;
            }
            int v13 = 136315138;
            xpc_object_t v14 = v11;
            _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          xpc_object_t v12 = (void *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0) {
            xpc_object_t v12 = (void *)*v12;
          }
          int v13 = 136315138;
          xpc_object_t v14 = v12;
          _os_log_debug_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEBUG, "#D Succeeded to %s", (uint8_t *)&v13, 0xCu);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_263751454(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    size_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }
  else
  {
    size_t v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v5 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if (v4) {
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v3, &v5, a3);
  }
}

void GlobalService::getShutdownStages(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

uint64_t ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  size_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void *ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAAD78;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAAD78;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (size_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2637518A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_2637518C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAADB8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 120) = a2;
      *(void *)(a2 + 128) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 120) = a2;
  *(void *)(a2 + 128) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2637519F0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_263751A18(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAAD78;
  MEMORY[0x263E68AF0](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAAD78;
  MEMORY[0x263E68AF0](a1 + 1);
  size_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v175 = *MEMORY[0x263EF8340];
  size_t v2 = (uint64_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  LogTracker::checkLoggingVersion_sync((NSObject **)v3);
  dispatch_group_t v4 = dispatch_group_create();
  size_t v5 = *(NSObject **)(v3 + 176);
  *(void *)(v3 + 176) = v4;
  if (v5) {
    dispatch_release(v5);
  }
  dispatch_group_t v7 = dispatch_group_create();
  uint64_t v8 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v7;
  if (v8) {
    dispatch_release(v8);
  }
  *(unsigned char *)(v3 + 216) = 0;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], v6)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v9)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25EF0], v10))
  {
    memset(v170, 170, 16);
    GetABMLogServer(&v168);
    size_t v105 = v1;
    abm::HelperClient::create();
    xpc_object_t v11 = v169;
    if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      xpc_object_t v12 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
    }
    else
    {
      xpc_object_t v12 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
        aBlock[4] = v3;
        int v13 = v2[3];
        dispatch_object_t v165 = v13;
        if (v13)
        {
          dispatch_retain(v13);
          if (v165) {
            dispatch_group_enter(v165);
          }
        }
        uint64_t v166 = *(void *)v170;
        dispatch_object_t v167 = *(std::__shared_weak_count **)&v170[8];
        if (*(void *)&v170[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 1uLL, memory_order_relaxed);
        }
        xpc_object_t v14 = _Block_copy(aBlock);
        uint64_t v15 = *(NSObject **)(v3 + 136);
        if (v15) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 136));
        }
        xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
        if (v16 || (xpc_object_t v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x263E6A240](v16) == MEMORY[0x263EF8708])
          {
            xpc_retain(v16);
            xpc_object_t v17 = v16;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v17 = xpc_null_create();
          xpc_object_t v16 = 0;
        }
        xpc_release(v16);
        xpc_object_t v18 = xpc_int64_create(5000);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x263F20540], v18);
        xpc_object_t v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
        xpc_object_t v20 = (const void *)*MEMORY[0x263F25E28];
        size_t v21 = strlen((const char *)*MEMORY[0x263F25E28]);
        int v104 = v14;
        if (v21 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v22 = v21;
        if (v21 >= 0x17)
        {
          uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17) {
            uint64_t v24 = v21 | 7;
          }
          uint64_t v25 = v24 + 1;
          p_dst = (std::locale::__imp *)operator new(v24 + 1);
          size_t v147 = v22;
          unint64_t v148 = v25 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
        }
        else
        {
          HIBYTE(v148) = v21;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v21)
          {
LABEL_37:
            *((unsigned char *)p_dst + v22) = 0;
            memset(&buf, 0, sizeof(buf));
            int v26 = -1431655766;
            int v27 = -1431655766;
            if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0)) {
                int v27 = (int)__p;
              }
              else {
                int v27 = -1431655766;
              }
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v148) & 0x80000000) == 0) {
                goto LABEL_43;
              }
            }
            else if ((SHIBYTE(v148) & 0x80000000) == 0)
            {
              goto LABEL_43;
            }
            operator delete(__dst.__locale_);
LABEL_43:
            uint64_t v28 = (const void *)*MEMORY[0x263F25FE0];
            size_t v29 = strlen((const char *)*MEMORY[0x263F25FE0]);
            if (v29 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v30 = v29;
            if (v29 >= 0x17)
            {
              uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17) {
                uint64_t v32 = v29 | 7;
              }
              uint64_t v33 = v32 + 1;
              __int16 v31 = (std::locale::__imp *)operator new(v32 + 1);
              size_t v147 = v30;
              unint64_t v148 = v33 | 0x8000000000000000;
              __dst.__locale_ = v31;
            }
            else
            {
              HIBYTE(v148) = v29;
              __int16 v31 = (std::locale::__imp *)&__dst;
              if (!v29)
              {
LABEL_51:
                *((unsigned char *)v31 + v30) = 0;
                memset(&buf, 0, sizeof(buf));
                if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0)) {
                    int v26 = (int)__p;
                  }
                  else {
                    int v26 = -1431655766;
                  }
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v148) & 0x80000000) == 0)
                  {
LABEL_57:
                    if (v27 != 4)
                    {
LABEL_68:
                      xpc_object_t v161 = v17;
                      uint64_t v35 = v104;
                      if (v17)
                      {
                        xpc_retain(v17);
                        uint64_t v1 = v105;
                        if (v104) {
                          goto LABEL_70;
                        }
                      }
                      else
                      {
                        uint64_t v1 = v105;
                        xpc_object_t v161 = xpc_null_create();
                        if (v104)
                        {
LABEL_70:
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v104);
                          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                          if (!v15)
                          {
LABEL_72:
                            abm::HelperClient::perform();
                            if (buf.__r_.__value_.__l.__size_) {
                              dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
                            }
                            if (buf.__r_.__value_.__r.__words[0]) {
                              _Block_release(buf.__r_.__value_.__l.__data_);
                            }
                            xpc_release(v161);
                            xpc_object_t v161 = 0;
LABEL_100:
                            xpc_release(v17);
                            if (v15) {
                              dispatch_release(v15);
                            }
                            if (v35) {
                              _Block_release(v35);
                            }
                            size_t v39 = v167;
                            if (v167 && !atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                              std::__shared_weak_count::__release_weak(v39);
                            }
                            if (v165)
                            {
                              dispatch_group_leave(v165);
                              if (v165) {
                                dispatch_release(v165);
                              }
                            }
                            size_t v40 = *(std::__shared_weak_count **)&v170[8];
                            if (*(void *)&v170[8]
                              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                              std::__shared_weak_count::__release_weak(v40);
                            }
                            goto LABEL_113;
                          }
LABEL_71:
                          dispatch_retain(v15);
                          goto LABEL_72;
                        }
                      }
                      buf.__r_.__value_.__r.__words[0] = 0;
                      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
                      if (!v15) {
                        goto LABEL_72;
                      }
                      goto LABEL_71;
                    }
LABEL_63:
                    if (v26 != 1) {
                      goto LABEL_68;
                    }
                    xpc_object_t v34 = *(NSObject **)(v3 + 88);
                    uint64_t v35 = v104;
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_26368A000, v34, OS_LOG_TYPE_DEFAULT, "#N Cellular Logging was detected before initiating LogTracker. The service needs to be paused in boot-up.", (uint8_t *)&buf, 2u);
                    }
                    xpc_object_t v163 = v17;
                    if (v17) {
                      xpc_retain(v17);
                    }
                    else {
                      xpc_object_t v163 = xpc_null_create();
                    }
                    buf.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
                    buf.__r_.__value_.__l.__size_ = 3321888768;
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_90;
                    v155 = &__block_descriptor_72_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
                    uint64_t v156 = *(void *)v170;
                    xpc_object_t v157 = *(std::__shared_weak_count **)&v170[8];
                    uint64_t v1 = v105;
                    if (*(void *)&v170[8]) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v170[8] + 8), 1uLL, memory_order_relaxed);
                    }
                    xpc_object_t v158 = v17;
                    if (v17)
                    {
                      xpc_retain(v17);
                      if (v104) {
                        goto LABEL_85;
                      }
                    }
                    else
                    {
                      xpc_object_t v158 = xpc_null_create();
                      if (v104)
                      {
LABEL_85:
                        long long v159 = _Block_copy(v104);
                        dispatch_object_t v160 = v15;
                        if (!v15)
                        {
LABEL_87:
                          xpc_object_t v36 = _Block_copy(&buf);
                          xpc_object_t v37 = *(NSObject **)(v3 + 136);
                          if (v37) {
                            dispatch_retain(*(dispatch_object_t *)(v3 + 136));
                          }
                          xpc_object_t v161 = v36;
                          dispatch_object_t v162 = v37;
                          abm::HelperClient::perform();
                          if (v162) {
                            dispatch_release(v162);
                          }
                          if (v161) {
                            _Block_release(v161);
                          }
                          xpc_release(v163);
                          xpc_object_t v163 = 0;
                          if (v160) {
                            dispatch_release(v160);
                          }
                          if (v159) {
                            _Block_release(v159);
                          }
                          xpc_release(v158);
                          xpc_object_t v158 = 0;
                          xpc_object_t v38 = v157;
                          if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                            std::__shared_weak_count::__release_weak(v38);
                          }
                          goto LABEL_100;
                        }
LABEL_86:
                        dispatch_retain(v15);
                        goto LABEL_87;
                      }
                    }
                    long long v159 = 0;
                    dispatch_object_t v160 = v15;
                    if (!v15) {
                      goto LABEL_87;
                    }
                    goto LABEL_86;
                  }
                }
                else if ((SHIBYTE(v148) & 0x80000000) == 0)
                {
                  goto LABEL_57;
                }
                operator delete(__dst.__locale_);
                if (v27 != 4) {
                  goto LABEL_68;
                }
                goto LABEL_63;
              }
            }
            memmove(v31, v28, v30);
            goto LABEL_51;
          }
        }
        memmove(p_dst, v20, v22);
        goto LABEL_37;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I ABM is initializing; reinit traces in helper",
      (uint8_t *)&buf,
      2u);
    goto LABEL_12;
  }
LABEL_113:
  xpc_object_t v41 = (const char **)MEMORY[0x263F204D0];
  strlen((const char *)*MEMORY[0x263F204D0]);
  ctu::fs::create_directory();
  uint64_t v42 = (const char **)MEMORY[0x263F204E8];
  uint64_t v43 = (const void *)*MEMORY[0x263F204E8];
  size_t v44 = strlen((const char *)*MEMORY[0x263F204E8]);
  if (v44 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_236;
  }
  unint64_t v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v47 = v44 | 7;
    }
    uint64_t v48 = v47 + 1;
    unint64_t v46 = operator new(v47 + 1);
    v152[1] = v45;
    unint64_t v153 = v48 | 0x8000000000000000;
    v152[0] = v46;
    goto LABEL_120;
  }
  HIBYTE(v153) = v44;
  unint64_t v46 = v152;
  if (v44) {
LABEL_120:
  }
    memmove(v46, v43, (size_t)v45);
  *((unsigned char *)v45 + (void)v46) = 0;
  xpc_object_t v49 = *v41;
  size_t v50 = strlen(*v41);
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v53 = v50 | 7;
    }
    uint64_t v54 = v53 + 1;
    xpc_object_t v52 = operator new(v53 + 1);
    v150[1] = v51;
    unint64_t v151 = v54 | 0x8000000000000000;
    v150[0] = v52;
  }
  else
  {
    HIBYTE(v151) = v50;
    xpc_object_t v52 = v150;
    if (!v50) {
      goto LABEL_129;
    }
  }
  memmove(v52, v49, (size_t)v51);
LABEL_129:
  *((unsigned char *)v51 + (void)v52) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__dst, "[^\\.].*", 0);
  util::moveDirContent((std::string::size_type)v152, (uint64_t)v150, 1u, 1, (uint64_t)&__dst);
  unint64_t v55 = v149;
  if (!v149 || atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&__dst);
    if ((SHIBYTE(v151) & 0x80000000) == 0) {
      goto LABEL_132;
    }
LABEL_229:
    operator delete(v150[0]);
    if ((SHIBYTE(v153) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_230;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  std::locale::~locale(&__dst);
  if (SHIBYTE(v151) < 0) {
    goto LABEL_229;
  }
LABEL_132:
  if ((SHIBYTE(v153) & 0x80000000) == 0) {
    goto LABEL_133;
  }
LABEL_230:
  operator delete(v152[0]);
LABEL_133:
  strlen(*v42);
  ctu::fs::create_directory();
  xpc_object_t v56 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    std::string v57 = *v42;
    xpc_object_t v58 = *v41;
    *(_DWORD *)std::locale v170 = 136315394;
    *(void *)&v170[4] = v57;
    *(_WORD *)&v170[12] = 2080;
    *(void *)&v170[14] = v58;
    _os_log_impl(&dword_26368A000, v56, OS_LOG_TYPE_DEFAULT, "#I Moved %s/*/* -> %s/", v170, 0x16u);
  }
  unint64_t v59 = (const void *)*MEMORY[0x263F26488];
  size_t v60 = strlen((const char *)*MEMORY[0x263F26488]);
  if (v60 > 0x7FFFFFFFFFFFFFF7) {
LABEL_236:
  }
    std::string::__throw_length_error[abi:ne180100]();
  size_t v61 = v60;
  if (v60 >= 0x17)
  {
    uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17) {
      uint64_t v63 = v60 | 7;
    }
    uint64_t v64 = v63 + 1;
    p_p = operator new(v63 + 1);
    uint64_t v138 = v61;
    unint64_t v139 = v64 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_142;
  }
  HIBYTE(v139) = v60;
  p_p = &__p;
  if (v60) {
LABEL_142:
  }
    memmove(p_p, v59, v61);
  *((unsigned char *)p_p + v61) = 0;
  *(void *)std::locale v170 = MEMORY[0x263EF8330];
  *(void *)&v170[8] = 3321888768;
  *(void *)&v170[16] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_93;
  long long v171 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v172 = v3;
  uint64_t v173 = *v2;
  uint64_t v65 = (std::__shared_weak_count *)v2[1];
  xpc_object_t v174 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v66 = _Block_copy(v170);
  char v145 = v66;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v145);
  if (v66) {
    _Block_release(v66);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete(__p);
  }
  uint64_t v67 = (const void *)*MEMORY[0x263F26328];
  size_t v68 = strlen((const char *)*MEMORY[0x263F26328]);
  if (v68 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v69 = v68;
  if (v68 >= 0x17)
  {
    uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17) {
      uint64_t v71 = v68 | 7;
    }
    uint64_t v72 = v71 + 1;
    long long v70 = operator new(v71 + 1);
    uint64_t v130 = v69;
    unint64_t v131 = v72 | 0x8000000000000000;
    long long v129 = v70;
    goto LABEL_156;
  }
  HIBYTE(v131) = v68;
  long long v70 = &v129;
  if (v68) {
LABEL_156:
  }
    memmove(v70, v67, v69);
  *((unsigned char *)v70 + v69) = 0;
  std::string __p = (void *)MEMORY[0x263EF8330];
  uint64_t v138 = 3321888768;
  unint64_t v139 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_98;
  int v140 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v141 = v3;
  uint64_t v142 = *v2;
  long long v73 = (std::__shared_weak_count *)v2[1];
  uint64_t v143 = v73;
  if (v73) {
    atomic_fetch_add_explicit(&v73->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v74 = _Block_copy(&__p);
  long long v144 = v74;
  Service::registerCommandHandler(v3, (uint64_t)&v129, &v144);
  if (v74) {
    _Block_release(v74);
  }
  if (SHIBYTE(v131) < 0) {
    operator delete(v129);
  }
  long long v75 = (const void *)*MEMORY[0x263F261B0];
  size_t v76 = strlen((const char *)*MEMORY[0x263F261B0]);
  if (v76 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v77 = v76;
  if (v76 >= 0x17)
  {
    uint64_t v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17) {
      uint64_t v79 = v76 | 7;
    }
    uint64_t v80 = v79 + 1;
    unint64_t v78 = operator new(v79 + 1);
    uint64_t v122 = v77;
    unint64_t v123 = v80 | 0x8000000000000000;
    xpc_object_t v121 = v78;
    goto LABEL_170;
  }
  HIBYTE(v123) = v76;
  unint64_t v78 = &v121;
  if (v76) {
LABEL_170:
  }
    memmove(v78, v75, v77);
  *((unsigned char *)v78 + v77) = 0;
  long long v129 = (void *)MEMORY[0x263EF8330];
  uint64_t v130 = 3321888768;
  unint64_t v131 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  std::string::size_type v132 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v133 = v3;
  uint64_t v134 = *v2;
  char v81 = (std::__shared_weak_count *)v2[1];
  std::string::size_type v135 = v81;
  if (v81) {
    atomic_fetch_add_explicit(&v81->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v82 = _Block_copy(&v129);
  uint64_t v136 = v82;
  Service::registerCommandHandler(v3, (uint64_t)&v121, &v136);
  if (v82) {
    _Block_release(v82);
  }
  if (SHIBYTE(v123) < 0) {
    operator delete(v121);
  }
  uint64_t v83 = (const void *)*MEMORY[0x263F26330];
  size_t v84 = strlen((const char *)*MEMORY[0x263F26330]);
  if (v84 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v85 = v84;
  if (v84 >= 0x17)
  {
    uint64_t v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17) {
      uint64_t v87 = v84 | 7;
    }
    uint64_t v88 = v87 + 1;
    uint64_t v86 = operator new(v87 + 1);
    uint64_t v114 = v85;
    unint64_t v115 = v88 | 0x8000000000000000;
    BOOL v113 = v86;
    goto LABEL_184;
  }
  HIBYTE(v115) = v84;
  uint64_t v86 = &v113;
  if (v84) {
LABEL_184:
  }
    memmove(v86, v83, v85);
  *((unsigned char *)v86 + v85) = 0;
  xpc_object_t v121 = (void *)MEMORY[0x263EF8330];
  uint64_t v122 = 3321888768;
  unint64_t v123 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  xpc_object_t v124 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v125 = v3;
  uint64_t v126 = *v2;
  char v89 = (std::__shared_weak_count *)v2[1];
  unsigned int v127 = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v90 = _Block_copy(&v121);
  BOOL v128 = v90;
  Service::registerCommandHandler(v3, (uint64_t)&v113, &v128);
  if (v90) {
    _Block_release(v90);
  }
  if (SHIBYTE(v115) < 0) {
    operator delete(v113);
  }
  size_t v91 = (const void *)*MEMORY[0x263F26320];
  size_t v92 = strlen((const char *)*MEMORY[0x263F26320]);
  if (v92 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v93 = v92;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    int v94 = operator new(v95 + 1);
    uint64_t v107 = v93;
    unint64_t v108 = v96 | 0x8000000000000000;
    xpc_object_t v106 = v94;
    goto LABEL_198;
  }
  HIBYTE(v108) = v92;
  int v94 = &v106;
  if (v92) {
LABEL_198:
  }
    memmove(v94, v91, v93);
  *((unsigned char *)v94 + v93) = 0;
  BOOL v113 = (void *)MEMORY[0x263EF8330];
  uint64_t v114 = 3321888768;
  unint64_t v115 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  xpc_object_t v116 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  uint64_t v117 = v3;
  uint64_t v118 = *v2;
  xpc_object_t v97 = (std::__shared_weak_count *)v2[1];
  xpc_object_t v119 = v97;
  if (v97) {
    atomic_fetch_add_explicit(&v97->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v98 = _Block_copy(&v113);
  long long v120 = v98;
  Service::registerCommandHandler(v3, (uint64_t)&v106, &v120);
  if (v98) {
    _Block_release(v98);
  }
  if (SHIBYTE(v108) < 0) {
    operator delete(v106);
  }
  dispatch_get_global_queue(0, 0);
  xpc_object_t v106 = (void *)MEMORY[0x263EF8330];
  uint64_t v107 = 3321888768;
  unint64_t v108 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  unint64_t v109 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  uint64_t v110 = v3;
  uint64_t v111 = *v2;
  xpc_object_t v99 = (std::__shared_weak_count *)v2[1];
  uint64_t v112 = v99;
  if (v99) {
    atomic_fetch_add_explicit(&v99->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v3 + 200) = os_state_add_handler();
  if (v112) {
    std::__shared_weak_count::__release_weak(v112);
  }
  if (v119) {
    std::__shared_weak_count::__release_weak(v119);
  }
  if (v127) {
    std::__shared_weak_count::__release_weak(v127);
  }
  if (v135) {
    std::__shared_weak_count::__release_weak(v135);
  }
  if (v143) {
    std::__shared_weak_count::__release_weak(v143);
  }
  if (v174) {
    std::__shared_weak_count::__release_weak(v174);
  }
  xpc_object_t v100 = v2[3];
  if (v100)
  {
    dispatch_group_leave(v100);
    xpc_object_t v101 = v2[3];
    if (v101) {
      dispatch_release(v101);
    }
  }
  int v102 = (std::__shared_weak_count *)v2[1];
  if (v102) {
    std::__shared_weak_count::__release_weak(v102);
  }
  operator delete(v2);
  char v103 = (std::__shared_weak_count *)v1[2];
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
  operator delete(v1);
}

void sub_263752DA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v2 = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "#I Reinit traces complete", v2, 2u);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(void *a1, void *a2)
{
  dispatch_group_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    size_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(uint64_t a1)
{
  size_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  dispatch_group_leave(v3);
  dispatch_group_t v4 = *(NSObject **)(a1 + 40);
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_90(void *a1)
{
  size_t v2 = (void *)a1[6];
  xpc_object_t v7 = v2;
  if (!v2)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v3 = (void *)a1[7];
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v2);
  uint64_t v3 = (void *)a1[7];
  if (v3) {
LABEL_5:
  }
    uint64_t v3 = _Block_copy(v3);
LABEL_6:
  dispatch_group_t v4 = a1[8];
  aBlock = v3;
  xpc_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v7);
}

void sub_263753514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
}

void __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v5 = (void *)a2[6];
  a1[6] = v5;
  if (!v5)
  {
    a1[6] = xpc_null_create();
    uint64_t v6 = (void *)a2[7];
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_retain(v5);
  uint64_t v6 = (void *)a2[7];
  if (v6) {
LABEL_7:
  }
    uint64_t v6 = _Block_copy(v6);
LABEL_8:
  xpc_object_t v7 = a2[8];
  a1[7] = v6;
  a1[8] = v7;
  if (v7)
  {
    dispatch_retain(v7);
  }
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3) {
    _Block_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_93(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  xpc_object_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  void *v18 = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[1] = v7;
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_98(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  xpc_object_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  void *v18 = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[1] = v7;
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v21 = operator new(0x18uLL);
  *size_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      uint64_t v15 = a1[5];
      xpc_object_t v14 = (std::__shared_weak_count *)a1[6];
      if (!v14) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  int v13 = 0;
  uint64_t v15 = a1[5];
  xpc_object_t v14 = (std::__shared_weak_count *)a1[6];
  if (v14) {
LABEL_10:
  }
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
  xpc_object_t v16 = (std::__shared_weak_count *)v7[16];
  if (!v16 || (uint64_t v17 = v7[15], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  xpc_object_t v20 = operator new(0x28uLL);
  *xpc_object_t v20 = v11;
  xpc_object_t v21 = xpc_null_create();
  v20[1] = v7;
  void v20[2] = v13;
  void v20[3] = v15;
  v20[4] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v22 = v7[17];
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v23 = operator new(0x18uLL);
  void *v23 = v20;
  v23[1] = v17;
  v23[2] = v19;
  dispatch_async_f(v22, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  void *v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  *xpc_object_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(void *a1, xpc_object_t *a2, const void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return;
  }
  xpc_object_t v7 = (void *)a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  uint64_t v10 = a1[5];
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10) {
      return;
    }
  }
  xpc_object_t v11 = *a2;
  if (v11)
  {
    xpc_retain(v11);
    xpc_object_t v12 = *a3;
    if (*a3) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v12 = *a3;
    if (*a3)
    {
LABEL_9:
      int v13 = _Block_copy(v12);
      xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
      if (!v14) {
LABEL_18:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_13;
    }
  }
  int v13 = 0;
  xpc_object_t v14 = (std::__shared_weak_count *)v7[16];
  if (!v14) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v15 = v7[15];
  xpc_object_t v16 = std::__shared_weak_count::lock(v14);
  if (!v16) {
    goto LABEL_18;
  }
  uint64_t v17 = v16;
  xpc_object_t v18 = operator new(0x18uLL);
  void *v18 = v7;
  v18[1] = v11;
  xpc_object_t v19 = xpc_null_create();
  v18[2] = v13;
  xpc_object_t v20 = v7[17];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = operator new(0x18uLL);
  *xpc_object_t v21 = v18;
  v21[1] = v15;
  v21[2] = v17;
  dispatch_async_f(v20, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
}

uint64_t ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    size_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      xpc_object_t v7 = v6;
      uint64_t v8 = a1[5];
      if (v8 && *(_DWORD *)(a2 + 16) == 3)
      {
        v17[0] = MEMORY[0x263EF8330];
        v17[1] = 3321888768;
        v17[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
        void v17[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e5_v8__0l;
        v17[4] = v5;
        v17[5] = v8;
        int v9 = (std::__shared_weak_count *)a1[6];
        xpc_object_t v18 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = (std::__shared_weak_count *)v5[16];
        if (!v10 || (uint64_t v11 = v5[15], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        int v13 = v12;
        xpc_object_t v14 = v5[17];
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3321888768;
        block[2] = ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
        block[3] = &unk_270EAAFB0;
        void block[5] = v11;
        xpc_object_t v20 = v13;
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        void block[4] = v17;
        dispatch_async(v14, block);
        uint64_t v15 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1)
{
  size_t v22 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v23 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v20 = v11;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  xpc_object_t v21 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v2 = _Block_copy(aBlock);
  uint64_t v3 = *(NSObject **)(v11 + 136);
  if (v3) {
    dispatch_retain(*(dispatch_object_t *)(v11 + 136));
  }
  size_t v22 = v2;
  dispatch_object_t v23 = v3;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v15);
  abm::HelperClient::create();
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v5) == MEMORY[0x263EF8708])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1500);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x263F20540], v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v14 = v6;
  if (!v6)
  {
    xpc_object_t v14 = xpc_null_create();
    int v9 = v22;
    if (!v22) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  xpc_retain(v6);
  int v9 = v22;
  if (v22) {
LABEL_20:
  }
    int v9 = _Block_copy(v9);
LABEL_21:
  xpc_object_t v12 = v9;
  xpc_object_t object = v23;
  if (v23) {
    dispatch_retain(v23);
  }
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    _Block_release(v12);
  }
  xpc_release(v14);
  xpc_release(v6);
  uint64_t v10 = (std::__shared_weak_count *)v18;
  if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (v22) {
    _Block_release(v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
}

void sub_263754468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a11);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v24);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v25 - 48);
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7(void *a1, _DWORD *a2, xpc_object_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      uint64_t v10 = a1[5];
      if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v10) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10) {
          return;
        }
      }
      if (*a2 || MEMORY[0x263E6A240](*a3) != MEMORY[0x263EF8708]) {
        goto LABEL_13;
      }
      xpc_object_t value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x263F206F8]);
      xpc_object_t object = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      if ((v12 - 3) < 0xFFFFFFFE)
      {
LABEL_13:
        int v13 = (const void *)*MEMORY[0x263F263F8];
        size_t v14 = strlen((const char *)*MEMORY[0x263F263F8]);
        if (v14 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = (void *)v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          xpc_object_t v16 = (void **)operator new(v17 + 1);
          __dst[1] = v15;
          unint64_t v22 = v18 | 0x8000000000000000;
          __dst[0] = v16;
        }
        else
        {
          HIBYTE(v22) = v14;
          xpc_object_t v16 = __dst;
          if (!v14) {
            goto LABEL_21;
          }
        }
        memmove(v16, v13, (size_t)v15);
LABEL_21:
        *((unsigned char *)v15 + (void)v16) = 0;
        aBlock = 0;
        CFTypeRef cf = 0;
        Service::broadcastEvent(v7, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }
}

void sub_2637546EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v1 = a1;
  xpc_object_t object[3] = *(xpc_object_t *)MEMORY[0x263EF8340];
  size_t v2 = (xpc_object_t *)*a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v4) == MEMORY[0x263EF8708])
    {
      xpc_retain(v4);
      xpc_object_t v50 = v4;
    }
    else
    {
      xpc_object_t v50 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v50 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  memset(v55, 170, sizeof(v55));
  xpc_object_t v51 = v2;
  xpc_object_t value = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x263F260C8]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v53 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  xpc_object_t v6 = *(uint64_t **)(v3 + 152);
  uint64_t v7 = (uint64_t **)(v3 + 160);
  if (v6 == (uint64_t *)(v3 + 160)) {
    goto LABEL_44;
  }
  char v8 = 0;
  do
  {
    unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v9;
    long long v53 = v9;
    if (*((char *)v6 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v6 + 2);
      *(void *)&long long v53 = v6[6];
    }
    unint64_t v10 = v6[8];
    *((void *)&v53 + 1) = v6[7];
    unint64_t v54 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    if ((SBYTE7(v53) & 0x80u) == 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    if (SHIBYTE(v55[2]) >= 0) {
      int v12 = v55;
    }
    else {
      int v12 = (void **)v55[0];
    }
    int v13 = strcasecmp((const char *)v11, (const char *)v12);
    if (v13)
    {
      size_t v14 = (std::__shared_weak_count *)v54;
      if (!v54) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v15 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v12;
        _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "Failed to register: %s is already registered.", (uint8_t *)object, 0xCu);
        char v8 = 1;
        size_t v14 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_31;
        }
      }
      else
      {
        char v8 = 1;
        size_t v14 = (std::__shared_weak_count *)v54;
        if (!v54) {
          goto LABEL_31;
        }
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_31:
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
    if (!v13) {
      break;
    }
    xpc_object_t v16 = (uint64_t *)v6[1];
    if (v16)
    {
      do
      {
        uint64_t v17 = (uint64_t **)v16;
        xpc_object_t v16 = (uint64_t *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        uint64_t v17 = (uint64_t **)v6[2];
        BOOL v18 = *v17 == v6;
        xpc_object_t v6 = (uint64_t *)v17;
      }
      while (!v18);
    }
    xpc_object_t v6 = (uint64_t *)v17;
  }
  while (v17 != v7);
  if (v8)
  {
    uint64_t v19 = 3760250880;
    long long v20 = v51;
    goto LABEL_89;
  }
LABEL_44:
  xpc_object_t v21 = (std::__shared_weak_count *)operator new(0x28uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAAF68;
  unint64_t v22 = *(NSObject **)(v3 + 176);
  if (v22)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 176));
    dispatch_group_enter(v22);
  }
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v21[1].__shared_owners_ = (uint64_t)v22;
  if (v22)
  {
    dispatch_retain(v22);
    std::string::size_type shared_owners = v21[1].__shared_owners_;
    if (shared_owners) {
      dispatch_group_enter(shared_owners);
    }
    dispatch_group_leave(v22);
    dispatch_release(v22);
  }
  p_std::string::size_type shared_owners = &v21->__shared_owners_;
  uint64_t v24 = v1;
  uint64_t v25 = v3;
  int v26 = *v7;
  int v27 = (uint64_t **)(v3 + 160);
  if (*v7)
  {
    if (SHIBYTE(v55[2]) >= 0) {
      uint64_t v28 = v55;
    }
    else {
      uint64_t v28 = (void **)v55[0];
    }
    if (SHIBYTE(v55[2]) >= 0) {
      size_t v29 = (void *)HIBYTE(v55[2]);
    }
    else {
      size_t v29 = v55[1];
    }
    while (1)
    {
      int v27 = (uint64_t **)v26;
      uint64_t v32 = (uint64_t *)v26[4];
      size_t v30 = v26 + 4;
      __int16 v31 = v32;
      int v33 = *((char *)v30 + 23);
      if (v33 >= 0) {
        xpc_object_t v34 = v30;
      }
      else {
        xpc_object_t v34 = v31;
      }
      if (v33 >= 0) {
        size_t v35 = *((unsigned __int8 *)v30 + 23);
      }
      else {
        size_t v35 = v30[1];
      }
      if (v35 >= (unint64_t)v29) {
        size_t v36 = (size_t)v29;
      }
      else {
        size_t v36 = v35;
      }
      int v37 = memcmp(v28, v34, v36);
      if (v37)
      {
        if (v37 < 0) {
          goto LABEL_57;
        }
LABEL_71:
        int v38 = memcmp(v34, v28, v36);
        if (v38)
        {
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_83;
          }
        }
        else if (v35 >= (unint64_t)v29)
        {
LABEL_83:
          size_t v39 = (char *)v27;
          long long v20 = v51;
          uint64_t v1 = v24;
          goto LABEL_84;
        }
        int v26 = v27[1];
        if (!v26)
        {
          uint64_t v7 = v27 + 1;
          break;
        }
      }
      else
      {
        if ((unint64_t)v29 >= v35) {
          goto LABEL_71;
        }
LABEL_57:
        int v26 = *v27;
        uint64_t v7 = v27;
        if (!*v27) {
          break;
        }
      }
    }
  }
  size_t v39 = (char *)operator new(0x48uLL);
  size_t v40 = (std::string *)(v39 + 32);
  uint64_t v1 = v24;
  if (SHIBYTE(v55[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v40, (const std::string::value_type *)v55[0], (std::string::size_type)v55[1]);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)v55;
    *((void **)v39 + 6) = v55[2];
  }
  *((void *)v39 + 7) = 0;
  *((void *)v39 + 8) = 0;
  *(void *)size_t v39 = 0;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 2) = v27;
  std::__shared_weak_count *v7 = (uint64_t *)v39;
  uint64_t v41 = **(void **)(v25 + 152);
  uint64_t v42 = (uint64_t *)v39;
  if (v41)
  {
    *(void *)(v25 + 152) = v41;
    uint64_t v42 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 160), v42);
  ++*(void *)(v25 + 168);
  long long v20 = v51;
LABEL_84:
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v43 = (std::__shared_weak_count *)*((void *)v39 + 8);
  *((void *)v39 + 7) = v21 + 1;
  *((void *)v39 + 8) = v21;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_87:
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    goto LABEL_87;
  }
  uint64_t v19 = 0;
LABEL_89:
  xpc_object_t v44 = xpc_null_create();
  unint64_t v45 = (void (**)(xpc_object_t, uint64_t, void **))v20[2];
  __p[0] = v44;
  xpc_object_t v46 = xpc_null_create();
  v45[2](v45, v19, __p);
  xpc_release(__p[0]);
  xpc_release(v46);
  if (SHIBYTE(v55[2]) < 0) {
    operator delete(v55[0]);
  }
  xpc_release(v50);
  xpc_object_t v47 = v20[2];
  if (v47) {
    _Block_release(v47);
  }
  xpc_release(*v20);
  operator delete(v20);
  uint64_t v48 = (std::__shared_weak_count *)v1[2];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  operator delete(v1);
}

void sub_263754D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, atomic_ullong *a11, uint64_t a12, xpc_object_t object, xpc_object_t *a14, xpc_object_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,xpc_object_t a29)
{
  uint64_t v32 = v30;
  operator delete(v32);
  if (!atomic_fetch_add(a11, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_object_t v34 = a14[2];
  if (v34) {
    _Block_release(v34);
  }
  xpc_release(*a14);
  operator delete(a14);
  size_t v35 = (std::__shared_weak_count *)v29[2];
  if (v35)
  {
    if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_263754F34(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAAF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAAF68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::__on_zero_shared(uint64_t a1)
{
  size_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3) {
      dispatch_release(v3);
    }
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  __p[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  memset(v34, 170, sizeof(v34));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x263F260C8]);
  *(void *)xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  xpc_object_t v5 = *(void **)(v3 + 152);
  if (v5 != (void *)(v3 + 160))
  {
    if (SHIBYTE(v34[2]) >= 0) {
      xpc_object_t v6 = v34;
    }
    else {
      xpc_object_t v6 = (void **)v34[0];
    }
    while (1)
    {
      uint64_t v7 = *((char *)v5 + 55) >= 0 ? (const char *)(v5 + 4) : (const char *)v5[4];
      if (!strcasecmp(v7, (const char *)v6)) {
        break;
      }
      char v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          char v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          xpc_object_t v5 = v9;
        }
        while (!v10);
      }
      xpc_object_t v5 = v9;
      if (v9 == (void *)(v3 + 160)) {
        goto LABEL_19;
      }
    }
    uint64_t v15 = (void *)v5[7];
    size_t v14 = (std::__shared_weak_count *)v5[8];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v16 = (void *)*MEMORY[0x263F25E60];
    __p[0] = (void *)v2;
    __p[1] = v16;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, object);
    uint64_t v17 = *(void *)object;
    *(void *)xpc_object_t object = xpc_null_create();
    BOOL v18 = (void *)*v15;
    void *v15 = v17;
    xpc_release(v18);
    xpc_release(*(xpc_object_t *)object);
    uint64_t v19 = v15[1];
    v15[1] = 0;
    if (v19)
    {
      dispatch_group_leave(v19);
      dispatch_release(v19);
    }
    long long v20 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      int v26 = v34;
      if (SHIBYTE(v34[2]) < 0) {
        int v26 = (void **)v34[0];
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v26;
      _os_log_debug_impl(&dword_26368A000, v20, OS_LOG_TYPE_DEBUG, "#D Received log domain: %s", (uint8_t *)__p, 0xCu);
      long long v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_29;
      }
    }
    else if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
LABEL_29:
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 0;
      }
      goto LABEL_33;
    }
    int v27 = (char *)MEMORY[0x263E6A1A0](*v15);
    memset(__p, 170, 24);
    size_t v28 = strlen(v27);
    if (v28 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v29 = (void *)v28;
    if (v28 >= 0x17)
    {
      uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v31 = v28 | 7;
      }
      uint64_t v32 = v31 + 1;
      size_t v30 = operator new(v31 + 1);
      __p[1] = v29;
      xpc_object_t __p[2] = (void *)(v32 | 0x8000000000000000);
      __p[0] = v30;
    }
    else
    {
      HIBYTE(__p[2]) = v28;
      size_t v30 = __p;
      if (!v28) {
        goto LABEL_53;
      }
    }
    memcpy(v30, v27, (size_t)v29);
LABEL_53:
    *((unsigned char *)v29 + (void)v30) = 0;
    free(v27);
    int v33 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      int v33 = (void **)__p[0];
    }
    *(_DWORD *)xpc_object_t object = 136315138;
    *(void *)&xpc_object_t object[4] = v33;
    _os_log_debug_impl(&dword_26368A000, v20, OS_LOG_TYPE_DEBUG, "#D Received log summary: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v11 = 3760250880;
  int v12 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v13 = v34;
    if (SHIBYTE(v34[2]) < 0) {
      int v13 = (void **)v34[0];
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v13;
    _os_log_error_impl(&dword_26368A000, v12, OS_LOG_TYPE_ERROR, "Failed to find log summary domain with %s", (uint8_t *)__p, 0xCu);
  }
LABEL_33:
  xpc_object_t v21 = xpc_null_create();
  uint64_t v22 = *(void *)(v2 + 16);
  __p[0] = v21;
  xpc_object_t v23 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v22 + 16))(v22, v11, __p);
  xpc_release(__p[0]);
  xpc_release(v23);
  if ((SHIBYTE(v34[2]) & 0x80000000) == 0)
  {
    uint64_t v24 = *(const void **)(v2 + 16);
    if (!v24) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  operator delete(v34[0]);
  uint64_t v24 = *(const void **)(v2 + 16);
  if (v24) {
LABEL_37:
  }
    _Block_release(v24);
LABEL_38:
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  uint64_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(a1);
}

void sub_2637554BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  xpc_object_t v4 = _os_activity_create(&dword_26368A000, "Dump trace", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  memset(v48, 170, sizeof(v48));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x263F25ED8]);
  state.opaque[0] = (uint64_t)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    state.opaque[0] = (uint64_t)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v48, (xpc *)&state, (const object *)*MEMORY[0x263F26110], v6);
  xpc_release((xpc_object_t)state.opaque[0]);
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = (const char *)*MEMORY[0x263F263C0];
  xpc_object_t v8 = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x263F263C0]);
  state.opaque[0] = (uint64_t)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    state.opaque[0] = (uint64_t)xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)&state, (const object *)"", v9);
  xpc_release((xpc_object_t)state.opaque[0]);
  BOOL v10 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      uint64_t v11 = (void **)__p[0];
    }
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v11;
    _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Dumping log with Reason: \"%s\"", (uint8_t *)&state, 0xCu);
  }
  if (SHIBYTE(v48[2]) >= 0) {
    size_t v12 = HIBYTE(v48[2]);
  }
  else {
    size_t v12 = (size_t)v48[1];
  }
  if (v12 != strlen((const char *)*MEMORY[0x263F26510])
    || (SHIBYTE(v48[2]) >= 0 ? (int v13 = v48) : (int v13 = (void **)v48[0]),
        memcmp(v13, (const void *)*MEMORY[0x263F26510], v12)))
  {
    size_t v14 = *(NSObject **)v2;
    xpc_object_t v46 = v14;
    if (v14)
    {
      xpc_retain(v14);
      uint64_t v15 = *(const void **)(v2 + 16);
      if (v15)
      {
LABEL_21:
        xpc_object_t v16 = _Block_copy(v15);
LABEL_24:
        unint64_t v45 = v16;
        LogTracker::dumpLogInternal_sync(v3, (xpc_object_t *)&v46, &v45);
        if (v16) {
          _Block_release(v16);
        }
        xpc_release(v14);
        xpc_object_t v46 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      size_t v14 = xpc_null_create();
      xpc_object_t v46 = v14;
      uint64_t v15 = *(const void **)(v2 + 16);
      if (v15) {
        goto LABEL_21;
      }
    }
    xpc_object_t v16 = 0;
    goto LABEL_24;
  }
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x263F204F0]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)v2, v7, v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_null_create();
  uint64_t v27 = *(void *)(v2 + 16);
  state.opaque[0] = (uint64_t)v26;
  xpc_object_t v28 = xpc_null_create();
  (*(void (**)(uint64_t, void, os_activity_scope_state_s *))(v27 + 16))(v27, 0, &state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(v28);
  xpc_object_t v29 = *(xpc_object_t *)v2;
  unint64_t v45 = v29;
  xpc_object_t v46 = 0;
  if (v29)
  {
    xpc_retain(v29);
  }
  else
  {
    xpc_object_t v29 = xpc_null_create();
    unint64_t v45 = v29;
  }
  LogTracker::jsonSummary_sync((void *)v3, &v46, (xpc_object_t *)&v45);
  xpc_release(v29);
  unint64_t v45 = 0;
LABEL_27:
  if (!TelephonyUtilIsCarrierBuild()) {
    goto LABEL_70;
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)IsInternalBuild)) {
    goto LABEL_70;
  }
  state.opaque[0] = MEMORY[0x263EF8330];
  state.opaque[1] = 3321888768;
  xpc_object_t v50 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke;
  xpc_object_t v51 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  uint64_t v52 = v3;
  uint64_t v53 = *(void *)(v2 + 24);
  BOOL v18 = *(std::__shared_weak_count **)(v2 + 32);
  unint64_t v54 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = _Block_copy(&state);
  long long v20 = *(NSObject **)(v3 + 136);
  if (v20) {
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  }
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v41);
  abm::HelperClient::create();
  xpc_object_t v21 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v22) == MEMORY[0x263EF8708])
    {
      xpc_retain(v22);
      xpc_object_t v23 = v22;
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v22 = 0;
  }
  xpc_release(v22);
  xpc_object_t v30 = xpc_string_create((const char *)*MEMORY[0x263F206F0]);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x263F20578], v30);
  xpc_object_t v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  xpc_object_t v32 = xpc_BOOL_create(1);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x263F206C0], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v40 = v23;
  if (v23)
  {
    xpc_retain(v23);
    if (v19) {
      goto LABEL_55;
    }
LABEL_86:
    aBlock = 0;
    xpc_object_t object = v20;
    if (!v20) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  xpc_object_t v40 = xpc_null_create();
  if (!v19) {
    goto LABEL_86;
  }
LABEL_55:
  aBlock = _Block_copy(v19);
  xpc_object_t object = v20;
  if (v20) {
LABEL_56:
  }
    dispatch_retain(v20);
LABEL_57:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v40);
  xpc_release(v23);
  xpc_object_t v34 = (std::__shared_weak_count *)v44;
  if (v44 && !atomic_fetch_add((atomic_ullong *volatile)(v44 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
LABEL_70:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
LABEL_75:
    operator delete(v48[0]);
    if (!v4) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v48[2]) < 0) {
    goto LABEL_75;
  }
LABEL_72:
  if (v4) {
LABEL_76:
  }
    os_release(v4);
LABEL_77:
  size_t v35 = *(std::__shared_weak_count **)(v2 + 32);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  size_t v36 = *(const void **)(v2 + 16);
  if (v36) {
    _Block_release(v36);
  }
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  int v37 = (std::__shared_weak_count *)a1[2];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  operator delete(a1);
}

void sub_263755D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, dispatch_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,xpc_object_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      if (v9)
      {
        BOOL v10 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          if (v13 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v15 = v11;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed to install profile. Result: %s", buf, 0xCu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  xpc_object_t v4 = *(xpc_object_t *)(*a1 + 8);
  xpc_object_t v43 = v4;
  if (!v4)
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v43 = v4;
    uint64_t v5 = (void *)v2[2];
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  xpc_retain(v4);
  uint64_t v5 = (void *)v2[2];
  if (v5) {
LABEL_5:
  }
    uint64_t v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  LogTracker::setProperty_sync(v3, &v43, (uint64_t *)&aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(v4);
  xpc_object_t v43 = 0;
  memset(v41, 170, sizeof(v41));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F25E30]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v7 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F26158]);
  v39[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    v39[0] = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v39[0]);
  memset(v39, 170, sizeof(v39));
  xpc_object_t v8 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F26220]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(__p.__r_.__value_.__l.__data_);
  uint64_t v9 = (const void *)*MEMORY[0x263F25E90];
  size_t v10 = strlen((const char *)*MEMORY[0x263F25E90]);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v11 = v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_30;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10) {
LABEL_30:
  }
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (SHIBYTE(v41[2]) >= 0) {
    uint64_t v15 = v41;
  }
  else {
    uint64_t v15 = (void **)v41[0];
  }
  char v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &__dst;
  }
  else {
    uint64_t v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (strcasecmp((const char *)v15, (const char *)v17))
  {
    BOOL v19 = 0;
    if ((v16 & 0x80) == 0) {
      goto LABEL_39;
    }
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v19) {
      goto LABEL_75;
    }
    goto LABEL_60;
  }
  long long v20 = (const void *)*MEMORY[0x263F26458];
  size_t v21 = strlen((const char *)*MEMORY[0x263F26458]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v22;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_48;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v21;
  p_p = &__p;
  if (v21) {
LABEL_48:
  }
    memmove(p_p, v20, v22);
  p_p->__r_.__value_.__s.__data_[v22] = 0;
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v26 = object;
  }
  else {
    xpc_object_t v26 = (xpc_object_t *)object[0];
  }
  int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  xpc_object_t v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v29 = &__p;
  }
  else {
    xpc_object_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v19 = strcasecmp((const char *)v26, (const char *)v29) == 0;
  if (v27 < 0)
  {
    operator delete(v28);
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_59;
    }
  }
  else if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    goto LABEL_59;
  }
LABEL_39:
  if (!v19) {
    goto LABEL_75;
  }
LABEL_60:
  if (SHIBYTE(v39[2]) >= 0) {
    xpc_object_t v30 = v39;
  }
  else {
    xpc_object_t v30 = (xpc_object_t *)v39[0];
  }
  int v31 = abm::helper::asEnum((abm::helper *)v30, v18);
  xpc_object_t v32 = v3[11];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    size_t v36 = v39;
    if (SHIBYTE(v39[2]) < 0) {
      size_t v36 = (xpc_object_t *)v39[0];
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    _os_log_debug_impl(&dword_26368A000, v32, OS_LOG_TYPE_DEBUG, "#D Selected Config: %s", (uint8_t *)&__dst, 0xCu);
  }
  memset(&__p, 170, sizeof(__p));
  xpc_object_t v33 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F26798]);
  xpc_object_t v37 = v33;
  if (v33) {
    xpc_retain(v33);
  }
  else {
    xpc_object_t v37 = xpc_null_create();
  }
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v37);
  xpc_object_t v37 = xpc_null_create();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  LogTracker::updateLoggingSettings_sync(v3, v31, (std::string::size_type *)&v37, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v39[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v39[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(object[0]);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_78:
    xpc_object_t v34 = (const void *)v2[2];
    if (!v34) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v41[0]);
  xpc_object_t v34 = (const void *)v2[2];
  if (v34) {
LABEL_84:
  }
    _Block_release(v34);
LABEL_85:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  size_t v35 = (std::__shared_weak_count *)a1[2];
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  operator delete(a1);
}

void sub_263756748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *aBlock)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  int v38 = *(const void **)(v36 + 16);
  if (v38) {
    _Block_release(v38);
  }
  xpc_release(*(xpc_object_t *)(v36 + 8));
  operator delete((void *)v36);
  size_t v39 = (std::__shared_weak_count *)v35[2];
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_263756958(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)**a1;
  memset(&v44, 170, sizeof(v44));
  xpc_object_t value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F25E30]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  long long buf = 0uLL;
  xpc_object_t v46 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v5 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x263F26158]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  long long buf = 0uLL;
  xpc_object_t v46 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v44;
  }
  char isSupported = abm::trace::isSupported();
  char v7 = isSupported;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_12:
      unsigned int v41 = -534716416;
      xpc_object_t v40 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v40 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v40 = v9;
        if (!v9)
        {
          xpc_object_t v15 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_25;
        }
      }
      if (MEMORY[0x263E6A240](v9) == MEMORY[0x263EF8708])
      {
        xpc_retain(v9);
        goto LABEL_26;
      }
      xpc_object_t v15 = xpc_null_create();
LABEL_25:
      xpc_object_t v40 = v15;
LABEL_26:
      xpc_release(v9);
      char v16 = (void *)v2[1];
      xpc_object_t v39 = v16;
      if (v16)
      {
        xpc_retain(v16);
      }
      else
      {
        char v16 = xpc_null_create();
        xpc_object_t v39 = v16;
      }
      BOOL isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)v3, &v39, &v40, &v41);
      xpc_release(v16);
      xpc_object_t v39 = 0;
      if (isInternalProperty_sync)
      {
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v41, &v40);
LABEL_64:
        xpc_release(v40);
        goto LABEL_65;
      }
      if ((*(unsigned int (**)(void *))(*v3 + 88))(v3))
      {
        long long buf = 0uLL;
        xpc_object_t v46 = 0;
        BOOL v18 = prop::get((char *)&v44, (char *)object, (uint64_t)&buf);
        BOOL v19 = (void *)v2[1];
        __dst[0] = v19;
        if (v19)
        {
          xpc_retain(v19);
        }
        else
        {
          BOOL v19 = xpc_null_create();
          __dst[0] = v19;
        }
        if (SHIBYTE(v46) >= 0) {
          p_long long buf = (const char *)&buf;
        }
        else {
          p_long long buf = (const char *)buf;
        }
        xpc_object_t v28 = xpc_string_create(p_buf);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x263F26220], v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (v18) {
          int v30 = 0;
        }
        else {
          int v30 = -534716416;
        }
        LODWORD(v36) = v30;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, (unsigned int *)&v36, __dst);
        xpc_release(__dst[0]);
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)buf);
        }
        goto LABEL_64;
      }
      long long v20 = (const void *)*MEMORY[0x263F26730];
      size_t v21 = strlen((const char *)*MEMORY[0x263F26730]);
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v24 = v21 | 7;
        }
        uint64_t v25 = v24 + 1;
        xpc_object_t v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        unint64_t v38 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v38) = v21;
        xpc_object_t v23 = __dst;
        if (!v21) {
          goto LABEL_42;
        }
      }
      memmove(v23, v20, (size_t)v22);
LABEL_42:
      *((unsigned char *)v22 + (void)v23) = 0;
      xpc_object_t v26 = (void *)v2[1];
      xpc_object_t v36 = v26;
      if (v26)
      {
        xpc_retain(v26);
      }
      else
      {
        xpc_object_t v26 = xpc_null_create();
        xpc_object_t v36 = v26;
      }
      *(void *)&long long buf = MEMORY[0x263EF8330];
      *((void *)&buf + 1) = 3321888768;
      xpc_object_t v46 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke;
      xpc_object_t v47 = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      int v31 = (void *)v2[2];
      if (v31) {
        int v31 = _Block_copy(v31);
      }
      uint64_t v48 = v31;
      xpc_object_t v32 = _Block_copy(&buf);
      size_t v35 = v32;
      Service::runCommand((uint64_t)v3, (uint64_t)__dst, &v36, &v35);
      if (v32) {
        _Block_release(v32);
      }
      xpc_release(v26);
      xpc_object_t v36 = 0;
      if (SHIBYTE(v38) < 0) {
        operator delete(__dst[0]);
      }
      if (v48) {
        _Block_release(v48);
      }
      goto LABEL_64;
    }
  }
  else if (isSupported)
  {
    goto LABEL_12;
  }
  size_t v10 = v3[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v11 = &v44;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I The property (%s) not supported in getting", (uint8_t *)&buf, 0xCu);
  }
  xpc_object_t v12 = xpc_null_create();
  uint64_t v13 = (void *)v2[2];
  *(void *)&long long buf = v12;
  xpc_object_t v14 = xpc_null_create();
  ((void (*)(void *, uint64_t, long long *))v13[2])(v13, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v14);
LABEL_65:
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      xpc_object_t v33 = (void *)v2[2];
      if (!v33) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  xpc_object_t v33 = (void *)v2[2];
  if (v33) {
LABEL_71:
  }
    _Block_release(v33);
LABEL_72:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v34 = (std::__shared_weak_count *)a1[2];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  operator delete(a1);
}

void sub_263756F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(LogTracker ***)a1;
  LogTracker::finishInitialization_sync(**(LogTracker ***)a1);
  operator delete(v2);
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    xpc_object_t v4 = (void *)a1;
  }
  else
  {
    xpc_object_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_26375737C(_Unwind_Exception *a1)
{
  operator delete(v2);
  xpc_object_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *LogDumpDB::create_default_global(LogDumpDB *this)
{
  uint64_t v2 = operator new(0x30uLL);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 2), "com.apple.telephony.abm", "Log Dump History");
  *(void *)uint64_t v2 = &unk_270EA6450;
  v2[4] = 10;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  LogDumpDB::init((LogDumpDB *)v2);
  *(void *)this = v2;
  size_t result = operator new(0x20uLL);
  void *result = &unk_270EAAFF0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((void *)this + 1) = result;
  return result;
}

void sub_2637574A4(_Unwind_Exception *a1)
{
  *uint64_t v1 = v3;
  uint64_t v6 = v1[3];
  if (v6)
  {
    uint64_t v7 = v1[4];
    xpc_object_t v8 = (void *)v1[3];
    if (v7 != v6)
    {
      do
        ResetInfo::~ResetInfo((void **)(v7 - 112));
      while (v7 != v6);
      xpc_object_t v8 = *v4;
    }
    v1[4] = v6;
    operator delete(v8);
  }
  MEMORY[0x263E68B30](v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_26375752C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (!v1) {
    return;
  }
  *uint64_t v1 = &unk_270EA6450;
  uint64_t v2 = v1[3];
  if (v2)
  {
    uint64_t v3 = v1[4];
    xpc_object_t v4 = (void *)v1[3];
    if (v3 == v2)
    {
LABEL_17:
      v1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(v3 - 65) & 0x80000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if ((*(char *)(v3 - 65) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v3 - 89) < 0) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
LABEL_13:
      operator delete(*(void **)(v3 - 88));
      if (*(char *)(v3 - 89) < 0) {
LABEL_14:
      }
        operator delete(*(void **)(v3 - 112));
LABEL_5:
      v3 -= 112;
      if (v3 == v2)
      {
        xpc_object_t v4 = (void *)v1[3];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  MEMORY[0x263E68B30](v1 + 1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A8AAALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A8AAALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A8AAALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A8AAALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  if (v3[25])
  {
    os_state_remove_handler();
    v3[25] = 0;
  }
  xpc_object_t v4 = (std::__shared_weak_count *)v3[24];
  v3[23] = 0;
  v3[24] = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    xpc_object_t v5 = v2[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    xpc_object_t v5 = v2[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  dispatch_group_leave(v5);
  uint64_t v6 = v2[1];
  if (v6) {
    dispatch_release(v6);
  }
LABEL_9:
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    xpc_object_t v8 = a1;
  }
  else
  {
    xpc_object_t v8 = a1;
  }
  operator delete(v8);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)&value[1] = v2;
  uint64_t v3 = *(void **)v2;
  xpc_object_t v4 = _os_activity_create(&dword_26368A000, "Dump finished", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  state.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  state.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);
  xpc_object_t v5 = v3[11];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v2 + 8);
    LODWORD(state.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(state.__r_.__value_.__r.__words[0]) = v6;
    _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I Log dump has finished. The result: 0x%x", (uint8_t *)&state, 8u);
  }
  memset(__p, 170, sizeof(__p));
  uint64_t v7 = (const char *)*MEMORY[0x263F26030];
  xpc_object_t v8 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), (const char *)*MEMORY[0x263F26030]);
  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)__s1);
  Timestamp::asString((uint64_t)__s1, 0, 9, &state);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(state.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__s1, (void *)__s1[1]);
  xpc_release(v129.__r_.__value_.__l.__data_);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  uint64_t v11 = MEMORY[0x263EF8708];
  if (v9)
  {
    xpc_object_t xdict = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t xdict = v10;
    if (!v10)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x263E6A240](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_16;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_15:
  xpc_object_t xdict = v12;
LABEL_16:
  xpc_release(v10);
  uint64_t v13 = (const object **)MEMORY[0x263F204D0];
  xpc_object_t v14 = xpc_string_create((const char *)*MEMORY[0x263F204D0]);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_object_t v15 = (const char *)*MEMORY[0x263F26218];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F26218], v14);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v16);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v17 = __p;
  }
  else {
    uint64_t v17 = (void **)__p[0];
  }
  xpc_object_t v18 = xpc_string_create((const char *)v17);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, v7, v18);
  xpc_object_t v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  int v20 = *(_DWORD *)(v2 + 8);
  if (v20 == -534716414) {
    int v20 = -534716415;
  }
  LODWORD(state.__r_.__value_.__l.__data_) = v20;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(v2 + 24), (unsigned int *)&state, &xdict);
  xpc_object_t v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x263F25E70]);
  state.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  int v22 = xpc::dyn_cast_or_default((xpc *)&state, 0);
  xpc_release(state.__r_.__value_.__l.__data_);
  if (!v22)
  {
    memset(__s1, 170, 24);
    xpc_object_t v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x263F25ED8]);
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25) {
      xpc_retain(v25);
    }
    else {
      state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__s1, (xpc *)&state, (const object *)*MEMORY[0x263F26110], v26);
    xpc_release(state.__r_.__value_.__l.__data_);
    xpc_object_t v32 = (const void *)*MEMORY[0x263F26058];
    xpc_object_t v33 = (xpc_object_t)strlen((const char *)*MEMORY[0x263F26058]);
    xpc_object_t v34 = v33;
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v33 != (xpc_object_t)-1)
      {
        xpc_object_t v35 = __s1[1];
        if (__s1[1] >= v33) {
          xpc_object_t v37 = v33;
        }
        else {
          xpc_object_t v37 = __s1[1];
        }
        if (memcmp(__s1[0], v32, (size_t)v37)) {
          goto LABEL_58;
        }
        goto LABEL_55;
      }
    }
    else if (v33 != (xpc_object_t)-1)
    {
      xpc_object_t v35 = (xpc_object_t)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v33) {
        size_t v36 = (size_t)v33;
      }
      else {
        size_t v36 = HIBYTE(__s1[2]);
      }
      if (memcmp(__s1, v32, v36)) {
        goto LABEL_58;
      }
LABEL_55:
      if (v35 == v34)
      {
        unint64_t v38 = v3[11];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(state.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_26368A000, v38, OS_LOG_TYPE_DEFAULT, "#I Baseband Log collection will not trigger the post log collection", (uint8_t *)&state, 2u);
        }
        goto LABEL_221;
      }
LABEL_58:
      xpc_object_t v39 = xpc_null_create();
      if (MEMORY[0x263E6A240](*(void *)(v2 + 16)) != v11 || *(_DWORD *)(v2 + 8))
      {
        uint64_t v125 = v4;
        xpc_object_t v40 = *(xpc_object_t *)(v2 + 32);
        if (v40)
        {
          xpc_retain(*(xpc_object_t *)(v2 + 32));
        }
        else
        {
          xpc_object_t v40 = xpc_null_create();
          if (!v40)
          {
            xpc_object_t v123 = xpc_null_create();
            xpc_object_t v40 = 0;
            goto LABEL_69;
          }
        }
        if (MEMORY[0x263E6A240](v40) == v11)
        {
          xpc_retain(v40);
          xpc_object_t v123 = v40;
        }
        else
        {
          xpc_object_t v123 = xpc_null_create();
        }
LABEL_69:
        xpc_object_t v42 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v42);
        xpc_release(v40);
        xpc_object_t v43 = (const void *)*MEMORY[0x263F25E28];
        size_t v44 = strlen((const char *)*MEMORY[0x263F25E28]);
        xpc_object_t v124 = v1;
        if (v44 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v45 = v44;
        if (v44 >= 0x17)
        {
          uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17) {
            uint64_t v47 = v44 | 7;
          }
          uint64_t v48 = v47 + 1;
          xpc_object_t v46 = (std::string *)operator new(v47 + 1);
          v129.__r_.__value_.__l.__size_ = v45;
          v129.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v44;
          xpc_object_t v46 = &v129;
          if (!v44)
          {
LABEL_77:
            v46->__r_.__value_.__s.__data_[v45] = 0;
            memset(&state, 0, sizeof(state));
            if (prop::systemlogs::get((char *)&v129, (uint64_t)&state))
            {
              v132[0] = -1431655766;
              if (util::convert<int>(&state, v132, 0)) {
                uint64_t v49 = (const object *)v132[0];
              }
              else {
                uint64_t v49 = 0;
              }
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_85:
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v129.__r_.__value_.__l.__data_);
                }
                xpc_object_t v50 = (char *)*MEMORY[0x263F25F30];
                xpc_object_t v51 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x263F25F30]);
                state.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
                if (v51) {
                  xpc_retain(v51);
                }
                else {
                  state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                }
                value[0] = xpc::dyn_cast_or_default((xpc *)&state, v49);
                xpc_release(state.__r_.__value_.__l.__data_);
                if ((TelephonyUtilIsInternalBuild() & 1) == 0)
                {
                  char IsCarrierBuild = TelephonyUtilIsCarrierBuild();
                  char v53 = value[0] == 2 ? IsCarrierBuild : 1;
                  if ((v53 & 1) == 0)
                  {
                    unint64_t v54 = v3[11];
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(state.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl(&dword_26368A000, v54, OS_LOG_TYPE_ERROR, "Detected an internal log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&state, 2u);
                    }
                    value[0] = 0;
                  }
                }
                uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
                if ((IsInternalBuild & 1) != 0
                  || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild))
                {
                  uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
                }
                else
                {
                  uint64_t CompressionMode = 2;
                }
                std::string v57 = (const void *)*MEMORY[0x263F206F8];
                size_t v58 = strlen((const char *)*MEMORY[0x263F206F8]);
                if (v58 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                std::string::size_type v59 = v58;
                if (v58 >= 0x17)
                {
                  uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17) {
                    uint64_t v61 = v58 | 7;
                  }
                  uint64_t v62 = v61 + 1;
                  size_t v60 = (std::string *)operator new(v61 + 1);
                  v129.__r_.__value_.__l.__size_ = v59;
                  v129.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                  v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                }
                else
                {
                  *((unsigned char *)&v129.__r_.__value_.__s + 23) = v58;
                  size_t v60 = &v129;
                  if (!v58)
                  {
LABEL_110:
                    v60->__r_.__value_.__s.__data_[v59] = 0;
                    memset(&state, 0, sizeof(state));
                    if (prop::compression::get((char *)&v129, (uint64_t)&state))
                    {
                      v132[0] = -1431655766;
                      if (util::convert<int>(&state, v132, 0)) {
                        uint64_t CompressionMode = v132[0];
                      }
                      else {
                        uint64_t CompressionMode = CompressionMode;
                      }
                    }
                    if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(state.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_116:
                        uint64_t v63 = (const char **)MEMORY[0x263F26820];
                        key = v50;
                        if (value[0] == 2)
                        {
LABEL_117:
                          int v64 = 0;
                          BOOL v128 = 0;
                          char v65 = 1;
                          goto LABEL_140;
                        }
LABEL_120:
                        xpc_object_t v66 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), *v63);
                        state.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                        if (v66) {
                          xpc_retain(v66);
                        }
                        else {
                          state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        }
                        int v64 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)CompressionMode);
                        xpc_release(state.__r_.__value_.__l.__data_);
                        BOOL v128 = 0;
                        if (!v64)
                        {
                          char v65 = 1;
                          goto LABEL_140;
                        }
                        uint64_t v67 = (const void *)*MEMORY[0x263F205A8];
                        size_t v68 = strlen((const char *)*MEMORY[0x263F205A8]);
                        if (v68 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v69 = v68;
                        if (v68 >= 0x17)
                        {
                          uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v68 | 7) != 0x17) {
                            uint64_t v71 = v68 | 7;
                          }
                          uint64_t v72 = v71 + 1;
                          long long v70 = (std::string *)operator new(v71 + 1);
                          v129.__r_.__value_.__l.__size_ = v69;
                          v129.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                        }
                        else
                        {
                          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v68;
                          long long v70 = &v129;
                          if (!v68) {
                            goto LABEL_133;
                          }
                        }
                        memmove(v70, v67, v69);
LABEL_133:
                        v70->__r_.__value_.__s.__data_[v69] = 0;
                        memset(&state, 0, sizeof(state));
                        if (prop::compression::get((char *)&v129, (uint64_t)&state)) {
                          util::convert<BOOL>(&state, &v128, 0);
                        }
                        if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(state.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v129.__r_.__value_.__l.__data_);
                        }
                        char v65 = 0;
LABEL_140:
                        char v127 = 1;
                        long long v73 = (const char *)*MEMORY[0x263F26468];
                        size_t v74 = strlen((const char *)*MEMORY[0x263F26468]);
                        if (v74 > 0x7FFFFFFFFFFFFFF7) {
                          std::string::__throw_length_error[abi:ne180100]();
                        }
                        std::string::size_type v75 = v74;
                        if (v74 >= 0x17)
                        {
                          uint64_t v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v74 | 7) != 0x17) {
                            uint64_t v77 = v74 | 7;
                          }
                          uint64_t v78 = v77 + 1;
                          size_t v76 = (std::string *)operator new(v77 + 1);
                          v129.__r_.__value_.__l.__size_ = v75;
                          v129.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                          v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                        }
                        else
                        {
                          *((unsigned char *)&v129.__r_.__value_.__s + 23) = v74;
                          size_t v76 = &v129;
                          if (!v74)
                          {
LABEL_148:
                            v76->__r_.__value_.__s.__data_[v75] = 0;
                            memset(&state, 0, sizeof(state));
                            if (prop::systemlogs::get((char *)&v129, (uint64_t)&state)) {
                              util::convert<BOOL>(&state, (BOOL *)&v127, 0);
                            }
                            if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(state.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                goto LABEL_152;
                              }
                            }
                            else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_152;
                            }
                            operator delete(v129.__r_.__value_.__l.__data_);
LABEL_152:
                            xpc_object_t v79 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), v73);
                            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                            uint64_t v80 = v123;
                            if (v79) {
                              xpc_retain(v79);
                            }
                            else {
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                            }
                            char v127 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)v127);
                            xpc_release(state.__r_.__value_.__l.__data_);
                            xpc_object_t v121 = v73;
                            memset(&state, 170, sizeof(state));
                            char v81 = (const void *)*MEMORY[0x263F204D0];
                            size_t v82 = strlen((const char *)*MEMORY[0x263F204D0]);
                            if (v82 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            std::string::size_type v83 = v82;
                            int v84 = v64;
                            if (v82 >= 0x17)
                            {
                              uint64_t v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v82 | 7) != 0x17) {
                                uint64_t v86 = v82 | 7;
                              }
                              uint64_t v87 = v86 + 1;
                              p_std::string state = operator new(v86 + 1);
                              state.__r_.__value_.__l.__size_ = v83;
                              state.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)p_state;
                              xpc_object_t v4 = v125;
                            }
                            else
                            {
                              *((unsigned char *)&state.__r_.__value_.__s + 23) = v82;
                              p_std::string state = &state;
                              xpc_object_t v4 = v125;
                              if (!v82)
                              {
                                state.__r_.__value_.__s.__data_[0] = 0;
                                uint64_t v1 = v124;
                                if (v65) {
                                  goto LABEL_189;
                                }
                                goto LABEL_166;
                              }
                            }
                            memmove(p_state, v81, v83);
                            *((unsigned char *)p_state + v83) = 0;
                            uint64_t v1 = v124;
                            if (v65)
                            {
LABEL_189:
                              xpc_object_t v102 = xpc_int64_create(value[0]);
                              if (!v102) {
                                xpc_object_t v102 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, key, v102);
                              xpc_object_t v103 = xpc_null_create();
                              xpc_release(v102);
                              xpc_release(v103);
                              xpc_object_t v104 = xpc_int64_create(v84);
                              if (!v104) {
                                xpc_object_t v104 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x263F26820], v104);
                              xpc_object_t v105 = xpc_null_create();
                              xpc_release(v104);
                              xpc_release(v105);
                              xpc_object_t v106 = xpc_BOOL_create(v128);
                              if (!v106) {
                                xpc_object_t v106 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x263F266C0], v106);
                              xpc_object_t v107 = xpc_null_create();
                              xpc_release(v106);
                              xpc_release(v107);
                              if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                unint64_t v108 = &state;
                              }
                              else {
                                unint64_t v108 = (std::string *)state.__r_.__value_.__r.__words[0];
                              }
                              xpc_object_t v109 = xpc_string_create((const char *)v108);
                              if (!v109) {
                                xpc_object_t v109 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v15, v109);
                              xpc_object_t v110 = xpc_null_create();
                              xpc_release(v109);
                              xpc_release(v110);
                              if (SHIBYTE(__p[2]) >= 0) {
                                uint64_t v111 = __p;
                              }
                              else {
                                uint64_t v111 = (void **)__p[0];
                              }
                              xpc_object_t v112 = xpc_string_create((const char *)v111);
                              if (!v112) {
                                xpc_object_t v112 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v7, v112);
                              xpc_object_t v113 = xpc_null_create();
                              xpc_release(v112);
                              xpc_release(v113);
                              xpc_object_t v114 = xpc_BOOL_create(v127);
                              if (!v114) {
                                xpc_object_t v114 = xpc_null_create();
                              }
                              xpc_dictionary_set_value(v80, v121, v114);
                              xpc_object_t v115 = xpc_null_create();
                              xpc_release(v114);
                              xpc_release(v115);
                              ctu::fs::create_directory();
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(state.__r_.__value_.__l.__data_);
                              }
                              xpc_object_t v116 = v80;
                              goto LABEL_210;
                            }
LABEL_166:
                            if ((TelephonyUtilIsInternalBuild() & 1) != 0
                              || TelephonyUtilIsCarrierBuild())
                            {
                              long long v120 = v3;
                              uint64_t v88 = (const void *)*MEMORY[0x263F204E8];
                              size_t v89 = strlen((const char *)*MEMORY[0x263F204E8]);
                              int v90 = SHIBYTE(__p[2]);
                              if (SHIBYTE(__p[2]) >= 0) {
                                size_t v91 = HIBYTE(__p[2]);
                              }
                              else {
                                size_t v91 = (size_t)__p[1];
                              }
                              std::string::size_type v92 = v91 + v89;
                              memset(&v129, 170, sizeof(v129));
                              if (v91 + v89 > 0x7FFFFFFFFFFFFFF7) {
                                std::string::__throw_length_error[abi:ne180100]();
                              }
                              size_t v93 = v89;
                              if (v92 > 0x16)
                              {
                                uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v92 | 7) != 0x17) {
                                  uint64_t v95 = v92 | 7;
                                }
                                uint64_t v96 = v95 + 1;
                                int v94 = (std::string *)operator new(v95 + 1);
                                v129.__r_.__value_.__l.__size_ = v92;
                                v129.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                                v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                              }
                              else
                              {
                                memset(&v129, 0, sizeof(v129));
                                int v94 = &v129;
                                *((unsigned char *)&v129.__r_.__value_.__s + 23) = v91 + v89;
                              }
                              if (v93) {
                                memcpy(v94, v88, v93);
                              }
                              xpc_object_t v97 = (char *)v94 + v93;
                              if (v91)
                              {
                                if (v90 >= 0) {
                                  xpc_object_t v98 = __p;
                                }
                                else {
                                  xpc_object_t v98 = (void **)__p[0];
                                }
                                memmove(v97, v98, v91);
                              }
                              v97[v91] = 0;
                              uint64_t v1 = v124;
                              xpc_object_t v4 = v125;
                              xpc_object_t v99 = std::string::append(&v129, "/", 1uLL);
                              std::string::size_type v100 = v99->__r_.__value_.__r.__words[0];
                              *(void *)std::string::size_type v132 = v99->__r_.__value_.__l.__size_;
                              *(void *)((char *)&v132[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                            + 7);
                              char v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                              v99->__r_.__value_.__l.__size_ = 0;
                              v99->__r_.__value_.__r.__words[2] = 0;
                              v99->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(state.__r_.__value_.__l.__data_);
                              }
                              state.__r_.__value_.__r.__words[0] = v100;
                              state.__r_.__value_.__l.__size_ = *(void *)v132;
                              *(std::string::size_type *)((char *)&state.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v132[1] + 3);
                              *((unsigned char *)&state.__r_.__value_.__s + 23) = v101;
                              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v129.__r_.__value_.__l.__data_);
                              }
                              uint64_t v3 = v120;
                              uint64_t v80 = v123;
                            }
                            goto LABEL_189;
                          }
                        }
                        memmove(v76, v73, v75);
                        goto LABEL_148;
                      }
                    }
                    else if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_116;
                    }
                    operator delete(v129.__r_.__value_.__l.__data_);
                    uint64_t v63 = (const char **)MEMORY[0x263F26820];
                    key = v50;
                    if (value[0] == 2) {
                      goto LABEL_117;
                    }
                    goto LABEL_120;
                  }
                }
                memmove(v60, v57, v59);
                goto LABEL_110;
              }
            }
            else
            {
              uint64_t v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
            }
            operator delete(state.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_77;
      }
      xpc_object_t v41 = *(xpc_object_t *)(v2 + 16);
      if (v41)
      {
        xpc_retain(*(xpc_object_t *)(v2 + 16));
      }
      else
      {
        xpc_object_t v41 = xpc_null_create();
        if (!v41)
        {
          xpc_object_t v118 = xpc_null_create();
          xpc_object_t v41 = 0;
LABEL_238:
          xpc_object_t v119 = xpc_null_create();
          xpc_release(v39);
          xpc_release(v119);
          xpc_release(v41);
          xpc_object_t v116 = v118;
LABEL_210:
          if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116) {
              xpc_retain(v116);
            }
            else {
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            }
            LogTracker::postLogCollectionInternal_sync((uint64_t)v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          else
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116) {
              xpc_retain(v116);
            }
            else {
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            }
            LogTracker::postLogCollectionExternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          state.__r_.__value_.__r.__words[0] = 0;
          xpc_release(v116);
LABEL_221:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0) {
            goto LABEL_224;
          }
          xpc_object_t v31 = __s1[0];
          goto LABEL_223;
        }
      }
      if (MEMORY[0x263E6A240](v41) == v11)
      {
        xpc_retain(v41);
        xpc_object_t v118 = v41;
      }
      else
      {
        xpc_object_t v118 = xpc_null_create();
      }
      goto LABEL_238;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  memset(&state, 170, sizeof(state));
  xpc_object_t v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), v15);
  __s1[0] = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    __s1[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)&state, (xpc *)__s1, *v13, v24);
  xpc_release(__s1[0]);
  int v27 = ctu::fs::remove_dir();
  xpc_object_t v28 = v3[11];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v29 = "Failed";
    if (v27) {
      xpc_object_t v29 = "Succeeded";
    }
    int v30 = &state;
    if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v30 = (std::string *)state.__r_.__value_.__r.__words[0];
    }
    LODWORD(__s1[0]) = 136315394;
    *(xpc_object_t *)((char *)__s1 + 4) = (xpc_object_t)v29;
    WORD2(__s1[1]) = 2080;
    *(xpc_object_t *)((char *)&__s1[1] + 6) = v30;
    _os_log_impl(&dword_26368A000, v28, OS_LOG_TYPE_DEFAULT, "#I User requested to clear logs, %s to remove dump path: %s", (uint8_t *)__s1, 0x16u);
  }
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
  {
    xpc_object_t v31 = (xpc_object_t)state.__r_.__value_.__r.__words[0];
LABEL_223:
    operator delete(v31);
  }
LABEL_224:
  xpc_release(xdict);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_229;
    }
    goto LABEL_228;
  }
  operator delete(__p[0]);
  if (v4) {
LABEL_228:
  }
    os_release(v4);
LABEL_229:
  _ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&value[1]);
  uint64_t v117 = (std::__shared_weak_count *)v1[2];
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  operator delete(v1);
}

void sub_263758904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    uint64_t v3 = *(const void **)(v2 + 24);
    if (v3) {
      _Block_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()((uint64_t *)a1);
  if (a1)
  {
    xpc_release(*(xpc_object_t *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    uint64_t v2 = *(NSObject **)(a1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = *(NSObject **)(a1 + 16);
      if (v3) {
        dispatch_release(v3);
      }
    }
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)a1);
  }
}

void sub_263758F60(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 24));
    *(void *)(v1 + 24) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 16);
    if (v3)
    {
      dispatch_group_leave(v3);
      xpc_object_t v4 = *(NSObject **)(v1 + 16);
      if (v4) {
        dispatch_release(v4);
      }
    }
    xpc_object_t v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()(uint64_t *a1)
{
  uint64_t v169 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  xpc_object_t v5 = v4;
  uint64_t v6 = *a1;
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  memset(v164, 170, sizeof(v164));
  xpc_object_t v7 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F26030]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)v163);
  Timestamp::asString(v8, 0, 9, &applier);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(applier.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v163, (void *)v163[1]);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(v163, 170, sizeof(v163));
  xpc_object_t v9 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F25ED8]);
  applier.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    applier.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  xpc::dyn_cast_or_default(v163, (xpc *)&applier, (const object *)"", v10);
  xpc_release(applier.__r_.__value_.__l.__data_);
  memset(&object, 170, sizeof(object));
  uint64_t v11 = (const void *)*MEMORY[0x263F204C8];
  size_t v12 = strlen((const char *)*MEMORY[0x263F204C8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_std::string object = (std::string *)operator new(v15 + 1);
    object.__r_.__value_.__l.__size_ = v13;
    object.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)p_object;
    goto LABEL_22;
  }
  *((unsigned char *)&object.__r_.__value_.__s + 23) = v12;
  p_std::string object = &object;
  if (v12) {
LABEL_22:
  }
    memmove(p_object, v11, v13);
  p_object->__r_.__value_.__s.__data_[v13] = 0;
  if (v163[2] >= 0) {
    uint64_t v17 = (const char *)v163;
  }
  else {
    uint64_t v17 = (const char *)v163[0];
  }
  size_t v18 = strlen((const char *)*MEMORY[0x263F26510]);
  if (!strncasecmp((const char *)*MEMORY[0x263F26510], v17, v18)) {
    std::string::__assign_external(&object, (const std::string::value_type *)*MEMORY[0x263F204E0]);
  }
  xpc_object_t v19 = (const char **)MEMORY[0x263F204D0];
  int v20 = (const void *)*MEMORY[0x263F204D0];
  size_t v21 = strlen((const char *)*MEMORY[0x263F204D0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (std::string *)operator new(v24 + 1);
    __dst.__r_.__value_.__l.__size_ = v22;
    __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_35;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
  p_dst = &__dst;
  if (v21) {
LABEL_35:
  }
    memmove(p_dst, v20, v22);
  p_dst->__r_.__value_.__s.__data_[v22] = 0;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v26 = &object;
  }
  else {
    xpc_object_t v26 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = object.__r_.__value_.__l.__size_;
  }
  xpc_object_t v28 = std::string::append(&__dst, (const std::string::value_type *)v26, size);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v164[2]) >= 0) {
    int v30 = (const std::string::value_type *)v164;
  }
  else {
    int v30 = (const std::string::value_type *)v164[0];
  }
  if (SHIBYTE(v164[2]) >= 0) {
    std::string::size_type v31 = HIBYTE(v164[2]);
  }
  else {
    std::string::size_type v31 = (std::string::size_type)v164[1];
  }
  xpc_object_t v32 = std::string::append(&v160, v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  applier.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&applier.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v34 = (const void *)*MEMORY[0x263F20500];
  size_t v35 = strlen((const char *)*MEMORY[0x263F20500]);
  if (v35 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v36 = v35;
  if (v35 >= 0x17)
  {
    uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v38 = v35 | 7;
    }
    uint64_t v39 = v38 + 1;
    p_p = operator new(v38 + 1);
    size_t v157 = v36;
    int64_t v158 = v39 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_55;
  }
  HIBYTE(v158) = v35;
  p_p = &__p;
  if (v35) {
LABEL_55:
  }
    memmove(p_p, v34, v36);
  *((unsigned char *)p_p + v36) = 0;
  if (v158 >= 0) {
    xpc_object_t v40 = (const std::string::value_type *)&__p;
  }
  else {
    xpc_object_t v40 = (const std::string::value_type *)__p;
  }
  if (v158 >= 0) {
    std::string::size_type v41 = HIBYTE(v158);
  }
  else {
    std::string::size_type v41 = v157;
  }
  xpc_object_t v42 = std::string::append(&applier, v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v158) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(applier.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
LABEL_72:
      operator delete(v160.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_73:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_66;
    }
  }
  else if ((SHIBYTE(applier.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(applier.__r_.__value_.__l.__data_);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_72;
  }
LABEL_65:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_73;
  }
LABEL_66:
  xpc_object_t v44 = xpc_dictionary_create(0, 0, 0);
  uint64_t v45 = MEMORY[0x263EF8708];
  if (v44 || (xpc_object_t v44 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v44) == v45)
    {
      xpc_retain(v44);
      xpc_object_t v46 = v44;
    }
    else
    {
      xpc_object_t v46 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v46 = xpc_null_create();
    xpc_object_t v44 = 0;
  }
  xpc_release(v44);
  if (MEMORY[0x263E6A240](v46) == v45)
  {
    xpc_object_t v47 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F263C0]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    if (v47) {
      xpc_retain(v47);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v48);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v50 = xpc_string_create((const char *)p_applier);
    if (!v50) {
      xpc_object_t v50 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F263B8], v50);
    xpc_object_t v51 = xpc_null_create();
    xpc_release(v50);
    xpc_release(v51);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    xpc_release(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164[2]) >= 0) {
      uint64_t v52 = (const char *)v164;
    }
    else {
      uint64_t v52 = (const char *)v164[0];
    }
    xpc_object_t v53 = xpc_string_create(v52);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26210], v53);
    xpc_object_t v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    xpc_object_t v55 = xpc_string_create(*v19);
    if (!v55) {
      xpc_object_t v55 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26208], v55);
    xpc_object_t v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    if (v163[2] >= 0) {
      std::string v57 = (const char *)v163;
    }
    else {
      std::string v57 = (const char *)v163[0];
    }
    xpc_object_t v58 = xpc_string_create(v57);
    if (!v58) {
      xpc_object_t v58 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26450], v58);
    xpc_object_t v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    xpc_object_t v60 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F26150]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    if (v60) {
      xpc_retain(v60);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v61);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v62 = &applier;
    }
    else {
      uint64_t v62 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v63 = xpc_string_create((const char *)v62);
    if (!v63) {
      xpc_object_t v63 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F264F0], v63);
    xpc_object_t v64 = xpc_null_create();
    xpc_release(v63);
    xpc_release(v64);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    xpc_release(v160.__r_.__value_.__l.__data_);
    memset(&applier, 170, sizeof(applier));
    char v65 = (const char *)*MEMORY[0x263F26148];
    xpc_object_t v66 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F26148]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    if (v66) {
      xpc_retain(v66);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&applier, (xpc *)&v160, (const object *)"", v67);
    xpc_release(v160.__r_.__value_.__l.__data_);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v68 = &applier;
    }
    else {
      size_t v68 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    size_t v69 = strlen((const char *)*MEMORY[0x263F26178]);
    if (!strncasecmp((const char *)v68, (const char *)*MEMORY[0x263F26178], v69))
    {
      xpc_object_t v70 = xpc_dictionary_get_value((xpc_object_t)a1[3], v65);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      if (v70) {
        xpc_retain(v70);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v71);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v72 = &v160;
      }
      else {
        uint64_t v72 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v73 = xpc_string_create((const char *)v72);
      if (!v73) {
        xpc_object_t v73 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26448], v73);
      xpc_object_t v74 = xpc_null_create();
      xpc_release(v73);
      xpc_release(v74);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
      xpc_object_t v75 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F26368]);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      if (v75) {
        xpc_retain(v75);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v76);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v160;
      }
      else {
        uint64_t v77 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v78 = xpc_string_create((const char *)v77);
      if (!v78) {
        xpc_object_t v78 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26608], v78);
      xpc_object_t v79 = xpc_null_create();
      xpc_release(v78);
      xpc_release(v79);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
      xpc_object_t v80 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F26298]);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      if (v80) {
        xpc_retain(v80);
      }
      else {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::dyn_cast_or_default((uint64_t *)&v160, (xpc *)&__dst, (const object *)"", v81);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v82 = &v160;
      }
      else {
        size_t v82 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v83 = xpc_string_create((const char *)v82);
      if (!v83) {
        xpc_object_t v83 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26538], v83);
      xpc_object_t v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      xpc_release(__dst.__r_.__value_.__l.__data_);
    }
    xpc_object_t v85 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F262A0]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    if (v85) {
      xpc_retain(v85);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v86 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v87 = xpc_BOOL_create(v86);
    if (!v87) {
      xpc_object_t v87 = xpc_null_create();
    }
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F26440], v87);
    xpc_object_t v88 = xpc_null_create();
    xpc_release(v87);
    xpc_release(v88);
    xpc_release(v160.__r_.__value_.__l.__data_);
    xpc_object_t v89 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F262B8]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
    if (v89) {
      xpc_retain(v89);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v90 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v91 = xpc_BOOL_create(v90);
    if (!v91) {
      xpc_object_t v91 = xpc_null_create();
    }
    std::string::size_type v92 = (const char *)*MEMORY[0x263F263B0];
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F263B0], v91);
    xpc_object_t v93 = xpc_null_create();
    xpc_release(v91);
    xpc_release(v93);
    xpc_release(v160.__r_.__value_.__l.__data_);
    xpc_object_t v94 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x263F262B0]);
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
    if (v94) {
      xpc_retain(v94);
    }
    else {
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    char v95 = xpc::dyn_cast_or_default((xpc *)&v160, 0);
    xpc_object_t v96 = xpc_BOOL_create(v95);
    if (!v96) {
      xpc_object_t v96 = xpc_null_create();
    }
    xpc_object_t v97 = (const char *)*MEMORY[0x263F263A8];
    xpc_dictionary_set_value(v46, (const char *)*MEMORY[0x263F263A8], v96);
    xpc_object_t v98 = xpc_null_create();
    xpc_release(v96);
    xpc_release(v98);
    xpc_release(v160.__r_.__value_.__l.__data_);
    if (*(unsigned char *)(v3 + 216))
    {
      xpc_object_t v99 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v160.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_26368A000, v99, OS_LOG_TYPE_DEFAULT, "#I Setting SCD and COF flags due to problem reaching helper daemon during shutdown", (uint8_t *)&v160, 2u);
      }
      xpc_object_t v100 = xpc_BOOL_create(1);
      if (!v100) {
        xpc_object_t v100 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, v92, v100);
      xpc_object_t v101 = xpc_null_create();
      xpc_release(v100);
      xpc_release(v101);
      xpc_object_t v102 = xpc_BOOL_create(1);
      if (!v102) {
        xpc_object_t v102 = xpc_null_create();
      }
      xpc_dictionary_set_value(v46, v97, v102);
      xpc_object_t v103 = xpc_null_create();
      xpc_release(v102);
      xpc_release(v103);
    }
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
  }
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v104 = operator new(0x30uLL);
  v154 = v104;
  long long v155 = xmmword_2637A87A0;
  strcpy((char *)v104, "com.apple.AppleBasebandManager.data.plist");
  LogTracker::copyPreference(v3, &v154, &__p);
  operator delete(v104);
  xpc_object_t v105 = *(void **)(v3 + 152);
  if (v105 != (void *)(v3 + 160))
  {
    do
    {
      xpc_object_t v107 = (xpc_object_t *)v105[7];
      xpc_object_t v108 = *v107;
      if (*v107)
      {
        xpc_retain(*v107);
        xpc_object_t v109 = (const char *)(v105 + 4);
        if (*((char *)v105 + 55) < 0) {
          goto LABEL_189;
        }
      }
      else
      {
        xpc_object_t v108 = xpc_null_create();
        xpc_object_t v109 = (const char *)(v105 + 4);
        if (*((char *)v105 + 55) < 0) {
LABEL_189:
        }
          xpc_object_t v109 = *(const char **)v109;
      }
      xpc_dictionary_set_value(__p, v109, v108);
      xpc_object_t v110 = xpc_null_create();
      xpc_release(v108);
      xpc_release(v110);
      xpc_object_t v111 = xpc_null_create();
      xpc_object_t v112 = (void **)v105[7];
      xpc_object_t v113 = xpc_null_create();
      xpc_object_t v114 = *v112;
      std::__shared_weak_count *v112 = v111;
      xpc_release(v114);
      xpc_release(v113);
      xpc_object_t v115 = *(NSObject **)(v3 + 176);
      if (v115)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 176));
        dispatch_group_enter(v115);
      }
      uint64_t v116 = v105[7];
      uint64_t v117 = *(NSObject **)(v116 + 8);
      *(void *)(v116 + 8) = v115;
      if (v117)
      {
        dispatch_group_leave(v117);
        dispatch_release(v117);
      }
      xpc_object_t v118 = (void *)v105[1];
      if (v118)
      {
        do
        {
          xpc_object_t v119 = v118;
          xpc_object_t v118 = (void *)*v118;
        }
        while (v118);
      }
      else
      {
        do
        {
          xpc_object_t v119 = (void *)v105[2];
          BOOL v120 = *v119 == (void)v105;
          xpc_object_t v105 = v119;
        }
        while (!v120);
      }
      xpc_object_t v105 = v119;
    }
    while (v119 != (void *)(v3 + 160));
  }
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v160.__r_.__value_.__l.__size_ = (std::string::size_type)"HealthEventDB";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v160, &__dst);
  if (MEMORY[0x263E6A240](__dst.__r_.__value_.__r.__words[0]) == v45)
  {
    xpc_object_t v121 = xpc_dictionary_create(0, 0, 0);
    if (v121 || (xpc_object_t v121 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v121) == v45)
      {
        xpc_retain(v121);
        xpc_object_t v122 = v121;
      }
      else
      {
        xpc_object_t v122 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v122 = xpc_null_create();
      xpc_object_t v121 = 0;
    }
    xpc_release(v121);
    if (MEMORY[0x263E6A240](v122) == v45)
    {
      xpc_object_t v123 = (void *)__dst.__r_.__value_.__r.__words[0];
      applier.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      applier.__r_.__value_.__l.__size_ = 3321888768;
      applier.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL28purgeArraysWithinDictByLastXRKN3xpc4dictEj_block_invoke;
      uint64_t v166 = &__block_descriptor_44_e8_32c15_ZTSN3xpc4dictE_e13_B24__0r_8_v16l;
      xpc_object_t v167 = v122;
      if (v122) {
        xpc_retain(v122);
      }
      else {
        xpc_object_t v167 = xpc_null_create();
      }
      int v168 = 10;
      xpc_dictionary_apply(v123, &applier);
      xpc_object_t v124 = xpc_null_create();
      xpc_release(v167);
      xpc_object_t v167 = 0;
      xpc_object_t v106 = v122;
      xpc_object_t v122 = v124;
    }
    else
    {
      xpc_object_t v106 = xpc_null_create();
    }
    xpc_release(v122);
  }
  else
  {
    xpc_object_t v106 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, "HealthEventDB", v106);
  xpc_object_t v125 = xpc_null_create();
  xpc_release(v106);
  xpc_release(v125);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  if (v46)
  {
    xpc_retain(v46);
    xpc_object_t v126 = v46;
  }
  else
  {
    xpc_object_t v126 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x263F26160], v126);
  xpc_object_t v127 = xpc_null_create();
  xpc_release(v126);
  xpc_release(v127);
  LogTracker::getConfiguration((LogTracker *)v3, &value);
  xpc_object_t v128 = value;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x263F262F8], value);
  xpc_object_t v129 = xpc_null_create();
  xpc_object_t value = v129;
  xpc_release(v128);
  xpc_release(v129);
  xpc_object_t value = 0;
  uint64_t v130 = operator new(0x28uLL);
  char v150 = v130;
  long long v151 = xmmword_2637A87B0;
  strcpy((char *)v130, "com.apple.AppleBasebandManager.plist");
  LogTracker::copyPreference(v3, &v150, &v152);
  xpc_object_t v131 = v152;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x263F26568], v152);
  xpc_object_t v132 = xpc_null_create();
  xpc_object_t v152 = v132;
  xpc_release(v131);
  xpc_release(v132);
  xpc_object_t v152 = 0;
  operator delete(v130);
  uint64_t v133 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  std::string::size_type v134 = off_26A99F488;
  if (!off_26A99F488)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v160, v133);
    long long v135 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
    *(_OWORD *)&v160.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v136 = (std::__shared_weak_count *)*(&off_26A99F488 + 1);
    off_26A99F488 = v135;
    if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
    uint64_t v137 = (std::__shared_weak_count *)v160.__r_.__value_.__l.__size_;
    if (v160.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v160.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
    std::string::size_type v134 = off_26A99F488;
  }
  uint64_t v138 = (std::__shared_weak_count *)*(&off_26A99F488 + 1);
  __dst.__r_.__value_.__r.__words[0] = v134;
  __dst.__r_.__value_.__l.__size_ = *(&off_26A99F488 + 1);
  if (*(&off_26A99F488 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F488 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v134 + 80))(&applier, v134);
  if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v139 = &applier;
  }
  else {
    unint64_t v139 = (std::string *)applier.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v140 = xpc_string_create((const char *)v139);
  if (!v140) {
    xpc_object_t v140 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x263F26470], v140);
  xpc_object_t v141 = xpc_null_create();
  xpc_release(v140);
  xpc_release(v141);
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(applier.__r_.__value_.__l.__data_);
    if (!v138) {
      goto LABEL_226;
    }
  }
  else if (!v138)
  {
LABEL_226:
    uint64_t v142 = __p;
    xpc_object_t v149 = __p;
    if (__p) {
      goto LABEL_227;
    }
LABEL_230:
    xpc_object_t v149 = xpc_null_create();
    int v143 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_228;
    }
    goto LABEL_231;
  }
  if (atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_226;
  }
  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
  std::__shared_weak_count::__release_weak(v138);
  uint64_t v142 = __p;
  xpc_object_t v149 = __p;
  if (!__p) {
    goto LABEL_230;
  }
LABEL_227:
  xpc_retain(v142);
  int v143 = SHIBYTE(v161.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_228:
    std::string v148 = v161;
    goto LABEL_232;
  }
LABEL_231:
  std::string::__init_copy_ctor_external(&v148, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
LABEL_232:
  unsigned __int8 v144 = util::writeJSON();
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  xpc_release(v149);
  xpc_object_t v149 = 0;
  char v145 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
  {
    if (((MEMORY[0x263E6A240](__p) == v45) & v144) != 0) {
      uint64_t v146 = "Succeeded";
    }
    else {
      uint64_t v146 = "Failed";
    }
    size_t v147 = (std::string *)v161.__r_.__value_.__r.__words[0];
    if (v143 >= 0) {
      size_t v147 = &v161;
    }
    LODWORD(applier.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)applier.__r_.__value_.__r.__words + 4) = (std::string::size_type)v146;
    WORD2(applier.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&applier.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v147;
    _os_log_impl(&dword_26368A000, v145, OS_LOG_TYPE_DEFAULT, "#I %s to generate log summary: %s", (uint8_t *)&applier, 0x16u);
  }
  xpc_release(__p);
  xpc_release(v46);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_243;
    }
LABEL_247:
    operator delete(object.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v163[2]) & 0x80000000) == 0)
    {
LABEL_244:
      if ((SHIBYTE(v164[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_249:
      operator delete(v164[0]);
      return;
    }
    goto LABEL_248;
  }
  operator delete(v161.__r_.__value_.__l.__data_);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_247;
  }
LABEL_243:
  if ((SHIBYTE(v163[2]) & 0x80000000) == 0) {
    goto LABEL_244;
  }
LABEL_248:
  operator delete((void *)v163[0]);
  if (SHIBYTE(v164[2]) < 0) {
    goto LABEL_249;
  }
}

void sub_26375A3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,xpc_object_t object,uint64_t a31,int a32,__int16 a33,char a34,char a35,xpc_object_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,xpc_object_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZL28purgeArraysWithinDictByLastXRKN3xpc4dictEj_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  xpc_object_t v3 = a3;
  uint64_t v6 = MEMORY[0x263E6A240](a3);
  uint64_t v7 = MEMORY[0x263EF86D8];
  if (v6 == MEMORY[0x263EF86D8])
  {
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
      if (!v3)
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v3 = 0;
LABEL_13:
        xpc_release(v3);
        if (MEMORY[0x263E6A240](v9) == v7) {
          size_t count = xpc_array_get_count(v9);
        }
        else {
          size_t count = 0;
        }
        if (count < *(unsigned int *)(a1 + 40))
        {
LABEL_57:
          xpc_release(v9);
          return 1;
        }
        if (MEMORY[0x263E6A240](v9) == v7) {
          size_t v11 = xpc_array_get_count(v9);
        }
        else {
          size_t v11 = 0;
        }
        xpc_object_t v12 = xpc_array_create(0, 0);
        if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x263E6A240](v12) == v7)
          {
            xpc_retain(v12);
            xpc_object_t v13 = v12;
          }
          else
          {
            xpc_object_t v13 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v12 = 0;
        }
        xpc_release(v12);
        if (v9)
        {
          xpc_retain(v9);
          xpc_object_t v14 = v9;
        }
        else
        {
          xpc_object_t v14 = xpc_null_create();
          if (!v14)
          {
            xpc_object_t v14 = xpc_null_create();
            uint64_t v15 = 0;
            goto LABEL_30;
          }
        }
        xpc_retain(v14);
        uint64_t v15 = v14;
LABEL_30:
        int v27 = a2;
        xpc_release(v15);
        for (size_t i = 0; ; ++i)
        {
          if (v9)
          {
            xpc_retain(v9);
            xpc_object_t v18 = v9;
          }
          else
          {
            xpc_object_t v18 = xpc_null_create();
          }
          if (MEMORY[0x263E6A240](v9) == v7)
          {
            size_t v19 = xpc_array_get_count(v9);
            if (!v18)
            {
LABEL_40:
              xpc_object_t v20 = xpc_null_create();
              goto LABEL_41;
            }
          }
          else
          {
            size_t v19 = 0;
            if (!v18) {
              goto LABEL_40;
            }
          }
          xpc_retain(v18);
          xpc_object_t v20 = v18;
LABEL_41:
          xpc_release(v18);
          xpc_release(v20);
          if (i == v19 && v14 == v20)
          {
            xpc_release(v14);
            if (v13)
            {
              xpc_retain(v13);
              xpc_object_t v24 = v13;
            }
            else
            {
              xpc_object_t v24 = xpc_null_create();
            }
            xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), v27, v24);
            xpc_object_t v25 = xpc_null_create();
            xpc_release(v24);
            xpc_release(v25);
            xpc_release(v13);
            goto LABEL_57;
          }
          if (v11 <= *(unsigned int *)(a1 + 40))
          {
            xpc_object_t value = xpc_array_get_value(v14, i);
            xpc_object_t object = value;
            if (value) {
              xpc_retain(value);
            }
            else {
              xpc_object_t object = xpc_null_create();
            }
            int v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
            xpc_object_t v23 = xpc_int64_create(v22);
            if (!v23) {
              xpc_object_t v23 = xpc_null_create();
            }
            xpc_array_append_value(v13, v23);
            xpc_release(v23);
            xpc_release(object);
          }
          else
          {
            --v11;
          }
          if (v14)
          {
            xpc_retain(v14);
            xpc_object_t v17 = v14;
          }
          else
          {
            xpc_object_t v17 = xpc_null_create();
          }
          xpc_release(v17);
        }
      }
    }
    if (MEMORY[0x263E6A240](v3) == v7)
    {
      xpc_retain(v3);
      xpc_object_t v9 = v3;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
    goto LABEL_13;
  }
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), a2, v3);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v8);
  return 1;
}

void sub_26375ACF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(void *)(v2 + 72) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    xpc_object_t v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  uint64_t v16 = a1;
  xpc_object_t v3 = *(void **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25EF0], v5))
  {
    uint64_t v6 = v3[26];
    xpc_object_t v18 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    xpc_object_t v7 = *(xpc_object_t *)(a1 + 8);
    xpc_object_t v17 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v17 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v18, &v17);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  xpc_object_t v8 = v3[26];
  xpc_object_t v9 = v3[17];
  xpc_object_t v10 = operator new(0x40uLL);
  uint64_t v11 = *(void *)(a1 + 24);
  void *v10 = *(void *)(a1 + 16);
  v10[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v12 = *(void **)(a1 + 40);
  _DWORD v10[2] = *(void *)(a1 + 32);
  v10[3] = v12;
  if (v12)
  {
    xpc_retain(v12);
    uint64_t v13 = *(void *)(a1 + 56);
    void v10[4] = *(void *)(a1 + 48);
    void v10[5] = v13;
    if (!v13) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v10[3] = xpc_null_create();
  uint64_t v13 = *(void *)(a1 + 56);
  void v10[4] = *(void *)(a1 + 48);
  void v10[5] = v13;
  if (v13) {
LABEL_15:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
LABEL_16:
  xpc_object_t v14 = *(void **)(a1 + 72);
  v10[6] = *(void *)(a1 + 64);
  v10[7] = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    v10[7] = xpc_null_create();
  }
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v16);
}

void sub_26375AFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v4 = a1 + 8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  xpc_object_t v3 = *(void **)(v4 + 8);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  xpc_object_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    xpc_object_t v8 = (const void *)*MEMORY[0x263F265A8];
    size_t v9 = strlen((const char *)*MEMORY[0x263F265A8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v32 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v32) = v9;
      uint64_t v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v32) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
      }
    }
    else if (!v6)
    {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
    }
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 24), (const char *)*MEMORY[0x263F26820]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (uint64_t IsInternalBuild = TelephonyUtilIsCarrierBuild(), IsInternalBuild)) {
    uint64_t CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  }
  else {
    uint64_t CompressionMode = 2;
  }
  int v17 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)CompressionMode);
  xpc_release(object);
  if (v17)
  {
    xpc_object_t v18 = v3[26];
    xpc_object_t object = v18;
    if (v18)
    {
      dispatch_retain(v18);
      dispatch_group_enter(v18);
    }
    xpc_object_t v19 = *(xpc_object_t *)(a1 + 24);
    xpc_object_t v27 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v27 = v19;
    }
    LogTracker::archiveLogs_sync(v3, (NSObject **)&object, &v27);
    xpc_release(v19);
    xpc_object_t v27 = 0;
    if (v18)
    {
      dispatch_group_leave(v18);
      dispatch_release(v18);
    }
  }
  xpc_object_t v20 = v3[26];
  size_t v21 = v3[17];
  int v22 = operator new(0x20uLL);
  uint64_t v23 = *(void *)(a1 + 40);
  void *v22 = *(void *)(a1 + 32);
  v22[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v24 = *(void **)(a1 + 56);
  v22[2] = *(void *)(a1 + 48);
  v22[3] = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    v22[3] = xpc_null_create();
  }
  dispatch_group_notify_f(v20, v21, v22, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v26);
}

void sub_26375B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v20);
  if (v19)
  {
    dispatch_group_leave(v19);
    dispatch_release(v19);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 56));
    *(void *)(v2 + 56) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v3 = *((void *)v4 + 1);
  xpc_object_t v5 = (const char **)MEMORY[0x263F265A8];
  if (!v2)
  {
    char v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v2);
  char v7 = v6;
  if (!v6 || !*(void *)a1)
  {
LABEL_7:
    size_t v9 = *v5;
    size_t v10 = strlen(*v5);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v12 = (void **)operator new(v13 + 1);
      __dst[1] = v11;
      unint64_t v53 = v14 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v53) = v10;
      uint64_t v12 = __dst;
      if (!v10) {
        goto LABEL_15;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_15:
    *((unsigned char *)v11 + (void)v12) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v53) < 0)
    {
      operator delete(__dst[0]);
      if (!v7) {
        goto LABEL_80;
      }
    }
    else if (!v7)
    {
      goto LABEL_80;
    }
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_80;
    }
    char v8 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v8 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v8) {
    goto LABEL_80;
  }
LABEL_26:
  memset(v49, 170, sizeof(v49));
  uint64_t v15 = (const char *)*MEMORY[0x263F263C0];
  xpc_object_t value = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x263F263C0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default((uint64_t *)v49, (xpc *)object, (const object *)"", v17);
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  xpc_object_t v18 = (const char *)*MEMORY[0x263F26030];
  xpc_object_t v19 = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x263F26030]);
  xpc_object_t v47 = v19;
  if (v19) {
    xpc_retain(v19);
  }
  else {
    xpc_object_t v47 = xpc_null_create();
  }
  Timestamp::Timestamp((Timestamp *)&buf);
  Timestamp::asString(v20, 0, 9, __p);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((void **)&buf + 1));
  xpc_release(v47);
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v21) == MEMORY[0x263EF8708])
    {
      xpc_retain(v21);
      xpc_object_t v22 = v21;
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v21 = 0;
  }
  xpc_release(v21);
  if (SHIBYTE(object[2]) >= 0) {
    uint64_t v23 = object;
  }
  else {
    uint64_t v23 = (xpc_object_t *)object[0];
  }
  xpc_object_t v24 = xpc_string_create((const char *)v23);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, v18, v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (SHIBYTE(v49[2]) >= 0) {
    uint64_t v26 = v49;
  }
  else {
    uint64_t v26 = (void **)v49[0];
  }
  xpc_object_t v27 = xpc_string_create((const char *)v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, v15, v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  xpc_object_t v29 = xpc_string_create((const char *)*MEMORY[0x263F204D0]);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x263F26218], v29);
  xpc_object_t v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  std::string::size_type v31 = *v5;
  size_t v32 = strlen(*v5);
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v33 = (void *)v32;
  if (v32 >= 0x17)
  {
    uint64_t v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v36 = v32 | 7;
    }
    uint64_t v37 = v36 + 1;
    xpc_object_t v34 = operator new(v36 + 1);
    __p[1] = v33;
    unint64_t v46 = v37 | 0x8000000000000000;
    __p[0] = v34;
LABEL_60:
    memmove(v34, v31, (size_t)v33);
    *((unsigned char *)v33 + (void)v34) = 0;
    xpc_object_t v44 = v22;
    if (v22) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
  HIBYTE(v46) = v32;
  xpc_object_t v34 = __p;
  if (v32) {
    goto LABEL_60;
  }
  LOBYTE(__p[0]) = 0;
  xpc_object_t v44 = v22;
  if (v22)
  {
LABEL_56:
    xpc_retain(v22);
    goto LABEL_62;
  }
LABEL_61:
  xpc_object_t v44 = xpc_null_create();
LABEL_62:
  xpc::bridge((uint64_t *)&buf, (xpc *)&v44, v35);
  uint64_t v38 = (void *)buf;
  if ((void)buf && (CFTypeID v39 = CFGetTypeID((CFTypeRef)buf), v39 == CFDictionaryGetTypeID()))
  {
    xpc_object_t v47 = v38;
    CFRetain(v38);
  }
  else
  {
    xpc_object_t v47 = 0;
  }
  long long v43 = 0;
  Service::broadcastEvent(v3, (uint64_t)__p, (const void **)&v47, (const void **)&v43);
  if (v43) {
    _Block_release(v43);
  }
  if (v47) {
    CFRelease(v47);
  }
  if ((void)buf) {
    CFRelease((CFTypeRef)buf);
  }
  xpc_release(v44);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v40 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v41 = object;
    if (SHIBYTE(object[2]) < 0) {
      std::string::size_type v41 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v41;
    _os_log_impl(&dword_26368A000, v40, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&buf, 0xCu);
  }
  xpc_release(v22);
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v49[2]) & 0x80000000) == 0)
  {
    goto LABEL_80;
  }
  operator delete(v49[0]);
LABEL_80:
  xpc_release(*((xpc_object_t *)a1 + 3));
  *((void *)a1 + 3) = 0;
  xpc_object_t v42 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  operator delete(a1);
}

void sub_26375BA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, CFTypeRef cf, xpc_object_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,CFTypeRef a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v3) == MEMORY[0x263EF8708])
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke;
  aBlock[3] = &__block_descriptor_280_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  uint64_t v6 = *a1;
  xpc_object_t v5 = (std::__shared_weak_count *)a1[1];
  void aBlock[4] = v2;
  void aBlock[5] = v6;
  xpc_object_t v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (void *)a1[4];
  uint64_t v22 = a1[3];
  xpc_object_t v23 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&v24, (uint64_t)(a1 + 5));
  char v8 = _Block_copy(aBlock);
  size_t v9 = *(NSObject **)(v2 + 136);
  if (v9) {
    dispatch_retain(v9);
  }
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  GetABMLogServer(&v16);
  abm::HelperClient::create();
  size_t v10 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t v15 = v4;
    if (v4)
    {
LABEL_17:
      xpc_retain(v4);
      if (v8) {
        goto LABEL_18;
      }
      goto LABEL_40;
    }
  }
  else
  {
    xpc_object_t v15 = v4;
    if (v4) {
      goto LABEL_17;
    }
  }
  xpc_object_t v15 = xpc_null_create();
  if (v8)
  {
LABEL_18:
    uint64_t v13 = _Block_copy(v8);
    xpc_object_t object = v9;
    if (!v9) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_40:
  uint64_t v13 = 0;
  xpc_object_t object = v9;
  if (v9) {
LABEL_19:
  }
    dispatch_retain(v9);
LABEL_20:
  abm::HelperClient::perform();
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v15);
  uint64_t v11 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v29);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_release(v4);
  uint64_t v12 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)a1);
  operator delete(v12);
}

void sub_26375C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,xpc_object_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,xpc_object_t a35,uint64_t a36)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  xpc_release(a11);
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v39) {
    dispatch_release(v39);
  }
  if (v38) {
    _Block_release(v38);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&a36);
  xpc_release(a35);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_weak(a26);
  }
  xpc_release(a24);
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  xpc_release(v37);
  std::string::size_type v41 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(v36);
  operator delete(v41);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke(void *a1, unsigned int *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  xpc_object_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      char v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      uint64_t v9 = *a2;
      size_t v10 = *(NSObject **)(v5 + 88);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v9, (uint64_t)__p);
          int v17 = v19 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v21 = v17;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Unable to reach baseband tracing task (error: %s)", buf, 0xCu);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
        char v11 = 1;
      }
      else
      {
        BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        char v11 = 0;
        if (v12)
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully reached baseband tracing task", (uint8_t *)__p, 2u);
          char v11 = 0;
        }
      }
      *(unsigned char *)(v5 + 216) = v11;
      uint64_t v13 = *(NSObject **)(v5 + 208);
      uint64_t v14 = *(NSObject **)(v5 + 136);
      xpc_object_t v15 = operator new(0xE0uLL);
      uint64_t v16 = (void *)a1[8];
      void *v15 = a1[7];
      v15[1] = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        v15[1] = xpc_null_create();
      }
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(v15 + 2), (uint64_t)(a1 + 9));
      dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    }
  }
}

void sub_26375C354(_Unwind_Exception *a1)
{
  xpc_release(v1[1]);
  v1[1] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_26375C374(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[8] = xpc_null_create();
  }
  return LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
}

void sub_26375C3F8(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 + 64));
  *(void *)(v1 + 64) = 0;
  xpc_object_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(uint64_t a1)
{
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 136);
  xpc_release(*(xpc_object_t *)(a1 + 128));
  *(void *)(a1 + 128) = 0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  uint64_t v12 = a1;
  xpc_object_t v3 = *(void **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25E80], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F268F8], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x263F25EF0], v5))
  {
    uint64_t v6 = v3[26];
    uint64_t v14 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    xpc_object_t v7 = *(xpc_object_t *)(a1 + 8);
    xpc_object_t v13 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v13 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v14, &v13);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  uint64_t v8 = v3[26];
  uint64_t v9 = v3[17];
  size_t v10 = operator new(0xD0uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)v10, a1 + 16);
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_26375C5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v2 + 80);
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(void *)(v2 + 72) = 0;
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  xpc_object_t v3 = (void *)*((void *)v4 + 1);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x263F265A8];
    size_t v9 = strlen((const char *)*MEMORY[0x263F265A8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v30 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v30) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v30) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        goto LABEL_49;
      }
    }
    else if (!v6)
    {
      goto LABEL_49;
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_49;
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      goto LABEL_49;
    }
  }
  if (*((_DWORD *)a1 + 6) && !a1[28])
  {
    int v14 = a1[55];
    size_t v15 = v14 >= 0 ? a1[55] : *((void *)a1 + 5);
    if (v15 == strlen((const char *)*MEMORY[0x263F26230]))
    {
      uint64_t v16 = v14 >= 0 ? a1 + 32 : (char *)*((void *)a1 + 4);
      if (!memcmp(v16, (const void *)*MEMORY[0x263F26230], v15))
      {
        int v17 = v3[26];
        uint64_t v26 = v17;
        if (v17)
        {
          dispatch_retain(v17);
          dispatch_group_enter(v17);
        }
        xpc_object_t v18 = (xpc_object_t)*((void *)a1 + 7);
        xpc_object_t v25 = v18;
        if (v18)
        {
          xpc_retain(v18);
        }
        else
        {
          xpc_object_t v18 = xpc_null_create();
          xpc_object_t v25 = v18;
        }
        LogTracker::archiveLogs_sync(v3, &v26, &v25);
        xpc_release(v18);
        xpc_object_t v25 = 0;
        if (v17)
        {
          dispatch_group_leave(v17);
          dispatch_release(v17);
        }
      }
    }
  }
  char v19 = v3[26];
  uint64_t v20 = v3[17];
  xpc_object_t v21 = operator new(0x90uLL);
  uint64_t v22 = *((void *)a1 + 9);
  *xpc_object_t v21 = *((void *)a1 + 8);
  v21[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v23 = (void *)*((void *)a1 + 11);
  v21[2] = *((void *)a1 + 10);
  v21[3] = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    v21[3] = xpc_null_create();
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)(v21 + 4), (uint64_t)(a1 + 96));
  dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
LABEL_49:
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)(a1 + 64));
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((void *)a1 + 7) = 0;
  if (a1[55] < 0) {
    operator delete(*((void **)a1 + 4));
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete(a1);
}

void sub_26375C9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v21);
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19 + 64);
  xpc_release(*(xpc_object_t *)(v19 + 56));
  *(void *)(v19 + 56) = 0;
  if (*(char *)(v19 + 55) < 0)
  {
    operator delete(*(void **)(v19 + 32));
    xpc_object_t v23 = *(std::__shared_weak_count **)(v19 + 8);
    if (!v23)
    {
LABEL_5:
      operator delete((void *)v19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    xpc_object_t v23 = *(std::__shared_weak_count **)(v19 + 8);
    if (!v23) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  operator delete((void *)v19);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  xpc_object_t v3 = (void *)v4[1];
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x263F265A8];
    size_t v9 = strlen((const char *)*MEMORY[0x263F265A8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v25 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v25) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        goto LABEL_34;
      }
    }
    else if (!v6)
    {
      goto LABEL_34;
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_34;
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = 0;
LABEL_25:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      goto LABEL_34;
    }
  }
  int v14 = v3[26];
  xpc_object_t v21 = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  xpc_object_t v15 = (xpc_object_t)a1[3];
  xpc_object_t v20 = v15;
  if (v15)
  {
    xpc_retain(v15);
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v20 = v15;
  }
  LogTracker::jsonSummary_sync(v3, &v21, &v20);
  xpc_release(v15);
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  uint64_t v16 = v3[26];
  int v17 = v3[17];
  xpc_object_t v18 = operator new(0x70uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v18, (uint64_t)(a1 + 4));
  dispatch_group_notify_f(v16, v17, v18, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
LABEL_34:
  uint64_t v19 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)a1);
  operator delete(v19);
}

void sub_26375CD64(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_26375CD84(_Unwind_Exception *a1)
{
  xpc_object_t v3 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_26375CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *aBlock, CFTypeRef cf, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_release(v21);
  if (v20)
  {
    dispatch_group_leave(v20);
    dispatch_release(v20);
    xpc_object_t v23 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19);
    operator delete(v23);
    _Unwind_Resume(a1);
  }
  uint64_t v24 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v19);
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v25 = a1;
  uint64_t v4 = a1 + 8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v3 = *(void *)(v4 + 8);
  if (!v2)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v2);
  uint64_t v6 = v5;
  if (!v5 || !*(void *)a1)
  {
LABEL_7:
    uint64_t v8 = (const void *)*MEMORY[0x263F265A8];
    size_t v9 = strlen((const char *)*MEMORY[0x263F265A8]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      char v11 = (void **)operator new(v12 + 1);
      __dst[1] = v10;
      unint64_t v31 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v31) = v9;
      char v11 = __dst;
      if (!v9) {
        goto LABEL_15;
      }
    }
    memmove(v11, v8, (size_t)v10);
LABEL_15:
    *((unsigned char *)v10 + (void)v11) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v31) < 0)
    {
      operator delete(__dst[0]);
      if (!v6) {
        return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
      }
    }
    else if (!v6)
    {
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
    }
    if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
    }
    char v7 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v7 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (v7) {
    return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
  }
LABEL_26:
  if (!*(unsigned char *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 28) != 2)
    {
      int v17 = *(void **)(a1 + 32);
      xpc_object_t object = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      std::string __p = 0;
      uint64_t v33 = 0;
      xpc_object_t v34 = 0;
      TapToRadar::createRadarIfPossible(&object, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0) {
        operator delete(__p);
      }
      xpc_release(object);
      xpc_object_t object = 0;
      goto LABEL_49;
    }
    int v14 = *(NSObject **)(v3 + 208);
    xpc_object_t object = v14;
    if (v14)
    {
      dispatch_retain(v14);
      dispatch_group_enter(v14);
    }
    xpc_object_t v15 = *(xpc_object_t *)(a1 + 32);
    xpc_object_t v26 = v15;
    if (v15)
    {
      xpc_retain(v15);
      xpc_object_t v16 = *(xpc_object_t *)(a1 + 32);
      if (v16)
      {
LABEL_32:
        xpc_retain(v16);
        xpc_object_t v34 = v16;
        p_p = 0;
        std::string __p = &unk_270EAB0E0;
        uint64_t v33 = v3;
        goto LABEL_33;
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v26 = v15;
      xpc_object_t v16 = *(xpc_object_t *)(a1 + 32);
      if (v16) {
        goto LABEL_32;
      }
    }
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v34 = v16;
    p_p = 0;
    std::string __p = &unk_270EAB0E0;
    uint64_t v33 = v3;
    if (!v16)
    {
      xpc_object_t v34 = xpc_null_create();
      goto LABEL_39;
    }
LABEL_33:
    xpc_retain(v16);
LABEL_39:
    p_p = &__p;
    LogTracker::systemLog_sync(v3, (dispatch_object_t *)&object, &v26, &__p);
    if (p_p == &__p)
    {
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else if (p_p)
    {
      (*((void (**)(void))*p_p + 5))();
    }
    xpc_release(v16);
    xpc_release(v15);
    if (v14)
    {
      dispatch_group_leave(v14);
      dispatch_release(v14);
    }
  }
LABEL_49:
  xpc_object_t v18 = *(NSObject **)(v3 + 208);
  uint64_t v19 = *(NSObject **)(v3 + 136);
  xpc_object_t v20 = (std::string *)operator new(0x48uLL);
  xpc_object_t v21 = v20;
  std::string::size_type v22 = *(void *)(a1 + 48);
  v20->__r_.__value_.__r.__words[0] = *(void *)(a1 + 40);
  v20->__r_.__value_.__l.__size_ = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  v20->__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v20 + 1, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)&v20[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
    v20[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 80);
  }
  xpc_object_t v23 = v21 + 2;
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a1 + 88), *(void *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
    v21[2].__r_.__value_.__r.__words[2] = *(void *)(a1 + 104);
  }
  dispatch_group_notify_f(v18, v19, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v25);
}

void sub_26375D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *aBlock, CFTypeRef cf, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 87) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(*(void **)(v2 + 64));
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3) {
LABEL_5:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_6:
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(void *)(v2 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete((void *)v2);
  return a1;
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_270EAB0E0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_270EAB0E0;
  xpc_release(a1[2]);

  operator delete(a1);
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  *uint64_t v2 = &unk_270EAB0E0;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v2[2] = xpc_null_create();
  }
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  *a2 = &unk_270EAB0E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  a2[2] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[2]);

  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::operator()(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  uint64_t v5 = *a3;
  *a3 = xpc_null_create();
  uint64_t v6 = *(void **)(a1 + 8);
  if (v4)
  {
    memset(&v29, 170, sizeof(v29));
    xpc_object_t value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x263F20570]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v29, (xpc *)buf, (const object *)"", v8);
    xpc_release(*(xpc_object_t *)buf);
    size_t v10 = (char *)*MEMORY[0x263F204D8];
    char v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v29;
    }
    else {
      uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    int64_t v13 = strlen((const char *)*MEMORY[0x263F204D8]);
    if (v13)
    {
      int64_t v14 = v13;
      int64_t size = v29.__r_.__value_.__l.__size_;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      if (size >= v13)
      {
        int v17 = (char *)v12 + size;
        int v18 = *v10;
        uint64_t v19 = v12;
        do
        {
          int64_t v20 = size - v14;
          if (v20 == -1) {
            break;
          }
          xpc_object_t v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21) {
            break;
          }
          std::string::size_type v22 = v21;
          if (!memcmp(v21, v10, v14))
          {
            if (v22 == v17 || v22 - (char *)v12 == -1) {
              break;
            }
            goto LABEL_26;
          }
          uint64_t v19 = (std::string *)(v22 + 1);
          int64_t size = v17 - (v22 + 1);
        }
        while (size >= v14);
      }
      xpc_object_t v16 = *(void **)(a1 + 16);
      *(void *)long long buf = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      TapToRadar::createRadarIfPossible((xpc_object_t *)buf, (uint64_t)&v29);
      xpc_release(*(xpc_object_t *)buf);
      *(void *)long long buf = 0;
      goto LABEL_44;
    }
LABEL_26:
    xpc_object_t v23 = v6[26];
    xpc_object_t v28 = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      char v11 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0) {
      std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v29;
    }
    xpc_object_t v24 = *(xpc_object_t *)(a1 + 16);
    if (v24)
    {
      xpc_retain(v24);
      size_t v32 = 0;
      *(void *)long long buf = &unk_270EAB160;
      xpc_object_t v31 = v24;
    }
    else
    {
      xpc_object_t v24 = xpc_null_create();
      size_t v32 = 0;
      *(void *)long long buf = &unk_270EAB160;
      xpc_object_t v31 = v24;
      if (!v24)
      {
        xpc_object_t v31 = xpc_null_create();
        goto LABEL_36;
      }
    }
    xpc_retain(v24);
LABEL_36:
    size_t v32 = buf;
    LogTracker::processLogarchive_sync(v6, &v28, (const char *)&__p, buf);
    if (v32 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v32)
    {
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(void *)v32 + 40))(v32, v25, v26);
    }
    xpc_release(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v23)
    {
      dispatch_group_leave(v23);
      dispatch_release(v23);
    }
LABEL_44:
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    goto LABEL_46;
  }
  size_t v9 = v6[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_26368A000, v9, OS_LOG_TYPE_ERROR, "Failed to collect sysdiagnose!", buf, 2u);
  }
LABEL_46:
  xpc_release(v5);
}

void sub_26375DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target_type()
{
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_270EAB160;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_270EAB160;
  xpc_release(a1[1]);

  operator delete(a1);
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  unint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v2 = &unk_270EAB160;
  v2[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v2[1] = xpc_null_create();
  }
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  *a2 = &unk_270EAB160;
  a2[1] = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  a2[1] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[1]);

  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  TapToRadar::createRadarIfPossible(&object, (uint64_t)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
}

void sub_26375DE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  int v4 = a1 + 8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v3 = *((void *)v4 + 1);
  uint64_t v5 = (const char **)MEMORY[0x263F265A8];
  if (!v2)
  {
    char v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v2);
  char v7 = v6;
  if (!v6 || !*(void *)a1)
  {
LABEL_7:
    size_t v9 = *v5;
    size_t v10 = strlen(*v5);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    char v11 = (void *)v10;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      uint64_t v12 = (void **)operator new(v13 + 1);
      __dst[1] = v11;
      unint64_t v46 = v14 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v46) = v10;
      uint64_t v12 = __dst;
      if (!v10) {
        goto LABEL_15;
      }
    }
    memmove(v12, v9, (size_t)v11);
LABEL_15:
    *((unsigned char *)v11 + (void)v12) = 0;
    aBlock = 0;
    CFTypeRef cf = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (SHIBYTE(v46) < 0)
    {
      operator delete(__dst[0]);
      if (!v7) {
        goto LABEL_74;
      }
    }
    else if (!v7)
    {
      goto LABEL_74;
    }
    if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_74;
    }
    char v8 = 1;
    goto LABEL_25;
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  char v8 = 0;
LABEL_25:
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v8) {
    goto LABEL_74;
  }
LABEL_26:
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x263E6A240](v15) == MEMORY[0x263EF8708])
    {
      xpc_retain(v15);
      xpc_object_t v16 = v15;
    }
    else
    {
      xpc_object_t v16 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t v15 = 0;
  }
  xpc_release(v15);
  int v17 = (const char **)(a1 + 24);
  int v18 = a1 + 24;
  if (a1[47] < 0) {
    int v18 = *v17;
  }
  xpc_object_t v19 = xpc_string_create(v18);
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x263F26030], v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t v21 = a1 + 48;
  if (a1[71] < 0) {
    xpc_object_t v21 = *(const char **)v21;
  }
  xpc_object_t v22 = xpc_string_create(v21);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x263F263C0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_string_create((const char *)*MEMORY[0x263F204D0]);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v16, (const char *)*MEMORY[0x263F26218], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  uint64_t v26 = *v5;
  size_t v27 = strlen(*v5);
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    std::string v29 = operator new(v31 + 1);
    __p[1] = v28;
    unint64_t v42 = v32 | 0x8000000000000000;
    __p[0] = v29;
LABEL_50:
    memmove(v29, v26, (size_t)v28);
    *((unsigned char *)v28 + (void)v29) = 0;
    xpc_object_t object = v16;
    if (v16) {
      goto LABEL_46;
    }
LABEL_51:
    xpc_object_t object = xpc_null_create();
    goto LABEL_52;
  }
  HIBYTE(v42) = v27;
  std::string v29 = __p;
  if (v27) {
    goto LABEL_50;
  }
  LOBYTE(__p[0]) = 0;
  xpc_object_t object = v16;
  if (!v16) {
    goto LABEL_51;
  }
LABEL_46:
  xpc_retain(v16);
LABEL_52:
  xpc::bridge((uint64_t *)&v47, (xpc *)&object, v30);
  uint64_t v33 = (const void *)v47.__r_.__value_.__r.__words[0];
  if (v47.__r_.__value_.__r.__words[0]
    && (CFTypeID v34 = CFGetTypeID(v47.__r_.__value_.__l.__data_), v34 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v40 = v33;
    CFRetain(v33);
  }
  else
  {
    CFTypeRef v40 = 0;
  }
  uint64_t v38 = 0;
  Service::broadcastEvent(v3, (uint64_t)__p, &v40, (const void **)&v38);
  if (v38) {
    _Block_release(v38);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v47.__r_.__value_.__r.__words[0]) {
    CFRelease(v47.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    size_t v35 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_64;
    }
LABEL_67:
    std::string::size_type v36 = (std::string::size_type)(a1 + 24);
    if (a1[47] < 0) {
      std::string::size_type v36 = (std::string::size_type)*v17;
    }
    LODWORD(v47.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = v36;
    _os_log_impl(&dword_26368A000, v35, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&v47, 0xCu);
    if ((a1[47] & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_70:
    std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
    goto LABEL_71;
  }
  operator delete(__p[0]);
  size_t v35 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_67;
  }
LABEL_64:
  if (a1[47] < 0) {
    goto LABEL_70;
  }
LABEL_65:
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)v17;
  v47.__r_.__value_.__r.__words[2] = *((void *)a1 + 5);
LABEL_71:
  LogTracker::houseKeepingLogs_sync(v3, (const char *)&v47);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  xpc_release(v16);
LABEL_74:
  if ((a1[71] & 0x80000000) == 0)
  {
    if ((a1[47] & 0x80000000) == 0) {
      goto LABEL_76;
    }
LABEL_80:
    operator delete(*((void **)a1 + 3));
    uint64_t v37 = (std::__shared_weak_count *)*((void *)a1 + 1);
    if (!v37) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  operator delete(*((void **)a1 + 6));
  if (a1[47] < 0) {
    goto LABEL_80;
  }
LABEL_76:
  uint64_t v37 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v37) {
LABEL_77:
  }
    std::__shared_weak_count::__release_weak(v37);
LABEL_78:
  operator delete(a1);
}

void sub_26375E4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, CFTypeRef cf, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, CFTypeRef a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_12()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance, &dword_26368A000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<HealthEventDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<HealthEventDB,HealthEventDB,ctu::PthreadMutexGuardPolicy<HealthEventDB>>::sInstance, &dword_26368A000);
  }
  return result;
}

uint64_t __cxx_global_var_init_48()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_26368A000);
  }
  return result;
}

void ServerClientState::ServerClientState(ServerClientState *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

std::string **ServerClientState::ServerClientState(std::string **a1, uint64_t a2)
{
  int v4 = (std::string *)operator new(0x38uLL);
  uint64_t v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  v5[1].__r_.__value_.__s.__data_[0] = 0;
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v5[1].__r_.__value_.__r.__words[2];
  *a1 = v5;
  uint64_t v6 = (std::string *)operator new(0x20uLL);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270EAB200;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  a1[1] = v6;
  return a1;
}

void sub_26375E7D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_26375E7E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void ***ServerClientState::setCheckedIn(void ***result, void **a2)
{
  uint64_t v2 = *result;
  if (*result == a2) {
    goto LABEL_5;
  }
  if (*((char *)v2 + 23) < 0)
  {
    size_t v4 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      size_t v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      size_t v5 = v4;
    }
    uint64_t result = (void ***)std::string::__assign_no_alias<false>(*result, a2, v5);
    *((unsigned char *)v2 + 24) = 1;
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x80) == 0)
    {
      long long v3 = *(_OWORD *)a2;
      v2[2] = a2[2];
      *(_OWORD *)uint64_t v2 = v3;
LABEL_5:
      *((unsigned char *)v2 + 24) = 1;
      return result;
    }
    uint64_t result = (void ***)std::string::__assign_no_alias<true>(*result, *a2, (size_t)a2[1]);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

BOOL ServerClientState::isNotificationRegistered_sync(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  return v2 + 40 != (void)std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(*a1 + 32, a2);
}

void ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  size_t v4 = *a1;
  size_t v5 = *a3;
  if (*a3) {
    CFRetain(v5);
  }
  v6.length = CFArrayGetCount((CFArrayRef)v5);
  if (a2) {
    char v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::registerNotificationApplier;
  }
  else {
    char v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::unregisterNotificationApplier;
  }
  v6.location = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_26375E984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ServerClientState::getName(ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void ServerClientState::State::registerNotificationApplier(ServerClientState::State *this, uint64_t **a2, void *a3)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_26375EA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerClientState::State::unregisterNotificationApplier(ServerClientState::State *this, void *a2, void *a3)
{
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = 0uLL;
  uint64_t v13 = 0;
  size_t v4 = (uint64_t **)(a2 + 4);
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)(a2 + 4), (const void **)__p);
  long long v6 = v5;
  if (a2 + 5 != v5)
  {
    uint64_t v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        char v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      size_t v9 = v5;
      do
      {
        char v8 = (uint64_t *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        size_t v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5) {
      void *v4 = v8;
    }
    char v11 = (uint64_t *)a2[5];
    --a2[6];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    if (*((char *)v6 + 55) < 0) {
      operator delete((void *)v6[4]);
    }
    operator delete(v6);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
}

void sub_26375EB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      BOOL v10 = (uint64_t **)v5;
      uint64_t v13 = (const void *)v5[4];
      char v11 = v5 + 4;
      uint64_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        uint64_t v5 = v10[1];
        if (!v5)
        {
          long long v6 = v10 + 1;
LABEL_28:
          xpc_object_t v20 = operator new(0x38uLL);
          xpc_object_t v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0) {
            goto LABEL_31;
          }
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v5 = *v10;
        long long v6 = v10;
        if (!*v10) {
          goto LABEL_28;
        }
      }
    }
  }
  BOOL v10 = a1 + 1;
  xpc_object_t v20 = operator new(0x38uLL);
  xpc_object_t v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_32:
  *xpc_object_t v20 = 0;
  v20[1] = 0;
  void v20[2] = v10;
  *long long v6 = v20;
  xpc_object_t v22 = (uint64_t *)**a1;
  xpc_object_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    xpc_object_t v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_26375ED2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      uint64_t v2 = (void *)v1;
    }
    else
    {
      uint64_t v2 = (void *)v1;
    }
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A8DB0) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A8DB0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A8DB0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A8DB0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      size_t v4 = a2;
    }
    else
    {
      size_t v4 = a2;
    }
    operator delete(v4);
  }
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1211";
}

void sub_26375F1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_26375F3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_26375F3F4(void *a1)
{
}

void sub_26375F400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0) {
    JUMPOUT(0x26375F3D4);
  }
  JUMPOUT(0x26375F3CCLL);
}

void sub_26375FBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a57);
  std::vector<std::string>::~vector[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void sub_26375FE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_263760068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_26376069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::list<std::string>::~list(va);
  _Unwind_Resume(a1);
}

void sub_2637606B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  operator delete(v17);
  if (a16)
  {
    uint64_t v19 = a14;
    uint64_t v20 = (uint64_t)a15;
    uint64_t v21 = *a15;
    *(void *)(v21 + 8) = *(void *)(a14 + 8);
    **(void **)(v19 + 8) = v21;
    a16 = 0;
    if ((uint64_t *)v20 != &a14)
    {
      do
      {
        xpc_object_t v22 = *(uint64_t **)(v20 + 8);
        if (*(char *)(v20 + 39) < 0) {
          operator delete(*(void **)(v20 + 16));
        }
        operator delete((void *)v20);
        uint64_t v20 = (uint64_t)v22;
      }
      while (v22 != &a14);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_263760B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a26);
  _Unwind_Resume(a1);
}

void sub_263760BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_263760BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void sub_263760C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  support::ui::NotificationInfo::~NotificationInfo((void **)va1);
  _Unwind_Resume(a1);
}

void sub_263760C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_263760C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_263760DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_2637616EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_263761940(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void xpc::dict::to_debug_string(xpc::dict *this, uint64_t a2)
{
  uint64_t v3 = (char *)MEMORY[0x263E6A1A0](a2);
  memset(this, 170, 24);
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    char v8 = (xpc::dict *)operator new(v6 + 1);
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v7 | 0x8000000000000000;
    *(void *)this = v8;
    this = v8;
    goto LABEL_8;
  }
  *((unsigned char *)this + 23) = v4;
  if (v4) {
LABEL_8:
  }
    memcpy(this, v3, v5);
  *((unsigned char *)this + v5) = 0;

  free(v3);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    size_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    size_t v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
LABEL_6:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  char v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_263761BA4(_Unwind_Exception *exception_object)
{
  if (v2[111] < 0)
  {
    operator delete(*v4);
    if ((v2[87] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v2[63] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((v2[87] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v2[63] & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
    return;
  }
LABEL_9:
  uint64_t v2 = *(void **)(a1 + 40);

  operator delete(v2);
}

uint64_t TapToRadar::getMode(TapToRadar *this)
{
  uint64_t v1 = +[ABMTapToRadar sharedInstance];

  return [(ABMTapToRadar *)v1 getMode];
}

uint64_t TapToRadar::setMode(uint64_t a1)
{
  uint64_t v2 = +[ABMTapToRadar sharedInstance];

  return [(ABMTapToRadar *)v2 setMode:a1];
}

void TapToRadar::createRadarIfPossible(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
    && [+[ABMTapToRadar sharedInstance] getMode])
  {
    unsigned int v50 = -1431655766;
    xpc_object_t value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x263F25E10]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned int v5 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)7);
    xpc_release(*(xpc_object_t *)buf);
    unsigned int v50 = v5;
    memset(v49, 170, sizeof(v49));
    xpc_object_t v6 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x263F26030]);
    *(void *)long long buf = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default(v49, (xpc *)buf, (const object *)"", v7);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v48, 170, sizeof(v48));
    xpc_object_t v8 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x263F263C0]);
    *(void *)long long buf = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)&v48, (xpc *)buf, (const object *)"", v9);
    xpc_release(*(xpc_object_t *)buf);
    memset(__p, 170, sizeof(__p));
    xpc_object_t v10 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x263F26298]);
    *(void *)long long buf = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    xpc::dyn_cast_or_default((uint64_t *)__p, (xpc *)buf, (const object *)"", v11);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v46, 170, sizeof(v46));
    char v12 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v13 = (void *)HIBYTE(__p[2]);
    }
    else {
      uint64_t v13 = __p[1];
    }
    int v14 = (std::string *)__p;
    if (!v13)
    {
      int v14 = &v48;
      char v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0)
    {
      if (v13) {
        int64_t size = __p[1];
      }
      else {
        int64_t size = (void *)v48.__r_.__value_.__l.__size_;
      }
      std::string::__init_copy_ctor_external(&v46, v14->__r_.__value_.__l.__data_, (std::string::size_type)size);
    }
    else
    {
      std::string v46 = *v14;
    }
    size_t v16 = (const void *)*MEMORY[0x263F204C8];
    size_t v17 = strlen((const char *)*MEMORY[0x263F204C8]);
    int v18 = SHIBYTE(v49[2]);
    if (v49[2] >= 0) {
      size_t v19 = HIBYTE(v49[2]);
    }
    else {
      size_t v19 = v49[1];
    }
    std::string::size_type v20 = v19 + v17;
    memset(&__dst, 170, sizeof(__dst));
    if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v21 = v17;
    if (v20 > 0x16)
    {
      uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v25 = v20 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v21)
      {
LABEL_34:
        if (v19)
        {
          if (v18 >= 0) {
            xpc_object_t v23 = v49;
          }
          else {
            xpc_object_t v23 = (uint64_t *)v49[0];
          }
          memmove((char *)p_dst + v21, v23, v19);
        }
        p_dst->__r_.__value_.__s.__data_[v21 + v19] = 0;
        xpc_object_t v24 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x263F262A0]);
        *(void *)long long buf = v24;
        if (v24) {
          xpc_retain(v24);
        }
        else {
          *(void *)long long buf = xpc_null_create();
        }
        uint64_t v27 = xpc::dyn_cast_or_default((xpc *)buf, 0);
        xpc_release(*(xpc_object_t *)buf);
        GetABMLogServer(&v43);
        xpc_object_t v28 = *((void *)GetGlobalLogger(&v43) + 4);
        std::string v29 = v44;
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_52;
          }
        }
        else if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          goto LABEL_52;
        }
        int v30 = [+[ABMTapToRadar sharedInstance] getMode];
        uint64_t v31 = &v46;
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v31 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v30;
        __int16 v52 = 1024;
        unsigned int v53 = v50;
        __int16 v54 = 2080;
        uint64_t v55 = v31;
        __int16 v56 = 1024;
        int v57 = v27;
        _os_log_impl(&dword_26368A000, v28, OS_LOG_TYPE_DEFAULT, "#I check TTR: mode[%d], radar type[%d], title[%s], MTBF=%d", buf, 0x1Eu);
LABEL_52:
        uint64_t v32 = HIBYTE(v49[2]);
        if (v49[2] < 0) {
          uint64_t v32 = v49[1];
        }
        if (!v32) {
          goto LABEL_83;
        }
        uint64_t v33 = (config::hw *)[+[ABMTapToRadar sharedInstance] checkNotificationCriteria:&v50 :&v46 :v27];
        if (!v33) {
          goto LABEL_83;
        }
        if ((config::hw::watch(v33) & 1) == 0)
        {
          std::string::size_type v36 = +[ABMTapToRadar sharedInstance];
          uint64_t v37 = v50;
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v42, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
          }
          else {
            std::string v42 = v48;
          }
          [(ABMTapToRadar *)v36 showUserNotification:v37 dumpReason:&v42];
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v42.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_84;
            }
            goto LABEL_70;
          }
          goto LABEL_83;
        }
        CFTypeID v34 = +[ABMTapToRadar sharedInstance];
        uint64_t v35 = v50;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v41, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v40, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
LABEL_65:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v39, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            }
            else {
              std::string v39 = __dst;
            }
            if (*(char *)(a2 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            }
            else {
              std::string v38 = *(std::string *)a2;
            }
            [(ABMTapToRadar *)v34 showNotification:v35 :&v41 :&v40 :&v39 :&v38];
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v38.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_81:
                if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_82;
                }
LABEL_91:
                operator delete(v40.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_92;
                }
LABEL_83:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_84;
                }
                goto LABEL_70;
              }
            }
            else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_81;
            }
            operator delete(v39.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_82:
              if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_83;
              }
LABEL_92:
              operator delete(v41.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_84:
                if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_85:
                  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  {
LABEL_86:
                    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_87:
                      if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
                        return;
                      }
LABEL_74:
                      operator delete((void *)v49[0]);
                      return;
                    }
LABEL_73:
                    operator delete(v48.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v49[2]) & 0x80000000) == 0) {
                      return;
                    }
                    goto LABEL_74;
                  }
LABEL_72:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_87;
                  }
                  goto LABEL_73;
                }
LABEL_71:
                operator delete(v46.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_72;
              }
LABEL_70:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_85;
              }
              goto LABEL_71;
            }
            goto LABEL_91;
          }
        }
        else
        {
          std::string v41 = v46;
        }
        std::string v40 = v46;
        goto LABEL_65;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17) {
        goto LABEL_34;
      }
    }
    memcpy(p_dst, v16, v21);
    goto LABEL_34;
  }
}

void sub_2637623E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a50 < 0)
  {
    operator delete(a45);
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a63 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(a51);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 - 177) < 0) {
      operator delete(*(void **)(v63 - 200));
    }
    if (*(char *)(v63 - 153) < 0) {
      operator delete(*(void **)(v63 - 176));
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a58);
  goto LABEL_7;
}

std::string *std::vector<std::string>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  long long v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v9 = (char *)operator new(24 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  xpc_object_t v10 = (std::string *)&v9[24 * v5];
  size_t v16 = v10;
  size_t v17 = v10;
  int v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    long long v4 = a1[1];
    xpc_object_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      uint64_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  uint64_t v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    int v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_2637627C8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *BasebandCrashReasonFilter::create@<X0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;

  return std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(a1, (uint64_t)v3);
}

void sub_263762838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::~BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  *(void *)this = &unk_270EAB2D8;
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 10);
    unint64_t v6 = (void *)*((void *)this + 9);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 9) < 0) {
          operator delete(*(void **)(v5 - 32));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      unint64_t v6 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v4;
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 7);
    long long v9 = (void *)*((void *)this + 6);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        v8 -= 32;
      }
      while (v8 != v7);
      long long v9 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v7;
    operator delete(v9);
  }
  MEMORY[0x263E68B30](v2);
  xpc_object_t v10 = *((void *)this + 4);
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = *((void *)this + 3);
  if (v11) {
    dispatch_release(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  BasebandCrashReasonFilter::~BasebandCrashReasonFilter(this);

  operator delete(v1);
}

void BasebandCrashReasonFilter::BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, "com.apple.telephony.abm", "bb.crashreason.fltr");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v3 = dispatch_queue_create_with_target_V2("BasebandCrashReasonFilter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((void *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((void *)this + 4) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((BasebandCrashReasonFilter *)((char *)this + 40), (const ctu::OsLogLogger *)v14);
  MEMORY[0x263E68B30](v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  *(void *)this = &unk_270EAB2D8;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v4 = (void **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  uint64_t v5 = *((void *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "#I initializing baseband crash reason patterns and masks from preferences file", (uint8_t *)&v12, 2u);
  }
  BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(this, &v12);
  unint64_t v6 = (void **)*v4;
  if (*v4)
  {
    uint64_t v7 = (void **)*((void *)this + 7);
    uint64_t v8 = *v4;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 9) < 0) {
          operator delete(*(v7 - 4));
        }
        v7 -= 4;
      }
      while (v7 != v6);
      uint64_t v8 = *v4;
    }
    *((void *)this + 7) = v6;
    operator delete(v8);
    char *v4 = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
  }
  long long v9 = v12;
  *((void *)this + 6) = v12;
  xpc_object_t v10 = (void *)v13;
  *(_OWORD *)((char *)this + 56) = v13;
  if (v10 == v9)
  {
    uint64_t v11 = *((void *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_26368A000, v11, OS_LOG_TYPE_DEFAULT, "#I default pattern masks for baseband crash reason patterns and masks will be used", (uint8_t *)&v12, 2u);
    }
    std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)this + 6, *((void ***)this + 9), *((char **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 5);
  }
}

void sub_263762BD8(_Unwind_Exception *a1)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100]((void **)(v1 + 72));
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v3);
  ctu::SharedLoggable<TraceCAReporter,ctu::OsLogLogger>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(BasebandCrashReasonFilter *this@<X0>, void **a2@<X8>)
{
  CFArrayRef v20 = 0;
  CFTypeRef cf = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_26A99F2D0)
  {
    uint64_t v5 = (uint64_t (***)(void, uint64_t))operator new(0x18uLL);
    MEMORY[0x263E68CE0](v5, @"com.apple.AppleBasebandManager", *MEMORY[0x263EFFE70]);
    uint64_t v4 = operator new(0x20uLL);
    void *v4 = &unk_270EA8570;
    v4[1] = 0;
    void v4[2] = 0;
    v4[3] = v5;
    unint64_t v6 = (std::__shared_weak_count *)off_26A99F2D8;
    qword_26A99F2D0 = (uint64_t)v5;
    off_26A99F2D8 = v4;
    if (!v6)
    {
      uint64_t v17 = (uint64_t)v5;
      int v18 = (std::__shared_weak_count *)v4;
      goto LABEL_8;
    }
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v5 = (uint64_t (***)(void, uint64_t))qword_26A99F2D0;
  uint64_t v4 = off_26A99F2D8;
  uint64_t v17 = qword_26A99F2D0;
  int v18 = (std::__shared_weak_count *)off_26A99F2D8;
  if (off_26A99F2D8) {
LABEL_8:
  }
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_2637A8E10;
  strcpy((char *)__p[0], "BasebandCrashReasonRegexPatterns");
  BOOL v7 = Preferences::getPreference<__CFArray const*>(v5, (const char *)__p, &v20);
  if (v20) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  long long v9 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v8) {
      goto LABEL_17;
    }
  }
  else if (v8)
  {
LABEL_17:
    CFArrayRef v10 = v20;
    CFTypeRef v11 = cf;
    CFTypeRef cf = v20;
    if (v11) {
      CFRelease(v11);
    }
    CFArrayRef v15 = v10;
    if (v10) {
      CFRetain(v10);
    }
    BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v15, __p);
    long long v12 = (void **)*a2;
    if (*a2)
    {
      for (size_t i = (void **)a2[1]; i != v12; i -= 4)
      {
        if (*((char *)i - 9) < 0) {
          operator delete(*(i - 4));
        }
      }
      operator delete(v12);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    a2[2] = __p[2];
    memset(__p, 0, 24);
    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_33;
  }
  int v14 = *((void *)this + 5);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_26368A000, v14, OS_LOG_TYPE_DEFAULT, "#I no baseband crash reason patterns entry found in ABMProperties", (uint8_t *)__p, 2u);
  }
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t BasebandCrashReasonFilter::shouldSetSCD(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, a2, (long long **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::shouldSetCOF(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, a2, (long long **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromFactoryFile@<X0>(void *a1@<X8>)
{
  memset(v10, 170, sizeof(v10));
  MEMORY[0x263E68CE0](v10, @"/AppleInternal/Cellular/Factory/BasebandCOFSCD.plist", *MEMORY[0x263EFFE70]);
  CFArrayRef v9 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v7, "BasebandCrashReasonRegexPatterns");
  CFArrayRef v3 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v10, v7[0]);
  MEMORY[0x263E68C90](v7);
  CFArrayRef v9 = v3;
  CFArrayRef v6 = v3;
  if (v3) {
    CFRetain(v3);
  }
  BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v6, (void **)v7);
  uint64_t v4 = v8;
  *(_OWORD *)a1 = *(_OWORD *)v7;
  a1[2] = v4;
  v7[1] = 0;
  uint64_t v8 = 0;
  v7[0] = 0;
  if (v3)
  {
    CFRelease(v3);
    CFRelease(v3);
  }
  return MEMORY[0x263E68CF0](v10);
}

void sub_2637630B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x263E68CF0](v3 - 40);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(CFArrayRef *a1@<X1>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!*a1) {
    return;
  }
  uint64_t v2 = a1;
  unint64_t Count = CFArrayGetCount(*a1);
  uint64_t v4 = a2;
  uint64_t v5 = (void **)*a2;
  if (Count > ((unsigned char *)a2[2] - (unsigned char *)*a2) >> 5)
  {
    CFArrayRef v6 = (void **)a2[1];
    uint64_t v7 = (char *)operator new(32 * Count);
    uint64_t v8 = &v7[32 * Count];
    uint64_t v9 = &v7[(char *)v6 - (char *)v5];
    if (v6 == v5)
    {
      uint64_t v4 = a2;
      *a2 = v9;
      a2[1] = v9;
      a2[2] = v8;
      if (v5) {
LABEL_12:
      }
        operator delete(v5);
    }
    else
    {
      uint64_t v10 = &v7[(char *)v6 - (char *)v5];
      do
      {
        long long v11 = *((_OWORD *)v6 - 2);
        *((void *)v10 - 2) = *(v6 - 2);
        *((_OWORD *)v10 - 2) = v11;
        *(v6 - 3) = 0;
        *(v6 - 2) = 0;
        *(v6 - 4) = 0;
        *((_DWORD *)v10 - 2) = *((_DWORD *)v6 - 2);
        v10 -= 32;
        v6 -= 4;
      }
      while (v6 != v5);
      uint64_t v5 = (void **)*a2;
      long long v12 = (void **)a2[1];
      *a2 = v10;
      a2[1] = v9;
      a2[2] = v8;
      while (v12 != v5)
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 4;
      }
      uint64_t v4 = a2;
      if (v5) {
        goto LABEL_12;
      }
    }
  }
  if (Count)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v2, i);
      CFArrayRef v15 = ValueAtIndex;
      if (ValueAtIndex && (CFTypeID v16 = CFGetTypeID(ValueAtIndex), v16 == CFDictionaryGetTypeID()))
      {
        std::string v40 = v15;
        CFRetain(v15);
      }
      else
      {
        CFArrayRef v15 = 0;
        std::string v40 = 0;
      }
      v39[0] = 0xAAAAAAAAAAAAAAAALL;
      v39[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, (const __CFDictionary *)v15);
      memset(&v38, 170, sizeof(v38));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v41, "BasebandCrashReasonRegexPattern");
      ctu::cf::map_adapter::getString();
      MEMORY[0x263E68C90](&v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "BasebandCrashReasonRegexPatternMask");
      int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, (const __CFString *)__p.__r_.__value_.__l.__data_);
      MEMORY[0x263E68C90](&__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v38;
      }
      int v37 = Int;
      size_t v19 = (void **)v4[1];
      unint64_t v18 = (unint64_t)v4[2];
      if ((unint64_t)v19 < v18)
      {
        long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        void v19[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)size_t v19 = v20;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v19 + 6) = v37;
        v4[1] = v19 + 4;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_42;
        }
        goto LABEL_50;
      }
      unint64_t v21 = Count;
      xpc_object_t v22 = (void **)*v4;
      uint64_t v23 = ((char *)v19 - (char *)v22) >> 5;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59) {
        std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v2;
      uint64_t v26 = v18 - (void)v22;
      if (v26 >> 4 > v24) {
        unint64_t v24 = v26 >> 4;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v24;
      }
      if (v27 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      xpc_object_t v28 = (char *)operator new(32 * v27);
      std::string v29 = &v28[32 * v23];
      *(std::string *)std::string v29 = __p;
      int v30 = &v28[32 * v27];
      memset(&__p, 0, sizeof(__p));
      *((_DWORD *)v29 + 6) = Int;
      uint64_t v31 = v29 + 32;
      if (v19 == v22)
      {
        uint64_t v4 = a2;
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        uint64_t v2 = v25;
        unint64_t Count = v21;
        if (v19) {
          goto LABEL_39;
        }
      }
      else
      {
        do
        {
          long long v32 = *((_OWORD *)v19 - 2);
          *((void *)v29 - 2) = *(v19 - 2);
          *((_OWORD *)v29 - 2) = v32;
          *(v19 - 3) = 0;
          *(v19 - 2) = 0;
          *(v19 - 4) = 0;
          *((_DWORD *)v29 - 2) = *((_DWORD *)v19 - 2);
          v29 -= 32;
          v19 -= 4;
        }
        while (v19 != v22);
        size_t v19 = (void **)*a2;
        uint64_t v33 = (void **)a2[1];
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        uint64_t v2 = v25;
        for (unint64_t Count = v21; v33 != v19; v33 -= 4)
        {
          if (*((char *)v33 - 9) < 0) {
            operator delete(*(v33 - 4));
          }
        }
        uint64_t v4 = a2;
        if (v19) {
LABEL_39:
        }
          operator delete(v19);
      }
      int v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v4[1] = v31;
      if (v34 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_42:
          MEMORY[0x263E68CD0](v39);
          if (!v15) {
            continue;
          }
LABEL_51:
          CFRelease(v15);
          continue;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
LABEL_50:
      operator delete(v38.__r_.__value_.__l.__data_);
      MEMORY[0x263E68CD0](v39);
      if (v15) {
        goto LABEL_51;
      }
    }
  }
}

void sub_263763524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void sub_26376353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,const void *a27)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  MEMORY[0x263E68CD0](&a25);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a27);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_2637635D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

void *std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAB390;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  CFArrayRef v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_263763700(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_263763728(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                     "IT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__11"
                                "0shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t __cxx_global_var_init_13()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_26368A000);
  }
  return result;
}

void TransportModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  CFArrayRef v6 = operator new(0xE8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a1;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = v8;
  xpc_object_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  long long v11 = (std::__shared_weak_count *)a2[1];
  v26[0] = v10;
  v26[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  TransportModule::TransportModule((uint64_t)v6, &v27, v26);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAB7F0;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v12;
  int v14 = (std::__shared_weak_count *)*((void *)v7 + 16);
  if (!v14)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 15) = v7;
    *((void *)v7 + 16) = v12;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
LABEL_11:
    CFArrayRef v15 = (void *)*a3;
    if (!*(void *)(*a3 + 104)) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v14->__shared_owners_ != -1) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v7 + 15) = v7;
  *((void *)v7 + 16) = v12;
  std::__shared_weak_count::__release_weak(v14);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  CFArrayRef v15 = (void *)*a3;
  if (!*(void *)(*a3 + 104)) {
    goto LABEL_22;
  }
LABEL_12:
  CFTypeID v16 = (std::__shared_weak_count *)v15[16];
  if (!v16 || (uint64_t v17 = v15[15], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v19 = v18;
  uint64_t block = v17;
  uint64_t v36 = (uint64_t)v18;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v15 + 7));
  uint64_t v20 = v17 + 48;
  if (!v17) {
    uint64_t v20 = 0;
  }
  uint64_t v29 = v20;
  uint64_t v30 = (uint64_t)v19;
  uint64_t block = 0;
  uint64_t v36 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  unint64_t v21 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_object_t v22 = (std::__shared_weak_count *)v36;
  if (v36 && !atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_22:
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v23 = *a3;
  uint64_t v24 = *a3 + 120;
  uint64_t v29 = MEMORY[0x263EF8330];
  uint64_t v30 = 0x40000000;
  uint64_t v31 = ___ZN15TransportModule4initEv_block_invoke;
  long long v32 = &__block_descriptor_tmp_10;
  uint64_t v33 = v23;
  int v34 = &v29;
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v36 = 0x40000000;
  int v37 = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  std::string v38 = &__block_descriptor_tmp_89;
  uint64_t v39 = v24;
  std::string v40 = &v34;
  uint64_t v25 = *(NSObject **)(v23 + 136);
  if (*(void *)(v23 + 144)) {
    dispatch_async_and_wait(v25, &block);
  }
  else {
    dispatch_sync(v25, &block);
  }
}

void sub_263763BCC()
{
}

void sub_263763C18()
{
}

void sub_263763C28()
{
}

void TransportModule::init(TransportModule *this)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  void v3[2] = ___ZN15TransportModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_10;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_89;
  void block[4] = (char *)this + 120;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TransportModule::TransportModule(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  CFArrayRef v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EAD770;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(void *)a1 = &unk_270EA6BA0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_270EA6BA0;
  }
  *(void *)a1 = &unk_270EAB3E0;
  *(void *)(a1 + 48) = &unk_270EAB450;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v27, "com.apple.telephony.abm", "ipc.mod");
  GetABMLogServer(&v25);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v8 = dispatch_queue_create_with_target_V2("ipc.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v8, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v8;
  if (v8)
  {
    dispatch_retain(v8);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v8);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_270EAB7B0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v29);
  *(void *)(a1 + 56) = &unk_270EA5428;
  uint64_t v9 = v26;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v28);
  *(void *)(a1 + 48) = &unk_270EAB840;
  uint64_t v10 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
  *(void *)a1 = &unk_270EAB3E0;
  *(void *)(a1 + 48) = &unk_270EAB450;
  *(_DWORD *)(a1 + 152) = 0;
  xpc_object_t v11 = xpc_null_create();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = *a3;
  *(void *)(a1 + 160) = v11;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 224) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = xpc_null_create();
  int v14 = v13;
  *(_DWORD *)(a1 + 152) = 1;
  if (v13)
  {
    xpc_retain(v13);
    xpc_object_t v15 = v14;
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
  }
  CFTypeID v16 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v15;
  xpc_release(v16);
  xpc_release(v14);
  GetABMLogServer(&v23);
  uint64_t v29 = v23;
  uint64_t v30 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::TransportService::State::create((capabilities::abs *)&v29, (dispatch_object_t *)&v28);
  uint64_t v17 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = v28;
  long long v28 = 0uLL;
  size_t v19 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v18;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unint64_t v21 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  return a1;
}

void sub_2637641E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  uint64_t v26 = a18;
  if (a18)
  {
    if (!atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v21);
  WakeReason::~WakeReason(v20);
  ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v19);
  Service::~Service(v18);
  _Unwind_Resume(a1);
}

void sub_263764294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_2637642D8(_Unwind_Exception *a1)
{
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void WakeReason::~WakeReason(xpc_object_t *this)
{
  this[1] = 0;
}

void *ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAB7B0;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EAB7B0;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TransportModule::~TransportModule(TransportModule *this)
{
  *(void *)this = &unk_270EAB3E0;
  *((void *)this + 6) = &unk_270EAB450;
  uint64_t v2 = *((void *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v14, 2u);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  xpc_release(*((xpc_object_t *)this + 20));
  *((void *)this + 20) = 0;
  *((void *)this + 6) = &unk_270EAB7B0;
  MEMORY[0x263E68AF0]((char *)this + 56);
  uint64_t v7 = *((void *)this + 18);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 17);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v10 = *((void *)this + 3);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = (void *)*((void *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v10;
    operator delete(v12);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
}

{
  void *v1;
  uint64_t vars8;

  TransportModule::~TransportModule(this);

  operator delete(v1);
}

void non-virtual thunk to'TransportModule::~TransportModule(TransportModule *this)
{
}

{
  void *v1;
  uint64_t vars8;

  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));

  operator delete(v1);
}

const char *TransportModule::getName(TransportModule *this)
{
  return "ipc.mod";
}

void ___ZN15TransportModule4initEv_block_invoke(uint64_t a1)
{
}

void TransportModule::configureWakeEventPktDelay_sync(TransportModule *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v11 = -1431655766;
  size_t v9 = 4;
  if (sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", &v11, &v9, 0, 0))
  {
    uint64_t v2 = *((void *)this + 11);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    unint64_t v3 = __error();
    uint64_t v4 = strerror(*v3);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v13 = v4;
    uint64_t v5 = "Failed to get current sysctl value, error: (%s)";
LABEL_7:
    _os_log_error_impl(&dword_26368A000, v2, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    return;
  }
  int v10 = v11 | 0x8000;
  int v6 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", 0, 0, &v10, 4uLL);
  uint64_t v2 = *((void *)this + 11);
  if (v6)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)long long buf = 136315138;
    xpc_object_t v13 = v8;
    uint64_t v5 = "Failed to configure in-band wake packet event, error (%s)";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Successfully configured in-band wake packet event", buf, 2u);
  }
}

unsigned char *TransportModule::getShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = operator new(1uLL);
  *a1 = v3;
  *unint64_t v3 = 3;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void TransportModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v7[3] = &__block_descriptor_tmp_3_2;
  uint64_t v5 = *a3;
  int v6 = (uint64_t *)(a1 + 120);
  void v7[4] = a1;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  char v9 = a2;
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v6, (uint64_t)v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[21];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    (*(void (**)(void))(*(void *)v1[21] + 56))(v1[21]);
  }
  unint64_t v3 = (std::__shared_weak_count *)v1[22];
  v1[21] = 0;
  v1[22] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v4) {
      return;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::shared_ptr<TransportService>::reset[abi:ne180100](void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void TransportModule::initialize(uint64_t *a1, NSObject **a2)
{
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v11[3] = &__block_descriptor_tmp_29_3;
  unint64_t v3 = *a2;
  v11[4] = a1;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(group);
  }
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(a1 + 15, (uint64_t)v11);
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (int v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = a1;
  char v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(void *)(v1 + 120), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = abm::kCommandNetworkInterfaceControl;
  size_t v7 = strlen(abm::kCommandNetworkInterfaceControl);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v37 = v8;
    unint64_t v38 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v38) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_12:
  }
    memmove(p_dst, v6, v8);
  *((unsigned char *)p_dst + v8) = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_6_5;
  void aBlock[4] = v1;
  void aBlock[5] = v3;
  int v34 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v35 = v12;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v35);
  if (v12) {
    _Block_release(v12);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  xpc_object_t v13 = (const void *)*MEMORY[0x263F26640];
  size_t v14 = strlen((const char *)*MEMORY[0x263F26640]);
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    CFTypeID v16 = (void **)operator new(v17 + 1);
    size_t v37 = v15;
    unint64_t v38 = v18 | 0x8000000000000000;
    std::string __dst = v16;
    goto LABEL_24;
  }
  HIBYTE(v38) = v14;
  CFTypeID v16 = (void **)&__dst;
  if (v14) {
LABEL_24:
  }
    memmove(v16, v13, v15);
  *((unsigned char *)v16 + v15) = 0;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 1174405120;
  uint64_t v30[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  v30[3] = &__block_descriptor_tmp_16_1;
  void v30[4] = v1;
  v30[5] = v3;
  uint64_t v31 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v19 = _Block_copy(v30);
  long long v32 = v19;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v32);
  if (v19) {
    _Block_release(v19);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = (const void *)*MEMORY[0x263F26638];
  size_t v21 = strlen((const char *)*MEMORY[0x263F26638]);
  if (v21 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v22 = v21;
  if (v21 >= 0x17)
  {
    uint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v24 = v21 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v23 = (void **)operator new(v24 + 1);
    size_t v37 = v22;
    unint64_t v38 = v25 | 0x8000000000000000;
    std::string __dst = v23;
    goto LABEL_36;
  }
  HIBYTE(v38) = v21;
  uint64_t v23 = (void **)&__dst;
  if (v21) {
LABEL_36:
  }
    memmove(v23, v20, v22);
  *((unsigned char *)v23 + v22) = 0;
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 1174405120;
  uint64_t v27[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_17;
  v27[3] = &__block_descriptor_tmp_26;
  v27[4] = v1;
  void v27[5] = v3;
  long long v28 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = _Block_copy(v27);
  uint64_t v29 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v29);
  if (v26) {
    _Block_release(v26);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_263765068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v33) {
    _Block_release(v33);
  }
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((*(char *)(v34 - 97) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v36 = a24;
      if (!a24)
      {
LABEL_10:
        if (a32)
        {
          std::__shared_weak_count::__release_weak(a32);
          std::__shared_weak_count::__release_weak(v32);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v34 - 97) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v34 - 120));
  uint64_t v36 = a24;
  if (!a24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2(void *a1, void **a2, void **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    size_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      char v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 1174405120;
      void v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v12[3] = &__block_descriptor_tmp_4_2;
      uint64_t v10 = *a2;
      void v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        uint64_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        uint64_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      uint64_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    v15[0] = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    v15[0] = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v4) == MEMORY[0x263EF8708])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  v15[0] = v5;
LABEL_9:
  xpc_release(v4);
  unsigned int v14 = -534716414;
  memset(v13, 170, sizeof(v13));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x263F25D88]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  memset(&v15[1], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v13[2]) >= 0) {
    size_t v7 = HIBYTE(v13[2]);
  }
  else {
    size_t v7 = (size_t)v13[1];
  }
  if (v7 != strlen(abm::kActionConfigureDataThrottling)) {
    goto LABEL_26;
  }
  size_t v8 = SHIBYTE(v13[2]) >= 0 ? v13 : (void **)v13[0];
  if (memcmp(v8, abm::kActionConfigureDataThrottling, v7)) {
    goto LABEL_26;
  }
  xpc_object_t v9 = *(xpc_object_t *)(a1 + 40);
  xpc_object_t v11 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v11 = v9;
    xpc_object_t v10 = v15[0];
    if (v15[0]) {
      goto LABEL_22;
    }
LABEL_24:
    xpc_object_t v10 = xpc_null_create();
    goto LABEL_25;
  }
  xpc_retain(v9);
  xpc_object_t v10 = v15[0];
  if (!v15[0]) {
    goto LABEL_24;
  }
LABEL_22:
  xpc_retain(v10);
LABEL_25:
  TransportModule::configureDataThrottling_sync(v2, &v11);
  unsigned int v14 = 0;
  xpc_release(v10);
  xpc_release(v9);
  xpc_object_t v11 = 0;
LABEL_26:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v14, v15);
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  xpc_release(v15[0]);
}

void sub_2637654F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(v25);
  xpc_release(v24);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object(void *a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, key);
  *a1 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a1 = result;
  return result;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    int v6 = a1;
  }
  else {
    int v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

uint64_t TransportModule::configureDataThrottling_sync(uint64_t a1, xpc_object_t *a2)
{
  int v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0]) = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Configure data throttling", (uint8_t *)object, 2u);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25DA0]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  unsigned int v6 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25DB8]);
  object[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    object[0] = xpc_null_create();
  }
  uint64_t v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  xpc_object_t v9 = *(uint64_t **)(a1 + 184);
  if (v9)
  {
    object[0] = (xpc_object_t)MEMORY[0x263EF8330];
    object[1] = (xpc_object_t)0x40000000;
    object[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    xpc_object_t object[3] = &__block_descriptor_tmp_59;
    xpc_object_t object[4] = v9;
    object[5] = (xpc_object_t)(v6 | (unint64_t)(v8 << 32));
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(v9 + 9, (uint64_t)object);
  }
  return 0;
}

void sub_2637657C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7(void *a1, void **a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      xpc_object_t v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 1174405120;
      void v12[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8;
      v12[3] = &__block_descriptor_tmp_13_4;
      xpc_object_t v10 = *a2;
      void v12[4] = v7;
      xpc_object_t object = v10;
      if (v10)
      {
        xpc_retain(v10);
        xpc_object_t v11 = *a3;
        if (!*a3) {
          goto LABEL_9;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        xpc_object_t v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v12);
          if (aBlock) {
            _Block_release(aBlock);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          goto LABEL_12;
        }
      }
      xpc_object_t v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8(uint64_t a1)
{
  v18[1] = *(xpc_object_t *)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  uint64_t v5 = MEMORY[0x263EF8708];
  if (v3)
  {
    xpc_object_t object = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t object = v4;
    if (!v4)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v4) != v5)
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    xpc_object_t object = v6;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
  unsigned int v16 = -534716416;
  if (MEMORY[0x263E6A240](*(void *)(a1 + 40)) == v5
    && (xpc_object_t v9 = (const char *)*MEMORY[0x263F263D8],
        xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x263F263D8])))
  {
    xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), v9);
    v18[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      v18[0] = xpc_null_create();
    }
    int v11 = xpc::dyn_cast_or_default((xpc *)v18, 0);
    xpc_release(v18[0]);
    uint64_t v12 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18[0]) = 67109120;
      HIDWORD(v18[0]) = v11;
      _os_log_impl(&dword_26368A000, v12, OS_LOG_TYPE_DEFAULT, "#I Transport bypass enable (%u)", (uint8_t *)v18, 8u);
    }
    uint64_t v13 = *(void *)(v2 + 168);
    if (v13)
    {
      if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)v13 + 72))(v13, v11 != 0)) {
        unsigned int v16 = 0;
      }
    }
    else if (MEMORY[0x263E6A240](object) == v5)
    {
      xpc_object_t v14 = xpc_string_create("TransportService is not ready!");
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F25EB8], v14);
      xpc_object_t v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
    }
  }
  else
  {
    if (MEMORY[0x263E6A240](object) == v5)
    {
      xpc_object_t v7 = xpc_string_create("Invalid key!");
      if (!v7) {
        xpc_object_t v7 = xpc_null_create();
      }
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x263F25EB8], v7);
      xpc_object_t v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
    }
    unsigned int v16 = -534716414;
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v16, &object);
  xpc_release(object);
}

void sub_263765C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_17(void *a1, uint64_t a2, void **a3)
{
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[5])
      {
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 1174405120;
        _DWORD v10[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_18;
        void v10[3] = &__block_descriptor_tmp_23_0;
        void v10[4] = v6;
        xpc_object_t v9 = *a3;
        if (*a3) {
          xpc_object_t v9 = _Block_copy(v9);
        }
        aBlock = v9;
        ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v10);
        if (aBlock) {
          _Block_release(aBlock);
        }
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    xpc_object_t xdict = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t xdict = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v4) == MEMORY[0x263EF8708])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 152))
  {
    case 0:
      xpc_object_t v6 = xpc_string_create("Wake data is not supported on this device.");
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v6);
      xpc_object_t v7 = xpc_null_create();
      xpc_release(v6);
      xpc_release(v7);
      LODWORD(object) = -534716412;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 1:
      xpc_object_t v13 = xpc_string_create("Device has not entered sleep state after bootup. So, there is no wake data yet.");
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      LODWORD(object) = -534716409;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 2:
      xpc_object_t v8 = xpc_string_create("Requested for wake data from baseband. Please try again.");
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v8);
      xpc_object_t v9 = xpc_null_create();
      xpc_release(v8);
      xpc_release(v9);
      LODWORD(object) = -534716411;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
    case 3:
      xpc_object_t v10 = *(xpc_object_t *)(v2 + 160);
      if (v10) {
        xpc_retain(*(xpc_object_t *)(v2 + 160));
      }
      else {
        xpc_object_t v10 = xpc_null_create();
      }
      uint64_t v15 = *(void *)(a1 + 40);
      xpc_object_t object = v10;
      xpc_object_t v16 = xpc_null_create();
      (*(void (**)(uint64_t, void, xpc_object_t *))(v15 + 16))(v15, 0, &object);
      xpc_release(object);
      xpc_release(v16);
      break;
    default:
      xpc_object_t v11 = xpc_string_create("Request for wake data from baseband returned error.");
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x263F25EB8], v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      LODWORD(object) = -534716416;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), (unsigned int *)&object, &xdict);
      break;
  }
  xpc_release(xdict);
}

void sub_26376610C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  xpc_release(a9);
  _Unwind_Resume(a1);
}

void TransportModule::claimSystemWake_sync(TransportModule *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 38) != 3) {
    return;
  }
  xpc_object_t v2 = (xpc_object_t)*((void *)this + 20);
  if (v2) {
    xpc_retain(*((xpc_object_t *)this + 20));
  }
  else {
    xpc_object_t v2 = xpc_null_create();
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x263F260A0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v4);
  xpc_object_t v5 = *(const void **)cf;
  if (!*(void *)cf || (CFTypeID v6 = CFGetTypeID(*(CFTypeRef *)cf), v6 != CFStringGetTypeID()))
  {
    xpc_object_t v5 = 0;
    xpc_object_t v7 = *(const void **)cf;
    if (!*(void *)cf) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFRetain(v5);
  xpc_object_t v7 = *(const void **)cf;
  if (*(void *)cf) {
LABEL_13:
  }
    CFRelease(v7);
LABEL_14:
  xpc_release(object);
  xpc_object_t v8 = (const __CFString **)*MEMORY[0x263F26098];
  xpc_object_t v9 = xpc_dictionary_get_value(v2, (const char *)*MEMORY[0x263F26098]);
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf, (xpc *)&object, v10);
  xpc_object_t v11 = *(const void **)cf;
  if (*(void *)cf)
  {
    CFTypeID v12 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v12 == CFDataGetTypeID())
    {
      CFRetain(v11);
      xpc_object_t v13 = *(const void **)cf;
      if (!*(void *)cf) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  xpc_object_t v11 = 0;
  xpc_object_t v13 = *(const void **)cf;
  if (*(void *)cf) {
LABEL_22:
  }
    CFRelease(v13);
LABEL_23:
  xpc_release(object);
  uint64_t v14 = *MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  *(void *)CFTypeRef cf = 0;
  ctu::cf::convert_copy((ctu::cf *)cf, v8, (const char *)0x8000100, v14, v16);
  uint64_t v17 = *(const void **)cf;
  xpc_object_t object = *(xpc_object_t *)cf;
  *(void *)CFTypeRef cf = v11;
  if (v11)
  {
    CFRetain(v11);
    if (v17) {
      CFDictionaryAddValue(Mutable, v17, v11);
    }
    CFRelease(v11);
  }
  if (v17) {
    CFRelease(v17);
  }
  IOPMClaimSystemWakeEvent();
  uint64_t v18 = *((void *)this + 11);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFTypeRef cf = 138412802;
    *(void *)&cf[4] = @"com.apple.CommCenter";
    __int16 v21 = 2112;
    size_t v22 = v5;
    __int16 v23 = 2112;
    uint64_t v24 = Mutable;
    _os_log_impl(&dword_26368A000, v18, OS_LOG_TYPE_DEFAULT, "#I \n--- IOPM System Wake ---\nIdentity: %@\nReason: %@\nDetails: %@---", cf, 0x20u);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v5) {
    CFRelease(v5);
  }
  xpc_release(v2);
}

void sub_2637664BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  xpc_object_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void TransportModule::submitMetric_sync(TransportModule *this, xpc_object_t *a2)
{
  xpc_object_t v4 = *((void *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Submitting Wake Reason Info to AWD", buf, 2u);
  }
  uint64_t v5 = MEMORY[0x263E6A240](*a2);
  uint64_t v6 = MEMORY[0x263EF8708];
  if (v5 == MEMORY[0x263EF8708])
  {
    xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
    if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x263E6A240](v8) == v6)
      {
        xpc_retain(v8);
        xpc_object_t v9 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
    }
    xpc_release(v8);
    xpc_object_t v89 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v11 = v10;
    if (v10)
    {
      xpc_object_t v89 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v89 = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_19;
      }
    }
    if (MEMORY[0x263E6A240](v11) == v6)
    {
      xpc_retain(v11);
      goto LABEL_20;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_19:
    xpc_object_t v89 = v12;
LABEL_20:
    xpc_release(v11);
    size_t v13 = *MEMORY[0x263F260D0];
    xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F260D0]);
    BOOL v15 = value != 0;
    if (value)
    {
      *(void *)long long buf = a2;
      size_t v66 = v13;
      uint64_t v16 = *MEMORY[0x263F26790];
      char v86 = &v89;
      uint64_t v87 = v16;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v88);
      xpc_release(v88);
      xpc_object_t v88 = 0;
    }
    size_t v17 = *MEMORY[0x263F266B8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F266B8]))
    {
      *(void *)long long buf = a2;
      size_t v66 = v17;
      uint64_t v18 = *MEMORY[0x263F266E0];
      char v86 = &v89;
      uint64_t v87 = v18;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v85);
      xpc_release(v85);
      xpc_object_t v85 = 0;
      BOOL v15 = 1;
    }
    size_t v19 = *MEMORY[0x263F25FC0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F25FC0]))
    {
      *(void *)long long buf = a2;
      size_t v66 = v19;
      uint64_t v20 = *MEMORY[0x263F267E8];
      char v86 = &v89;
      uint64_t v87 = v20;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v84);
      xpc_release(v84);
      xpc_object_t v84 = 0;
      BOOL v15 = 1;
    }
    size_t v21 = *MEMORY[0x263F262C8];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F262C8]))
    {
      *(void *)long long buf = a2;
      size_t v66 = v21;
      uint64_t v22 = *MEMORY[0x263F26750];
      char v86 = &v89;
      uint64_t v87 = v22;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v83);
      xpc_release(v83);
      xpc_object_t v83 = 0;
      BOOL v15 = 1;
    }
    size_t v23 = *MEMORY[0x263F260A0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F260A0]))
    {
      *(void *)long long buf = a2;
      size_t v66 = v23;
      uint64_t v24 = *MEMORY[0x263F26668];
      char v86 = &v89;
      uint64_t v87 = v24;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v82);
      xpc_release(v82);
      xpc_object_t v82 = 0;
      BOOL v15 = 1;
    }
    uint64_t v25 = (const char *)*MEMORY[0x263F262D0];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F262D0]))
    {
      *(void *)long long buf = a2;
      size_t v66 = (size_t)v25;
      uint64_t v26 = *MEMORY[0x263F26758];
      char v86 = &v89;
      uint64_t v87 = v26;
      xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v81);
      xpc_release(v81);
      xpc_object_t v81 = 0;
      size_t v27 = *MEMORY[0x263F264D0];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F264D0]))
      {
        xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        *(void *)long long buf = a2;
        size_t v66 = v27;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &xdict);
        if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x263F26188]))
        {
          size_t v28 = *MEMORY[0x263F264D8];
          *(void *)long long buf = &xdict;
          size_t v66 = v28;
          uint64_t v29 = *MEMORY[0x263F266D8];
          char v86 = &v89;
          uint64_t v87 = v29;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          size_t v30 = *MEMORY[0x263F26438];
          *(void *)long long buf = &xdict;
          size_t v66 = v30;
          uint64_t v31 = *MEMORY[0x263F26690];
          char v86 = &v89;
          uint64_t v87 = v31;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v78);
          xpc_release(v78);
          xpc_object_t v78 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x263F26248]))
        {
          size_t v33 = *MEMORY[0x263F26390];
          *(void *)long long buf = &xdict;
          size_t v66 = v33;
          uint64_t v34 = *MEMORY[0x263F264A0];
          char v86 = &v89;
          uint64_t v87 = v34;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v77);
          xpc_release(v77);
          xpc_object_t v77 = 0;
          size_t v35 = *MEMORY[0x263F264E0];
          *(void *)long long buf = &xdict;
          size_t v66 = v35;
          uint64_t v36 = *MEMORY[0x263F265C0];
          char v86 = &v89;
          uint64_t v87 = v36;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v76);
          xpc_release(v76);
          xpc_object_t v76 = 0;
          size_t v37 = *MEMORY[0x263F26528];
          *(void *)long long buf = &xdict;
          size_t v66 = v37;
          uint64_t v38 = *MEMORY[0x263F26660];
          char v86 = &v89;
          uint64_t v87 = v38;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v75);
          xpc_release(v75);
          xpc_object_t v75 = 0;
          size_t v39 = *MEMORY[0x263F266A0];
          *(void *)long long buf = &xdict;
          size_t v66 = v39;
          uint64_t v40 = *MEMORY[0x263F265B8];
          char v86 = &v89;
          uint64_t v87 = v40;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v74);
          xpc_release(v74);
          xpc_object_t v74 = 0;
          size_t v41 = *MEMORY[0x263F26388];
          *(void *)long long buf = &xdict;
          size_t v66 = v41;
          uint64_t v42 = *MEMORY[0x263F26418];
          char v86 = &v89;
          uint64_t v87 = v42;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v73);
          xpc_release(v73);
          xpc_object_t v73 = 0;
        }
        else if (xpc::operator==<char const*>(*a2, v25, MEMORY[0x263F26240]))
        {
          size_t v43 = *MEMORY[0x263F26380];
          *(void *)long long buf = &xdict;
          size_t v66 = v43;
          uint64_t v44 = *MEMORY[0x263F264A0];
          char v86 = &v89;
          uint64_t v87 = v44;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v72);
          xpc_release(v72);
          xpc_object_t v72 = 0;
          size_t v45 = *MEMORY[0x263F264C8];
          *(void *)long long buf = &xdict;
          size_t v66 = v45;
          uint64_t v46 = *MEMORY[0x263F265C0];
          char v86 = &v89;
          uint64_t v87 = v46;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v71);
          xpc_release(v71);
          xpc_object_t v71 = 0;
          xpc::dict::object_proxy::operator xpc::object(buf, xdict, (char *)*MEMORY[0x263F264C0]);
          int v47 = xpc::dyn_cast_or_default((xpc *)buf, 0);
          xpc_release(*(xpc_object_t *)buf);
          xpc_object_t v69 = xpc_int64_create(v47 | 0x10000);
          if (!v69) {
            xpc_object_t v69 = xpc_null_create();
          }
          size_t v48 = *MEMORY[0x263F265B8];
          *(void *)long long buf = &v89;
          size_t v66 = v48;
          xpc::dict::object_proxy::operator=((uint64_t)buf, &v69, &v70);
          xpc_release(v70);
          xpc_object_t v70 = 0;
          xpc_release(v69);
          xpc_object_t v69 = 0;
          size_t v49 = *MEMORY[0x263F26388];
          *(void *)long long buf = &xdict;
          size_t v66 = v49;
          uint64_t v50 = *MEMORY[0x263F26418];
          char v86 = &v89;
          uint64_t v87 = v50;
          xpc::dict::object_proxy::operator=((uint64_t)&v86, (uint64_t)buf, &v68);
          xpc_release(v68);
          xpc_object_t v68 = 0;
        }
        xpc_release(xdict);
      }
    }
    else if (!v15)
    {
      long long v32 = *((void *)this + 11);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_26368A000, v32, OS_LOG_TYPE_ERROR, "Wake Reason data is missing", buf, 2u);
      }
      goto LABEL_63;
    }
    xpc_object_t v51 = xpc_string_create((const char *)*MEMORY[0x263F26898]);
    if (!v51) {
      xpc_object_t v51 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F25E20], v51);
    xpc_object_t v52 = xpc_null_create();
    xpc_release(v51);
    xpc_release(v52);
    xpc_object_t v53 = xpc_int64_create(524467);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F25ED0], v53);
    xpc_object_t v54 = xpc_null_create();
    xpc_release(v53);
    xpc_release(v54);
    xpc_object_t v55 = v89;
    if (v89) {
      xpc_retain(v89);
    }
    else {
      xpc_object_t v55 = xpc_null_create();
    }
    xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x263F25E18], v55);
    xpc_object_t v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    int v57 = (const void *)*MEMORY[0x263F261A0];
    size_t v58 = strlen((const char *)*MEMORY[0x263F261A0]);
    if (v58 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v59 = v58;
    if (v58 >= 0x17)
    {
      uint64_t v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v58 | 7) != 0x17) {
        uint64_t v61 = v58 | 7;
      }
      uint64_t v62 = v61 + 1;
      xpc_object_t v60 = operator new(v61 + 1);
      size_t v66 = v59;
      unint64_t v67 = v62 | 0x8000000000000000;
      *(void *)long long buf = v60;
    }
    else
    {
      HIBYTE(v67) = v58;
      xpc_object_t v60 = buf;
      if (!v58)
      {
        buf[0] = 0;
        xpc_object_t v64 = v9;
        if (v9)
        {
LABEL_55:
          xpc_retain(v9);
          goto LABEL_61;
        }
LABEL_60:
        xpc_object_t v64 = xpc_null_create();
LABEL_61:
        uint64_t v63 = 0;
        Service::runCommand((uint64_t)this, (uint64_t)buf, &v64, &v63);
        xpc_release(v64);
        xpc_object_t v64 = 0;
        if (SHIBYTE(v67) < 0) {
          operator delete(*(void **)buf);
        }
LABEL_63:
        xpc_release(v89);
        xpc_release(v9);
        return;
      }
    }
    memmove(v60, v57, v59);
    *((unsigned char *)v60 + v59) = 0;
    xpc_object_t v64 = v9;
    if (v9) {
      goto LABEL_55;
    }
    goto LABEL_60;
  }
  xpc_object_t v7 = *((void *)this + 11);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_26368A000, v7, OS_LOG_TYPE_ERROR, "Invalid Wake Reason dictionary", buf, 2u);
  }
}

void sub_263766F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,xpc_object_t a30)
{
  xpc_release(object);
  xpc_release(a30);
  xpc_release(*(xpc_object_t *)(v31 - 72));
  xpc_release(v30);
  _Unwind_Resume(a1);
}

BOOL xpc::operator==<char const*>(void *a1, const char *a2, const char **a3)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    xpc_object_t v5 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xpc_string_create(*a3);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  BOOL v7 = xpc_equal(v5, v6);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_263767140(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void TransportModule::finishInitialization_sync(TransportModule *this)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || (v3 = *((void *)this + 15), (xpc_object_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  xpc_object_t v6 = (const char *)(*(uint64_t (**)(TransportModule *))(*(void *)this + 16))(this);
  size_t v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    xpc_object_t v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    unint64_t v106 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v106) = v7;
    xpc_object_t v9 = __dst;
    if (!v7) {
      goto LABEL_13;
    }
  }
  memmove(v9, v6, (size_t)v8);
LABEL_13:
  *((unsigned char *)v8 + (void)v9) = 0;
  xpc_object_t v104 = 0;
  AppleBasebandManager::create();
  long long v12 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  size_t v13 = (std::__shared_weak_count *)*((void *)this + 26);
  *(_OWORD *)((char *)this + 200) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
  if (!*(void *)&buf[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v15 = v104;
    if (!v104) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  BOOL v15 = v104;
  if (v104) {
LABEL_19:
  }
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v106) < 0) {
    operator delete(__dst[0]);
  }
  GetABMLogServer(&v102);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 26);
  uint64_t v100 = *((void *)this + 25);
  xpc_object_t v101 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v17 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v17 || (uint64_t v18 = std::__shared_weak_count::lock(v17)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v19 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v21 = (std::__shared_weak_count *)*((void *)this + 22);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v19);
  if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
  uint64_t v22 = v103;
  if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = *((void *)this + 21);
  if (!v23)
  {
    char v65 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v65, OS_LOG_TYPE_FAULT)) {
      __break(1u);
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "fTransportService != NULL";
    __int16 v108 = 2080;
    xpc_object_t v109 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Transport/TransportModule.cpp";
    __int16 v110 = 1024;
    int v111 = 366;
    _os_log_fault_impl(&dword_26368A000, v65, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    __break(1u);
LABEL_166:
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (*((_DWORD *)this + 38))
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_37_2;
    void aBlock[4] = this;
    void aBlock[5] = v3;
    xpc_object_t v97 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v24 = _Block_copy(aBlock);
    uint64_t v25 = *((void *)this + 17);
    if (v25) {
      dispatch_retain(*((dispatch_object_t *)this + 17));
    }
    xpc_object_t v98 = v24;
    dispatch_object_t v99 = v25;
    (*(void (**)(uint64_t, const void **))(*(void *)v23 + 80))(v23, &v98);
    if (v99) {
      dispatch_release(v99);
    }
    if (v98) {
      _Block_release(v98);
    }
    if (v97) {
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  else
  {
    uint64_t v26 = *((void *)this + 11);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_26368A000, v26, OS_LOG_TYPE_DEFAULT, "#I Wake reason is not supported by this baseband", buf, 2u);
    }
  }
  memset(buf, 170, 16);
  v94[0] = MEMORY[0x263EF8330];
  v94[1] = 1174405120;
  v94[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_38;
  v94[3] = &__block_descriptor_tmp_42_2;
  v94[4] = this;
  v94[5] = v3;
  char v95 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v27 = _Block_copy(v94);
  uint64_t v28 = *((void *)this + 17);
  if (v28) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  *(void *)long long buf = v27;
  *(void *)&uint8_t buf[8] = v28;
  std::string::size_type v92 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v90[0] = MEMORY[0x263EF8330];
  v90[1] = 1174405120;
  v90[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_43;
  v90[3] = &__block_descriptor_tmp_47_2;
  v90[4] = this;
  v90[5] = v3;
  xpc_object_t v91 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v29 = _Block_copy(v90);
  size_t v30 = *((void *)this + 17);
  if (v30) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  std::string::size_type v92 = v29;
  dispatch_object_t object = v30;
  xpc_object_t v88 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v89 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v86[0] = MEMORY[0x263EF8330];
  v86[1] = 1174405120;
  v86[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_48;
  v86[3] = &__block_descriptor_tmp_51_2;
  v86[4] = this;
  v86[5] = v3;
  uint64_t v87 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v31 = _Block_copy(v86);
  long long v32 = *((void *)this + 17);
  if (v32) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v88 = v31;
  dispatch_object_t v89 = v32;
  xpc_object_t v84 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v85 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v82[0] = MEMORY[0x263EF8330];
  v82[1] = 1174405120;
  v82[2] = ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_52;
  v82[3] = &__block_descriptor_tmp_55_1;
  v82[4] = this;
  v82[5] = v3;
  xpc_object_t v83 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  size_t v33 = _Block_copy(v82);
  uint64_t v34 = *((void *)this + 17);
  if (v34) {
    dispatch_retain(*((dispatch_object_t *)this + 17));
  }
  xpc_object_t v84 = v33;
  dispatch_object_t v85 = v34;
  size_t v35 = (const void *)*MEMORY[0x263F26650];
  size_t v36 = strlen((const char *)*MEMORY[0x263F26650]);
  if (v36 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_166;
  }
  size_t v37 = (void *)v36;
  if (v36 >= 0x17)
  {
    uint64_t v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v40 = v36 | 7;
    }
    uint64_t v41 = v40 + 1;
    uint64_t v38 = operator new(v40 + 1);
    __p[1] = v37;
    unint64_t v81 = v41 | 0x8000000000000000;
    __p[0] = v38;
LABEL_70:
    memmove(v38, v35, (size_t)v37);
    *((unsigned char *)v37 + (void)v38) = 0;
    size_t v39 = v92;
    if (!v92) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  HIBYTE(v81) = v36;
  uint64_t v38 = __p;
  if (v36) {
    goto LABEL_70;
  }
  LOBYTE(__p[0]) = 0;
  size_t v39 = v92;
  if (v92) {
LABEL_71:
  }
    size_t v39 = _Block_copy(v39);
LABEL_72:
  xpc_object_t v78 = v39;
  dispatch_object_t v79 = object;
  if (object) {
    dispatch_retain(object);
  }
  AppleBasebandManager::setEventHandler();
  if (v79) {
    dispatch_release(v79);
  }
  if (v78) {
    _Block_release(v78);
  }
  if (SHIBYTE(v81) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = (const void *)*MEMORY[0x263F263F0];
  size_t v43 = strlen((const char *)*MEMORY[0x263F263F0]);
  if (v43 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_166;
  }
  uint64_t v44 = (void *)v43;
  if (v43 >= 0x17)
  {
    uint64_t v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17) {
      uint64_t v47 = v43 | 7;
    }
    uint64_t v48 = v47 + 1;
    size_t v45 = operator new(v47 + 1);
    v76[1] = v44;
    unint64_t v77 = v48 | 0x8000000000000000;
    v76[0] = v45;
LABEL_88:
    memmove(v45, v42, (size_t)v44);
    *((unsigned char *)v44 + (void)v45) = 0;
    uint64_t v46 = *(void **)buf;
    if (!*(void *)buf) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  HIBYTE(v77) = v43;
  size_t v45 = v76;
  if (v43) {
    goto LABEL_88;
  }
  LOBYTE(v76[0]) = 0;
  uint64_t v46 = *(void **)buf;
  if (*(void *)buf) {
LABEL_89:
  }
    uint64_t v46 = _Block_copy(v46);
LABEL_90:
  xpc_object_t v74 = v46;
  dispatch_object_t v75 = *(dispatch_object_t *)&buf[8];
  if (*(void *)&buf[8]) {
    dispatch_retain(*(dispatch_object_t *)&buf[8]);
  }
  AppleBasebandManager::setEventHandler();
  if (v75) {
    dispatch_release(v75);
  }
  if (v74) {
    _Block_release(v74);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(v76[0]);
  }
  size_t v49 = (const void *)*MEMORY[0x263F26518];
  size_t v50 = strlen((const char *)*MEMORY[0x263F26518]);
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_166;
  }
  xpc_object_t v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    uint64_t v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v54 = v50 | 7;
    }
    uint64_t v55 = v54 + 1;
    xpc_object_t v52 = operator new(v54 + 1);
    v72[1] = v51;
    unint64_t v73 = v55 | 0x8000000000000000;
    v72[0] = v52;
LABEL_106:
    memmove(v52, v49, (size_t)v51);
    *((unsigned char *)v51 + (void)v52) = 0;
    xpc_object_t v53 = v88;
    if (!v88) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }
  HIBYTE(v73) = v50;
  xpc_object_t v52 = v72;
  if (v50) {
    goto LABEL_106;
  }
  LOBYTE(v72[0]) = 0;
  xpc_object_t v53 = v88;
  if (v88) {
LABEL_107:
  }
    xpc_object_t v53 = _Block_copy(v53);
LABEL_108:
  xpc_object_t v70 = v53;
  dispatch_object_t v71 = v89;
  if (v89) {
    dispatch_retain(v89);
  }
  AppleBasebandManager::setEventHandler();
  if (v71) {
    dispatch_release(v71);
  }
  if (v70) {
    _Block_release(v70);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete(v72[0]);
  }
  xpc_object_t v56 = (const void *)*MEMORY[0x263F263F8];
  size_t v57 = strlen((const char *)*MEMORY[0x263F263F8]);
  if (v57 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_166;
  }
  size_t v58 = (void *)v57;
  if (v57 >= 0x17)
  {
    uint64_t v63 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17) {
      uint64_t v63 = v57 | 7;
    }
    uint64_t v64 = v63 + 1;
    size_t v59 = operator new(v63 + 1);
    v68[1] = v58;
    unint64_t v69 = v64 | 0x8000000000000000;
    v68[0] = v59;
  }
  else
  {
    HIBYTE(v69) = v57;
    size_t v59 = v68;
    if (!v57)
    {
      LOBYTE(v68[0]) = 0;
      xpc_object_t v60 = v84;
      if (v84) {
        goto LABEL_120;
      }
      goto LABEL_157;
    }
  }
  memmove(v59, v56, (size_t)v58);
  *((unsigned char *)v58 + (void)v59) = 0;
  xpc_object_t v60 = v84;
  if (v84)
  {
LABEL_120:
    uint64_t v61 = _Block_copy(v60);
    uint64_t v62 = v85;
    size_t v66 = v61;
    unint64_t v67 = v85;
    if (!v85) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }
LABEL_157:
  uint64_t v62 = v85;
  size_t v66 = 0;
  unint64_t v67 = v85;
  if (v85) {
LABEL_121:
  }
    dispatch_retain(v62);
LABEL_122:
  AppleBasebandManager::setEventHandler();
  if (v67) {
    dispatch_release(v67);
  }
  if (v66) {
    _Block_release(v66);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[0]);
  }
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 25));
  if (v62) {
    dispatch_release(v62);
  }
  if (v60) {
    _Block_release(v60);
  }
  if (v83) {
    std::__shared_weak_count::__release_weak(v83);
  }
  if (v89) {
    dispatch_release(v89);
  }
  if (v88) {
    _Block_release(v88);
  }
  if (v87) {
    std::__shared_weak_count::__release_weak(v87);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v92) {
    _Block_release(v92);
  }
  if (v91) {
    std::__shared_weak_count::__release_weak(v91);
  }
  if (*(void *)&buf[8]) {
    dispatch_release(*(dispatch_object_t *)&buf[8]);
  }
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  if (v95) {
    std::__shared_weak_count::__release_weak(v95);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_263767D8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    xpc_object_t v6 = std::__shared_weak_count::lock(v3);
    xpc_object_t v52 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v11 = v6;
LABEL_92:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      size_t v7 = (_DWORD *)(v5 + 152);
      int v8 = *(_DWORD *)(v5 + 152);
      xpc_object_t v9 = *(xpc_object_t *)(v5 + 160);
      if (v9)
      {
        xpc_retain(*(xpc_object_t *)(v5 + 160));
        _DWORD *v7 = *(_DWORD *)a2;
        xpc_object_t v10 = *(xpc_object_t *)(a2 + 8);
        if (v10)
        {
LABEL_6:
          xpc_retain(v10);
          goto LABEL_10;
        }
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        _DWORD *v7 = *(_DWORD *)a2;
        xpc_object_t v10 = *(xpc_object_t *)(a2 + 8);
        if (v10) {
          goto LABEL_6;
        }
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_10:
      long long v12 = *(void **)(v5 + 160);
      *(void *)(v5 + 160) = v10;
      xpc_release(v12);
      if (v8 != 2) {
        goto LABEL_91;
      }
      if (*v7 != 3)
      {
        BOOL v15 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          size_t v27 = SHIBYTE(v56) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v27;
          _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "Baseband wake data (Error): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v56) < 0) {
            operator delete(block);
          }
        }
        uint64_t v16 = *(void *)(v5 + 184);
        if (v16)
        {
          *(void *)&long long buf = MEMORY[0x263EF8330];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v61 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
          uint64_t v62 = &__block_descriptor_tmp_61;
          uint64_t v63 = v16;
          p_long long buf = &buf;
          uint64_t block = (void **)MEMORY[0x263EF8330];
          uint64_t v55 = 0x40000000;
          xpc_object_t v56 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          size_t v57 = &__block_descriptor_tmp_55;
          uint64_t v58 = v16 + 72;
          p_p_long long buf = &p_buf;
          size_t v17 = *(NSObject **)(v16 + 88);
          if (*(void *)(v16 + 96)) {
            dispatch_async_and_wait(v17, &block);
          }
          else {
            dispatch_sync(v17, &block);
          }
        }
LABEL_91:
        xpc_release(v9);
        uint64_t v11 = v52;
        if (!v52) {
          return;
        }
        goto LABEL_92;
      }
      size_t v13 = *(void **)(v5 + 160);
      xpc_object_t xdict = v13;
      if (v13)
      {
        xpc_retain(v13);
        xpc_object_t v14 = xdict;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t xdict = v14;
      }
      uint64_t v18 = MEMORY[0x263E6A240](v14);
      uint64_t v19 = MEMORY[0x263EF8708];
      if (v18 == MEMORY[0x263EF8708])
      {
        *(void *)&long long buf = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v22 = *MEMORY[0x263F264D0];
        uint64_t block = &xdict;
        uint64_t v55 = v22;
        xpc::dict::object_proxy::operator xpc::dict((uint64_t)&block, &buf);
        xpc_object_t value = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x263F266B8]);
        uint64_t block = value;
        if (value) {
          xpc_retain(value);
        }
        else {
          uint64_t block = (void **)xpc_null_create();
        }
        int v21 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        uint64_t v24 = (void **)xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x263F262C8]);
        uint64_t block = v24;
        if (v24) {
          xpc_retain(v24);
        }
        else {
          uint64_t block = (void **)xpc_null_create();
        }
        int v20 = xpc::dyn_cast_or_default((xpc *)&block, 0);
        xpc_release(block);
        if (MEMORY[0x263E6A240](buf) == v19)
        {
          uint64_t v26 = (void **)xpc_dictionary_get_value((xpc_object_t)buf, (const char *)*MEMORY[0x263F26388]);
          uint64_t block = v26;
          if (v26) {
            xpc_retain(v26);
          }
          else {
            uint64_t block = (void **)xpc_null_create();
          }
          char v25 = xpc::dyn_cast_or_default((xpc *)&block, 0);
          xpc_release(block);
        }
        else
        {
          char v25 = 0;
        }
        xpc_release((xpc_object_t)buf);
        if (v25) {
          goto LABEL_55;
        }
      }
      else
      {
        int v20 = 0;
        int v21 = 0;
      }
      uint64_t v28 = *(void *)(v5 + 184);
      if (v28)
      {
        *(void *)&long long buf = MEMORY[0x263EF8330];
        *((void *)&buf + 1) = 0x40000000;
        uint64_t v61 = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        uint64_t v62 = &__block_descriptor_tmp_61;
        uint64_t v63 = v28;
        p_long long buf = &buf;
        uint64_t block = (void **)MEMORY[0x263EF8330];
        uint64_t v55 = 0x40000000;
        xpc_object_t v56 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        size_t v57 = &__block_descriptor_tmp_55;
        uint64_t v58 = v28 + 72;
        p_p_long long buf = &p_buf;
        uint64_t v29 = *(NSObject **)(v28 + 88);
        if (*(void *)(v28 + 96))
        {
          dispatch_async_and_wait(v29, &block);
          if ((v21 & 1) == 0) {
            goto LABEL_43;
          }
LABEL_56:
          TransportModule::claimSystemWake_sync((TransportModule *)v5);
          TransportModule::notifyWakeToNetworkStack_sync((TransportModule *)v5);
          uint64_t v34 = (const void *)*MEMORY[0x263F26348];
          size_t v35 = strlen((const char *)*MEMORY[0x263F26348]);
          if (v35 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v36 = (void *)v35;
          if (v35 >= 0x17)
          {
            uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v35 | 7) != 0x17) {
              uint64_t v38 = v35 | 7;
            }
            uint64_t v39 = v38 + 1;
            size_t v37 = (void **)operator new(v38 + 1);
            __dst[1] = v36;
            unint64_t v49 = v39 | 0x8000000000000000;
            __dst[0] = v37;
          }
          else
          {
            HIBYTE(v49) = v35;
            size_t v37 = __dst;
            if (!v35)
            {
LABEL_64:
              *((unsigned char *)v36 + (void)v37) = 0;
              xpc_object_t v40 = *(xpc_object_t *)(v5 + 160);
              if (v40)
              {
                xpc_retain(*(xpc_object_t *)(v5 + 160));
                *(void *)&long long buf = v40;
              }
              else
              {
                xpc_object_t v40 = xpc_null_create();
                *(void *)&long long buf = v40;
                if (!v40)
                {
                  xpc_object_t v40 = 0;
                  *(void *)&long long buf = xpc_null_create();
LABEL_70:
                  xpc::bridge((uint64_t *)&block, (xpc *)&buf, v41);
                  uint64_t v42 = block;
                  if (block && (CFTypeID v43 = CFGetTypeID(block), v43 == CFDictionaryGetTypeID()))
                  {
                    CFTypeRef cf = v42;
                    CFRetain(v42);
                  }
                  else
                  {
                    CFTypeRef cf = 0;
                  }
                  aBlock = 0;
                  Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
                  if (aBlock) {
                    _Block_release(aBlock);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (block) {
                    CFRelease(block);
                  }
                  xpc_release((xpc_object_t)buf);
                  *(void *)&long long buf = 0;
                  xpc_release(v40);
                  if (SHIBYTE(v49) < 0) {
                    operator delete(__dst[0]);
                  }
                  uint64_t v44 = *(NSObject **)(v5 + 88);
                  if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_89;
                  }
                  WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
                  if (SHIBYTE(v56) >= 0) {
                    p_uint64_t block = &block;
                  }
                  else {
                    p_uint64_t block = (void ***)block;
                  }
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = p_block;
                  _os_log_impl(&dword_26368A000, v44, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did wake AP): %s", (uint8_t *)&buf, 0xCu);
                  goto LABEL_87;
                }
              }
              xpc_retain(v40);
              goto LABEL_70;
            }
          }
          memmove(v37, v34, (size_t)v36);
          goto LABEL_64;
        }
        dispatch_sync(v29, &block);
        if (v21) {
          goto LABEL_56;
        }
LABEL_43:
        size_t v30 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
          uint64_t v31 = SHIBYTE(v56) >= 0 ? (void **)&block : block;
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_26368A000, v30, OS_LOG_TYPE_DEFAULT, "#I Baseband wake data (Did NOT wake AP): %s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v56) < 0) {
            operator delete(block);
          }
        }
        if (!v20) {
          goto LABEL_90;
        }
        long long v32 = *(NSObject **)(v5 + 88);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
LABEL_89:
          TransportModule::submitMetric_sync((TransportModule *)v5, &xdict);
LABEL_90:
          xpc_release(xdict);
          goto LABEL_91;
        }
        WakeReason::describe((WakeReason *)&block, (_DWORD *)(v5 + 152));
        if (SHIBYTE(v56) >= 0) {
          size_t v33 = &block;
        }
        else {
          size_t v33 = (void ***)block;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_26368A000, v32, OS_LOG_TYPE_ERROR, "System and Baseband wake reason mismatch: %s", (uint8_t *)&buf, 0xCu);
LABEL_87:
        if (SHIBYTE(v56) < 0) {
          operator delete(block);
        }
        goto LABEL_89;
      }
LABEL_55:
      if (v21) {
        goto LABEL_56;
      }
      goto LABEL_43;
    }
  }
}

void sub_2637686F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, char a19, uint64_t a20,uint64_t a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void TransportModule::notifyWakeToNetworkStack_sync(TransportModule *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 38) == 3)
  {
    xpc_object_t v2 = (xpc_object_t)*((void *)this + 20);
    if (v2) {
      xpc_retain(*((xpc_object_t *)this + 20));
    }
    else {
      xpc_object_t v2 = xpc_null_create();
    }
    if (xpc::operator==<char const*>(MEMORY[0x263F26108], v2, (char *)*MEMORY[0x263F260A0])
      && xpc::operator==<char const*>(MEMORY[0x263F26188], v2, (char *)*MEMORY[0x263F262D0]))
    {
      int v7 = 15;
      int v3 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_notify", 0, 0, &v7, 4uLL);
      xpc_object_t v4 = *((void *)this + 11);
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          uint64_t v5 = __error();
          xpc_object_t v6 = strerror(*v5);
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v9 = v6;
          _os_log_error_impl(&dword_26368A000, v4, OS_LOG_TYPE_ERROR, "Failed to notify networking stack about Baseband wake packet, error: (%s)", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Notified networking stack about Baseband wake packet", buf, 2u);
      }
    }
    xpc_release(v2);
  }
}

void sub_2637689DC(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WakeReason::describe(WakeReason *this, _DWORD *a2)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  void v34[6] = v4;
  v34[3] = v4;
  void v34[4] = v4;
  v34[1] = v4;
  uint64_t v34[2] = v4;
  v34[0] = v4;
  long long v32 = v4;
  long long v33 = v4;
  long long v30 = v4;
  *(_OWORD *)uint64_t v31 = v4;
  long long v28 = v4;
  long long v29 = v4;
  long long v27 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"WakeStatus:'", 12);
  switch(*a2)
  {
    case 0:
      uint64_t v6 = 13;
      int v7 = "kNotSupported";
      goto LABEL_8;
    case 1:
      uint64_t v6 = 13;
      int v7 = "kNotAvailable";
LABEL_8:
      char v26 = 13;
      __p[0] = *(void **)v7;
      *(void **)((char *)__p + 5) = *(void **)(v7 + 5);
      BYTE5(__p[1]) = 0;
      break;
    case 2:
      uint64_t v6 = 10;
      char v26 = 10;
      LOWORD(__p[1]) = 25701;
      int v8 = "kRequested";
      goto LABEL_6;
    case 3:
      uint64_t v6 = 10;
      char v26 = 10;
      LOWORD(__p[1]) = 25964;
      int v8 = "kAvailable";
LABEL_6:
      __p[0] = *(void **)v8;
      BYTE2(__p[1]) = 0;
      break;
    case 4:
      uint64_t v6 = 6;
      char v26 = 6;
      strcpy((char *)__p, "kError");
      break;
    default:
      uint64_t v6 = 8;
      char v26 = 8;
      strcpy((char *)__p, "kInvalid");
      break;
  }
  xpc_object_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"'", 1);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)a2 + 1);
  uint64_t v10 = (xpc::object *)(a2 + 2);
  if (MEMORY[0x263E6A240](v11) == MEMORY[0x263EF8708])
  {
    long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" WakeData:'", 11);
    xpc::object::to_string((uint64_t *)__p, v10);
    size_t v13 = v26 >= 0 ? __p : (void **)__p[0];
    xpc_object_t v14 = v26 >= 0 ? (void *)v26 : __p[1];
    BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    if (v26 < 0)
    {
      operator delete(__p[0]);
      char v16 = BYTE8(v33);
      if ((BYTE8(v33) & 0x10) == 0) {
        goto LABEL_21;
      }
LABEL_25:
      uint64_t v19 = v33;
      if ((unint64_t)v33 < *((void *)&v30 + 1))
      {
        *(void *)&long long v33 = *((void *)&v30 + 1);
        uint64_t v19 = *((void *)&v30 + 1);
      }
      uint64_t v18 = (const void **)&v30;
      goto LABEL_28;
    }
  }
  char v16 = BYTE8(v33);
  if ((BYTE8(v33) & 0x10) != 0) {
    goto LABEL_25;
  }
LABEL_21:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    *((unsigned char *)this + 23) = 0;
    goto LABEL_36;
  }
  uint64_t v18 = (const void **)&v28 + 1;
  uint64_t v19 = *((void *)&v29 + 1);
LABEL_28:
  int v20 = *v18;
  size_t v17 = v19 - (void)*v18;
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v23 = (WakeReason *)operator new(v21 + 1);
    *((void *)this + 1) = v17;
    *((void *)this + 2) = v22 | 0x8000000000000000;
    *(void *)this = v23;
    this = v23;
    goto LABEL_35;
  }
  *((unsigned char *)this + 23) = v17;
  if (v17) {
LABEL_35:
  }
    memmove(this, v20, v17);
LABEL_36:
  *((unsigned char *)this + v17) = 0;
  *(void *)&long long v27 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v27 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x263E69630](v34);
}

void sub_263768DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_38(void *a1, abm::client::Event **a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v61 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        BOOL v15 = v6;
LABEL_64:
        if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      int v7 = v5[11];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
      }
      int v8 = (void *)v5[23];
      if (v8)
      {
        __dst[0] = (void *)MEMORY[0x263EF8330];
        __dst[1] = (void *)0x40000000;
        _OWORD __dst[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
        __dst[3] = &__block_descriptor_tmp_60;
        __p[0] = __dst;
        __dst[4] = v8;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        char v65 = &__block_descriptor_tmp_55;
        size_t v66 = v8 + 9;
        unint64_t v67 = __p;
        xpc_object_t v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, buf);
          uint64_t v10 = v5[21];
          if (!v10)
          {
LABEL_11:
            CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData((uint64_t *)&cf, *a2);
            v58[0] = 0xAAAAAAAAAAAAAAAALL;
            v58[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v58, (const __CFDictionary *)cf);
            memset(buf, 170, sizeof(buf));
            uint64_t v11 = (const void *)*MEMORY[0x263F25F88];
            size_t v12 = strlen((const char *)*MEMORY[0x263F25F88]);
            if (v12 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v13 = (void *)v12;
            if (v12 >= 0x17)
            {
              uint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v12 | 7) != 0x17) {
                uint64_t v16 = v12 | 7;
              }
              uint64_t v17 = v16 + 1;
              xpc_object_t v14 = (void **)operator new(v16 + 1);
              __dst[1] = v13;
              _OWORD __dst[2] = (void *)(v17 | 0x8000000000000000);
              __dst[0] = v14;
            }
            else
            {
              HIBYTE(__dst[2]) = v12;
              xpc_object_t v14 = __dst;
              if (!v12)
              {
LABEL_20:
                uint64_t v18 = (const char *)*MEMORY[0x263F26030];
                *((unsigned char *)v13 + (void)v14) = 0;
                ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, v18);
                ctu::cf::map_adapter::getString();
                MEMORY[0x263E68C90](__p);
                if (SHIBYTE(__dst[2]) < 0) {
                  operator delete(__dst[0]);
                }
                memset(__dst, 170, 24);
                uint64_t v19 = (const void *)*MEMORY[0x263F204D0];
                size_t v20 = strlen((const char *)*MEMORY[0x263F204D0]);
                if (v20 > 0x7FFFFFFFFFFFFFF7) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                uint64_t v21 = (void *)v20;
                if (v20 >= 0x17)
                {
                  uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v20 | 7) != 0x17) {
                    uint64_t v23 = v20 | 7;
                  }
                  uint64_t v24 = v23 + 1;
                  uint64_t v22 = operator new(v23 + 1);
                  __p[1] = v21;
                  xpc_object_t __p[2] = (void *)(v24 | 0x8000000000000000);
                  __p[0] = v22;
                }
                else
                {
                  HIBYTE(__p[2]) = v20;
                  uint64_t v22 = __p;
                  if (!v20)
                  {
LABEL_30:
                    char v25 = (const char *)*MEMORY[0x263F26218];
                    *((unsigned char *)v21 + (void)v22) = 0;
                    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v68, v25);
                    ctu::cf::map_adapter::getString();
                    MEMORY[0x263E68C90](&v68);
                    if (SHIBYTE(__p[2]) < 0) {
                      operator delete(__p[0]);
                    }
                    memset(__p, 170, sizeof(__p));
                    char v26 = (const char *)*MEMORY[0x263F26230];
                    size_t v27 = strlen((const char *)*MEMORY[0x263F26230]);
                    if (v27 > 0x7FFFFFFFFFFFFFF7) {
                      std::string::__throw_length_error[abi:ne180100]();
                    }
                    std::string::size_type v28 = v27;
                    if (v27 >= 0x17)
                    {
                      uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v27 | 7) != 0x17) {
                        uint64_t v30 = v27 | 7;
                      }
                      uint64_t v31 = v30 + 1;
                      long long v29 = (std::string *)operator new(v30 + 1);
                      v68.__r_.__value_.__l.__size_ = v28;
                      v68.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
                      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
                    }
                    else
                    {
                      *((unsigned char *)&v68.__r_.__value_.__s + 23) = v27;
                      long long v29 = &v68;
                      if (!v27)
                      {
LABEL_40:
                        long long v32 = (const char *)*MEMORY[0x263F26150];
                        v29->__r_.__value_.__s.__data_[v28] = 0;
                        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v62, v32);
                        ctu::cf::map_adapter::getString();
                        MEMORY[0x263E68C90](&v62);
                        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v68.__r_.__value_.__l.__data_);
                        }
                        int v33 = SHIBYTE(__p[2]);
                        if (SHIBYTE(__p[2]) >= 0) {
                          size_t v34 = HIBYTE(__p[2]);
                        }
                        else {
                          size_t v34 = (size_t)__p[1];
                        }
                        if (v34 == strlen(v26)
                          && (SHIBYTE(__p[2]) >= 0 ? (unint64_t v35 = __p) : (unint64_t v35 = (void **)__p[0]), !memcmp(v35, v26, v34)))
                        {
                          uint64_t v39 = v5[21];
                          if (v39)
                          {
                            xpc_object_t v40 = (const void *)*MEMORY[0x263F204C8];
                            int v41 = SHIBYTE(__dst[2]);
                            if (SHIBYTE(__dst[2]) >= 0) {
                              size_t v42 = HIBYTE(__dst[2]);
                            }
                            else {
                              size_t v42 = (size_t)__dst[1];
                            }
                            size_t v43 = strlen((const char *)*MEMORY[0x263F204C8]);
                            std::string::size_type v44 = v42 + v43;
                            memset(&v68, 170, sizeof(v68));
                            if (v42 + v43 > 0x7FFFFFFFFFFFFFF7) {
                              std::string::__throw_length_error[abi:ne180100]();
                            }
                            size_t v45 = v43;
                            if (v44 > 0x16)
                            {
                              uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v44 | 7) != 0x17) {
                                uint64_t v47 = v44 | 7;
                              }
                              uint64_t v48 = v47 + 1;
                              uint64_t v46 = (std::string *)operator new(v47 + 1);
                              v68.__r_.__value_.__l.__size_ = v44;
                              v68.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
                              v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
                            }
                            else
                            {
                              memset(&v68, 0, sizeof(v68));
                              uint64_t v46 = &v68;
                              *((unsigned char *)&v68.__r_.__value_.__s + 23) = v42 + v43;
                            }
                            if (v42)
                            {
                              if (v41 >= 0) {
                                unint64_t v49 = __dst;
                              }
                              else {
                                unint64_t v49 = (void **)__dst[0];
                              }
                              memmove(v46, v49, v42);
                            }
                            size_t v50 = (char *)v46 + v42;
                            if (v45) {
                              memmove(v50, v40, v45);
                            }
                            v50[v45] = 0;
                            if ((buf[23] & 0x80u) == 0) {
                              xpc_object_t v51 = buf;
                            }
                            else {
                              xpc_object_t v51 = *(uint8_t **)buf;
                            }
                            if ((buf[23] & 0x80u) == 0) {
                              std::string::size_type v52 = buf[23];
                            }
                            else {
                              std::string::size_type v52 = *(void *)&buf[8];
                            }
                            xpc_object_t v53 = std::string::append(&v68, (const std::string::value_type *)v51, v52);
                            long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                            std::string::size_type v56 = v53->__r_.__value_.__r.__words[2];
                            *(_OWORD *)uint64_t v55 = v54;
                            v53->__r_.__value_.__l.__size_ = 0;
                            v53->__r_.__value_.__r.__words[2] = 0;
                            v53->__r_.__value_.__r.__words[0] = 0;
                            (*(void (**)(uint64_t, void **))(*(void *)v39 + 48))(v39, v55);
                            if (SHIBYTE(v56) < 0) {
                              operator delete(v55[0]);
                            }
                            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v68.__r_.__value_.__l.__data_);
                            }
                          }
                        }
                        else
                        {
                          size_t v36 = v5[11];
                          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                          {
                            size_t v37 = (void **)__p[0];
                            if (v33 >= 0) {
                              size_t v37 = __p;
                            }
                            LODWORD(v68.__r_.__value_.__l.__data_) = 136315138;
                            *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
                            _os_log_impl(&dword_26368A000, v36, OS_LOG_TYPE_DEFAULT, "#I Skipping snapshot as trace filter is '%s'", (uint8_t *)&v68, 0xCu);
                          }
                        }
                        if (SHIBYTE(__p[2]) < 0)
                        {
                          operator delete(__p[0]);
                          if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                          {
LABEL_56:
                            if (((char)buf[23] & 0x80000000) == 0) {
                              goto LABEL_57;
                            }
                            goto LABEL_61;
                          }
                        }
                        else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_56;
                        }
                        operator delete(__dst[0]);
                        if (((char)buf[23] & 0x80000000) == 0)
                        {
LABEL_57:
                          MEMORY[0x263E68CD0](v58);
                          CFTypeRef v38 = cf;
                          if (!cf)
                          {
LABEL_63:
                            BOOL v15 = v61;
                            if (!v61) {
                              return;
                            }
                            goto LABEL_64;
                          }
LABEL_62:
                          CFRelease(v38);
                          goto LABEL_63;
                        }
LABEL_61:
                        operator delete(*(void **)buf);
                        MEMORY[0x263E68CD0](v58);
                        CFTypeRef v38 = cf;
                        if (!cf) {
                          goto LABEL_63;
                        }
                        goto LABEL_62;
                      }
                    }
                    memmove(v29, v26, v28);
                    goto LABEL_40;
                  }
                }
                memmove(v22, v19, (size_t)v21);
                goto LABEL_30;
              }
            }
            memmove(v14, v11, (size_t)v13);
            goto LABEL_20;
          }
LABEL_10:
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
          goto LABEL_11;
        }
        dispatch_async_and_wait(v9, buf);
      }
      uint64_t v10 = v5[21];
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
}

void sub_263769558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v43 - 89) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a35 < 0) {
          operator delete(a30);
        }
        if (a43 < 0) {
          operator delete(a38);
        }
        MEMORY[0x263E68CD0](&a22);
        ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
        std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v43 - 89) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v43 - 112));
  if ((a21 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_43(void *a1, abm::client::Event **a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    size_t v34 = v6;
    if (v6)
    {
      int v7 = v6;
      if (!a1[5]) {
        goto LABEL_68;
      }
      int v8 = *(void **)(v5 + 184);
      if (v8)
      {
        __p[0] = (void *)MEMORY[0x263EF8330];
        __p[1] = (void *)0x40000000;
        xpc_object_t __p[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
        __p[3] = &__block_descriptor_tmp_61;
        v29[0] = __p;
        __p[4] = v8;
        block[0] = (void *)MEMORY[0x263EF8330];
        block[1] = (void *)0x40000000;
        block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
        block[3] = &__block_descriptor_tmp_55;
        void block[4] = v8 + 9;
        void block[5] = v29;
        xpc_object_t v9 = v8[11];
        if (!v8[12])
        {
          dispatch_sync(v9, block);
          uint64_t v27 = *(void *)(v5 + 168);
          uint64_t v10 = (void (****)(void))(v5 + 168);
          if (v27)
          {
LABEL_8:
            CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
            abm::client::Event::getData((uint64_t *)&cf, *a2);
            CFTypeRef v12 = cf;
            if (cf) {
              size_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              size_t v13 = 0;
            }
            if (!v13)
            {
LABEL_66:
              if (v12) {
                CFRelease(v12);
              }
              goto LABEL_68;
            }
            v31[0] = 0xAAAAAAAAAAAAAAAALL;
            v31[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v31, (const __CFDictionary *)cf);
            memset(block, 170, 24);
            xpc_object_t v14 = (const char *)*MEMORY[0x263F26140];
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v29, v14);
            ctu::cf::map_adapter::getString();
            MEMORY[0x263E68C90](v29);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            memset(__p, 170, 24);
            BOOL v15 = (const char *)*MEMORY[0x263F26148];
            char v30 = 0;
            LOBYTE(v29[0]) = 0;
            ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v35, v15);
            ctu::cf::map_adapter::getString();
            MEMORY[0x263E68C90](&v35);
            if (v30 < 0) {
              operator delete(v29[0]);
            }
            size_t v16 = HIBYTE(block[2]);
            int v17 = SHIBYTE(block[2]);
            uint64_t v18 = block[1];
            if (SHIBYTE(block[2]) >= 0) {
              size_t v19 = HIBYTE(block[2]);
            }
            else {
              size_t v19 = (size_t)block[1];
            }
            if (v19 == strlen((const char *)*MEMORY[0x263F26308]))
            {
              size_t v20 = SHIBYTE(block[2]) >= 0 ? block : (void **)block[0];
              if (!memcmp(v20, (const void *)*MEMORY[0x263F26308], v19))
              {
                (**v10)[1]();
                std::string::size_type v28 = **v10;
LABEL_60:
                (*v28)();
                goto LABEL_61;
              }
            }
            if (v19 == strlen((const char *)*MEMORY[0x263F26508]))
            {
              uint64_t v21 = v17 >= 0 ? block : (void **)block[0];
              if (!memcmp(v21, (const void *)*MEMORY[0x263F26508], v19))
              {
                uint64_t v22 = SHIBYTE(__p[2]) >= 0 ? (void *)HIBYTE(__p[2]) : __p[1];
                if (v22 == (void *)strlen((const char *)*MEMORY[0x263F26178]))
                {
                  uint64_t v23 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
                  if (!memcmp(v23, (const void *)*MEMORY[0x263F26178], (size_t)v22))
                  {
                    if (((uint64_t (*)(void))(**v10)[11])())
                    {
LABEL_59:
                      std::string::size_type v28 = **v10 + 2;
                      goto LABEL_60;
                    }
                    size_t v16 = HIBYTE(block[2]);
                    uint64_t v18 = block[1];
                    LOBYTE(v17) = HIBYTE(block[2]);
                  }
                }
              }
            }
            if ((v17 & 0x80u) == 0) {
              size_t v24 = v16;
            }
            else {
              size_t v24 = (size_t)v18;
            }
            if (v24 != strlen((const char *)*MEMORY[0x263F26478])
              || ((v17 & 0x80u) == 0 ? (char v25 = block) : (char v25 = (void **)block[0]),
                  memcmp(v25, (const void *)*MEMORY[0x263F26478], v24)))
            {
              if (v24 == strlen((const char *)*MEMORY[0x263F26630]))
              {
                char v26 = (v17 & 0x80u) == 0 ? block : (void **)block[0];
                if (!memcmp(v26, (const void *)*MEMORY[0x263F26630], v24))
                {
                  (**v10)[2]();
                  (**v10)[7]();
                  std::shared_ptr<TransportService>::reset[abi:ne180100](v10);
                }
              }
              goto LABEL_61;
            }
            if (((unsigned int (*)(void))(**v10)[11])()
              && (!((unsigned int (*)(void))(**v10)[11])()
               || !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (char *)*MEMORY[0x263F26180])))
            {
LABEL_61:
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(block[2]) < 0) {
                operator delete(block[0]);
              }
              MEMORY[0x263E68CD0](v31);
              CFTypeRef v12 = cf;
              goto LABEL_66;
            }
            goto LABEL_59;
          }
LABEL_68:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        dispatch_async_and_wait(v9, block);
      }
      uint64_t v11 = *(void *)(v5 + 168);
      uint64_t v10 = (void (****)(void))(v5 + 168);
      if (v11) {
        goto LABEL_8;
      }
      goto LABEL_68;
    }
  }
}

void sub_263769C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  MEMORY[0x263E68CD0](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_263769CC4()
{
}

void sub_263769CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_48(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (a1[5])
  {
    uint64_t v6 = *(void *)(v3 + 184);
    if (!v6) {
      goto LABEL_7;
    }
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 0x40000000;
    v9[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v9[3] = &__block_descriptor_tmp_61;
    v9[4] = v6;
    uint64_t v10 = v9;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = v6 + 72;
    void block[5] = &v10;
    int v7 = *(NSObject **)(v6 + 88);
    if (*(void *)(v6 + 96))
    {
      dispatch_async_and_wait(v7, block);
LABEL_7:
      uint64_t v8 = *(void *)(v3 + 168);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    dispatch_sync(v7, block);
    uint64_t v8 = *(void *)(v3 + 168);
    if (v8) {
LABEL_8:
    }
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
LABEL_9:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_263769E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN15TransportModule25finishInitialization_syncEv_block_invoke_52(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[5];
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        int v7 = v3[11];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_26368A000, v7, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Transport state ---------------", buf, 2u);
        }
        uint64_t v8 = v3[23];
        if (v8)
        {
          v11[0] = MEMORY[0x263EF8330];
          v11[1] = 0x40000000;
          uint64_t v11[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
          v11[3] = &__block_descriptor_tmp_60;
          v11[4] = v8;
          CFTypeRef v12 = v11;
          *(void *)long long buf = MEMORY[0x263EF8330];
          uint64_t v14 = 0x40000000;
          BOOL v15 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
          size_t v16 = &__block_descriptor_tmp_55;
          uint64_t v17 = v8 + 72;
          uint64_t v18 = &v12;
          xpc_object_t v9 = *(NSObject **)(v8 + 88);
          if (!*(void *)(v8 + 96))
          {
            dispatch_sync(v9, buf);
            uint64_t v10 = v3[21];
            if (!v10) {
              return;
            }
LABEL_12:
            (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
            return;
          }
          dispatch_async_and_wait(v9, buf);
        }
        uint64_t v10 = v3[21];
        if (!v10) {
          return;
        }
        goto LABEL_12;
      }
    }
  }
}

void TransportModule::sleep(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void TransportModule::wake(void *a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *uint64_t v8 = a1;
  v8[1] = v3;
  xpc_object_t v9 = a1[17];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  _DWORD v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

BOOL xpc::operator==<char const*>(const char **a1, xpc_object_t xdict, char *key)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, key);
  if (value)
  {
    xpc_object_t v5 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xpc_string_create(*a1);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  BOOL v7 = xpc_equal(v6, v5);
  xpc_release(v6);
  xpc_release(v5);
  return v7;
}

void sub_26376A304(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(void))(*(void *)(a1 - 48) + 16))();
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAB7B0;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAB7B0;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<TransportModule *,std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule *)#1},std::allocator<TransportModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TransportModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<TransportModule> ctu::SharedSynchronizable<TransportModule>::make_shared_ptr<TransportModule>(TransportModule*)::{lambda(TransportModule*)#1}::operator() const(TransportModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAB7B0;
  MEMORY[0x263E68AF0](a1 + 1);
  xpc_object_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::SharedSynchronizable<TransportModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EAB878;
  void block[5] = v5;
  CFTypeRef v12 = v7;
  p_std::string::size_type shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15TransportModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15TransportModuleEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(TransportModule ***)a1;
  TransportModule::finishInitialization_sync(**(TransportModule ***)a1);
  operator delete(v2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    long long v4 = (void *)a1;
  }
  else
  {
    long long v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_26376A950(_Unwind_Exception *a1)
{
  operator delete(v2);
  long long v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::sleep(dispatch::group_session)::$_0>(TransportModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  long long v4 = *(NSObject **)(v3 + 184);
  if (!v4)
  {
LABEL_4:
    uint64_t v6 = *(void *)(v3 + 168);
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  uint64_t v11[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_54;
  v11[4] = v4;
  CFTypeRef v12 = v11;
  block[0] = (dispatch_object_t)MEMORY[0x263EF8330];
  block[1] = (dispatch_object_t)0x40000000;
  block[2] = (dispatch_object_t)___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  block[3] = (dispatch_object_t)&__block_descriptor_tmp_55;
  void block[4] = v4 + 9;
  void block[5] = (dispatch_object_t)&v12;
  int isa = v4[11].isa;
  if (v4[12].isa)
  {
    dispatch_async_and_wait(isa, block);
    goto LABEL_4;
  }
  dispatch_sync(isa, block);
  uint64_t v6 = *(void *)(v3 + 168);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v2[1];
  block[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v6 + 24))(v6, block);
  if (block[0])
  {
    dispatch_group_leave(block[0]);
    if (block[0]) {
      dispatch_release(block[0]);
    }
  }
LABEL_11:
  uint64_t v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    xpc_object_t v9 = v2[1];
    if (v9) {
      dispatch_release(v9);
    }
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_26376AB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    size_t v19 = v16[1];
    if (v19) {
      dispatch_release(v19);
    }
  }
  operator delete(v16);
  size_t v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::wake(dispatch::group_session)::$_0>(TransportModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(v3 + 184);
  if (v4)
  {
    dispatch_group_t group = (dispatch_group_t)MEMORY[0x263EF8330];
    uint64_t v15 = 0x40000000;
    size_t v16 = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    uint64_t v17 = &__block_descriptor_tmp_56;
    uint64_t v18 = v4;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v4 + 72), (uint64_t)&group);
  }
  if (!*(_DWORD *)(v3 + 152))
  {
    uint64_t v10 = *(void *)(v3 + 184);
    if (v10)
    {
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 0x40000000;
      void v12[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
      v12[3] = &__block_descriptor_tmp_61;
      void v12[4] = v10;
      size_t v13 = v12;
      dispatch_group_t group = (dispatch_group_t)MEMORY[0x263EF8330];
      uint64_t v15 = 0x40000000;
      size_t v16 = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
      uint64_t v17 = &__block_descriptor_tmp_55;
      uint64_t v18 = v10 + 72;
      size_t v19 = &v13;
      uint64_t v11 = *(NSObject **)(v10 + 88);
      if (*(void *)(v10 + 96)) {
        dispatch_async_and_wait(v11, &group);
      }
      else {
        dispatch_sync(v11, &group);
      }
    }
  }
  uint64_t v5 = *(void *)(v3 + 168);
  if (v5)
  {
    uint64_t v6 = v2[1];
    dispatch_group_t group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v5 + 32))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
  uint64_t v7 = v2[1];
  if (v7)
  {
    dispatch_group_leave(v7);
    uint64_t v8 = v2[1];
    if (v8) {
      dispatch_release(v8);
    }
  }
  operator delete(v2);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void sub_26376AE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v18 = v16[1];
  if (v18)
  {
    dispatch_group_leave(v18);
    size_t v19 = v16[1];
    if (v19) {
      dispatch_release(v19);
    }
  }
  operator delete(v16);
  size_t v20 = (std::__shared_weak_count *)v15[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

const char *HealthEventDB::getName(HealthEventDB *this)
{
  return "HealthEventDB";
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *this, const HealthEvent *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HealthEvent::asString(a2, __p);
    uint64_t v11 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    uint64_t v15 = v11;
    _os_log_debug_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEBUG, "#D Adding health event: %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *((void *)this + 10);
  uint64_t v5 = *((void *)this + 11);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) == *((void *)this + 14))
  {
    if (v5 != v6)
    {
      *(_OWORD *)(*((void *)this + 13) + 8) = *(_OWORD *)((char *)a2 + 8);
      uint64_t v7 = *((void *)this + 13) + 24;
      *((void *)this + 13) = v7;
      if (v7 == *((void *)this + 11))
      {
        uint64_t v7 = *((void *)this + 10);
        *((void *)this + 13) = v7;
      }
      *((void *)this + 12) = v7;
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 13);
    *(void *)uint64_t v8 = &unk_270EA9DE0;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + 8);
    uint64_t v9 = *((void *)this + 13) + 24;
    *((void *)this + 13) = v9;
    if (v9 == *((void *)this + 11)) {
      *((void *)this + 13) = *((void *)this + 10);
    }
    ++*((void *)this + 14);
  }
  HealthEventDB::commitToDisk(this);
  return 1;
}

void HealthEventDB::commitToDisk(HealthEventDB *this)
{
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v4 = Mutable;
  if (Mutable) {
    CFTypeRef v33 = Mutable;
  }
  CFMutableArrayRef v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
  uint64_t v6 = v5;
  if (v5) {
    CFTypeRef v32 = v5;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x263EFFF70]);
  uint64_t v9 = v7;
  if (v7) {
    CFTypeRef cf = v7;
  }
  if (*((void *)this + 14))
  {
    uint64_t v10 = *((void *)this + 12);
    if (v10)
    {
      while (1)
      {
        LOBYTE(__p[0]) = *(unsigned char *)(v10 + 8);
        *(void *)&long long valuePtr = *(void *)(v10 + 16);
        CFNumberRef v11 = CFNumberCreate(v2, kCFNumberSInt8Type, __p);
        CFNumberRef v12 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
        CFNumberRef v13 = v12;
        if (v11
           ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
           : 0)
        {
          if (v12
             ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
             : 0)
          {
            break;
          }
        }
        if (v12) {
          goto LABEL_22;
        }
LABEL_23:
        if (v11) {
          CFRelease(v11);
        }
        v10 += 24;
        if (v10 == *((void *)this + 11)) {
          uint64_t v10 = *((void *)this + 10);
        }
        if (!v10 || v10 == *((void *)this + 13)) {
          goto LABEL_29;
        }
      }
      if (v11)
      {
        CFRetain(v11);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
      }
      if (!v13) {
        goto LABEL_23;
      }
      CFRetain(v13);
      CFArrayAppendValue(v9, v13);
      CFRelease(v13);
LABEL_22:
      CFRelease(v13);
      goto LABEL_23;
    }
  }
LABEL_29:
  ctu::cf::insert<char const*,__CFArray *>(v4, (const __CFString **)"HealthEventTypes", v6, (uint64_t)v2, v8);
  ctu::cf::insert<char const*,__CFArray *>((__CFDictionary *)v33, (const __CFString **)"HealthEventTimes", cf, (uint64_t)v2, v16);
  for (CFIndex i = (uint64_t *)*((void *)this + 17); i; CFIndex i = (uint64_t *)*i)
  {
    size_t v24 = (const __CFString **)(i + 2);
    if (*((char *)i + 39) < 0) {
      size_t v24 = (const __CFString **)*v24;
    }
    (*(void (**)(CFTypeRef *__return_ptr))(*(void *)i[5] + 24))(&v36);
    CFTypeRef v25 = v36;
    char v26 = (__CFDictionary *)v33;
    *(void *)&long long valuePtr = 0;
    ctu::cf::convert_copy((ctu::cf *)&valuePtr, v24, (const char *)0x8000100, (uint64_t)v2, v27);
    std::string::size_type v28 = (const void *)valuePtr;
    __p[0] = (void *)valuePtr;
    *(void *)&long long valuePtr = v25;
    if (v25)
    {
      CFRetain(v25);
      if (v28) {
        CFDictionaryAddValue(v26, v28, v25);
      }
      CFRelease(v25);
    }
    if (v28) {
      CFRelease(v28);
    }
    if (v36) {
      CFRelease(v36);
    }
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v18 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&valuePtr);
    long long v19 = valuePtr;
    long long valuePtr = 0uLL;
    size_t v20 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&valuePtr + 1);
    if (*((void *)&valuePtr + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&valuePtr + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v18 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v30 = 13;
  strcpy((char *)__p, "HealthEventDB");
  uint64_t v35 = v18;
  CFTypeRef v36 = v33;
  *(void *)&long long valuePtr = __p;
  *((void *)&valuePtr + 1) = &v36;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v18 + 6, (uint64_t *)&valuePtr);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (!v22 || atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v23 = cf;
    if (!cf) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  CFTypeRef v23 = cf;
  if (cf) {
LABEL_45:
  }
    CFRelease(v23);
LABEL_46:
  if (v32) {
    CFRelease(v32);
  }
  if (v33) {
    CFRelease(v33);
  }
}

void sub_26376B4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFMutableArrayRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFMutableArrayRef v7 = va_arg(va2, const void *);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va2);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *a1, char a2)
{
  memset(v8, 170, sizeof(v8));
  Timestamp::Timestamp((Timestamp *)v5);
  Timestamp::asString((uint64_t)v5, 0, 9, &__p);
  v8[0] = &unk_270EA9DE0;
  LOBYTE(v8[1]) = a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __p;
  }
  uint64_t v8[2] = Timestamp::convert((uint64_t)&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v5, v6);
  HealthEventDB::addHealthEvent(a1, (const HealthEvent *)v8);
  return 1;
}

void sub_26376B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_26376B730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t HealthEventDB::getHealthEvents(HealthEventDB *this)
{
  return (uint64_t)this + 80;
}

void HealthEventDB::HealthEventDB(HealthEventDB *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v19, "com.apple.telephony.abm", "HealthEventDB");
  GetABMLogServer(&v17);
  *(void *)this = &unk_270EAB960;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *((void *)this + 1) = &unk_270EA5428;
  CFAllocatorRef v2 = v18;
  *((void *)this + 7) = v17;
  *((void *)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v20);
  uint64_t v3 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(void *)this = &unk_270EAB8B8;
  *((_DWORD *)this + 18) = 128;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1065353216;
  HealthEventDB::initFromDisk(this);
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v4 = &unk_270EA6510;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  size_t v20 = v4;
  CFMutableArrayRef v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAB9A0;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  uint64_t v21 = v5;
  char v23 = 16;
  strcpy(__p, "KeyBasebandStats");
  v19[0] = (long long *)__p;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t *)this + 15, (uint64_t)__p, v19);
  size_t v20 = 0;
  uint64_t v21 = 0;
  CFMutableArrayRef v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  *((void *)v6 + 5) = v4;
  *((void *)v6 + 6) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v23 < 0) {
LABEL_9:
  }
    operator delete(*(void **)__p);
LABEL_10:
  CFAllocatorRef v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  std::string v9 = (char *)operator new(0x20uLL);
  *(void *)std::string v9 = &unk_270EA6570;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  size_t v20 = v9;
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAB9F0;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  uint64_t v21 = v10;
  char v23 = 18;
  strcpy(__p, "KeyCommCenterStats");
  v19[0] = (long long *)__p;
  CFNumberRef v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t *)this + 15, (uint64_t)__p, v19);
  size_t v20 = 0;
  uint64_t v21 = 0;
  CFNumberRef v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  *((void *)v11 + 5) = v9;
  *((void *)v11 + 6) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_16:
      CFNumberRef v13 = v21;
      if (!v21) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__p);
  CFNumberRef v13 = v21;
  if (!v21) {
    goto LABEL_23;
  }
LABEL_22:
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    uint64_t v14 = (uint64_t *)*((void *)this + 17);
    if (!v14) {
      return;
    }
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v14 = (uint64_t *)*((void *)this + 17);
  if (!v14) {
    return;
  }
  do
  {
LABEL_27:
    if (((**(uint64_t (***)(uint64_t))v14[5])(v14[5]) & 1) == 0)
    {
      uint64_t v15 = *((void *)this + 5);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        CFAllocatorRef v16 = v14 + 2;
        if (*((char *)v14 + 39) < 0) {
          CFAllocatorRef v16 = (void *)*v16;
        }
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = v16;
        _os_log_error_impl(&dword_26368A000, v15, OS_LOG_TYPE_ERROR, "failed to init %s from disk", (uint8_t *)__p, 0xCu);
      }
    }
    uint64_t v14 = (uint64_t *)*v14;
  }
  while (v14);
}

void sub_26376BC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::shared_ptr<HealthStats>>::~unordered_map[abi:ne180100](v26);
  boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(v25);
  void *v22 = v24;
  MEMORY[0x263E68AF0](v23);
  _Unwind_Resume(a1);
}

void HealthEventDB::initFromDisk(HealthEventDB *this)
{
  uint64_t v2 = *((unsigned int *)this + 18);
  if (v2) {
    uint64_t v3 = (char *)operator new(24 * v2);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = &v3[24 * v2];
  CFMutableArrayRef v5 = (void (***)(void))*((void *)this + 10);
  uint64_t v6 = (void (***)(void))*((void *)this + 11);
  *((void *)this + 10) = v3;
  *((void *)this + 11) = v4;
  CFMutableArrayRef v7 = (void (***)(void))*((void *)this + 12);
  *((void *)this + 12) = v3;
  *((void *)this + 13) = v3;
  uint64_t v8 = *((void *)this + 14);
  for (*((void *)this + 14) = 0; v8; --v8)
  {
    std::string v9 = v7 + 3;
    (**v7)(v7);
    if (v9 == v6) {
      CFMutableArrayRef v7 = v5;
    }
    else {
      CFMutableArrayRef v7 = v9;
    }
  }
  if (v5) {
    operator delete(v5);
  }
  CFTypeRef cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v10 = xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(__p);
    long long v11 = *(_OWORD *)__p;
    *(void *)std::string __p = 0;
    *(void *)&__p[8] = 0;
    CFNumberRef v12 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    CFNumberRef v13 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v10 = xmmword_26A99F080;
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  __p[23] = 13;
  strcpy(__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(void, uint64_t))v10, __p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 40));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v15 = cf;
    CFTypeRef v41 = cf;
    if (!cf) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  CFTypeRef v15 = cf;
  CFTypeRef v41 = cf;
  if (cf) {
LABEL_26:
  }
    CFRetain(v15);
LABEL_27:
  v40[0] = 0xAAAAAAAAAAAAAAAALL;
  v40[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v40, (const __CFDictionary *)v15);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, "HealthEventTypes");
  CFArrayRef v16 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v40, *(const __CFString **)__p);
  MEMORY[0x263E68C90](__p);
  CFArrayRef v39 = v16;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, "HealthEventTimes");
  CFArrayRef v17 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v40, *(const __CFString **)__p);
  MEMORY[0x263E68C90](__p);
  CFArrayRef v38 = v17;
  if (v16) {
    uint64_t v18 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    unsigned int Count = CFArrayGetCount(v16);
    unsigned int v20 = CFArrayGetCount(v17);
    uint64_t v21 = v20 >= Count ? Count : v20;
    if (v21)
    {
      for (CFIndex i = 0; i != v21; ++i)
      {
        char v37 = 0;
        uint64_t v36 = 0;
        CFDictionaryRef ValueAtIndex = (signed __int8 *)CFArrayGetValueAtIndex(v16, i);
        uint64_t v26 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFTypeID v27 = CFGetTypeID(ValueAtIndex);
          if (v27 == CFNumberGetTypeID() && (ctu::cf::assign((ctu::cf *)&v37, v26, v28) & 1) != 0)
          {
            long long v29 = (uint64_t *)CFArrayGetValueAtIndex(v17, i);
            char v30 = v29;
            if (v29)
            {
              CFTypeID v31 = CFGetTypeID(v29);
              if (v31 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&v36, v30, v32))
                {
                  *(void *)std::string __p = &unk_270EA9DE0;
                  __p[8] = v37;
                  *(void *)&__p[16] = v36;
                  uint64_t v34 = *((void *)this + 10);
                  uint64_t v33 = *((void *)this + 11);
                  if (0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 3) == *((void *)this + 14))
                  {
                    if (v33 != v34)
                    {
                      *(_OWORD *)(*((void *)this + 13) + 8) = *(_OWORD *)&__p[8];
                      uint64_t v35 = *((void *)this + 13) + 24;
                      *((void *)this + 13) = v35;
                      if (v35 == *((void *)this + 11))
                      {
                        uint64_t v35 = *((void *)this + 10);
                        *((void *)this + 13) = v35;
                      }
                      *((void *)this + 12) = v35;
                    }
                  }
                  else
                  {
                    uint64_t v23 = *((void *)this + 13);
                    *(void *)uint64_t v23 = &unk_270EA9DE0;
                    *(_OWORD *)(v23 + 8) = *(_OWORD *)&__p[8];
                    uint64_t v24 = *((void *)this + 13) + 24;
                    *((void *)this + 13) = v24;
                    if (v24 == *((void *)this + 11)) {
                      *((void *)this + 13) = *((void *)this + 10);
                    }
                    ++*((void *)this + 14);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  MEMORY[0x263E68CD0](v40);
  if (v15) {
    CFRelease(v15);
  }
}

void sub_26376C258(_Unwind_Exception *a1)
{
}

void sub_26376C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFMutableArrayRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFMutableArrayRef v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x263E68CD0]((uint64_t *)va2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va3);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<HealthStats>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  CFMutableArrayRef v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void (****)(void))(a1 + 16);
    do
    {
      (**v3)(v3);
      uint64_t v4 = *(void (****)(void))(a1 + 8);
      uint64_t v3 = (void (***)(void))(*(void *)(a1 + 16) + 24);
      *(void *)(a1 + 16) = v3;
      if (v3 == v4)
      {
        uint64_t v3 = *(void (****)(void))a1;
        *(void *)(a1 + 16) = *(void *)a1;
      }
      ++v2;
    }
    while (v2 < *(void *)(a1 + 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HealthEventDB::clearDB(HealthEventDB *this)
{
  CFTypeRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable) {
    CFTypeRef cf = Mutable;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  uint64_t v3 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    CFMutableArrayRef v5 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  CFMutableArrayRef v7 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  char v13 = 13;
  strcpy((char *)__p, "HealthEventDB");
  CFTypeRef v17 = cf;
  *(void *)long long buf = __p;
  *(void *)&uint8_t buf[8] = &v17;
  CFArrayRef v16 = v3;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v3 + 6, (uint64_t *)buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (*((void *)this + 14))
  {
    unint64_t v8 = 0;
    uint64_t v9 = (void (***)(void))*((void *)this + 12);
    do
    {
      (**v9)(v9);
      uint64_t v10 = (void (***)(void))*((void *)this + 11);
      uint64_t v9 = (void (***)(void))(*((void *)this + 12) + 24);
      *((void *)this + 12) = v9;
      if (v9 == v10)
      {
        uint64_t v9 = (void (***)(void))*((void *)this + 10);
        *((void *)this + 12) = v9;
      }
      ++v8;
    }
    while (v8 < *((void *)this + 14));
  }
  *((void *)this + 14) = 0;
  uint64_t v11 = *((void *)this + 5);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v11, OS_LOG_TYPE_DEFAULT, "#I Health DB is cleared", buf, 2u);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_26376C728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void HealthEventDB::getHealthInfo(HealthEventDB *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  uint64_t v6 = MEMORY[0x263EF8708];
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x263E6A240](v5) == v6)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  *a2 = v7;
LABEL_9:
  xpc_release(v5);
  if (MEMORY[0x263E6A240](*a2) == v6)
  {
    for (CFIndex i = (uint64_t *)*((void *)this + 17); i; CFIndex i = (uint64_t *)*i)
    {
      (*(void (**)(CFTypeRef *__return_ptr))(*(void *)i[5] + 24))(&cf);
      ctu::cf_to_xpc((uint64_t *)&value, (ctu *)cf, v10);
      uint64_t v11 = (const char *)(i + 2);
      if (*((char *)i + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
      xpc_dictionary_set_value(*a2, v11, value);
      xpc_object_t v12 = value;
      xpc_object_t value = xpc_null_create();
      xpc_release(v12);
      xpc_release(value);
      xpc_object_t value = 0;
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  else
  {
    unint64_t v8 = *((void *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf) = 0;
      _os_log_error_impl(&dword_26368A000, v8, OS_LOG_TYPE_ERROR, "Failed to create dictionary to collect health info", (uint8_t *)&cf, 2u);
    }
  }
}

void sub_26376C908(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void sub_26376C93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  xpc::dict::~dict(v9);
  _Unwind_Resume(a1);
}

void sub_26376C958(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::updateBootStats(uint64_t *a1, void **a2)
{
  char v9 = 16;
  strcpy(__p, "KeyBasebandStats");
  uint64_t v11 = __p;
  uint64_t v4 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 15, (uint64_t)__p, (long long **)&v11)+ 5);
  xpc_object_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, xpc_object_t *))(*(void *)v4 + 32))(&cf, v4, &object);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  HealthEventDB::commitToDisk((HealthEventDB *)a1);
  return 1;
}

void sub_26376CA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::updateCommCenterStats(uint64_t *a1, void **a2)
{
  char v9 = 18;
  strcpy(__p, "KeyCommCenterStats");
  uint64_t v11 = __p;
  uint64_t v4 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 15, (uint64_t)__p, (long long **)&v11)+ 5);
  xpc_object_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, xpc_object_t *))(*(void *)v4 + 32))(&cf, v4, &object);
  if (cf) {
    CFRelease(cf);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  HealthEventDB::commitToDisk((HealthEventDB *)a1);
  return 1;
}

void sub_26376CB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void HealthEventDB::~HealthEventDB(HealthEventDB *this)
{
  HealthEventDB::~HealthEventDB(this);

  operator delete(v1);
}

{
  void **v2;
  void **v3;
  std::__shared_weak_count *v4;
  void *v5;
  unint64_t v6;
  void (***v7)(void);
  void (***v8)(void);
  void *v9;

  *(void *)this = &unk_270EAB8B8;
  unint64_t v2 = (void **)*((void *)this + 17);
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        unint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  xpc_object_t v5 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*((void *)this + 14))
  {
    uint64_t v6 = 0;
    xpc_object_t v7 = (void (***)(void))*((void *)this + 12);
    do
    {
      (**v7)(v7);
      unint64_t v8 = (void (***)(void))*((void *)this + 11);
      xpc_object_t v7 = (void (***)(void))(*((void *)this + 12) + 24);
      *((void *)this + 12) = v7;
      if (v7 == v8)
      {
        xpc_object_t v7 = (void (***)(void))*((void *)this + 10);
        *((void *)this + 12) = v7;
      }
      ++v6;
    }
    while (v6 < *((void *)this + 14));
  }
  char v9 = (void *)*((void *)this + 10);
  if (v9) {
    operator delete(v9);
  }
  *(void *)this = &unk_270EAB960;
  MEMORY[0x263E68AF0]((char *)this + 8);
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, v3, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAB960;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAB960;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(void *)a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t *a1, uint64_t a2, long long **a3)
{
  uint64_t v4 = (unsigned char *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v7 = v6;
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v56, (uint64_t *)a2, v7);
  unint64_t v9 = v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    char v13 = *(void ***)(*a1 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v4[23];
        if (v15 >= 0) {
          uint64_t v16 = v4[23];
        }
        else {
          uint64_t v16 = *((void *)v4 + 1);
        }
        if (v15 < 0) {
          uint64_t v4 = *(unsigned char **)v4;
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v9)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v4, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v4[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            uint64_t v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v9)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v4, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v4[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v12) {
              break;
            }
          }
          uint64_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  uint64_t v25 = a1 + 2;
  v56[2] = 0xAAAAAAAAAAAAAA01;
  uint64_t v14 = (unsigned __int8 *)operator new(0x38uLL);
  v56[0] = v14;
  v56[1] = a1 + 2;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v26 = *a3;
  long long v27 = **a3;
  *((void *)v14 + 4) = *((void *)*a3 + 2);
  *((_OWORD *)v14 + 1) = v27;
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 6) = 0;
  float v28 = (float)(unint64_t)(a1[3] + 1);
  float v29 = *((float *)a1 + 8);
  if (!v10 || (float)(v29 * (float)v10) < v28)
  {
    BOOL v32 = 1;
    if (v10 >= 3) {
      BOOL v32 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v10);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v10 = a1[1];
    if (prime > v10)
    {
LABEL_65:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v36 = operator new(8 * prime);
      char v37 = (void *)*a1;
      *a1 = (uint64_t)v36;
      if (v37) {
        operator delete(v37);
      }
      uint64_t v38 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v38++) = 0;
      while (prime != v38);
      CFArrayRef v39 = (void *)*v25;
      if (!*v25) {
        goto LABEL_97;
      }
      size_t v40 = v39[1];
      size_t v41 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v42 = v40 & v41;
        *(void *)(*a1 + 8 * v42) = v25;
        for (CFIndex i = (void *)*v39; *v39; CFIndex i = (void *)*v39)
        {
          size_t v44 = i[1] & v41;
          if (v44 == v42)
          {
            CFArrayRef v39 = i;
          }
          else if (*(void *)(*a1 + 8 * v44))
          {
            void *v39 = *i;
            uint64_t v45 = 8 * v44;
            *CFIndex i = **(void **)(*a1 + v45);
            **(void **)(*a1 + v45) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v44) = v39;
            CFArrayRef v39 = i;
            size_t v42 = v44;
          }
        }
        goto LABEL_97;
      }
      if (v40 >= prime) {
        v40 %= prime;
      }
      *(void *)(*a1 + 8 * v40) = v25;
      unint64_t v49 = (void *)*v39;
      if (!*v39)
      {
LABEL_97:
        unint64_t v10 = prime;
        uint64_t v52 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_98;
        }
        goto LABEL_113;
      }
      while (1)
      {
        size_t v51 = v49[1];
        if (v51 >= prime) {
          v51 %= prime;
        }
        if (v51 == v40) {
          goto LABEL_91;
        }
        if (*(void *)(*a1 + 8 * v51))
        {
          void *v39 = *v49;
          uint64_t v50 = 8 * v51;
          *unint64_t v49 = **(void **)(*a1 + v50);
          **(void **)(*a1 + v50) = v49;
          unint64_t v49 = v39;
LABEL_91:
          CFArrayRef v39 = v49;
          unint64_t v49 = (void *)*v49;
          if (!v49) {
            goto LABEL_97;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v51) = v39;
          CFArrayRef v39 = v49;
          unint64_t v49 = (void *)*v49;
          size_t v40 = v51;
          if (!v49) {
            goto LABEL_97;
          }
        }
      }
    }
    if (prime < v10)
    {
      unint64_t v46 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (prime <= v46) {
        size_t prime = v46;
      }
      if (prime < v10)
      {
        if (!prime)
        {
          xpc_object_t v53 = (void *)*a1;
          *a1 = 0;
          if (v53) {
            operator delete(v53);
          }
          unint64_t v10 = 0;
          a1[1] = 0;
          uint64_t v52 = -1;
          goto LABEL_113;
        }
        goto LABEL_65;
      }
      unint64_t v10 = a1[1];
    }
    uint64_t v52 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_98:
      if (v9 >= v10)
      {
        unint64_t v12 = v9 % v10;
        uint64_t v30 = *a1;
        CFTypeID v31 = *(void **)(*a1 + 8 * (v9 % v10));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v12 = v9;
        uint64_t v30 = *a1;
        CFTypeID v31 = *(void **)(*a1 + 8 * v9);
        if (v31) {
          goto LABEL_54;
        }
      }
      goto LABEL_114;
    }
LABEL_113:
    unint64_t v12 = v52 & v9;
    uint64_t v30 = *a1;
    CFTypeID v31 = *(void **)(*a1 + 8 * (v52 & v9));
    if (v31) {
      goto LABEL_54;
    }
    goto LABEL_114;
  }
  uint64_t v30 = *a1;
  CFTypeID v31 = *(void **)(*a1 + 8 * v12);
  if (v31)
  {
LABEL_54:
    *(void *)uint64_t v14 = *v31;
LABEL_120:
    *CFTypeID v31 = v14;
    goto LABEL_121;
  }
LABEL_114:
  *(void *)uint64_t v14 = *v25;
  *uint64_t v25 = v14;
  *(void *)(v30 + 8 * v12) = v25;
  if (*(void *)v14)
  {
    unint64_t v54 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v54 >= v10) {
        v54 %= v10;
      }
    }
    else
    {
      v54 &= v10 - 1;
    }
    CFTypeID v31 = (void *)(*a1 + 8 * v54);
    goto LABEL_120;
  }
LABEL_121:
  ++a1[3];
  return v14;
}

void sub_26376D4BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<HealthStats>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      if (*(char *)(v2 + 39) < 0) {
LABEL_6:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<BasebandStats *,std::shared_ptr<BasebandStats>::__shared_ptr_default_delete<BasebandStats,BasebandStats>,std::allocator<BasebandStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BasebandStats *,std::shared_ptr<BasebandStats>::__shared_ptr_default_delete<BasebandStats,BasebandStats>,std::allocator<BasebandStats>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<BasebandStats *,std::shared_ptr<BasebandStats>::__shared_ptr_default_delete<BasebandStats,BasebandStats>,std::allocator<BasebandStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A93BCLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A93BCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A93BCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A93BCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<CommCenterStats *,std::shared_ptr<CommCenterStats>::__shared_ptr_default_delete<CommCenterStats,CommCenterStats>,std::allocator<CommCenterStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<CommCenterStats *,std::shared_ptr<CommCenterStats>::__shared_ptr_default_delete<CommCenterStats,CommCenterStats>,std::allocator<CommCenterStats>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CommCenterStats *,std::shared_ptr<CommCenterStats>::__shared_ptr_default_delete<CommCenterStats,CommCenterStats>,std::allocator<CommCenterStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A9487) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A9487 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A9487)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A9487 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void ctu::cf::insert<char const*,__CFArray *>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  CFTypeRef cf = 0;
  ctu::cf::convert_copy((ctu::cf *)&cf, a2, (const char *)0x8000100, a4, a5);
  CFTypeRef v7 = cf;
  CFTypeRef cf = a3;
  if (a3)
  {
    CFRetain(a3);
    if (v7) {
      CFDictionaryAddValue(a1, v7, a3);
    }
    CFRelease(a3);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_26376D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_26376D7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t __cxx_global_var_init_14()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

capabilities::radio *radio::HealthService::HealthService(capabilities::radio *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  capabilities::radio::maverick(a1);
  uint64_t v6 = *(void *)a1;
  if (*(void *)a1)
  {
    CFTypeRef v7 = *a4;
    if (v7) {
      CFRetain(v7);
    }
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    v9[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
    v9[3] = &__block_descriptor_tmp_23;
    v9[4] = v6;
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v6 + 72), (uint64_t)v9);
    if (cf) {
      CFRelease(cf);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  return a1;
}

void sub_26376D91C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::start(uint64_t a1, const void **a2)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1174405120;
  void v4[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_23;
  uint64_t v3 = *a2;
  v4[4] = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (cf) {
    CFRelease(cf);
  }
}

void radio::HealthService::reportDataStats(radio::HealthService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x263EF8330];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_5_1;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reportDataStats(radio::HealthService::State *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_1;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::reset(radio::HealthService *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    v2[0] = MEMORY[0x263EF8330];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_6_0;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reset(radio::HealthService::State *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::enterLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(void *)a2)
    {
      uint64_t v4 = _Block_copy(*(const void **)a2);
      size_t v5 = *(NSObject **)(a2 + 8);
      unint64_t v9 = v4;
      unint64_t v10 = v5;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v4 = 0;
      size_t v5 = *(NSObject **)(a2 + 8);
      unint64_t v9 = 0;
      unint64_t v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4) {
          return;
        }
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_30_0;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    unint64_t v8 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  unint64_t v8 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v8);
LABEL_17:
  if (v6) {
    _Block_release(v6);
  }
}

void radio::HealthService::State::enterLowPower(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_17_0;
  void v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  size_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

uint64_t dispatch::callback<void({block_pointer})(void)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::HealthService::exitLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (*(void *)a2)
    {
      uint64_t v4 = _Block_copy(*(const void **)a2);
      size_t v5 = *(NSObject **)(a2 + 8);
      unint64_t v9 = v4;
      unint64_t v10 = v5;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v4 = 0;
      size_t v5 = *(NSObject **)(a2 + 8);
      unint64_t v9 = 0;
      unint64_t v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4) {
          return;
        }
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
    if (!v4) {
      return;
    }
    goto LABEL_10;
  }
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_30_0;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    unint64_t v8 = aBlock;
    if (!aBlock) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  unint64_t v8 = aBlock;
  if (aBlock) {
LABEL_16:
  }
    _Block_release(v8);
LABEL_17:
  if (v6) {
    _Block_release(v6);
  }
}

void radio::HealthService::State::exitLowPower(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_23_1;
  void v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  size_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void radio::HealthService::State::~State(radio::HealthService::State *this)
{
  *(void *)this = &unk_270EABA40;
  uint64_t v2 = *((void *)this + 24);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8x8_t v11 = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v11, 2u);
      uint64_t v2 = *((void *)this + 24);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((void *)this + 24) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v5 = (std::__shared_weak_count *)*((void *)this + 18);
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    CFTypeRef v7 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    CFTypeRef v7 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  *(void *)this = &unk_270EABC90;
  MEMORY[0x263E68AF0]((char *)this + 8);
  unint64_t v8 = *((void *)this + 12);
  if (v8) {
    dispatch_release(v8);
  }
  unint64_t v9 = *((void *)this + 11);
  if (v9) {
    dispatch_release(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

{
  void *v1;
  uint64_t vars8;

  radio::HealthService::State::~State(this);

  operator delete(v1);
}

void radio::HealthService::State::stopDataReportingTimer_sync(radio::HealthService::State *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v4, 2u);
      uint64_t v1 = *((void *)this + 24);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((void *)this + 24) = 0;
  }
}

void *ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EABC90;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EABC90;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *radio::HealthService::State::State(void *a1, uint64_t *a2, void *a3)
{
  *a1 = &unk_270EABA40;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.abm", "net.health.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  CFTypeRef v7 = dispatch_queue_create_with_target_V2("net.health.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  *a1 = &unk_270EABC90;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  a1[1] = &unk_270EA5428;
  a1[7] = *a2;
  uint64_t v8 = a2[1];
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *a1 = &unk_270EABD00;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *a1 = &unk_270EABA40;
  a1[13] = 0;
  a1[14] = 0;
  uint64_t v9 = *a2;
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  v13[0] = v9;
  v13[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::create(v13, a1 + 15);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  a1[17] = *a3;
  uint64_t v11 = a3[1];
  a1[18] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_26376E5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_26376E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *radio::HealthService::State::getName(radio::HealthService::State *this)
{
  return "net.health.svc";
}

void ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(radio::HealthService::State **)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  radio::HealthService::State::startDataReportingTimer_sync((uint64_t)v1, &v3);
  if (v2) {
    CFRelease(v2);
  }

  radio::HealthService::State::startDataStallReporting_sync(v1);
}

void sub_26376E6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t radio::HealthService::State::startDataReportingTimer_sync(uint64_t a1, const __CFDictionary **a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, *a2);
  unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, @"DataReportingInterval");
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v17 = Int;
    _os_log_impl(&dword_26368A000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting data reporting with interval %d millisec", buf, 8u);
  }
  uint64_t v5 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(void *)(a1 + 192) = v5;
  dispatch_source_set_timer(v5, 0, 1000000 * Int, 0x3B9ACA00uLL);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (v7 = *(void *)(a1 + 72), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v11 = *(NSObject **)(a1 + 192);
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_1;
  handler[4] = a1;
  handler[5] = v7;
  uint64_t v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v11, handler);
  radio::HealthService::State::queryAndReportDataStats_sync((radio::HealthService::State *)a1);
  dispatch_activate(*(dispatch_object_t *)(a1 + 192));
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x263E68CD0](v15);
}

void sub_26376E8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v17);
  MEMORY[0x263E68CD0](&a17);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::startDataStallReporting_sync(radio::HealthService::State *this)
{
  CFDictionaryRef v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_11_0;
  void aBlock[4] = this;
  void aBlock[5] = v3;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  uint64_t v9 = *((void *)this + 17);
  if (v7)
  {
    uint64_t v10 = _Block_copy(v7);
    uint64_t v11 = v10;
    unint64_t v12 = v8;
    if (v8) {
      goto LABEL_9;
    }
LABEL_12:
    DataStallDetection::setCallback(v9, (uint64_t)&v11);
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = v8;
  if (!v8) {
    goto LABEL_12;
  }
LABEL_9:
  dispatch_retain(v8);
  DataStallDetection::setCallback(v9, (uint64_t)&v11);
  dispatch_release(v8);
  if (v10) {
LABEL_13:
  }
    _Block_release(v10);
LABEL_14:
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v5);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke(uint64_t a1)
{
}

void radio::HealthService::State::queryAndReportDataStats_sync(radio::HealthService::State *this)
{
  NetworkStatsInterface::query(*((NetworkStatsInterface **)this + 15), &v5);
  long long v2 = v5;
  long long v5 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1)) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
    if (!*((void *)&v5 + 1))
    {
LABEL_5:
      radio::HealthService::State::reportDataStats_sync(this);
      return;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  radio::HealthService::State::reportDataStats_sync(this);
}

void ___ZN5radio13HealthService5State5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (radio::HealthService::State *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5]) {
        radio::HealthService::State::queryAndReportDataStats_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_26376ED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke(void *a1, const void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    long long v5 = (uint64_t **)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5 + 21, a2, (uint64_t)a2);
        radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v5);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_26376EE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::HealthService::State::reportDataStats_sync(radio::HealthService::State *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (*((void *)this + 19))
  {
    uint64_t v1 = (void *)*((void *)this + 19);
    uint64_t v2 = (void **)operator new(0x18uLL);
    v2[1] = 0;
    uint64_t v3 = v2 + 1;
    v2[2] = 0;
    *uint64_t v2 = v2 + 1;
    size_t v41 = v2;
    uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EABD78;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    size_t v42 = v4;
    long long v5 = (void *)*v1;
    uint64_t v30 = v1 + 1;
    if ((void *)*v1 != v1 + 1)
    {
      while (1)
      {
        *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__p[16] = v6;
        long long v39 = v6;
        *(_OWORD *)std::string __p = v6;
        LODWORD(v39) = *((_DWORD *)v5 + 8);
        __p[0] = *((unsigned char *)v5 + 48);
        *((void *)&v39 + 1) = v5[5];
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v5 + 7);
          *(void *)&unsigned char __p[24] = v5[9];
        }
        unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
        int v38 = -1431655766;
        radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v37);
        unint64_t v37 = *((void *)&v39 + 1);
        if (__p[0]) {
          break;
        }
LABEL_24:
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          unsigned int v17 = (void *)v5[1];
          if (v17)
          {
            do
            {
LABEL_28:
              uint64_t v18 = v17;
              unsigned int v17 = (void *)*v17;
            }
            while (v17);
            goto LABEL_4;
          }
        }
        else
        {
          unsigned int v17 = (void *)v5[1];
          if (v17) {
            goto LABEL_28;
          }
        }
        do
        {
          uint64_t v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          long long v5 = v18;
        }
        while (!v19);
LABEL_4:
        long long v5 = v18;
        if (v18 == v30) {
          goto LABEL_33;
        }
      }
      BOOL v7 = (uint64_t *)((char *)this + 176) != std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p[8]);
      int v38 = v7;
      uint64_t v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109888;
        int v44 = v39;
        __int16 v45 = 1024;
        int v46 = v37;
        __int16 v47 = 1024;
        int v48 = HIDWORD(v37);
        __int16 v49 = 1024;
        BOOL v50 = v7;
        _os_log_impl(&dword_26368A000, v8, OS_LOG_TYPE_DEFAULT, "#I Interface %u, count %u/%u, state %d", buf, 0x1Au);
        unsigned int v9 = v39;
        uint64_t v10 = *v3;
        uint64_t v11 = v2 + 1;
        unint64_t v12 = v2 + 1;
        if (*v3)
        {
          while (1)
          {
LABEL_15:
            while (1)
            {
              unint64_t v12 = (uint64_t **)v10;
              unsigned int v13 = *((_DWORD *)v10 + 7);
              if (v13 <= v9) {
                break;
              }
              uint64_t v10 = *v12;
              uint64_t v11 = v12;
              if (!*v12) {
                goto LABEL_19;
              }
            }
            if (v13 >= v9) {
              break;
            }
            uint64_t v10 = v12[1];
            if (!v10)
            {
              uint64_t v11 = v12 + 1;
              goto LABEL_19;
            }
          }
          uint64_t v14 = v12;
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v9 = v39;
        uint64_t v10 = *v3;
        uint64_t v11 = v2 + 1;
        unint64_t v12 = v2 + 1;
        if (*v3) {
          goto LABEL_15;
        }
      }
LABEL_19:
      uint64_t v14 = operator new(0x30uLL);
      v14[7] = v9;
      radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)(v14 + 8));
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v12;
      *uint64_t v11 = (uint64_t *)v14;
      char v15 = (void *)**v2;
      uint64_t v16 = (uint64_t *)v14;
      if (v15)
      {
        *uint64_t v2 = v15;
        uint64_t v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v2[1], v16);
      v2[2] = (void *)((char *)v2[2] + 1);
LABEL_23:
      *((void *)v14 + 4) = v37;
      v14[10] = v38;
      goto LABEL_24;
    }
LABEL_33:
    uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v20 || (uint64_t v21 = *((void *)this + 9), (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v23 = v22;
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = *((void *)this + 13);
    uint64_t v35 = v41;
    uint64_t v36 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_15_1;
    void aBlock[4] = this;
    void aBlock[5] = v21;
    BOOL v32 = v23;
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = _Block_copy(aBlock);
    uint64_t v26 = *((void *)this + 11);
    if (v26) {
      dispatch_retain(v26);
    }
    unint64_t v33 = v25;
    dispatch_object_t object = v26;
    (*(void (**)(uint64_t, void ***, void **))(*(void *)v24 + 56))(v24, &v35, &v33);
    if (object) {
      dispatch_release(object);
    }
    if (v33) {
      _Block_release(v33);
    }
    long long v27 = v36;
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v32) {
      std::__shared_weak_count::__release_weak(v32);
    }
    std::__shared_weak_count::__release_weak(v23);
    float v28 = v42;
    if (v42)
    {
      if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_26376F3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_26376F40C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_26376F420(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_26376F434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  operator delete(v35);
  if (a35 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5]) {
        goto LABEL_12;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          int v11 = 138412290;
          uint64_t v12 = v8;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Failed to update data stats:\n%@", (uint8_t *)&v11, 0xCu);
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return;
          }
          goto LABEL_13;
        }
LABEL_12:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return;
        }
        goto LABEL_13;
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_12;
      }
      LOWORD(v11) = 0;
      _os_log_debug_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEBUG, "#D Updated data stats", (uint8_t *)&v11, 2u);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_13:
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_16_2;
  void aBlock[4] = v2;
  void aBlock[5] = v4;
  uint64_t v16 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = (void *)a1[5];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  unsigned int v9 = a1[6];
  unsigned int v17 = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = *(NSObject **)(v2 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v19 = (unint64_t)v10;
  unint64_t v20 = (unint64_t)v11;
  uint64_t v12 = *(void *)(v2 + 104);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 64))(v12, &v13);
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_26376F804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5])
      {
LABEL_22:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15) = 138412290;
          *(void *)((char *)&v15 + 4) = v8;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Entering Low Power Failed: %@", (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Entering Low Power complete", (uint8_t *)&v15, 2u);
      }
      int v11 = (const void *)a1[7];
      if (v11) {
        uint64_t v12 = _Block_copy(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = a1[8];
      *(void *)&long long v15 = MEMORY[0x263EF8330];
      *((void *)&v15 + 1) = 1174405120;
      uint64_t v16 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      unsigned int v17 = &__block_descriptor_tmp_30_0;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock)
        {
LABEL_20:
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_22;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock) {
          goto LABEL_20;
        }
      }
      _Block_release(v14);
      goto LABEL_20;
    }
  }
}

void sub_26376FA5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  long long v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (uint64_t v4 = *(void *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_20_2;
  void aBlock[4] = v2;
  void aBlock[5] = v4;
  uint64_t v16 = v6;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v8 = (void *)a1[5];
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  unsigned int v9 = a1[6];
  unsigned int v17 = v8;
  dispatch_object_t v18 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = _Block_copy(aBlock);
  int v11 = *(NSObject **)(v2 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v19 = (unint64_t)v10;
  unint64_t v20 = (unint64_t)v11;
  uint64_t v12 = *(void *)(v2 + 104);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 72))(v12, &v13);
  if (object) {
    dispatch_release(object);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v18) {
    dispatch_release(v18);
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_26376FE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(void *a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      BOOL v7 = v6;
      if (!a1[5])
      {
LABEL_22:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v8 = *a2;
      if (*a2) {
        unsigned int v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        unsigned int v9 = 0;
      }
      uint64_t v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15) = 138412290;
          *(void *)((char *)&v15 + 4) = v8;
          _os_log_error_impl(&dword_26368A000, v10, OS_LOG_TYPE_ERROR, "Exiting Low Power Failed: %@", (uint8_t *)&v15, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Exiting Low Power complete", (uint8_t *)&v15, 2u);
      }
      int v11 = (const void *)a1[7];
      if (v11) {
        uint64_t v12 = _Block_copy(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = a1[8];
      *(void *)&long long v15 = MEMORY[0x263EF8330];
      *((void *)&v15 + 1) = 1174405120;
      uint64_t v16 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      unsigned int v17 = &__block_descriptor_tmp_30_0;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock)
        {
LABEL_20:
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_22;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v15);
        uint64_t v14 = aBlock;
        if (!aBlock) {
          goto LABEL_20;
        }
      }
      _Block_release(v14);
      goto LABEL_20;
    }
  }
}

void sub_26377005C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "net.health.svc");
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EABC90;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EABC90;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(void **)(a2 + 32);
  if (result) {
    CFTypeRef result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EABC90;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (long long v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_270EABD38;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_std::string::size_type shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A9704) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A9704 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A9704)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A9704 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*((void **)this + 3));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(v4);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  BOOL v7 = (os_unfair_lock_s *)xmmword_26A99F080;
  if (!(void)xmmword_26A99F080)
  {
    SharedData::create_default_global(&v24);
    long long v8 = v24;
    long long v24 = 0uLL;
    unsigned int v9 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
    xmmword_26A99F080 = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    BOOL v7 = (os_unfair_lock_s *)xmmword_26A99F080;
  }
  uint64_t v22 = v7;
  uint64_t v23 = (std::__shared_weak_count *)*((void *)&xmmword_26A99F080 + 1);
  if (*((void *)&xmmword_26A99F080 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_26A99F080 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  int v11 = (const void *)*MEMORY[0x263F204F8];
  size_t v12 = strlen((const char *)*MEMORY[0x263F204F8]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v21 = v16 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_25:
    memmove(v14, v11, (size_t)v13);
    *((unsigned char *)v13 + (void)v14) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  HIBYTE(v21) = v12;
  uint64_t v14 = __dst;
  if (v12) {
    goto LABEL_25;
  }
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_21:
    std::string __p = *(std::string *)a3;
    goto LABEL_27;
  }
LABEL_26:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((void *)a3 + 1));
LABEL_27:
  *(void *)&long long v24 = __dst;
  *((void *)&v24 + 1) = &__p;
  uint64_t v25 = v7;
  os_unfair_lock_lock(v7 + 10);
  SharedData::setPreference<std::string>(std::string const&,std::string)::{lambda(void)#1}::operator()((char **)&v24);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_32:
    operator delete(__dst[0]);
    unsigned int v17 = v23;
    if (!v23) {
      return a1;
    }
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_32;
  }
LABEL_29:
  unsigned int v17 = v23;
  if (!v23) {
    return a1;
  }
LABEL_33:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_2637709BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v21);
  if (*(char *)(v18 + 71) < 0)
  {
    operator delete(*v20);
    if ((*(char *)(v18 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v23 = *(std::__shared_weak_count **)(v18 + 8);
      if (!v23) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v18 + 47) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v19);
  uint64_t v23 = *(std::__shared_weak_count **)(v18 + 8);
  if (!v23) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  v2[0] = MEMORY[0x263EF8330];
  v2[1] = 0x40000000;
  v2[2] = ___ZN13ServerLogging4initEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_11;
  v2[4] = this;
  uint64_t v1 = this + 4;
  os_unfair_lock_lock(this + 4);
  ___ZN13ServerLogging4initEv_block_invoke((uint64_t)v2);
  os_unfair_lock_unlock(v1);
}

ctu::LogServer *___ZN13ServerLogging4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(ServerLogging **)(a1 + 32);
  uint64_t v2 = ServerLogging::monitorSnapshotPath_sync(v1);
  *((void *)v1 + 9) = v2;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v2);
  CFTypeRef result = (ctu::LogServer *)*((void *)v1 + 10);
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 48;
  uint64_t v2 = (const char *)*((void *)this + 6);
  v4.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkint64_t size = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_int64_t size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0) {
    long long v5 = (char *)this + 48;
  }
  else {
    long long v5 = v2;
  }
  if (stat(v5, &v19))
  {
    long long v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = v3;
      if (*((char *)this + 71) < 0) {
        BOOL v7 = *(const char **)v3;
      }
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = v7;
      _os_log_impl(&dword_26368A000, v6, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    unsigned int v8 = open(v3, 0x8000);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0;
  }
  unsigned int v8 = open(*(const char **)v3, 0x8000);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
LABEL_12:
  int v9 = v8;
  uintptr_t v10 = v8;
  global_queue = dispatch_get_global_queue(17, 0);
  size_t v12 = dispatch_source_create(MEMORY[0x263EF8410], v10, 0x21uLL, global_queue);
  uint64_t v13 = v12;
  if (v12)
  {
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 0x40000000;
    handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = this;
    int v18 = v9;
    dispatch_source_set_event_handler(v12, handler);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    void v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
    void v15[3] = &__block_descriptor_tmp_9;
    int v16 = v9;
    dispatch_source_set_cancel_handler(v13, v15);
    dispatch_activate(v13);
  }
  else
  {
    close(v9);
  }
  return v13;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  uint64_t v1 = (const void *)*MEMORY[0x263F204C0];
  size_t v2 = strlen((const char *)*MEMORY[0x263F204C0]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    timespec v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  timespec v4 = __dst;
  if (v2) {
LABEL_8:
  }
    memmove(v4, v1, (size_t)v3);
  *((unsigned char *)v3 + (void)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_5);
  capabilities::abs::logScratchPath((uint64_t *)__dst, v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_263770EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  CFTypeRef result = (ctu::LogServer *)*((void *)this + 10);
  if (result) {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

void ServerLogging::registerLogServer(os_unfair_lock_s *a1, uint64_t *a2)
{
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1174405120;
  BOOL v7 = ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  unsigned int v8 = &__block_descriptor_tmp_3_3;
  uint64_t v3 = *a2;
  size_t v2 = (std::__shared_weak_count *)a2[1];
  int v9 = a1;
  uint64_t v10 = v3;
  int v11 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  timespec v4 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v7(v6);
  os_unfair_lock_unlock(v4);
  uint64_t v5 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

ctu::LogServer *___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  CFTypeRef result = (ctu::LogServer *)a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 88);
  *(void *)(v3 + 80) = result;
  *(void *)(v3 + 88) = v4;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    CFTypeRef result = *(ctu::LogServer **)(v3 + 80);
  }
  if (result)
  {
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, const void **a2)
{
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  uint64_t v6 = ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  BOOL v7 = &__block_descriptor_tmp_4_3;
  uint64_t v3 = *a2;
  unsigned int v8 = a1;
  CFTypeRef cf = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v4 = a1 + 4;
  os_unfair_lock_lock(v4);
  v6((uint64_t)v5);
  os_unfair_lock_unlock(v4);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN13ServerLogging8snapshotEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 40));
    CFRelease(v1);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  timespec v0 = (const void *)*MEMORY[0x263F204C0];
  size_t v1 = strlen((const char *)*MEMORY[0x263F204C0]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    uint64_t v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17) {
      uint64_t v4 = v1 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    unint64_t v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  uint64_t v3 = __dst;
  if (v1) {
LABEL_8:
  }
    memmove(v3, v0, (size_t)v2);
  *((unsigned char *)v2 + (void)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_263771348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  unint64_t v7 = (std::string::size_type *)(a4 + 8);
  *(void *)a4 = 0;
  *(void *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath((uint64_t *)&__p, a1);
  v8.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blkint64_t size = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_int64_t size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v11 = &__p;
    }
    else {
      int v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    size_t v12 = opendir((const char *)v11);
    uint64_t v10 = v12;
    if (v12)
    {
      uint64_t v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  int v14 = *((char *)a2 + 23);
  if (v14 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v15 = (size_t)a2[1];
  }
  unint64_t v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    unsigned int v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    unsigned int v17 = &__p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15) {
      goto LABEL_29;
    }
  }
  if (v14 >= 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = *a2;
  }
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0) {
    uint64_t v21 = v37;
  }
  else {
    uint64_t v21 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v22 = v38;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v37[1];
  }
  uint64_t v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)&v40.st_uid = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a3 + 23);
  if (v25 >= 0) {
    uint64_t v26 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v26 = *(const std::string::value_type **)a3;
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v27 = *(void *)(a3 + 8);
  }
  float v28 = std::string::append((std::string *)&v40, v26, v27);
  std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
  std::string::size_type *v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  int st_gid_high = SHIBYTE(v40.st_gid);
  *(void *)a4 = v29;
  *(unsigned char *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0) {
      goto LABEL_43;
    }
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0) {
    goto LABEL_48;
  }
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_44;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath((uint64_t *)&v40.st_dev, v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0) {
    goto LABEL_51;
  }
}

void sub_263771664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = GetOsLogContext()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v6, 0xCu);
  }
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(void *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_7, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_7))
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &qword_26A99F7B0, &dword_26368A000);
      __cxa_guard_release(&_MergedGlobals_7);
    }
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  void block[4] = &qword_26A99F7B0;
  if (qword_26A99F7A8 == -1)
  {
    uint64_t v2 = *(void *)algn_26A99F7B8;
    *a1 = qword_26A99F7B0;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_26A99F7A8, block);
  uint64_t v2 = *(void *)algn_26A99F7B8;
  *a1 = qword_26A99F7B0;
  a1[1] = v2;
  if (v2) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_2637A8790;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int64_t size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    int64_t size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
    if (!v27.__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_6:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  int v6 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  unint64_t v7 = (os_unfair_lock_s *)qword_26A99F4E8;
  if (qword_26A99F4E8) {
    goto LABEL_31;
  }
  capabilities::abs::logScratchPath((uint64_t *)&__p, v6);
  size_t v8 = strlen((const char *)kDaemonLogScratchDir);
  int v9 = std::string::append(&__p, (const std::string::value_type *)kDaemonLogScratchDir, v8);
  std::string v27 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(v26, 170, sizeof(v26));
  capabilities::abs::logSnapshotPath((uint64_t *)v26, (capabilities::abs *)v9);
  uint64_t v10 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v10, (long long *)&v27, (long long *)v26);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  int v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EABE48;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 1);
  if (!v13)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v13->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)uint64_t v10 = v10;
    *((void *)v10 + 1) = v11;
    std::__shared_weak_count::__release_weak(v13);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_19:
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_20:
  if (__p.__r_.__value_.__r.__words[0])
  {
    ServerLogging::~ServerLogging((ServerLogging *)__p.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN13ServerLogging4initEv_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_11;
  char v30 = (uint64_t *)v10;
  os_unfair_lock_lock((os_unfair_lock_t)v10 + 4);
  ((void (*)(std::string *))__p.__r_.__value_.__r.__words[2])(&__p);
  os_unfair_lock_unlock((os_unfair_lock_t)v10 + 4);
  if (SHIBYTE(v26[2]) < 0)
  {
    operator delete(v26[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      size_t v15 = (std::__shared_weak_count *)off_26A99F4F0;
      qword_26A99F4E8 = (uint64_t)v10;
      off_26A99F4F0 = v11;
      if (!v15) {
        goto LABEL_30;
      }
LABEL_28:
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  size_t v15 = (std::__shared_weak_count *)off_26A99F4F0;
  qword_26A99F4E8 = (uint64_t)v10;
  off_26A99F4F0 = v11;
  if (v15) {
    goto LABEL_28;
  }
LABEL_30:
  unint64_t v7 = (os_unfair_lock_s *)qword_26A99F4E8;
LABEL_31:
  unint64_t v16 = (std::__shared_weak_count *)off_26A99F4F0;
  if (off_26A99F4F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26A99F4F0 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  unsigned int v17 = *(uint64_t **)(a1 + 32);
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  v25[0] = *v17;
  v25[1] = (uint64_t)v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    ServerLogging::registerLogServer(v7, v25);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v7, v25);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v19 = *(uint64_t **)(a1 + 32);
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  uint64_t v23 = v21;
  long long v24 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  std::string::size_type v29 = &__block_descriptor_tmp_3;
  char v30 = &v23;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    std::string::size_type v22 = v24;
    if (!v24) {
      return;
    }
  }
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_263771F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  size_t v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A981CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A981CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A981CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A981CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_15()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_26368A000);
  }
  return result;
}

void *util::GuaranteedCallback::GuaranteedCallback(void *a1, const void **a2, NSObject **a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    unint64_t v7 = _Block_copy(*a2);
    size_t v8 = *a3;
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v7 = 0;
  size_t v8 = *a3;
  if (*a3) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  dispatch_source_t v9 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, 0);
  uint64_t v10 = a1[5];
  a1[5] = v9;
  if (v10) {
    dispatch_release(v10);
  }
  a1[6] = 0;
  return a1;
}

{
  void *v7;
  NSObject *v8;
  dispatch_source_t v9;
  NSObject *v10;

  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    unint64_t v7 = _Block_copy(*a2);
    size_t v8 = *a3;
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v7 = 0;
  size_t v8 = *a3;
  if (*a3) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  dispatch_source_t v9 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, 0);
  uint64_t v10 = a1[5];
  a1[5] = v9;
  if (v10) {
    dispatch_release(v10);
  }
  a1[6] = 0;
  return a1;
}

void util::GuaranteedCallback::~GuaranteedCallback(dispatch_source_t *this)
{
  dispatch_source_cancel(this[5]);
  uint64_t v2 = this[5];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[3];
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_source_t v4 = this[2];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  dispatch_source_t v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(this[5]);
  uint64_t v2 = this[5];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = this[3];
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_source_t v4 = this[2];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void util::GuaranteedCallback::create(void **a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, util::GuaranteedCallback **a4@<X8>)
{
  *a4 = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = *a1;
  size_t v8 = (std::__shared_weak_count *)operator new(0x50uLL);
  v8->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EABEF8;
  if (v7) {
    unint64_t v7 = _Block_copy(v7);
  }
  uint64_t v10 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  if (v7)
  {
    int v11 = _Block_copy(v7);
    size_t v12 = (util::GuaranteedCallback *)&v8[1];
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v11 = 0;
  size_t v12 = (util::GuaranteedCallback *)&v8[1];
  if (v10) {
LABEL_7:
  }
    dispatch_retain(v10);
LABEL_8:
  *(void *)size_t v12 = 0;
  *((void *)v12 + 1) = 0;
  if (v11)
  {
    uint64_t v13 = _Block_copy(v11);
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  if (v10) {
LABEL_10:
  }
    dispatch_retain(v10);
LABEL_11:
  v8[1].__shared_weak_owners_ = (uint64_t)v13;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v8[2].__shared_owners_ = a3;
  v8[2].__shared_weak_owners_ = 0;
  dispatch_source_t v14 = dispatch_source_create(MEMORY[0x263EF8400], 1uLL, 0, 0);
  shared_weak_owners = v8[2].__shared_weak_owners_;
  v8[2].__shared_weak_owners_ = (uint64_t)v14;
  if (shared_weak_owners) {
    dispatch_release(shared_weak_owners);
  }
  v8[3].__vftable = 0;
  if (v10) {
    dispatch_release(v10);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v7) {
    _Block_release(v7);
  }
  std::string::size_type shared_owners = (std::__shared_weak_count *)v8[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
      v8[1].__shared_owners_ = (uint64_t)v8;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_30;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_30:
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a4 = v12;
  a4[1] = (util::GuaranteedCallback *)v8;
  util::GuaranteedCallback::start(v12);
}

void sub_2637725B0(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::start(util::GuaranteedCallback *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v2 || (v3 = *(void *)this, (dispatch_source_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v7 = *((void *)this + 5);
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 1174405120;
  handler[2] = ___ZN4util18GuaranteedCallback5startEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_24;
  handler[4] = this;
  void handler[5] = v3;
  int v11 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v7, handler);
  size_t v8 = *((void *)this + 5);
  dispatch_time_t v9 = dispatch_time(0, 1000000 * *((void *)this + 4));
  dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_activate(*((dispatch_object_t *)this + 5));
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void ___ZN4util18GuaranteedCallback5startEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  dispatch_source_t v4 = std::__shared_weak_count::lock(v2);
  uint64_t v26 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    dispatch_time_t v9 = v4;
LABEL_27:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[7] = v5;
  v23[8] = v5;
  v23[5] = v5;
  unsigned char v23[6] = v5;
  v23[3] = v5;
  v23[4] = v5;
  v23[1] = v5;
  v23[2] = v5;
  v23[0] = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v17 = v5;
  long long v18 = v5;
  long long v16 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"gave up after ", 14);
  int v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" milliseconds", 13);
  if ((BYTE8(v22) & 0x10) != 0)
  {
    uint64_t v10 = v22;
    if ((unint64_t)v22 < *((void *)&v19 + 1))
    {
      *(void *)&long long v22 = *((void *)&v19 + 1);
      uint64_t v10 = *((void *)&v19 + 1);
    }
    int v11 = (const void *)v19;
    std::string::size_type v7 = v10 - v19;
    if ((unint64_t)(v10 - v19) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_31;
    }
  }
  else
  {
    if ((BYTE8(v22) & 8) == 0)
    {
      std::string::size_type v7 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    int v11 = (const void *)*((void *)&v17 + 1);
    std::string::size_type v7 = *((void *)&v18 + 1) - *((void *)&v17 + 1);
    if (*((void *)&v18 + 1) - *((void *)&v17 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_31:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v12 = v7 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
  p_dst = &__dst;
  if (v7) {
LABEL_17:
  }
    memmove(p_dst, v11, v7);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_4;
  void block[4] = v3;
  int v29 = -534716413;
  int v14 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = __dst;
  }
  if (*(void *)(v3 + 48) == -1)
  {
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_33:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
  dispatch_once((dispatch_once_t *)(v3 + 48), block);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_23:
  if ((v14 & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_34:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  *(void *)&long long v16 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v16 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x263E69630](v23);
  dispatch_time_t v9 = v26;
  if (v26) {
    goto LABEL_27;
  }
}

void sub_263772AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  operator delete(v13);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v14 - 136);
  _Unwind_Resume(a1);
}

void sub_263772ACC(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

void sub_263772AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v5 - 136);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::run(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (dispatch_once_t *)(a1 + 48);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_4;
  void block[4] = a1;
  int v6 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    if (*v3 == -1)
    {
LABEL_3:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    std::string __p = *(std::string *)a3;
    if (*v3 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(v3, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_7;
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN4util18GuaranteedCallbackEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN4util18GuaranteedCallbackEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    uint64_t v3 = *(const void **)(v1 + 16);
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v9 = *(std::string *)(a1 + 40);
    uint64_t v3 = *(const void **)(v1 + 16);
    if (v3)
    {
LABEL_3:
      dispatch_source_t v4 = _Block_copy(v3);
      goto LABEL_6;
    }
  }
  dispatch_source_t v4 = 0;
LABEL_6:
  uint64_t v5 = *(NSObject **)(v1 + 24);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJiS7_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_10_2;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    int v13 = v2;
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      std::string __p = v9;
      goto LABEL_11;
    }
  }
  else
  {
    aBlock = 0;
    int v13 = v2;
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
LABEL_11:
  dispatch_async(v5, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    int v6 = aBlock;
    if (!aBlock) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  int v6 = aBlock;
  if (aBlock) {
LABEL_15:
  }
    _Block_release(v6);
LABEL_16:
  if (v4) {
    _Block_release(v4);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    std::string::size_type v7 = *(const void **)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    if (!v7) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  std::string::size_type v7 = *(const void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v7) {
LABEL_22:
  }
    _Block_release(v7);
LABEL_23:
  size_t v8 = *(NSObject **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v8) {
    dispatch_release(v8);
  }
}

void sub_263772DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EABEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EABEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::__on_zero_shared(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
  int v2 = *(NSObject **)(a1 + 64);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 48);
  if (v3) {
    dispatch_release(v3);
  }
  dispatch_source_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJiS7_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
  }
  else {
    std::string __p = *(std::string *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_263772F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = operator new(0x10uLL);
  void *v5 = &unk_270EABF78;
  v5[1] = this;
  *a2 = v5;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_270EAC1A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_26377301C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *support::log::delegate::context::context(void *this, void *a2)
{
  *this = &unk_270EABF78;
  this[1] = a2;
  return this;
}

{
  *this = &unk_270EABF78;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)uint64_t result = &unk_270EABF98;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v2 = *(void *)(this + 16);
    *(void *)a2 = *(void *)(this + 8);
    *(void *)(a2 + 8) = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(void *)uint64_t result = &unk_270EABFC8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

{
  *(void *)uint64_t result = &unk_270EABFC8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(void *)this = &unk_270EABFC8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

{
  *(void *)this = &unk_270EABFC8;
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(unsigned char *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, void *a4)
{
  *(void *)a1 = &unk_270EABFE0;
  *(void *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  std::string v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  char v17 = 12;
  strcpy(__s, ".log_manager");
  std::string::size_type v7 = std::string::append(&v18, __s, 0xCuLL);
  size_t v8 = (const char *)(a1 + 72);
  long long v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)(a1 + 88) = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_9:
  size_t v8 = *(const char **)v8;
LABEL_4:
  *(void *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(void *)(a1 + 104) = &unk_270EABFC8;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a3 + 8);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0;
  uint64_t v10 = a4[2];
  if (v10)
  {
    uint64_t v12 = *a4;
    int v11 = (uint64_t *)a4[1];
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(*a4 + 8);
    **(void **)(v12 + 8) = v13;
    uint64_t v14 = *(void *)(a1 + 120);
    *(void *)(v14 + 8) = v11;
    *int v11 = v14;
    *(void *)(a1 + 120) = v12;
    *(void *)(v12 + 8) = a1 + 120;
    *(void *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_26377332C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  long long v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    std::string::size_type v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        std::string::size_type v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    int v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    uint64_t v11[2] = v12;
    *int v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  std::string __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v15 = (uint64_t)&v15;
  long long v16 = &v15;
  uint64_t v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    uint64_t v6 = v15;
    std::string::size_type v7 = v16;
    uint64_t v8 = *v16;
    *(void *)(v8 + 8) = *(void *)(v15 + 8);
    **(void **)(v6 + 8) = v8;
    uint64_t v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        uint64_t v10 = (uint64_t *)v7[1];
        uint64_t v9 = v7[2];
        v7[2] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
        operator delete(v7);
        std::string::size_type v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4) {
      return a1;
    }
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    int v11 = operator new(0x18uLL);
    uint64_t v12 = *a4;
    *a4 = 0;
    uint64_t v13 = *(void *)(a1 + 120);
    v11[1] = a1 + 120;
    uint64_t v11[2] = v12;
    *int v11 = v13;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 120) = v11;
    ++*(void *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_2637734D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_2637734F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        std::string::size_type v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        void v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = operator new(0x18uLL);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  void v5[2] = v6;
  void *v5 = v7;
  *(void *)(v7 + 8) = v5;
  *uint64_t v3 = v5;
  ++v3[2];

  std::mutex::unlock(v4);
}

void sub_263773634(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  *(void *)this = &unk_270EABFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(void *)this = &unk_270EABFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_270EABFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void sub_263773874(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_263773898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_270EAC288;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_263773A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x90uLL);
  std::string __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_270EAC288;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
    operator delete(v10);
  }
}

void sub_263773BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      uint64_t v7 = "???";
      if (a2 > 6) {
        goto LABEL_4;
      }
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        uint64_t v8 = "???";
LABEL_7:
        int v9 = 136315394;
        uint64_t v10 = v7;
        __int16 v11 = 2080;
        uint64_t v12 = v8;
        _os_log_impl(&dword_26368A000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(unsigned char *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_26A99F588)
  {
    uint64_t v1 = (char *)operator new(0xA8uLL);
    *((void *)v1 + 1) = 0;
    *((void *)v1 + 2) = 0;
    *(void *)uint64_t v1 = &unk_270EAC1F0;
    uint64_t v2 = (uint64_t)(v1 + 24);
    *((void *)v1 + 3) = &unk_270EAC240;
    *((void *)v1 + 4) = 850045863;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *((void *)v1 + 14) = 0;
    *((void *)v1 + 13) = 0;
    *((void *)v1 + 11) = 0;
    *((void *)v1 + 12) = v1 + 104;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
    *(_OWORD *)(v1 + 152) = 0u;
    uint64_t v3 = (std::__shared_weak_count *)off_26A99F590;
    qword_26A99F588 = (uint64_t)(v1 + 24);
    off_26A99F590 = v1;
    if (!v3) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v2 = qword_26A99F588;
  uint64_t v1 = (char *)off_26A99F590;
  if (off_26A99F590) {
LABEL_7:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v1 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 136);
  if (v4)
  {
    uint64_t v5 = (void *)(v2 + 128);
    unint64_t v6 = *(void ***)(v2 + 104);
    uint64_t v7 = (*(void **)((char *)v6 + ((*(void *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(v2 + 128) & 0x1FFLL];
    unint64_t v8 = *(void *)(v2 + 128) + 1;
    *(void *)(v2 + 128) = v8;
    *(void *)(v2 + 136) = v4 - 1;
    if (v8 >= 0x400)
    {
      operator delete(*v6);
      *(void *)(v2 + 104) += 8;
      uint64_t v9 = -512;
LABEL_22:
      *v5 += v9;
    }
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    uint64_t v7 = (uint64_t)v10;
    if (v10)
    {
      uint64_t v12 = (uint64_t **)(v2 + 80);
      __int16 v11 = *(uint64_t **)(v2 + 80);
      if (!v11)
      {
        uint64_t v13 = (uint64_t **)(v2 + 80);
LABEL_19:
        uint64_t v15 = (uint64_t *)operator new(0x28uLL);
        void v15[4] = v7;
        uint64_t *v15 = 0;
        v15[1] = 0;
        void v15[2] = (uint64_t)v13;
        *uint64_t v12 = v15;
        uint64_t v16 = **(void **)(v2 + 72);
        if (v16)
        {
          *(void *)(v2 + 72) = v16;
          uint64_t v15 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v15);
        uint64_t v5 = (void *)(v2 + 88);
        uint64_t v9 = 1;
        goto LABEL_22;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v11;
          unint64_t v14 = v11[4];
          if ((unint64_t)v10 >= v14) {
            break;
          }
          __int16 v11 = *v13;
          uint64_t v12 = v13;
          if (!*v13) {
            goto LABEL_19;
          }
        }
        if (v14 >= (unint64_t)v10) {
          break;
        }
        __int16 v11 = v13[1];
        if (!v11)
        {
          uint64_t v12 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1 || atomic_fetch_add((atomic_ullong *volatile)v1 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    return v7;
  }
  (*(void (**)(char *))(*(void *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v7;
}

void sub_263773FF4(_Unwind_Exception *a1)
{
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_26A99F588) {
    goto LABEL_2;
  }
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_270EAC1F0;
  uint64_t v4 = (uint64_t)(v3 + 24);
  *((void *)v3 + 3) = &unk_270EAC240;
  *((void *)v3 + 4) = 850045863;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = v3 + 104;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  uint64_t v5 = (std::__shared_weak_count *)off_26A99F590;
  qword_26A99F588 = (uint64_t)(v3 + 24);
  off_26A99F590 = v3;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
LABEL_2:
    uint64_t v4 = qword_26A99F588;
    uint64_t v3 = (char *)off_26A99F590;
    if (!off_26A99F590) {
      goto LABEL_8;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  unint64_t v8 = *(void **)(v4 + 80);
  uint64_t v7 = v4 + 80;
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = (void *)v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (void *)v7 || v9[4] > (unint64_t)a2) {
LABEL_19:
  }
    uint64_t v9 = (void *)v7;
  if (!v3 || atomic_fetch_add((atomic_ullong *volatile)v3 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v9 != (void *)v7) {
      goto LABEL_23;
    }
LABEL_27:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(void *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v9 == (void *)v7) {
    goto LABEL_27;
  }
LABEL_23:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_26A99F588)
  {
    uint64_t v13 = (char *)operator new(0xA8uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)uint64_t v13 = &unk_270EAC1F0;
    *((void *)v13 + 3) = &unk_270EAC240;
    *((void *)v13 + 4) = 850045863;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *((void *)v13 + 14) = 0;
    *((void *)v13 + 13) = 0;
    *((void *)v13 + 11) = 0;
    *((void *)v13 + 12) = v13 + 104;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    unint64_t v14 = (std::__shared_weak_count *)off_26A99F590;
    qword_26A99F588 = (uint64_t)(v13 + 24);
    off_26A99F590 = v13;
    if (!v14)
    {
      long long v135 = (std::__shared_weak_count *)v13;
      goto LABEL_34;
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  uint64_t v13 = (char *)off_26A99F590;
  long long v135 = (std::__shared_weak_count *)off_26A99F590;
  if (off_26A99F590) {
LABEL_34:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_26A99F588) {
    goto LABEL_36;
  }
  uint64_t v15 = (char *)operator new(0xA8uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_270EAC1F0;
  uint64_t v16 = (uint64_t)(v15 + 24);
  *((void *)v15 + 3) = &unk_270EAC240;
  *((void *)v15 + 4) = 850045863;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v15 + 104;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  uint64_t v17 = (std::__shared_weak_count *)off_26A99F590;
  qword_26A99F588 = (uint64_t)(v15 + 24);
  off_26A99F590 = v15;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_36:
    uint64_t v16 = qword_26A99F588;
    uint64_t v15 = (char *)off_26A99F590;
    uint64_t v136 = (std::__shared_weak_count *)off_26A99F590;
    if (!off_26A99F590) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v136 = (std::__shared_weak_count *)v15;
LABEL_42:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::string v18 = (std::mutex *)(v16 + 8);
  std::mutex::lock((std::mutex *)(v16 + 8));
  long long v19 = *(void **)(v16 + 80);
  if (!v19) {
    goto LABEL_175;
  }
  uint64_t v20 = v16 + 80;
  do
  {
    unint64_t v21 = v19[4];
    BOOL v22 = v21 >= (unint64_t)a2;
    if (v21 >= (unint64_t)a2) {
      uint64_t v23 = v19;
    }
    else {
      uint64_t v23 = v19 + 1;
    }
    if (v22) {
      uint64_t v20 = (uint64_t)v19;
    }
    long long v19 = (void *)*v23;
  }
  while (*v23);
  if (v20 == v16 + 80 || *(void *)(v20 + 32) > (unint64_t)a2)
  {
LABEL_175:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v24 = *(char **)(v16 + 112);
  int v25 = *(char **)(v16 + 104);
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = ((v24 - v25) << 6) - 1;
  }
  unint64_t v29 = *(void *)(v16 + 128);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = v28 + v29;
  if (v27 != v28 + v29) {
    goto LABEL_151;
  }
  if (v29 >= 0x200)
  {
    *(void *)(v16 + 128) = v29 - 512;
    CFTypeID v31 = v25 + 8;
    uint64_t v32 = *(void *)v25;
    *(void *)(v16 + 104) = v25 + 8;
    if (v24 != *(char **)(v16 + 120))
    {
LABEL_148:
      *(void *)unint64_t v24 = v32;
      goto LABEL_149;
    }
    int v33 = *(char **)(v16 + 96);
    if (v31 > v33)
    {
      uint64_t v34 = (v31 - v33) >> 3;
      if (v34 >= -1) {
        uint64_t v35 = v34 + 1;
      }
      else {
        uint64_t v35 = v34 + 2;
      }
      uint64_t v36 = v35 >> 1;
      uint64_t v37 = -v36;
      unsigned __int8 v38 = &v31[-8 * v36];
      int64_t v39 = v24 - v31;
      if (v24 != v31)
      {
        memmove(&v31[-8 * v36], v31, v24 - v31);
        unint64_t v24 = *(char **)(v16 + 104);
      }
      stat v40 = &v24[8 * v37];
      unint64_t v24 = &v38[v39];
      *(void *)(v16 + 104) = v40;
      *(void *)(v16 + 112) = &v38[v39];
      goto LABEL_148;
    }
    if (v24 == v33) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = (v24 - v33) >> 2;
    }
    if (!(v52 >> 61))
    {
      xpc_object_t v53 = (char *)operator new(8 * v52);
      unint64_t v54 = &v53[8 * (v52 >> 2)];
      int64_t v56 = v24 - v31;
      BOOL v55 = v24 == v31;
      unint64_t v24 = v54;
      if (v55) {
        goto LABEL_146;
      }
      unint64_t v24 = &v54[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38)
      {
        xpc_object_t v109 = &v53[8 * (v52 >> 2)];
        uint64_t v58 = v109;
        if ((unint64_t)(v109 - v31) >= 0x20)
        {
          uint64_t v110 = (v57 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v58 = &v54[v111];
          v31 += v111;
          uint64_t v112 = (long long *)(v25 + 24);
          xpc_object_t v113 = v109 + 16;
          uint64_t v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v115 = *v112;
            *(v113 - 1) = *(v112 - 1);
            _OWORD *v113 = v115;
            v112 += 2;
            v113 += 2;
            v114 -= 4;
          }
          while (v114);
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_146:
            *(void *)(v16 + 96) = v53;
            *(void *)(v16 + 104) = v54;
            *(void *)(v16 + 112) = v24;
            *(void *)(v16 + 120) = &v53[8 * v52];
            if (v33)
            {
              operator delete(v33);
              unint64_t v24 = *(char **)(v16 + 112);
            }
            goto LABEL_148;
          }
        }
      }
      else
      {
        uint64_t v58 = &v53[8 * (v52 >> 2)];
      }
      do
      {
        uint64_t v116 = *(void *)v31;
        v31 += 8;
        *(void *)uint64_t v58 = v116;
        v58 += 8;
      }
      while (v58 != v24);
      goto LABEL_146;
    }
LABEL_177:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v41 = v26 >> 3;
  size_t v42 = *(char **)(v16 + 120);
  uint64_t v43 = *(char **)(v16 + 96);
  if (v26 >> 3 >= (unint64_t)((v42 - v43) >> 3))
  {
    if (v42 == v43) {
      unint64_t v46 = 1;
    }
    else {
      unint64_t v46 = (v42 - v43) >> 2;
    }
    if (!(v46 >> 61))
    {
      __int16 v47 = (char *)operator new(8 * v46);
      int v48 = operator new(0x1000uLL);
      __int16 v49 = &v47[8 * v41];
      BOOL v50 = &v47[8 * v46];
      if (v41 == v46)
      {
        std::string::size_type v134 = v48;
        if (v26 < 1)
        {
          if (v24 == v25) {
            unint64_t v60 = 1;
          }
          else {
            unint64_t v60 = v26 >> 2;
          }
          if (v60 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v49 = (char *)operator new(8 * v60);
          BOOL v50 = &v49[8 * v60];
          operator delete(v47);
          int v25 = *(char **)(v16 + 104);
          unint64_t v24 = *(char **)(v16 + 112);
          __int16 v47 = v49;
        }
        else
        {
          unint64_t v51 = v41 + 2;
          if (v41 >= -1) {
            unint64_t v51 = v41 + 1;
          }
          v49 -= 8 * (v51 >> 1);
        }
        int v48 = v134;
      }
      *(void *)__int16 v49 = v48;
      uint64_t v61 = v49 + 8;
      if (v24 != v25)
      {
        do
        {
          if (v49 == v47)
          {
            if (v61 >= v50)
            {
              if (v50 == v47) {
                unint64_t v68 = 1;
              }
              else {
                unint64_t v68 = (v50 - v47) >> 2;
              }
              if (v68 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v69 = (char *)operator new(8 * v68);
              xpc_object_t v70 = v69;
              unint64_t v71 = (v68 + 3) >> 2;
              __int16 v49 = &v69[8 * v71];
              int64_t v72 = v61 - v47;
              BOOL v55 = v61 == v47;
              uint64_t v61 = v49;
              if (!v55)
              {
                uint64_t v61 = &v49[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                xpc_object_t v74 = &v69[8 * v71];
                dispatch_object_t v75 = v47;
                if (v73 < 0x38) {
                  goto LABEL_181;
                }
                uint64_t v76 = 8 * v71;
                xpc_object_t v74 = &v69[8 * v71];
                dispatch_object_t v75 = v47;
                if ((unint64_t)(v74 - v47) < 0x20) {
                  goto LABEL_181;
                }
                uint64_t v77 = (v73 >> 3) + 1;
                uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
                xpc_object_t v74 = &v49[v78];
                dispatch_object_t v75 = &v47[v78];
                dispatch_object_t v79 = (long long *)(v47 + 16);
                xpc_object_t v80 = &v69[v76 + 16];
                uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v82 = *v79;
                  *((_OWORD *)v80 - 1) = *(v79 - 1);
                  *(_OWORD *)xpc_object_t v80 = v82;
                  v79 += 2;
                  v80 += 32;
                  v81 -= 4;
                }
                while (v81);
                if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_181:
                  do
                  {
                    uint64_t v83 = *(void *)v75;
                    v75 += 8;
                    *(void *)xpc_object_t v74 = v83;
                    v74 += 8;
                  }
                  while (v74 != v61);
                }
              }
              BOOL v50 = &v69[8 * v68];
              operator delete(v47);
              __int16 v47 = v70;
            }
            else
            {
              uint64_t v64 = (v50 - v61) >> 3;
              if (v64 >= -1) {
                uint64_t v65 = v64 + 1;
              }
              else {
                uint64_t v65 = v64 + 2;
              }
              uint64_t v66 = v65 >> 1;
              __int16 v49 = &v47[8 * (v65 >> 1)];
              unint64_t v67 = v47;
              if (v61 != v47)
              {
                memmove(v49, v47, v61 - v47);
                unint64_t v67 = v61;
              }
              uint64_t v61 = (char *)v67 + 8 * v66;
            }
          }
          uint64_t v63 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v49 - 1) = v63;
          v49 -= 8;
        }
        while (v24 != *(char **)(v16 + 104));
      }
      uint64_t v62 = *(void **)(v16 + 96);
      *(void *)(v16 + 96) = v47;
      *(void *)(v16 + 104) = v49;
      *(void *)(v16 + 112) = v61;
      *(void *)(v16 + 120) = v50;
      std::string v18 = (std::mutex *)(v16 + 8);
      if (v62) {
        operator delete(v62);
      }
      goto LABEL_150;
    }
    goto LABEL_177;
  }
  int v44 = operator new(0x1000uLL);
  __int16 v45 = v44;
  if (v42 == v24)
  {
    if (v25 == v43)
    {
      if (v24 == v25) {
        unint64_t v84 = 1;
      }
      else {
        unint64_t v84 = (v42 - v25) >> 2;
      }
      if (v84 >> 61) {
        goto LABEL_177;
      }
      dispatch_object_t v85 = (char *)operator new(8 * v84);
      unint64_t v86 = (v84 + 3) >> 2;
      size_t v59 = &v85[8 * v86];
      uint64_t v87 = v59;
      if (v24 != v25)
      {
        uint64_t v87 = &v59[8 * v41];
        xpc_object_t v88 = &v85[8 * v86];
        dispatch_object_t v89 = v25;
        if ((unint64_t)(v26 - 8) < 0x38) {
          goto LABEL_182;
        }
        char v90 = &v85[8 * v86];
        xpc_object_t v88 = v90;
        dispatch_object_t v89 = v25;
        if ((unint64_t)(v90 - v25) < 0x20) {
          goto LABEL_182;
        }
        unint64_t v91 = ((unint64_t)(v26 - 8) >> 3) + 1;
        uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        xpc_object_t v88 = &v59[v92];
        dispatch_object_t v89 = &v25[v92];
        xpc_object_t v93 = (long long *)(v25 + 16);
        xpc_object_t v94 = v90 + 16;
        uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v96 = *v93;
          *(v94 - 1) = *(v93 - 1);
          _OWORD *v94 = v96;
          v93 += 2;
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            uint64_t v97 = *(void *)v89;
            v89 += 8;
            *(void *)xpc_object_t v88 = v97;
            v88 += 8;
          }
          while (v88 != v87);
        }
      }
      *(void *)(v16 + 96) = v85;
      *(void *)(v16 + 104) = v59;
      *(void *)(v16 + 112) = v87;
      *(void *)(v16 + 120) = &v85[8 * v84];
      if (v25)
      {
        operator delete(v25);
        size_t v59 = *(char **)(v16 + 104);
      }
    }
    else
    {
      size_t v59 = v25;
    }
    *((void *)v59 - 1) = v45;
    xpc_object_t v98 = *(char **)(v16 + 104);
    dispatch_object_t v99 = *(char **)(v16 + 112);
    *(void *)(v16 + 104) = v98 - 8;
    uint64_t v100 = *((void *)v98 - 1);
    *(void *)(v16 + 104) = v98;
    if (v99 != *(char **)(v16 + 120)) {
      goto LABEL_133;
    }
    xpc_object_t v101 = *(char **)(v16 + 96);
    if (v98 > v101)
    {
      uint64_t v102 = (v98 - v101) >> 3;
      if (v102 >= -1) {
        uint64_t v103 = v102 + 1;
      }
      else {
        uint64_t v103 = v102 + 2;
      }
      uint64_t v104 = v103 >> 1;
      uint64_t v105 = -v104;
      unint64_t v106 = &v98[-8 * v104];
      size_t v107 = v99 - v98;
      if (v107)
      {
        memmove(&v98[-8 * v104], v98, v107);
        xpc_object_t v98 = *(char **)(v16 + 104);
      }
      __int16 v108 = &v106[v107];
      *(void *)(v16 + 104) = &v98[8 * v105];
      *(void *)(v16 + 112) = v108;
      *(void *)__int16 v108 = v100;
      goto LABEL_149;
    }
    if (v99 == v101) {
      unint64_t v118 = 1;
    }
    else {
      unint64_t v118 = (v99 - v101) >> 2;
    }
    if (v118 >> 61) {
      goto LABEL_177;
    }
    xpc_object_t v119 = (char *)operator new(8 * v118);
    BOOL v120 = &v119[8 * (v118 >> 2)];
    int64_t v121 = v99 - v98;
    BOOL v55 = v99 == v98;
    dispatch_object_t v99 = v120;
    if (!v55)
    {
      dispatch_object_t v99 = &v120[v121 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v122 = v121 - 8;
      if (v122 < 0x38)
      {
        xpc_object_t v123 = &v119[8 * (v118 >> 2)];
        do
        {
LABEL_172:
          uint64_t v132 = *(void *)v98;
          v98 += 8;
          *(void *)xpc_object_t v123 = v132;
          v123 += 8;
        }
        while (v123 != v99);
        goto LABEL_173;
      }
      xpc_object_t v124 = &v119[8 * (v118 >> 2)];
      xpc_object_t v123 = v124;
      if ((unint64_t)(v124 - v98) < 0x20) {
        goto LABEL_172;
      }
      uint64_t v125 = (v122 >> 3) + 1;
      uint64_t v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
      xpc_object_t v123 = &v120[v126];
      xpc_object_t v127 = &v98[v126];
      xpc_object_t v128 = (long long *)(v98 + 16);
      xpc_object_t v129 = v124 + 16;
      uint64_t v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v131 = *v128;
        *(v129 - 1) = *(v128 - 1);
        *xpc_object_t v129 = v131;
        v128 += 2;
        v129 += 2;
        v130 -= 4;
      }
      while (v130);
      xpc_object_t v98 = v127;
      if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_172;
      }
    }
LABEL_173:
    *(void *)(v16 + 96) = v119;
    *(void *)(v16 + 104) = v120;
    *(void *)(v16 + 112) = v99;
    *(void *)(v16 + 120) = &v119[8 * v118];
    if (v101)
    {
      operator delete(v101);
      dispatch_object_t v99 = *(char **)(v16 + 112);
    }
LABEL_133:
    *(void *)dispatch_object_t v99 = v100;
    goto LABEL_149;
  }
  *(void *)unint64_t v24 = v44;
LABEL_149:
  *(void *)(v16 + 112) += 8;
LABEL_150:
  int v25 = *(char **)(v16 + 104);
  uint64_t v28 = *(void *)(v16 + 136);
  unint64_t v30 = *(void *)(v16 + 128) + v28;
LABEL_151:
  *(void *)(*(void *)&v25[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = a2;
  *(void *)(v16 + 136) = v28 + 1;
  std::mutex::unlock(v18);
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
    uint64_t v117 = v135;
    if (!v135) {
      return;
    }
  }
  else
  {
    uint64_t v117 = v135;
    if (!v135) {
      return;
    }
  }
  if (!atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_263774C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    uint64_t v5 = (std::mutex *)(a1 + 8);
    uint64_t v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      uint64_t v9 = *(void *)(a1 + 120);
      void *v7 = v9;
      *(void *)(v9 + 8) = v7;
      *(void *)(a1 + 120) = v7;
      ++*(void *)(a1 + 136);
      std::mutex::unlock(v5);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_263774DC8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 112) = 3;
  if (*((void *)this + 17))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = *((void *)this + 15);
    uint64_t v5 = (char *)*((void *)this + 16);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        uint64_t v8 = (char *)*((void *)v5 + 1);
        uint64_t v7 = *((void *)v5 + 2);
        *((void *)v5 + 2) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v3);
    }
  }

  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = (void *)((char *)a1 + 120);
  uint64_t v5 = *((void *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(void, uint64_t, char *))(v5 + 16))(*(void *)(v5 + 16), a2, a3);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((void *)v5 != v4);
  }

  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void *v4 = &unk_270EABF98;
  v4[1] = v6;
  void v4[2] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    void *v5 = &unk_270EAC010;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    *((unsigned char *)v4 + 24) = 1;
    void *v4 = &unk_270EAC010;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EABF98;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_270EAC010;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;

  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EABF98;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(void *)a1 = &unk_270EAC010;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = operator new(0x20uLL);
  double result = 0.0;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  *(void *)uint64_t v3 = &unk_270EAC010;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  if (a3)
  {
    memset(v6, 170, sizeof(v6));
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 24))(v6);
    if (LOBYTE(v6[2]))
    {
      if (!v6[1]) {
        return;
      }
      uint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v6[1]);
      if (v4)
      {
        uint64_t v5 = v4;
        if (v6[0]) {
          fprintf((FILE *)*MEMORY[0x263EF8358], "%s\n", a3);
        }
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x263EF8358], "%s\n", a3);
    }
    if (LOBYTE(v6[2]))
    {
      if (v6[1]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6[1]);
      }
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  uint64_t v10 = 0;
  BOOL v11 = &unk_270EABFC8;
  char v12 = 3;
  uint64_t v8 = (uint64_t)&v8;
  uint64_t v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    uint64_t v2 = v8;
    uint64_t v3 = v9;
    uint64_t v4 = *v9;
    *(void *)(v4 + 8) = *(void *)(v8 + 8);
    **(void **)(v2 + 8) = v4;
    uint64_t v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v3[1];
        uint64_t v6 = v3[2];
        void v3[2] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_270EAC040;
  return this;
}

void sub_26377544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *support::log::client::descriptor::descriptor(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_270EAC070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = &unk_270EAC070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_8))
  {
    *(_OWORD *)&qword_26A99F7D8 = 0u;
    *(_OWORD *)&qword_26A99F7C8 = 0u;
    dword_26A99F7E8 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_8);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v5 = *(void *)(a1 + 8);
  }
  unint64_t v6 = v5 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 1;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v4 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a1;
  }
  memmove(p_dst, v10, v5);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v5) = 44;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    char v12 = (const std::string::value_type *)a2;
  }
  else {
    char v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  unint64_t v14 = std::string::append(&__dst, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  xpc_object_t __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p)) {
      goto LABEL_156;
    }
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  uint64_t v16 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v72 = *(std::string *)a1;
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v71 = *(std::string *)a2;
  }
  *(void *)uint64_t v16 = &unk_270EAC170;
  uint64_t v17 = v16 + 8;
  *(std::string *)(v16 + 8) = v72;
  memset(&v72, 0, sizeof(v72));
  *(std::string *)(v16 + 32) = v71;
  memset(&v71, 0, sizeof(v71));
  if (v16[31] < 0)
  {
    uint64_t v17 = *(const char **)v17;
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else
  {
    std::string v18 = v16 + 32;
    if ((v16[55] & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  std::string v18 = *(const char **)v18;
LABEL_34:
  *((void *)v16 + 7) = os_log_create(v17, v18);
  if (SHIBYTE(__p[2]) >= 0) {
    long long v19 = (uint64_t *)__p;
  }
  else {
    long long v19 = (uint64_t *)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = HIBYTE(__p[2]);
  }
  else {
    unint64_t v20 = (unint64_t)__p[1];
  }
  unint64_t v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v19, v20);
  unint64_t v22 = v21;
  unint64_t v23 = qword_26A99F7D0;
  if (qword_26A99F7D0)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26A99F7D0);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = v21;
      if (v21 >= qword_26A99F7D0) {
        unint64_t v25 = v21 % qword_26A99F7D0;
      }
    }
    else
    {
      unint64_t v25 = (qword_26A99F7D0 - 1) & v21;
    }
    uint64_t v26 = *(uint64_t ***)(qword_26A99F7C8 + 8 * v25);
    if (v26)
    {
      uint64_t v27 = *v26;
      if (*v26)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v28 = (void *)HIBYTE(__p[2]);
        }
        else {
          uint64_t v28 = __p[1];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          unint64_t v29 = __p;
        }
        else {
          unint64_t v29 = (void **)__p[0];
        }
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v35 = v27[1];
            if (v35 == v22)
            {
              uint64_t v36 = *((unsigned __int8 *)v27 + 39);
              if ((v36 & 0x80u) == 0) {
                uint64_t v37 = (void *)*((unsigned __int8 *)v27 + 39);
              }
              else {
                uint64_t v37 = (void *)v27[3];
              }
              if (v37 == v28)
              {
                unsigned __int8 v38 = (const void **)(v27 + 2);
                if ((v36 & 0x80) != 0)
                {
                  if (!memcmp(*v38, v29, v27[3])) {
                    goto LABEL_154;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v27 + 39)) {
                    goto LABEL_154;
                  }
                  int64_t v39 = v29;
                  while (*(unsigned __int8 *)v38 == *(unsigned __int8 *)v39)
                  {
                    unsigned __int8 v38 = (const void **)((char *)v38 + 1);
                    int64_t v39 = (void **)((char *)v39 + 1);
                    if (!--v36) {
                      goto LABEL_154;
                    }
                  }
                }
              }
            }
            else if ((v35 & (v23 - 1)) != v25)
            {
              goto LABEL_90;
            }
            uint64_t v27 = (uint64_t *)*v27;
            if (!v27) {
              goto LABEL_90;
            }
          }
        }
        do
        {
          unint64_t v30 = v27[1];
          if (v30 == v22)
          {
            uint64_t v31 = *((unsigned __int8 *)v27 + 39);
            if ((v31 & 0x80u) == 0) {
              uint64_t v32 = (void *)*((unsigned __int8 *)v27 + 39);
            }
            else {
              uint64_t v32 = (void *)v27[3];
            }
            if (v32 == v28)
            {
              int v33 = (const void **)(v27 + 2);
              if ((v31 & 0x80) != 0)
              {
                if (!memcmp(*v33, v29, v27[3])) {
                  goto LABEL_154;
                }
              }
              else
              {
                if (!*((unsigned char *)v27 + 39)) {
                  goto LABEL_154;
                }
                uint64_t v34 = v29;
                while (*(unsigned __int8 *)v33 == *(unsigned __int8 *)v34)
                {
                  int v33 = (const void **)((char *)v33 + 1);
                  uint64_t v34 = (void **)((char *)v34 + 1);
                  if (!--v31) {
                    goto LABEL_154;
                  }
                }
              }
            }
          }
          else
          {
            if (v30 >= v23) {
              v30 %= v23;
            }
            if (v30 != v25) {
              break;
            }
          }
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
  else
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  stat v40 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_26A99F7D8;
  *(void *)stat v40 = 0;
  *((void *)v40 + 1) = v22;
  uint64_t v41 = (std::string *)(v40 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v40 + 4) = __p[2];
  }
  *((void *)v40 + 5) = v16;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v42 = (float)(unint64_t)(qword_26A99F7E0 + 1);
  if (!v23 || (float)(*(float *)&dword_26A99F7E8 * (float)v23) < v42)
  {
    BOOL v45 = 1;
    if (v23 >= 3) {
      BOOL v45 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v46 = v45 | (2 * v23);
    unint64_t v47 = vcvtps_u32_f32(v42 / *(float *)&dword_26A99F7E8);
    if (v46 <= v47) {
      unint64_t prime = v47;
    }
    else {
      unint64_t prime = v46;
    }
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    unint64_t v23 = qword_26A99F7D0;
    if (prime > qword_26A99F7D0) {
      goto LABEL_107;
    }
    if (prime >= qword_26A99F7D0) {
      goto LABEL_140;
    }
    unint64_t v59 = vcvtps_u32_f32((float)(unint64_t)qword_26A99F7E0 / *(float *)&dword_26A99F7E8);
    if ((unint64_t)qword_26A99F7D0 < 3
      || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26A99F7D0), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
    {
      unint64_t v59 = std::__next_prime(v59);
    }
    else
    {
      uint64_t v61 = 1 << -(char)__clz(v59 - 1);
      if (v59 >= 2) {
        unint64_t v59 = v61;
      }
    }
    if (prime <= v59) {
      unint64_t prime = v59;
    }
    if (prime >= v23)
    {
      unint64_t v23 = qword_26A99F7D0;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        __int16 v49 = operator new(8 * prime);
        BOOL v50 = (void *)qword_26A99F7C8;
        qword_26A99F7C8 = (uint64_t)v49;
        if (v50) {
          operator delete(v50);
        }
        uint64_t v51 = 0;
        qword_26A99F7D0 = prime;
        do
          *(void *)(qword_26A99F7C8 + 8 * v51++) = 0;
        while (prime != v51);
        unint64_t v52 = (void **)qword_26A99F7D8;
        if (!qword_26A99F7D8) {
          goto LABEL_139;
        }
        unint64_t v53 = *(void *)(qword_26A99F7D8 + 8);
        unint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          unint64_t v55 = v53 & v54;
          *(void *)(qword_26A99F7C8 + 8 * v55) = &qword_26A99F7D8;
          for (CFIndex i = *v52; *v52; CFIndex i = *v52)
          {
            unint64_t v57 = i[1] & v54;
            if (v57 == v55)
            {
              unint64_t v52 = (void **)i;
            }
            else if (*(void *)(qword_26A99F7C8 + 8 * v57))
            {
              std::__shared_weak_count *v52 = (void *)*i;
              uint64_t v58 = 8 * v57;
              *CFIndex i = **(void **)(qword_26A99F7C8 + v58);
              **(void **)(qword_26A99F7C8 + v58) = i;
            }
            else
            {
              *(void *)(qword_26A99F7C8 + 8 * v57) = v52;
              unint64_t v52 = (void **)i;
              unint64_t v55 = v57;
            }
          }
LABEL_139:
          unint64_t v23 = prime;
          goto LABEL_140;
        }
        if (v53 >= prime) {
          v53 %= prime;
        }
        *(void *)(qword_26A99F7C8 + 8 * v53) = &qword_26A99F7D8;
        uint64_t v62 = *v52;
        if (!*v52) {
          goto LABEL_139;
        }
        while (1)
        {
          unint64_t v64 = v62[1];
          if (v64 >= prime) {
            v64 %= prime;
          }
          if (v64 == v53) {
            goto LABEL_133;
          }
          if (*(void *)(qword_26A99F7C8 + 8 * v64))
          {
            std::__shared_weak_count *v52 = (void *)*v62;
            uint64_t v63 = 8 * v64;
            *uint64_t v62 = **(void **)(qword_26A99F7C8 + v63);
            **(void **)(qword_26A99F7C8 + v63) = v62;
            uint64_t v62 = v52;
LABEL_133:
            unint64_t v52 = (void **)v62;
            uint64_t v62 = (void *)*v62;
            if (!v62) {
              goto LABEL_139;
            }
          }
          else
          {
            *(void *)(qword_26A99F7C8 + 8 * v64) = v52;
            unint64_t v52 = (void **)v62;
            uint64_t v62 = (void *)*v62;
            unint64_t v53 = v64;
            if (!v62) {
              goto LABEL_139;
            }
          }
        }
      }
      xpc_object_t v70 = (void *)qword_26A99F7C8;
      qword_26A99F7C8 = 0;
      if (v70) {
        operator delete(v70);
      }
      unint64_t v23 = 0;
      qword_26A99F7D0 = 0;
    }
LABEL_140:
    unint64_t v65 = v23 - 1;
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23)
      {
        unint64_t v25 = v22 % v23;
        uint64_t v43 = *(void **)(qword_26A99F7C8 + 8 * (v22 % v23));
        int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v25 = v22;
        uint64_t v43 = *(void **)(qword_26A99F7C8 + 8 * v22);
        int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (v43) {
          goto LABEL_96;
        }
      }
    }
    else
    {
      unint64_t v25 = v65 & v22;
      uint64_t v43 = *(void **)(qword_26A99F7C8 + 8 * (v65 & v22));
      int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (v43) {
        goto LABEL_96;
      }
    }
LABEL_142:
    *int v44 = qword_26A99F7D8;
    qword_26A99F7D8 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(qword_26A99F7C8 + 8 * v25) = &qword_26A99F7D8;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v66 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v66 >= v23) {
          v66 %= v23;
        }
      }
      else
      {
        v66 &= v23 - 1;
      }
      *(void *)(qword_26A99F7C8 + 8 * v66) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  uint64_t v43 = *(void **)(qword_26A99F7C8 + 8 * v25);
  int v44 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (!v43) {
    goto LABEL_142;
  }
LABEL_96:
  *int v44 = *v43;
  *uint64_t v43 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_26A99F7E0;
LABEL_154:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      unint64_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v67) {
        goto LABEL_157;
      }
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  unint64_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v67) {
    goto LABEL_162;
  }
LABEL_157:
  uint64_t v68 = v67[5];
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v68;
}

void sub_263775DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_270EAC090;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_270EAC070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(v12[0]);
    if (a4) {
      goto LABEL_4;
    }
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_26A99F5D8)
    {
      uint64_t v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      void *v7 = &unk_270EAC2D8;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      uint64_t v8 = (std::__shared_weak_count *)off_26A99F5E0;
      qword_26A99F5D8 = (uint64_t)(v7 + 3);
      off_26A99F5E0 = v7;
      if (!v8)
      {
LABEL_13:
        atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
LABEL_14:
        pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
        a1[7] = a4;
        a1[8] = v7;
        goto LABEL_15;
      }
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_26A99F5D8;
    uint64_t v7 = off_26A99F5E0;
    if (!off_26A99F5E0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (!a4) {
    goto LABEL_7;
  }
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_15:
  a1[9] = a4;
  return a1;
}

void sub_2637760EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = &unk_270EAC090;
  *(_OWORD *)char v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a1[1] = &unk_270EAC070;
  uint64_t descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v12, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    operator delete(v12[0]);
    uint64_t v7 = *a4;
    uint64_t v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (v8)
  {
LABEL_4:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[7];
  }
LABEL_5:
  a1[9] = v7;
  return a1;
}

void sub_263776268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *support::log::client::client(void *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_263776350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_263776434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((void *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  *(void *)this = &unk_270EABF98;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v1) {
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_270EABF98;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  *(void *)this = &unk_270EABFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t vars8;

  *(void *)this = &unk_270EABFE0;
  if (*((void *)this + 17))
  {
    uint64_t v2 = (char *)this + 120;
    uint64_t v3 = *((void *)this + 15);
    int v4 = (char *)*((void *)this + 16);
    uint64_t v5 = *(void *)v4;
    *(void *)(v5 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v5;
    *((void *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        uint64_t v6 = *((void *)v4 + 2);
        *((void *)v4 + 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
        operator delete(v4);
        int v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

void support::log::client::~client(support::log::client *this)
{
  *(void *)this = &unk_270EAC090;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void support::log::client::~client(std::__shared_weak_count **this)
{
  uint64_t v1 = (support::log::client *)this;
  *this = (std::__shared_weak_count *)&unk_270EAC090;
  uint64_t v2 = this[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(void *a1)
{
  uint64_t v1 = a1;
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (uint64_t *)*a1;
  }
  if (v2 >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  unint64_t v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  unint64_t v6 = qword_26A99F7D0;
  if (!qword_26A99F7D0) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_26A99F7D0);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= qword_26A99F7D0) {
      unint64_t v9 = v5 % qword_26A99F7D0;
    }
  }
  else
  {
    unint64_t v9 = (qword_26A99F7D0 - 1) & v5;
  }
  uint64_t v11 = *(uint64_t ***)(qword_26A99F7C8 + 8 * v9);
  if (v11)
  {
    char v12 = *v11;
    if (*v11)
    {
      char v13 = v1[23];
      if (v13 >= 0) {
        uint64_t v14 = v1[23];
      }
      else {
        uint64_t v14 = *((void *)v1 + 1);
      }
      if (v13 < 0) {
        uint64_t v1 = *(unsigned char **)v1;
      }
      if (v8.u32[0] < 2uLL)
      {
        uint64_t v15 = qword_26A99F7D0 - 1;
        while (1)
        {
          uint64_t v20 = v12[1];
          if (v20 == v7)
          {
            uint64_t v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0) {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v22 = v12[3];
            }
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23) {
                    return v12;
                  }
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          double result = 0;
          char v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v16 = v12[1];
        if (v16 == v7)
        {
          uint64_t v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
          }
          else {
            uint64_t v18 = v12[3];
          }
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3])) {
                return v12;
              }
            }
            else
            {
              if (!*((unsigned char *)v12 + 39)) {
                return v12;
              }
              uint64_t v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19) {
                  return v12;
                }
              }
            }
          }
        }
        else
        {
          if (v16 >= v6) {
            v16 %= v6;
          }
          if (v16 != v9) {
            return 0;
          }
        }
        double result = 0;
        char v12 = (uint64_t *)*v12;
        if (!v12) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = &unk_270EAC170;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  support::log::global_client_descriptor *v2;
  uint64_t vars8;

  *this = &unk_270EAC170;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (support::log::global_client_descriptor *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (support::log::global_client_descriptor *)this;

LABEL_5:
  operator delete(v2);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A9B54) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A9B54 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A9B54)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A9B54 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC1F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC1F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  *(void *)this = &unk_270EAC240;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t vars8;

  *(void *)this = &unk_270EAC240;
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      unint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<char *>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy(*((void **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  operator delete(this);
}

uint64_t std::deque<char *>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637A9CE0) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637A9CE0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637A9CE0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637A9CE0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t __cxx_global_var_init_16()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_26368A000);
  }
  return result;
}

void ABMServerFactory::create(uint64_t *a1@<X8>)
{
}

void ABMServerFactory::ABMServerFactory(ABMServerFactory *this)
{
  Factory::Factory(this);
  *uint64_t v1 = &unk_270EAC328;
}

{
  void *v1;

  Factory::Factory(this);
  *uint64_t v1 = &unk_270EAC328;
}

void ABMServerFactory::~ABMServerFactory(ABMServerFactory *this)
{
  Factory::~Factory(this);

  operator delete(v1);
}

void ABMServerFactory::createServiceManager(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  v4[0] = *a1;
  v4[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v3 = ABMServiceManager::create(v4, a2);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v2->__on_zero_shared)(v2, v3);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_2637776FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ABMServerFactory::createBBServerConnection(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ABMServerFactory::createRouterServer(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC378;
  Factory::Factory((Factory *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC328;
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);

  std::__shared_weak_count::__release_weak(v2);
}

void sub_263777850(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ABMServerFactory>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void NetworkStatsInterface::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x68uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  uint64_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  NetworkStatsInterface::NetworkStatsInterface(v4, &v8);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(a2, v5);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  unint64_t v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_2637779D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2637779F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_263777A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void *NetworkStatsInterface::NetworkStatsInterface(void *a1, void *a2)
{
  *a1 = &unk_270EAC3C8;
  uint64_t v4 = a1 + 9;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.abm", "net.stats");
  dispatch_object_t object = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(v4, "net.stats", QOS_CLASS_DEFAULT, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v6, a2);
  *a1 = &unk_270EAC4E8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  *a1 = &unk_270EAC3C8;
  return a1;
}

void sub_263777B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_263777B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

const char *NetworkStatsInterface::getName(NetworkStatsInterface *this)
{
  return "net.stats";
}

void NetworkStatsInterface::query(NetworkStatsInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3802000000;
  char v12 = __Block_byref_object_copy__1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v13 = __Block_byref_object_dispose__1;
  uint64_t v4 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v4->__on_zero_shared = 0;
  v4->~__shared_weak_count_0 = 0;
  v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v4->~__shared_weak_count_0;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC568;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v8[2] = ___ZN21NetworkStatsInterface5queryEv_block_invoke;
  void v8[3] = &unk_2655D55A8;
  v8[4] = &v9;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v8);
  uint64_t v6 = v10[6];
  *a2 = v10[5];
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v9, 8);
  unint64_t v7 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_263777CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  operator delete(v14);
  _Block_object_dispose(&a14, 8);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 + 40);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void NetworkStatsInterface::applyInterfaces(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v55 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  int v3 = getifaddrs(&v55);
  if (v3)
  {
    uint64_t v4 = __error();
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *v4;
      unint64_t v7 = strerror(v6);
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 2080;
      *(void *)&uint8_t buf[16] = v7;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "Failed to get data stats, error %d errno=%d(%s)", buf, 0x18u);
    }
    return;
  }
  uint64_t v8 = v55;
  if (v55)
  {
    uint64_t v49 = a2;
    while (1)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v54 = 0x6AAAAAAAAAAAAAALL;
      std::string __p = (void *)0xAA0070695F706470;
      ifa_addr = v8->ifa_addr;
      if (!ifa_addr)
      {
        uint64_t v8 = v8->ifa_next;
        goto LABEL_7;
      }
      int sa_family = ifa_addr->sa_family;
      unsigned int ifa_flags = v8->ifa_flags;
      memset(__dst, 170, sizeof(__dst));
      ifa_name = v8->ifa_name;
      size_t v13 = strlen(ifa_name);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = (unsigned char *)v13;
      if (v13 >= 0x17) {
        break;
      }
      HIBYTE(__dst[2]) = v13;
      uint64_t v15 = __dst;
      if (v13) {
        goto LABEL_16;
      }
LABEL_17:
      v14[(void)v15] = 0;
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        BOOL v45 = __dst;
        if (SHIBYTE(__dst[2]) < 0) {
          BOOL v45 = (void **)__dst[0];
        }
        unsigned int v46 = v8->ifa_flags;
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = v45;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = sa_family;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v46;
        __int16 v58 = 1024;
        int v59 = ifa_flags & 1;
        _os_log_debug_impl(&dword_26368A000, v18, OS_LOG_TYPE_DEBUG, "#D Found interface %s, family %u, flags %u, up %d", buf, 0x1Eu);
        if (sa_family != 30 && sa_family != 18) {
          goto LABEL_79;
        }
      }
      else if (sa_family != 30 && sa_family != 18)
      {
        goto LABEL_79;
      }
      uint64_t v20 = (unsigned char *)HIBYTE(__dst[2]);
      uint64_t v21 = (void **)__dst[0];
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v22 = __dst;
      }
      else {
        uint64_t v22 = (void **)__dst[0];
      }
      if (v54 >= 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      if (v54 >= 0) {
        int64_t v24 = HIBYTE(v54);
      }
      else {
        int64_t v24 = v53;
      }
      if (!v24)
      {
        int64_t v32 = 0;
LABEL_44:
        int v33 = (unsigned char *)(v32 + v24);
        if ((v20 & 0x80) != 0)
        {
          uint64_t v20 = __dst[1];
          if (__dst[1] < v33) {
LABEL_102:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (v33 > v20) {
            goto LABEL_102;
          }
          uint64_t v21 = __dst;
        }
        unint64_t v34 = v20 - v33;
        if ((unint64_t)(v20 - v33) > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v34 >= 0x17)
        {
          uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17) {
            uint64_t v36 = v34 | 7;
          }
          uint64_t v37 = v36 + 1;
          uint64_t v35 = operator new(v36 + 1);
          *(void *)&uint8_t buf[8] = v20 - v33;
          *(void *)&uint8_t buf[16] = v37 | 0x8000000000000000;
          *(void *)long long buf = v35;
        }
        else
        {
          uint8_t buf[23] = (_BYTE)v20 - (_BYTE)v33;
          uint64_t v35 = buf;
          if (v20 == v33)
          {
LABEL_56:
            v35[v34] = 0;
            __endptr = 0;
            if (buf[23] >= 0) {
              size_t v38 = buf[23];
            }
            else {
              size_t v38 = *(void *)&buf[8];
            }
            if (v38
              && (buf[23] >= 0 ? (int64_t v39 = buf) : (int64_t v39 = *(unsigned char **)buf),
                  (stat v40 = memchr(v39, 45, v38)) != 0 && v40 - v39 != -1))
            {
              BOOL v41 = 0;
              uint64_t v42 = 2863311530;
              if ((buf[23] & 0x80000000) != 0)
              {
LABEL_66:
                operator delete(*(void **)buf);
                if (!v41) {
                  goto LABEL_79;
                }
LABEL_78:
                (*(void (**)(uint64_t, ifaddrs *, uint64_t))(v49 + 16))(v49, v8, v42);
                goto LABEL_79;
              }
            }
            else
            {
              *__error() = 0;
              if (buf[23] >= 0) {
                uint64_t v43 = buf;
              }
              else {
                uint64_t v43 = *(const char **)buf;
              }
              unsigned int v44 = strtoul(v43, &__endptr, 10);
              BOOL v41 = 0;
              if (*__error())
              {
                uint64_t v42 = 2863311530;
                if ((buf[23] & 0x80000000) != 0) {
                  goto LABEL_66;
                }
              }
              else
              {
                uint64_t v42 = 2863311530;
                if (__endptr)
                {
                  BOOL v41 = *__endptr == 0;
                  if (*__endptr) {
                    uint64_t v42 = 2863311530;
                  }
                  else {
                    uint64_t v42 = v44;
                  }
                }
                if ((buf[23] & 0x80000000) != 0) {
                  goto LABEL_66;
                }
              }
            }
            if (!v41) {
              goto LABEL_79;
            }
            goto LABEL_78;
          }
        }
        memmove(v35, &v33[(void)v21], v20 - v33);
        goto LABEL_56;
      }
      if (SHIBYTE(__dst[2]) >= 0) {
        uint64_t v25 = HIBYTE(__dst[2]);
      }
      else {
        uint64_t v25 = (uint64_t)__dst[1];
      }
      if (v25 >= v24)
      {
        uint64_t v26 = (char *)v22 + v25;
        int v27 = *p_p;
        uint64_t v28 = v22;
        while (1)
        {
          uint64_t v29 = v25 - v24;
          if (v29 == -1) {
            goto LABEL_79;
          }
          unint64_t v30 = (char *)memchr(v28, v27, v29 + 1);
          if (!v30) {
            goto LABEL_79;
          }
          uint64_t v31 = v30;
          if (!memcmp(v30, p_p, v24)) {
            break;
          }
          uint64_t v28 = (void **)(v31 + 1);
          uint64_t v25 = v26 - (v31 + 1);
          if (v25 < v24) {
            goto LABEL_79;
          }
        }
        if (v31 != v26)
        {
          int64_t v32 = v31 - (char *)v22;
          if (v31 - (char *)v22 != -1) {
            goto LABEL_44;
          }
        }
      }
LABEL_79:
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        uint64_t v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0) {
LABEL_83:
        }
          operator delete(__p);
      }
      else
      {
        uint64_t v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0) {
          goto LABEL_83;
        }
      }
LABEL_7:
      if (!v8)
      {
        int v48 = v55;
        goto LABEL_98;
      }
    }
    uint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v16 = v13 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    _OWORD __dst[2] = (void *)(v17 | 0x8000000000000000);
    __dst[0] = v15;
LABEL_16:
    memmove(v15, ifa_name, (size_t)v14);
    goto LABEL_17;
  }
  int v48 = 0;
LABEL_98:
  MEMORY[0x263E69B00](v48);
}

void sub_2637782E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a21);
  goto LABEL_7;
}

void ___ZN21NetworkStatsInterface5queryEv_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a2 + 16);
  memset(__dst, 170, sizeof(__dst));
  unint64_t v7 = *(const char **)(a2 + 8);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v10 = operator new(v11 + 1);
    *(void *)&__dst[8] = v9;
    *(void *)&__dst[16] = v12 | 0x8000000000000000;
    *(void *)std::string __dst = v10;
    goto LABEL_8;
  }
  __dst[23] = v8;
  uint64_t v10 = __dst;
  if (v8) {
LABEL_8:
  }
    memmove(v10, v7, v9);
  v10[v9] = 0;
  size_t v13 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v15 = v13 + 1;
  uint64_t v14 = v13[1];
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v16 = (uint64_t **)v14;
        unsigned int v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a3) {
          break;
        }
        uint64_t v14 = *v16;
        uint64_t v15 = v16;
        if (!*v16) {
          goto LABEL_16;
        }
      }
      if (v17 >= a3) {
        break;
      }
      uint64_t v14 = v16[1];
      if (!v14)
      {
        uint64_t v15 = v16 + 1;
        goto LABEL_16;
      }
    }
    uint64_t v18 = (char *)v16;
  }
  else
  {
    uint64_t v16 = v13 + 1;
LABEL_16:
    uint64_t v18 = (char *)operator new(0x50uLL);
    *((_DWORD *)v18 + 8) = a3;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *((void *)v18 + 9) = 0;
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    std::__shared_weak_count *v15 = (uint64_t *)v18;
    uint64_t v19 = (uint64_t *)**v13;
    uint64_t v20 = (uint64_t *)v18;
    if (v19)
    {
      void *v13 = v19;
      uint64_t v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v13[1], v20);
    uint64_t v13[2] = (uint64_t *)((char *)v13[2] + 1);
  }
  v18[48] |= v6 & 1;
  uint64_t v21 = (void **)(v18 + 56);
  if (v18 + 56 != __dst)
  {
    if (v18[79] < 0)
    {
      if (__dst[23] >= 0) {
        uint64_t v22 = __dst;
      }
      else {
        uint64_t v22 = *(unsigned char **)__dst;
      }
      if (__dst[23] >= 0) {
        size_t v23 = __dst[23];
      }
      else {
        size_t v23 = *(void *)&__dst[8];
      }
      std::string::__assign_no_alias<false>(v21, v22, v23);
    }
    else if ((__dst[23] & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v21, *(void **)__dst, *(size_t *)&__dst[8]);
    }
    else
    {
      *(_OWORD *)uint64_t v21 = *(_OWORD *)__dst;
      *((void *)v18 + 9) = *(void *)&__dst[16];
    }
  }
  uint64_t v24 = *(void *)(a2 + 48);
  if (v24)
  {
    int v25 = *((_DWORD *)v18 + 11);
    *((_DWORD *)v18 + 10) += *(_DWORD *)(v24 + 28);
    *((_DWORD *)v18 + 11) = v25 + *(_DWORD *)(v24 + 20);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
}

void sub_263778594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void NetworkStatsInterface::getInterfaceList(NetworkStatsInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x4002000000;
  size_t v13 = __Block_byref_object_copy__3;
  uint64_t v14 = __Block_byref_object_dispose__4;
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke;
  v9[3] = &unk_2655D55D0;
  v9[4] = &v10;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v9);
  int v3 = v11;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = (unsigned char *)v3[5];
  uint64_t v4 = (unsigned char *)v3[6];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    size_t v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_2637786D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  int64_t v6 = (char *)v4[6];
  unint64_t v5 = v4[7];
  unint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)int64_t v6 = a3;
    uint64_t v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  size_t v9 = (char *)v4[5];
  uint64_t v10 = (v6 - v9) >> 2;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 62) {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 1 > v11) {
    unint64_t v11 = v12 >> 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = operator new(4 * v13);
    uint64_t v15 = &v14[4 * v10];
    uint64_t v16 = &v14[4 * v13];
    _DWORD *v15 = a3;
    uint64_t v8 = (uint64_t)(v15 + 1);
    int64_t v17 = v6 - v9;
    if (v6 == v9) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (_DWORD *)(4 * v10);
  uint64_t v16 = 0;
  *(_DWORD *)(4 * v10) = a3;
  uint64_t v8 = 4 * v10 + 4;
  int64_t v17 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = v17 - 4;
    if (v18 < 0x2C) {
      goto LABEL_27;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v7 = &v6[-v20];
    uint64_t v15 = (_DWORD *)((char *)v15 - v20);
    uint64_t v21 = &v14[4 * v10 - 16];
    uint64_t v22 = v6 - 16;
    uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        int v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--uint64_t v15 = v25;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  void v4[5] = v15;
  v4[6] = v8;
  v4[7] = v16;
  if (v9) {
    operator delete(v9);
  }
LABEL_22:
  v4[6] = v8;
}

void NetworkStatsInterface::~NetworkStatsInterface(NetworkStatsInterface *this)
{
  *(void *)this = &unk_270EAC528;
  MEMORY[0x263E68AF0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_270EAC528;
  MEMORY[0x263E68AF0]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(this);
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stats");
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_263778AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_263778B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_std::string::size_type shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_270EAC498;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_263778C34(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_263778C5C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(void *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  uint64_t v8 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  unint64_t v11 = *a4;
  a1[3] = *a4;
  if (v11) {
    dispatch_retain(v11);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v8) {
    dispatch_release(v8);
  }
  return a1;
}

void *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_270EAC528;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_270EA5428;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_263778ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAC528;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EAC528;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAC528;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAC528;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(char ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000002637AA0F6) {
    return a1 + 24;
  }
  if (((v3 & 0x80000002637AA0F6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000002637AA0F6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002637AA0F6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*((void *)a1 + 1));
    if (a1[79] < 0)
    {
      operator delete(*((void **)a1 + 7));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void BootController::BootController(BootController *this)
{
  *(void *)this = &unk_270EAC5B8;
  GetABMLogServer(&v6);
  *(void *)this = &unk_270EAC670;
  char v9 = 9;
  strcpy((char *)__p, "boot.ctrl");
  ctu::LoggerCommonBase::LoggerCommonBase();
  *((void *)this + 1) = &unk_270EA5428;
  uint64_t v2 = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + 9) = 0;
  *(void *)this = &unk_270EAC5B8;
  *((unsigned char *)this + 80) = 1;
  uint64_t Controller = TelephonyBasebandCreateController();
  uint64_t v5 = (const void *)*((void *)this + 9);
  *((void *)this + 9) = Controller;
  if (v5) {
    CFRelease(v5);
  }
}

void sub_263779368(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v4);
  *uint64_t v1 = v3;
  MEMORY[0x263E68AF0](v2);
  _Unwind_Resume(a1);
}

void sub_263779388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

const char *BootController::getName(BootController *this)
{
  return "boot.ctrl";
}

uint64_t BootController::prepare()
{
  return 1;
}

uint64_t BootController::resetModem(BootController *this)
{
  uint64_t v2 = _os_activity_create(&dword_26368A000, "Reset baseband", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Reset baseband", (uint8_t *)&state, 2u);
  }
  uint64_t v4 = TelephonyBasebandResetModem();
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "Failed Resetting Modem", (uint8_t *)&state, 2u);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }
  if (v2) {
LABEL_6:
  }
    os_release(v2);
  return v4;
}

void sub_2637794D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerCycleModem(BootController *this)
{
  uint64_t v2 = _os_activity_create(&dword_26368A000, "Powercycle baseband", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Powercycle baseband", (uint8_t *)&state, 2u);
  }
  uint64_t v4 = TelephonyBasebandPowercycleModem();
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "Failed to powercycle baseband", (uint8_t *)&state, 2u);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }
  if (v2) {
LABEL_6:
  }
    os_release(v2);
  return v4;
}

void sub_2637795FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerOffModem(BootController *this)
{
  uint64_t v2 = _os_activity_create(&dword_26368A000, "Poweroff baseband", MEMORY[0x263EF8420], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  uint64_t v3 = *((void *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_26368A000, v3, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband", (uint8_t *)&state, 2u);
  }
  uint64_t v4 = TelephonyBasebandPowerOnModem();
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_26368A000, v5, OS_LOG_TYPE_ERROR, "Failed to poweroff baseband", (uint8_t *)&state, 2u);
      if (!v2) {
        return v4;
      }
      goto LABEL_6;
    }
  }
  if (v2) {
LABEL_6:
  }
    os_release(v2);
  return v4;
}

void sub_263779728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void BootController::markNonvolatileDataErased(BootController *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_26368A000, v2, OS_LOG_TYPE_DEFAULT, "#I Marking EFS as erased", v3, 2u);
  }
  *((unsigned char *)this + 80) = 1;
}

uint64_t BootController::setManagerState(uint64_t a1)
{
  uint64_t v2 = TelephonyBasebandSetManagerState();
  if (v2) {
    return v2;
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    return v2;
  }
  *(_WORD *)uint64_t v5 = 0;
  _os_log_error_impl(&dword_26368A000, v3, OS_LOG_TYPE_ERROR, "Failed to set manager state", v5, 2u);
  return v2;
}

uint64_t BootController::getManagerState(uint64_t a1)
{
  uint64_t ManagerState = TelephonyBasebandGetManagerState();
  if (ManagerState) {
    return ManagerState;
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    return ManagerState;
  }
  *(_WORD *)uint64_t v5 = 0;
  _os_log_error_impl(&dword_26368A000, v3, OS_LOG_TYPE_ERROR, "Failed to get manager state", v5, 2u);
  return ManagerState;
}

BOOL BootController::setBasebandState(capabilities::radio *a1)
{
  if (!capabilities::radio::supportsBasebandStateController(a1)) {
    return 1;
  }
  if (TelephonyBasebandSetBasebandState()) {
    return 1;
  }
  uint64_t v3 = *((void *)a1 + 5);
  BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_26368A000, v3, OS_LOG_TYPE_ERROR, "Failed to set baseband state", v4, 2u);
    return 0;
  }
  return result;
}

BOOL BootController::getBasebandState(capabilities::radio *a1, _DWORD *a2)
{
  *a2 = 0;
  if (!capabilities::radio::supportsBasebandStateController(a1)) {
    return 1;
  }
  if (TelephonyBasebandGetBasebandState()) {
    return 1;
  }
  uint64_t v4 = *((void *)a1 + 5);
  BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl(&dword_26368A000, v4, OS_LOG_TYPE_ERROR, "Failed to get baseband state", v5, 2u);
    return 0;
  }
  return result;
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "boot.ctrl");
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAC670;
  MEMORY[0x263E68AF0](a1 + 1);
  return a1;
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_270EAC670;
  MEMORY[0x263E68AF0](a1 + 1);

  operator delete(a1);
}

void TraceManager::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = operator new(0x140uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  TraceManager::TraceManager((uint64_t)v4, v11);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceManager>::shared_ptr[abi:ne180100]<TraceManager,std::shared_ptr<TraceManager> ctu::SharedSynchronizable<TraceManager>::make_shared_ptr<TraceManager>(TraceManager*)::{lambda(TraceManager*)#1},void>(a2, v5);
  ctu::Loggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a2 + 120;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  void v12[2] = ___ZN12TraceManager4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_1;
  void v12[4] = v8;
  unint64_t v13 = v12;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_150_0;
  void block[4] = v9;
  void block[5] = &v13;
  uint64_t v10 = *(NSObject **)(v8 + 136);
  if (*(void *)(v8 + 144)) {
    dispatch_async_and_wait(v10, block);
  }
  else {
    dispatch_sync(v10, block);
  }
}

void sub_263779C5C(_Unwind_Exception *a1)
{
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void TraceManager::init(TraceManager *this)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  void v3[2] = ___ZN12TraceManager4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_1;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_150_0;
  void block[4] = (char *)this + 120;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 136;
  uint64_t v1 = *((void *)this + 17);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t TraceManager::TraceManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_270EAD770;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(void *)a1 = &unk_270EA6BA0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_270EA6BA0;
  }
  *(void *)a1 = &unk_270EAC6B0;
  *(void *)(a1 + 48) = &unk_270EAC720;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "trace.mgr");
  GetABMLogServer(&v20);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  uint64_t v6 = dispatch_queue_create_with_target_V2("trace.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v6, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v6);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    *(void *)(a1 + 144) = 0;
    dispatch_release(v6);
  }
  else
  {
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 48) = &unk_270EACD88;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v24);
  *(void *)(a1 + 56) = &unk_270EA5428;
  uint64_t v7 = v21;
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *(void *)(a1 + 48) = &unk_270EACE18;
  uint64_t v8 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *(void *)a1 = &unk_270EAC6B0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 48) = &unk_270EAC720;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = a1 + 216;
  *(void *)(a1 + 224) = a1 + 216;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v9 = operator new(0x18uLL);
  v9[2] = 0;
  v9[1] = 0;
  *uint64_t v9 = v9 + 1;
  *(void *)(a1 + 256) = v9;
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = &unk_270EACE58;
  v10[1] = 0;
  _DWORD v10[2] = 0;
  void v10[3] = v9;
  *(void *)(a1 + 264) = v10;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  unint64_t v11 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v11);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(&v24, (uint64_t)v11);
  long long v12 = v24;
  long long v24 = 0uLL;
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v15);
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)&v24, (std::__shared_weak_count_vtbl *)v15);
  long long v16 = v24;
  long long v24 = 0uLL;
  int64_t v17 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  unint64_t v18 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  return a1;
}

void sub_26377A22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v22 = v21;
  operator delete(v22);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 + 304);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 + 288);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v15 + 272);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v19);
  std::list<boost::signals2::connection>::~list(v18);
  if (*(char *)(v15 + 215) < 0) {
    operator delete(*(void **)(v15 + 192));
  }
  if (*(char *)(v15 + 191) < 0) {
    operator delete(*(void **)(v15 + 168));
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100](v17);
  ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v16);
  Service::~Service((Service *)v15);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<TraceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_270EACD88;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_270EACD88;
  MEMORY[0x263E68AF0](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void TraceManager::~TraceManager(TraceManager *this)
{
  *(void *)this = &unk_270EAC6B0;
  *((void *)this + 6) = &unk_270EAC720;
  uint64_t v2 = (char *)this + 216;
  uint64_t v3 = (char *)*((void *)this + 28);
  if (v3 != (char *)this + 216)
  {
    do
    {
      boost::signals2::connection::disconnect((boost::signals2::connection *)(v3 + 16));
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  if (*((void *)this + 29))
  {
    uint64_t v4 = *((void *)this + 27);
    uint64_t v5 = (char *)*((void *)this + 28);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)this + 29) = 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v5 + 1);
        uint64_t v8 = (atomic_uint *)*((void *)v5 + 3);
        if (v8 && atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v2);
    }
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 31);
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *((void *)this + 11);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v10 = *((void *)this + 11);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_13:
    v30[0] = 0;
    _os_log_impl(&dword_26368A000, v10, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v30, 2u);
  }
LABEL_14:
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*((void *)this + 29)) {
      goto LABEL_38;
    }
  }
  else if (!*((void *)this + 29))
  {
    goto LABEL_38;
  }
  uint64_t v16 = *((void *)this + 27);
  uint64_t v17 = (char *)*((void *)this + 28);
  uint64_t v18 = *(void *)v17;
  *(void *)(v18 + 8) = *(void *)(v16 + 8);
  **(void **)(v16 + 8) = v18;
  *((void *)this + 29) = 0;
  if (v17 != v2)
  {
    do
    {
      uint64_t v19 = (char *)*((void *)v17 + 1);
      uint64_t v20 = (atomic_uint *)*((void *)v17 + 3);
      if (v20 && atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
      }
      operator delete(v17);
      uint64_t v17 = v19;
    }
    while (v19 != v2);
  }
LABEL_38:
  if (*((char *)this + 215) < 0)
  {
    operator delete(*((void **)this + 24));
    uint64_t v21 = (char *)this + 56;
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_40:
      uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 20);
      if (!v22) {
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v21 = (char *)this + 56;
    if ((*((char *)this + 191) & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  operator delete(*((void **)this + 21));
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v22) {
    goto LABEL_46;
  }
LABEL_44:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_46:
  *((void *)this + 6) = &unk_270EACD88;
  MEMORY[0x263E68AF0](v21);
  uint64_t v23 = *((void *)this + 18);
  if (v23) {
    dispatch_release(v23);
  }
  long long v24 = *((void *)this + 17);
  if (v24) {
    dispatch_release(v24);
  }
  int v25 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  *(void *)this = &unk_270EAD770;
  uint64_t v26 = *((void *)this + 3);
  if (v26)
  {
    uint64_t v27 = *((void *)this + 4);
    uint64_t v28 = (void *)*((void *)this + 3);
    if (v27 != v26)
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      uint64_t v28 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v26;
    operator delete(v28);
  }
  uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
}

{
  void *v1;
  uint64_t vars8;

  TraceManager::~TraceManager(this);

  operator delete(v1);
}

void non-virtual thunk to'TraceManager::~TraceManager(TraceManager *this)
{
}

{
  void *v1;
  uint64_t vars8;

  TraceManager::~TraceManager((TraceManager *)((char *)this - 48));

  operator delete(v1);
}

void ___ZN12TraceManager4initEv_block_invoke(uint64_t a1)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  std::string v181 = *(void **)(a1 + 32);
  uint64_t v1 = v181[11];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_26368A000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  uint64_t v3 = off_26A99F170;
  if (!off_26A99F170)
  {
    CommandDriverFactory::create_default_global((uint64_t *)buf, v2);
    long long v4 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v5 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
    off_26A99F170 = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v3 = off_26A99F170;
  }
  void block[5] = v3;
  unint64_t v185 = (std::__shared_weak_count *)*(&off_26A99F170 + 1);
  if (*(&off_26A99F170 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_26A99F170 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 16))(&v186, v3);
  uint64_t v188 = 0;
  std::string v189 = 0;
  if (v187 && (std::string v189 = std::__shared_weak_count::lock(v187)) != 0)
  {
    uint64_t v182 = v186;
    uint64_t v188 = v186;
  }
  else
  {
    uint64_t v182 = 0;
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableI12TraceManagerE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEEENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionISC_EENSI_IFvRKNS5_10connectionESB_EEENS5_5mutexEEES1_vJSB_EEEDTcl7connectfp_cvNSF_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSV_SX_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_125;
  void aBlock[4] = v181 + 15;
  void aBlock[5] = TraceManager::handleDumpLogsIndication_sync;
  void aBlock[6] = 0;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = (std::__shared_weak_count *)v181[16];
  if (!v8 || (uint64_t v9 = v181[15], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v11 = v10;
  long long v12 = v181[17];
  dispatch_object_t v192 = v12;
  std::string v179 = v7;
  if (v7) {
    unint64_t v13 = _Block_copy(v7);
  }
  else {
    unint64_t v13 = 0;
  }
  long long v193 = v13;
  dispatch_retain(v12);
  long long v194 = 0u;
  long long v195 = 0u;
  dispatch_object_t v198 = v12;
  if (v13) {
    unint64_t v13 = _Block_copy(v13);
  }
  uint64_t v199 = v13;
  dispatch_retain(v12);
  dispatch_object_t object = v12;
  uint64_t v180 = v11;
  if (!v13)
  {
    long long v201 = 0;
    dispatch_retain(v12);
    goto LABEL_33;
  }
  uint64_t v14 = _Block_copy(v13);
  long long v201 = v14;
  dispatch_retain(v12);
  if (!v14)
  {
LABEL_33:
    dispatch_retain(v12);
    unint64_t v202 = 0;
    goto LABEL_34;
  }
  uint64_t v15 = _Block_copy(v14);
  dispatch_retain(v12);
  unint64_t v202 = 0;
  if (!v15)
  {
LABEL_34:
    dispatch_retain(v12);
    uint64_t v175 = 0;
    char v20 = 1;
LABEL_35:
    dispatch_retain(v12);
    std::string v177 = 0;
    char v21 = 1;
LABEL_36:
    dispatch_retain(v12);
    uint64_t v17 = 0;
    char v22 = 1;
LABEL_37:
    dispatch_retain(v12);
    uint64_t v18 = 0;
    unint64_t v203 = (unint64_t)v12;
    char v23 = 1;
    goto LABEL_38;
  }
  uint64_t v16 = _Block_copy(v15);
  dispatch_retain(v12);
  uint64_t v175 = v15;
  if (!v16)
  {
    char v20 = 0;
    goto LABEL_35;
  }
  uint64_t v17 = _Block_copy(v16);
  dispatch_retain(v12);
  std::string v177 = v16;
  if (!v17)
  {
    char v20 = 0;
    char v21 = 0;
    goto LABEL_36;
  }
  uint64_t v18 = _Block_copy(v17);
  dispatch_retain(v12);
  if (!v18)
  {
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    goto LABEL_37;
  }
  uint64_t v19 = _Block_copy(v18);
  dispatch_retain(v12);
  unint64_t v203 = (unint64_t)v12;
  if (v19)
  {
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    char v23 = 0;
    v204 = _Block_copy(v19);
    dispatch_retain(v12);
    dispatch_release(v12);
    _Block_release(v19);
    goto LABEL_39;
  }
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
LABEL_38:
  v204 = 0;
  dispatch_retain(v12);
  dispatch_release(v12);
LABEL_39:
  dispatch_release(v12);
  if ((v23 & 1) == 0) {
    _Block_release(v18);
  }
  dispatch_release(v12);
  if ((v22 & 1) == 0) {
    _Block_release(v17);
  }
  unint64_t v202 = (unint64_t)boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>)::stored_vtable;
  dispatch_release(v12);
  if ((v21 & 1) == 0) {
    _Block_release(v177);
  }
  dispatch_release(v12);
  if ((v20 & 1) == 0) {
    _Block_release(v175);
  }
  *(void *)long long buf = 0;
  memset(&buf[8], 170, 24);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)buf, (uint64_t *)&v202);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v202, (uint64_t *)&v195 + 1);
  boost::function1<void,ctu::cf::CFSharedRef<__CFDictionary const>>::move_assign((uint64_t)&v195 + 8, (uint64_t *)buf);
  if (*(void *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      long long v24 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v24) {
        v24(&buf[8], &buf[8], 2);
      }
    }
  }
  if (v202)
  {
    if ((v202 & 1) == 0)
    {
      int v25 = *(void (**)(uint64_t, _WORD *, unsigned int))(v202 & 0xFFFFFFFFFFFFFFFELL);
      if (v25) {
        v25((uint64_t)&v203, &v203, 2u);
      }
    }
    unint64_t v202 = 0;
  }
  dispatch_release(object);
  if (v201) {
    _Block_release(v201);
  }
  dispatch_release(v198);
  if (v199) {
    _Block_release(v199);
  }
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v26 = operator new(0x18uLL);
  *uint64_t v26 = &unk_270EAD0C0;
  v26[1] = v9;
  void v26[2] = v180;
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v27 = operator new(0x18uLL);
  *uint64_t v27 = &unk_270EAD0C0;
  v27[1] = v9;
  uint64_t v27[2] = v180;
  atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&uint8_t buf[8] = v27;
  *(_DWORD *)long long buf = 2;
  uint64_t v28 = *((void *)&v194 + 1);
  if (*((void *)&v194 + 1) >= (unint64_t)v195)
  {
    uint64_t v31 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)&v194, (uint64_t)buf);
    unint64_t v30 = v180;
  }
  else
  {
    uint64_t v29 = operator new(0x18uLL);
    *uint64_t v29 = &unk_270EAD0C0;
    v29[1] = v9;
    unint64_t v30 = v180;
    v29[2] = v180;
    atomic_fetch_add_explicit(&v180->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(v28 + 8) = v29;
    *(_DWORD *)uint64_t v28 = 2;
    uint64_t v31 = v28 + 24;
  }
  *((void *)&v194 + 1) = v31;
  boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)buf);
  (*(void (**)(void *))(*v26 + 8))(v26);
  std::__shared_weak_count::__release_weak(v30);
  int64_t v32 = *(uint64_t ***)(v182 + 112);
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v212 = v33;
  long long v213 = v33;
  long long v210 = v33;
  long long v211 = v33;
  long long v208 = v33;
  long long v209 = v33;
  long long v206 = v33;
  long long v207 = v33;
  *(_OWORD *)long long buf = v33;
  *(_OWORD *)&uint8_t buf[16] = v33;
  unint64_t v34 = (pthread_mutex_t *)v32[3];
  unint64_t v214 = 10;
  std::string __p = buf;
  uint64_t v216 = 0;
  v217 = v34;
  pthread_mutex_lock(v34);
  unint64_t v202 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v203 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = (atomic_uint *)v32[1];
  v183 = (uint64_t ***)v32;
  if (!v35 || atomic_load_explicit(v35 + 2, memory_order_acquire) != 1)
  {
    int64_t v39 = (uint64_t *)operator new(0x20uLL);
    stat v40 = *v32;
    uint64_t v41 = **v32;
    char v178 = v39;
    uint64_t v42 = operator new(0x40uLL);
    uint64_t v43 = v42;
    void *v42 = v42;
    v42[1] = v42;
    uint64_t v42[2] = 0;
    unsigned int v44 = *(void **)(v41 + 8);
    if (v44 != (void *)v41)
    {
      uint64_t v45 = 0;
      unsigned int v46 = v42;
      do
      {
        unint64_t v47 = operator new(0x20uLL);
        xpc_object_t v47[2] = v44[2];
        uint64_t v48 = v44[3];
        v47[3] = v48;
        if (v48)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 + 8), 1u, memory_order_relaxed);
          unsigned int v46 = (void *)*v43;
          uint64_t v45 = v43[2];
        }
        void *v47 = v46;
        v47[1] = v43;
        v46[1] = v47;
        *uint64_t v43 = v47;
        void v43[2] = ++v45;
        unsigned int v44 = (void *)v44[1];
        unsigned int v46 = v47;
      }
      while (v44 != (void *)v41);
    }
    std::string v176 = v40;
    v43[3] = 0;
    uint64_t v49 = (void **)(v43 + 3);
    v43[4] = 0;
    BOOL v50 = v43 + 4;
    void v43[5] = 0;
    *((unsigned char *)v43 + 48) = *(unsigned char *)(v41 + 48);
    v43[3] = v43 + 4;
    uint64_t v51 = *(void **)(v41 + 24);
    unint64_t v52 = (void *)(v41 + 32);
    if (v51 == (void *)(v41 + 32))
    {
LABEL_73:
      *((unsigned char *)v43 + 56) = *(unsigned char *)(v41 + 56);
      unint64_t v53 = *(void **)(v41 + 24);
      if (v53 != v52)
      {
        uint64_t v54 = (void *)v43[3];
        uint64_t v55 = v43[1];
        do
        {
          v54[6] = v55;
          uint64_t v56 = v41;
          if (v53 != v52) {
            uint64_t v56 = v53[6];
          }
          unint64_t v57 = (void *)v53[1];
          __int16 v58 = v57;
          int v59 = v53;
          if (v57)
          {
            do
            {
              uint64_t v60 = v58;
              __int16 v58 = (void *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              uint64_t v60 = (void *)v59[2];
              BOOL v105 = *v60 == (void)v59;
              int v59 = v60;
            }
            while (!v105);
          }
          uint64_t v61 = v41;
          if (v60 != v52) {
            uint64_t v61 = v60[6];
          }
          while (v56 != v61)
          {
            uint64_t v56 = *(void *)(v56 + 8);
            uint64_t v55 = *(void *)(v55 + 8);
          }
          if (v57)
          {
            do
            {
              uint64_t v62 = v57;
              unint64_t v57 = (void *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              uint64_t v62 = (void *)v53[2];
              BOOL v105 = *v62 == (void)v53;
              unint64_t v53 = v62;
            }
            while (!v105);
          }
          uint64_t v63 = (void *)v54[1];
          if (v63)
          {
            do
            {
              unint64_t v64 = v63;
              uint64_t v63 = (void *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              unint64_t v64 = (void *)v54[2];
              BOOL v105 = *v64 == (void)v54;
              uint64_t v54 = v64;
            }
            while (!v105);
          }
          unint64_t v53 = v62;
          uint64_t v54 = v64;
        }
        while (v62 != v52);
      }
      *char v178 = (uint64_t)v43;
      v178[1] = 0;
      unint64_t v84 = operator new(0x18uLL);
      v84[1] = 0x100000001;
      void *v84 = &unk_270EACF08;
      v84[2] = v43;
      v178[1] = (uint64_t)v84;
      v178[2] = v176[2];
      uint64_t v85 = v176[3];
      v178[3] = v85;
      if (v85) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v85 + 8), 1u, memory_order_relaxed);
      }
      unint64_t v86 = (uint64_t *)operator new(0x18uLL);
      v86[1] = 0x100000001;
      *unint64_t v86 = (uint64_t)&unk_270EACEA8;
      v86[2] = (uint64_t)v178;
      uint64_t v87 = (atomic_uint *)v32[1];
      *int64_t v32 = v178;
      v32[1] = v86;
      if (v87)
      {
        if (atomic_fetch_add(v87 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v87 + 16))(v87);
          if (atomic_fetch_add(v87 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v87 + 24))(v87);
          }
        }
      }
      int v38 = 0;
      uint64_t v36 = (uint64_t *)**v32;
LABEL_152:
      uint64_t v37 = (uint64_t *)v36[1];
      if (v36 == v37) {
        goto LABEL_252;
      }
      goto LABEL_153;
    }
    while (1)
    {
      int v65 = *((_DWORD *)v51 + 8);
      unint64_t v66 = (void *)*v50;
      unint64_t v67 = v43 + 4;
      if (*v49 != v50)
      {
        uint64_t v68 = (void *)*v50;
        uint64_t v69 = v43 + 4;
        if (v66)
        {
          do
          {
            unint64_t v67 = v68;
            uint64_t v68 = (void *)v68[1];
          }
          while (v68);
        }
        else
        {
          do
          {
            unint64_t v67 = (void *)v69[2];
            BOOL v105 = *v67 == (void)v69;
            uint64_t v69 = v67;
          }
          while (v105);
        }
        int v70 = *((_DWORD *)v51 + 10);
        int v71 = *((_DWORD *)v67 + 8);
        if (v71 == v65)
        {
          if (v65 != 1) {
            goto LABEL_118;
          }
          if (*((_DWORD *)v67 + 10) >= v70)
          {
            std::string v72 = (void *)*v50;
            unint64_t v73 = v43 + 4;
            xpc_object_t v74 = v43 + 4;
            if (v66) {
              goto LABEL_122;
            }
LABEL_129:
            uint64_t v78 = operator new(0x38uLL);
            long long v79 = *((_OWORD *)v51 + 2);
            v78[6] = v51[6];
            *((_OWORD *)v78 + 2) = v79;
            *uint64_t v78 = 0;
            v78[1] = 0;
            v78[2] = v74;
            *unint64_t v73 = v78;
            xpc_object_t v80 = (void *)**v49;
            if (v80)
            {
              *uint64_t v49 = v80;
              uint64_t v78 = (void *)*v73;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v43[4], v78);
            ++v43[5];
            goto LABEL_132;
          }
        }
        else if (v71 >= v65)
        {
LABEL_118:
          unint64_t v73 = v43 + 4;
          xpc_object_t v74 = v43 + 4;
          if (!v66) {
            goto LABEL_129;
          }
          std::string v72 = (void *)*v50;
          if (v65 != 1)
          {
            int v75 = *((_DWORD *)v66 + 8);
            xpc_object_t v74 = (void *)*v50;
            while (v65 != v75)
            {
              if (v65 < v75)
              {
                uint64_t v83 = *v74;
                unint64_t v73 = v74;
                if (!*v74) {
                  goto LABEL_129;
                }
              }
              else
              {
                if (v75 >= v65) {
                  goto LABEL_132;
                }
                uint64_t v83 = v74[1];
                if (!v83) {
                  goto LABEL_128;
                }
              }
              int v75 = *(_DWORD *)(v83 + 32);
              xpc_object_t v74 = (void *)v83;
            }
            goto LABEL_132;
          }
          while (1)
          {
LABEL_122:
            xpc_object_t v74 = v72;
            int v76 = *((_DWORD *)v72 + 8);
            if (v76 == 1)
            {
              int v77 = *((_DWORD *)v72 + 10);
              if (v77 > v70) {
                goto LABEL_121;
              }
              if (v77 >= v70) {
                goto LABEL_132;
              }
            }
            else if (v76 > 1)
            {
LABEL_121:
              std::string v72 = (void *)*v72;
              unint64_t v73 = v74;
              if (!*v74) {
                goto LABEL_129;
              }
              continue;
            }
            std::string v72 = (void *)v72[1];
            if (!v72)
            {
LABEL_128:
              unint64_t v73 = v74 + 1;
              goto LABEL_129;
            }
          }
        }
      }
      if (v66) {
        xpc_object_t v74 = v67;
      }
      else {
        xpc_object_t v74 = v43 + 4;
      }
      if (v66) {
        unint64_t v73 = v67 + 1;
      }
      else {
        unint64_t v73 = v43 + 4;
      }
      if (!*v73) {
        goto LABEL_129;
      }
LABEL_132:
      uint64_t v81 = (void *)v51[1];
      if (v81)
      {
        do
        {
          long long v82 = v81;
          uint64_t v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          long long v82 = (void *)v51[2];
          BOOL v105 = *v82 == (void)v51;
          uint64_t v51 = v82;
        }
        while (!v105);
      }
      uint64_t v51 = v82;
      if (v82 == v52) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v36 = (uint64_t *)**v32;
  uint64_t v37 = v32[2];
  int v38 = 2;
  if (v37 == v36) {
    goto LABEL_152;
  }
LABEL_153:
  int v88 = 0;
  unsigned int v89 = v38 - 1;
  do
  {
    uint64_t v92 = v37[2];
    xpc_object_t v93 = *(uint64_t **)(v92 + 32);
    if (v93)
    {
      for (uint64_t i = *v93; i != v93[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if ((*(uint64_t (**)(void))(**(void **)(i + 8) + 24))(*(void *)(i + 8))) {
            goto LABEL_170;
          }
        }
        else
        {
          uint64_t v95 = *(void *)(i + 16);
          if (!v95 || !atomic_load_explicit((atomic_uint *volatile)(v95 + 8), memory_order_acquire))
          {
LABEL_170:
            if (*(unsigned char *)(v92 + 24))
            {
              *(unsigned char *)(v92 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v92, buf);
            }
            break;
          }
        }
      }
    }
    uint64_t v90 = v37[2];
    if (*(unsigned char *)(v90 + 24))
    {
      uint64_t v36 = (uint64_t *)v37[1];
      goto LABEL_156;
    }
    long long v96 = **v183;
    xpc_object_t v98 = (uint64_t **)(v96 + 4);
    uint64_t v97 = v96[4];
    if (!v97)
    {
      if ((uint64_t *)v96[10] != v37) {
        goto LABEL_247;
      }
      BOOL v120 = (uint64_t *)v37[1];
      unint64_t v122 = (uint64_t **)(v96 + 4);
      xpc_object_t v101 = v96 + 4;
      if (v120 != v96) {
        goto LABEL_243;
      }
LABEL_225:
      uint64_t v125 = (uint64_t *)v101[1];
      uint64_t v126 = v101;
      if (v125)
      {
        do
        {
          xpc_object_t v127 = v125;
          uint64_t v125 = (uint64_t *)*v125;
        }
        while (v125);
      }
      else
      {
        do
        {
          xpc_object_t v127 = (uint64_t *)v126[2];
          BOOL v105 = *v127 == (void)v126;
          uint64_t v126 = v127;
        }
        while (!v105);
      }
      if ((uint64_t *)v96[3] == v101) {
        v96[3] = (uint64_t)v127;
      }
      --v96[5];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v97, v101);
      operator delete(v101);
      goto LABEL_247;
    }
    int v99 = *(_DWORD *)(v90 + 64);
    int v100 = *(_DWORD *)(v90 + 72);
    xpc_object_t v101 = v96 + 4;
    uint64_t v102 = v96[4];
    if (v99 == 1)
    {
      xpc_object_t v101 = v96 + 4;
      uint64_t v103 = v96[4];
      do
      {
        while (1)
        {
          int v109 = *(_DWORD *)(v103 + 32);
          BOOL v110 = v109 < 1;
          if (v109 == 1) {
            BOOL v110 = *(_DWORD *)(v103 + 40) < v100;
          }
          if (!v110) {
            break;
          }
          uint64_t v103 = *(void *)(v103 + 8);
          if (!v103) {
            goto LABEL_191;
          }
        }
        xpc_object_t v101 = (uint64_t *)v103;
        uint64_t v103 = *(void *)v103;
      }
      while (v103);
    }
    else
    {
      do
      {
        int v104 = *(_DWORD *)(v102 + 32);
        BOOL v105 = v104 == v99;
        BOOL v106 = v104 < v99;
        if (v104 >= v99) {
          size_t v107 = (uint64_t *)v102;
        }
        else {
          size_t v107 = (uint64_t *)(v102 + 8);
        }
        if (v106) {
          __int16 v108 = v101;
        }
        else {
          __int16 v108 = (uint64_t *)v102;
        }
        if (v105)
        {
          size_t v107 = (uint64_t *)v102;
          xpc_object_t v101 = (uint64_t *)v102;
        }
        else
        {
          xpc_object_t v101 = v108;
        }
        uint64_t v102 = *v107;
      }
      while (*v107);
    }
LABEL_191:
    if ((uint64_t *)v101[6] != v37) {
      goto LABEL_247;
    }
    uint64_t v111 = (uint64_t **)(v96 + 4);
    uint64_t v112 = (uint64_t **)v96[4];
    if (v99 == 1)
    {
      while (1)
      {
        int v118 = *((_DWORD *)v112 + 8);
        if (v118 == 1)
        {
          if (v100 < *((_DWORD *)v112 + 10)) {
            goto LABEL_208;
          }
LABEL_203:
          uint64_t v112 = (uint64_t **)v112[1];
          if (!v112) {
            goto LABEL_209;
          }
        }
        else
        {
          if (v118 <= 1) {
            goto LABEL_203;
          }
LABEL_208:
          uint64_t v111 = v112;
          uint64_t v112 = (uint64_t **)*v112;
          if (!v112) {
            goto LABEL_209;
          }
        }
      }
    }
    do
    {
      int v113 = *((_DWORD *)v112 + 8);
      uint64_t v114 = (uint64_t ***)(v112 + 1);
      BOOL v115 = v99 == v113;
      BOOL v116 = v99 < v113;
      if (v99 >= v113) {
        uint64_t v117 = (uint64_t ***)(v112 + 1);
      }
      else {
        uint64_t v117 = (uint64_t ***)v112;
      }
      if (!v116) {
        uint64_t v112 = v111;
      }
      if (v115) {
        uint64_t v117 = v114;
      }
      else {
        uint64_t v111 = v112;
      }
      uint64_t v112 = *v117;
    }
    while (*v117);
LABEL_209:
    xpc_object_t v119 = **v183;
    if (v111 != v98) {
      xpc_object_t v119 = v111[6];
    }
    BOOL v120 = (uint64_t *)v37[1];
    if (v120 == v119) {
      goto LABEL_225;
    }
    if (v99 == 1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v122 = (uint64_t **)v97;
          int v123 = *(_DWORD *)(v97 + 32);
          if (v123 == 1) {
            break;
          }
          if (v123 <= 1) {
            goto LABEL_221;
          }
LABEL_215:
          uint64_t v97 = *(void *)v97;
          if (!*v122)
          {
            xpc_object_t v98 = v122;
            goto LABEL_243;
          }
        }
        int v124 = *(_DWORD *)(v97 + 40);
        if (v124 > v100) {
          goto LABEL_215;
        }
        if (v124 >= v100)
        {
          *(void *)(v97 + 48) = v120;
          goto LABEL_247;
        }
LABEL_221:
        uint64_t v97 = *(void *)(v97 + 8);
        if (!v97)
        {
          xpc_object_t v98 = v122 + 1;
          goto LABEL_243;
        }
      }
    }
    int v121 = *(_DWORD *)(v97 + 32);
    if (v99 == v121) {
      goto LABEL_246;
    }
    while (v99 >= v121)
    {
      if (v121 >= v99) {
        goto LABEL_246;
      }
      uint64_t v128 = *(void *)(v97 + 8);
      if (!v128)
      {
        xpc_object_t v98 = (uint64_t **)(v97 + 8);
        goto LABEL_242;
      }
LABEL_234:
      int v121 = *(_DWORD *)(v128 + 32);
      uint64_t v97 = v128;
      if (v99 == v121)
      {
        *(void *)(v128 + 48) = v120;
        goto LABEL_247;
      }
    }
    uint64_t v128 = *(void *)v97;
    if (*(void *)v97) {
      goto LABEL_234;
    }
    xpc_object_t v98 = (uint64_t **)v97;
LABEL_242:
    unint64_t v122 = (uint64_t **)v97;
LABEL_243:
    uint64_t v97 = (uint64_t)operator new(0x38uLL);
    uint64_t v129 = *(void *)(v90 + 64);
    *(_DWORD *)(v97 + 40) = *(_DWORD *)(v90 + 72);
    *(void *)(v97 + 32) = v129;
    *(void *)(v97 + 48) = 0;
    *(void *)uint64_t v97 = 0;
    *(void *)(v97 + 8) = 0;
    *(void *)(v97 + 16) = v122;
    char *v98 = (uint64_t *)v97;
    uint64_t v130 = *(void *)v96[3];
    long long v131 = (uint64_t *)v97;
    if (v130)
    {
      v96[3] = v130;
      long long v131 = *v98;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v96[4], v131);
    ++v96[5];
LABEL_246:
    *(void *)(v97 + 48) = v120;
LABEL_247:
    uint64_t v132 = *v37;
    uint64_t v36 = (uint64_t *)v37[1];
    *(void *)(v132 + 8) = v36;
    *(void *)v37[1] = v132;
    --v96[2];
    uint64_t v133 = (atomic_uint *)v37[3];
    if (v133)
    {
      if (atomic_fetch_add(v133 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v133 + 16))(v133);
        if (atomic_fetch_add(v133 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v133 + 24))(v133);
        }
      }
    }
    operator delete(v37);
LABEL_156:
    BOOL v91 = v36 != **v183 && v89 >= ++v88;
    uint64_t v37 = v36;
  }
  while (v91);
LABEL_252:
  v183[2] = (uint64_t **)v36;
  std::string::size_type v134 = operator new(0x50uLL);
  v134[1] = 0;
  v134[2] = 0;
  *((unsigned char *)v134 + 24) = 1;
  *((_DWORD *)v134 + 7) = 1;
  *std::string::size_type v134 = &unk_270EACF68;
  long long v135 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v135, (uint64_t *)&v194);
  v135[3] = 0;
  uint64_t v136 = *((void *)&v195 + 1);
  if (*((void *)&v195 + 1))
  {
    v135[3] = *((void *)&v195 + 1);
    if (v136)
    {
      *((_OWORD *)v135 + 2) = v196;
      v135[6] = v197;
    }
    else
    {
      (*(void (**)(long long *, void *, void))(v136 & 0xFFFFFFFFFFFFFFFELL))(&v196, v135 + 4, 0);
    }
  }
  v134[4] = v135;
  v134[5] = 0;
  uint64_t v137 = operator new(0x18uLL);
  v137[1] = 0x100000001;
  *uint64_t v137 = &unk_270EACFC0;
  v137[2] = v135;
  v134[5] = v137;
  v134[6] = v183[3];
  uint64_t v138 = (atomic_uint *)v183[4];
  v134[7] = v138;
  if (v138) {
    atomic_fetch_add_explicit(v138 + 2, 1u, memory_order_relaxed);
  }
  *((_DWORD *)v134 + 16) = 0;
  *((unsigned char *)v134 + 68) = 0;
  unint64_t v202 = (unint64_t)v134;
  unint64_t v139 = operator new(0x18uLL);
  *((void *)v139 + 1) = 0x100000001;
  *(void *)unint64_t v139 = &unk_270EAD020;
  *((void *)v139 + 2) = v134;
  unint64_t v203 = (unint64_t)v139;
  xpc_object_t v140 = **v183;
  xpc_object_t v141 = operator new(0x20uLL);
  uint64_t v142 = v140 + 4;
  v141[2] = v134;
  v141[3] = v139;
  atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 2, 1u, memory_order_relaxed);
  uint64_t v143 = *v140;
  *(void *)(v143 + 8) = v141;
  *xpc_object_t v141 = v143;
  *xpc_object_t v140 = (uint64_t)v141;
  v141[1] = v140;
  ++v140[2];
  unsigned __int8 v144 = (uint64_t *)v140[4];
  if (v144)
  {
    char v145 = v140 + 4;
    uint64_t v146 = v140[4];
    do
    {
      int v147 = *(_DWORD *)(v146 + 32);
      BOOL v148 = v147 == 2;
      BOOL v149 = v147 < 2;
      if (v147 >= 2) {
        char v150 = (uint64_t *)v146;
      }
      else {
        char v150 = (uint64_t *)(v146 + 8);
      }
      if (!v149) {
        char v145 = (uint64_t *)v146;
      }
      if (v148)
      {
        char v150 = (uint64_t *)v146;
        char v145 = (uint64_t *)v146;
      }
      uint64_t v146 = *v150;
    }
    while (*v150);
    if (v145 == v142 || *((_DWORD *)v145 + 8) != 2)
    {
      int v151 = *((_DWORD *)v144 + 8);
      while (v151 != 2)
      {
        if (v151 < 3)
        {
          xpc_object_t v152 = (uint64_t *)v144[1];
          if (!v152)
          {
            uint64_t v142 = v144 + 1;
            goto LABEL_279;
          }
        }
        else
        {
          xpc_object_t v152 = (uint64_t *)*v144;
          uint64_t v142 = v144;
          if (!*v144) {
            goto LABEL_279;
          }
        }
        int v151 = *((_DWORD *)v152 + 8);
        unsigned __int8 v144 = v152;
      }
    }
    *((_DWORD *)v134 + 16) = 2;
    *(void *)((char *)v134 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_282:
    atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 3, 1u, memory_order_relaxed);
    *(void *)&long long v190 = v134;
    *((void *)&v190 + 1) = v139;
    atomic_fetch_add_explicit((atomic_uint *volatile)v139 + 3, 1u, memory_order_relaxed);
    if (atomic_fetch_add((atomic_uint *volatile)v139 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(void *))(*(void *)v139 + 24))(v139);
    }
    long long v155 = (atomic_uint *)v203;
    if (v203) {
      goto LABEL_285;
    }
  }
  else
  {
    unsigned __int8 v144 = v140 + 4;
LABEL_279:
    unint64_t v153 = operator new(0x38uLL);
    v153[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v153 + 10) = -1431655766;
    v153[6] = v141;
    void *v153 = 0;
    v153[1] = 0;
    v153[2] = v144;
    *uint64_t v142 = (uint64_t)v153;
    uint64_t v154 = *(void *)v140[3];
    if (v154)
    {
      v140[3] = v154;
      unint64_t v153 = (void *)*v142;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v140[4], v153);
    ++v140[5];
    std::string::size_type v134 = (void *)v202;
    unint64_t v139 = (void *)v203;
    *(_DWORD *)(v202 + 64) = 2;
    *(void *)((char *)v134 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v139) {
      goto LABEL_282;
    }
    long long v190 = (unint64_t)v134;
    long long v155 = (atomic_uint *)v203;
    if (v203)
    {
LABEL_285:
      if (atomic_fetch_add(v155 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v155 + 16))(v155);
        if (atomic_fetch_add(v155 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v155 + 24))(v155);
        }
      }
    }
  }
  pthread_mutex_unlock(v217);
  uint64_t v156 = v179;
  size_t v157 = (char *)__p;
  if (__p)
  {
    if (v216 - 1 >= 0)
    {
      int64_t v158 = (char *)__p + 16 * v216;
      do
      {
        long long v159 = (atomic_uint *)*((void *)v158 - 1);
        if (v159)
        {
          if (atomic_fetch_add(v159 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v159 + 16))(v159);
            if (atomic_fetch_add(v159 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v159 + 24))(v159);
            }
          }
        }
        v158 -= 16;
      }
      while (v158 > v157);
    }
    uint64_t v156 = v179;
    if (v214 >= 0xB) {
      operator delete(__p);
    }
  }
  std::string v160 = v181;
  if (*((void *)&v195 + 1))
  {
    if ((BYTE8(v195) & 1) == 0)
    {
      std::string v161 = *(void (**)(long long *, long long *, uint64_t))(*((void *)&v195 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v161) {
        v161(&v196, &v196, 2);
      }
    }
    *((void *)&v195 + 1) = 0;
  }
  uint64_t v162 = v194;
  if ((void)v194)
  {
    uint64_t v163 = *((void *)&v194 + 1);
    xpc_object_t v164 = (void *)v194;
    if (*((void *)&v194 + 1) != (void)v194)
    {
      do
      {
        v163 -= 24;
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v163);
      }
      while (v163 != v162);
      xpc_object_t v164 = (void *)v194;
    }
    *((void *)&v194 + 1) = v162;
    operator delete(v164);
    std::string v160 = v181;
  }
  dispatch_release(v192);
  if (v193) {
    _Block_release(v193);
  }
  if (atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v156) {
      goto LABEL_316;
    }
LABEL_315:
    _Block_release(v156);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
    std::__shared_weak_count::__release_weak(v180);
    if (v156) {
      goto LABEL_315;
    }
  }
LABEL_316:
  dispatch_object_t v165 = operator new(0x20uLL);
  v165[1] = v190;
  long long v190 = 0uLL;
  *((void *)v165 + 1) = v160 + 27;
  uint64_t v166 = v160[27];
  *(void *)dispatch_object_t v165 = v166;
  *(void *)(v166 + 8) = v165;
  v160[27] = v165;
  ++v160[29];
  xpc_object_t v167 = v189;
  if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
    std::__shared_weak_count::__release_weak(v167);
  }
  if (v187) {
    std::__shared_weak_count::__release_weak(v187);
  }
  if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
    std::__shared_weak_count::__release_weak(v185);
  }
  int v168 = (const void *)*MEMORY[0x263F204C0];
  size_t v169 = strlen((const char *)*MEMORY[0x263F204C0]);
  if (v169 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v170 = v169;
  if (v169 >= 0x17)
  {
    uint64_t v172 = (v169 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v169 | 7) != 0x17) {
      uint64_t v172 = v169 | 7;
    }
    uint64_t v173 = v172 + 1;
    long long v171 = operator new(v172 + 1);
    *(void *)&uint8_t buf[8] = v170;
    *(void *)&uint8_t buf[16] = v173 | 0x8000000000000000;
    *(void *)long long buf = v171;
    goto LABEL_331;
  }
  uint8_t buf[23] = v169;
  long long v171 = buf;
  if (v169) {
LABEL_331:
  }
    memmove(v171, v168, v170);
  v171[v170] = 0;
  support::fs::createDir(buf, 0x1EDu, 1);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN12TraceManager4initEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_13;
  void block[4] = v181;
  dispatch_async(global_queue, block);
}

void sub_26377C070(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_26377C07C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C088(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C094(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C0A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C0AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C0B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C0C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    unint64_t v57 = *v55;
    if (*v55)
    {
      uint64_t v58 = (uint64_t)v55[1];
      int v59 = *v55;
      if ((void *)v58 != v57)
      {
        do
        {
          v58 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v58);
        }
        while ((void *)v58 != v57);
        int v59 = *v55;
      }
      v55[1] = v57;
      operator delete(v59);
    }
    operator delete(v55);
    boost::signals2::detail::connection_body_base::~connection_body_base(v56);
    operator delete(v56);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x26377CAA4);
  }
  _Unwind_Resume(a1);
}

void sub_26377C118(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C124(_Unwind_Exception *a1)
{
}

void sub_26377C138(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C144(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C150(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C15C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content((uint64_t)&a55);
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    std::__shared_weak_count::__release_weak(a13);
    JUMPOUT(0x26377CA94);
  }
  _Unwind_Resume(a1);
}

void sub_26377C184(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C190(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C19C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C1FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C208(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v11 = (atomic_uint *)__p[3];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    long long v12 = (atomic_uint *)__p[1];
    if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_26377C33C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C348(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C354(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x26377CAA4);
  }
  _Unwind_Resume(a1);
}

void sub_26377C364(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C370(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,radio::HealthCommandDriver::LinkStats>>>::destroy((void *)v2[4]);
    if (v2[2])
    {
      uint64_t v3 = (void *)*v2;
      long long v4 = (uint64_t *)v2[1];
      uint64_t v5 = *v4;
      *(void *)(v5 + 8) = *(void *)(*v2 + 8);
      *(void *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[1];
          uint64_t v7 = (atomic_uint *)v4[3];
          if (v7 && atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          long long v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_26377C460(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C46C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    __cxa_end_catch();
    unint64_t v11 = (atomic_uint *)a11[1];
    if (v11)
    {
      if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
        if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
        }
      }
    }
    operator delete(a11);
    JUMPOUT(0x26377CA8CLL);
  }
  _Unwind_Resume(a1);
}

void sub_26377C500(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C50C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C518(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a2)
  {
    operator delete(a11);
    JUMPOUT(0x26377CA8CLL);
  }
  _Unwind_Resume(a1);
}

void sub_26377C524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_26377C540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,char a27)
{
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<data::TransportService::State>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_26377C570(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C57C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_26377C5BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a55);
    boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~slot(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>)>>::~DispatchSlot((uint64_t)&a37);
    JUMPOUT(0x26377CAA4);
  }
  _Unwind_Resume(a1);
}

void sub_26377C5CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_26377C5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    unint64_t v12 = (unint64_t)v11[3];
    if (v12)
    {
      if ((v12 & 1) == 0)
      {
        unint64_t v13 = *(void (**)(void **, void **, uint64_t))(v12 & 0xFFFFFFFFFFFFFFFELL);
        if (v13) {
          v13(v11 + 4, v11 + 4, 2);
        }
      }
      v11[3] = 0;
    }
    uint64_t v14 = *v11;
    if (*v11)
    {
      uint64_t v15 = (uint64_t)v11[1];
      uint64_t v16 = *v11;
      if ((void *)v15 != v14)
      {
        do
        {
          v15 -= 24;
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::destroy_content(v15);
        }
        while ((void *)v15 != v14);
        uint64_t v16 = *v11;
      }
      v11[1] = v14;
      operator delete(v16);
    }
    operator delete(v11);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}