void sub_216BEF3B0()
{
  JUMPOUT(0x216BEF358);
}

void *sub_216BEF3B8(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, p"
            "xrInternal__aapl__pxrReserved__::SdfPath>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::Sdf"
            "Path, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216BEF434(void *a1)
{
  v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator++() [T = std::map<pxrInternal__aapl__pxrR"
            "eserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_216BEF4DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, true>::operator++() [T = const std::vect"
            "or<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 - 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B913C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B913C0))
  {
    v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v0) {
      v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v1 = *((void *)v0 + 24);
    qword_267B913B8 = v1;
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B913B8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B913B8, &dword_216758000);
    __cxa_guard_release(&qword_267B913C0);
  }

  sub_216BEF68C();
}

{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B913D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B913D0))
  {
    v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v0) {
      v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v1 = *((void *)v0 + 24);
    qword_267B913C8 = v1;
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B913C8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B913C8, &dword_216758000);
    __cxa_guard_release(&qword_267B913D0);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_216BEF674(_Unwind_Exception *a1)
{
}

void sub_216BEF68C()
{
  v1[6] = *MEMORY[0x263EF8340];
  v1[0] = 0;
  v1[1] = 0;
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_216BEF900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216980BCC((void **)va);
  sub_216BF3AF4(v6 - 144, *(void **)(v6 - 136));
  _Unwind_Resume(a1);
}

void sub_216BEFB94(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B913E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B913E0))
  {
    v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v0) {
      v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v1 = *((void *)v0 + 38);
    qword_267B913D8 = v1;
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B913D8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B913D8, &dword_216758000);
    __cxa_guard_release(&qword_267B913E0);
  }

  sub_216BEF68C();
}

{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B913F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B913F0))
  {
    v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v0) {
      v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v1 = *((void *)v0 + 38);
    qword_267B913E8 = v1;
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B913E8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B913E8, &dword_216758000);
    __cxa_guard_release(&qword_267B913F0);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_216BEFCEC(_Unwind_Exception *a1)
{
}

void sub_216BEFF48(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSets()
{
  v3[6] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91400, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91400))
  {
    v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v0) {
      v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v1 = *((void *)v0 + 59);
    qword_267B913F8 = v1;
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B913F8 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B913F8, &dword_216758000);
    __cxa_guard_release(&qword_267B91400);
  }
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91410, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91410))
  {
    v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v0) {
      v0 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v1 = *((void *)v0 + 59);
    qword_267B91408 = v1;
    if ((v1 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B91408 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91408, &dword_216758000);
    __cxa_guard_release(&qword_267B91410);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_216BF02B4(_Unwind_Exception *a1)
{
}

void sub_216BF055C(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSetOptions(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t **a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91420))
  {
    v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v20) {
      v20 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    uint64_t v21 = *((void *)v20 + 7);
    qword_267B91418 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B91418 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91418, &dword_216758000);
    __cxa_guard_release(&qword_267B91420);
  }
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a2, a3, (uint64_t)__p, &v24);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  char v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v8);
  v10 = *(uint64_t **)Layers;
  v11 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers != v11)
  {
    do
    {
      v12 = (void *)sub_216AA5ECC(v10);
      __p[1] = &v22;
      v27 = &stru_26C74C2D0;
      __int16 v28 = 0;
      __p[0] = &unk_26C759208;
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B91418, (uint64_t (***)(void, uint64_t))__p);
      if ((_BYTE)v28) {
        int v16 = 0;
      }
      else {
        int v16 = HasField;
      }
      if (v16 == 1)
      {
        *(_OWORD *)__p = v22;
        while (__p[0] != __p[1])
        {
          v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEC48(__p, v14, v15);
          if ((**(void **)v17 & 0xFFFFFFFFFFFFFFF8) != 0) {
            EmptyString = (uint64_t *)((**(void **)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
          }
          sub_21680EE0C(a4, (const void **)EmptyString, (uint64_t)EmptyString);
          sub_2169CECC4(__p);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  __p[0] = &v22;
  sub_216889A04((void ***)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  return sub_21697C414(&v24);
}

void sub_216BF07D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelection(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91430, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91430))
  {
    int v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      int v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v25 = *((void *)v24 + 57);
    qword_267B91428 = v25;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B91428 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91428, &dword_216758000);
    __cxa_guard_release(&qword_267B91430);
  }
  v36[0] = 0;
  v36[1] = 0;
  v35 = v36;
  v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
  v12 = *(uint64_t **)Layers;
  v11 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v11)
  {
LABEL_22:
    uint64_t v21 = 0;
    goto LABEL_27;
  }
  uint64_t v26 = a4;
  while (1)
  {
    v13 = (void *)sub_216AA5ECC(v12);
    v38 = (char *)&v35;
    v39 = &stru_26C756CC0;
    __int16 v40 = 0;
    v37 = (char *)&unk_26C75C2E8;
    char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B91428, (uint64_t (***)(void, uint64_t))&v37);
    char v15 = (_BYTE)v40 ? 0 : HasField;
    if (v15)
    {
      int v16 = (void **)sub_21678C2D8((uint64_t)&v35, a3);
      v17 = v16;
      if (v36 != v16) {
        break;
      }
    }
LABEL_21:
    if (++v12 == v11) {
      goto LABEL_22;
    }
  }
  v18 = (void **)(v16 + 7);
  if (!pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v16 + 7)) {
    goto LABEL_24;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  uint64_t v19 = *(void *)(sub_216BBBFA8(a1) + 392);
  sub_216779094(&__p, "variant");
  sub_216ABBA60(&v30, v12);
  pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v17 + 7), v19, &__p, (uint64_t)&v30, a2, a5, (uint64_t *)&v37, (uint64_t)&v33);
  if (*((char *)v17 + 79) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)v18 = v33;
  v17[9] = v34;
  HIBYTE(v34) = 0;
  LOBYTE(v33) = 0;
  uint64_t v20 = v31;
  if (v31 && atomic_fetch_add_explicit((atomic_uint *volatile)(v31 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v37 != v38)
  {
    if (a6) {
      sub_216BF4678((uint64_t *)a6, *(void **)(a6 + 8), (uint64_t)v37, (uint64_t)v38, (v38 - v37) >> 4);
    }
    *(void *)&long long v33 = &v37;
    sub_216787968((void ***)&v33);
    goto LABEL_21;
  }
  *(void *)&long long v33 = &v37;
  sub_216787968((void ***)&v33);
LABEL_24:
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  long long v22 = *(_OWORD *)v18;
  *(void *)(v26 + 16) = v17[9];
  *(_OWORD *)uint64_t v26 = v22;
  *((unsigned char *)v17 + 79) = 0;
  *((unsigned char *)v17 + 56) = 0;
  uint64_t v21 = 1;
LABEL_27:
  sub_2167877AC((uint64_t)&v35, v36[0]);
  return v21;
}

void sub_216BF0B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
}

void pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelections(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91440, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91440))
  {
    int v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      int v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v25 = *((void *)v24 + 57);
    qword_267B91438 = v25;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B91438 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91438, &dword_216758000);
    __cxa_guard_release(&qword_267B91440);
  }
  v34[0] = 0;
  v34[1] = 0;
  long long v33 = v34;
  v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
  v12 = *(uint64_t **)Layers;
  v11 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers != v11)
  {
    uint64_t v26 = *(uint64_t **)(Layers + 8);
    do
    {
      v13 = (void *)sub_216AA5ECC(v12);
      v36 = (uint64_t **)&v33;
      v37 = &stru_26C756CC0;
      __int16 v38 = 0;
      v35 = (char *)&unk_26C75C2E8;
      char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B91438, (uint64_t (***)(void, uint64_t))&v35);
      if ((_BYTE)v38) {
        char v15 = 0;
      }
      else {
        char v15 = HasField;
      }
      if (v15)
      {
        int v16 = (uint64_t *)v33;
        if (v33 != v34)
        {
          while (1)
          {
            v17 = (void **)(v16 + 7);
            if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v16 + 7))
            {
              v35 = 0;
              v36 = 0;
              v37 = 0;
              uint64_t v18 = *(void *)(sub_216BBBFA8(a1) + 392);
              sub_216779094(&__p, "variant");
              sub_216ABBA60(&v28, v12);
              pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v16 + 7), v18, &__p, (uint64_t)&v28, a2, a4, (uint64_t *)&v35, (uint64_t)&v31);
              if (*((char *)v16 + 79) < 0) {
                operator delete(*v17);
              }
              *(_OWORD *)v17 = v31;
              v16[9] = v32;
              HIBYTE(v32) = 0;
              LOBYTE(v31) = 0;
              uint64_t v19 = v29;
              if (v29
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v35 != (char *)v36)
              {
                if (a5) {
                  sub_216BF4678((uint64_t *)a5, *(void **)(a5 + 8), (uint64_t)v35, (uint64_t)v36, ((char *)v36 - v35) >> 4);
                }
                uint64_t v20 = (const void ***)sub_2167AE00C((uint64_t **)&v33, v16);
                sub_21677B5A0((uint64_t)(v16 + 4));
                operator delete(v16);
                *(void *)&long long v31 = &v35;
                sub_216787968((void ***)&v31);
                goto LABEL_27;
              }
              *(void *)&long long v31 = &v35;
              sub_216787968((void ***)&v31);
            }
            uint64_t v21 = (const void **)v16[1];
            if (v21)
            {
              do
              {
                uint64_t v20 = (const void ***)v21;
                uint64_t v21 = (const void **)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                uint64_t v20 = (const void ***)v16[2];
                BOOL v22 = *v20 == (const void **)v16;
                int v16 = (uint64_t *)v20;
              }
              while (!v22);
            }
LABEL_27:
            int v16 = (uint64_t *)v20;
            if (v20 == v34)
            {
              uint64_t v23 = v33;
              goto LABEL_30;
            }
          }
        }
        uint64_t v23 = v34;
LABEL_30:
        sub_216789928(a3, (const void **)v23, v34);
        v11 = v26;
      }
      ++v12;
    }
    while (v12 != v11);
  }
  sub_2167877AC((uint64_t)&v33, v34[0]);
}

void sub_216BF0F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasVariantSelections(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3);
  char v5 = *(uint64_t **)Layers;
  uint64_t v6 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v6) {
    return 0;
  }
  do
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v5);
    char v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8) {
      char v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v7, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 456), 0);
    if (result) {
      break;
    }
    ++v5;
  }
  while (v5 != v6);
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(uint64_t *result, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3, void **a4, int *a5, const pxrInternal__aapl__pxrReserved__::TfToken *a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  BOOL v22 = a5;
  uint64_t v23 = a4;
  uint64_t v6 = *result;
  uint64_t v18 = result[1];
  uint64_t v19 = v18;
  uint64_t v20 = v6;
  uint64_t v21 = v6;
  if (v18 != v6)
  {
    while (1)
    {
      v10 = (uint64_t *)sub_216BEF334((uint64_t)&v18, (uint64_t)a2, a3);
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v10);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v11, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v26);
      if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)v26)) {
        break;
      }
LABEL_9:
      if (a6)
      {
        char v15 = (uint64_t *)sub_216BEF334((uint64_t)&v18, v12, v13);
        int v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v15);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v16, a2, a6, (pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
        if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v24))
        {
          if ((BYTE8(v24) & 4) != 0) {
            (*(void (**)(long long *))((*((void *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v24);
          }
          pxrInternal__aapl__pxrReserved__::SdfApplyListOrdering<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        sub_2168EE084((uint64_t)&v24);
      }
      sub_2168EE084((uint64_t)v26);
      uint64_t result = (uint64_t *)sub_216BEF4DC((uint64_t)&v18);
      if (v19 == v21) {
        return result;
      }
    }
    sub_216ABF350((uint64_t)v26, (uint64_t **)&v24);
    v17[0] = (void **)&v24;
    v17[1] = (void **)&v22;
    v17[2] = (void **)&v23;
    if (!*((void *)v22 + 6))
    {
      sub_216BF480C((uint64_t)v22, (uint64_t *)v24, *((uint64_t **)&v24 + 1));
      if (*((void *)v22 + 6) == (uint64_t)(*((void *)&v24 + 1) - v24) >> 3)
      {
        uint64_t v14 = v23;
        sub_216A698A4(v23);
        *(_OWORD *)uint64_t v14 = v24;
        v14[2] = v25;
        long long v24 = 0uLL;
        uint64_t v25 = 0;
LABEL_8:
        v17[0] = (void **)&v24;
        sub_216889A04(v17);
        goto LABEL_9;
      }
      sub_216BF4ABC(v22);
    }
    sub_216BF12A8((uint64_t ***)v17);
    goto LABEL_8;
  }
  return result;
}

void sub_216BF125C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t ***sub_216BF12A8(uint64_t ***result)
{
  uint64_t v1 = **result;
  uint64_t v2 = (*result)[1];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      uint64_t result = (uint64_t ***)sub_216BF146C(*v3[1], v1, v1);
      if (v4)
      {
        char v5 = (uint64_t **)*v3[2];
        uint64_t v6 = v5[1];
        uint64_t result = (uint64_t ***)(v5 + 2);
        unint64_t v7 = (unint64_t)v5[2];
        if ((unint64_t)v6 >= v7)
        {
          uint64_t v9 = v6 - *v5;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v10 = v7 - (void)*v5;
          uint64_t v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
            uint64_t v11 = v9 + 1;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          long long v24 = v5 + 2;
          if (v12) {
            v13 = (char *)sub_21677CB28((uint64_t)result, v12);
          }
          else {
            v13 = 0;
          }
          uint64_t v14 = (uint64_t *)&v13[8 * v9];
          char v15 = &v13[8 * v12];
          uint64_t v23 = v15;
          *uint64_t v14 = *v1;
          char v8 = v14 + 1;
          *uint64_t v1 = 0;
          BOOL v22 = v14 + 1;
          v17 = *v5;
          int v16 = v5[1];
          if (v16 == *v5)
          {
            uint64_t v19 = v5[1];
          }
          else
          {
            do
            {
              uint64_t v18 = *--v16;
              *--uint64_t v14 = v18;
              *int v16 = 0;
            }
            while (v16 != v17);
            uint64_t v19 = *v5;
            int v16 = v5[1];
            char v8 = v22;
            char v15 = v23;
          }
          *char v5 = v14;
          v21[0] = v19;
          v21[1] = v19;
          v5[1] = v8;
          BOOL v22 = v16;
          uint64_t v20 = (char *)v5[2];
          v5[2] = (uint64_t *)v15;
          uint64_t v23 = v20;
          uint64_t result = (uint64_t ***)sub_2168BE9D8((uint64_t)v21);
        }
        else
        {
          *uint64_t v6 = *v1;
          char v8 = v6 + 1;
          *uint64_t v1 = 0;
        }
        v5[1] = v8;
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216BF1414(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  return a1;
}

uint64_t sub_216BF146C(uint64_t *a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[4];
  uint64_t v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 16 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    char v12 = sub_216BF1600((uint64_t)a1);
    uint64_t v13 = a1[4];
    if (v12)
    {
      uint64_t v9 = v6 & *a1;
      int v14 = *(__int16 *)(v13 + 16 * v9 + 4);
      if (v14 < 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          int v10 = (__int16)(v10 + 1);
          uint64_t v9 = (v9 + 1) & *a1;
          int v14 = *(__int16 *)(v13 + 16 * v9 + 4);
        }
        while (v10 <= v14);
      }
      int v15 = (unsigned __int16)v14;
    }
    else
    {
      int v15 = *(unsigned __int16 *)(v13 + 16 * v9 + 4);
    }
    if (v15 == 0xFFFF)
    {
      uint64_t v16 = v13 + 16 * v9;
      uint64_t v17 = *a3;
      *(void *)(v16 + 8) = *a3;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)(v16 + 8) &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_DWORD *)uint64_t v16 = v6;
      *(_WORD *)(v16 + 4) = v10;
    }
    else
    {
      sub_216BF16C8(a1, v9, v10, v6, a3);
    }
    ++a1[6];
    return a1[4] + 16 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      uint64_t result = v8 + 16 * v9;
      if ((*(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8) == v5) {
        break;
      }
      int v10 = (__int16)(v10 + 1);
      uint64_t v9 = (v9 + 1) & v7;
      if (v10 > *(__int16 *)(v8 + 16 * v9 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_216BF1600(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216BF1744(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216BF1744(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t *sub_216BF16C8(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  uint64_t v8 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = (uint64_t)v6;
    }
  }
  uint64_t result = sub_216BF18CC(a1, a2, a3, a4, &v8);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216BF1744(uint64_t a1, unint64_t a2)
{
  sub_216BDFC40((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    uint64_t v5 = v3 + 1;
    unint64_t v6 = (unint64_t)(v9[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6) {
          unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (*v5 & 0xFFFFFFFFFFFFFFF8));
        }
        else {
          unint64_t v7 = *((unsigned int *)v5 - 2);
        }
        sub_216BF1858(&v8, v8 & v7, 0, v7, v5);
      }
      v5 += 2;
    }
    while (v5 - 1 != v4);
  }
  v9[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v8, (uint64_t *)a1);
  unint64_t v10 = (void **)v9;
  sub_216BDFE6C(&v10);
}

void sub_216BF1838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_216BDFE6C((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

void *sub_216BF1858(void *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  while (1)
  {
    uint64_t v5 = result[4] + 16 * a2;
    unint64_t v6 = (_WORD *)(v5 + 4);
    int v7 = *(__int16 *)(v5 + 4);
    if (v7 >= a3) {
      goto LABEL_4;
    }
    uint64_t v8 = (uint64_t *)(v5 + 8);
    if (v7 == -1) {
      break;
    }
    uint64_t v9 = *a5;
    *a5 = *v8;
    *uint64_t v8 = v9;
    *unint64_t v6 = a3;
    int v10 = *(_DWORD *)v5;
    *(_DWORD *)uint64_t v5 = a4;
    a3 = v7;
    a4 = v10;
LABEL_4:
    ++a3;
    a2 = *result & (a2 + 1);
  }
  *uint64_t v8 = *a5;
  *a5 = 0;
  *(_DWORD *)uint64_t v5 = a4;
  *unint64_t v6 = a3;
  return result;
}

uint64_t *sub_216BF18CC(uint64_t *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5 = result[4] + 16 * a2;
  uint64_t v6 = *a5;
  *a5 = *(void *)(v5 + 8);
  *(void *)(v5 + 8) = v6;
  int v7 = *(unsigned __int16 *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  int v8 = *(_DWORD *)v5;
  *(_DWORD *)uint64_t v5 = a4;
  uint64_t v9 = *result;
  uint64_t v10 = (a2 + 1) & *result;
  int v11 = v7 + 1;
  uint64_t v12 = result[4];
  uint64_t v13 = (int *)(v12 + 16 * v10);
  int v14 = v13 + 1;
  for (int i = *((unsigned __int16 *)v13 + 2); i != 0xFFFF; int i = *((unsigned __int16 *)v13 + 2))
  {
    if ((__int16)v11 <= (__int16)i)
    {
      int i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096) {
        *((unsigned char *)result + 72) = 1;
      }
      uint64_t v16 = v12 + 16 * v10;
      uint64_t v17 = *a5;
      *a5 = *(void *)(v16 + 8);
      *(void *)(v16 + 8) = v17;
      *int v14 = v11;
      int v18 = *v13;
      int *v13 = v8;
      uint64_t v12 = result[4];
      int v8 = v18;
    }
    uint64_t v10 = (v10 + 1) & v9;
    int v11 = i + 1;
    uint64_t v13 = (int *)(v12 + 16 * v10);
    int v14 = v13 + 1;
  }
  *(void *)(v12 + 16 * v10 + 8) = *a5;
  *a5 = 0;
  int *v13 = v8;
  *int v14 = v11;
  return result;
}

atomic_uint *sub_216BF19A8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (atomic_uint *)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2167B421C((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    sub_216BF2058(a1, v7);
    return sub_216BF220C((atomic_uint *)v7);
  }
  return result;
}

void sub_216BF1A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BF220C((atomic_uint *)va);
  _Unwind_Resume(a1);
}

__n128 sub_216BF1A70(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C75C038;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_216BF1AD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75C038;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216BF1B1C(uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    sub_216778F24(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __dst = *(std::string *)a2;
  }
  memset(&v25, 0, sizeof(v25));
  if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(&__dst))
  {
    uint64_t v6 = *(void *)(sub_216BBBFA8(*(uint64_t **)(a1 + 8)) + 392);
    sub_216779094(__p, "reference");
    pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(&__dst, v6, (const std::string *)__p, *(void *)(a1 + 16), *(_DWORD **)(a1 + 24), **(void **)(a1 + 32), **(uint64_t ***)(a1 + 40), (uint64_t)&v21);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string __dst = v21;
    *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if (SBYTE7(v19) < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      *a3 = 0;
      a3[56] = 0;
      goto LABEL_36;
    }
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), (uint64_t)&__dst, (uint64_t)&v21);
  }
  else
  {
    std::string::size_type v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = __dst.__r_.__value_.__l.__size_;
    }
    if (!v8) {
      goto LABEL_20;
    }
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), (uint64_t)&__dst, (uint64_t)&v21);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string v25 = v21;
LABEL_20:
  __p[0] = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(&v21, &v25, a2 + 24, a2 + 32, __p);
  sub_2168EBBB8((void ***)__p, 0);
  pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)&v24, (const void ****)(a2 + 48));
  uint64_t v9 = *(void *)(a1 + 16);
  int v11 = *(void **)v9;
  uint64_t v10 = *(atomic_uint **)(v9 + 8);
  __p[0] = v11;
  __p[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 2, 1u, memory_order_relaxed);
  }
  uint64_t v12 = **(long long ***)(a1 + 56);
  if (v12) {
    long long v19 = *v12;
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v19, 0.0, 1.0);
  }
  std::string v20 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v13 = *(uint64_t ***)(a1 + 48);
  uint64_t v27 = &v21;
  int v14 = sub_216BF2434(v13, (unsigned __int8 *)&v21, (uint64_t)&unk_2174BFD90, (long long **)&v27);
  int v15 = (atomic_uint *)v14[12];
  *(_OWORD *)(v14 + 11) = *(_OWORD *)__p;
  __p[1] = 0;
  if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
  }
  __p[0] = 0;
  *(_OWORD *)(v14 + 13) = v19;
  uint64_t v16 = (void **)(v14 + 15);
  if (*((char *)v14 + 143) < 0) {
    operator delete(*v16);
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v14[17] = v20.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v17 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v17 + 8))(v17);
  }
  sub_216A9985C((uint64_t)a3, (long long *)&v21);
  sub_2168EBBB8(&v24, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v23);
  sub_21697C414(&v22);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
LABEL_36:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_216BF1E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  sub_2168EBBB8(v37, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&a28 + 1);
  sub_21697C414(&a28);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v38 - 73) < 0) {
    operator delete(*(void **)(v38 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216BF1F84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75C0A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BF1FC4()
{
  return &unk_26C75C0A8;
}

atomic_uint *sub_216BF1FD0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  __n128 result = *(atomic_uint **)(a2 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    long long v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v4();
  }
  return result;
}

uint64_t sub_216BF2058(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BF20D0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BF20D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 16);
      long long v9 = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      *(_OWORD *)(v7 - 24) = v9;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 56;
      *((void *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216BF2180((uint64_t)v12);
  return v10;
}

uint64_t sub_216BF2180(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BF21B8((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BF21B8(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BF1FD0(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_216BF220C(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_216BF2240(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 56;
      uint64_t result = sub_216BF1FD0(v4, v1 - 56);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216BF2288(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_2167B421C((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  int v11 = &v7[56 * v3];
  char v13 = &v7[56 * v6];
  sub_216BF23B0((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 56;
  sub_216BF2058(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216BF220C((atomic_uint *)&v10);
  return v8;
}

void sub_216BF239C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BF220C((atomic_uint *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216BF23B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  uint64_t result = (unsigned char *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0) {
    return sub_216778F24(result, *(void **)(a3 + 32), *(void *)(a3 + 40));
  }
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)uint64_t result = v5;
  return result;
}

void sub_216BF241C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324248(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216BF2434(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_216AE63D0((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216BF24E0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216BF25EC((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_216BF24E0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_216BF2560((uint64_t)v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216BF2548(_Unwind_Exception *a1)
{
  sub_216BF25EC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF2560(uint64_t a1, long long **a2)
{
  uint64_t v3 = sub_2169D5338((char *)a1, *a2);
  *(_OWORD *)(v3 + 72) = 0u;
  v3 += 72;
  *((void *)v3 + 4) = 0;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 - 1) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v3, 0.0, 1.0);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  return a1;
}

void sub_216BF25B4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  if (v3) {
    sub_217324248(v3);
  }
  sub_2168EBBB8((void ***)(v1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v1 + 28));
  sub_217324B5C(v1);
  _Unwind_Resume(a1);
}

void sub_216BF25EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BF2644((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216BF2644(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v2 = *(atomic_uint **)(a1 + 64);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_2168EBBB8((void ***)(a1 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_216BF26FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BF26FC(a1, *a2);
    sub_216BF26FC(a1, a2[1]);
    sub_216BF2644((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

__n128 sub_216BF2760(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26C75C0C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_216BF27C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75C0C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216BF280C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    sub_216778F24(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __dst = *(std::string *)a2;
  }
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  if (pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(&__dst))
  {
    uint64_t v6 = *(void *)(sub_216BBBFA8(*(uint64_t **)(a1 + 8)) + 392);
    sub_216779094(&__p, "payload");
    pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression(&__dst, v6, &__p, *(void *)(a1 + 16), *(_DWORD **)(a1 + 24), **(void **)(a1 + 32), **(uint64_t ***)(a1 + 40), (uint64_t)&v18);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v18;
    __dst.__r_.__value_.__r.__words[2] = v19;
    BYTE7(v19) = 0;
    LOBYTE(v18) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 48) = 0;
      goto LABEL_35;
    }
  }
  else
  {
    std::string::size_type v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = __dst.__r_.__value_.__l.__size_;
    }
    if (!v8) {
      goto LABEL_19;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), (uint64_t)&__dst, (uint64_t)&v18);
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  *(_OWORD *)std::string v25 = v18;
  uint64_t v26 = v19;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&__p, v25, a2 + 24, a2 + 32);
  long long v9 = *(uint64_t **)(a1 + 16);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *(void *)&long long v18 = v11;
  *((void *)&v18 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v12 = **(long long ***)(a1 + 56);
  if (v12) {
    long long v19 = *v12;
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v19, 0.0, 1.0);
  }
  std::string v20 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  char v13 = *(uint64_t ***)(a1 + 48);
  p_p = &__p;
  long long v14 = sub_216BF2C90(v13, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&p_p);
  long long v15 = (atomic_uint *)v14[11];
  *((_OWORD *)v14 + 5) = v18;
  *((void *)&v18 + 1) = 0;
  if (v15 && atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
  }
  *(void *)&long long v18 = 0;
  *((_OWORD *)v14 + 6) = v19;
  uint64_t v16 = (void **)(v14 + 14);
  if (*((char *)v14 + 135) < 0) {
    operator delete(*v16);
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v14[16] = v20.__r_.__value_.__r.__words[2];
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v17 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  *(std::string *)a3 = __p;
  memset(&__p, 0, sizeof(__p));
  sub_21697D878((_DWORD *)(a3 + 24), &v22);
  sub_21697D8B4((_DWORD *)(a3 + 28), &v23);
  *(_OWORD *)(a3 + 32) = v24;
  *(unsigned char *)(a3 + 48) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_216BF2B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&a26 + 1);
  sub_21697C414(&a26);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216BF2C44(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75C138)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BF2C84()
{
  return &unk_26C75C138;
}

uint64_t *sub_216BF2C90(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_216AE8A88((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = v6;
    sub_216BF2D3C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216BF2E94((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_216BF2D3C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x88uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v8 = *a2;
  __n128 result = sub_216BF2DBC(v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216BF2DA4(_Unwind_Exception *a1)
{
  sub_216BF2E94(v1, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_216BF2DBC(unsigned char *__dst, long long **a2)
{
  long long v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    *((void *)__dst + 2) = *((void *)v3 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)v3 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)v3 + 7);
  long long v5 = v3[2];
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 2) = v5;
  *((_OWORD *)__dst + 3) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  *((void *)__dst + 12) = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst + 8, 0.0, 1.0);
  *((void *)__dst + 10) = 0;
  *((void *)__dst + 11) = 0;
  *((void *)__dst + 12) = 0;
  return __dst;
}

void sub_216BF2E64(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 56);
  if (v5) {
    sub_217324248(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_2173245A8(v2, v1);
  _Unwind_Resume(a1);
}

void sub_216BF2E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BF2EEC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216BF2EEC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(atomic_uint **)(a1 + 56);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_216BF2F98(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BF2F98(a1, *a2);
    sub_216BF2F98(a1, a2[1]);
    sub_216BF2EEC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_216BF2FF4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B44AD8(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216BF3078(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B44AD8(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_216BF30E0(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216BF30E0(void *a1)
{
  uint64_t v2 = sub_216BF3138(a1);
  uint64_t v3 = *v2;
  _DWORD *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

void *sub_216BF3138(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

_DWORD *sub_216BF31C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(v4 + 16), (_DWORD *)(a2 + 16));
  uint64_t result = sub_21697D8B4((_DWORD *)(v4 + 20), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 8) = v4 + 24;
  return result;
}

uint64_t sub_216BF3224(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v14 = v10;
  long long v15 = &v10[24 * v4];
  uint64_t v17 = &v10[24 * v9];
  uint64_t v11 = v15;
  *(_OWORD *)long long v15 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)v11 + 4, (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)v11 + 5, (_DWORD *)(a2 + 20));
  uint64_t v16 = (char *)v11 + 24;
  sub_216BF3344(a1, &v14);
  uint64_t v12 = a1[1];
  sub_216BF359C((atomic_uint *)&v14);
  return v12;
}

void sub_216BF3330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BF359C((atomic_uint *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF3344(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216BF33BC((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BF33BC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3 - 2;
    do
    {
      uint64_t v10 = v9 - 4;
      *(_OWORD *)(v7 - 24) = *((_OWORD *)v9 - 1);
      *((void *)v9 - 1) = 0;
      *((void *)v9 - 2) = 0;
      sub_21697D878((_DWORD *)(v7 - 8), v9);
      sub_21697D8B4((_DWORD *)(v7 - 4), v9 + 1);
      uint64_t v7 = *((void *)&v16 + 1) - 24;
      *((void *)&v16 + 1) -= 24;
      v9 -= 6;
    }
    while (v10 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216BF3484((uint64_t)v13);
  return v11;
}

uint64_t sub_216BF3484(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216BF34BC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216BF34BC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BF3510(v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_216BF3510(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t result = *(atomic_uint **)(a2 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v4();
  }
  return result;
}

atomic_uint *sub_216BF359C(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_216BF35D0(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 24;
      uint64_t result = sub_216BF3510(v4, v1 - 24);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

__n128 sub_216BF3620(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75C190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216BF366C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75C190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *sub_216BF369C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = (uint64_t *)sub_216BEF334(*(void *)(a1 + 8), a2, (char *)a3);
  sub_216ABBA60((uint64_t *)&v13, v7);
  uint64_t v8 = *(uint64_t ***)(a1 + 16);
  char v14 = (_DWORD *)a3;
  unint64_t v9 = sub_216BF3858(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (uint64_t)&unk_2174BFD90, &v14);
  uint64_t v10 = (atomic_uint *)v9[6];
  *(_OWORD *)(v9 + 5) = v13;
  *((void *)&v13 + 1) = 0;
  if (v10)
  {
    if (atomic_fetch_add_explicit(v10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)&v13 + 1);
    *(void *)&long long v13 = 0;
    if (*((void *)&v13 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  sub_216981010(&v13, (_DWORD *)a3);
  sub_21698105C((_DWORD *)&v13 + 1, (_DWORD *)(a3 + 4));
  sub_21697D878((_DWORD *)a4, &v13);
  sub_21697D8B4((_DWORD *)(a4 + 4), (_DWORD *)&v13 + 1);
  *(unsigned char *)(a4 + 8) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
  return sub_21697C414(&v13);
}

void sub_216BF37F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BF380C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75C200)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BF384C()
{
  return &unk_26C75C200;
}

uint64_t *sub_216BF3858(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216BF3904((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216BF3A0C((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_216BF3904@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216BF3970((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216BF3958(_Unwind_Exception *a1)
{
  sub_216BF3A0C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF3970(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)(a1 + 24), 0.0, 1.0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_216BF39E0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4) {
    sub_217324248(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((_DWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_216BF3A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BF3A64((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

_DWORD *sub_216BF3A64(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(atomic_uint **)(a1 + 16);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void sub_216BF3AF4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BF3AF4(a1, *a2);
    sub_216BF3AF4(a1, a2[1]);
    sub_216BF3A64((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

__n128 sub_216BF3B58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75C220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216BF3BA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75C220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_216BF3BD4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = (uint64_t *)sub_216BEF334(*(void *)(a1 + 8), a2, (char *)a3);
  sub_216ABBA60((uint64_t *)&v13, v7);
  uint64_t v8 = *(uint64_t ***)(a1 + 16);
  long long v15 = a3;
  unint64_t v9 = sub_216BF3D7C(v8, (const void **)a3, (uint64_t)&unk_2174BFD90, &v15);
  uint64_t v10 = (atomic_uint *)v9[8];
  *(_OWORD *)(v9 + 7) = v13;
  *((void *)&v13 + 1) = 0;
  if (v10)
  {
    if (atomic_fetch_add_explicit(v10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)&v13 + 1);
    *(void *)&long long v13 = 0;
    if (*((void *)&v13 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(&v13, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v13 = *a3;
    uint64_t v14 = *((void *)a3 + 2);
  }
  double result = *(double *)&v13;
  *(_OWORD *)a4 = v13;
  *(void *)(a4 + 16) = v14;
  *(unsigned char *)(a4 + 24) = 1;
  return result;
}

void sub_216BF3D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BF3D30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75C290)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216BF3D70()
{
  return &unk_26C75C290;
}

uint64_t *sub_216BF3D7C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216BF3E28((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216BF3F30((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_216BF3E28@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = sub_216BF3E94(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216BF3E7C(_Unwind_Exception *a1)
{
  sub_216BF3F30(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_216BF3E94(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  *(_OWORD *)(__dst + 40) = 0u;
  *((void *)__dst + 9) = 0;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst + 5, 0.0, 1.0);
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  *((void *)__dst + 9) = 0;
  return __dst;
}

void sub_216BF3F10(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3) {
    sub_217324248(v3);
  }
  sub_217324594(v1);
  _Unwind_Resume(a1);
}

void sub_216BF3F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BF3F88((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216BF3F88(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(atomic_uint **)(a1 + 32);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_216BF4020(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216BF4020(a1, *a2);
    sub_216BF4020(a1, a2[1]);
    sub_216BF3F88((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_216BF407C(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F724((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216BF42B4(*(unsigned char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216BF4100(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F724(a2)) {
    sub_216BF4390();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

unsigned char *sub_216BF42B4(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (unsigned char *)a2)
  {
    sub_21680F694((uint64_t)(a1 + 8), *(std::string **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
    sub_21680F694((uint64_t)(a1 + 32), *(std::string **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
    sub_21680F694((uint64_t)(a1 + 56), *(std::string **)(a2 + 56), *(long long **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
    sub_21680F694((uint64_t)(a1 + 80), *(std::string **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
    sub_21680F694((uint64_t)(a1 + 104), *(std::string **)(a2 + 104), *(long long **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
    sub_21680F694((uint64_t)(a1 + 128), *(std::string **)(a2 + 128), *(long long **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  }
  return a1;
}

void sub_216BF4390()
{
}

void sub_216BF43F4(_Unwind_Exception *a1)
{
  sub_2169CBCC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF4408(uint64_t a1, uint64_t *a2)
{
  if (sub_2169DBB2C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(uint64_t ***)(a1 + 8);
    if (v6 != (uint64_t **)v5) {
      sub_216799C1C(v6, *(long long **)v5, (long long *)(v5 + 8));
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216BF4498(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169DBB2C(a2))
  {
    sub_216BF4568((uint64_t)a2, &v10);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = v4 + 8;
    sub_2167877AC(v4, *(void **)(v4 + 8));
    *(void *)uint64_t v4 = v10;
    uint64_t v6 = v11;
    *(void *)(v4 + 8) = v11;
    uint64_t v7 = v12;
    *(void *)(v4 + 16) = v12;
    if (v7)
    {
      uint64_t v8 = 0;
      v6[2] = v5;
      uint64_t v10 = &v11;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      *(void *)uint64_t v4 = v5;
      uint64_t v8 = v11;
    }
    sub_2167877AC((uint64_t)&v10, v8);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_216BF4568@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  uint64_t v4 = (uint64_t *)sub_216BF45E4((const void ****)a1);
  uint64_t result = sub_2168A6B2C(v4, (uint64_t)a2);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    BOOL v7 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_216BF45CC(_Unwind_Exception *a1)
{
  sub_2167877AC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

const void ***sub_216BF45E4(const void ****a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, const void ****))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DBFF0(a1);
}

void *sub_216BF4678(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    unint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        std::string v21 = (long long *)(a3 + 16 * a5);
      }
      else
      {
        std::string v21 = (long long *)(a3 + 16 * v20);
        a1[1] = (uint64_t)sub_216BCC624((uint64_t)v9, (uint64_t)v21, a4, (_OWORD *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216970260((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      sub_2167B0AB0((uint64_t)v26, (long long *)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        long long v18 = (char *)sub_216787EE0((uint64_t)v9, v17);
      }
      else {
        long long v18 = 0;
      }
      int v22 = &v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = 16 * a5;
      long long v24 = &v22[16 * a5];
      do
      {
        *(_OWORD *)int v22 = *(_OWORD *)v7;
        v22 += 16;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        v7 += 16;
        v23 -= 16;
      }
      while (v23);
      v26[2] = v24;
      uint64_t v5 = (void *)sub_216BCC460(a1, v26, v5);
      sub_216788028(v26);
    }
  }
  return v5;
}

void sub_216BF47EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_216BF480C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  if ((char *)a3 - (char *)a2 >= 1)
  {
    unint64_t v6 = a3 - a2;
    unint64_t v7 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 56) - v7 < v6)
    {
      float v8 = *(float *)(a1 + 68);
      unint64_t v9 = vcvtps_u32_f32((float)(v7 + v6) / v8);
      unint64_t v10 = vcvtps_u32_f32((float)v7 / v8);
      if (v10 <= v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = v10;
      }
      sub_216BF1744(a1, v11);
    }
  }
  while (v4 != a3)
  {
    sub_216BF48AC((uint64_t *)a1, v4, v4);
    ++v4;
  }
}

uint64_t sub_216BF48AC(uint64_t *a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[4];
  uint64_t v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 16 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    char v12 = sub_216BF1600((uint64_t)a1);
    uint64_t v13 = a1[4];
    if (v12)
    {
      uint64_t v9 = v6 & *a1;
      int v14 = *(__int16 *)(v13 + 16 * v9 + 4);
      if (v14 < 0)
      {
        LOWORD(v10) = 0;
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          int v10 = (__int16)(v10 + 1);
          uint64_t v9 = (v9 + 1) & *a1;
          int v14 = *(__int16 *)(v13 + 16 * v9 + 4);
        }
        while (v10 <= v14);
      }
      int v15 = (unsigned __int16)v14;
    }
    else
    {
      int v15 = *(unsigned __int16 *)(v13 + 16 * v9 + 4);
    }
    if (v15 == 0xFFFF)
    {
      uint64_t v16 = v13 + 16 * v9;
      uint64_t v17 = *a3;
      *(void *)(v16 + 8) = *a3;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)(v16 + 8) &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_DWORD *)uint64_t v16 = v6;
      *(_WORD *)(v16 + 4) = v10;
    }
    else
    {
      sub_216BF4A40(a1, v9, v10, v6, a3);
    }
    ++a1[6];
    return a1[4] + 16 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      uint64_t result = v8 + 16 * v9;
      if ((*(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8) == v5) {
        break;
      }
      int v10 = (__int16)(v10 + 1);
      uint64_t v9 = (v9 + 1) & v7;
      if (v10 > *(__int16 *)(v8 + 16 * v9 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t *sub_216BF4A40(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5 = *a5;
  uint64_t v8 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = (uint64_t)v6;
    }
  }
  uint64_t result = sub_216BF18CC(a1, a2, a3, a4, &v8);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

int *sub_216BF4ABC(int *result)
{
  uint64_t v1 = result;
  if (*((float *)result + 16) <= 0.0)
  {
    uint64_t v2 = *((void *)result + 1);
    for (uint64_t i = *((void *)result + 2); v2 != i; v2 += 16)
    {
      if (*(__int16 *)(v2 + 4) != -1)
      {
        uint64_t v4 = *(void *)(v2 + 8);
        if ((v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(_WORD *)(v2 + 4) = -1;
      }
    }
    *((void *)result + 6) = 0;
    *((unsigned char *)result + 72) = 0;
  }
  else
  {
    *(void *)uint64_t result = 0;
    sub_216BDFEC0((uint64_t *)result + 1);
    uint64_t result = sub_216BDFD60();
    *((_WORD *)v1 + 36) = 0;
    *((void *)v1 + 4) = result;
    *((void *)v1 + 5) = 0;
    *((void *)v1 + 6) = 0;
    *((void *)v1 + 7) = 0;
  }
  return result;
}

void sub_216BF4B58()
{
  sub_216779094(v2, "PcpDependencyTypeNone");
  sub_216779094(__p, "non-dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeRoot");
  sub_216779094(__p, "root dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypePurelyDirect");
  sub_216779094(__p, "purely-direct dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypePartlyDirect");
  sub_216779094(__p, "partly-direct dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeDirect");
  sub_216779094(__p, "direct dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeAncestral");
  sub_216779094(__p, "ancestral dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeVirtual");
  sub_216779094(__p, "virtual dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 16, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeNonVirtual");
  sub_216779094(__p, "non-virtual dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 32, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeAnyNonVirtual");
  sub_216779094(__p, "any non-virtual dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 47, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpDependencyTypeAnyIncludingVirtual");
  sub_216779094(__p, "any dependency");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75C310, 63, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216BF4EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(this)) {
    return 1;
  }
  int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType != 6 && ArcType != 1) {
    return 1;
  }
  uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
  uint64_t v6 = v5;
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  uint64_t result = 0;
  if (v6 == v9 && OriginNode == ParentNode) {
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this)) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(this))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency(this, v3);
    if (!result) {
      return result;
    }
    int v5 = 16;
  }
  else
  {
    int v5 = 0;
  }
  long long v12 = *(_OWORD *)this;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12)
    && v6 != -1)
  {
    char v7 = 0;
    char v8 = 0;
    do
    {
      char IsDueToAncestor = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12);
      v8 |= IsDueToAncestor ^ 1;
      v7 |= IsDueToAncestor;
      if (v7 & 1) != 0 && (v8) {
        goto LABEL_16;
      }
      *(void *)&long long v12 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12);
      *((void *)&v12 + 1) = v10;
    }
    while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12)
         && v11 != -1);
    if (v8)
    {
      if (v7)
      {
LABEL_16:
        v5 |= 4u;
        return ~(2 * v5) & 0x20 | v5;
      }
      v5 |= 2u;
    }
    else if (v7)
    {
      v5 |= 8u;
    }
  }
  return ~(2 * v5) & 0x20 | v5;
}

void pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(pxrInternal__aapl__pxrReserved__ *this@<X0>, std::string *a2@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = v7;
  if (this == 1)
  {
    sub_216779094(__p, "root");
    sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
    goto LABEL_19;
  }
  char v3 = (char)this;
  if (!this)
  {
    sub_216779094(__p, "none");
    sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
    goto LABEL_19;
  }
  if ((this & 2) != 0
    && (sub_216779094(__p, "purely-direct"), sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p), v5 < 0))
  {
    operator delete(__p[0]);
    if ((v3 & 4) == 0) {
      goto LABEL_11;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_11;
  }
  sub_216779094(__p, "partly-direct");
  sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
LABEL_11:
  if ((v3 & 8) != 0
    && (sub_216779094(__p, "ancestral"), sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p), v5 < 0))
  {
    operator delete(__p[0]);
    if ((v3 & 0x10) != 0)
    {
LABEL_14:
      sub_216779094(__p, "virtual");
      sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    goto LABEL_14;
  }
  if ((v3 & 0x20) == 0) {
    goto LABEL_21;
  }
  sub_216779094(__p, "non-virtual");
  sub_216884E40((uint64_t **)&v6, (const void **)__p, (uint64_t)__p);
LABEL_19:
  if (v5 < 0) {
    operator delete(__p[0]);
  }
LABEL_21:
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (uint64_t)&v6, a2);
  sub_21678A498((uint64_t)&v6, v7[0]);
}

void sub_216BF529C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, char *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_21678A498((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::PcpDynamicFileFormatContext(__n128 *a1, __n128 *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  a1[2].n128_u64[0] = a5;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  a1[2].n128_u64[0] = a5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, BOOL *a3)
{
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v6);
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Identifier);
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v8);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (FieldDefinition
    && (uint64_t v11 = FieldDefinition,
        (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsPlugin(FieldDefinition) & 1) != 0))
  {
    if (a3)
    {
      FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v11);
      *a3 = sub_2168EC434(FallbackValue);
    }
    return 1;
  }
  else
  {
    v16[0] = "pcp/dynamicFileFormatContext.cpp";
    v16[1] = "_IsAllowedFieldForArguments";
    v16[2] = 224;
    v16[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(const TfTok"
             "en &, BOOL *) const";
    char v17 = 0;
    unint64_t v14 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      int v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        int v15 = *(const char **)v15;
      }
    }
    else
    {
      int v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Field %s is not a plugin field and is not supported for composing dynamic file format arguments", v15);
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeValue(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v15 = a3;
  BOOL v14 = 0;
  BOOL v5 = 0;
  if (pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(this, a2, &v14))
  {
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      sub_216AE2E60(v6, a2, (uint64_t *)a2);
    }
    if (v14)
    {
      long long v12 = &v13;
      uint64_t v13 = 0;
      uint64_t v7 = *((void *)this + 2);
      long long v17 = *(_OWORD *)this;
      uint64_t v18 = v7;
      __int16 v19 = 0;
      uint64_t v16 = 0;
      Path = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v17);
      sub_216BF5760((uint64_t)&v17, (pxrInternal__aapl__pxrReserved__ *)&v17, Path, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, a2, (pxrInternal__aapl__pxrReserved__ **)&v12);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      BOOL v5 = HIBYTE(v19) != 0;
      if (HIBYTE(v19)) {
        sub_2168EC844(v15, (const void ****)&v13);
      }
      sub_2168EBBB8((void ***)&v13, 0);
    }
    else
    {
      uint64_t v13 = &v15;
      uint64_t v9 = *((void *)this + 2);
      long long v17 = *(_OWORD *)this;
      uint64_t v18 = v9;
      __int16 v19 = 1;
      uint64_t v16 = 0;
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v17);
      sub_216BF5DD4((uint64_t)&v17, (pxrInternal__aapl__pxrReserved__ *)&v17, v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, a2, (void ***)&v13);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return HIBYTE(v19) != 0;
    }
  }
  return v5;
}

void sub_216BF5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeValueStack(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v10 = a3;
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::_IsAllowedFieldForArguments(a1, a2, 0);
  if (result)
  {
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      sub_216AE2E60(v6, a2, (uint64_t *)a2);
    }
    uint64_t v9 = &v10;
    uint64_t v7 = *((void *)a1 + 2);
    long long v12 = *(_OWORD *)a1;
    uint64_t v13 = v7;
    __int16 v14 = 0;
    uint64_t v11 = 0;
    Path = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v12);
    sub_216BF6300((uint64_t)&v12, (pxrInternal__aapl__pxrReserved__ *)&v12, Path, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2, (void ***)&v9);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return HIBYTE(v14) != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeAttributeDefaultValue(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  long long v12 = a3;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    sub_216AE2E60(v5, a2, (uint64_t *)a2);
  }
  uint64_t v11 = &v12;
  uint64_t v6 = *((void *)this + 2);
  long long v13 = *(_OWORD *)this;
  uint64_t v14 = v6;
  __int16 v15 = 1;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 88);
  Path = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
  sub_216BF6934((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)&v13, Path, a2, v8, (void ***)&v11);
  return HIBYTE(v15);
}

__n128 pxrInternal__aapl__pxrReserved__::Pcp_CreateDynamicFileFormatContext@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __n128 result = *a1;
  *a5 = *a1;
  a5[1].n128_u64[0] = a2;
  a5[1].n128_u64[1] = a3;
  a5[2].n128_u64[0] = a4;
  return result;
}

uint64_t sub_216BF5760(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, pxrInternal__aapl__pxrReserved__ **a6)
{
  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26)) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_8;
  }
  long long v23 = *(_OWORD *)(v10 + 24);
  uint64_t v11 = *(void *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(void *)(a1 + 16) = *(void *)v15;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = -1;
  }
  char v16 = sub_216BF5760(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v16) {
    uint64_t v17 = 1;
  }
  else {
LABEL_8:
  }
    uint64_t v17 = sub_216BF58F4(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  return v17;
}

void sub_216BF58B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216BF5D04((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF58F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, pxrInternal__aapl__pxrReserved__ **a6)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (*(void *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v52);
  }
  else
  {
    sub_216981010(&v52, a3);
    sub_21698105C(&v53, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  long long v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  uint64_t v17 = *(uint64_t **)Layers;
  uint64_t v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_15:
    uint64_t v22 = *((void *)a2 + 1);
    uint64_t v50 = *(void *)a2;
    uint64_t v51 = v22;
    uint64_t v23 = **(void **)(v50 + 16);
    int v24 = (const char *)*(unsigned __int16 *)(v23 + 48 * v22 + 28);
    v44 = (char *)v50;
    v45 = v24;
    uint64_t v46 = v23;
    v47 = (const char *)v50;
    uint64_t v48 = 0xFFFFLL;
    uint64_t v49 = v23;
    while (v45 != (const char *)v48 || v44 != v47)
    {
      int v25 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v44, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v25);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v42);
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v27, v28);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, &v54);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_21697C414(&v42);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v54))
      {
        uint64_t v32 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v44, v30, v31);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v32, &v42);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, &v39);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v41, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, 1);
          sub_21697DE94((int *)&v54, (int *)&v41);
          sub_21697DEEC((int *)&v54 + 1, (int *)&v41 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
          sub_21697C414(&v41);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
          sub_21697C414(&v39);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
        sub_21697C414(&v42);
        v35 = sub_216BC2828(&v44, v33, v34);
        int v36 = sub_216BF58F4(a1, v35, &v54, a4, a5, a6);
      }
      else
      {
        int v36 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54 + 1);
      sub_21697C414(&v54);
      if (v36 != 6 && v36) {
        goto LABEL_28;
      }
      sub_216BC28B8(&v44);
    }
    uint64_t v37 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v55 = 0;
      int v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
      {
        if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
        {
          int v20 = *a6;
          int v21 = (v55 & 4) != 0
              ? (const char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(&v54)
              : (const char **)v54;
          pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(v20, v21, 0);
        }
        else
        {
          v44 = "pcp/dynamicFileFormatContext.cpp";
          v45 = "operator()";
          uint64_t v46 = 261;
          v47 = "auto pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatContext::ComposeValue(const TfToken &, VtValu"
                "e *)::(anonymous class)::operator()(VtValue &&) const";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Expected value to contain VtDictionary");
        }
        *(unsigned char *)(a1 + 25) = 1;
        if (*(unsigned char *)(a1 + 24)) {
          break;
        }
      }
      sub_2168EE084((uint64_t)&v54);
      if (++v17 == v18) {
        goto LABEL_15;
      }
    }
    sub_2168EE084((uint64_t)&v54);
LABEL_28:
    uint64_t v37 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
  sub_21697C414(&v52);
  return v37;
}

void sub_216BF5C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25)
{
}

_DWORD *sub_216BF5D04(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void *sub_216BF5D44(void *result, uint64_t a2, char *a3)
{
  if (result[1] == result[4] && *result == result[3])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateC"
            "hildrenConstRange>::operator->() [T = pxrInternal__aapl__pxrReserved__::PcpNodeRef_PrivateChildrenConstRange"
            ", Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216BF5DD4(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, void ***a6)
{
  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26)) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_8;
  }
  long long v23 = *(_OWORD *)(v10 + 24);
  uint64_t v11 = *(void *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(void *)(a1 + 16) = *(void *)v15;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = -1;
  }
  char v16 = sub_216BF5DD4(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v16) {
    uint64_t v17 = 1;
  }
  else {
LABEL_8:
  }
    uint64_t v17 = sub_216BF5F68(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  return v17;
}

void sub_216BF5F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216BF5D04((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF5F68(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, void ***a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*(void *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v44);
  }
  else
  {
    sub_216981010(&v44, a3);
    sub_21698105C(&v45, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  long long v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  uint64_t v17 = *(uint64_t **)Layers;
  uint64_t v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_8:
    uint64_t v20 = *((void *)a2 + 1);
    uint64_t v52 = *(void *)a2;
    uint64_t v53 = v20;
    uint64_t v21 = **(void **)(v52 + 16);
    uint64_t v22 = *(unsigned __int16 *)(v21 + 48 * v20 + 28);
    uint64_t v46 = v52;
    uint64_t v47 = v22;
    uint64_t v48 = v21;
    uint64_t v49 = v52;
    uint64_t v50 = 0xFFFFLL;
    uint64_t v51 = v21;
    while (v47 != v50 || v46 != v49)
    {
      long long v23 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v46, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v40);
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v25, v26);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_21697C414(&v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        uint64_t v30 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v46, v28, v29);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v30, &v40);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v37);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, 1);
          sub_21697DE94(&v42, (int *)&v39);
          sub_21697DEEC(&v43, (int *)&v39 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_21697C414(&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_21697C414(&v37);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_21697C414(&v40);
        uint64_t v33 = sub_216BC2828(&v46, v31, v32);
        int v34 = sub_216BF5F68(a1, v33, &v42, a4, a5, a6);
      }
      else
      {
        int v34 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_21697C414(&v42);
      if (v34 != 6 && v34) {
        goto LABEL_21;
      }
      sub_216BC28B8(&v46);
    }
    uint64_t v35 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v47 = 0;
      int v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v46))
      {
        sub_2168ED33C(**a6, &v46);
        *(unsigned char *)(a1 + 25) = 1;
        if (*(unsigned char *)(a1 + 24)) {
          break;
        }
      }
      sub_2168EE084((uint64_t)&v46);
      if (++v17 == v18) {
        goto LABEL_8;
      }
    }
    sub_2168EE084((uint64_t)&v46);
LABEL_21:
    uint64_t v35 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  return v35;
}

void sub_216BF625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t sub_216BF6300(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, void ***a6)
{
  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26)) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_8;
  }
  long long v23 = *(_OWORD *)(v10 + 24);
  uint64_t v11 = *(void *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(void *)(a1 + 16) = *(void *)v15;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = -1;
  }
  char v16 = sub_216BF6300(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v16) {
    uint64_t v17 = 1;
  }
  else {
LABEL_8:
  }
    uint64_t v17 = sub_216BF6494(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  return v17;
}

void sub_216BF6458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216BF5D04((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF6494(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, void ***a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*(void *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v44);
  }
  else
  {
    sub_216981010(&v44, a3);
    sub_21698105C(&v45, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  long long v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  uint64_t v17 = *(uint64_t **)Layers;
  uint64_t v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_8:
    uint64_t v20 = *((void *)a2 + 1);
    uint64_t v52 = *(void *)a2;
    uint64_t v53 = v20;
    uint64_t v21 = **(void **)(v52 + 16);
    uint64_t v22 = *(unsigned __int16 *)(v21 + 48 * v20 + 28);
    uint64_t v46 = v52;
    uint64_t v47 = v22;
    uint64_t v48 = v21;
    uint64_t v49 = v52;
    uint64_t v50 = 0xFFFFLL;
    uint64_t v51 = v21;
    while (v47 != v50 || v46 != v49)
    {
      long long v23 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v46, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v40);
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v25, v26);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_21697C414(&v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        uint64_t v30 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v46, v28, v29);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v30, &v40);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v37);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, 1);
          sub_21697DE94(&v42, (int *)&v39);
          sub_21697DEEC(&v43, (int *)&v39 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_21697C414(&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_21697C414(&v37);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_21697C414(&v40);
        uint64_t v33 = sub_216BC2828(&v46, v31, v32);
        int v34 = sub_216BF6494(a1, v33, &v42, a4, a5, a6);
      }
      else
      {
        int v34 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_21697C414(&v42);
      if (v34 != 6 && v34) {
        goto LABEL_21;
      }
      sub_216BC28B8(&v46);
    }
    uint64_t v35 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v47 = 0;
      int v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v46))
      {
        sub_216BF682C(**a6, &v46);
        *(unsigned char *)(a1 + 25) = 1;
        if (*(unsigned char *)(a1 + 24)) {
          break;
        }
      }
      sub_2168EE084((uint64_t)&v46);
      if (++v17 == v18) {
        goto LABEL_8;
      }
    }
    sub_2168EE084((uint64_t)&v46);
LABEL_21:
    uint64_t v35 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  return v35;
}

void sub_216BF6788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
}

unint64_t sub_216BF682C(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      long long v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v15 = v13;
    char v16 = &v13[16 * v9];
    uint64_t v18 = &v13[16 * v12];
    sub_2168EDFA8(v16, a2);
    uint64_t v17 = v16 + 16;
    sub_21696CA88(a1, &v15);
    unint64_t v8 = a1[1];
    sub_21696CB10((uint64_t)&v15);
  }
  else
  {
    sub_2168EDFA8(*(void **)(v4 - 8), a2);
    unint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_216BF6920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21696CB10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF6934(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, void ***a6)
{
  pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode(a2, a3, (uint64_t)&v24);
  if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26)) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_8;
  }
  long long v23 = *(_OWORD *)(v10 + 24);
  uint64_t v11 = *(void *)(v10 + 40);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v19);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11 + 40), v12, v13);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v15 + 24);
    *(void *)(a1 + 16) = *(void *)v15;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = -1;
  }
  char v16 = sub_216BF6934(a1, &v23, &v21, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v16) {
    uint64_t v17 = 1;
  }
  else {
LABEL_8:
  }
    uint64_t v17 = sub_216BF6AC8(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, a4, a5, a6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  return v17;
}

void sub_216BF6A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216BF5D04((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF6AC8(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, void ***a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*(void *)a4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v44);
  }
  else
  {
    sub_216981010(&v44, a3);
    sub_21698105C(&v45, (_DWORD *)a3 + 1);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  long long v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
  uint64_t v17 = *(uint64_t **)Layers;
  uint64_t v18 = *(uint64_t **)(Layers + 8);
  if (*(uint64_t **)Layers == v18)
  {
LABEL_8:
    uint64_t v20 = *((void *)a2 + 1);
    uint64_t v52 = *(void *)a2;
    uint64_t v53 = v20;
    uint64_t v21 = **(void **)(v52 + 16);
    uint64_t v22 = *(unsigned __int16 *)(v21 + 48 * v20 + 28);
    uint64_t v46 = v52;
    uint64_t v47 = v22;
    uint64_t v48 = v21;
    uint64_t v49 = v52;
    uint64_t v50 = 0xFFFFLL;
    uint64_t v51 = v21;
    while (v47 != v50 || v46 != v49)
    {
      long long v23 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v46, v15, v16);
      MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a3, &v40);
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v25, v26);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_21697C414(&v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        uint64_t v30 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v46, v28, v29);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(v30, &v40);
        if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, &v37);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v39, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, 1);
          sub_21697DE94(&v42, (int *)&v39);
          sub_21697DEEC(&v43, (int *)&v39 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_21697C414(&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
          sub_21697C414(&v37);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_21697C414(&v40);
        uint64_t v33 = sub_216BC2828(&v46, v31, v32);
        int v34 = sub_216BF6AC8(a1, v33, &v42, a4, a5, a6);
      }
      else
      {
        int v34 = 6;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_21697C414(&v42);
      if (v34 != 6 && v34) {
        goto LABEL_21;
      }
      sub_216BC28B8(&v46);
    }
    uint64_t v35 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v47 = 0;
      int v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v17);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v46))
      {
        sub_2168ED33C(**a6, &v46);
        *(unsigned char *)(a1 + 25) = 1;
        if (*(unsigned char *)(a1 + 24)) {
          break;
        }
      }
      sub_2168EE084((uint64_t)&v46);
      if (++v17 == v18) {
        goto LABEL_8;
      }
    }
    sub_2168EE084((uint64_t)&v46);
LABEL_21:
    uint64_t v35 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  return v35;
}

void sub_216BF6DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
}

pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::PcpDynamicFileFormatDependencyData(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this, uint64_t **a2)
{
  *(void *)this = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = operator new(0x48uLL);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    sub_216BF7624(v4, *v3, v3[1], 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 3));
    sub_216BF7738(v4 + 3, (uint64_t)(v3 + 3));
    sub_216BF7738(v4 + 6, (uint64_t)(v3 + 6));
    uint64_t v5 = *(void *)this;
    *(void *)this = v4;
    if (v5) {
      sub_216BBECE0((uint64_t)this, v5);
    }
  }
  return this;
}

void sub_216BF6F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v12;
  sub_2168CB05C(v13, *(void **)(v11 + 32));
  a10 = (void **)v11;
  sub_216932280(&a10);
  operator delete((void *)v11);
  uint64_t v15 = *v10;
  uint64_t *v10 = 0;
  if (v15) {
    sub_216BBECE0((uint64_t)v10, v15);
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AddDependencyContext(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a2;
  uint64_t v10 = (_OWORD *)*a1;
  if (!*a1)
  {
    uint64_t v10 = operator new(0x48uLL);
    _OWORD *v10 = 0u;
    v10[1] = 0u;
    v10[2] = 0u;
    *((void *)v10 + 3) = v10 + 2;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 6) = (char *)v10 + 56;
    *a1 = (uint64_t)v10;
  }
  uint64_t v11 = (void *)*((void *)v10 + 1);
  if ((unint64_t)v11 >= *((void *)v10 + 2))
  {
    uint64_t v12 = sub_216BF7790((uint64_t *)v10, &v14, a3);
  }
  else
  {
    void *v11 = a2;
    uint64_t v12 = (uint64_t)(v11 + 3);
    sub_2168EDFA8(v11 + 1, a3);
  }
  *((void *)v10 + 1) = v12;
  pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantFieldNames(*a1, a4);
  return pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantAttributeNames(*a1, a5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantFieldNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 24);
  if (*(void *)(a1 + 40)) {
    return sub_216BF7598(v3, *(void **)a2, (void *)(a2 + 8));
  }
  else {
    return sub_2168A6B2C(v3, a2);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantAttributeNames(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 48);
  if (*(void *)(a1 + 64)) {
    return sub_216BF7598(v3, *(void **)a2, (void *)(a2 + 8));
  }
  else {
    return sub_2168A6B2C(v3, a2);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AppendDependencyData(uint64_t *result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t **)result;
    __n128 result = (uint64_t *)*result;
    if (result)
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[1];
      if ((void *)*v2 != v6)
      {
        do
        {
          uint64_t v7 = *v4;
          unint64_t v8 = (void *)(*v4)[1];
          if ((unint64_t)v8 >= (*v4)[2])
          {
            uint64_t v9 = sub_216BF7930(*v4, v5);
          }
          else
          {
            *unint64_t v8 = *v5;
            uint64_t v9 = (uint64_t)(v8 + 3);
            sub_2168EDFA8(v8 + 1, v5 + 1);
          }
          v7[1] = v9;
          v5 += 3;
        }
        while (v5 != v6);
        __n128 result = *v4;
        uint64_t v2 = *a2;
      }
      pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantFieldNames((uint64_t)result, (uint64_t)(v2 + 3));
      uint64_t v10 = *v4;
      uint64_t v11 = (uint64_t)(*a2 + 6);
      return pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::_Data::_AddRelevantAttributeNames((uint64_t)v10, v11);
    }
    else
    {
      *uint64_t v4 = v2;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanFieldChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v5 = *(void **)(v4 + 32);
    if (v5)
    {
      unint64_t v9 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        unint64_t v10 = v5[4] & 0xFFFFFFFFFFFFFFF8;
        if (v9 >= v10) {
          break;
        }
LABEL_7:
        uint64_t v5 = (void *)*v5;
        if (!v5) {
          return 0;
        }
      }
      if (v10 < v9)
      {
        ++v5;
        goto LABEL_7;
      }
      uint64_t v12 = *(uint64_t **)v4;
      uint64_t v13 = *(uint64_t **)(v4 + 8);
      if (*(uint64_t **)v4 != v13)
      {
        do
        {
          uint64_t v14 = *v12;
          if (!*v12)
          {
            v15[0] = "pcp/dynamicFileFormatDependencyData.cpp";
            v15[1] = "CanFieldChangeAffectFileFormatArguments";
            v15[2] = 106;
            v15[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanFieldChangeAffectFile"
                     "FormatArguments(const TfToken &, const VtValue &, const VtValue &) const";
            char v16 = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "contextData.first", 0))goto LABEL_13; {
            uint64_t v14 = *v12;
            }
          }
          if ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *, const pxrInternal__aapl__pxrReserved__::VtValue *, uint64_t *))(*(void *)v14 + 24))(v14, a2, a3, a4, v12 + 1))return 1; {
LABEL_13:
          }
          v12 += 3;
        }
        while (v12 != v13);
      }
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanAttributeDefaultValueChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v5 = *(void **)(v4 + 56);
    if (v5)
    {
      unint64_t v9 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        unint64_t v10 = v5[4] & 0xFFFFFFFFFFFFFFF8;
        if (v9 >= v10) {
          break;
        }
LABEL_7:
        uint64_t v5 = (void *)*v5;
        if (!v5) {
          return 0;
        }
      }
      if (v10 < v9)
      {
        ++v5;
        goto LABEL_7;
      }
      uint64_t v12 = *(uint64_t **)v4;
      uint64_t v13 = *(uint64_t **)(v4 + 8);
      if (*(uint64_t **)v4 != v13)
      {
        do
        {
          uint64_t v14 = *v12;
          if (!*v12)
          {
            v15[0] = "pcp/dynamicFileFormatDependencyData.cpp";
            v15[1] = "CanAttributeDefaultValueChangeAffectFileFormatArguments";
            v15[2] = 140;
            v15[3] = "BOOL pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::CanAttributeDefaultValue"
                     "ChangeAffectFileFormatArguments(const TfToken &, const VtValue &, const VtValue &) const";
            char v16 = 0;
            if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "contextData.first", 0))goto LABEL_13; {
            uint64_t v14 = *v12;
            }
          }
          if ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *, const pxrInternal__aapl__pxrReserved__::VtValue *, uint64_t *))(*(void *)v14 + 32))(v14, a2, a3, a4, v12 + 1))return 1; {
LABEL_13:
          }
          v12 += 3;
        }
        while (v12 != v13);
      }
    }
  }
  return 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantFieldNames(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91460, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = this;
    int v2 = __cxa_guard_acquire(&qword_267B91460);
    this = v3;
    if (v2)
    {
      qword_267B91458 = 0;
      qword_267B91450 = 0;
      qword_267B91448 = (uint64_t)&qword_267B91450;
      __cxa_atexit((void (*)(void *))sub_216BF74B0, &qword_267B91448, &dword_216758000);
      __cxa_guard_release(&qword_267B91460);
      this = v3;
    }
  }
  if (*(void *)this) {
    return (uint64_t *)(*(void *)this + 24);
  }
  else {
    return &qword_267B91448;
  }
}

uint64_t sub_216BF74B0(uint64_t a1)
{
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::GetRelevantAttributeNames(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91480, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = this;
    int v2 = __cxa_guard_acquire(&qword_267B91480);
    this = v3;
    if (v2)
    {
      qword_267B91478 = 0;
      qword_267B91470 = 0;
      qword_267B91468 = (uint64_t)&qword_267B91470;
      __cxa_atexit((void (*)(void *))sub_216BF74B0, &qword_267B91468, &dword_216758000);
      __cxa_guard_release(&qword_267B91480);
      this = v3;
    }
  }
  if (*(void *)this) {
    return (uint64_t *)(*(void *)this + 48);
  }
  else {
    return &qword_267B91468;
  }
}

uint64_t *sub_216BF7598(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_21697C15C(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *sub_216BF7624(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216782E84(result, a4);
    __n128 result = (void *)sub_216BF76AC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216BF768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216932280(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216BF76AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      sub_2168EE4C4((void *)(a4 + v7 + 8), (void *)(a2 + v7 + 8));
      v7 += 24;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216BF7714(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_2168EE084(v4 + v2);
      v2 -= 24;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216BF7738(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216BF7598(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_216BF7778(_Unwind_Exception *a1)
{
  sub_2168CB05C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216BF7790(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  void v16[4] = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216782ED8(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[24 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v16[3] = &v12[24 * v11];
  *(void *)uint64_t v13 = *a2;
  sub_2168EDFA8((void *)v13 + 1, a3);
  v16[2] = v13 + 24;
  sub_216BF789C(a1, v16);
  uint64_t v14 = a1[1];
  sub_2169324A4((uint64_t)v16);
  return v14;
}

void sub_216BF7888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169324A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216BF789C(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    uint64_t v7 = *(void *)(v4 - 24);
    v4 -= 24;
    *(void *)(v6 - 24) = v7;
    v6 -= 24;
    __n128 result = sub_2168EDFA8((void *)(v6 + 8), (void *)(v4 + 8));
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216BF7930(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(void *)unint64_t v11 = *a2;
  sub_2168EDFA8((void *)v11 + 1, a2 + 1);
  v14[2] = v11 + 24;
  sub_216BF789C(a1, v14);
  uint64_t v12 = a1[1];
  sub_2169324A4((uint64_t)v14);
  return v12;
}

void sub_216BF7A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169324A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface::CanFieldChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface::CanAttributeDefaultValueChangeAffectFileFormatArguments(pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  return 1;
}

void sub_216BF7A54()
{
  sub_216779094(v3, "PcpErrorType_ArcCycle");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_ArcPermissionDenied");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_IndexCapacityExceeded");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_ArcCapacityExceeded");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_ArcNamespaceDepthCapacityExceeded");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InconsistentPropertyType");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InconsistentAttributeType");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InconsistentAttributeVariability");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InternalAssetPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidPrimPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidAssetPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidInstanceTargetPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidExternalTargetPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 12, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidTargetPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 13, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidReferenceOffset");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 14, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidSublayerOffset");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 15, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidSublayerOwnership");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 16, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidSublayerPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 17, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_InvalidVariantSelection");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 18, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_OpinionAtRelocationSource");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 20, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_PrimPermissionDenied");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 21, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_PropertyPermissionDenied");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 22, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_SublayerCycle");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 23, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_TargetPermissionDenied");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 24, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_UnresolvedPrimPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 25, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpErrorType_VariableExpressionError");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75CA20, 26, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216BF8298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorBase::PcpErrorBase(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C75C378;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(pxrInternal__aapl__pxrReserved__::PcpErrorBase *this)
{
  *(void *)this = &unk_26C75C378;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 25);
  sub_21697C414((_DWORD *)this + 24);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)((char *)this + 72));
  char v4 = (void **)((char *)this + 48);
  sub_216787968(&v4);
  uint64_t v2 = (atomic_uint *)*((void *)this + 5);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 3);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x80uLL);
  *(void *)uint64_t v3 = &unk_26C75C378;
  v3[2] = 0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 4));
  *(void *)uint64_t v3 = &unk_26C75C3A0;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 15) = 0;
  *((void *)v3 + 13) = 0;

  return sub_216BFDADC(a1, (uint64_t)v3);
}

void sub_216BF84FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::PcpErrorArcCycle(pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *)((char *)this + 16));
  *(void *)this = &unk_26C75C3A0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  return this;
}

{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *)((char *)this + 16));
  *(void *)this = &unk_26C75C3A0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::~PcpErrorArcCycle(pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *this)
{
  *(void *)this = &unk_26C75C3A0;
  uint64_t v2 = (void **)((char *)this + 104);
  sub_216BFDBEC(&v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void **v2;

  *(void *)this = &unk_26C75C3A0;
  uint64_t v2 = (void **)((char *)this + 104);
  sub_216BFDBEC(&v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26C75C3A0;
  uint64_t v3 = (void **)((char *)this + 104);
  sub_216BFDBEC(&v3);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle *this@<X0>, std::string *a2@<X8>)
{
  if (*((void *)this + 13) == *((void *)this + 14))
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    sub_216779094(a2, "Cycle detected:\n");
    uint64_t v4 = *((void *)this + 13);
    uint64_t v5 = *((void *)this + 14) - v4;
    if (v5)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 5);
      while (!v6)
      {
LABEL_12:
        sub_216BF8938((uint64_t *)(v4 + 96 * v6));
        if (v18 >= 0) {
          uint64_t v13 = &v17;
        }
        else {
          uint64_t v13 = v17;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\n", v11, v12, v13);
        if ((v20 & 0x80u) == 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        if ((v20 & 0x80u) == 0) {
          std::string::size_type v15 = v20;
        }
        else {
          std::string::size_type v15 = (std::string::size_type)__p[1];
        }
        std::string::append(a2, (const std::string::value_type *)v14, v15);
        if ((char)v20 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17);
        }
        uint64_t v4 = *((void *)this + 13);
        uint64_t v16 = *((void *)this + 14);
        if (v6)
        {
          if (++v6 < 0xAAAAAAAAAAAAAAABLL * ((v16 - v4) >> 5))
          {
            std::string::append(a2, "which ");
            uint64_t v4 = *((void *)this + 13);
            uint64_t v16 = *((void *)this + 14);
          }
        }
        else
        {
          unint64_t v6 = 1;
        }
        unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v4) >> 5);
        if (v6 >= v7) {
          return;
        }
      }
      if (v6 + 1 >= v7)
      {
        std::string::append(a2, "CANNOT ");
        unsigned int v8 = *(_DWORD *)(v4 + 96 * v6 + 88) - 1;
        unint64_t v9 = "refer to:\n";
        if (v8 <= 4)
        {
          uint64_t v10 = off_264294530;
          goto LABEL_10;
        }
      }
      else
      {
        unsigned int v8 = *(_DWORD *)(v4 + 96 * v6 + 88) - 1;
        unint64_t v9 = "refers to:\n";
        if (v8 < 5)
        {
          uint64_t v10 = off_264294508;
LABEL_10:
          unint64_t v9 = v10[v8];
        }
      }
      std::string::append(a2, v9);
      goto LABEL_12;
    }
  }
}

void sub_216BF88E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BF8938(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216BF8A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)operator new(0x120uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::PcpErrorArcPermissionDenied(v3);

  return sub_216BFDD58(a1, (uint64_t)v3);
}

void sub_216BF8AC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::PcpErrorArcPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 1;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 16));
  *(void *)this = &unk_26C75C3C8;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 192));
  return this;
}

void sub_216BF8B68(_Unwind_Exception *a1)
{
  sub_216BD8084(v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::~PcpErrorArcPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *this)
{
  *(void *)this = &unk_26C75C3C8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 69);
  sub_21697C414((_DWORD *)this + 68);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 248));
  unint64_t v6 = (void **)((char *)this + 224);
  sub_216787968(&v6);
  uint64_t v2 = (atomic_uint *)*((void *)this + 27);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 25);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_21697C414((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *)((char *)this + 160));
  unint64_t v6 = (void **)((char *)this + 136);
  sub_216787968(&v6);
  char v4 = (atomic_uint *)*((void *)this + 16);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (atomic_uint *)*((void *)this + 14);
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::~PcpErrorArcPermissionDenied(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied *this@<X0>, std::string *a2@<X8>)
{
  sub_216BF8938((uint64_t *)this + 13);
  if ((v17 & 0x80u) == 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\nCANNOT ", v4, v5, v6);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v7 = *((_DWORD *)this + 70) - 1;
  if (v7 >= 5) {
    unsigned int v8 = "refer to:\n";
  }
  else {
    unsigned int v8 = off_264294530[v7];
  }
  std::string::append(a2, v8);
  sub_216BF8938((uint64_t *)this + 24);
  if (v15 >= 0) {
    unint64_t v11 = &v14;
  }
  else {
    unint64_t v11 = v14;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\nwhich is private.", v9, v10, v11);
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v12, v13);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
}

void sub_216BF8E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::New@<X0>(int a1@<W0>, void *a2@<X8>)
{
  char v4 = operator new(0x68uLL);
  *(void *)char v4 = &unk_26C75C378;
  v4[2] = a1;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v4 + 4));
  *(void *)char v4 = &unk_26C75C3F0;

  return sub_216BFDE68(a2, (uint64_t)v4);
}

void sub_216BF8F74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::PcpErrorCapacityExceeded(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C75C378;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(void *)a1 = &unk_26C75C3F0;
  return a1;
}

{
  *(void *)a1 = &unk_26C75C378;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(void *)a1 = &unk_26C75C3F0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::~PcpErrorCapacityExceeded(pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded *this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorCapacityExceeded *this@<X0>, std::string *a2@<X8>)
{
  sub_216779094(&v9, "Composition graph capacity exceeded: ");
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75CA20, *((unsigned int *)this + 2), (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    char v4 = __p;
  }
  else {
    char v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  unint64_t v6 = std::string::append(&v9, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_216BF9134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C75C378;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(void *)a1 = &unk_26C75C418;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 128));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 132));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 160));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 164));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase *this)
{
  *(void *)this = &unk_26C75C418;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 41);
  sub_21697C414((_DWORD *)this + 40);
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 33);
  sub_21697C414((_DWORD *)this + 32);
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0xB0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)v3, 5);
  void *v3 = &unk_26C75C440;

  return sub_216BFDF78(a1, (uint64_t)v3);
}

void sub_216BF9314(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::PcpErrorInconsistentPropertyType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 5);
  *__n128 result = &unk_26C75C440;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 5);
  *__n128 result = &unk_26C75C440;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::~PcpErrorInconsistentPropertyType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *this)
{
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *)((char *)this + 96));
  uint64_t v3 = String;
  char v4 = (void *)((char *)this + 104);
  if (*((char *)this + 127) < 0) {
    char v4 = (void *)*v4;
  }
  int v5 = *((char *)String + 23);
  uint64_t v6 = *String;
  unsigned int v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *)((char *)this + 128));
  unsigned __int8 v8 = (void *)((char *)this + 136);
  if (*((char *)this + 159) < 0) {
    unsigned __int8 v8 = (void *)*v8;
  }
  if (*((_DWORD *)this + 42) == 1) {
    std::string v9 = "an attribute";
  }
  else {
    std::string v9 = "a relationship";
  }
  if (*((char *)v7 + 23) >= 0) {
    uint64_t v10 = (uint64_t)v7;
  }
  else {
    uint64_t v10 = *v7;
  }
  if (v5 < 0) {
    uint64_t v3 = (uint64_t *)v6;
  }
  unint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType *)((char *)this + 160));
  if (*((char *)v11 + 23) >= 0) {
    uint64_t v14 = (uint64_t)v11;
  }
  else {
    uint64_t v14 = *v11;
  }
  if (*((_DWORD *)this + 43) == 1) {
    char v15 = "an attribute";
  }
  else {
    char v15 = "a relationship";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The property <%s> has inconsistent spec types.  The defining spec is @%s@<%s> and is %s spec.  The conflicting spec is @%s@<%s> and is %s spec.  The conflicting spec will be ignored.", v12, v13, v3, v4, v10, v9, v8, v14, v15);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)v3, 6);
  void *v3 = &unk_26C75C468;
  v3[21] = 0;
  v3[22] = 0;

  return sub_216BFE088(a1, (uint64_t)v3);
}

void sub_216BF9534(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::PcpErrorInconsistentAttributeType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 6);
  *__n128 result = &unk_26C75C468;
  result[21] = 0;
  result[22] = 0;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 6);
  *__n128 result = &unk_26C75C468;
  result[21] = 0;
  result[22] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::~PcpErrorInconsistentAttributeType(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *this)
{
  *(void *)this = &unk_26C75C468;
  uint64_t v1 = *((void *)this + 22);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v2 = *((void *)this + 21);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::~PcpErrorInconsistentAttributeType(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *this)
{
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *)((char *)this + 96));
  uint64_t v3 = String;
  char v4 = (void *)((char *)this + 104);
  if (*((char *)this + 127) < 0) {
    char v4 = (void *)*v4;
  }
  int v5 = *((char *)String + 23);
  uint64_t v6 = *String;
  unsigned int v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *)((char *)this + 128));
  unsigned __int8 v8 = v7;
  unint64_t v9 = *((void *)this + 21) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
  {
    uint64_t v10 = (const char *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0) {
      uint64_t v10 = *(const char **)v10;
    }
  }
  else
  {
    uint64_t v10 = "";
  }
  unint64_t v11 = (void *)((char *)this + 136);
  if (*((char *)this + 159) < 0) {
    unint64_t v11 = (void *)*v11;
  }
  int v12 = *((char *)v7 + 23);
  uint64_t v13 = *v7;
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType *)((char *)this + 160));
  unint64_t v17 = *((void *)this + 22) & 0xFFFFFFFFFFFFFFF8;
  if (v17)
  {
    char v18 = (const char *)(v17 + 16);
    if (*(char *)(v17 + 39) < 0) {
      char v18 = *(const char **)v18;
    }
  }
  else
  {
    char v18 = "";
  }
  if (*((char *)v14 + 23) >= 0) {
    uint64_t v19 = (uint64_t)v14;
  }
  else {
    uint64_t v19 = *v14;
  }
  if (v12 >= 0) {
    uint64_t v20 = (uint64_t)v8;
  }
  else {
    uint64_t v20 = v13;
  }
  if (v5 >= 0) {
    uint64_t v21 = (uint64_t)v3;
  }
  else {
    uint64_t v21 = v6;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The attribute <%s> has specs with inconsistent value types.  The defining spec is @%s@<%s> with value type '%s'.  The conflicting spec is @%s@<%s> with value type '%s'.  The conflicting spec will be ignored.", v15, v16, v21, v4, v20, v10, v11, v19, v18);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0xB0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)v3, 7);
  void *v3 = &unk_26C75C490;

  return sub_216BFE198(a1, (uint64_t)v3);
}

void sub_216BF97D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::PcpErrorInconsistentAttributeVariability(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 7);
  *__n128 result = &unk_26C75C490;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::PcpErrorInconsistentPropertyBase((uint64_t)this, 7);
  *__n128 result = &unk_26C75C490;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::~PcpErrorInconsistentAttributeVariability(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyBase::~PcpErrorInconsistentPropertyBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *this)
{
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *)((char *)this + 96));
  if (*((char *)String + 23) >= 0) {
    uint64_t v3 = (uint64_t)String;
  }
  else {
    uint64_t v3 = *String;
  }
  char v4 = (void *)((char *)this + 104);
  if (*((char *)this + 127) < 0) {
    char v4 = (void *)*v4;
  }
  int v5 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *)((char *)this + 128));
  if (*((char *)v5 + 23) >= 0) {
    uint64_t v6 = (uint64_t)v5;
  }
  else {
    uint64_t v6 = *v5;
  }
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, *((unsigned int *)this + 42), (uint64_t)v18);
  if (v19 >= 0) {
    unsigned int v7 = v18;
  }
  else {
    unsigned int v7 = (void **)v18[0];
  }
  unsigned __int8 v8 = (void *)((char *)this + 136);
  if (*((char *)this + 159) < 0) {
    unsigned __int8 v8 = (void *)*v8;
  }
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability *)((char *)this + 160));
  int v10 = *((char *)v9 + 23);
  uint64_t v11 = *v9;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, *((unsigned int *)this + 43), (uint64_t)__p);
  if (v10 >= 0) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = (uint64_t *)v11;
  }
  if (v17 >= 0) {
    char v15 = __p;
  }
  else {
    char v15 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The attribute <%s> has specs with inconsistent variability.  The defining spec is @%s@<%s> with variability '%s'.  The conflicting spec is @%s@<%s> with variability '%s'.  The conflicting variability will be ignored.", v12, v13, v3, v4, v6, v7, v8, v14, v15);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_216BF99CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)operator new(0xE0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::PcpErrorInvalidPrimPath(v3);

  return sub_216BFE2A8(a1, (uint64_t)v3);
}

void sub_216BF9A4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::PcpErrorInvalidPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 9;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 16));
  *(void *)this = &unk_26C75C4B8;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 49);
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  return this;
}

void sub_216BF9AF4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::~PcpErrorInvalidPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *this)
{
  *(void *)this = &unk_26C75C4B8;
  uint64_t v2 = (atomic_uint *)*((void *)this + 26);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 49);
  sub_21697C414((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_21697C414((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 160));
  int v5 = (void **)((char *)this + 136);
  sub_216787968(&v5);
  uint64_t v3 = (atomic_uint *)*((void *)this + 16);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  char v4 = (atomic_uint *)*((void *)this + 14);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::~PcpErrorInvalidPrimPath(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *this)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)this + 54), (uint64_t)v18);
  if (v19 >= 0) {
    uint64_t v2 = v18;
  }
  else {
    uint64_t v2 = (void **)v18[0];
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath *)((char *)this + 192));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v9, (char *)this + 200, (char *)this + 184);
  sub_216BF8938(&v9);
  if (v17 >= 0) {
    uint64_t v6 = (void **)&v16;
  }
  else {
    uint64_t v6 = v16;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid %s path <%s> introduced by %s-- must be an absolute prim path with no variant selections.", v4, v5, v2, Text, v6);
  if (v17 < 0) {
    operator delete(v16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v13);
  uint64_t v20 = (void **)&v12;
  sub_216787968(&v20);
  uint64_t v7 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_216BF9E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 - 65) < 0) {
    operator delete(*(void **)(v5 - 88));
  }
  sub_216BD8084((uint64_t)va);
  if (*(char *)(v5 - 41) < 0) {
    operator delete(*(void **)(v5 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C75C378;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(void *)a1 = &unk_26C75C4E0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 192));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 196));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return a1;
}

void sub_216BF9EEC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::~PcpErrorInvalidAssetPathBase(void **this)
{
  *this = &unk_26C75C4E0;
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  uint64_t v2 = (atomic_uint *)this[32];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 49);
  sub_21697C414((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_21697C414((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(this + 20));
  uint64_t v5 = this + 17;
  sub_216787968(&v5);
  uint64_t v3 = (atomic_uint *)this[16];
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  char v4 = (atomic_uint *)this[14];
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)this);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)v3, 10);
  void *v3 = &unk_26C75C508;

  return sub_216BFE3B8(a1, (uint64_t)v3);
}

void sub_216BFA0EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::PcpErrorInvalidAssetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 10);
  *__n128 result = &unk_26C75C508;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 10);
  *__n128 result = &unk_26C75C508;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::~PcpErrorInvalidAssetPath(void **this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::~PcpErrorInvalidAssetPathBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath *this)
{
  uint64_t v2 = (void *)((char *)this + 224);
  if (*((char *)this + 247) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = v20;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)this + 66), (uint64_t)v20);
  if (v21 < 0) {
    uint64_t v3 = (void **)v20[0];
  }
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v11, (char *)this + 248, (char *)this + 184);
  sub_216BF8938(&v11);
  if (v19 >= 0) {
    uint64_t v6 = (void **)&v18;
  }
  else {
    uint64_t v6 = v18;
  }
  if (*((char *)this + 295) < 0)
  {
    uint64_t v8 = " -- ";
    uint64_t v7 = (char *)*((void *)this + 34);
    if (!*((void *)this + 35)) {
      uint64_t v8 = "";
    }
  }
  else
  {
    uint64_t v7 = (char *)this + 272;
    if (*((unsigned char *)this + 295)) {
      uint64_t v8 = " -- ";
    }
    else {
      uint64_t v8 = "";
    }
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Could not open asset @%s@ for %s introduced by %s%s%s.", v4, v5, v2, v3, v6, v8, v7);
  if (v19 < 0) {
    operator delete(v18);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v15);
  uint64_t v22 = (void **)&v14;
  sub_216787968(&v22);
  uint64_t v9 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
}

void sub_216BFA374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (*(char *)(v7 - 81) < 0) {
    operator delete(*(void **)(v7 - 104));
  }
  sub_216BD8084((uint64_t)va);
  if (*(char *)(v7 - 57) < 0) {
    operator delete(*(void **)(v7 - 80));
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x128uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)v3, 19);
  void *v3 = &unk_26C75C530;

  return sub_216BFE4C8(a1, (uint64_t)v3);
}

void sub_216BFA420(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::PcpErrorMutedAssetPath(pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 19);
  *__n128 result = &unk_26C75C530;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::PcpErrorInvalidAssetPathBase((uint64_t)this, 19);
  *__n128 result = &unk_26C75C530;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::~PcpErrorMutedAssetPath(void **this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPathBase::~PcpErrorInvalidAssetPathBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath *this)
{
  uint64_t v2 = (void *)((char *)this + 224);
  if (*((char *)this + 247) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  uint64_t v3 = v18;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)this + 66), (uint64_t)v18);
  if (v19 < 0) {
    uint64_t v3 = (void **)v18[0];
  }
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v9, (char *)this + 248, (char *)this + 184);
  sub_216BF8938(&v9);
  if (v17 >= 0) {
    uint64_t v6 = (void **)&v16;
  }
  else {
    uint64_t v6 = v16;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Asset @%s@ was muted for %s introduced by %s.", v4, v5, v2, v3, v6);
  if (v17 < 0) {
    operator delete(v16);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v13);
  uint64_t v20 = (void **)&v12;
  sub_216787968(&v20);
  uint64_t v7 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_216BFA658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 - 65) < 0) {
    operator delete(*(void **)(v5 - 88));
  }
  sub_216BD8084((uint64_t)va);
  if (*(char *)(v5 - 41) < 0) {
    operator delete(*(void **)(v5 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase(uint64_t a1, int a2)
{
  *(void *)a1 = &unk_26C75C378;
  *(_DWORD *)(a1 + 8) = a2;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 16));
  *(void *)a1 = &unk_26C75C558;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 108));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 116));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 144));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 148));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase *this)
{
  *(void *)this = &unk_26C75C558;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 37);
  sub_21697C414((_DWORD *)this + 36);
  uint64_t v2 = (atomic_uint *)*((void *)this + 17);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 29);
  sub_21697C414((_DWORD *)this + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 27);
  sub_21697C414((_DWORD *)this + 26);

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)v3, 11);
  void *v3 = &unk_26C75C580;

  return sub_216BFE5D8(a1, (uint64_t)v3);
}

void sub_216BFA888(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::PcpErrorInvalidInstanceTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 11);
  *__n128 result = &unk_26C75C580;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 11);
  *__n128 result = &unk_26C75C580;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::~PcpErrorInvalidInstanceTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    v12[0] = "pcp/errors.cpp";
    v12[1] = "ToString";
    v12[2] = 488;
    void v12[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::ToString() const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    int v2 = *((_DWORD *)this + 30);
  }
  if (v2 == 1) {
    char v4 = "attribute connection";
  }
  else {
    char v4 = "relationship target";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *)((char *)this + 104));
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath *)((char *)this + 112));
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 16);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v11 = Identifier;
  }
  else {
    uint64_t v11 = *(void *)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ is authored in a class but refers to an instance of that class.  Ignoring.", v9, v10, v4, Text, v6, v11);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)operator new(0xA8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::PcpErrorInvalidExternalTargetPath(v3);

  return sub_216BFE6E8(a1, (uint64_t)v3);
}

void sub_216BFAA78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::PcpErrorInvalidExternalTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 12);
  *(void *)uint64_t v2 = &unk_26C75C5A8;
  uint64_t v3 = (_DWORD *)(v2 + 160);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v2 + 156));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3);
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::~PcpErrorInvalidExternalTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *this)
{
  *(void *)this = &unk_26C75C5A8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 40);
  sub_21697C414((_DWORD *)this + 39);

  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::~PcpErrorInvalidExternalTargetPath(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    __p[0] = "pcp/errors.cpp";
    __p[1] = "ToString";
    uint64_t v19 = 523;
    uint64_t v20 = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::ToString() const";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    int v2 = *((_DWORD *)this + 30);
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)((char *)this + 104));
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)((char *)this + 112));
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 16);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
  int v8 = *(char *)(Identifier + 23);
  uint64_t v9 = *(void *)Identifier;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)this + 38), (uint64_t)__p);
  int v10 = SHIBYTE(v19);
  uint64_t v11 = (void **)__p[0];
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath *)((char *)this + 156));
  if (v10 >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = v11;
  }
  if (v8 >= 0) {
    uint64_t v16 = Identifier;
  }
  else {
    uint64_t v16 = v9;
  }
  char v17 = "relationship target";
  if (v2 == 1) {
    char v17 = "attribute connection";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ refers to a path outside the scope of the %s from <%s>.  Ignoring.", v13, v14, v17, Text, v5, v16, v15, v12);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216BFACCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)v3, 13);
  void *v3 = &unk_26C75C5D0;

  return sub_216BFE7F8(a1, (uint64_t)v3);
}

void sub_216BFAD50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::PcpErrorInvalidTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *this)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 13);
  *__n128 result = &unk_26C75C5D0;
  return result;
}

{
  void *result;

  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 13);
  *__n128 result = &unk_26C75C5D0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::~PcpErrorInvalidTargetPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    v12[0] = "pcp/errors.cpp";
    v12[1] = "ToString";
    v12[2] = 560;
    void v12[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::ToString() const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    int v2 = *((_DWORD *)this + 30);
  }
  if (v2 == 1) {
    char v4 = "attribute connection";
  }
  else {
    char v4 = "relationship target";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *)((char *)this + 104));
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath *)((char *)this + 112));
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 16);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v11 = Identifier;
  }
  else {
    uint64_t v11 = *(void *)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ is invalid.  This may be because the path is the pre-relocated source path of a relocated prim.  Ignoring.", v9, v10, v4, Text, v6, v11);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *)operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::PcpErrorInvalidSublayerOffset(v3);

  return sub_216BFE908(a1, (uint64_t)v3);
}

void sub_216BFAF40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::PcpErrorInvalidSublayerOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 15;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *)((char *)this + 16));
  *(void *)this = &unk_26C75C5F8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)this + 17, 0.0, 1.0);
  return this;
}

void sub_216BFAFE0(_Unwind_Exception *a1)
{
  uint64_t v3 = (atomic_uint *)*((void *)v1 + 16);
  if (v3) {
    sub_217324328(v3);
  }
  sub_217324BAC((uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::~PcpErrorInvalidSublayerOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *this)
{
  *(void *)this = &unk_26C75C5F8;
  int v2 = (atomic_uint *)*((void *)this + 16);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 14);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::~PcpErrorInvalidSublayerOffset(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset *this)
{
  p_p = &__p;
  sub_216BFB1D4();
  if (v12 < 0) {
    p_p = __p;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 15);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v3);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v5 = Identifier;
  }
  else {
    uint64_t v5 = *(void *)Identifier;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 13);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
  if (*(char *)(v7 + 23) >= 0) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = *(void *)v7;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer offset %s in sublayer @%s@ of layer @%s@. Using no offset instead.", v8, v9, p_p, v5, v10);
  if (v12 < 0) {
    operator delete(__p);
  }
}

void sub_216BFB1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BFB1D4()
{
  sub_21677B834((uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::operator<<(v1);
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_216BFB308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::PcpErrorInvalidReferenceOffset(v3);

  return sub_216BFEA18(a1, (uint64_t)v3);
}

void sub_216BFB364(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::PcpErrorInvalidReferenceOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 14;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *)((char *)this + 16));
  *(void *)this = &unk_26C75C620;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 31);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 39);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)this + 20, 0.0, 1.0);
  return this;
}

void sub_216BFB450(_Unwind_Exception *a1)
{
  sub_21697B754(v3);
  if (v1[151] < 0) {
    operator delete(*v4);
  }
  sub_217324BF0(v2, (uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::~PcpErrorInvalidReferenceOffset(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *this)
{
  *(void *)this = &unk_26C75C620;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 39);
  sub_21697C414((_DWORD *)this + 38);
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 31);
  sub_21697C414((_DWORD *)this + 30);
  char v2 = (atomic_uint *)*((void *)this + 14);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::~PcpErrorInvalidReferenceOffset(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *this)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)this + 44), (uint64_t)v22);
  if (v23 >= 0) {
    char v2 = v22;
  }
  else {
    char v2 = (void **)v22[0];
  }
  sub_216BFB1D4();
  if (v21 >= 0) {
    uint64_t v3 = (void **)&v20;
  }
  else {
    uint64_t v3 = v20;
  }
  char v4 = (void *)((char *)this + 128);
  if (*((char *)this + 151) < 0) {
    char v4 = (void *)*v4;
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset *)((char *)this + 152));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v11, (char *)this + 104, (char *)this + 120);
  sub_216BF8938(&v11);
  if (v19 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid %s offset %s for @%s@<%s> introduced by %s. Using no offset instead.", v6, v7, v2, v3, v4, Text, p_p);
  if (v19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v15);
  int v24 = (void **)&v14;
  sub_216787968(&v24);
  uint64_t v9 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_216BFB74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_216BD8084((uint64_t)&a14);
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *(void *)uint64_t v3 = &unk_26C75C378;
  *((_DWORD *)v3 + 2) = 16;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 16));
  *(void *)uint64_t v3 = &unk_26C75C648;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;

  return sub_216BFEB28(a1, (uint64_t)v3);
}

void sub_216BFB84C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::PcpErrorInvalidSublayerOwnership(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 16;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *)((char *)this + 16));
  *(void *)this = &unk_26C75C648;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 16;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *)((char *)this + 16));
  *(void *)this = &unk_26C75C648;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::~PcpErrorInvalidSublayerOwnership(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *this)
{
  *(void *)this = &unk_26C75C648;
  uint64_t v3 = (void **)((char *)this + 144);
  sub_216850BF4(&v3);
  char v2 = (atomic_uint *)*((void *)this + 17);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::~PcpErrorInvalidSublayerOwnership(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership *this, uint64_t a2, char *a3)
{
  v33[2] = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  for (long long i = *((_OWORD *)this + 9); (void)i != *((void *)&i + 1); sub_216BFBDB4(&i))
  {
    char v4 = (uint64_t *)sub_216BFBD34((uint64_t *)&i, a2, a3);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v4);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v25, "@");
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
    v33[0] = v6->__r_.__value_.__l.__size_;
    *(void *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = v28;
    if ((unint64_t)v28 >= v29)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (char *)v27) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v29 - (void)v27) >> 3) > v13) {
        unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v29 - (void)v27) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v27) >> 3) >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v13;
      }
      uint64_t v32 = &v29;
      if (v14) {
        uint64_t v15 = (char *)sub_216782ED8((uint64_t)&v29, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      std::string::size_type v16 = (std::string::size_type)&v15[24 * v12];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      __p.__r_.__value_.__l.__size_ = v16;
      uint64_t v31 = &v15[24 * v14];
      uint64_t v17 = v33[0];
      *(void *)std::string::size_type v16 = v7;
      *(void *)(v16 + 8) = v17;
      *(void *)(v16 + 15) = *(void *)((char *)v33 + 7);
      *(unsigned char *)(v16 + 23) = v8;
      __p.__r_.__value_.__r.__words[2] = v16 + 24;
      sub_216790CCC((uint64_t *)&v27, &__p);
      uint64_t v11 = v28;
      sub_216790E64((uint64_t)&__p);
    }
    else
    {
      uint64_t v10 = v33[0];
      *(void *)uint64_t v28 = v7;
      *((void *)v9 + 1) = v10;
      *(void *)(v9 + 15) = *(void *)((char *)v33 + 7);
      v9[23] = v8;
      uint64_t v11 = v9 + 24;
    }
    uint64_t v28 = v11;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  char v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 16);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v20 = Identifier;
  }
  else {
    uint64_t v20 = *(void *)Identifier;
  }
  char v21 = (void *)((char *)this + 104);
  if (*((char *)this + 127) < 0) {
    char v21 = (void *)*v21;
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", &v27, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The following sublayers for layer @%s@ have the same owner '%s': %s", v22, v23, v20, v21, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_216782F20((void ***)&__p);
}

void sub_216BFBCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  a14 = &a22;
  sub_216782F20((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216BFBD34(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = const std::vector<pxrInternal__aapl"
            "__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216BFBDAC()
{
}

void *sub_216BFBDB4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = const std::vector<px"
            "rInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0xA8uLL);
  *(void *)uint64_t v3 = &unk_26C75C378;
  *((_DWORD *)v3 + 2) = 17;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 16));
  *(void *)uint64_t v3 = &unk_26C75C670;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;

  return sub_216BFEC38(a1, (uint64_t)v3);
}

void sub_216BFBED4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::PcpErrorInvalidSublayerPath(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 17;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *)((char *)this + 16));
  *(void *)this = &unk_26C75C670;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 17;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *)((char *)this + 16));
  *(void *)this = &unk_26C75C670;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::~PcpErrorInvalidSublayerPath(void **this)
{
  *this = &unk_26C75C670;
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  char v2 = (atomic_uint *)this[14];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::~PcpErrorInvalidSublayerPath(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath *this)
{
  char v2 = (void *)((char *)this + 120);
  if (*((char *)this + 143) < 0) {
    char v2 = (void *)*v2;
  }
  uint64_t v3 = sub_21697CF14((void *)this + 13);
  if (v4 & 1 | (unint64_t)v3)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 13);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
    if (*(char *)(Identifier + 23) >= 0) {
      char v8 = (const char *)Identifier;
    }
    else {
      char v8 = *(const char **)Identifier;
    }
  }
  else
  {
    char v8 = "<NULL>";
  }
  if (*((char *)this + 167) < 0)
  {
    uint64_t v10 = " -- ";
    uint64_t v9 = (char *)*((void *)this + 18);
    if (!*((void *)this + 19)) {
      uint64_t v10 = "";
    }
  }
  else
  {
    uint64_t v9 = (char *)this + 144;
    if (*((unsigned char *)this + 167)) {
      uint64_t v10 = " -- ";
    }
    else {
      uint64_t v10 = "";
    }
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Could not load sublayer @%s@ of layer @%s@%s%s; skipping.",
    v4,
    v5,
    v2,
    v8,
    v10,
    v9);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *)operator new(0x80uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::PcpErrorOpinionAtRelocationSource(v3);

  return sub_216BFED48(a1, (uint64_t)v3);
}

void sub_216BFC1EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::PcpErrorOpinionAtRelocationSource(pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 20;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *)((char *)this + 16));
  *(void *)this = &unk_26C75C698;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 31);
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::~PcpErrorOpinionAtRelocationSource(pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *this)
{
  *(void *)this = &unk_26C75C698;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 31);
  sub_21697C414((_DWORD *)this + 30);
  char v2 = (atomic_uint *)*((void *)this + 14);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::~PcpErrorOpinionAtRelocationSource(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *this)
{
  char v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 13);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v4 = Identifier;
  }
  else {
    uint64_t v4 = *(void *)Identifier;
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource *)((char *)this + 120));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The layer @%s@ has an invalid opinion at the relocation source path <%s>, which will be ignored.", v6, v7, v4, Text);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)operator new(0x118uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::PcpErrorPrimPermissionDenied(v3);

  return sub_216BFEE58(a1, (uint64_t)v3);
}

void sub_216BFC40C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::PcpErrorPrimPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 21;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 16));
  *(void *)this = &unk_26C75C6C0;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 192));
  return this;
}

void sub_216BFC4AC(_Unwind_Exception *a1)
{
  sub_216BD8084(v2);
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::~PcpErrorPrimPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *this)
{
  *(void *)this = &unk_26C75C6C0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 69);
  sub_21697C414((_DWORD *)this + 68);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 248));
  char v6 = (void **)((char *)this + 224);
  sub_216787968(&v6);
  uint64_t v2 = (atomic_uint *)*((void *)this + 27);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 25);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_21697C414((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *)((char *)this + 160));
  char v6 = (void **)((char *)this + 136);
  sub_216787968(&v6);
  uint64_t v4 = (atomic_uint *)*((void *)this + 16);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (atomic_uint *)*((void *)this + 14);
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::~PcpErrorPrimPermissionDenied(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied *this)
{
  sub_216BF8938((uint64_t *)this + 13);
  sub_216BF8938((uint64_t *)this + 24);
  if (v9 >= 0) {
    uint64_t v4 = &v8;
  }
  else {
    uint64_t v4 = v8;
  }
  if (v7 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s\nwill be ignored because:\n%s\nis private and overrides its opinions.", v2, v3, v4, p_p);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
}

void sub_216BFC750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *)operator new(0x90uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::PcpErrorPropertyPermissionDenied(v3);

  return sub_216BFEF68(a1, (uint64_t)v3);
}

void sub_216BFC7CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::PcpErrorPropertyPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 22;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *)((char *)this + 16));
  *(void *)this = &unk_26C75C6E8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 27);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::~PcpErrorPropertyPermissionDenied(void **this)
{
  *this = &unk_26C75C6E8;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 27);
  sub_21697C414((_DWORD *)this + 26);

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase((pxrInternal__aapl__pxrReserved__::PcpErrorBase *)this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::~PcpErrorPropertyPermissionDenied(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *this)
{
  uint64_t v1 = (void *)((char *)this + 120);
  if (*((char *)this + 143) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  if (*((_DWORD *)this + 28) == 1) {
    uint64_t v2 = "an attribute";
  }
  else {
    uint64_t v2 = "a relationship";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied *)((char *)this + 104));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The layer at @%s@ has an illegal opinion about %s <%s> which is private across a reference, inherit, or variant.  Ignoring.", v4, v5, v1, v2, Text);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x88uLL);
  *(void *)uint64_t v3 = &unk_26C75C378;
  *((_DWORD *)v3 + 2) = 23;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(v3 + 16));
  *(void *)uint64_t v3 = &unk_26C75C710;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;

  return sub_216BFF078(a1, (uint64_t)v3);
}

void sub_216BFCA24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::PcpErrorSublayerCycle(pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 23;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *)((char *)this + 16));
  *(void *)this = &unk_26C75C710;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return this;
}

{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 23;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *)((char *)this + 16));
  *(void *)this = &unk_26C75C710;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::~PcpErrorSublayerCycle(pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *this)
{
  *(void *)this = &unk_26C75C710;
  uint64_t v2 = (atomic_uint *)*((void *)this + 16);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 14);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::~PcpErrorSublayerCycle(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 13);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v4 = Identifier;
  }
  else {
    uint64_t v4 = *(void *)Identifier;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 15);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v5);
  if (*(char *)(v6 + 23) >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = *(void *)v6;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Sublayer hierarchy with root layer @%s@ has cycles. Detected when layer @%s@ was seen in the layer stack for the second time.", v7, v8, v4, v9);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x98uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)v3, 24);
  void *v3 = &unk_26C75C738;

  return sub_216BFF188(a1, (uint64_t)v3);
}

void sub_216BFCD0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::PcpErrorTargetPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *this)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 24);
  *uint64_t result = &unk_26C75C738;
  return result;
}

{
  void *result;

  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::PcpErrorTargetPathBase((uint64_t)this, 24);
  *uint64_t result = &unk_26C75C738;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::~PcpErrorTargetPermissionDenied(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *this)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorTargetPathBase::~PcpErrorTargetPathBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2 != 1 && v2 != 8)
  {
    v13[0] = "pcp/errors.cpp";
    v13[1] = "ToString";
    v13[2] = 835;
    void v13[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::ToString() const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "ownerSpecType == SdfSpecTypeAttribute || ownerSpecType == SdfSpecTypeRelationship", 0);
    int v2 = *((_DWORD *)this + 30);
  }
  if (v2 == 1) {
    uint64_t v4 = "attribute connection";
  }
  else {
    uint64_t v4 = "relationship target";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *)((char *)this + 104));
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied *)((char *)this + 112));
  char v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 16);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v11 = Identifier;
  }
  else {
    uint64_t v11 = *(void *)Identifier;
  }
  if (*((_DWORD *)this + 30) == 1) {
    unint64_t v12 = "connection";
  }
  else {
    unint64_t v12 = "target";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s <%s> from <%s> in layer @%s@ targets an object that is private on the far side of a reference or inherit.  This %s will be ignored.", v9, v10, v4, Text, v6, v11, v12);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)operator new(0xF0uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::PcpErrorUnresolvedPrimPath(v3);

  return sub_216BFF298(a1, (uint64_t)v3);
}

void sub_216BFCF1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::PcpErrorUnresolvedPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 25;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)((char *)this + 16));
  *(void *)this = &unk_26C75C760;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)((char *)this + 104));
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 57);
  return this;
}

void sub_216BFCFC8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::~PcpErrorUnresolvedPrimPath(pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *this)
{
  *(void *)this = &unk_26C75C760;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 57);
  sub_21697C414((_DWORD *)this + 56);
  int v2 = (atomic_uint *)*((void *)this + 27);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)*((void *)this + 25);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 47);
  sub_21697C414((_DWORD *)this + 46);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *)((char *)this + 160));
  uint64_t v6 = (void **)((char *)this + 136);
  sub_216787968(&v6);
  uint64_t v4 = (atomic_uint *)*((void *)this + 16);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (atomic_uint *)*((void *)this + 14);
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::~PcpErrorUnresolvedPrimPath(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath *this)
{
  int v2 = v29;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)this + 58), (uint64_t)v29);
  if (v30 < 0) {
    int v2 = (void **)v29[0];
  }
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v20, (char *)this + 208, (char *)this + 224);
  uint64_t v3 = (void **)&v27;
  sub_216BF8938(&v20);
  if (v28 < 0) {
    uint64_t v3 = v27;
  }
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(&v11, (char *)this + 192, (char *)this + 184);
  sub_216BF8938((uint64_t *)&v11);
  if (v19 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unresolved %s prim path %s introduced by %s", v4, v5, v2, v3, p_p);
  if (v19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v15);
  uint64_t v31 = (void **)&v14;
  sub_216787968(&v31);
  uint64_t v7 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414(&v25);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v24);
  uint64_t v11 = (void **)&v23;
  sub_216787968(&v11);
  uint64_t v9 = v22;
  if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
}

void sub_216BFD3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_216BD8084((uint64_t)&a13);
  if (*(char *)(v30 - 81) < 0) {
    operator delete(*(void **)(v30 - 104));
  }
  sub_216BD8084((uint64_t)&a30);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::New@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)operator new(0xC8uLL);
  pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::PcpErrorVariableExpressionError(v3);

  return sub_216BFF3A8(a1, (uint64_t)v3);
}

void sub_216BFD4B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::PcpErrorVariableExpressionError(pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *this)
{
  *(void *)this = &unk_26C75C378;
  *((_DWORD *)this + 2) = 26;
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)((char *)this + 16));
  *(void *)this = &unk_26C75C788;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 49);
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::~PcpErrorVariableExpressionError(pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *this)
{
  *(void *)this = &unk_26C75C788;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 49);
  sub_21697C414((_DWORD *)this + 48);
  int v2 = (atomic_uint *)*((void *)this + 23);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }

  pxrInternal__aapl__pxrReserved__::PcpErrorBase::~PcpErrorBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::~PcpErrorVariableExpressionError(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError::ToString(pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *this)
{
  std::string::basic_string(&v22, (const std::string *)((char *)this + 104), 0, 0x20uLL, (std::allocator<char> *)&v25);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v2 = &v22;
  }
  else {
    int v2 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  uint64_t v3 = (void *)((char *)this + 152);
  if (*((char *)this + 175) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  memset(&v21, 0, sizeof(v21));
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)((char *)this + 192)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::PcpErrorVariableExpressionError *)((char *)this + 192), (uint64_t)__p);
    if (v24 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"at %s ", v4, v5, v6);
    if ((v27 & 0x80u) == 0) {
      uint64_t v7 = (const std::string::value_type *)&v25;
    }
    else {
      uint64_t v7 = v25;
    }
    if ((v27 & 0x80u) == 0) {
      std::string::size_type v8 = v27;
    }
    else {
      std::string::size_type v8 = v26;
    }
    std::string::append(&v21, v7, v8);
    if ((char)v27 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = sub_21697CF14((void *)this + 22);
  if (v10 & 1 | (unint64_t)v9)
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this + 22);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v12);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v14 = (const char *)Identifier;
    }
    else {
      uint64_t v14 = *(const char **)Identifier;
    }
  }
  else
  {
    uint64_t v14 = "<expired>";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"in @%s@", v10, v11, v14);
  if ((v27 & 0x80u) == 0) {
    uint64_t v15 = (const std::string::value_type *)&v25;
  }
  else {
    uint64_t v15 = v25;
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v16 = v27;
  }
  else {
    std::string::size_type v16 = v26;
  }
  std::string::append(&v21, v15, v16);
  if ((char)v27 < 0) {
    operator delete(v25);
  }
  char v19 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v19 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  uint64_t v20 = (void *)((char *)this + 128);
  if (*((char *)this + 151) < 0) {
    uint64_t v20 = (void *)*v20;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error evaluating expression %s for %s %s: %s", v17, v18, v2, v3, v19, v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_216BFD850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 49) < 0) {
    operator delete(*(void **)(v30 - 72));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpRaiseErrors(uint64_t *result, uint64_t a2, char *a3)
{
  uint64_t v3 = result[1];
  uint64_t v10 = *result;
  for (i = v3; v10 != i; uint64_t result = sub_216BFDA5C(&v10))
  {
    v8[0] = "pcp/errors.cpp";
    v8[1] = "PcpRaiseErrors";
    v8[2] = 930;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::PcpRaiseErrors(const PcpErrorVector &)";
    char v9 = 0;
    uint64_t v4 = sub_216BFD9DC(&v10, a2, a3);
    (*(void (**)(void **__return_ptr))(**(void **)v4 + 16))(__p);
    if (v7 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v5);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  return result;
}

void sub_216BFD9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216BFD9DC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::PcpErrorBase>>>::operator*() [T = const std::vector<std::shared_ptr<pxrInternal__aapl__pxrRes"
            "erved__::PcpErrorBase>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216BFDA54()
{
}

void *sub_216BFDA5C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::PcpErrorBase>>>::operator++() [T = const std::vector<std::shared_ptr<pxrInterna"
            "l__aapl__pxrReserved__::PcpErrorBase>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void *sub_216BFDADC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C75CA40;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFDB34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFDB50(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFDB78(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFDBA8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CA90)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216BFDBEC(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_216BFDC84((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

atomic_uint *sub_216BFDC84(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 84));
  sub_21697C414((_DWORD *)(a2 + 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 56));
  uint64_t v5 = (void **)(a2 + 32);
  sub_216787968(&v5);
  uint64_t v3 = *(atomic_uint **)(a2 + 24);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(atomic_uint **)(a2 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void *sub_216BFDD58(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CAB8;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFDDB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFDDCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFDDF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFDE24(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CB08)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFDE68(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CB30;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFDEC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFDEDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFDF04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFDF34(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CB80)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFDF78(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CBA8;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFDFD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFDFEC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE014(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE044(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CBF8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE088(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CC20;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE0E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE0FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE124(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE154(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CC70)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE198(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CC98;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE1F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE20C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE234(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE264(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CCE8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE2A8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CD10;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE300(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE31C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE344(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE374(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CD60)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE3B8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CD88;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE410(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE42C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE454(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE484(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CDD8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE4C8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CE00;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE520(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE53C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE564(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE594(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CE50)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE5D8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CE78;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE630(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE64C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE674(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE6A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CEC8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE6E8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CEF0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE740(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE75C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE784(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE7B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CF40)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE7F8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CF68;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE850(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE86C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE894(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE8C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75CFB8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFE908(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75CFE0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFE960(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFE97C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFE9A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFE9D4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D030)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFEA18(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D058;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFEA70(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFEA8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFEAB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFEAE4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D0A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFEB28(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D0D0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFEB80(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFEB9C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFEBC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFEBF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D120)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFEC38(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D148;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFEC90(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFECAC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFECD4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFED04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D198)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFED48(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D1C0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFEDA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFEDBC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFEDE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFEE14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D210)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFEE58(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D238;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFEEB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFEECC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFEEF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFEF24(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D288)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFEF68(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D2B0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFEFC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFEFDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFF004(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFF034(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D300)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFF078(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D328;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFF0D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFF0EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFF114(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFF144(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D378)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFF188(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D3A0;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFF1E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFF1FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFF224(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFF254(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D3F0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFF298(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D418;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFF2F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFF30C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFF334(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFF364(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D468)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216BFF3A8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75D490;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216BFF400(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324C6C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216BFF41C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216BFF444(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216BFF474(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D4E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2@<X1>, const char **a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)a1;
  if (a3)
  {
    std::string::size_type v8 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 2);
    sub_216BFF894(a1, a3 + 2, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)v40);
    if (pxrInternal__aapl__pxrReserved__::operator==(v40, (uint64_t *)v8, v9))
    {
      uint64_t v10 = a3[1];
      *a4 = *a3;
      a4[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a4 + 2), v8);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v30, v5, a2);
      char v24 = v31;
      *a4 = v30;
      a4[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v24 + 1, 1uLL, memory_order_relaxed);
      }
      int v25 = v40[0];
      v40[0] = 0;
      a4[2] = v25;
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v30);
    }
    sub_2168EBBB8((void ***)v40, 0);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(&v27);
    unint64_t v29 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v40);
    int v41 = 0;
    int v37 = 0;
    int v38 = 0;
    unint64_t v39 = 0;
    while (1)
    {
      uint64_t v11 = v37;
      if (v37 != v38)
      {
        char v12 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, (uint64_t)(v38 - 10));
        uint64_t v11 = v38;
        if (v12) {
          break;
        }
      }
      if ((unint64_t)v11 >= v39)
      {
        uint64_t v13 = sub_216BFFFB0((uint64_t *)&v37, (uint64_t)v5);
      }
      else
      {
        sub_216C000C0((uint64_t)&v39, v11, (uint64_t)v5);
        uint64_t v13 = (uint64_t)(v11 + 10);
      }
      int v38 = (void *)v13;
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)v5 + 56, (uint64_t)a2);
    }
    if (v38 == v37)
    {
      uint64_t v30 = (void **)"pcp/expressionVariables.cpp";
      uint64_t v31 = "Pcp_ComposeExpressionVariables";
      v32[0] = (void **)171;
      v32[1] = (void **)"const PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::Pcp_ComposeExpressionVariables"
                          "(const PcpLayerStackIdentifier &, const PcpLayerStackIdentifier &, CachePolicy *) [CachePolicy"
                          " = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::NoCache]";
      char v33 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v30, "expressionVars != &localExpressionVars", 0);
      uint64_t v23 = (void ***)v40;
    }
    else
    {
      uint64_t v14 = ((char *)v38 - (char *)v37) / 80;
      uint64_t v15 = 80 * v14 - 80;
      std::string::size_type v16 = (const char **)&v41;
      do
      {
        sub_216BFF894((void *)((char *)v37 + v15), v16, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v36);
        if ((pxrInternal__aapl__pxrReserved__::operator==(&v36, (uint64_t *)v16, v17) & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v34, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)v37 + v15), a2);
          uint64_t v30 = v34;
          uint64_t v31 = (const char *)v35;
          if (v35) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
          }
          char v18 = (void **)v36;
          int v36 = 0;
          v32[0] = v18;
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v34);
          uint64_t v20 = v30;
          char v19 = v31;
          if (v31) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v31 + 1, 1uLL, memory_order_relaxed);
          }
          std::string v21 = v28;
          unsigned __int8 v27 = v20;
          char v28 = (std::__shared_weak_count *)v19;
          if (v21) {
            sub_216784EC4(v21);
          }
          std::string v22 = v32[0];
          v32[0] = 0;
          sub_2168EBBB8(&v29, v22);
          sub_2168EBBB8(v32, 0);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v30);
        }
        --v14;
        sub_2168EBBB8((void ***)&v36, 0);
        v15 -= 80;
        std::string::size_type v16 = (const char **)&v29;
      }
      while (v14);
      uint64_t v23 = &v27;
    }
    uint64_t v30 = (void **)&v37;
    sub_216C0048C(&v30);
    sub_2168EBBB8(&v41, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v40);
    std::string::size_type v26 = v23[1];
    *a4 = *v23;
    a4[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v26 + 1, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a4 + 2), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(v23 + 2));
    sub_2168EBBB8(&v29, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v27);
  }
}

void sub_216BFF7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a13 = (void **)&a21;
  sub_216C0048C(&a13);
  sub_2168EBBB8(v22, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v23 - 104));
  sub_2168EBBB8(v21, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_216BFF894(uint64_t *a1@<X0>, const char **a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  char v6 = (uint64_t *)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  int v17 = 0;
  uint64_t v8 = sub_216A5B7B0(v6 + 14);
  (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **__return_ptr))(*(void *)v8 + 136))(&v19);
  if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
  {
    if ((v20 & 4) != 0) {
      char v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
    }
    else {
      char v9 = v19;
    }
  }
  else
  {
    char v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17;
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v18, v9);
  sub_2168EE084((uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::VtDictionaryOver((const char **)&v18, a3, 0);
  sub_2168EBBB8(&v18, 0);
  sub_2168EBBB8(&v17, 0);
  uint64_t v10 = a1 + 2;
  uint64_t v11 = sub_21697CF14(v10);
  if (v12 & 1 | (unint64_t)v11)
  {
    uint64_t v13 = (uint64_t *)sub_2169791E0(v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    int v17 = 0;
    uint64_t v15 = sub_216A5B7B0(v13 + 14);
    (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **__return_ptr))(*(void *)v15 + 136))(&v19);
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
    {
      if ((v20 & 4) != 0) {
        std::string::size_type v16 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
      }
      else {
        std::string::size_type v16 = v19;
      }
    }
    else
    {
      std::string::size_type v16 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v17;
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v18, v16);
    sub_2168EE084((uint64_t)&v19);
    pxrInternal__aapl__pxrReserved__::VtDictionaryOver((const char **)&v18, a3, 0);
    sub_2168EBBB8(&v18, 0);
    sub_2168EBBB8(&v17, 0);
  }
  if (a2) {
    pxrInternal__aapl__pxrReserved__::VtDictionaryOver(a2, a3, 0);
  }
}

void sub_216BFFAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  sub_2168EBBB8((void ***)va1, 0);
  sub_2168EBBB8((void ***)va, 0);
  sub_2168EBBB8(v2, 0);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::PcpExpressionVariableCachingComposer(pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  sub_21695F340((void *)this + 4, *((void **)a2 + 4), *((void **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  uint64_t v6 = *((void *)a2 + 8);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)this + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 9) = *((void *)a2 + 9);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  return this;
}

void sub_216BFFC0C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4) {
    sub_217324248(v4);
  }
  sub_217324A60(v2);
  _Unwind_Resume(a1);
}

const char **pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer::ComputeExpressionVariables(pxrInternal__aapl__pxrReserved__::PcpExpressionVariableCachingComposer *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2)
{
  uint64_t v4 = (void *)((char *)this + 80);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v22);
  uint64_t v23 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  while (v19 == v20
       || (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)this, (uint64_t)(v20 - 80)) & 1) == 0)
  {
    uint64_t v5 = sub_216BCC6D0(v4, (uint64_t)a2);
    if (v5)
    {
      uint64_t v8 = (const char **)(v5 + 12);
      goto LABEL_11;
    }
    uint64_t v6 = v20;
    if ((unint64_t)v20 >= v21)
    {
      int v7 = (char *)sub_216BFFFB0((uint64_t *)&v19, (uint64_t)a2);
    }
    else
    {
      sub_216C000C0((uint64_t)&v21, v20, (uint64_t)a2);
      int v7 = v6 + 80;
    }
    uint64_t v20 = v7;
    a2 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)a2 + 56, (uint64_t)this);
  }
  uint64_t v8 = (const char **)v22;
LABEL_11:
  if (v20 != v19)
  {
    uint64_t v9 = (v20 - v19) / 80;
    uint64_t v10 = 80 * v9 - 80;
    do
    {
      sub_216BFF894((uint64_t *)&v19[v10], v8 + 2, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v18);
      if (pxrInternal__aapl__pxrReserved__::operator==(&v18, (uint64_t *)v8 + 2, v11))
      {
        char v12 = sub_216C00524((uint64_t)v4, (uint64_t)&v19[v10], (uint64_t)&v19[v10], v8);
        if (!v13)
        {
          char v24 = (char **)"pcp/expressionVariables.cpp";
          int v25 = "CacheEntry";
          uint64_t v26 = 107;
          unsigned __int8 v27 = "PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Cache::CacheEntry(const"
                " PcpLayerStackIdentifier &, ExpressionVarsAndSource &&) [ExpressionVarsAndSource = const pxrInternal__aa"
                "pl__pxrReserved__::PcpExpressionVariables &]";
          char v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "mapResult.second", 0);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v24, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)&v19[v10], this);
        v16[0] = (uint64_t)v24;
        v16[1] = (uint64_t)v25;
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
        }
        int v17 = (void **)v18;
        char v18 = 0;
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v24);
        char v12 = sub_216C009CC((uint64_t)v4, (uint64_t)&v19[v10], (uint64_t)&v19[v10], v16);
        if (!v14)
        {
          char v24 = (char **)"pcp/expressionVariables.cpp";
          int v25 = "CacheEntry";
          uint64_t v26 = 107;
          unsigned __int8 v27 = "PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Cache::CacheEntry(const"
                " PcpLayerStackIdentifier &, ExpressionVarsAndSource &&) [ExpressionVarsAndSource = pxrInternal__aapl__px"
                "rReserved__::PcpExpressionVariables]";
          char v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "mapResult.second", 0);
        }
        sub_2168EBBB8(&v17, 0);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v16);
      }
      --v9;
      uint64_t v8 = (const char **)(v12 + 12);
      sub_2168EBBB8((void ***)&v18, 0);
      v10 -= 80;
    }
    while (v9);
  }
  if (v8 == v22)
  {
    char v24 = (char **)"pcp/expressionVariables.cpp";
    int v25 = "Pcp_ComposeExpressionVariables";
    uint64_t v26 = 171;
    unsigned __int8 v27 = "const PcpExpressionVariables *pxrInternal__aapl__pxrReserved__::Pcp_ComposeExpressionVariables(const PcpLayerS"
          "tackIdentifier &, const PcpLayerStackIdentifier &, CachePolicy *) [CachePolicy = pxrInternal__aapl__pxrReserve"
          "d__::(anonymous namespace)::Cache]";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "expressionVars != &localExpressionVars", 0);
  }
  char v24 = &v19;
  sub_216C0048C((void ***)&v24);
  sub_2168EBBB8(&v23, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v22);
  return v8;
}

void sub_216BFFF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy((va_list)v4, va1);
  sub_216C0048C((void ***)va);
  sub_2168EBBB8(v2, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_216BFFFB0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_21677CB10();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_216814BD8((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[80 * v3];
  char v13 = &v7[80 * v6];
  sub_216C000C0((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 80;
  sub_216C00180(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216C00410((atomic_uint *)&v10);
  return v8;
}

void sub_216C000AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C00410((atomic_uint *)va);
  _Unwind_Resume(a1);
}

void *sub_216C000C0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  *a2 = *(void *)a3;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a3 + 24);
  a2[2] = *(void *)(a3 + 16);
  a2[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  uint64_t result = sub_21695F340(a2 + 4, *(void **)(a3 + 32), *(void **)(a3 + 40), (uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 4);
  uint64_t v8 = *(void *)(a3 + 64);
  a2[7] = *(void *)(a3 + 56);
  a2[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a2[9] = *(void *)(a3 + 72);
  return result;
}

void sub_216C00160(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4) {
    sub_217324248(v4);
  }
  sub_217324A60(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216C00180(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C001F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C001F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 80;
      sub_216C000C0(a1, (void *)(v7 - 80), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216C002C4((uint64_t)v13);
  return v11;
}

void sub_216C002B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C002C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C002FC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C002FC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C00350(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_216C00350(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 56));
  uint64_t v5 = (void **)(a2 + 32);
  sub_216787968(&v5);
  uint64_t v3 = *(atomic_uint **)(a2 + 24);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(atomic_uint **)(a2 + 8);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

atomic_uint *sub_216C00410(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_216C00444(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 80;
      uint64_t result = sub_216C00350(v4, v1 - 80);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_216C0048C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_216C00350((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_216C00524(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * *(void *)(a2 + 72));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    char v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v8)
          {
            if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v9) {
                v15 %= v9;
              }
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_216C007AC(a1, v8, a3, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  std::string v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *std::string v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  char v14 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C00974((uint64_t)v25, 0);
  return v14;
}

void sub_216C00794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C00974((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216C007AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x78uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_216C00834(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216C0081C(_Unwind_Exception *a1)
{
  sub_216C00974(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216C00834(void *a1, uint64_t a2, void *a3)
{
  *a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  a1[2] = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_21695F340(a1 + 4, *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  a1[7] = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a2 + 72);
  a1[10] = *a3;
  a1[9] = v9;
  uint64_t v10 = a3[1];
  a1[11] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 12), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 2));
  return a1;
}

void sub_216C00928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  sub_216BCB5AC(v9);
  _Unwind_Resume(a1);
}

void sub_216C00974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216BEC77C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216C009CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * *(void *)(a2 + 72));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    char v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v8)
          {
            if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)(v14 + 2), a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v9) {
                v15 %= v9;
              }
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_216C00C54(a1, v8, a3, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  std::string v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *std::string v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  char v14 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C00974((uint64_t)v25, 0);
  return v14;
}

void sub_216C00C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C00974((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216C00C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x78uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_216C00CDC(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216C00CC4(_Unwind_Exception *a1)
{
  sub_216C00974(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216C00CDC(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_21695F340(a1 + 4, *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  uint64_t v8 = *(void *)(a2 + 64);
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  a1[9] = *(void *)(a2 + 72);
  a1[10] = v10;
  a1[11] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a3[2];
  a3[2] = 0;
  a1[12] = v11;
  return a1;
}

void sub_216C00DA8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4) {
    sub_217324248(v4);
  }
  sub_217324A60(v2);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
}

{
  sub_216C01044((uint64_t *)this, 0);
}

void *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  sub_216C01044(a1, v3);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::IsEmpty(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  return *(void *)this == 0;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AppendDependencyData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  if (*(void *)this)
  {
    for (uint64_t i = *(void **)(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetWritableData(this)
                         + 16); i; uint64_t i = (void *)*i)
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies(a1, i + 2, i + 4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetWritableData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  uint64_t result = *(void *)this;
  if (!result)
  {
    uint64_t v3 = operator new(0x28uLL);
    void v3[4] = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_216C01044((uint64_t *)this, (uint64_t)v3);
    return *(void *)this;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *a1, void *a2, uint64_t *a3)
{
  if (a3[3])
  {
    uint64_t WritableData = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetWritableData(a1);
    uint64_t v9 = a2;
    uint64_t v6 = sub_216C01184(WritableData, (uint64_t)a2, (uint64_t)&unk_2174BFD90, &v9);
    uint64_t v7 = (uint64_t)(v6 + 4);
    if (v6[7])
    {
      for (uint64_t i = a3[2]; i; uint64_t i = *(void *)i)
        sub_216A38350(v7, (unsigned __int8 *)(i + 16), i + 16);
    }
    else
    {
      sub_216C014A0((uint64_t)(v6 + 4), a3);
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::GetDependenciesForLayerStack(void **a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v3 = sub_216BC1328(result, a2);
    if (v3) {
      return v3 + 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_GetData(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *this)
{
  return *(void *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::_ForEachDependency(uint64_t result, uint64_t a2)
{
  if (*(void *)result)
  {
    for (uint64_t i = *(void **)(*(void *)result + 16); i; uint64_t i = (void *)*i)
      uint64_t result = (*(uint64_t (**)(void, void *, void *))(a2 + 8))(*(void *)a2, i + 2, i + 4);
  }
  return result;
}

void sub_216C01044(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C01084(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C01084(uint64_t a1)
{
  sub_216C010C0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C010C0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C01104((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

atomic_uint *sub_216C01104(uint64_t a1)
{
  sub_216850298(a1 + 16);
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v3();
  }
  return result;
}

void *sub_216C01184(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * sub_216851B24(a2));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      char v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            uint64_t v15 = sub_216851B24((uint64_t)(v13 + 2));
            if (v15 == sub_216851B24(a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          char v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  float v16 = operator new(0x48uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *float v16 = 0;
  v16[1] = v8;
  float v17 = *a4;
  uint64_t v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *int v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9) {
          v26 %= v9;
        }
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  char v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C01448((uint64_t)v28, 0);
  return v13;
}

void sub_216C01430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C01448((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216C01448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C01104((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_216C014A0(uint64_t a1, uint64_t *a2)
{
  sub_216C01544(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void sub_216C01544(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2168502D4(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a3)
{
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, (uint64_t)a3))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = operator new(0x50uLL);
    uint64_t v5 = v6;
    uint64_t v7 = *((void *)a2 + 1);
    *uint64_t v6 = *(void *)a2;
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v8 = *((void *)a2 + 3);
    v6[2] = *((void *)a2 + 2);
    v6[3] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    v6[4] = 0;
    v6[5] = 0;
    v6[6] = 0;
    sub_21695F340(v6 + 4, *((void **)a2 + 4), *((void **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
    uint64_t v9 = *((void *)a2 + 8);
    v5[7] = *((void *)a2 + 7);
    v5[8] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    v5[9] = *((void *)a2 + 9);
  }

  return sub_216C01810(this, (uint64_t)v5);
}

void sub_216C01688(_Unwind_Exception *a1)
{
  uint64_t v4 = (atomic_uint *)v1[3];
  if (v4) {
    sub_217324328(v4);
  }
  sub_217324C90(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    sub_216784EC4(v1);
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    sub_216784EC4(v1);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::GetHash(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  if (*(void *)this) {
    return bswap64(0x9E3779B97F4A7C55 * *(void *)(*(void *)this + 72));
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 != 0) == (v3 != 0);
  }
  else {
    return pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator!=(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(a1, a2) ^ 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator<(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator<();
  }
  if (v2) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0;
  }
  return !v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1) {
    return *(void *)a1;
  }
  else {
    return a2;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this, const pxrInternal__aapl__pxrReserved__::PcpCache *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
  if (*(void *)this) {
    return *(void *)this;
  }
  return result;
}

void *sub_216C01810(void *a1, uint64_t a2)
{
  *a1 = a2;
  BOOL v4 = operator new(0x20uLL);
  *BOOL v4 = &unk_26C75D508;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216C01870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_216C01908((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C01894(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C018BC(uint64_t a1)
{
}

uint64_t sub_216C018C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D558)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216C01908(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 64);
    if (v3) {
      sub_216784EC4(v3);
    }
    uint64_t v6 = (void **)(a2 + 32);
    sub_216787968(&v6);
    BOOL v4 = *(atomic_uint **)(a2 + 24);
    if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
    BOOL v5 = *(atomic_uint **)(a2 + 8);
    if (v5)
    {
      if (atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
      }
    }
    operator delete((void *)a2);
  }
}

double pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey(pxrInternal__aapl__pxrReserved__::PcpInstanceKey *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

pxrInternal__aapl__pxrReserved__::PcpInstanceKey *pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey(pxrInternal__aapl__pxrReserved__::PcpInstanceKey *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  *((void *)this + 6) = 0;
  BOOL v4 = (uint64_t *)((char *)this + 48);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  BOOL v5 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(a2))
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    char HasAnyPayloads = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(a2);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a2);
    uint64_t v35 = v8;
    uint64_t v36 = v6;
    uint64_t v9 = **(void ****)(v8 + 16);
    uint64_t v10 = (void **)WORD2(v9[6 * v6 + 3]);
    char v29 = (void **)v8;
    uint64_t v30 = v10;
    uint64_t v31 = v9;
    uint64_t v32 = (void **)v8;
    uint64_t v11 = 0xFFFFLL;
    uint64_t v33 = 0xFFFFLL;
    int v34 = v9;
    while (v10 != (void **)v11 || v29 != v32)
    {
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v29, v6, v7);
      sub_216C0248C(v12, (uint64_t)&v26, 0);
      sub_216BC28B8(&v29);
      uint64_t v10 = v30;
      uint64_t v11 = v33;
    }
    long long v13 = *(_OWORD *)this;
    *(_OWORD *)this = v26;
    long long v26 = v13;
    uint64_t v14 = *((void *)this + 2);
    *((void *)this + 2) = v27;
    uint64_t v27 = v14;
    long long v25 = 0uLL;
    size_t v24 = &v25;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v29);
    float v16 = v29;
    uint64_t v15 = v30;
    float v17 = v31;
    if (v29 != v31 || v30 != v32)
    {
      uint64_t v18 = (char *)v32 - 1;
      do
      {
        float v19 = (char *)v15;
        v23[0] = v16;
        v23[1] = v15;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23))
        {
          LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23);
          Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v23);
          pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelections(LayerStack, Path, (uint64_t *)&v24, 0, 0);
        }
        uint64_t v15 = (void **)(v19 + 1);
      }
      while (v16 != v17 || v18 != v19);
    }
    sub_216C01C70((uint64_t)v5, v24, &v25);
    char v29 = 0;
    LOBYTE(v3sub_216C01044((uint64_t *)this, 0) = 0;
    sub_216C0304C((unint64_t)&v29, v4, (uint64_t)this, (uint64_t)v5);
    *BOOL v4 = bswap64(0x9E3779B97F4A7C55 * (void)v29);
    sub_2167877AC((uint64_t)&v24, (void *)v25);
    char v29 = (void **)&v26;
    sub_216C020DC(&v29);
  }
  return this;
}

void sub_216C01C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  BOOL v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  sub_2167877AC((uint64_t)va, v7);
  va_copy((va_list)v5, va1);
  sub_216C020DC((void ***)va);
  sub_21682E488((void ***)va1);
  sub_216C020DC((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_216C01C70(uint64_t a1, long long *a2, long long *a3)
{
  if (a2 == a3)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    BOOL v4 = a2;
    do
    {
      BOOL v5 = (long long *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          BOOL v5 = *(long long **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (long long *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          BOOL v4 = v6;
        }
        while (!v7);
      }
      ++v3;
      BOOL v4 = v6;
    }
    while (v6 != a3);
  }
  sub_216C02BC0(a1, a2, a3, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (unsigned __int8 *)a1[3];
  unint64_t v3 = (unsigned __int8 *)a1[4];
  BOOL v4 = (unsigned __int8 *)a2[3];
  if (v3 - v2 != a2[4] - (void)v4) {
    return 0;
  }
  while (v2 != v3)
  {
    uint64_t result = sub_21691BE28((uint64_t)&v13, v2, v4);
    if (!result) {
      return result;
    }
    v2 += 48;
    v4 += 48;
  }
  uint64_t v10 = a1;
  uint64_t v8 = *a1;
  uint64_t v9 = v10[1];
  unint64_t v12 = a2;
  uint64_t v11 = *a2;
  if (v9 - v8 != v12[1] - v11) {
    return 0;
  }
  if (v8 == v9) {
    return 1;
  }
  do
  {
    uint64_t result = sub_216C031F4(v8, v11);
    if (!result) {
      break;
    }
    v8 += 112;
    v11 += 112;
  }
  while (v8 != v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator!=(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator==(a1, a2) ^ 1;
}

std::string *pxrInternal__aapl__pxrReserved__::PcpInstanceKey::GetString@<X0>(pxrInternal__aapl__pxrReserved__::PcpInstanceKey *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string::append((std::string *)a2, "Arcs:\n");
  unint64_t v3 = (void *)*((void *)this + 1);
  if (*(void **)this != v3)
  {
    BOOL v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(*(void *)this + 96);
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, *((unsigned int *)v4 - 24), (uint64_t)v31);
      if (v32 >= 0) {
        BOOL v5 = v31;
      }
      else {
        BOOL v5 = (void **)v31[0];
      }
      BOOL IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v4);
      uint64_t v9 = "";
      if (!IsIdentity)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" (offset: %f scale: %f)", v6, v7, *(void *)v4, *((void *)v4 + 1));
        if (v30 >= 0) {
          uint64_t v9 = (const char *)&v29;
        }
        else {
          uint64_t v9 = (const char *)v29;
        }
      }
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v27, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)((char *)v4 - 88), (const pxrInternal__aapl__pxrReserved__::PcpSite *)v6);
      if (v28 >= 0) {
        unint64_t v12 = v27;
      }
      else {
        unint64_t v12 = (void **)v27[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s%s : %s\n", v10, v11, v5, v9, v12);
      if ((v35 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v35 & 0x80u) == 0) {
        std::string::size_type v14 = v35;
      }
      else {
        std::string::size_type v14 = v34;
      }
      std::string::append((std::string *)a2, p_p, v14);
      if ((char)v35 < 0) {
        operator delete(__p);
      }
      if (v28 < 0)
      {
        operator delete(v27[0]);
        if (!IsIdentity)
        {
LABEL_25:
          if (v30 < 0) {
            operator delete(v29);
          }
        }
      }
      else if (!IsIdentity)
      {
        goto LABEL_25;
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v15 = (void *)((char *)v4 + 16);
      BOOL v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)((char *)v4 + 112);
      if (v15 == v3) {
        goto LABEL_32;
      }
    }
  }
  std::string::append((std::string *)a2, "  (none)\n");
LABEL_32:
  std::string::append((std::string *)a2, "Variant selections:\n");
  uint64_t v18 = (uint64_t *)*((void *)this + 3);
  float v19 = (uint64_t *)*((void *)this + 4);
  if (v18 == v19) {
    return std::string::append((std::string *)a2, "  (none)");
  }
  do
  {
    float v20 = v18;
    if (*((char *)v18 + 23) < 0) {
      float v20 = (uint64_t *)*v18;
    }
    BOOL v21 = v18 + 3;
    if (*((char *)v18 + 47) < 0) {
      BOOL v21 = (void *)*v21;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"  %s = %s\n", v16, v17, v20, v21);
    if ((v35 & 0x80u) == 0) {
      unint64_t v22 = (const std::string::value_type *)&__p;
    }
    else {
      unint64_t v22 = (const std::string::value_type *)__p;
    }
    if ((v35 & 0x80u) == 0) {
      std::string::size_type v23 = v35;
    }
    else {
      std::string::size_type v23 = v34;
    }
    std::string::append((std::string *)a2, v22, v23);
    if ((char)v35 < 0) {
      operator delete(__p);
    }
    v18 += 6;
  }
  while (v18 != v19);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  return std::string::erase((std::string *)a2, v24 - 1, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_216C0203C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 + 23) < 0) {
    operator delete(*(void **)v36);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C020DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_216C02174((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

atomic_uint *sub_216C02174(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 92));
  sub_21697C414((_DWORD *)(a2 + 88));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a2 + 64));
  BOOL v5 = (void **)(a2 + 40);
  sub_216787968(&v5);
  unint64_t v3 = *(atomic_uint **)(a2 + 32);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *(atomic_uint **)(a2 + 16);
  if (result)
  {
    if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_216C02248(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 92));
  sub_21697C414((_DWORD *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 64));
  BOOL v5 = (void **)(a1 + 40);
  sub_216787968(&v5);
  uint64_t v2 = *(atomic_uint **)(a1 + 32);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *(atomic_uint **)(a1 + 16);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

BOOL sub_216C02320(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, int a3)
{
  if (!a3) {
    return 1;
  }
  sub_216C02B04((uint64_t)&v9, a2);
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t v5 = sub_216C02578((uint64_t *)a1, (uint64_t)&v9);
  }
  else
  {
    *(_DWORD *)unint64_t v4 = v9;
    sub_216C026B0(v4 + 8, (uint64_t)&v10);
    *(_OWORD *)(v4 + 96) = v17;
    uint64_t v5 = v4 + 112;
    *(void *)(a1 + 8) = v4 + 112;
  }
  *(void *)(a1 + 8) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v14);
  uint64_t v18 = (void **)&v13;
  sub_216787968(&v18);
  uint64_t v6 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v11;
  if (v11)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return *(unsigned char *)(a1 + 24) != 0;
}

void sub_216C02464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C02248((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C0248C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, char a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if (result) {
    return result;
  }
  if (a3)
  {
    uint64_t v7 = 1;
  }
  else
  {
    int IsDueToAncestor = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1);
    uint64_t v7 = IsDueToAncestor ^ 1u;
    if (IsDueToAncestor)
    {
      int HasSpecs = 0;
      goto LABEL_7;
    }
  }
  int HasSpecs = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
LABEL_7:
  uint64_t result = sub_216C02320(a2, a1, HasSpecs);
  if (result)
  {
    uint64_t v12 = *((void *)a1 + 1);
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = v12;
    uint64_t v13 = **(void **)(v23 + 16);
    uint64_t v14 = *(unsigned __int16 *)(v13 + 48 * v12 + 28);
    uint64_t v17 = v23;
    uint64_t v18 = v14;
    uint64_t v19 = v13;
    uint64_t v20 = v23;
    uint64_t v15 = 0xFFFFLL;
    uint64_t v21 = 0xFFFFLL;
    uint64_t v22 = v13;
    while (v14 != v15 || v17 != v20)
    {
      int v16 = sub_216BC2828(&v17, v10, v11);
      sub_216C0248C(v16, a2, v7);
      uint64_t result = (uint64_t)sub_216BC28B8(&v17);
      uint64_t v14 = v18;
      uint64_t v15 = v21;
    }
  }
  return result;
}

uint64_t sub_216C02578(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x124924924924924) {
    unint64_t v9 = 0x249249249249249;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = sub_216C02804(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[7 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = (char *)&v10[7 * v9];
  _DWORD *v11 = *(_DWORD *)a2;
  sub_216C026B0((uint64_t)(v11 + 2), a2 + 8);
  v10[7 * v4 + 6] = *(_OWORD *)(a2 + 96);
  v15 += 28;
  sub_216C0278C(a1, v14);
  uint64_t v12 = a1[1];
  sub_216C02A88((atomic_uint *)v14);
  return v12;
}

void sub_216C0269C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C02A88((atomic_uint *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C026B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_21695F340((void *)(a1 + 32), *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_21697D878((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_21697D8B4((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  return a1;
}

void sub_216C0276C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(atomic_uint **)(v1 + 24);
  if (v4) {
    sub_217324328(v4);
  }
  sub_217324C90(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216C0278C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C02850((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216C02804(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_21677CA1C();
  }
  return operator new(112 * a2);
}

uint64_t sub_216C02850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      int v11 = *(_DWORD *)(v10 - 112);
      v10 -= 112;
      *(_DWORD *)(v7 - 112) = v11;
      sub_216C02920(v7 - 104, v10 + 8);
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 - 16);
      uint64_t v7 = *((void *)&v17 + 1) - 112;
      *((void *)&v17 + 1) -= 112;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216C029FC((uint64_t)v14);
  return v12;
}

void sub_216C0290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C02920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_21695F340((void *)(a1 + 32), *(void **)(a2 + 32), *(void **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_216981010((_DWORD *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_21698105C((_DWORD *)(a1 + 84), (_DWORD *)(a2 + 84));
  return a1;
}

void sub_216C029DC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(atomic_uint **)(v1 + 24);
  if (v4) {
    sub_217324328(v4);
  }
  sub_217324C90(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216C029FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C02A34((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C02A34(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C02174(v3, v1);
      v1 += 112;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_216C02A88(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_216C02ABC(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 112;
      uint64_t result = sub_216C02174(v4, v1 - 112);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216C02B04(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  *(_DWORD *)a1 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)(a1 + 8), (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  sub_216BBEEA4(&v8);
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)((char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v5, v6)+ 40);
  return a1;
}

void sub_216C02B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C02BC0(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_216C02D50((void **)a1);
    if (a4 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2169D8290((void *)a1, v11);
    uint64_t v12 = sub_216C02DC0(v8, a2, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
  if (v13 < a4)
  {
    *(void *)uint64_t v18 = a2;
    sub_21680F304((void **)v18, v13);
    uint64_t v14 = *(long long **)v18;
    sub_216C02FB4((int)&v19, a2, *(void **)v18, *(std::string **)a1);
    uint64_t v12 = sub_216C02DC0(v8, v14, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216C02FB4((int)&v20, a2, a3, v9);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17 != v15)
  {
    do
    {
      v17 -= 48;
      sub_21682E520(v8, v17);
    }
    while (v17 != v16);
  }
  *(void *)(a1 + 8) = v16;
}

void sub_216C02D40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216C02D48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216C02D50(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        sub_21682E520((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_216C02DC0(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v13 = __dst;
  uint64_t v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216C02E90(v4, v6 + 2);
      uint64_t v7 = (long long *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(long long **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (long long *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v14 + 48;
      v14 += 48;
      uint64_t v6 = v8;
    }
    while (v8 != a3);
  }
  char v12 = 1;
  sub_216C02F28((uint64_t)v11);
  return v4;
}

void sub_216C02E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_216C02E90(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_216C02F0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C02F28(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C02F60((uint64_t *)a1);
  }
  return a1;
}

void sub_216C02F60(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      sub_21682E520(v5, v3);
    }
    while (v3 != v4);
  }
}

void *sub_216C02FB4(int a1, void *a2, void *a3, std::string *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::string::operator=(this, (const std::string *)(v5 + 4));
      std::string::operator=(this + 1, (const std::string *)(v5 + 7));
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      this += 2;
      uint64_t v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

unint64_t sub_216C0304C(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_216C03084(a1, a3, a4);
}

unint64_t sub_216C03084(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
  long long v6 = *(int8x16_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 4);
    do
    {
      --v8;
      BOOL v9 = v6 + 7;
      uint64_t result = sub_216C03128((uint64_t)v5, v6);
      long long v6 = v9;
    }
    while (v8);
  }
  unint64_t v10 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    do
    {
      --v12;
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__ *)((char *)v10 + 48);
      uint64_t result = sub_2169DBEA4(v5, v10);
      unint64_t v10 = v13;
    }
    while (v12);
  }
  return result;
}

unint64_t sub_216C03128(uint64_t a1, int8x16_t *a2)
{
  uint64_t v4 = a2->u32[0];
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  sub_216C0319C(a1, (uint64_t)&a2->i64[1]);

  return sub_2169DA90C(a1, a2 + 6);
}

unint64_t sub_216C0319C(uint64_t a1, uint64_t a2)
{
  unint64_t result = pxrInternal__aapl__pxrReserved__::PcpSite::Hash::operator()((uint64_t)&v4, a2);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

BOOL sub_216C031F4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || !pxrInternal__aapl__pxrReserved__::PcpSite::operator==(a1 + 8, a2 + 8))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(a1 + 96), (double *)(a2 + 96));
}

void *pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(void *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

{
  *this = 0;
  this[1] = -1;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(void *result, uint64_t a2, uint64_t a3)
{
  *unint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  *unint64_t result = a2;
  result[1] = a3;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this)
{
  if (*(void *)this)
  {
    ++*((void *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "increment";
    v1[2] = 51;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment()";
    char v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot increment invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this)
{
  if (*(void *)this)
  {
    --*((void *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "decrement";
    v1[2] = 62;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement()";
    char v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot decrement invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::advance(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this, uint64_t a2)
{
  if (*(void *)this)
  {
    *((void *)this + 1) += a2;
  }
  else
  {
    v2[0] = "pcp/iterator.cpp";
    v2[1] = "advance";
    v2[2] = 73;
    v2[3] = "void pxrInternal__aapl__pxrReserved__::PcpPrimIterator::advance(difference_type)";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot advance invalid iterator");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::distance_to(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *a2)
{
  if (*(void *)this && *(void *)a2)
  {
    if (*(void *)this == *(void *)a2) {
      return *((void *)a2 + 1) - *((void *)this + 1);
    }
    char v3 = "pcp/iterator.cpp";
    char v4 = "distance_to";
    uint64_t v5 = 90;
    long long v6 = "PcpPrimIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPrimIterator::distance_to(const PcpPrimIterator &) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot compute distance for iterators from different prim indexes.");
  }
  else
  {
    char v3 = "pcp/iterator.cpp";
    char v4 = "distance_to";
    uint64_t v5 = 84;
    long long v6 = "PcpPrimIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPrimIterator::distance_to(const PcpPrimIterator &) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid iterator");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal(pxrInternal__aapl__pxrReserved__::PcpPrimIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *a2)
{
  return *(void *)this == *(void *)a2 && *((void *)this + 1) == *((void *)a2 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::dereference@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_216BCFCE4(*this);
  uint64_t v5 = (unsigned __int16 *)((*this)[1] + 4 * (void)this[1]);

  return sub_216C03508(v4, v5, a2);
}

uint64_t sub_216C03508@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)(**(void **)(a1 + 16) + 48 * *a2));
  uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  sub_216ABBA60(&v9, (uint64_t *)(*Layers + 8 * a2[1]));
  sub_216BF1414(a3, &v9, (_DWORD *)(*(void *)(a1 + 32) + 12 * *a2));
  uint64_t result = v10;
  if (v10)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216C035D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode(uint64_t **this)
{
  return sub_216BCFCE4(*this);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIterator::_GetSiteRef(uint64_t **this)
{
  uint64_t v2 = sub_216BCFCE4(*this);
  char v3 = (unsigned __int16 *)((*this)[1] + 4 * (void)this[1]);

  return sub_216C03664(v2, v3);
}

uint64_t sub_216C03664(uint64_t a1, unsigned __int16 *a2)
{
  char v3 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)(**(void **)(a1 + 16) + 48 * *a2));
  return *(void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v3) + 8 * a2[1];
}

void *pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::increment(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  if (*(void *)this)
  {
    ++*((void *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "increment";
    v1[2] = 136;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::increment()";
    char v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot increment invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  if (*(void *)this)
  {
    --*((void *)this + 1);
  }
  else
  {
    v1[0] = "pcp/iterator.cpp";
    v1[1] = "decrement";
    v1[2] = 147;
    v1[3] = "void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement()";
    char v2 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot decrement invalid iterator");
  }
}

void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::advance(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this, uint64_t a2)
{
  if (*(void *)this)
  {
    *((void *)this + 1) += a2;
  }
  else
  {
    v2[0] = "pcp/iterator.cpp";
    v2[1] = "advance";
    v2[2] = 158;
    v2[3] = "void pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::advance(difference_type)";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot advance invalid iterator");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::distance_to(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *a2)
{
  if (*(void *)this && *(void *)a2)
  {
    if (*(void *)this == *(void *)a2) {
      return *((void *)a2 + 1) - *((void *)this + 1);
    }
    char v3 = "pcp/iterator.cpp";
    uint64_t v4 = "distance_to";
    uint64_t v5 = 175;
    long long v6 = "PcpPropertyIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::distance_to(const P"
         "cpPropertyIterator &) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot compute distance for iterators from different property indexes");
  }
  else
  {
    char v3 = "pcp/iterator.cpp";
    uint64_t v4 = "distance_to";
    uint64_t v5 = 169;
    long long v6 = "PcpPropertyIterator::difference_type pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::distance_to(const P"
         "cpPropertyIterator &) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid iterator");
  }
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *a2)
{
  return *(void *)this == *(void *)a2 && *((void *)this + 1) == *((void *)a2 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  return **(void **)this + 24 * *((void *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  return *(void *)(**(void **)this + 24 * *((void *)this + 1) + 8);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::IsLocal(pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *this)
{
  unint64_t v1 = *((void *)this + 1);
  return v1 < pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetNumLocalSpecs(*(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex **)this);
}

void sub_216C0396C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_216C039B4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpIsTimeScalingForLayerTimeCodesPerSecondDisabled(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  return *v1;
}

void pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack(atomic_uint ****a1, uint64_t **a2, char *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v52 = (void **)v53;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91490, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91490))
  {
    uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v36) {
      uint64_t v36 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v37 = *((void *)v36 + 36);
    qword_267B91488 = v37;
    if ((v37 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B91488 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91488, &dword_216758000);
    __cxa_guard_release(&qword_267B91490);
  }
  char v7 = *a1;
  uint64_t v48 = a1[1];
  uint64_t v49 = v48;
  uint64_t v50 = v7;
  uint64_t v51 = v7;
  while (v49 != v51)
  {
    uint64_t v8 = (uint64_t *)sub_216BEF334((uint64_t)&v48, (uint64_t)a2, a3);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v8);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetHints(v9))
    {
      int v45 = 0;
      uint64_t v46 = 0;
      unint64_t v47 = 0;
      unint64_t v12 = (uint64_t *)sub_216BEF334((uint64_t)&v48, v10, v11);
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v12);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v13, &v42);
      uint64_t v14 = v46;
      if ((unint64_t)v46 >= v47)
      {
        uint64_t v16 = sub_216A8E01C(&v45, (atomic_uint **)&v42);
      }
      else
      {
        uint64_t v15 = (atomic_uint *)v42;
        *uint64_t v46 = (atomic_uint *)v42;
        if (v15) {
          atomic_fetch_add(v15, 1u);
        }
        uint64_t v16 = (char *)(v14 + 1);
      }
      uint64_t v46 = (atomic_uint **)v16;
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
      uint64_t v17 = v46;
      if (v45 != v46)
      {
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*(v46 - 1);
        int v44 = v18;
        if (v18)
        {
          atomic_fetch_add((atomic_uint *volatile)v18, 1u);
          uint64_t v17 = v46;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v17 - 1));
        uint64_t v46 = v19;
        char v20 = (uint64_t **)sub_216A663FC(&v44);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v20);
      }
      int v42 = (void **)&v45;
      sub_216991094(&v42);
    }
    sub_216BEF4DC((uint64_t)&v48);
  }
  int v42 = v52;
  int v43 = (void **)v53;
  while (v42 != v43)
  {
    uint64_t v21 = sub_216C04500(&v42, (uint64_t)a2, a3);
    uint64_t v24 = *v21 + 48;
    uint64_t v54 = *(void *)(*v21 + 40);
    uint64_t v55 = v24;
    while (v54 != v55)
    {
      uint64_t v25 = *sub_216BEF3B8(&v54, v22, v23);
      sub_216981010(&v45, (_DWORD *)(v25 + 28));
      sub_21698105C((_DWORD *)&v45 + 1, (_DWORD *)(v25 + 32));
      uint64_t v28 = *sub_216BEF3B8(&v54, v26, v27);
      char v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v28 + 36);
      uint64_t v48 = (atomic_uint ***)(v28 + 36);
      char v30 = sub_216A9AA80(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v28 + 36), (uint64_t)&unk_2174BFD90, (_DWORD **)&v48);
      sub_2169C487C((int *)v30 + 9, &v45);
      sub_2169C48D4((int *)v30 + 10, (_DWORD *)&v45 + 1);
      uint64_t v48 = &v45;
      uint64_t v31 = sub_216A9AA80(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (uint64_t)&unk_2174BFD90, (_DWORD **)&v48);
      sub_2169C487C((int *)v31 + 9, (_DWORD *)(v28 + 36));
      sub_2169C48D4((int *)v31 + 10, (_DWORD *)(v28 + 40));
      sub_216981010(&v48, &v45);
      sub_21698105C((_DWORD *)&v48 + 1, (_DWORD *)&v45 + 1);
      while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
      {
        char v32 = (char *)sub_21698EFF0((uint64_t)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
        uint64_t v33 = v32;
        if (a3 + 8 != v32)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v41, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v32 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v32 + 36), 1);
          sub_21697DE94((int *)&v45, (int *)&v41);
          sub_21697DEEC((int *)&v45 + 1, (int *)&v41 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
          sub_21697C414(&v41);
          sub_2169C487C((int *)&v48, (_DWORD *)v33 + 9);
          sub_2169C48D4((int *)&v48 + 1, (_DWORD *)v33 + 10);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, &v41);
        sub_21697DE94((int *)&v48, (int *)&v41);
        sub_21697DEEC((int *)&v48 + 1, (int *)&v41 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
        sub_21697C414(&v41);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
      sub_21697C414(&v48);
      uint64_t v48 = (atomic_uint ***)(v28 + 36);
      std::string::size_type v34 = sub_216A9AA80((uint64_t **)a3, v29, (uint64_t)&unk_2174BFD90, (_DWORD **)&v48);
      sub_2169C487C((int *)v34 + 9, &v45);
      sub_2169C48D4((int *)v34 + 10, (_DWORD *)&v45 + 1);
      uint64_t v48 = &v45;
      unsigned __int8 v35 = sub_216A9AA80(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, (uint64_t)&unk_2174BFD90, (_DWORD **)&v48);
      sub_2169C487C((int *)v35 + 9, v29);
      sub_2169C48D4((int *)v35 + 10, (_DWORD *)(v28 + 40));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
      sub_21697C414(&v45);
      sub_216BEF434(&v54);
    }
    sub_216C0457C(&v42);
  }
  sub_216C0AAFC((uint64_t)&v52, v53[0]);
}

void sub_216C0433C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B91490);
  sub_216C0AAFC(v1 - 216, *(void **)(v1 - 208));
  _Unwind_Resume(a1);
}

void *sub_216C04500(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, s"
            "td::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>>::operator->("
            ") [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::map<pxrInternal__aapl__pxrReserved__::SdfPat"
            "h, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C0457C(void *a1)
{
  char v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>"
            ">::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::map<pxrInternal__aapl__pxrRese"
            "rved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    char v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        char v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        char v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(uint64_t *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_216BBCEA8(a1);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v21, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v2 + 56));
  uint64_t v3 = sub_216BBCEA8(a1);
  uint64_t v4 = *(void *)(v3 + 184);
  uint64_t v5 = *(void *)(v3 + 192);
  if (v4 == v5)
  {
LABEL_23:
    uint64_t v16 = 0;
  }
  else
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)v4, v4 + 16, (uint64_t)&__s1);
      if ((v20 & 0x80u) == 0) {
        size_t v6 = v20;
      }
      else {
        size_t v6 = __n;
      }
      uint64_t v7 = *(unsigned __int8 *)(v4 + 63);
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v4 + 48);
      }
      if (v6 != v7) {
        break;
      }
      if (v8 >= 0) {
        uint64_t v9 = (unsigned __int8 *)(v4 + 40);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v4 + 40);
      }
      if ((v20 & 0x80) != 0)
      {
        uint64_t v14 = __s1;
        int v15 = memcmp(__s1, v9, __n);
        operator delete(v14);
        if (v15) {
          goto LABEL_26;
        }
      }
      else if (v20)
      {
        uint64_t v10 = 0;
        do
        {
          int v11 = *((unsigned __int8 *)&__s1 + v10);
          int v12 = v9[v10];
        }
        while (v11 == v12 && v20 - 1 != v10++);
        if (v11 != v12) {
          goto LABEL_26;
        }
      }
      v4 += 64;
      if (v4 == v5) {
        goto LABEL_23;
      }
    }
    if ((v20 & 0x80) != 0) {
      operator delete(__s1);
    }
LABEL_26:
    uint64_t v16 = 1;
  }
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v21);
  return v16;
}

void sub_216C04780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 24;
}

BOOL pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeLayerStackTimeCodesPerSecond(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(sub_216BBCEA8(a1) + 40);
  uint64_t v5 = (uint64_t *)(sub_216BBCEA8(a1) + 24);
  uint64_t v6 = sub_216851B24(a2);
  if (v6 != sub_216851B24((uint64_t)v4))
  {
    uint64_t v7 = sub_216851B24(a2);
    if (v7 != sub_216851B24((uint64_t)v5)) {
      return 0;
    }
  }
  if (sub_216C0486C(v4, v5)) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = v5;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v9);
  double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v10);
  return TimeCodesPerSecond != *(double *)(sub_216BBCEA8(a1) + 168);
}

uint64_t sub_216C0486C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_21697CF14(a1);
  if (!(v5 & 1 | (unint64_t)v4)) {
    return 0;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(v6)) {
    return 1;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(v8)) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramesPerSecond(v9);
}

pxrInternal__aapl__pxrReserved__::PcpLayerStack *pxrInternal__aapl__pxrReserved__::PcpLayerStack::PcpLayerStack(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *a3)
{
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_26C75D580;
  *((void *)this + 3) = *(void *)a2;
  uint64_t v6 = (void *)((char *)this + 24);
  uint64_t v7 = *((void *)a2 + 1);
  *((void *)this + 4) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  *((void *)this + 5) = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)this + 6) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  sub_21695F340((void *)this + 7, *((void **)a2 + 4), *((void **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  *((void *)this + 1sub_216C01044((uint64_t *)this, 0) = *((void *)a2 + 7);
  uint64_t v9 = *((void *)a2 + 8);
  *((void *)this + 11) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)a2 + 9);
  *((void *)this + 31) = 0;
  *((void *)this + 12) = v10;
  *(_OWORD *)((char *)this + 12sub_216C01044((uint64_t *)this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 32) = 0;
  *((void *)this + 3sub_216C01044((uint64_t *)this, 0) = (char *)this + 248;
  *((void *)this + 33) = (char *)this + 272;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 36) = (char *)this + 296;
  *((void *)this + 4sub_216C01044((uint64_t *)this, 0) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = (char *)this + 320;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 42) = (char *)this + 344;
  *((unsigned char *)this + 36sub_216C01044((uint64_t *)this, 0) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  RootLayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(a3);
  int v12 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)a2 + 56, (uint64_t)RootLayerStackIdentifier);
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)a2, (uint64_t)v12))
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find(a3, v12, &v39);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(&v32);
  v34[0] = 0;
  unint64_t v13 = sub_216BCA2D4(&v39);
  if (!(v14 & 1 | (unint64_t)v13))
  {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute((uint64_t *)a2, RootLayerStackIdentifier, 0, &v36);
    uint64_t v24 = v36;
    uint64_t v23 = (const char *)v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count *)v33;
    char v32 = (char *)v24;
    uint64_t v33 = v23;
    if (v25) {
      sub_216784EC4(v25);
    }
    uint64_t v26 = v38;
    int v38 = 0;
    sub_2168EBBB8(v34, v26);
    sub_2168EBBB8(&v38, 0);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v36);
    goto LABEL_23;
  }
  uint64_t v15 = sub_216BBCEA8(&v39);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute((uint64_t *)a2, RootLayerStackIdentifier, *(const char ***)(v15 + 392), &v36);
  uint64_t v17 = v36;
  uint64_t v16 = (const char *)v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)v33;
  char v32 = (char *)v17;
  uint64_t v33 = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  char v19 = v38;
  int v38 = 0;
  sub_2168EBBB8(v34, v19);
  sub_2168EBBB8(&v38, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v36);
  uint64_t v20 = sub_216BBCEA8(&v39);
  if (!sub_216C0861C((uint64_t)&v32, *(uint64_t **)(v20 + 392)))
  {
LABEL_23:
    sub_216C08678(&v32, (void *)this + 49);
    goto LABEL_24;
  }
  uint64_t v21 = sub_216BBCEA8(&v39);
  *((void *)this + 49) = *(void *)(v21 + 392);
  uint64_t v22 = *(void *)(v21 + 400);
  *((void *)this + 5sub_216C01044((uint64_t *)this, 0) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_24:
  sub_2168EBBB8(v34, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v32);
  uint64_t v27 = v40;
  if (v40 && atomic_fetch_add_explicit((atomic_uint *volatile)(v40 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 11sub_216C01044((uint64_t *)this, 0) = 1065353216;
  *((unsigned char *)this + 448) = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_IsUsd(a3);
  sub_216851EE4((uint64_t)&v36, "Pcp", "PcpLayerStack::PcpLayerStack");
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator BOOL(v6)
    || (char v32 = "pcp/layerStack.cpp",
        uint64_t v33 = "PcpLayerStack",
        v34[0] = (void **)493,
        v34[1] = (void **)"pxrInternal__aapl__pxrReserved__::PcpLayerStack::PcpLayerStack(const PcpLayerStackIdentifier"
                            " &, const Pcp_LayerStackRegistry &)",
        char v35 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v32, "_identifier", 0) & 1) != 0))
  {
    uint64_t FileFormatTarget = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetFileFormatTarget(a3);
    Muteduint64_t Layers = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetMutedLayers(a3);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_Compute((uint64_t)this, FileFormatTarget, MutedLayers);
    if (!*((unsigned char *)this + 448)) {
      pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack((atomic_uint ****)this + 15, (uint64_t **)this + 30, (char *)this + 264, (uint64_t **)this + 36, (uint64_t **)this + 39);
    }
  }
  while (1)
  {
    int v30 = v37;
    LODWORD(v37) = v37 - 1;
    if (!v30) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v36);
  }
  return this;
}

void sub_216C04D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a10, uint64_t *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  sub_21684E6B8((uint64_t)&a21);
  sub_216850298(v26);
  uint64_t v28 = *(std::__shared_weak_count **)(v21 + 400);
  if (v28) {
    sub_216784EC4(v28);
  }
  a21 = a12;
  sub_216981168(&a21);
  sub_216C0AEE0(v23 + 88, *(void **)(v21 + 344));
  sub_21698F21C(a13, *(void **)(v21 + 320));
  sub_21698F21C(a14, *(void **)(v21 + 296));
  sub_21698F21C(v25, *(void **)(v21 + 272));
  sub_21698F21C(a15, *(void **)(v21 + 248));
  sub_2168BBAAC(v24, 0);
  sub_21678A498(a9, *(char **)(v21 + 216));
  a21 = (void **)(v23 - 64);
  sub_216C0ADB0(&a21);
  sub_216AC0740(a10);
  a21 = (void **)(v23 - 104);
  sub_216C0AD2C(&a21);
  sub_216C0ACA8(&a21);
  char v29 = *(atomic_uint **)(v21 + 112);
  if (v29)
  {
    if (atomic_fetch_add_explicit(v29 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v29 + 8))(v29);
    }
  }
  sub_216BCB5AC(v22);
  sub_216859A88(a11, v30);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v21);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::_Compute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 56;
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v41, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(a2, v40);
  v38[0] = 0;
  v38[1] = 0;
  uint64_t v39 = 0;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  v35[0] = 0;
  v35[1] = 0;
  std::string::size_type v34 = (long long *)v35;
  uint64_t v7 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  int v8 = *v7;
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(a1 + 24));
  double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v9);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v33, 0.0, 1.0);
  *(double *)(a1 + 168) = TimeCodesPerSecond;
  int v11 = sub_21697CF14((void *)(a1 + 40));
  if (v12 & 1 | (unint64_t)v11)
  {
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(a1 + 40));
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
    if (pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(a3, (uint64_t *)(a1 + 40), Identifier, &v31))
    {
      sub_21680EE0C((uint64_t **)(a1 + 208), (const void **)&v31, (uint64_t)&v31);
LABEL_14:
      if (SHIBYTE(v32) < 0) {
        operator delete((void *)v31);
      }
      goto LABEL_16;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(a1 + 40));
    double v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v15);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v30, 0.0, 1.0);
    if (sub_216C0486C((uint64_t *)(a1 + 40), (uint64_t *)(a1 + 24)))
    {
      *(double *)(a1 + 168) = v16;
      if (!v8)
      {
        uint64_t v17 = v33;
        double v18 = v16 / TimeCodesPerSecond;
LABEL_10:
        v17[1] = v18;
      }
    }
    else if (!v8)
    {
      uint64_t v17 = v30;
      double v18 = *(double *)(a1 + 168) / v16;
      goto LABEL_10;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v28 = 0;
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(a1, (uint64_t *)(a1 + 40), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v30, v6, (uint64_t)v40, (uint64_t)__p, a3, (uint64_t **)&v34, &v29, v16, (uint64_t *)&v36);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p[0]);
    }
    sub_216C080FC((uint64_t *)&v29, (uint64_t (**)(void, uint64_t))v38);
    sub_216AC0740(&v29);
    goto LABEL_14;
  }
LABEL_16:
  pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(a1, (uint64_t *)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v33, v6, (uint64_t)v40, (uint64_t)v38, a3, (uint64_t **)&v34, &v31, TimeCodesPerSecond, (uint64_t *)&v36);
  char v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 176);
  *(void *)(a1 + 176) = v31;
  *(void *)&long long v31 = 0;
  sub_2168BD378(a1 + 176, v19);
  sub_216AC0740((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v31);
  uint64_t v20 = sub_216C0564C((void *)(a1 + 104));
  if (v21 & 1 | (unint64_t)v20)
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC((uint64_t *)(a1 + 104));
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayers(v22, (const pxrInternal__aapl__pxrReserved__::PcpLayerStack *)a1);
  }
  if ((void)v36 == *((void *)&v36 + 1))
  {
    sub_2168BBAAC((void ***)(a1 + 232), 0);
  }
  else
  {
    uint64_t v23 = (void **)operator new(0x18uLL);
    *uint64_t v23 = 0;
    v23[1] = 0;
    void v23[2] = 0;
    sub_2168BBAAC((void ***)(a1 + 232), v23);
    uint64_t v24 = *(long long **)(a1 + 232);
    long long v25 = *v24;
    *uint64_t v24 = v36;
    long long v36 = v25;
    uint64_t v26 = *((void *)v24 + 2);
    *((void *)v24 + 2) = v37;
    uint64_t v37 = v26;
  }
  sub_21699DA30((uint64_t)&v34, v35[0]);
  std::string::size_type v34 = &v36;
  sub_216787968((void ***)&v34);
  if (SHIBYTE(v39) < 0) {
    operator delete(v38[0]);
  }
  sub_2167877AC((uint64_t)v40, (void *)v40[1]);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v41);
}

void sub_216C05294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char *a28,void *a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_21699DA30((uint64_t)&a28, a29);
  a28 = &a31;
  sub_216787968((void ***)&a28);
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_2167877AC(v39 - 160, *(void **)(v39 - 152));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v39 - 136));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::~PcpLayerStack(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  *(void *)this = &unk_26C75D580;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowLayers(this);
  uint64_t v2 = sub_216C0564C((void *)this + 13);
  if (v3 & 1 | (unint64_t)v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC((uint64_t *)this + 13);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_SetLayersAndRemove(v4, (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)((char *)this + 24), this);
  }
  sub_216850298((uint64_t)this + 408);
  char v5 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v10 = (void **)((char *)this + 368);
  sub_216981168(&v10);
  sub_216C0AEE0((uint64_t)this + 336, *((void **)this + 43));
  sub_21698F21C((uint64_t)this + 312, *((void **)this + 40));
  sub_21698F21C((uint64_t)this + 288, *((void **)this + 37));
  sub_21698F21C((uint64_t)this + 264, *((void **)this + 34));
  sub_21698F21C((uint64_t)this + 240, *((void **)this + 31));
  sub_2168BBAAC((void ***)this + 29, 0);
  sub_21678A498((uint64_t)this + 208, *((char **)this + 27));
  uint64_t v10 = (void **)((char *)this + 184);
  sub_216C0ADB0(&v10);
  sub_216AC0740((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 22);
  uint64_t v10 = (void **)((char *)this + 144);
  sub_216C0AD2C(&v10);
  uint64_t v10 = (void **)((char *)this + 120);
  sub_216C0ACA8(&v10);
  uint64_t v6 = (atomic_uint *)*((void *)this + 14);
  if (v6 && atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpLayerStack *)((char *)this + 80));
  uint64_t v10 = (void **)((char *)this + 56);
  sub_216787968(&v10);
  int v8 = (atomic_uint *)*((void *)this + 6);
  if (v8 && atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (atomic_uint *)*((void *)this + 4);
  if (v9 && atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
  }
  sub_216859A88((uint64_t *)this + 2, v7);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::PcpLayerStack::~PcpLayerStack(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowLayers(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((void *)this + 16);
  char v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)*((void *)this + 15);
  while (v2 != v3)
    uint64_t v2 = sub_216ABB798(v2 - 1);
  *((void *)this + 16) = v3;
  uint64_t v5 = *((void *)this + 18);
  for (uint64_t i = *((void *)this + 19); i != v5; uint64_t i = sub_216BBED8C(i - 56))
    ;
  *((void *)this + 19) = v5;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)this + 22);
  *((void *)this + 22) = 0;
  int v11 = 0;
  sub_2168BD378(this + 176, v6);
  sub_216AC0740(&v11);
  uint64_t v8 = *((void *)this + 23);
  for (uint64_t j = *((void *)this + 24); j != v8; sub_216C0AE48((uint64_t)this + 200, j))
    j -= 64;
  uint64_t v10 = (char *)*((void *)this + 27);
  uint64_t v9 = (void *)((char *)this + 216);
  *(v9 - 3) = v8;
  sub_21678A498((uint64_t)(v9 - 1), v10);
  *(v9 - 1) = v9;
  void *v9 = 0;
  v9[1] = 0;
  sub_216C01544((uint64_t)(v9 + 24));
}

void sub_216C05638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AC0740((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t (*sub_216C0564C(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216C0AFAC;
  }
}

uint64_t sub_216C056AC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::Pcp_LayerStackRegistry>::operator->() const [PtrTemplate = pxrInternal__aapl_"
            "_pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747F2EALL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::Apply(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, unsigned __int8 *a2, char *a3)
{
  v34[5] = *(void ***)MEMORY[0x263EF8340];
  int v6 = a2[4];
  int v7 = a2[3];
  int v8 = a2[160];
  if (a2[4]) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v7 == 0;
  }
  if (!v9 || v8 != 0)
  {
    int v30 = this;
    if (v6)
    {
      int v11 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC((uint64_t *)this + 13);
      RootLayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(v11);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute((uint64_t *)this + 3, RootLayerStackIdentifier, 0, &v32);
      sub_216C05AA4(&v30, (const void ****)v34, &v32);
      sub_2168EBBB8(v34, 0);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v32);
      goto LABEL_16;
    }
    if (v7)
    {
      unint64_t v13 = (const void ****)(a2 + 152);
      if (v8)
      {
LABEL_12:
        char v14 = (uint64_t *)(a2 + 168);
LABEL_15:
        sub_216C05AA4(&v30, v13, v14);
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v13 = (const void ****)(*((void *)this + 49) + 16);
      if (v8) {
        goto LABEL_12;
      }
    }
    char v14 = (uint64_t *)*((void *)this + 49);
    goto LABEL_15;
  }
LABEL_16:
  if (*a2 | a2[1])
  {
    uint64_t v15 = *((void *)this + 15);
    uint64_t v16 = *((void *)this + 16);
    uint64_t v32 = v15;
    uint64_t v33 = v16;
    while (v15 != v16)
    {
      uint64_t v17 = (unint64_t *)sub_216C05CDC(&v32, (uint64_t)a2, a3);
      pxrInternal__aapl__pxrReserved__::PcpLifeboat::Retain((uint64_t)a3, v17);
      sub_216C05D5C(&v32);
      uint64_t v15 = v32;
      uint64_t v16 = v33;
    }
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowLayers(this);
    double v18 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC((uint64_t *)this + 13);
    uint64_t FileFormatTarget = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetFileFormatTarget(v18);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC((uint64_t *)this + 13);
    Muteduint64_t Layers = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetMutedLayers(v20);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_Compute((uint64_t)this, FileFormatTarget, MutedLayers);
  }
  if (!*((unsigned char *)this + 448) && a2[4] | a2[2])
  {
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowRelocations(this);
    uint64_t v23 = (uint64_t **)((char *)this + 240);
    if (a2[4])
    {
      pxrInternal__aapl__pxrReserved__::Pcp_ComputeRelocationsForLayerStack((atomic_uint ****)this + 15, v23, (char *)this + 264, (uint64_t **)this + 36, (uint64_t **)this + 39);
    }
    else
    {
      if (v23 != (uint64_t **)(a2 + 32)) {
        sub_216A9A360((uint64_t **)this + 30, *((void **)a2 + 4), (void *)a2 + 5);
      }
      if ((unsigned __int8 *)((char *)this + 264) != a2 + 8) {
        sub_216A9A360((uint64_t **)this + 33, *((void **)a2 + 1), (void *)a2 + 2);
      }
      if ((unsigned __int8 *)((char *)this + 288) != a2 + 56) {
        sub_216A9A360((uint64_t **)this + 36, *((void **)a2 + 7), (void *)a2 + 8);
      }
      if ((unsigned __int8 *)((char *)this + 312) != a2 + 80) {
        sub_216A9A360((uint64_t **)this + 39, *((void **)a2 + 10), (void *)a2 + 11);
      }
      if ((unsigned __int8 *)((char *)this + 368) != a2 + 104) {
        sub_216A98D9C((uint64_t)this + 368, *((_DWORD **)a2 + 13), *((_DWORD **)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
      }
    }
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)*((void *)this + 42);
    long long v25 = (char *)this + 344;
    int v30 = v24;
    long long v31 = (char *)this + 344;
    while (v24 != (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)v25)
    {
      uint64_t v26 = *(void *)(*sub_216C05E90(&v30, (uint64_t)v23, v22) + 40);
      char v29 = sub_216C05E90(&v30, v27, v28);
      sub_216C05F0C((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*v29 + 32), (uint64_t)&v32);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v26 + 24))(v26, &v32);
      sub_216BBED8C((uint64_t)&v32);
      sub_216C06184(&v30);
      uint64_t v24 = v30;
      long long v25 = v31;
    }
  }
}

void sub_216C05A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EBBB8(v3, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_216C05AA4(void *a1, const void ****a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  int v6 = (uint64_t *)(*a1 + 104);
  int v7 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC(v6);
  RootLayerStackuint64_t Identifier = pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::_GetRootLayerStackIdentifier(v7);
  BOOL v9 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::ResolveLayerStackIdentifier((uint64_t)a3, RootLayerStackIdentifier);
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==((uint64_t)v9, v5 + 24))
  {
    uint64_t v10 = (void *)(v5 + 392);
    if (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(*(uint64_t **)(v5 + 392), a3))
    {
      int v11 = (const void ****)(*v10 + 16);
      pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(v11, a2);
    }
    else
    {
      sub_216C0879C(a3, (pxrInternal__aapl__pxrReserved__::VtDictionary *)a2, &v26);
      long long v20 = v26;
      long long v26 = 0uLL;
      char v21 = *(std::__shared_weak_count **)(v5 + 400);
      *(_OWORD *)uint64_t v10 = v20;
      if (v21)
      {
        sub_216784EC4(v21);
        if (*((void *)&v26 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v26 + 1));
        }
      }
    }
  }
  else
  {
    char v12 = (pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry *)sub_216C056AC(v6);
    pxrInternal__aapl__pxrReserved__::Pcp_LayerStackRegistry::Find(v12, v9, &v26);
    unint64_t v13 = sub_216BCA2D4(&v26);
    if (v14 & 1 | (unint64_t)v13)
    {
      uint64_t v15 = sub_216BBCEA8((uint64_t *)&v26);
      uint64_t v17 = *(void *)(v15 + 392);
      uint64_t v18 = *(void *)(v15 + 400);
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      char v19 = *(std::__shared_weak_count **)(v5 + 400);
      *(void *)(v5 + 392) = v17;
      *(void *)(v5 + 40sub_216C01044((uint64_t *)this, 0) = v18;
      if (v19)
      {
        sub_216784EC4(v19);
        uint64_t v17 = *(void *)(v5 + 392);
      }
      if (pxrInternal__aapl__pxrReserved__::operator!=(a2, (uint64_t *)(v17 + 16), v16)) {
        pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(*(void *)(v5 + 392) + 16), a2);
      }
    }
    else
    {
      sub_216C0879C(a3, (pxrInternal__aapl__pxrReserved__::VtDictionary *)a2, &v25);
      long long v22 = v25;
      long long v25 = 0uLL;
      uint64_t v23 = *(std::__shared_weak_count **)(v5 + 400);
      *(_OWORD *)(v5 + 392) = v22;
      if (v23)
      {
        sub_216784EC4(v23);
        if (*((void *)&v25 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v25 + 1));
        }
      }
    }
    uint64_t v24 = *((void *)&v26 + 1);
    if (*((void *)&v26 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
}

void sub_216C05C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12)
{
  if (a12)
  {
    if (atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C05CDC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfRefPt"
            "r<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved"
            "__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216C05D54()
{
}

void *sub_216C05D5C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = std::vector<pxrInternal__aa"
            "pl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BlowRelocations(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  uint64_t v2 = (char *)this + 248;
  sub_21698F21C((uint64_t)this + 240, *((void **)this + 31));
  *((void *)v2 - 1) = v2;
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  sub_21698F21C((uint64_t)(v2 + 16), *((void **)v2 + 3));
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = v2 + 24;
  sub_21698F21C((uint64_t)(v2 + 40), *((void **)v2 + 6));
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = 0;
  *((void *)v2 + 5) = v2 + 48;
  sub_21698F21C((uint64_t)(v2 + 64), *((void **)v2 + 9));
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 1sub_216C01044((uint64_t *)this, 0) = 0;
  *((void *)v2 + 8) = v2 + 72;
  char v4 = (_DWORD *)*((void *)v2 + 15);
  for (uint64_t i = (_DWORD *)*((void *)v2 + 16); i != v4; sub_216981128((uint64_t)this + 384, i))
    i -= 2;
  *((void *)this + 47) = v4;
}

void *sub_216C05E90(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, s"
            "td::unique_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aapl__pxrReserved"
            "__::SdfPath::FastLessThan>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, std::uniq"
            "ue_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aapl__pxrReserved__::SdfP"
            "ath::FastLessThan>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216C05F0C(uint64_t HasPrefix@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = HasPrefix;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = (uint64_t *)v25;
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  int v7 = (void *)(HasPrefix + 248);
  char v6 = *(void **)(HasPrefix + 248);
  if (v6)
  {
    int v8 = (void *)(HasPrefix + 248);
    do
    {
      HasPrefix = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 28), a2);
      BOOL v9 = v6 + 1;
      if (!HasPrefix)
      {
        BOOL v9 = v6;
        int v8 = v6;
      }
      char v6 = (void *)*v9;
    }
    while (*v9);
    if (v8 != v7)
    {
      do
      {
        HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
        if ((HasPrefix & 1) == 0) {
          break;
        }
        sub_216C088F8(&v24, (void *)((char *)v8 + 28), (_DWORD *)v8 + 7);
        HasPrefix = (uint64_t)sub_216BE0D70((uint64_t)v22, (unsigned int *)v8 + 9, (_DWORD *)v8 + 9);
        uint64_t v10 = (void *)v8[1];
        if (v10)
        {
          do
          {
            int v11 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            int v11 = (void *)v8[2];
            BOOL v12 = *v11 == (void)v8;
            int v8 = v11;
          }
          while (!v12);
        }
        int v8 = v11;
      }
      while (v11 != v7);
    }
  }
  unint64_t v13 = *(void **)(v4 + 296);
  if (v13)
  {
    char v14 = (unsigned int *)(v4 + 296);
    uint64_t v15 = (unsigned int *)(v4 + 296);
    do
    {
      HasPrefix = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), a2);
      uint64_t v16 = v13 + 1;
      if (!HasPrefix)
      {
        uint64_t v16 = v13;
        uint64_t v15 = (unsigned int *)v13;
      }
      unint64_t v13 = (void *)*v16;
    }
    while (*v16);
    if (v15 != v14)
    {
      do
      {
        HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 + 7), a2);
        if ((HasPrefix & 1) == 0) {
          break;
        }
        HasPrefix = (uint64_t)sub_216A62F60(v22, v15 + 9);
        if (!HasPrefix)
        {
          sub_216C088F8(&v24, (unint64_t *)(v15 + 7), v15 + 7);
          HasPrefix = (uint64_t)sub_216BE0D70((uint64_t)v22, v15 + 9, v15 + 9);
        }
        uint64_t v17 = (unsigned int *)*((void *)v15 + 1);
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = *(unsigned int **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (unsigned int *)*((void *)v15 + 2);
            BOOL v12 = *(void *)v18 == (void)v15;
            uint64_t v15 = v18;
          }
          while (!v12);
        }
        uint64_t v15 = v18;
      }
      while (v18 != v14);
    }
  }
  char v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)HasPrefix);
  v21[0] = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v19);
  long long v20 = sub_216C089DC(&v24, (unint64_t *)v21[0], (uint64_t)&unk_2174BFD90, v21);
  sub_2169C487C((int *)v20 + 9, v19);
  sub_2169C48D4((int *)v20 + 10, (_DWORD *)v19 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v21, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(&v24, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v21, a3);
  sub_216BE0588((uint64_t)v22);
  sub_21698F21C((uint64_t)&v24, v25[0]);
}

void sub_216C0614C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

void *sub_216C06184(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aap"
            "l__pxrReserved__::SdfPath::FastLessThan>>::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PcpMapExpression::Variable>, pxrInternal__aapl__pxrRe"
            "served__::SdfPath::FastLessThan>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 120;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers@<X0>(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t result = (unint64_t)sub_21697CF14((void *)this + 5);
  if (v5 & 1 | result)
  {
    char v6 = (uint64_t *)*((void *)this + 15);
    int v7 = (uint64_t *)*((void *)this + 16);
    if (v6 == v7)
    {
      char v8 = (uint64_t *)*((void *)this + 15);
    }
    else
    {
      while (!sub_216ABA3A0((uint64_t *)this + 3, v6))
      {
        if (++v6 == v7)
        {
          char v6 = v7;
          break;
        }
      }
      char v8 = v6;
      char v6 = (uint64_t *)*((void *)this + 16);
    }
    if (v8 != v6) {
      return (unint64_t)sub_216C0AFF0(a2, (void *)*a2, *((uint64_t **)this + 15), v8, ((uint64_t)v8 - *((void *)this + 15)) >> 3);
    }
    v9[0] = "pcp/layerStack.cpp";
    v9[1] = "GetSessionLayers";
    v9[2] = 675;
    v9[3] = "SdfLayerHandleVector pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetSessionLayers() const";
    char v10 = 0;
    unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "rootLayerIt != _layers.end()", 0);
    if (result) {
      return (unint64_t)sub_216C0AFF0(a2, (void *)*a2, *((uint64_t **)this + 15), v8, ((uint64_t)v8 - *((void *)this + 15)) >> 3);
    }
  }
  return result;
}

void sub_216C06334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216850BF4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerTree(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 176;
}

pxrInternal__aapl__pxrReserved__::SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[16] - a1[15];
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 >> 3;
  uint64_t v7 = -40;
  while (!sub_216ABA3A0(a2, (void *)(a1[15] + v5)))
  {
    v7 -= 56;
    v5 += 8;
    if (!--v6) {
      return 0;
    }
  }
  BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1[18] - v7);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v9)) {
    return 0;
  }
  else {
    return v9;
  }
}

pxrInternal__aapl__pxrReserved__::SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[15];
  uint64_t v3 = a1[16] - (void)v2;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3 >> 3;
  uint64_t v5 = -40;
  while (*v2 != *a2)
  {
    v5 -= 56;
    ++v2;
    if (!--v4) {
      return 0;
    }
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1[18] - v5);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v7)) {
    return 0;
  }
  else {
    return v7;
  }
}

pxrInternal__aapl__pxrReserved__::SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, unint64_t a2)
{
  uint64_t v3 = *((void *)this + 18);
  if (0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 19) - v3) >> 3) <= a2)
  {
    v8[0] = "pcp/layerStack.cpp";
    v8[1] = "GetLayerOffsetForLayer";
    v8[2] = 727;
    v8[3] = "const SdfLayerOffset *pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(size_t) const";
    char v9 = 0;
    int v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "layerIdx < _mapFunctions.size()", 0);
    unint64_t result = 0;
    if (!v7) {
      return result;
    }
    uint64_t v3 = *((void *)this + 18);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(v3 + 56 * a2 + 40);
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(v4)) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetMutedLayers(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 208;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
      uint64_t v3 = *a2;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  if (v6 == v5) {
    return 0;
  }
  uint64_t v7 = v6 + 8;
  do
  {
    uint64_t v8 = *(void *)(v7 - 8);
    BOOL result = v8 == v3;
    BOOL v10 = v8 == v3 || v7 == v5;
    v7 += 8;
  }
  while (!v10);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 120);
  uint64_t v3 = *(void **)(a1 + 128);
  if (v2 != v3)
  {
    while (*v2 != *a2)
    {
      if (++v2 == v3)
      {
        uint64_t v2 = *(void **)(a1 + 128);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesSourceToTarget(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 240;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesTargetToSource(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 264;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesSourceToTarget(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 288;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesTargetToSource(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 312;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this)
{
  return (uint64_t)this + 368;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetExpressionForRelocatesAtPath(pxrInternal__aapl__pxrReserved__::PcpLayerStack *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v17[7] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)this + 360;
  sub_21685036C((uint64_t)v17, (uint64_t)this + 360);
  uint64_t v5 = (void *)*((void *)this + 43);
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v6 = *(void *)a2;
  uint64_t v7 = (void *)((char *)this + 344);
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      BOOL v10 = v5;
    }
    else {
      BOOL v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (void *)((char *)this + 344) && v6 >= v7[4]) {
    uint64_t v11 = v7[5];
  }
  else {
LABEL_12:
  }
    uint64_t v11 = 0;
  BOOL v12 = (unsigned char *)v17[0];
  if (v17[0])
  {
    __dmb(0xBu);
    unsigned char *v12 = 0;
  }
  if (v11) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
  }
  sub_216C05F0C((uint64_t)this, a2, (uint64_t)v17);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::NewVariable((uint64_t)v17, &v16);
  sub_216BBED8C((uint64_t)v17);
  sub_21685036C((uint64_t)v17, (uint64_t)v4);
  uint64_t v14 = sub_216C0B344((uint64_t)this + 336, (unint64_t *)a2, a2, &v16)[5];
  uint64_t v15 = (unsigned char *)v17[0];
  if (v17[0])
  {
    __dmb(0xBu);
    unsigned char *v15 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 32))(v14);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216C067B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t **a8@<X7>, void *a9@<X8>, double a10@<D0>, uint64_t *a11)
{
  *(void *)&long long v195 = a5;
  v182 = a9;
  uint64_t v229 = *MEMORY[0x263EF8340];
  sub_21699DAC4(a8, (uint64_t)a2, a2);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
  *((void *)&v195 + 1) = a2;
  if (v16)
  {
    if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  v227[0] = v16;
  sub_2168BD80C((uint64_t *)v227);
  unint64_t v17 = *(void *)(a1 + 136);
  uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 128);
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v20 = *(void *)(a1 + 120);
    uint64_t v21 = ((uint64_t)v18 - v20) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v22 = v17 - v20;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    v216[0] = a1 + 136;
    if (v24) {
      long long v25 = (char *)sub_21677CB28(a1 + 136, v24);
    }
    else {
      long long v25 = 0;
    }
    long long v26 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v25[8 * v21];
    v213[0] = v25;
    v213[1] = v26;
    p_p = (std::string *)&v25[8 * v24];
    *long long v26 = v227[0];
    v227[0] = 0;
    uint64_t v214 = (uint64_t)(v26 + 1);
    sub_216C0B4DC((uint64_t *)(a1 + 120), v213);
    char v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 128);
    sub_216C0B5EC((uint64_t)v213);
  }
  else
  {
    *uint64_t v18 = v227[0];
    char v19 = v18 + 1;
    v227[0] = 0;
    *(void *)(a1 + 128) = v19;
  }
  *(void *)(a1 + 128) = v19;
  uint64_t v27 = sub_216ABB798(v227);
  uint64_t v28 = (void **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v27);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v28, a3, (uint64_t)v227);
  unint64_t v29 = *(void *)(a1 + 152);
  if (v29 >= *(void *)(a1 + 160))
  {
    uint64_t v30 = sub_216C0B63C((uint64_t *)(a1 + 144), (uint64_t)v227);
  }
  else
  {
    sub_216BBEE18(*(_DWORD **)(a1 + 152), (uint64_t)v227);
    *(_OWORD *)(v29 + 4sub_216C01044((uint64_t *)this, 0) = v228;
    uint64_t v30 = v29 + 56;
    *(void *)(a1 + 152) = v29 + 56;
  }
  *(void *)(a1 + 152) = v30;
  long long v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v31, (uint64_t)v213);
  sub_216C081DC((uint64_t)v213, (uint64_t)&v210);
  if (v213[1]) {
    sub_216784EC4((std::__shared_weak_count *)v213[1]);
  }
  v192 = (atomic_uint **)(a2 + 1);
  uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(v32, &v208);
  v190 = a8;
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v211 - v210) >> 3);
  unint64_t v207 = v33;
  if (v211 != v210)
  {
    uint64_t v34 = 0;
    unint64_t v33 = 0;
    while (1)
    {
      int IsVariableExpression = pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v210 + v34);
      uint64_t v36 = v210;
      if (!IsVariableExpression) {
        break;
      }
      uint64_t v37 = *(void *)(a1 + 392);
      int v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216779094(&__p, "sublayer");
      uint64_t v39 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v38);
      pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v36 + v34), v37, &__p, *((uint64_t *)&v195 + 1), v39, a1 + 408, a11, (uint64_t)v213);
      uint64_t v40 = v210 + v34;
      if (*(char *)(v210 + v34 + 23) < 0) {
        operator delete(*(void **)v40);
      }
      long long v41 = *(_OWORD *)v213;
      *(void *)(v40 + 16) = v214;
      *(_OWORD *)uint64_t v40 = v41;
      HIBYTE(v214) = 0;
      LOBYTE(v213[0]) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v36 = v210;
      if (*(char *)(v210 + v34 + 23) < 0)
      {
        if (*(void *)(v210 + v34 + 8)) {
          break;
        }
      }
      else if (*(unsigned char *)(v210 + v34 + 23))
      {
        break;
      }
LABEL_39:
      ++v33;
      v34 += 24;
      if (v33 == v207) {
        goto LABEL_40;
      }
    }
    v213[0] = 0;
    v213[1] = 0;
    uint64_t v214 = 0;
    if (pxrInternal__aapl__pxrReserved__::Pcp_MutedLayers::IsLayerMuted(a7, *((uint64_t **)&v195 + 1), v36 + v34, (long long *)v213))
    {
      sub_21680EE0C((uint64_t **)(a1 + 208), (const void **)v213, (uint64_t)v213);
      uint64_t v42 = v210 + v34;
      if (*(char *)(v210 + v34 + 23) < 0)
      {
        **(unsigned char **)uint64_t v42 = 0;
        *(void *)(v42 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v42 = 0;
        *(unsigned char *)(v42 + 23) = 0;
      }
    }
    if (SHIBYTE(v214) < 0) {
      operator delete(v213[0]);
    }
    goto LABEL_39;
  }
LABEL_40:
  sub_216C0B8DC(v206, v33);
  sub_216782DE0(v205, v207);
  int v43 = v190;
  sub_216C0B95C(&v202, v207);
  uint64_t v183 = a7;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v195;
  v199 = v206;
  v200 = &v202;
  v201 = v205;
  v213[0] = (void *)a1;
  v213[1] = &v207;
  uint64_t v214 = (uint64_t)&v210;
  p_p = &__p;
  v216[0] = a4;
  v223.i64[0] = (uint64_t)v213;
  __dst.i64[0] = (uint64_t)&unk_26C75D660;
  __dst.i64[1] = (uint64_t)&v223;
  tbb::interface7::internal::isolate_within_arena(&__dst, 0);
  long long v196 = 0uLL;
  unint64_t v197 = 0;
  if (v207)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    v191 = (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 24);
    uint64_t v189 = (uint64_t)(a11 + 2);
    uint64_t v48 = 40;
    int64x2_t v185 = vdupq_n_s64(0x7FF0000000000000uLL);
    do
    {
      if (*(char *)(v210 + v46 + 23) < 0)
      {
        if (!*(void *)(v210 + v46 + 8)) {
          goto LABEL_132;
        }
      }
      else if (!*(unsigned char *)(v210 + v46 + 23))
      {
        goto LABEL_132;
      }
      if (*(void *)(v206[0] + v45))
      {
        sub_216ABBA60((uint64_t *)v213, (uint64_t *)(v206[0] + v45));
        uint64_t v49 = sub_216C0BA60((uint64_t)v43, (uint64_t)v213);
        uint64_t v50 = v213[1];
        if (v213[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v50 + 8))(v50);
        }
        if (!v49)
        {
          pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__dst.i64, 0.0, 1.0);
          if (v47 >= (v209 - (unsigned char *)v208) >> 4)
          {
            v213[0] = "pcp/layerStack.cpp";
            v213[1] = "_BuildLayerStack";
            uint64_t v214 = 1123;
            p_p = (std::string *)"SdfLayerTreeHandle pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(co"
                                 "nst SdfLayerHandle &, const SdfLayerOffset &, double, const ArResolverContext &, const "
                                 "SdfLayer::FileFormatArguments &, const std::string &, const Pcp_MutedLayers &, SdfLayer"
                                 "HandleSet *, PcpErrorVector *)";
            LOBYTE(v216[0]) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v213, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer index");
            int64x2_t v77 = v185;
          }
          else
          {
            int64x2_t v77 = *(int64x2_t *)((char *)v208 + v44);
          }
          int64x2_t __dst = v77;
          if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&__dst)
            || (v213[0] = COERCE_VOID_(pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&__dst)),
                v213[1] = v94,
                !pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v213)))
          {
            v95 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOffset::New(&v223);
            v96 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v95);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v213, v191, v96);
            uint64_t v97 = v223.i64[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v223.i64[0] + 16, (uint64_t)v213);
            sub_21697DE94((int *)(v97 + 96), &v218);
            sub_21697DEEC((int *)(v97 + 100), v219);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v219);
            sub_21697C414(&v218);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v217);
            v221.i64[0] = (uint64_t)v216;
            sub_216787968((void ***)&v221);
            v98 = p_p;
            if (p_p
              && atomic_fetch_add_explicit((atomic_uint *volatile)&p_p->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
            }
            v99 = v213[1];
            if (v213[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(void *))(*(void *)v99 + 8))(v99);
            }
            uint64_t v100 = v223.i64[0];
            *(void *)(v223.i64[0] + 104) = **((void **)&v195 + 1);
            sub_2168CD2FC((atomic_uint **)(v100 + 112), v192);
            sub_216ABBA60((uint64_t *)v213, (uint64_t *)(v206[0] + v45));
            v101 = *(atomic_uint **)(v223.i64[0] + 128);
            *(_OWORD *)(v223.i64[0] + 12sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)v213;
            v213[1] = 0;
            if (v101)
            {
              if (atomic_fetch_add_explicit(v101 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v101 + 8))(v101);
              }
              v102 = v213[1];
              v213[0] = 0;
              if (v213[1]
                && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*(void *)v102 + 8))(v102);
              }
            }
            int64x2_t v103 = v223;
            *(int64x2_t *)(v223.i64[0] + 136) = __dst;
            if (v103.i64[1]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v103.i64[1] + 8), 1uLL, memory_order_relaxed);
            }
            v105 = (int64x2_t *)a11[1];
            unint64_t v104 = a11[2];
            if ((unint64_t)v105 >= v104)
            {
              uint64_t v107 = ((uint64_t)v105->i64 - *a11) >> 4;
              unint64_t v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v109 = v104 - *a11;
              if (v109 >> 3 > v108) {
                unint64_t v108 = v109 >> 3;
              }
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v108;
              }
              v216[0] = a11 + 2;
              v111 = (char *)sub_216787EE0(v189, v110);
              v112 = &v111[16 * v107];
              v213[0] = v111;
              v213[1] = v112;
              p_p = (std::string *)&v111[16 * v113];
              *(int64x2_t *)v112 = v103;
              uint64_t v214 = (uint64_t)(v112 + 16);
              sub_216BD6608(a11, v213);
              v106 = (int64x2_t *)a11[1];
              sub_216788028(v213);
              int v43 = v190;
            }
            else
            {
              int64x2_t *v105 = v103;
              v106 = v105 + 1;
              a11[1] = (uint64_t)v105[1].i64;
            }
            a11[1] = (uint64_t)v106;
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v213, 0.0, 1.0);
            int64x2_t __dst = *(int64x2_t *)v213;
            if (v223.i64[1]) {
              sub_216784EC4((std::__shared_weak_count *)v223.i64[1]);
            }
          }
          v213[0] = 0;
          v114 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(v206[0] + v45));
          v213[0] = COERCE_VOID_(pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v114));
          v115 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_DISABLE_TIME_SCALING_BY_LAYER_TCPS);
          if (!v115) {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
          }
          if (!*v115 && *(double *)v213 != a10) {
            *(double *)&__dst.i64[1] = *(double *)&__dst.i64[1] * a10 / *(double *)v213;
          }
          __dst.i64[0] = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a3, (double *)__dst.i64);
          __dst.i64[1] = v116;
          v117 = (void *)(v206[0] + v45);
          uint64_t v118 = *((void *)&v196 + 1);
          if (*((void *)&v196 + 1) >= v197)
          {
            uint64_t v120 = sub_216C0BAEC((uint64_t *)&v196, v117, &__dst, (uint64_t *)v213);
          }
          else
          {
            v119 = v213[0];
            **((void **)&v196 + 1) = *v117;
            sub_2168BD80C((uint64_t *)v118);
            *(int64x2_t *)(v118 + 8) = __dst;
            *(void *)(v118 + 24) = v119;
            uint64_t v120 = v118 + 32;
          }
          *((void *)&v196 + 1) = v120;
          goto LABEL_132;
        }
        uint64_t v51 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorSublayerCycle::New(&__dst);
        uint64_t v52 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v51);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v213, v191, v52);
        uint64_t v53 = __dst.i64[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__dst.i64[0] + 16, (uint64_t)v213);
        sub_21697DE94((int *)(v53 + 96), &v218);
        sub_21697DEEC((int *)(v53 + 100), v219);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v219);
        sub_21697C414(&v218);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v217);
        v223.i64[0] = (uint64_t)v216;
        sub_216787968((void ***)&v223);
        uint64_t v54 = p_p;
        if (p_p
          && atomic_fetch_add_explicit((atomic_uint *volatile)&p_p->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(std::string *))(v54->__r_.__value_.__r.__words[0] + 8))(v54);
        }
        uint64_t v55 = v213[1];
        if (v213[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v55 + 8))(v55);
        }
        uint64_t v56 = __dst.i64[0];
        *(void *)(__dst.i64[0] + 104) = **((void **)&v195 + 1);
        sub_2168CD2FC((atomic_uint **)(v56 + 112), v192);
        sub_216ABBA60((uint64_t *)v213, (uint64_t *)(v206[0] + v45));
        v57 = *(atomic_uint **)(__dst.i64[0] + 128);
        *(_OWORD *)(__dst.i64[0] + 12sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)v213;
        v213[1] = 0;
        if (v57)
        {
          if (atomic_fetch_add_explicit(v57 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v57 + 8))(v57);
          }
          v58 = v213[1];
          v213[0] = 0;
          if (v213[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v58 + 8))(v58);
          }
        }
        int64x2_t v59 = __dst;
        uint64_t v60 = __dst.i64[1];
        if (__dst.i64[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst.i64[1] + 8), 1uLL, memory_order_relaxed);
        }
        v62 = (void *)a11[1];
        unint64_t v61 = a11[2];
        if ((unint64_t)v62 >= v61)
        {
          int64x2_t v186 = v59;
          uint64_t v78 = ((uint64_t)v62 - *a11) >> 4;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v80 = v61 - *a11;
          if (v80 >> 3 > v79) {
            unint64_t v79 = v80 >> 3;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v79;
          }
          v216[0] = a11 + 2;
          v82 = (char *)sub_216787EE0(v189, v81);
          v83 = &v82[16 * v78];
          v213[0] = v82;
          v213[1] = v83;
          p_p = (std::string *)&v82[16 * v84];
          *(int64x2_t *)v83 = v186;
          uint64_t v214 = (uint64_t)(v83 + 16);
          sub_216BD6608(a11, v213);
          v63 = (void *)a11[1];
          sub_216788028(v213);
        }
        else
        {
          void *v62 = v59.i64[0];
          v62[1] = v60;
          v63 = v62 + 2;
          a11[1] = (uint64_t)(v62 + 2);
        }
        a11[1] = (uint64_t)v63;
        v85 = (std::__shared_weak_count *)__dst.i64[1];
        if (__dst.i64[1]) {
          goto LABEL_95;
        }
      }
      else
      {
        v64 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerPath::New(&__dst);
        v65 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v64);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v213, v191, v65);
        uint64_t v66 = __dst.i64[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__dst.i64[0] + 16, (uint64_t)v213);
        sub_21697DE94((int *)(v66 + 96), &v218);
        sub_21697DEEC((int *)(v66 + 100), v219);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v219);
        sub_21697C414(&v218);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v217);
        v223.i64[0] = (uint64_t)v216;
        sub_216787968((void ***)&v223);
        v67 = p_p;
        if (p_p
          && atomic_fetch_add_explicit((atomic_uint *volatile)&p_p->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(std::string *))(v67->__r_.__value_.__r.__words[0] + 8))(v67);
        }
        v68 = v213[1];
        if (v213[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v68 + 8))(v68);
        }
        uint64_t v69 = __dst.i64[0];
        *(void *)(__dst.i64[0] + 104) = **((void **)&v195 + 1);
        sub_2168CD2FC((atomic_uint **)(v69 + 112), v192);
        std::string::operator=((std::string *)(__dst.i64[0] + 120), (const std::string *)(v202 + v48));
        uint64_t v70 = v205[0];
        uint64_t v71 = __dst.i64[0] + 144;
        if (*(char *)(__dst.i64[0] + 167) < 0) {
          operator delete(*(void **)v71);
        }
        v72 = (unsigned char *)(v70 + v46);
        long long v73 = *(_OWORD *)(v70 + v46);
        *(void *)(v71 + 16) = *(void *)(v70 + v46 + 16);
        *(_OWORD *)uint64_t v71 = v73;
        v72[23] = 0;
        unsigned char *v72 = 0;
        int64x2_t v74 = __dst;
        int64x2_t __dst = 0uLL;
        v76 = (int64x2_t *)a11[1];
        unint64_t v75 = a11[2];
        if ((unint64_t)v76 >= v75)
        {
          int64x2_t v187 = v74;
          uint64_t v86 = ((uint64_t)v76->i64 - *a11) >> 4;
          unint64_t v87 = v86 + 1;
          int v43 = v190;
          if ((unint64_t)(v86 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v88 = v75 - *a11;
          if (v88 >> 3 > v87) {
            unint64_t v87 = v88 >> 3;
          }
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v89 = v87;
          }
          v216[0] = a11 + 2;
          v90 = (char *)sub_216787EE0(v189, v89);
          v91 = &v90[16 * v86];
          v213[0] = v90;
          v213[1] = v91;
          p_p = (std::string *)&v90[16 * v92];
          *(int64x2_t *)v91 = v187;
          uint64_t v214 = (uint64_t)(v91 + 16);
          sub_216BD6608(a11, v213);
          uint64_t v93 = a11[1];
          sub_216788028(v213);
          v85 = (std::__shared_weak_count *)__dst.i64[1];
          a11[1] = v93;
          if (!v85) {
            goto LABEL_132;
          }
LABEL_95:
          sub_216784EC4(v85);
          goto LABEL_132;
        }
        int64x2_t *v76 = v74;
        a11[1] = (uint64_t)v76[1].i64;
        int v43 = v190;
      }
LABEL_132:
      ++v47;
      v46 += 24;
      v45 += 8;
      v44 += 16;
      v48 += 64;
    }
    while (v47 != v207);
  }
  sub_216C08278((uint64_t *)(a1 + 184), ((v203 - v202) >> 6) + ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 6));
  uint64_t v123 = v183;
  uint64_t v124 = a6;
  uint64_t v125 = v202;
  uint64_t v126 = v203;
  if (v202 != v203)
  {
    do
    {
      v127 = sub_21697CF14((void *)v125);
      if (v121 & 1 | (unint64_t)v127)
      {
        unint64_t v128 = *(void *)(a1 + 192);
        if (v128 >= *(void *)(a1 + 200))
        {
          uint64_t v131 = sub_216C0BFC4((uint64_t *)(a1 + 184), v125);
        }
        else
        {
          *(_OWORD *)unint64_t v128 = *(_OWORD *)v125;
          *(void *)uint64_t v125 = 0;
          *(void *)(v125 + 8) = 0;
          long long v129 = *(_OWORD *)(v125 + 16);
          *(void *)(v128 + 32) = *(void *)(v125 + 32);
          *(_OWORD *)(v128 + 16) = v129;
          *(void *)(v125 + 24) = 0;
          *(void *)(v125 + 32) = 0;
          *(void *)(v125 + 16) = 0;
          long long v130 = *(_OWORD *)(v125 + 40);
          *(void *)(v128 + 56) = *(void *)(v125 + 56);
          *(_OWORD *)(v128 + 4sub_216C01044((uint64_t *)this, 0) = v130;
          *(void *)(v125 + 48) = 0;
          *(void *)(v125 + 56) = 0;
          *(void *)(v125 + 4sub_216C01044((uint64_t *)this, 0) = 0;
          uint64_t v131 = v128 + 64;
        }
        *(void *)(a1 + 192) = v131;
      }
      v125 += 64;
    }
    while (v125 != v126);
    uint64_t v125 = v202;
    for (uint64_t i = v203; i != v125; sub_216C0AE48((uint64_t)&v204, i))
      i -= 64;
  }
  uint64_t v203 = v125;
  uint64_t v133 = *(unsigned __int8 *)(a6 + 23);
  if ((v133 & 0x80u) != 0) {
    uint64_t v133 = *(void *)(a6 + 8);
  }
  if (v133)
  {
    v134 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(*((uint64_t **)&v195 + 1));
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers(v134))
    {
      if (*(char *)(a6 + 23) < 0)
      {
        sub_216778F24(&__dst, *(void **)a6, *(void *)(a6 + 8));
      }
      else
      {
        int64x2_t __dst = *(int64x2_t *)a6;
        uint64_t v226 = *(void *)(a6 + 16);
      }
      long long v135 = v196;
      if (SHIBYTE(v226) < 0)
      {
        sub_216778F24(&v223, (void *)__dst.i64[0], __dst.u64[1]);
      }
      else
      {
        int64x2_t v223 = __dst;
        uint64_t v224 = v226;
      }
      if ((uint64_t)(*((void *)&v135 + 1) - v135) < 1)
      {
        v136 = 0;
        uint64_t v138 = 0;
      }
      else
      {
        v136 = sub_2168D6010((uint64_t)(*((void *)&v135 + 1) - v135) >> 5);
        uint64_t v138 = v137;
      }
      sub_216C0976C((uint64_t *)v135, *((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)&v135 + 1), (unsigned __int8 *)&v223, (uint64_t)(*((void *)&v135 + 1) - v135) >> 5, (uint64_t)v136, v138);
      if (v136) {
        operator delete(v136);
      }
      if (SHIBYTE(v224) < 0) {
        operator delete((void *)v223.i64[0]);
      }
      uint64_t v121 = v196;
      int v43 = v190;
      if ((void)v196 != *((void *)&v196 + 1)
        && sub_216C09678((unsigned __int8 *)&__dst, (uint64_t *)v196))
      {
        uint64_t v140 = *((void *)&v196 + 1);
        v139 = (uint64_t *)v196;
        if (SHIBYTE(v226) < 0)
        {
          sub_216778F24(&v221, (void *)__dst.i64[0], __dst.u64[1]);
        }
        else
        {
          int64x2_t v221 = __dst;
          uint64_t v222 = v226;
        }
        uint64_t v141 = sub_216C0A644((uint64_t)v139, v140, v139, (unsigned __int8 *)&v221);
        if (SHIBYTE(v222) < 0) {
          operator delete((void *)v221.i64[0]);
        }
        if (v141 - (uint64_t)v139 >= 33)
        {
          v142 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpErrorInvalidSublayerOwnership::New(&v220);
          v143 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v142);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v213, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)(a1 + 24), v143);
          uint64_t v144 = v220;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v220 + 16, (uint64_t)v213);
          sub_21697DE94((int *)(v144 + 96), &v218);
          sub_21697DEEC((int *)(v144 + 100), v219);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v219);
          sub_21697C414(&v218);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v217);
          *(void *)&long long v212 = v216;
          sub_216787968((void ***)&v212);
          v145 = p_p;
          if (p_p
            && atomic_fetch_add_explicit((atomic_uint *volatile)&p_p->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string *))(v145->__r_.__value_.__r.__words[0] + 8))(v145);
          }
          v146 = v213[1];
          int v43 = v190;
          if (v213[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)v213[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v146 + 8))(v146);
          }
          std::string::operator=((std::string *)(v220 + 104), (const std::string *)a6);
          uint64_t v147 = v220;
          *(void *)(v220 + 128) = **((void **)&v195 + 1);
          sub_2168CD2FC((atomic_uint **)(v147 + 136), v192);
          for (; v139 != (uint64_t *)v141; v139 += 4)
          {
            v148 = (uint64_t *)v220;
            sub_216ABBA60((uint64_t *)&v212, v139);
            unint64_t v149 = v148[20];
            v150 = (_OWORD *)v148[19];
            if ((unint64_t)v150 >= v149)
            {
              uint64_t v151 = v148[18];
              uint64_t v152 = ((uint64_t)v150 - v151) >> 4;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v154 = v149 - v151;
              if (v154 >> 3 > v153) {
                unint64_t v153 = v154 >> 3;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v155 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              v216[0] = v148 + 20;
              v156 = (char *)sub_216787EE0((uint64_t)(v148 + 20), v155);
              v157 = &v156[16 * v152];
              v213[0] = v156;
              v213[1] = v157;
              p_p = (std::string *)&v156[16 * v158];
              *(_OWORD *)v157 = v212;
              long long v212 = 0uLL;
              uint64_t v214 = (uint64_t)(v157 + 16);
              sub_216AF3C5C(v148 + 18, v213);
              uint64_t v159 = v148[19];
              sub_216852520((uint64_t)v213);
              v160 = (atomic_uint *)*((void *)&v212 + 1);
              v148[19] = v159;
              int v43 = v190;
              if (v160 && atomic_fetch_add_explicit(v160 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v160 + 8))(v160);
              }
            }
            else
            {
              _OWORD *v150 = v212;
              v148[19] = (uint64_t)(v150 + 1);
            }
          }
          long long v161 = v220;
          uint64_t v162 = *((void *)&v220 + 1);
          if (*((void *)&v220 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v220 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v163 = a11[2];
          v164 = (void *)a11[1];
          uint64_t v123 = v183;
          if ((unint64_t)v164 >= v163)
          {
            long long v193 = v161;
            uint64_t v166 = ((uint64_t)v164 - *a11) >> 4;
            unint64_t v167 = v166 + 1;
            if ((unint64_t)(v166 + 1) >> 60) {
              sub_21677CB10();
            }
            uint64_t v168 = v163 - *a11;
            if (v168 >> 3 > v167) {
              unint64_t v167 = v168 >> 3;
            }
            if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v169 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v169 = v167;
            }
            v216[0] = a11 + 2;
            v170 = (char *)sub_216787EE0((uint64_t)(a11 + 2), v169);
            uint64_t v124 = a6;
            v171 = &v170[16 * v166];
            v213[0] = v170;
            v213[1] = v171;
            p_p = (std::string *)&v170[16 * v172];
            *(_OWORD *)v171 = v193;
            uint64_t v214 = (uint64_t)(v171 + 16);
            sub_216BD6608(a11, v213);
            v165 = (void *)a11[1];
            sub_216788028(v213);
          }
          else
          {
            void *v164 = v161;
            v164[1] = v162;
            v165 = v164 + 2;
            a11[1] = (uint64_t)(v164 + 2);
            uint64_t v124 = a6;
          }
          a11[1] = (uint64_t)v165;
          if (*((void *)&v220 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v220 + 1));
          }
        }
      }
      if (SHIBYTE(v226) < 0) {
        operator delete((void *)__dst.i64[0]);
      }
    }
  }
  v213[0] = 0;
  v213[1] = 0;
  uint64_t v214 = 0;
  for (int64x2_t __dst = (int64x2_t)v196; __dst.i64[0] != __dst.i64[1]; sub_216C084A4(&__dst))
  {
    v173 = (uint64_t **)sub_216C0830C(&__dst, v121, v122);
    sub_216ABBA60(v223.i64, *v173);
    uint64_t v176 = *sub_216C0830C(&__dst, v174, v175);
    v179 = sub_216C0830C(&__dst, v177, v178);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::_BuildLayerStack(&v221, a1, &v223, v176 + 8, a4, v195, v124, v123, v43, *(double *)(*v179 + 24), a11, v182);
    uint64_t v180 = v223.i64[1];
    if (v223.i64[1]
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v223.i64[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v180 + 8))(v180);
    }
    if (v221.i64[0]) {
      sub_216C08388((uint64_t *)v213, v221.i64);
    }
    sub_216AC0740((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v221);
  }
  sub_216BE2804(v43, *((uint64_t *)&v195 + 1));
  pxrInternal__aapl__pxrReserved__::SdfLayerTree::New(*((void **)&v195 + 1), (uint64_t *)v213, (long long *)a3, v182);
  __dst.i64[0] = (uint64_t)v213;
  sub_216AC0770((void ***)&__dst);
  v213[0] = &v196;
  sub_216C0B9DC((void ***)v213);
  v213[0] = &v202;
  sub_216C0ADB0((void ***)v213);
  v213[0] = v205;
  sub_216782F20((void ***)v213);
  v213[0] = v206;
  sub_216C0ACA8((void ***)v213);
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  v213[0] = &v210;
  sub_216782F20((void ***)v213);
  return sub_216BBED8C((uint64_t)v227);
}

void sub_216C07CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_216788028((void **)&a59);
  if (a72) {
    sub_216784EC4((std::__shared_weak_count *)a72);
  }
  if (*(char *)(v72 - 169) < 0) {
    operator delete(*(void **)(v72 - 192));
  }
  a71 = (uint64_t)&a31;
  sub_216C0B9DC((void ***)&a71);
  a35 = &a41;
  sub_216C0ADB0((void ***)&a35);
  a35 = &a44;
  sub_216782F20((void ***)&a35);
  a35 = &a47;
  sub_216C0ACA8((void ***)&a35);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  a35 = &a54;
  sub_216782F20((void ***)&a35);
  sub_216BBED8C(v72 - 168);
  _Unwind_Resume(a1);
}

uint64_t sub_216C080FC(uint64_t *a1, uint64_t (**a2)(void, uint64_t))
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerTree *)sub_216C08AC0(a1);
  Layer = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetLayer(v4);
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169791E0(Layer);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    unint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (sub_216C08B4C(v6, v7, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 296), a2)) {
    return 1;
  }
  BOOL v10 = (pxrInternal__aapl__pxrReserved__::SdfLayerTree *)sub_216C08AC0(a1);
  ChildTrees = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayerTree::GetChildTrees(v10);
  uint64_t v14 = ChildTrees[1];
  uint64_t v17 = *ChildTrees;
  uint64_t v18 = v14;
  if (v17 == v14) {
    return 0;
  }
  do
  {
    uint64_t v15 = sub_216C08BC0(&v17, v12, v13);
    uint64_t v9 = sub_216C080FC(v15, a2);
    if (v9) {
      break;
    }
    sub_216C08C40(&v17);
  }
  while (v17 != v18);
  return v9;
}

char *sub_216C081DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(char **)a1;
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(char *, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    unint64_t v6 = *(long long **)v5;
    uint64_t v7 = *(long long **)(v5 + 8);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)v5) >> 3);
    return sub_216812BD8((char *)a2, v6, v7, v8);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

atomic_uint *sub_216C08278(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (atomic_uint *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2169B761C((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 6);
    sub_216C0BD80(a1, v7);
    return sub_216C0BF48((atomic_uint *)v7);
  }
  return result;
}

void sub_216C082F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C0BF48((atomic_uint *)va);
  _Unwind_Resume(a1);
}

void *sub_216C0830C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::Pcp_Sub"
            "layerInfo>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_SublayerInfo>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216C08388(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (uint64_t *)sub_21677CB28(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[v10];
    uint64_t v17 = v16;
    uint64_t v18 = &v14[v13];
    *uint64_t v16 = *a2;
    sub_2168BD80C(&v14[v10]);
    ++v17;
    sub_216C0C0D8(a1, &v15);
    uint64_t v9 = (uint64_t *)a1[1];
    uint64_t result = sub_216C0C1E8((uint64_t)&v15);
  }
  else
  {
    uint64_t *v7 = *a2;
    uint64_t result = sub_2168BD80C(v7);
    uint64_t v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216C08484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_216C084A4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::Pcp_SublayerInfo>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::Pcp_SublayerInfo>"
            ", Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_216C0861C(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 == a2) {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==((uint64_t *)a1, a2);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::operator==((void **)(a1 + 16), a2 + 2, v5);
  }
  return result;
}

void *sub_216C08678@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26C75D5D8;
  uint64_t v5 = a1[1];
  result[3] = *a1;
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  result[5] = v6;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_216C086F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C75D5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216C08714(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C75D5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C08758(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24);
  sub_2168EBBB8((void ***)(a1 + 40), 0);

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
}

void *sub_216C0879C@<X0>(uint64_t *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x30uLL);
  uint64_t result = sub_216C08800(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_216C087EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216C08800(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C75D5D8;
  sub_216C0885C(a1 + 3, a2, a3);
  return a1;
}

void sub_216C08848(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_216C0885C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  uint64_t v4 = a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v8, a3);
  uint64_t v5 = v10;
  *a1 = v9;
  a1[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v8;
  unint64_t v8 = 0;
  a1[2] = v6;
  sub_2168EBBB8(&v8, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v9);
  return a1;
}

void sub_216C088E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_216C088F8(uint64_t **a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v10 = *(uint64_t *)((char *)v5 + 28);
        if (v9 >= v10) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    sub_216A8FD38((_DWORD *)v11 + 7, a3);
    char v14 = 1;
    sub_21677B358(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_21698F170((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t **sub_216C089DC(uint64_t **a1, unint64_t *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = *(uint64_t *)((char *)v6 + 28);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x30uLL);
    v14[1] = v7;
    sub_216A9AB30((_DWORD *)v12 + 7, *a4);
    char v15 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_21698F170((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t sub_216C08AC0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>::operator->() "
            "const [T = pxrInternal__aapl__pxrReserved__::SdfLayerTree]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021747EE69 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_216C08B4C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C747090;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75D628;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216C08BC0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>>::operator*() [T = const std::vector<pxrInternal__a"
            "apl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216C08C38()
{
}

void *sub_216C08C40(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>>::operator++() [T = const std::vector"
            "<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerTree>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216C08CC0(uint64_t a1, const std::string **a2)
{
  if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    char v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      uint64_t v5 = *a2;
    }
    std::string::operator=(*(std::string **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C08D44(uint64_t a1, uint64_t *a2)
{
  if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_216C08DD4(a2, &v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    long long v5 = v7;
    *(void *)(v4 + 16) = v8;
    *(_OWORD *)uint64_t v4 = v5;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C08DD4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_216B8DE90(a1);
  *(_OWORD *)a2 = *(_OWORD *)result;
  a2[2] = *(void *)(result + 16);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  uint64_t v5 = a1[1];
  if (v5 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C08E44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C08E64(uint64_t a1)
{
  v14[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v12);
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*(void *)*v1 + 448) && **(void **)(v2 + 8) >= 2uLL)
  {
    uint64_t v3 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::PCP_ENABLE_PARALLEL_LAYER_PREFETCH);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    BOOL v4 = *v3 != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  if (**(void **)(v2 + 8))
  {
    uint64_t v5 = 0;
    for (uint64_t i = 0; i != **(void **)(v2 + 8); ++i)
    {
      uint64_t v7 = **(void **)(v2 + 16) + v5;
      if (*(char *)(v7 + 23) < 0)
      {
        if (*(void *)(v7 + 8))
        {
LABEL_12:
          uint64_t v8 = *(void *)(v2 + 24);
          if (v4)
          {
            uint64_t v9 = *(void *)(v2 + 32);
            v11[0] = 0;
            v11[1] = v13;
            unint64_t v10 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v11, 0x28uLL);
            *((unsigned char *)v10 - 11) = 1;
            void *v10 = &unk_26C75D6A0;
            v10[1] = i;
            v10[2] = v8;
            v10[3] = v9;
            v10[4] = v14;
            (**(void (***)(void))*(v10 - 5))();
          }
          else
          {
            sub_216C09064(*(void *)(v2 + 24), i);
          }
        }
      }
      else if (*(unsigned char *)(v7 + 23))
      {
        goto LABEL_12;
      }
      v5 += 24;
    }
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v12);
}

void sub_216C09040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)va);
  _Unwind_Resume(a1);
}

void sub_216C09064(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v38);
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v36 = (uint64_t *)v37;
  ArgumentsForuint64_t FileFormatTarget = pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(**(void **)a1 + 24 * a2, *(void *)(a1 + 8), &v36);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(*(uint64_t **)(a1 + 16), **(void **)a1 + 24 * a2, (uint64_t)v34);
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v34, ArgumentsForFileFormatTarget, __dst);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(**(void **)(a1 + 24) + 8 * a2);
  char v6 = *v5;
  *uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__dst[0];
  __dst[0] = 0;
  sub_2168BD378((int)v5, v6);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__dst);
  sub_216C09578((uint64_t)__dst, *(void **)(a1 + 16), (long long *)(**(void **)a1 + 24 * a2), (long long *)v34);
  uint64_t v7 = **(void **)(a1 + 32);
  uint64_t v8 = v7 + (a2 << 6);
  uint64_t v9 = *(atomic_uint **)(v8 + 8);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)__dst;
  __dst[1] = 0;
  if (v9 && atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
  }
  __dst[0] = 0;
  unint64_t v10 = (void **)(v8 + 16);
  if (*(char *)(v8 + 39) < 0) {
    operator delete(*v10);
  }
  long long v11 = __p;
  *(void *)(v8 + 32) = v31;
  *(_OWORD *)unint64_t v10 = v11;
  HIBYTE(v31) = 0;
  LOBYTE(__p) = 0;
  uint64_t v12 = v7 + (a2 << 6) + 40;
  if (*(char *)(v8 + 63) < 0) {
    operator delete(*(void **)v12);
  }
  long long v13 = v32;
  *(void *)(v12 + 16) = v33;
  *(_OWORD *)uint64_t v12 = v13;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  char v14 = __dst[1];
  if (__dst[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__dst[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v14 + 8))(v14);
  }
  unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v16 = v38;
  unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
  if (v16 < v17
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v38, (atomic_ullong *)v15))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    *(void *)&long long __p = 0;
    uint64_t v18 = sub_216862604(&v38, 0);
    uint64_t v19 = sub_216878D10();
    if (v18 != (void *)v19)
    {
      uint64_t v20 = (char *)__dst[1];
      do
      {
        uint64_t v21 = (long long *)(v18 + 7);
        if ((unint64_t)v20 >= (unint64_t)__p)
        {
          uint64_t v20 = (char *)sub_2167E9A44((uint64_t *)__dst, v21);
        }
        else
        {
          if (*((char *)v18 + 79) < 0)
          {
            sub_216778F24(v20, (void *)v18[7], v18[8]);
          }
          else
          {
            long long v22 = *v21;
            *((void *)v20 + 2) = v18[9];
            *(_OWORD *)uint64_t v20 = v22;
          }
          v20 += 24;
        }
        __dst[1] = v20;
        uint64_t v18 = (void *)v18[1];
      }
      while (v18 != (void *)v19);
    }
    uint64_t v23 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v23) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v24 = sub_216862604(&v38, 0);
    char v39 = 0;
    long long v25 = (void *)sub_2168520EC(v23 + 19, &v39);
    if (v25 != v24) {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v23, v24, v25);
    }
    sub_216881C38("; ", (std::string *)__dst[0], (std::string *)__dst[1], &v28);
    uint64_t v26 = **(void **)(a1 + 40) + 24 * a2;
    if (*(char *)(v26 + 23) < 0) {
      operator delete(*(void **)v26);
    }
    long long v27 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    *(void *)(v26 + 16) = *((void *)&v28.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v26 = v27;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
    sub_216782F20((void ***)&v28);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  sub_2167877AC((uint64_t)&v36, v37[0]);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v38);
}

void sub_216C093EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  a10 = &a13;
  sub_216782F20((void ***)&a10);
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_2167877AC(v26 - 88, *(void **)(v26 - 80));
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v26 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_216C0947C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v7, *(const pxrInternal__aapl__pxrReserved__::ArResolverContext **)(a1 + 24));
  sub_216C09064(*(void *)(a1 + 16), *(void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v7);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C0954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t sub_216C09578(uint64_t a1, void *a2, long long *a3, long long *a4)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 16), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  uint64_t v8 = (unsigned char *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24(v8, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }
  return a1;
}

void sub_216C09614(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  unint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C09678(unsigned __int8 *a1, uint64_t *a2)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasOwner(v4)) {
    return 0;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216AA5ECC(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner(v5, (uint64_t)&__s1);
  if ((v22 & 0x80u) == 0) {
    size_t v6 = v22;
  }
  else {
    size_t v6 = __n;
  }
  uint64_t v7 = a1[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a1 + 1);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      long long v9 = a1;
    }
    else {
      long long v9 = *(unsigned __int8 **)a1;
    }
    if ((v22 & 0x80) != 0)
    {
      BOOL v18 = memcmp(__s1, v9, __n) == 0;
LABEL_25:
      operator delete(__s1);
      return v18;
    }
    if (!v22) {
      return 1;
    }
    uint64_t v10 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v13 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v12 = v13;
      int v15 = *v9++;
      int v14 = v15;
      BOOL v17 = v10-- != 0;
      BOOL v18 = v12 == v14;
    }
    while (v12 == v14 && v17);
  }
  else
  {
    BOOL v18 = 0;
  }
  if ((v22 & 0x80) != 0) {
    goto LABEL_25;
  }
  return v18;
}

void sub_216C0976C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v16 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      int v15 = a2 - 4;
      if (sub_216C09678(a3, (uint64_t *)a2 - 4))
      {
        if ((sub_216C09678(a3, a1) & 1) == 0) {
          sub_216C09964(&v16, (uint64_t *)&v15);
        }
      }
    }
    else
    {
      unint64_t v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        sub_216C09A0C((uint64_t)a1, a2, a3);
      }
      else
      {
        long long v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
        unint64_t v12 = a4 >> 1;
        int v13 = &a1[4 * (a4 >> 1)];
        unint64_t v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          sub_216C09B84((uint64_t)a1, v13, a3, v14, a5);
          sub_216C09B84((uint64_t)&a1[4 * (v9 >> 1)], (uint64_t *)a2, a3, v9 - (v9 >> 1), (uint64_t)&v11[4 * v12]);
          sub_216C09D4C((uint64_t)v11, (uint64_t)&v11[4 * v12], (uint64_t)&v11[4 * v12], (uint64_t)&v11[4 * v9], (uint64_t)a1, a3);
          if (v11)
          {
            do
            {
              sub_216ABB798(v11);
              v11 += 4;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          sub_216C0976C(a1, v13, a3, v14, a5, a6);
          sub_216C0976C(&a1[4 * (v9 >> 1)], a2, a3, v9 - (v9 >> 1), v11, a6);
          sub_216C09EB4(a1, (uint64_t)&a1[4 * (v9 >> 1)], (uint64_t *)a2, (uint64_t)a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_216C09940(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {
      sub_216ABB798(v1);
      v1 += 4;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216C09964(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = **a1;
  uint64_t *v2 = 0;
  long long v5 = *(_OWORD *)(v2 + 1);
  uint64_t v12 = v2[3];
  long long v11 = v5;
  uint64_t *v2 = *(void *)v3;
  *(void *)uint64_t v3 = 0;
  long long v6 = *(_OWORD *)(v3 + 8);
  v2[3] = *(void *)(v3 + 24);
  *(_OWORD *)(v2 + 1) = v6;
  uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v3;
  *(void *)uint64_t v3 = v4;
  uint64_t v10 = 0;
  sub_2168BD378(v3, v7);
  long long v8 = v11;
  *(void *)(v3 + 24) = v12;
  *(_OWORD *)(v3 + 8) = v8;
  return sub_216ABB798(&v10);
}

void sub_216C099F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9)
{
}

uint64_t sub_216C09A0C(uint64_t result, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, unsigned __int8 *a3)
{
  if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result != a2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result;
    long long v5 = (uint64_t *)(result + 32);
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(result + 32) != a2)
    {
      uint64_t v7 = 0;
      long long v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result;
      do
      {
        unint64_t v9 = v8;
        long long v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v5;
        uint64_t result = sub_216C09678(a3, v5);
        if (result)
        {
          uint64_t result = sub_216C09678(a3, (uint64_t *)v9);
          if ((result & 1) == 0)
          {
            uint64_t v20 = *v8;
            *long long v8 = 0;
            long long v21 = *(_OWORD *)(v9 + 5);
            unsigned __int8 v22 = v9[7];
            uint64_t v10 = v7;
            while (1)
            {
              uint64_t v11 = v10;
              uint64_t v12 = (char *)v4 + v10;
              int v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v10 + 32);
              unint64_t v14 = *v13;
              uint64_t *v13 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v10);
              *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v1sub_216C01044((uint64_t *)this, 0) = 0;
              sub_2168BD378((int)v13, v14);
              *(_OWORD *)(v12 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(v12 + 8);
              *((void *)v12 + 7) = *((void *)v12 + 3);
              if (!v11) {
                break;
              }
              if (sub_216C09678(a3, (uint64_t *)&v20))
              {
                int v15 = sub_216C09678(a3, (uint64_t *)((char *)v4 + v11 - 32));
                uint64_t v10 = v11 - 32;
                if (!v15) {
                  continue;
                }
              }
              unint64_t v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v4 + v11);
              goto LABEL_12;
            }
            unint64_t v16 = v4;
LABEL_12:
            BOOL v17 = *v16;
            *unint64_t v16 = v20;
            uint64_t v20 = 0;
            sub_2168BD378((int)v16, v17);
            uint64_t v18 = (uint64_t)v4 + v11 + 8;
            long long v19 = v21;
            *(void *)(v18 + 16) = v22;
            *(_OWORD *)uint64_t v18 = v19;
            uint64_t result = (uint64_t)sub_216ABB798(&v20);
          }
        }
        long long v5 = (uint64_t *)(v8 + 4);
        v7 += 32;
      }
      while (v8 + 4 != a2);
    }
  }
  return result;
}

void sub_216C09B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9)
{
}

void sub_216C09B84(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      if (sub_216C09678(a3, a2 - 4) && (sub_216C09678(a3, (uint64_t *)a1) & 1) == 0)
      {
        *(void *)a5 = *(a2 - 4);
        *(a2 - 4) = 0;
        long long v14 = *(_OWORD *)(a2 - 3);
        *(void *)(a5 + 24) = *(a2 - 1);
        *(_OWORD *)(a5 + 8) = v14;
        *(void *)(a5 + 32) = *(void *)a1;
        *(void *)a1 = 0;
        long long v12 = *(_OWORD *)(a1 + 8);
        uint64_t v13 = *(void *)(a1 + 24);
      }
      else
      {
        *(void *)a5 = *(void *)a1;
        *(void *)a1 = 0;
        long long v11 = *(_OWORD *)(a1 + 8);
        *(void *)(a5 + 24) = *(void *)(a1 + 24);
        *(_OWORD *)(a5 + 8) = v11;
        *(void *)(a5 + 32) = *(a2 - 4);
        *(a2 - 4) = 0;
        long long v12 = *(_OWORD *)(a2 - 3);
        uint64_t v13 = *(a2 - 1);
      }
      *(void *)(a5 + 56) = v13;
      *(_OWORD *)(a5 + 4sub_216C01044((uint64_t *)this, 0) = v12;
    }
    else if (a4 == 1)
    {
      *(void *)a5 = *(void *)a1;
      *(void *)a1 = 0;
      long long v10 = *(_OWORD *)(a1 + 8);
      *(void *)(a5 + 24) = *(void *)(a1 + 24);
      *(_OWORD *)(a5 + 8) = v10;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_216C0976C(a1, a1 + 32 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      sub_216C0976C(a1 + 32 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 32 * (a4 >> 1), a4 - (a4 >> 1));
      sub_216C0A354((void *)a1, (void *)(a1 + 32 * (a4 >> 1)), a1 + 32 * (a4 >> 1), (uint64_t)a2, a5, a3);
    }
    else
    {
      sub_216C0A170(a1, a2, a5, a3);
    }
  }
}

__n128 sub_216C09D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (a1 == a2)
  {
LABEL_11:
    while (a3 != a4)
    {
      int v15 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
      *(void *)a5 = *(void *)a3;
      *(void *)a3 = 0;
      sub_2168BD378(a5, v15);
      __n128 result = *(__n128 *)(a3 + 8);
      *(void *)(a5 + 24) = *(void *)(a3 + 24);
      *(__n128 *)(a5 + 8) = result;
      a3 += 32;
      a5 += 32;
    }
  }
  else
  {
    uint64_t v11 = a1;
    while (a3 != a4)
    {
      if (sub_216C09678(a6, (uint64_t *)a3) && (sub_216C09678(a6, (uint64_t *)v11) & 1) == 0)
      {
        long long v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
        *(void *)a5 = *(void *)a3;
        *(void *)a3 = 0;
        sub_2168BD378(a5, v14);
        __n128 result = *(__n128 *)(a3 + 8);
        *(void *)(a5 + 24) = *(void *)(a3 + 24);
        *(__n128 *)(a5 + 8) = result;
        a3 += 32;
      }
      else
      {
        long long v12 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a5;
        *(void *)a5 = *(void *)v11;
        *(void *)uint64_t v11 = 0;
        sub_2168BD378(a5, v12);
        __n128 result = *(__n128 *)(v11 + 8);
        *(void *)(a5 + 24) = *(void *)(v11 + 24);
        *(__n128 *)(a5 + 8) = result;
        v11 += 32;
      }
      a5 += 32;
      if (v11 == a2) {
        goto LABEL_11;
      }
    }
    if (v11 != a2)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = v11 + v16;
        uint64_t v18 = a5 + v16;
        long long v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a5 + v16);
        *(void *)(a5 + v16) = *(void *)(v11 + v16);
        *(void *)(v11 + v16) = 0;
        sub_2168BD378(a5 + v16, v19);
        __n128 result = *(__n128 *)(v11 + v16 + 8);
        *(void *)(v18 + 24) = *(void *)(v11 + v16 + 24);
        *(__n128 *)(v18 + 8) = result;
        v16 += 32;
      }
      while (v17 + 32 != a2);
    }
  }
  return result;
}

void sub_216C09EB4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a7, uint64_t a8)
{
  uint64_t v34 = a2;
  char v35 = a1;
  if (!a6) {
    return;
  }
  uint64_t v10 = a6;
  long long v14 = (uint64_t *)a2;
  int v15 = a1;
  do
  {
    if (v10 <= a8 || a5 <= a8)
    {
      sub_216C0A4D0((uint64_t)v15, (uint64_t)v14, (uint64_t)a3, (unsigned __int8 *)a4, a5, v10, a7);
      return;
    }
    if (!a5) {
      return;
    }
    uint64_t v16 = -a5;
    while (!sub_216C09678((unsigned __int8 *)a4, v14))
    {
LABEL_10:
      v15 += 4;
      char v35 = v15;
      if (__CFADD__(v16++, 1)) {
        return;
      }
    }
    if (sub_216C09678((unsigned __int8 *)a4, v15))
    {
      int v15 = v35;
      goto LABEL_10;
    }
    uint64_t v30 = a8;
    uint64_t v31 = a7;
    if (-v16 < v10)
    {
      if (v10 >= 0) {
        uint64_t v18 = v10;
      }
      else {
        uint64_t v18 = v10 + 1;
      }
      uint64_t v19 = v18 >> 1;
      uint64_t v20 = &v14[4 * (v18 >> 1)];
      int v15 = v35;
      long long v21 = (uint64_t *)sub_216C0A644((uint64_t)v35, (uint64_t)v14, v20, (unsigned __int8 *)a4);
      uint64_t v22 = ((char *)v21 - (char *)v15) >> 5;
      goto LABEL_28;
    }
    if (v16 == -1)
    {
      sub_216C09964(&v35, &v34);
      return;
    }
    if (v16 <= 0) {
      uint64_t v23 = -v16;
    }
    else {
      uint64_t v23 = 1 - v16;
    }
    int v15 = v35;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_216778F24(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v33 = *(void *)(a4 + 16);
    }
    uint64_t v22 = v23 >> 1;
    long long v21 = &v15[4 * (v23 >> 1)];
    char v36 = 0;
    uint64_t v20 = (uint64_t *)sub_216C0A9BC((uint64_t)v14, (uint64_t)a3, v21, (unsigned __int8 *)__p);
    if (SHIBYTE(v33) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = ((char *)v20 - (char *)v14) >> 5;
LABEL_28:
    std::string v28 = v21;
    unint64_t v29 = a3;
    if (v21 == v14)
    {
      long long v14 = v20;
      a3 = v20;
    }
    else if (v14 == v20)
    {
      long long v14 = v20;
      a3 = v21;
    }
    else
    {
      uint64_t v24 = (uint64_t)v14;
      long long v14 = v20;
      a3 = sub_216C0AA48(v21, v24, (uint64_t)v20);
    }
    a5 = -v22 - v16;
    uint64_t v25 = v10 - v19;
    if (v22 + v19 >= v10 - v22 - v19 - v16)
    {
      sub_216C09EB4(a3, v14, v29, a4, a5, v10 - v19, v31, v30);
      long long v14 = v28;
      uint64_t v25 = v19;
      a7 = v31;
      a5 = v22;
      a8 = v30;
    }
    else
    {
      uint64_t v26 = v22;
      uint64_t v27 = v19;
      a8 = v30;
      a7 = v31;
      sub_216C09EB4(v15, v28, a3, a4, v26, v27, v31, v30);
      char v35 = a3;
      int v15 = a3;
      a3 = v29;
    }
    uint64_t v34 = (uint64_t)v14;
    uint64_t v10 = v25;
  }
  while (v25);
}

void sub_216C0A154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C0A170(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  if ((uint64_t *)a1 != a2)
  {
    long long v5 = (uint64_t *)a1;
    *(void *)a3 = *(void *)a1;
    *(void *)a1 = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(void *)(a3 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)(a3 + 8) = v6;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    if ((uint64_t *)(a1 + 32) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      uint64_t v11 = a3;
      do
      {
        long long v12 = v7;
        if (sub_216C09678(a4, v7) && (sub_216C09678(a4, (uint64_t *)v11) & 1) == 0)
        {
          *(void *)(v11 + 32) = *(void *)v11;
          *(void *)uint64_t v11 = 0;
          *(_OWORD *)(v11 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(v11 + 8);
          *(void *)(v11 + 56) = *(void *)(v11 + 24);
          ++v10;
          uint64_t v14 = a3;
          if (v11 != a3)
          {
            uint64_t v15 = v9;
            uint64_t v14 = v11;
            while (sub_216C09678(a4, v12))
            {
              uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a3 + v15);
              if (sub_216C09678(a4, (uint64_t *)(a3 + v15 - 32)))
              {
                uint64_t v14 = a3 + v15;
                break;
              }
              uint64_t v17 = *v16;
              *uint64_t v16 = *(v16 - 4);
              *(v16 - 4) = 0;
              sub_2168BD378(a3 + v15, v17);
              v14 -= 32;
              uint64_t v18 = a3 + v15;
              *(_OWORD *)(v18 + 8) = *(_OWORD *)(a3 + v15 - 24);
              *(void *)(v18 + 24) = *(void *)(a3 + v15 - 8);
              v15 -= 32;
              if (!v15)
              {
                uint64_t v14 = a3;
                break;
              }
            }
          }
          uint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v14;
          *(void *)uint64_t v14 = *v12;
          uint64_t *v12 = 0;
          sub_2168BD378(v14, v19);
          long long v20 = *(_OWORD *)(v5 + 5);
          *(void *)(v14 + 24) = v5[7];
          *(_OWORD *)(v14 + 8) = v20;
        }
        else
        {
          *(void *)(v11 + 32) = *v12;
          uint64_t *v12 = 0;
          long long v13 = *(_OWORD *)(v5 + 5);
          *(void *)(v11 + 56) = v5[7];
          *(_OWORD *)(v11 + 4sub_216C01044((uint64_t *)this, 0) = v13;
          ++v10;
        }
        v11 += 32;
        uint64_t v7 = v12 + 4;
        v9 += 32;
        long long v5 = v12;
      }
      while (v12 + 4 != a2);
    }
  }
}

void sub_216C0A32C(_Unwind_Exception *exception_object)
{
  for (; v2; --v2)
  {
    sub_216ABB798(v1);
    v1 += 4;
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216C0A354(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (a1 == a2)
  {
    uint64_t v12 = a5;
LABEL_12:
    while (a3 != a4)
    {
      *(void *)uint64_t v12 = *(void *)a3;
      *(void *)a3 = 0;
      __n128 result = *(__n128 *)(a3 + 8);
      *(void *)(v12 + 24) = *(void *)(a3 + 24);
      *(__n128 *)(v12 + 8) = result;
      a3 += 32;
      v12 += 32;
    }
  }
  else
  {
    uint64_t v10 = a1;
    uint64_t v11 = 0;
    uint64_t v12 = a5;
    while (a3 != a4)
    {
      if (sub_216C09678(a6, (uint64_t *)a3) && (sub_216C09678(a6, v10) & 1) == 0)
      {
        *(void *)uint64_t v12 = *(void *)a3;
        *(void *)a3 = 0;
        __n128 result = *(__n128 *)(a3 + 8);
        *(void *)(v12 + 24) = *(void *)(a3 + 24);
        *(__n128 *)(v12 + 8) = result;
        a3 += 32;
      }
      else
      {
        *(void *)uint64_t v12 = *v10;
        void *v10 = 0;
        __n128 result = *(__n128 *)(v10 + 1);
        *(void *)(v12 + 24) = v10[3];
        *(__n128 *)(v12 + 8) = result;
        v10 += 4;
      }
      ++v11;
      v12 += 32;
      if (v10 == a2) {
        goto LABEL_12;
      }
    }
    if (v10 != a2)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = v12 + v14 * 8;
        uint64_t v16 = &v10[v14];
        *(void *)uint64_t v15 = v10[v14];
        *uint64_t v16 = 0;
        __n128 result = *(__n128 *)&v10[v14 + 1];
        *(void *)(v15 + 24) = v10[v14 + 3];
        *(__n128 *)(v15 + 8) = result;
        v14 += 4;
      }
      while (v16 + 4 != a2);
    }
  }
  return result;
}

void sub_216C0A4A8(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      sub_216ABB798(v1);
      v1 += 4;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C0A4D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a7)
{
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      uint64_t v10 = 0;
      uint64_t v14 = (uint64_t)a7;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v14 = (uint64_t)a7;
      uint64_t v15 = a1;
      do
      {
        *(void *)uint64_t v14 = *(void *)v15;
        *(void *)uint64_t v15 = 0;
        long long v16 = *(_OWORD *)(v15 + 8);
        *(void *)(v14 + 24) = *(void *)(v15 + 24);
        *(_OWORD *)(v14 + 8) = v16;
        ++v10;
        v14 += 32;
        v15 += 32;
      }
      while (v15 != a2);
    }
    sub_216C0A6C8((uint64_t)a7, v14, a2, a3, a1, a4);
  }
  else
  {
    if (a2 == a3)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (uint64_t)a7;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = (uint64_t)a7;
      uint64_t v12 = a2;
      do
      {
        *(void *)uint64_t v11 = *(void *)v12;
        *(void *)uint64_t v12 = 0;
        long long v13 = *(_OWORD *)(v12 + 8);
        *(void *)(v11 + 24) = *(void *)(v12 + 24);
        *(_OWORD *)(v11 + 8) = v13;
        ++v10;
        v11 += 32;
        v12 += 32;
      }
      while (v12 != a3);
    }
    uint64_t v17 = a4;
    sub_216C0A7E8(v11, v11, (uint64_t)a7, (uint64_t)a7, a2, a2, a1, a1, a3, a3, &v17);
  }
  if (a7 && v10)
  {
    do
    {
      sub_216ABB798(a7);
      a7 += 4;
      --v10;
    }
    while (v10);
  }
}

void sub_216C0A618(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      sub_216ABB798(v1);
      v1 += 4;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C0A644(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a1;
  if (a2 != a1)
  {
    unint64_t v7 = (a2 - a1) >> 5;
    do
    {
      unint64_t v8 = v7 >> 1;
      if (!sub_216C09678(a4, a3) || sub_216C09678(a4, (uint64_t *)(v4 + 32 * (v7 >> 1))))
      {
        v4 += 32 * (v7 >> 1) + 32;
        unint64_t v8 = v7 + ~v8;
      }
      unint64_t v7 = v8;
    }
    while (v8);
  }
  return v4;
}

void sub_216C0A6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  if (a1 != a2)
  {
    uint64_t v7 = a5;
    uint64_t v11 = a1;
    uint64_t v12 = a5;
    while (a3 != a4)
    {
      if (sub_216C09678(a6, (uint64_t *)a3) && (sub_216C09678(a6, (uint64_t *)v11) & 1) == 0)
      {
        uint64_t v15 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v12;
        *(void *)uint64_t v12 = *(void *)a3;
        *(void *)a3 = 0;
        sub_2168BD378(v12, v15);
        long long v16 = *(_OWORD *)(a3 + 8);
        *(void *)(v12 + 24) = *(void *)(a3 + 24);
        *(_OWORD *)(v12 + 8) = v16;
        a3 += 32;
      }
      else
      {
        long long v13 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v12;
        *(void *)uint64_t v12 = *(void *)v11;
        *(void *)uint64_t v11 = 0;
        sub_2168BD378(v12, v13);
        long long v14 = *(_OWORD *)(v11 + 8);
        *(void *)(v12 + 24) = *(void *)(v11 + 24);
        *(_OWORD *)(v12 + 8) = v14;
        v11 += 32;
      }
      v12 += 32;
      v7 += 32;
      if (v11 == a2) {
        return;
      }
    }
    sub_216C0A8F4(v11, a2, v7);
  }
}

void sub_216C0A7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 **a11)
{
  if (a2 != a4)
  {
    uint64_t v14 = a2;
    uint64_t v15 = a10 - 32;
    while (a6 != a8)
    {
      int v16 = sub_216C0A978(a11, (uint64_t *)(a6 - 32), (uint64_t *)(v14 - 32));
      uint64_t v17 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v15;
      if (v16) {
        uint64_t v18 = a6;
      }
      else {
        uint64_t v18 = v14;
      }
      if (v16) {
        a6 -= 32;
      }
      else {
        v14 -= 32;
      }
      *(void *)uint64_t v15 = *(void *)(v18 - 32);
      *(void *)(v18 - 32) = 0;
      sub_2168BD378(v15, v17);
      long long v19 = *(_OWORD *)(v18 - 24);
      *(void *)(v15 + 24) = *(void *)(v18 - 8);
      *(_OWORD *)(v15 + 8) = v19;
      v15 -= 32;
      if (v14 == a4) {
        return;
      }
    }
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = v15 + v20;
      uint64_t v22 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v15 + v20);
      *(void *)(v15 + v2sub_216C01044((uint64_t *)this, 0) = *(void *)(v14 + v20 - 32);
      *(void *)(v14 + v20 - 32) = 0;
      sub_2168BD378(v15 + v20, v22);
      long long v23 = *(_OWORD *)(v14 + v20 - 24);
      *(void *)(v21 + 24) = *(void *)(v14 + v20 - 8);
      *(_OWORD *)(v21 + 8) = v23;
      v20 -= 32;
    }
    while (v14 + v20 != a4);
  }
}

uint64_t sub_216C0A8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6;
      *(void *)uint64_t v6 = *(void *)v4;
      *(void *)uint64_t v4 = 0;
      sub_2168BD378(v6, v7);
      long long v8 = *(_OWORD *)(v4 + 8);
      *(void *)(v6 + 24) = *(void *)(v4 + 24);
      *(_OWORD *)(v6 + 8) = v8;
      v3 += 32;
      v4 += 32;
      v6 += 32;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_216C0A978(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t result = sub_216C09678(*a1, a3);
  if (result) {
    return sub_216C09678(v4, a2) ^ 1;
  }
  return result;
}

uint64_t sub_216C0A9BC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a1;
  if (a2 != a1)
  {
    unint64_t v7 = (a2 - a1) >> 5;
    do
    {
      unint64_t v8 = v7 >> 1;
      if (sub_216C09678(a4, (uint64_t *)(v4 + 32 * (v7 >> 1))) && (sub_216C09678(a4, a3) & 1) == 0)
      {
        unint64_t v8 = v7 + ~v8;
        v4 += 32 * (v7 >> 1) + 32;
      }
      unint64_t v7 = v8;
    }
    while (v8);
  }
  return v4;
}

uint64_t *sub_216C0AA48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  while (1)
  {
    sub_216C09964(&v11, &v10);
    long long v5 = v11 + 4;
    uint64_t v6 = v10 + 32;
    uint64_t v10 = v6;
    v11 += 4;
    if (v6 == a3) {
      break;
    }
    if (v5 == (uint64_t *)v4) {
      uint64_t v4 = v6;
    }
  }
  if (v5 != (uint64_t *)v4)
  {
    do
    {
      uint64_t v10 = v4;
      while (1)
      {
        sub_216C09964(&v11, &v10);
        unint64_t v7 = v11 + 4;
        uint64_t v8 = v10 + 32;
        uint64_t v10 = v8;
        v11 += 4;
        if (v8 == a3) {
          break;
        }
        if (v7 == (uint64_t *)v4) {
          uint64_t v4 = v8;
        }
      }
    }
    while (v7 != (uint64_t *)v4);
  }
  return v5;
}

void sub_216C0AAFC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C0AAFC(a1, *a2);
    sub_216C0AAFC(a1, a2[1]);
    sub_216C0AB58((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_216C0AB58(uint64_t a1)
{
  sub_21698F21C(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t *sub_216C0ABA4(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216AF19A0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216C0AC50((uint64_t)v10, 0);
  }
  return v7;
}

void sub_216C0AC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C0AB58((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216C0ACA8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216ABB798(v4 - 1);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216C0AD2C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_216BBED8C(v4 - 56);
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216C0ADB0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_216C0AE48((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

atomic_uint *sub_216C0AE48(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
  uint64_t result = *(atomic_uint **)(a2 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v4();
  }
  return result;
}

void sub_216C0AEE0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C0AEE0(a1, *a2);
    sub_216C0AEE0(a1, a2[1]);
    sub_216C0AF3C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_216C0AF3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216C0AFAC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

void *sub_216C0AFF0(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  long long v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        uint64_t v21 = &a3[a5];
      }
      else
      {
        uint64_t v21 = &a3[v20];
        a1[1] = (uint64_t)sub_216BCCF4C(v9, v21, a4, *(uint64_t **)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216C0B19C((uint64_t)a1, (uint64_t)v5, v12, (char *)&v5[2 * a5]);
      sub_216BCD02C((uint64_t)v26, v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v29 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_216787EE0(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      uint64_t v27 = v22;
      std::string v28 = &v18[16 * v17];
      uint64_t v23 = 16 * a5;
      uint64_t v24 = &v22[2 * a5];
      do
      {
        sub_216ABBA60(v22, v7);
        v22 += 2;
        ++v7;
        v23 -= 16;
      }
      while (v23);
      uint64_t v27 = v24;
      long long v5 = (void *)sub_216C0B21C(a1, v26, v5);
      sub_216852520((uint64_t)v26);
    }
  }
  return v5;
}

void sub_216C0B170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C0B19C(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4 = *(char **)(result + 8);
  long long v5 = (char *)(a2 + v4 - a4);
  uint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)long long v5 = 0;
    *((void *)v5 + 1) = 0;
    v5 += 16;
  }
  *(void *)(result + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v7 = (uint64_t)(v4 - 16);
    uint64_t v8 = 16 * ((v4 - a4) >> 4);
    uint64_t v9 = a2 - 16;
    do
    {
      uint64_t result = sub_21697D0EC(v7, v9 + v8);
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_216C0B21C(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216AF3CD4((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216C0B2D0(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_OWORD *sub_216C0B2D0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_216BCCFF4((uint64_t)v6);
  return v4;
}

uint64_t *sub_216C0B344(uint64_t a1, unint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  long long v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        long long v5 = (uint64_t *)*v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_216C0B40C(a1, a3, a4, (uint64_t)v11);
    sub_21677B358((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_216C0B484((uint64_t)v11, 0);
  }
  return v8;
}

_DWORD *sub_216C0B40C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  sub_216981010(v8 + 8, a2);
  uint64_t result = sub_21698105C(v8 + 9, a2 + 1);
  uint64_t v10 = *a3;
  *a3 = 0;
  *((void *)v8 + 5) = v10;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216C0B484(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C0AF3C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_216C0B4DC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C0B554((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C0B554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (uint64_t *)(v11 + v10);
    uint64_t *v12 = *(void *)(a3 + v10 - 8);
    v10 -= 8;
    sub_2168BD80C(v12);
  }
  return a6;
}

uint64_t sub_216C0B5EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216C0B63C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_2167B421C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[56 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[56 * v9];
  sub_216BBEE18(v14, a2);
  *(_OWORD *)(v14 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a2 + 40);
  v15 += 56;
  sub_216C0B76C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216C0B88C((uint64_t)&v13);
  return v11;
}

void sub_216C0B758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C0B88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C0B76C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C0B7E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C0B7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      sub_216BBEE18((_DWORD *)(a7 + v11 - 56), a3 + v11 - 56);
      *(_OWORD *)(a7 + v11 - 16) = *(_OWORD *)(a3 + v11 - 16);
      v11 -= 56;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_216C0B86C(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 56)
    sub_216BBED8C(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C0B88C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_216BBED8C(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_216C0B8DC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216C0B948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_216C0B95C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169B75D8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, a2 << 6);
    a1[1] = &v4[64 * a2];
  }
  return a1;
}

void sub_216C0B9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216C0B9DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216ABB798(v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216C0BA60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      unint64_t v5 = sub_216851B24(a2);
      if (v5 >= sub_216851B24((uint64_t)(v2 + 4)))
      {
        unint64_t v6 = sub_216851B24((uint64_t)(v2 + 4));
        if (v6 >= sub_216851B24(a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_216C0BAEC(uint64_t *a1, void *a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a1[1] - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  uint64_t v12 = a1[2] - v5;
  if (v12 >> 4 > v7) {
    unint64_t v7 = v12 >> 4;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v22 = a1 + 2;
  if (v13) {
    unint64_t v14 = (char *)sub_2168707F4(v11, v13);
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t v15 = &v14[32 * v6];
  v19[0] = v14;
  v19[1] = v15;
  uint64_t v20 = v15;
  uint64_t v21 = &v14[32 * v13];
  uint64_t v16 = *a4;
  *(void *)uint64_t v15 = *a2;
  sub_2168BD80C((uint64_t *)v15);
  *(_OWORD *)(v15 + 8) = *a3;
  *((void *)v15 + 3) = v16;
  v20 += 32;
  sub_216C0BC00(a1, v19);
  uint64_t v17 = a1[1];
  sub_216C0BD30((uint64_t)v19);
  return v17;
}

void sub_216C0BBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C0BD30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C0BC00(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C0BC78((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C0BC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a7 - 32;
    do
    {
      uint64_t v12 = v11 + v10;
      *(void *)(v11 + v1sub_216C01044((uint64_t *)this, 0) = *(void *)(a3 + v10 - 32);
      sub_2168BD80C((uint64_t *)(v11 + v10));
      long long v13 = *(_OWORD *)(a3 + v10 - 24);
      *(void *)(v12 + 24) = *(void *)(a3 + v10 - 8);
      *(_OWORD *)(v12 + 8) = v13;
      v10 -= 32;
    }
    while (a3 + v10 != a5);
  }
  return a6;
}

void sub_216C0BD10(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 32)
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C0BD30(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216C0BD80(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C0BDF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C0BDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 64;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 16);
      *(void *)(v8 + 32) = *(void *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = v10;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 16) = 0;
      long long v11 = *(_OWORD *)(a3 + 40);
      *(void *)(v8 + 56) = *(void *)(a3 + 56);
      *(_OWORD *)(v8 + 4sub_216C01044((uint64_t *)this, 0) = v11;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = 0;
      *((void *)&v17 + 1) = v8;
      v8 -= 64;
      v7 -= 64;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216C0BEBC((uint64_t)v14);
  return v12;
}

uint64_t sub_216C0BEBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C0BEF4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C0BEF4(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C0AE48(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_216C0BF48(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_216C0BF7C(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 64;
      uint64_t result = sub_216C0AE48(v4, v1 - 64);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216C0BFC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v16[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_2169B761C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[64 * v9];
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v12 = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v12;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  long long v13 = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(_OWORD *)(v11 + 4sub_216C01044((uint64_t *)this, 0) = v13;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  uint64_t v16[2] = v11 + 64;
  sub_216C0BD80(a1, v16);
  uint64_t v14 = a1[1];
  sub_216C0BF48((atomic_uint *)v16);
  return v14;
}

void sub_216C0C0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C0BF48((atomic_uint *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C0C0D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C0C150((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C0C150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    long long v12 = (uint64_t *)(v11 + v10);
    uint64_t *v12 = *(void *)(a3 + v10 - 8);
    v10 -= 8;
    sub_2168BD80C(v12);
  }
  return a6;
}

uint64_t sub_216C0C1E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_216AC0740((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource((void *)this + 7);
  *((void *)this + 9) = 0;
  return this;
}

void sub_216C0C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 32);
  sub_216787968(&a10);
  uint64_t v12 = *(void *)(v10 + 24);
  if (v12) {
    sub_217324208(v12);
  }
  sub_217324CD4(v10);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(void *a1, void *a2, void *a3, void **a4, void *a5)
{
  *a1 = *a2;
  uint64_t v7 = a2[1];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  a1[2] = *a3;
  uint64_t v8 = a3[1];
  a1[3] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_21695F340(a1 + 4, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  a1[7] = *a5;
  uint64_t v9 = a5[1];
  a1[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = sub_21697CF14(a1);
  unint64_t v12 = v11 & 1 | (unint64_t)v10;
  if (v12)
  {
    uint64_t v14 = 0;
    char v15 = 0;
    sub_216C0CF04((uint64_t)&v14, (uint64_t)a1, (uint64_t)(a1 + 2), (uint64_t)(a1 + 4), (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 7));
    unint64_t v12 = bswap64(0x9E3779B97F4A7C55 * v14);
  }
  a1[9] = v12;
  return a1;
}

void sub_216C0C3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *(atomic_uint **)(v12 + 24);
  if (v14 && atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  char v15 = *(atomic_uint **)(v12 + 8);
  if (v15)
  {
    if (atomic_fetch_add_explicit(v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v15 + 8))(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::_ComputeHash(pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *this)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_216C0CF04((uint64_t)&v2, (uint64_t)this, (uint64_t)this + 16, (uint64_t)this + 32, (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)((char *)this + 56));
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)a1 = *(void *)a2;
    sub_2168CD2FC((atomic_uint **)(a1 + 8), (atomic_uint **)(a2 + 8));
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    sub_2168CD2FC((atomic_uint **)(a1 + 24), (atomic_uint **)(a2 + 24));
    sub_216C0C960(a1 + 32, *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
    uint64_t v5 = *(void *)(a2 + 56);
    uint64_t v4 = *(void *)(a2 + 64);
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 64);
    *(void *)(a1 + 56) = v5;
    *(void *)(a1 + 64) = v4;
    if (v6) {
      sub_216784EC4(v6);
    }
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator BOOL(void *a1)
{
  uint64_t v1 = sub_21697CF14(a1);
  return (v2 & 1 | (unint64_t)v1) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  v4[0] = a1 + 72;
  v4[1] = a1;
  v4[2] = a1 + 16;
  void v4[3] = a1 + 32;
  void v4[4] = a1 + 56;
  v3[0] = a2 + 72;
  v3[1] = a2;
  v3[2] = a2 + 16;
  v3[3] = a2 + 32;
  void v3[4] = a2 + 56;
  return sub_216C0CAB4((uint64_t)&v5, (uint64_t)v4, (uint64_t)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator<(uint64_t a1, uint64_t a2)
{
  v4[0] = a1 + 16;
  v4[1] = a1;
  v4[2] = a1 + 32;
  void v4[3] = a1 + 56;
  v3[0] = a2 + 16;
  v3[1] = a2;
  v3[2] = a2 + 32;
  v3[3] = a2 + 56;
  return sub_216C0CBF0((uint64_t)&v5, v4, v3);
}

void *pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatBaseName(void *a1)
{
  char v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  int v3 = sub_216C0C69C();
  *std::ios_base::iword(v2, v3) = 2;
  return a1;
}

uint64_t sub_216C0C69C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B914A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B914A0))
  {
    qword_267B91498 = std::ios_base::xalloc();
    __cxa_guard_release(&qword_267B914A0);
  }
  return qword_267B91498;
}

void sub_216C0C6FC(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatRealPath(void *a1)
{
  char v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  int v3 = sub_216C0C69C();
  *std::ios_base::iword(v2, v3) = 1;
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatIdentifier(void *a1)
{
  char v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  int v3 = sub_216C0C69C();
  *std::ios_base::iword(v2, v3) = 0;
  return a1;
}

void sub_216C0C7F0(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_216779180(a1, (uint64_t)"@", 1);
  sub_216C0CDD4(a1, a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = sub_216779180(v4, (uint64_t)p_p, size);
  sub_216779180(v7, (uint64_t)"@", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = sub_21697CF14(a2 + 2);
  if (v9 & 1 | (unint64_t)v8)
  {
    uint64_t v10 = sub_216779180(a1, (uint64_t)",@", 2);
    sub_216C0CDD4(a1, a2 + 2, &__p);
    char v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    long long v13 = sub_216779180(v10, (uint64_t)v11, v12);
    sub_216779180(v13, (uint64_t)"@", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v14 = a2[7];
  if (v14)
  {
    sub_216779180(a1, (uint64_t)",exprVarOverrideSource=", 23);
    sub_216C0C7F0(a1, v14);
  }
}

void sub_216C0C940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C0C960(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_2167ADF8C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21682BF78((void *)a1, v12);
    long long v13 = sub_21695F3C8(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    char v15 = &a2[2 * v14];
    sub_216BCC514((uint64_t)&v20, a2, v15, v9);
    long long v13 = sub_21695F3C8(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_216BCC514((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_216784EC4(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_216C0CAA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216C0CAAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216C0CAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_216C0CAF8((uint64_t)&v6, a2, a3);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator==(*(uint64_t **)(a2 + 32), *(uint64_t **)(a3 + 32));
  }
  return result;
}

uint64_t sub_216C0CAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_216C0CB3C((uint64_t)&v6, a2, a3);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::ArResolverContext::operator==(*(uint64_t **)(a2 + 24), *(uint64_t **)(a3 + 24));
  }
  return result;
}

BOOL sub_216C0CB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = sub_216C0CB94((uint64_t)&v8, a2, a3);
  if (result)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t v7 = sub_216851B24(*(void *)(a2 + 16));
    return v7 == sub_216851B24(v6);
  }
  return result;
}

BOOL sub_216C0CB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(void **)a2 != **(void **)a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a3 + 8);
  uint64_t v4 = sub_216851B24(*(void *)(a2 + 8));
  return v4 == sub_216851B24(v3);
}

uint64_t sub_216C0CBF0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  unint64_t v6 = sub_216851B24(*a2);
  if (v6 < sub_216851B24(v5)) {
    return 1;
  }
  uint64_t v8 = *a2;
  unint64_t v9 = sub_216851B24(*a3);
  if (v9 >= sub_216851B24(v8)) {
    return sub_216C0CC84((uint64_t)&v10, (uint64_t)a2, (uint64_t)a3);
  }
  else {
    return 0;
  }
}

uint64_t sub_216C0CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  unint64_t v6 = sub_216851B24(*(void *)(a2 + 8));
  if (v6 < sub_216851B24(v5)) {
    return 1;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  unint64_t v9 = sub_216851B24(*(void *)(a3 + 8));
  if (v9 >= sub_216851B24(v8)) {
    return sub_216C0CD18((uint64_t)&v10, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t sub_216C0CD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (pxrInternal__aapl__pxrReserved__::ArResolverContext::operator<(*(uint64_t **)(a2 + 16), *(uint64_t **)(a3 + 16))) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::ArResolverContext::operator<(*(uint64_t **)(a3 + 16), *(uint64_t **)(a2 + 16))) {
    return 0;
  }
  return sub_216C0CD84((uint64_t)&v6, a2, a3);
}

uint64_t sub_216C0CD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator<(*(uint64_t **)(a2 + 24), *(uint64_t **)(a3 + 24));
  if ((v5 & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::operator<(*(uint64_t **)(a3 + 24), *(uint64_t **)(a2 + 24));
  }
  return v5;
}

void sub_216C0CDD4(void *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  char v6 = sub_21697CF14(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    int v9 = sub_216C0C69C();
    uint64_t v10 = *std::ios_base::iword(v8, v9);
    if (v10 == 1)
    {
      long long v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v13);
    }
    else
    {
      if (v10 == 2)
      {
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t Identifier = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
        pxrInternal__aapl__pxrReserved__::TfGetBaseName(Identifier, a3);
        return;
      }
      char v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
    }
    if (*(char *)(RealPath + 23) < 0)
    {
      uint64_t v17 = *(void **)RealPath;
      unint64_t v18 = *(void *)(RealPath + 8);
      sub_216778F24(a3, v17, v18);
    }
    else
    {
      long long v16 = *(_OWORD *)RealPath;
      a3->__r_.__value_.__r.__words[2] = *(void *)(RealPath + 16);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v16;
    }
  }
  else
  {
    sub_216779094(a3, "<expired>");
  }
}

unint64_t sub_216C0CF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a5)
{
  uint64_t v9 = sub_216851B24(a2);
  if (*(unsigned char *)(a1 + 8)) {
    v9 += (unint64_t)(*(void *)a1 + v9 + (*(void *)a1 + v9) * (*(void *)a1 + v9)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v9;

  return sub_216C0CF88(a1, a3, a4, a5);
}

unint64_t sub_216C0CF88(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a4)
{
  uint64_t v7 = sub_216851B24(a2);
  if (*(unsigned char *)(a1 + 8)) {
    v7 += (unint64_t)(*(void *)a1 + v7 + (*(void *)a1 + v7) * (*(void *)a1 + v7)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;

  return sub_216C0D004(a1, a3, a4);
}

unint64_t sub_216C0D004(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *a3)
{
  unint64_t v5 = sub_216C0D06C((uint64_t)&v7, a2);
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_216C0D114(a1, a3);
}

unint64_t sub_216C0D06C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = v3 >> 4;
    do
    {
      uint64_t v7 = *v2;
      v2 += 2;
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      if (v4)
      {
        uint64_t v5 = v8 + ((unint64_t)(v8 + v5 + (v8 + v5) * (v8 + v5)) >> 1);
      }
      else
      {
        int v4 = 1;
        uint64_t v5 = v8;
      }
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v5 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

unint64_t sub_216C0D114(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *this)
{
  unint64_t result = pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::GetHash(this);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **this, const char *a2, char *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B914E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B914E0))
  {
    sub_216BBED3C((uint64_t)&unk_267B914A8);
    __cxa_atexit((void (*)(void *))sub_216C0D228, &unk_267B914A8, &dword_216758000);
    __cxa_guard_release(&qword_267B914E0);
  }
  int v4 = *this;
  if (!*this) {
    return &unk_267B914A8;
  }

  return (void *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(v4, a2, a3);
}

void sub_216C0D210(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *this, const char *a2, char *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 225);
  if ((v4 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_EvaluateUncached(this, a2, a3, (uint64_t)v10);
    sub_21685036C((uint64_t)&v9, (uint64_t)this + 224);
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 225);
    if ((v5 & 1) == 0)
    {
      if ((char *)this + 88 != v10)
      {
        uint64_t v6 = (_DWORD *)sub_216BBED8C((uint64_t)this + 88);
        sub_216BBEE18(v6, (uint64_t)v10);
      }
      *((_OWORD *)this + 8) = v11;
      atomic_store(1u, (unsigned __int8 *)this + 225);
    }
    uint64_t v7 = v9;
    if (v9)
    {
      __dmb(0xBu);
      unsigned char *v7 = 0;
    }
    sub_216BBED8C((uint64_t)v10);
  }
  return (uint64_t)this + 88;
}

void sub_216C0D2FC(_Unwind_Exception *a1, unsigned char *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a2)
  {
    __dmb(0xBu);
    *a2 = 0;
  }
  sub_216BBED8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B914F0, memory_order_acquire) & 1) == 0)
  {
    unsigned __int8 v4 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)__cxa_guard_acquire(&qword_267B914F0);
    if (v4)
    {
      unsigned __int8 v5 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity(v4);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant(v5, &qword_267B914E8);
      __cxa_atexit((void (*)(void *))sub_216C0D478, &qword_267B914E8, &dword_216758000);
      __cxa_guard_release(&qword_267B914F0);
    }
  }
  uint64_t v3 = qword_267B914E8;
  *a1 = qword_267B914E8;
  if (v3) {
    atomic_fetch_add((atomic_uint *volatile)(v3 + 84), 1u);
  }
}

void sub_216C0D3D0(_Unwind_Exception *a1)
{
}

atomic_uint **pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression *this@<X0>, void *a2@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(0, (uint64_t *)&v10, (uint64_t *)&v9, (uint64_t)this, &v11);
  unsigned __int8 v5 = v11;
  *a2 = v11;
  if (v5) {
    atomic_fetch_add(v5 + 21, 1u);
  }
  sub_216BD0624(&v11, v4);
  sub_216BD0624(&v9, v6);
  return sub_216BD0624(&v10, v7);
}

void sub_216C0D45C(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unsigned __int8 v5 = va_arg(va1, atomic_uint *);
  sub_216BD0624((atomic_uint **)va, a2);
  sub_216BD0624((atomic_uint **)va1, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, atomic_uint **a5@<X8>)
{
  v26[7] = *MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v21, "Pcp", "PcpMapExpresion");
  sub_216C0E88C((uint64_t)&v23, a1, a2, a3, a4);
  if (v23 == 1)
  {
    uint64_t v10 = (atomic_uint *)operator new(0xE8uLL);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Node((uint64_t)v10, (uint64_t)&v23);
    *a5 = v10;
    atomic_fetch_add(v10 + 21, 1u);
  }
  else
  {
    uint64_t v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    long long v11 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
    if (!v11)
    {
      sub_216C0E928(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
      long long v11 = v17;
    }
    if ((sub_216C0EAA8(v11, 1, (uint64_t)&v23, (uint64_t)&v18, (uint64_t (*)(uint64_t *, uint64_t, void))sub_216C0EEFC) & 1) != 0|| !atomic_fetch_add((atomic_uint *volatile)(*(void *)(v20 + 96) + 84), 1u))
    {
      uint64_t v12 = (atomic_uint *)operator new(0xE8uLL);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Node((uint64_t)v12, (uint64_t)&v23);
      *a5 = v12;
      atomic_fetch_add(v12 + 21, 1u);
      *(void *)(v20 + 96) = v12;
    }
    else
    {
      *a5 = *(atomic_uint **)(v20 + 96);
    }
    uint64_t v20 = 0;
    sub_21685C048(&v18);
  }
  sub_216BBED8C((uint64_t)v26);
  sub_216BD0624(&v25, v13);
  for (uint64_t result = (uint64_t)sub_216BD0624(&v24, v14); v22--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21))
    ;
  return result;
}

void sub_216C0D698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v6 = 0;
  sub_21685C048((uint64_t *)va);
  sub_216C0DE18((uint64_t)va2);
  sub_21684E6B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapExpression *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(_DWORD **)this;
  if (*(void *)this)
  {
    if (!*v7)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v7 + 6));
      if (result)
      {
        uint64_t v9 = *(void *)a2;
        goto LABEL_9;
      }
    }
  }
  uint64_t v10 = *(_DWORD **)a2;
  if (*(void *)a2)
  {
    if (!*v10)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v10 + 6));
      if (result)
      {
        uint64_t v9 = *(void *)this;
LABEL_9:
        *a4 = v9;
        if (v9) {
          atomic_fetch_add((atomic_uint *volatile)(v9 + 84), 1u);
        }
        return result;
      }
    }
  }
  if (**(_DWORD **)this || **(_DWORD **)a2)
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    sub_216BBED3C((uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(3, (uint64_t *)this, (uint64_t *)a2, (uint64_t)v18, &v17);
    uint64_t v12 = v17;
    *a4 = (uint64_t)v17;
    if (v12) {
      atomic_fetch_add(v12 + 21, 1u);
    }
    sub_216BD0624(&v17, v11);
  }
  else
  {
    long long v13 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this, (const char *)a2, a3);
    long long v16 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)a2, v14, v15);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose(v13, v16, (uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v18, a4);
  }
  return sub_216BBED8C((uint64_t)v18);
}

void sub_216C0D874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216BBED8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::Inverse@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression *this@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (**(_DWORD **)this)
  {
LABEL_2:
    uint64_t v12 = 0;
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_216BBED3C((uint64_t)v14);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(2, (uint64_t *)this, (uint64_t *)&v12, (uint64_t)v14, &v13);
    uint64_t v5 = v13;
    *a2 = v13;
    if (v5) {
      atomic_fetch_add(v5 + 21, 1u);
    }
    sub_216BD0624(&v13, v4);
    sub_216BBED8C((uint64_t)v14);
    return (uint64_t)sub_216BD0624(&v12, v6);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(*(void *)this + 24));
  uint64_t v10 = *(_DWORD **)this;
  if (!result)
  {
    if (!*v10)
    {
      long long v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this, v8, v9);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetInverse(v11, (uint64_t)v14);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v14, a2);
      return sub_216BBED8C((uint64_t)v14);
    }
    goto LABEL_2;
  }
  *a2 = v10;
  if (v10) {
    atomic_fetch_add(v10 + 21, 1u);
  }
  return result;
}

void sub_216C0D9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216BBED8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity@<X0>(uint64_t this@<X0>, const char *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a4@<X8>)
{
  unsigned __int8 v4 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this;
  if (*(void *)this)
  {
    if (*(_DWORD *)v6) {
      goto LABEL_7;
    }
    this = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)((char *)v6 + 24));
    uint64_t v6 = *v4;
    if (this)
    {
      *a4 = v6;
      if (!v6) {
        return this;
      }
LABEL_9:
      atomic_fetch_add((atomic_uint *volatile)v6 + 21, 1u);
      return this;
    }
  }
  if (!*(_DWORD *)v6)
  {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v4, a2, a3);
    sub_216C0DB60(v10, (uint64_t)v13);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v13, a4);
    return sub_216BBED8C((uint64_t)v13);
  }
LABEL_7:
  if (*((unsigned char *)v6 + 80))
  {
    *a4 = v6;
    goto LABEL_9;
  }
  long long v11 = 0;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_216BBED3C((uint64_t)v13);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(4, (uint64_t *)v4, (uint64_t *)&v11, (uint64_t)v13, &v12);
  uint64_t v8 = v12;
  *a4 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v12;
  if (v8) {
    atomic_fetch_add(v8 + 21, 1u);
  }
  sub_216BD0624(&v12, v7);
  sub_216BBED8C((uint64_t)v13);
  return (uint64_t)sub_216BD0624(&v11, v9);
}

void sub_216C0DB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216BBED8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C0DB60(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1[36])
  {
    sub_216BBEE18((_DWORD *)a2, (uint64_t)a1);
    *(_OWORD *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a1 + 40);
  }
  else
  {
    SourceToTargetMap = pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)a1, v7);
    uint64_t v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)SourceToTargetMap);
    uint64_t v8 = v5;
    uint64_t v6 = sub_216C089DC(v7, (unint64_t *)v5, (uint64_t)&unk_2174BFD90, &v8);
    sub_2169C487C((int *)v6 + 9, v5);
    sub_2169C48D4((int *)v6 + 10, v5 + 1);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v7, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a1 + 40), a2);
    sub_21698F21C((uint64_t)v7, v7[1]);
  }
}

void sub_216C0DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::NewVariable(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = operator new(0x10uLL);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  sub_216BBED3C((uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::New(1, (uint64_t *)&v10, (uint64_t *)&v9, (uint64_t)v12, &v11);
  uint64_t v5 = v11;
  *unsigned __int8 v4 = &unk_26C75D730;
  v4[1] = v5;
  long long v11 = 0;
  sub_216BD0624(&v11, v6);
  sub_216BBED8C((uint64_t)v12);
  sub_216BD0624(&v9, v7);
  sub_216BD0624(&v10, v8);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable(v4[1], a1);
  *a2 = v4;
}

void sub_216C0DD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void sub_216C0DD74(uint64_t a1, uint64_t a2)
{
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_ExpressionTreeAlwaysHasIdentity(int *a1)
{
  int v2 = *a1;
  BOOL result = 1;
  switch(v2)
  {
    case 0:
      int v4 = *((unsigned __int8 *)a1 + 60);
      return v4 != 0;
    case 1:
      return 0;
    case 3:
      uint64_t v6 = *((void *)a1 + 1);
      if (v6 && *(unsigned char *)(v6 + 80)) {
        goto LABEL_8;
      }
      return 0;
    case 4:
      return result;
    default:
      uint64_t v5 = *((void *)a1 + 1);
      if (v5 && *(unsigned char *)(v5 + 80)) {
        return 1;
      }
LABEL_8:
      uint64_t v7 = *((void *)a1 + 2);
      if (!v7) {
        return 0;
      }
      int v4 = *(unsigned __int8 *)(v7 + 80);
      return v4 != 0;
  }
}

uint64_t sub_216C0DE18(uint64_t a1)
{
  sub_216BBED8C(a1 + 24);
  sub_216BD0624((atomic_uint **)(a1 + 16), v2);
  sub_216BD0624((atomic_uint **)(a1 + 8), v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Node(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 84), 1u);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = (void *)(a1 + 16);
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 84), 1u);
  }
  sub_216BBEE18((_DWORD *)(a1 + 24), a2 + 24);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_ExpressionTreeAlwaysHasIdentity((int *)a1);
  sub_216BBED3C(a1 + 88);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 16sub_216C01044((uint64_t *)this, 0) = 0;
  sub_216BBED3C(a1 + 168);
  *(unsigned char *)(a1 + 224) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 225));
  __dmb(0xBu);
  *(_DWORD *)(a1 + 84) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    sub_21685036C((uint64_t)v14, v7 + 224);
    uint64_t v8 = (uint64_t **)(*(void *)(a1 + 8) + 144);
    uint64_t v13 = a1;
    sub_216856018(v8, (unint64_t *)&v13, &v13);
    uint64_t v9 = (unsigned char *)v14[0];
    if (v14[0])
    {
      __dmb(0xBu);
      unsigned char *v9 = 0;
    }
  }
  if (*v6)
  {
    sub_21685036C((uint64_t)v14, *v6 + 224);
    uint64_t v10 = (uint64_t **)(*(void *)(a1 + 16) + 144);
    uint64_t v13 = a1;
    sub_216856018(v10, (unint64_t *)&v13, &v13);
    long long v11 = (unsigned char *)v14[0];
    if (v14[0])
    {
      __dmb(0xBu);
      unsigned char *v11 = 0;
    }
  }
  return a1;
}

void sub_216C0DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  sub_216BBED8C(v14);
  sub_2167FB780(v13, *v15);
  sub_216BBED8C(v12);
  sub_216C0DE18(v11);
  _Unwind_Resume(a1);
}

void sub_216C0E014(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_216BD0624(v3, a2);
  sub_216BD0624(v2, v4);
  JUMPOUT(0x216C0E00CLL);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::~_Node(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *this)
{
  uint64_t v3 = (char *)this + 8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    sub_21685036C((uint64_t)&v32, v2 + 224);
    uint64_t v4 = *((void *)this + 1) + 144;
    v36[0] = (unint64_t)this;
    sub_216C0F45C(v4, v36);
    uint64_t v5 = v32;
    if (v32)
    {
      __dmb(0xBu);
      *(unsigned char *)uint64_t v5 = 0;
    }
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    sub_21685036C((uint64_t)&v32, v6 + 224);
    uint64_t v7 = *((void *)this + 2) + 144;
    v36[0] = (unint64_t)this;
    sub_216C0F45C(v7, v36);
    uint64_t v8 = v32;
    if (v32)
    {
      __dmb(0xBu);
      *(unsigned char *)uint64_t v8 = 0;
    }
  }
  if (*(_DWORD *)this != 1)
  {
    long long v32 = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    uint64_t v9 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
    if (!v9)
    {
      sub_216C0E928(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
      uint64_t v9 = v30;
    }
    if (v34)
    {
      uint64_t v10 = (atomic_ullong *)v32;
      long long v32 = 0;
      if (v33)
      {
LABEL_12:
        atomic_ullong v11 = *v10;
        unint64_t v12 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
        while (1)
        {
          atomic_ullong v13 = v11;
          atomic_compare_exchange_strong(v10, (unint64_t *)&v13, v12);
          if (v13 == v11) {
            break;
          }
          if (atomic_fetch_add_explicit(v10, 0, memory_order_relaxed) != v11)
          {
            sched_yield();
            goto LABEL_12;
          }
        }
      }
      else
      {
        atomic_fetch_add(v10, 0xFFFFFFFFFFFFFFFCLL);
      }
      uint64_t v34 = 0;
    }
    if (sub_216C0EAA8(v9, 0, (uint64_t)this, (uint64_t)&v32, (uint64_t (*)(uint64_t *, uint64_t, void))sub_216C0F4D8)&& *(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v34 + 96) == this)
    {
      uint64_t v14 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
      if (!v14)
      {
        sub_216C0E928(&pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_nodeRegistry);
        uint64_t v14 = v31;
      }
      uint64_t v15 = (void *)v34;
      uint64_t v16 = v35;
      uint64_t v17 = *v14;
      __dmb(0xBu);
      while (1)
      {
        sub_216C0EF84((uint64_t)v36, (uint64_t)v14, v17 & v16, 1);
        uint64_t v18 = (void *)(v36[2] + 16);
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
          if (v18) {
            BOOL v20 = v18 == v15;
          }
          else {
            BOOL v20 = 1;
          }
        }
        while (!v20);
        if (v18) {
          break;
        }
        uint64_t v21 = *v14;
        __dmb(0xBu);
        if (v17 == v21 || !sub_21686CF40((uint64_t)v14, v16, v17, v21))
        {
          if (v34)
          {
            int v22 = (atomic_ullong *)v32;
            long long v32 = 0;
            if (v33)
            {
LABEL_35:
              atomic_ullong v23 = *v22;
              unint64_t v24 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
              while (1)
              {
                atomic_ullong v25 = v23;
                atomic_compare_exchange_strong(v22, (unint64_t *)&v25, v24);
                if (v25 == v23) {
                  break;
                }
                if (atomic_fetch_add_explicit(v22, 0, memory_order_relaxed) != v23)
                {
                  sched_yield();
                  goto LABEL_35;
                }
              }
            }
            else
            {
              atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFCLL);
            }
            uint64_t v34 = 0;
          }
          sub_21685C048(v36);
          goto LABEL_53;
        }
        sub_21685C048(v36);
        uint64_t v17 = v21;
      }
      *uint64_t v19 = *v15;
      atomic_fetch_add(v14 + 65, 0xFFFFFFFFFFFFFFFFLL);
      sub_21685C048(v36);
      if (!v33)
      {
        char v33 = 1;
        tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v32);
      }
      if (v34)
      {
        uint64_t v26 = (atomic_ullong *)v32;
        long long v32 = 0;
        if (v33)
        {
LABEL_43:
          atomic_ullong v27 = *v26;
          unint64_t v28 = *v26 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v29 = v27;
            atomic_compare_exchange_strong(v26, (unint64_t *)&v29, v28);
            if (v29 == v27) {
              break;
            }
            if (atomic_fetch_add_explicit(v26, 0, memory_order_relaxed) != v27)
            {
              sched_yield();
              goto LABEL_43;
            }
          }
        }
        else
        {
          atomic_fetch_add(v26, 0xFFFFFFFFFFFFFFFCLL);
        }
        uint64_t v34 = 0;
      }
      sub_216C0EA64((uint64_t)v15);
    }
LABEL_53:
    uint64_t v34 = 0;
    sub_21685C048(&v32);
  }
  sub_216BBED8C((uint64_t)this + 168);
  sub_2167FB780((uint64_t)this + 144, *((void **)this + 19));
  sub_216BBED8C((uint64_t)this + 88);
  sub_216BBED8C((uint64_t)this + 24);
  sub_216BD0624((char *)this + 16);
  sub_216BD0624(v3);
}

void sub_216C0E368(void *a1)
{
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_EvaluateUncached(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *this@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      sub_216BBEE18((_DWORD *)a4, (uint64_t)this + 24);
      long long v6 = *((_OWORD *)this + 4);
      goto LABEL_5;
    case 1:
      sub_216BBEE18((_DWORD *)a4, (uint64_t)this + 168);
      long long v6 = *((_OWORD *)this + 13);
LABEL_5:
      *(_OWORD *)(a4 + 4sub_216C01044((uint64_t *)this, 0) = v6;
      break;
    case 2:
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this + 1));
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetInverse(v8, a4);
      break;
    case 3:
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this + 1));
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this + 2));
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose(v9, v10, a4);
      break;
    case 4:
      atomic_ullong v11 = (unsigned char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::EvaluateAndCache(*((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)this
                                                                                                 + 1));
      sub_216C0DB60(v11, a4);
      break;
    default:
      v12[0] = "pcp/mapExpression.cpp";
      v12[1] = "_EvaluateUncached";
      v12[2] = 327;
      _OWORD v12[3] = "PcpMapExpression::Value pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_EvaluateUncached() const";
      char v13 = 0;
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"unhandled case", a2, a3);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "false", v7);
      *(void *)(a4 + 48) = 0;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)a4 = 0u;
      sub_216BBED3C(a4);
      break;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Invalidate(uint64_t this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 225));
  if (v1)
  {
    uint64_t v2 = this;
    atomic_store(0, (unsigned __int8 *)(this + 225));
    memset(v11, 0, sizeof(v11));
    sub_216BBED3C((uint64_t)v11);
    if ((unsigned char *)(v2 + 88) != v11)
    {
      uint64_t v3 = (_DWORD *)sub_216BBED8C(v2 + 88);
      sub_216BBFB70(v3, (uint64_t)v11);
    }
    *(_OWORD *)(v2 + 128) = *(_OWORD *)&v11[40];
    this = sub_216BBED8C((uint64_t)v11);
    uint64_t v4 = *(void **)(v2 + 144);
    uint64_t v5 = (void *)(v2 + 152);
    if (v4 != (void *)(v2 + 152))
    {
      do
      {
        long long v6 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v4[4];
        sub_21685036C((uint64_t)v11, (uint64_t)v6 + 224);
        this = pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Invalidate(v6);
        uint64_t v7 = *(unsigned char **)v11;
        if (*(void *)v11)
        {
          __dmb(0xBu);
          unsigned char *v7 = 0;
        }
        uint64_t v8 = (void *)v4[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v4[2];
            BOOL v10 = *v9 == (void)v4;
            uint64_t v4 = v9;
          }
          while (!v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v5);
    }
  }
  return this;
}

void sub_216C0E65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == 1)
  {
    sub_21685036C((uint64_t)v6, a1 + 224);
    if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator!=(a1 + 168, a2))
    {
      if (a1 + 168 != a2)
      {
        uint64_t v4 = (_DWORD *)sub_216BBED8C(a1 + 168);
        sub_216BBFB70(v4, a2);
      }
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 40);
      pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::_Invalidate(a1);
    }
    uint64_t v5 = (unsigned char *)v6[0];
    if (v6[0])
    {
      __dmb(0xBu);
      *uint64_t v5 = 0;
    }
  }
  else
  {
    v6[0] = "pcp/mapExpression.cpp";
    v6[1] = "SetValueForVariable";
    v6[2] = 352;
    void v6[3] = "void pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::SetValueForVariable(Value &&)";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set value for non-variable");
  }
}

void sub_216C0E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::Key::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    return pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==(a1 + 24, a2 + 24);
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref(uint64_t result)
{
  return result;
}

void pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(atomic_uint *this, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  unsigned int add = atomic_fetch_add(this + 21, 0xFFFFFFFF);
  if (this && add == 1)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::~_Node((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)this);
    operator delete(v3);
  }
}

uint64_t sub_216C0E7FC(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  return a1;
}

void sub_216C0E828(atomic_uint **a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_216BD0624(a1 + 1, a2);

  operator delete(a1);
}

uint64_t sub_216C0E864(uint64_t a1)
{
  return *(void *)(a1 + 8) + 168;
}

uint64_t sub_216C0E870@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = v2;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 84), 1u);
  }
  return result;
}

uint64_t sub_216C0E88C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  uint64_t v7 = *a3;
  *(void *)(a1 + 8) = *a3;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 84), 1u);
  }
  uint64_t v8 = *a4;
  *(void *)(a1 + 16) = *a4;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 + 84), 1u);
  }
  sub_216BBEE18((_DWORD *)(a1 + 24), a5);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a5 + 40);
  return a1;
}

void sub_216C0E90C(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_216BD0624(v3, a2);
  sub_216BD0624(v2, v5);
  _Unwind_Resume(a1);
}

void sub_216C0E928(atomic_ullong *a1)
{
  sub_216BC87C4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)v2);
  if (v3)
  {
    if (v2)
    {
      uint64_t v4 = sub_216C0E970(v2);
      operator delete(v4);
    }
    atomic_load((unint64_t *)a1);
  }
}

unint64_t *sub_216C0E970(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  for (unint64_t i = sub_216851020(v2); ; --i)
  {
    unint64_t v5 = 0;
    long long v6 = &a1[i];
    unint64_t v9 = v6[1];
    uint64_t v7 = (uint64_t *)(v6 + 1);
    unint64_t v8 = v9;
    char v10 = i <= 1 ? 1 : i;
    do
    {
      atomic_ullong v11 = (void **)(v8 + 24 * v5 + 16);
      while (1)
      {
        uint64_t v12 = *v11;
        if ((unint64_t)*v11 <= 0x3F) {
          break;
        }
        unsigned char *v11 = (void *)*v12;
        sub_216C0EA64((uint64_t)v12);
      }
      ++v5;
    }
    while (!(v5 >> v10));
    if (i < 8 && i != 1) {
      break;
    }
    tbb::internal::deallocate_via_handler_v3(*v7, v3);
LABEL_14:
    uint64_t *v7 = 0;
  }
  if (i) {
    goto LABEL_14;
  }
  __dmb(0xBu);
  *a1 = 1;
  return a1;
}

uint64_t sub_216C0EA64(uint64_t a1)
{
  sub_216BBED8C(a1 + 40);
  sub_216BD0624(a1 + 32);
  sub_216BD0624(a1 + 24);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

uint64_t sub_216C0EAA8(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, void))
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v45 = v8;
  long long v41 = 0;
  char v42 = 0;
  sub_216C0F1E4((uint64_t)&v41, (unsigned int *)a3, &v45, &v44, a3 + 24);
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = bswap64(0x9E3779B97F4A7C55 * (void)v41);
  uint64_t v12 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_216C0EF84((uint64_t)&v41, (uint64_t)a1, v12 & v11, 0);
    char v13 = (void *)(v43 + 16);
    do
      char v13 = (void *)*v13;
    while ((unint64_t)v13 >= 0x40
         && !pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::Key::operator==(a3, (uint64_t)(v13 + 2)));
    if (a2) {
      break;
    }
    if (v13)
    {
      unsigned int v39 = 1;
LABEL_10:
      uint64_t v14 = (uint64_t)v9;
      if (!a4) {
        goto LABEL_57;
      }
      goto LABEL_11;
    }
    unint64_t v21 = *a1;
    __dmb(0xBu);
    if (v12 == v21 || !sub_21686CF40((uint64_t)a1, v11, v12, v21))
    {
      sub_21685C048(&v41);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v41);
    uint64_t v12 = v21;
  }
  if (v13)
  {
LABEL_7:
    unsigned int v39 = 0;
    goto LABEL_10;
  }
  if (!v9) {
    unint64_t v9 = (void *)a5(a1 + 72, a3, 0);
  }
  if (!v42)
  {
    char v42 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v41) & 1) == 0)
    {
      char v13 = (void *)(v43 + 16);
      while (1)
      {
        char v13 = (void *)*v13;
        if ((unint64_t)v13 < 0x40) {
          break;
        }
        if (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node::Key::operator==(a3, (uint64_t)(v13 + 2)))
        {
          if (!v42) {
            goto LABEL_7;
          }
          unsigned int v39 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v41, 3uLL);
          char v42 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v21 = *a1;
  __dmb(0xBu);
  if (v12 != v21)
  {
    if (!sub_21686CF40((uint64_t)a1, v11, v12, v21)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v21 = v12;
LABEL_33:
  unint64_t v10 = sub_21686C9CC((uint64_t)a1, v43, v9, v21);
  uint64_t v14 = 0;
  unsigned int v39 = 1;
  char v13 = v9;
  if (!a4)
  {
LABEL_57:
    sub_21685C048(&v41);
    if (!v10) {
      goto LABEL_54;
    }
    goto LABEL_41;
  }
LABEL_11:
  *(unsigned char *)(a4 + 8) = 1;
  if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v13 + 1))
  {
    sched_yield();
    int v15 = 2;
    while (1)
    {
      *(unsigned char *)(a4 + 8) = 1;
      if (tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v13 + 1)) {
        break;
      }
      sched_yield();
      BOOL v16 = v15 < 16;
      v15 *= 2;
      if (!v16)
      {
        uint64_t v17 = (atomic_ullong *)v41;
        long long v41 = 0;
        if (v42)
        {
LABEL_16:
          atomic_ullong v18 = *v17;
          unint64_t v19 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v20 = v18;
            atomic_compare_exchange_strong(v17, (unint64_t *)&v20, v19);
            if (v20 == v18) {
              break;
            }
            if (atomic_fetch_add_explicit(v17, 0, memory_order_relaxed) != v18)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v17, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v21 = *a1;
        __dmb(0xBu);
        unint64_t v9 = (void *)v14;
        goto LABEL_31;
      }
    }
  }
  *(void *)a4 = v13 + 1;
  sub_21685C048(&v41);
  *(void *)(a4 + 16) = v13;
  *(void *)(a4 + 24) = v11;
  if (v10)
  {
LABEL_41:
    if (v10 < 8)
    {
      uint64_t v26 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      unint64_t v27 = -6096;
      do
      {
        unint64_t v28 = v26 + v27;
        *(void *)(v28 + 6104) = 0;
        *(void *)(v28 + 6112) = 3;
        v27 += 24;
      }
      while (v27);
      int64x2_t v29 = (int64x2_t)xmmword_217411D20;
      uint64_t v30 = v26 - 48;
      uint64x2_t v31 = (uint64x2_t)vdupq_n_s64(7uLL);
      uint64x2_t v32 = (uint64x2_t)vdupq_n_s64(1uLL);
      int8x16_t v33 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      int64x2_t v34 = vdupq_n_s64(2uLL);
      uint64_t v25 = 255;
      do
      {
        uint64x2_t v35 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v27), (int8x16_t)xmmword_217411D30);
        int8x16_t v36 = vandq_s8((int8x16_t)vshlq_u64(v32, (uint64x2_t)v29), v33);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v31, v35)).u8[0]) {
          a1[v27 + 2] = v30 + 24 * v36.i64[0];
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v35)).i32[1]) {
          a1[v27 + 3] = v30 + 24 * v36.i64[1];
        }
        v27 += 2;
        int64x2_t v29 = vaddq_s64(v29, v34);
      }
      while (v27 != 8);
    }
    else
    {
      uint64_t v22 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v10));
      uint64_t v23 = 1 << v10;
      unint64_t v24 = (void *)(v22 + 16);
      do
      {
        *(v24 - 1) = 0;
        *unint64_t v24 = 3;
        v24 += 3;
        --v23;
      }
      while (v23);
      a1[v10 + 1] = v22;
      uint64_t v25 = (2 << v10) - 1;
    }
    __dmb(0xBu);
    *a1 = v25;
  }
LABEL_54:
  if (v14) {
    sub_216C0EA64(v14);
  }
  return v39;
}

void sub_216C0EEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8 * v13 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C0EEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x68);
  v7[1] = a1;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 8sub_216C01044((uint64_t *)this, 0) = 0u;
  *(void *)(v4 + 96) = 0;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  sub_216C0F3B8(v4 + 16, a2);
  v7[0] = 0;
  sub_216C0F384(v7, v5);
  return v4;
}

void sub_216C0EF70(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C0EF84(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (unint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3)
    {
      __dmb(0xBu);
      *(void *)(v11 + 16) = 0;
      if (a3)
      {
        unint64_t v12 = HIDWORD(a3);
        if (!HIDWORD(a3)) {
          unint64_t v12 = a3;
        }
        char v13 = 32 * (HIDWORD(a3) != 0);
        if (v12 >= 0x10000)
        {
          v12 >>= 16;
          char v13 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v12 >= 0x100)
        {
          v12 >>= 8;
          v13 |= 8u;
        }
        if (v12 >= 0x10)
        {
          v12 >>= 4;
          v13 |= 4u;
        }
        BOOL v14 = v12 >= 4;
        if (v12 >= 4) {
          LODWORD(v12) = v12 >> 2;
        }
        unsigned int v15 = (v12 >> 1) & 1;
        if (v14) {
          v13 += 2;
        }
        char v16 = v15 + v13;
      }
      else
      {
        char v16 = -1;
      }
      uint64_t v19 = ~(-1 << v16);
      sub_216C0EF84(&v24, a2, v19 & a3, 0);
      atomic_ullong v20 = (unint64_t *)(v26 + 16);
      unint64_t v21 = *(void *)(v26 + 16);
      __dmb(0xBu);
      if (v21 >= 0x40)
      {
        uint64_t v22 = (2 * v19) | 1;
        while (1)
        {
          uint64_t v23 = *(void *)(v21 + 24);
          uint64_t v27 = *(void *)(v21 + 32);
          uint64_t v28 = v23;
          uint64_t v29 = 0;
          char v30 = 0;
          sub_216C0F1E4((uint64_t)&v29, (unsigned int *)(v21 + 16), &v28, &v27, v21 + 40);
          if ((bswap64(0x9E3779B97F4A7C55 * v29) & v22) != a3) {
            break;
          }
          if (v25 || (char v25 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v24) & 1) != 0))
          {
            unint64_t *v20 = *(void *)v21;
            *(void *)unint64_t v21 = *(void *)(v11 + 16);
            *(void *)(v11 + 16) = v21;
LABEL_31:
            unint64_t v21 = *v20;
            if (*v20 <= 0x3F) {
              goto LABEL_34;
            }
          }
          else
          {
            atomic_ullong v20 = (unint64_t *)(v26 + 16);
            unint64_t v21 = *(void *)(v26 + 16);
            __dmb(0xBu);
            if (v21 < 0x40) {
              goto LABEL_34;
            }
          }
        }
        atomic_ullong v20 = (unint64_t *)v21;
        goto LABEL_31;
      }
LABEL_34:
      sub_21685C048(&v24);
    }
  }
  else
  {
    uint64_t v17 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v17;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v17);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v17);
    }
  }
  return a1;
}

void sub_216C0F1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  sub_21685C048(v2);
  _Unwind_Resume(a1);
}

unint64_t sub_216C0F1E4(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_216C0F220(a1, a3, a4, a5);
}

unint64_t sub_216C0F220(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_216C0F258(a1, a3, a4);
}

unint64_t sub_216C0F258(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  sub_216C0F2CC(a1, (unsigned int *)a3);

  return sub_2169DA90C(a1, (int8x16_t *)(a3 + 40));
}

uint64_t sub_216C0F2CC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 36);
  if (*(unsigned char *)(a1 + 8)) {
    v2 += (unint64_t)(*(void *)a1 + v2 + (*(void *)a1 + v2) * (*(void *)a1 + v2)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v2;
  *(void *)a1 = (int)a2[8] + ((unint64_t)(v2 + (int)a2[8] + (v2 + (int)a2[8]) * (v2 + (int)a2[8])) >> 1);
  uint64_t v3 = (int)a2[8];
  if (v3 >= 3) {
    a2 = *(unsigned int **)a2;
  }
  return sub_216C0F324(a1, a2, &a2[4 * v3]);
}

uint64_t sub_216C0F324(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      sub_2169827F8(v5, v4);
      BOOL result = sub_2169827F8(v5, v4 + 2);
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t *sub_216C0F384(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_216C0F3B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 84), 1u);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add((atomic_uint *volatile)(v5 + 84), 1u);
  }
  sub_216BBEE18((_DWORD *)(a1 + 24), a2 + 24);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = 0;
  return a1;
}

void sub_216C0F440(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2)
{
  sub_216BD0624(v3, a2);
  sub_216BD0624(v2, v5);
  _Unwind_Resume(a1);
}

uint64_t sub_216C0F45C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_2167AE00C((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t sub_216C0F4D8()
{
  return 0;
}

int **pxrInternal__aapl__pxrReserved__::PcpMapFunction::PcpMapFunction(int **a1, char *a2, char *a3, char a4, double a5, double a6)
{
  BOOL result = sub_216C114B4(a1, a2, a3, a4);
  *((double *)result + 5) = a5;
  *((double *)result + 6) = a6;
  return result;
}

{
  int **result;

  BOOL result = sub_216C114B4(a1, a2, a3, a4);
  *((double *)result + 5) = a5;
  *((double *)result + 6) = a6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create@<X0>(void **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216851EE4((uint64_t)&v34, "Pcp", "PcpMapFunction");
  uint64_t v7 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  sub_216981010(&v33, v7);
  sub_21698105C((_DWORD *)&v33 + 1, v7 + 1);
  unint64_t v10 = (unint64_t)a1[2];
  if (v10 == 1)
  {
    BOOL IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(a2);
    if (IsIdentity)
    {
      uint64_t v12 = *(void *)((char *)*a1 + 28);
      if (v12 == v33 && *(void *)((char *)*a1 + 36) == v12)
      {
        uint64_t v13 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
        sub_216BBEE18((_DWORD *)a3, v13);
        *(_OWORD *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(v13 + 40);
        goto LABEL_20;
      }
    }
    unint64_t v10 = (unint64_t)a1[2];
  }
  if (v10 >> 31)
  {
    uint64_t v28 = (int *)"pcp/mapFunction.cpp";
    uint64_t v29 = (int *)"Create";
    uint64_t v30 = 177;
    uint64x2_t v31 = "static PcpMapFunction pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(const PathMap &, const SdfLayerOffset &)";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct a PcpMapFunction with %zu entries; limit is %zu",
      v10,
      0x7FFFFFFFuLL);
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    sub_216BBED3C(a3);
  }
  else
  {
    uint64_t v26 = (char *)*a1;
    uint64_t v27 = (int *)(a1 + 1);
    while (v26 != (char *)v27)
    {
      char v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_216C0F8DC(&v26, v8, v9) + 28);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_216C0F8DC(&v26, v14, v15) + 36);
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v16)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v16)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v16)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v17)
        || !pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v17)
        && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v17) & 1) == 0)
      {
        uint64_t v28 = (int *)"pcp/mapFunction.cpp";
        uint64_t v29 = (int *)"Create";
        uint64_t v30 = 201;
        uint64x2_t v31 = "static PcpMapFunction pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(const PathMap &, const SdfLayerOffset &)";
        char v32 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v16);
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v17);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"The mapping of '%s' to '%s' is invalid.", Text, v19);
        *(void *)(a3 + 48) = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        sub_216BBED3C(a3);
        goto LABEL_20;
      }
      sub_216C0F958(&v26);
    }
    sub_216C125E0(&v28, *a1, a1 + 1);
    char v25 = (char *)v29;
    uint64_t v26 = (char *)v28;
    char v20 = sub_216C0FA00((int **)&v26, (int **)&v25);
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = *((void *)a2 + 1);
    sub_216C114B4((int **)a3, v26, v25, v20);
    *(void *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = v21;
    *(void *)(a3 + 48) = v22;
    uint64_t v26 = (char *)&v28;
    sub_216BECE18((void ***)&v26);
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  for (uint64_t result = (uint64_t)sub_21697C414(&v33); v35--; uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v34))
    ;
  return result;
}

void sub_216C0F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_21684E6B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91500, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B91500);
    if (v2)
    {
      qword_267B914F8 = (uint64_t)pxrInternal__aapl__pxrReserved__::Pcp_MakeIdentity(v2);
      __cxa_guard_release(&qword_267B91500);
    }
  }
  return qword_267B914F8;
}

void sub_216C0F8C4(_Unwind_Exception *a1)
{
}

void *sub_216C0F8DC(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>>::o"
            "perator->() [T = const std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__:"
            ":SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C0F958(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    uint64_t v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::Fas"
            "tLessThan>>::operator++() [T = const std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__"
            "pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath::FastLessThan>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    unint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        unint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_216C0FA00(int **a1, int **a2)
{
  char v4 = *a1;
  BOOL v5 = *a2;
  if (*a1 != v5)
  {
    while (1)
    {
      BOOL v6 = *a1;
      if (*a1 == v4)
      {
LABEL_8:
        NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
        if ((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) != (*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 2)) & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_24;
        }
        sub_216981010(&v24, v4);
        sub_21698105C((_DWORD *)&v24 + 1, v4 + 1);
        sub_216981010(&v23, v4 + 2);
        sub_21698105C((_DWORD *)&v23 + 1, v4 + 3);
        char v9 = 0;
        while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v24)
             && !(v9 & 1 | !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23)))
        {
          unint64_t v10 = *a1;
          if (*a1 == *a2)
          {
LABEL_17:
            char v9 = 0;
          }
          else
          {
            while (v10 == v4 || *(void *)v10 != v24 || *((void *)v10 + 1) != v23)
            {
              v10 += 4;
              if (v10 == *a2) {
                goto LABEL_17;
              }
            }
            char v9 = 1;
          }
          uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
          if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) != (*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23) & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v21);
          sub_21697DE94((int *)&v24, &v21);
          sub_21697DEEC((int *)&v24 + 1, &v22);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v19);
          sub_21697DE94((int *)&v23, &v19);
          sub_21697DEEC((int *)&v23 + 1, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
          sub_21697C414(&v19);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          sub_21697C414(&v21);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
        sub_21697C414(&v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        sub_21697C414(&v24);
        if ((v9 & 1) == 0)
        {
LABEL_24:
          v4 += 4;
          BOOL v5 = *a2;
          goto LABEL_25;
        }
        BOOL v5 = *a2;
      }
      else
      {
        while (*(void *)v4 != *(void *)v6 || *((void *)v4 + 1) != *((void *)v6 + 1))
        {
          v6 += 4;
          if (v6 == v4) {
            goto LABEL_8;
          }
        }
      }
      sub_216C12838(v4, v5 - 4);
      BOOL v5 = *a2 - 4;
      *a2 = v5;
LABEL_25:
      if (v4 == v5)
      {
        char v4 = *a1;
        goto LABEL_28;
      }
    }
  }
  BOOL v5 = *a1;
LABEL_28:
  unint64_t v12 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 4);
  if (v5 == v4) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C12890((uint64_t)v4, v5, v13, 1);
  if (*a1 == *a2) {
    return 0;
  }
  unsigned int v15 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14);
  char v16 = *a1;
  uint64_t v17 = *(void *)*a1;
  if (v17 != *v15 || *((void *)v16 + 1) != v17) {
    return 0;
  }
  *a1 = v16 + 4;
  return 1;
}

void sub_216C0FCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va);
  sub_21697B754((uint64_t *)va1);
  sub_21697B754((int *)va2);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsNull(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return !*((_DWORD *)this + 8) && *((unsigned char *)this + 36) == 0;
}

unsigned char *pxrInternal__aapl__pxrReserved__::Pcp_MakeIdentity(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1 = operator new(0x38uLL);
  sub_216BBED3C((uint64_t)v1);
  v1[36] = 1;
  return v1;
}

void sub_216C0FD7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  unsigned __int8 v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)atomic_load((unint64_t *)&qword_267B91508);
  if (!v1)
  {
    unsigned __int8 v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x18uLL);
    *((void *)v1 + 2) = 0;
    *((void *)v1 + 1) = 0;
    *(void *)unsigned __int8 v1 = (char *)v1 + 8;
    uint64_t v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v1);
    sub_2169D36F0(&v5, v3, v3);
    sub_216C13790((uint64_t **)v1, &v5, &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
    sub_21697C414(&v5);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B91508, (unint64_t *)&v4, (unint64_t)v1);
    if (v4)
    {
      sub_21698F21C((uint64_t)v1, *((void **)v1 + 1));
      operator delete(v1);
      return atomic_load((unint64_t *)&qword_267B91508);
    }
  }
  return (unint64_t)v1;
}

void sub_216C0FE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v11 + 12));
  sub_21697C414(&a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a10);
  sub_21697C414(&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return !*((_DWORD *)this + 8)
      && *((unsigned char *)this + 36)
      && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40));
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentityPathMapping(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return !*((_DWORD *)this + 8) && *((unsigned char *)this + 36) != 0;
}

__n128 pxrInternal__aapl__pxrReserved__::PcpMapFunction::Swap(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this, pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  sub_216BBFB70(v7, (uint64_t)this);
  if (this != a2)
  {
    uint64_t v4 = (_DWORD *)sub_216BBED8C((uint64_t)this);
    sub_216BBFB70(v4, (uint64_t)a2);
  }
  if (v7 != (_DWORD *)a2)
  {
    unint64_t v5 = (_DWORD *)sub_216BBED8C((uint64_t)a2);
    sub_216BBFB70(v5, (uint64_t)v7);
  }
  sub_216BBED8C((uint64_t)v7);
  __n128 result = *(__n128 *)((char *)this + 40);
  *(_OWORD *)((char *)this + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)((char *)a2 + 40);
  *(__n128 *)((char *)a2 + 4sub_216C01044((uint64_t *)this, 0) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_216C0FFEC((uint64_t *)a1, a2);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(a1 + 40), (double *)(a2 + 40));
  }
  return result;
}

uint64_t sub_216C0FFEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 8);
  if (__PAIR64__(*((unsigned __int8 *)a1 + 36), v2) != __PAIR64__(*(unsigned __int8 *)(a2 + 36), *(_DWORD *)(a2 + 32))) {
    return 0;
  }
  if ((int)v2 >= 3)
  {
    a1 = (uint64_t *)*a1;
    uint64_t v3 = &a1[2 * v2];
  }
  else
  {
    if (!v2) {
      return 1;
    }
    uint64_t v3 = &a1[2 * (int)v2];
  }
  unint64_t v5 = *(uint64_t ***)a2;
  if ((int)v2 < 3) {
    unint64_t v5 = (uint64_t **)a2;
  }
  do
  {
    int v6 = (uint64_t *)*a1;
    int v7 = (uint64_t *)a1[1];
    a1 += 2;
    uint64_t v8 = *v5;
    char v9 = v5[1];
    v5 += 2;
    BOOL v4 = v6 == v8 && v7 == v9;
  }
  while (v4 && a1 != v3);
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator!=(uint64_t a1, uint64_t a2)
{
  return !sub_216C0FFEC((uint64_t *)a1, a2)
      || !pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(a1 + 40), (double *)(a2 + 40));
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4 = *((_DWORD *)this + 8);
  unint64_t v5 = this;
  if (v4 >= 3) {
    unint64_t v5 = *(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)this;
  }
  return sub_216C100DC(a2, (uint64_t)v5, v4, *((unsigned char *)this + 36), 0, a3);
}

_DWORD *sub_216C100DC@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  uint64_t v7 = a2;
  if (a3 < 1)
  {
    int v11 = -1;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    int v11 = -1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    do
    {
      if (a5) {
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 8);
      }
      else {
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v12;
      }
      unint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v14);
      if (PathElementCount >= v10)
      {
        unint64_t v16 = PathElementCount;
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a1, v14))
        {
          unint64_t v10 = v16;
          int v11 = v9;
        }
      }
      ++v9;
      v12 += 16;
    }
    while (v13 != v9);
  }
  if (v11 != -1 || (a4 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
    atomic_ullong v18 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v34);
    if (v11 == -1)
    {
      int v22 = a3;
      int v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v18);
      sub_2169C487C(&v33, a1);
      sub_2169C48D4(&v34, (_DWORD *)a1 + 1);
    }
    else
    {
      uint64_t v19 = v7 + 16 * v11;
      if (a5) {
        int v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16 * v11);
      }
      else {
        int v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 8);
      }
      if (a5) {
        int v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v19 + 8);
      }
      else {
        int v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16 * v11);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v32, a1, v21, v20, 0);
      int v22 = a3;
      sub_21697DE94(&v33, (int *)&v32);
      sub_21697DEEC(&v34, (int *)&v32 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
      sub_21697C414(&v32);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v33)) {
        goto LABEL_36;
      }
    }
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v20);
    if (v22 >= 1)
    {
      unint64_t v24 = v23;
      uint64_t v25 = v11;
      uint64_t v26 = v22;
      while (1)
      {
        if (v25)
        {
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a5 ? v7 : v7 + 8);
          if (pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v27) > v24
            && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, v27))
          {
            break;
          }
        }
        --v25;
        v7 += 16;
        if (!--v26) {
          goto LABEL_36;
        }
      }
      *(void *)a6 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a6);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a6 + 1);
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v28 = sub_21697D878(a6, &v33);
    sub_21697D8B4(v28 + 1, &v34);
LABEL_37:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    return sub_21697C414(&v33);
  }
  *(void *)a6 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a6);

  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a6 + 1);
}

void sub_216C10364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4 = *((_DWORD *)this + 8);
  unint64_t v5 = this;
  if (v4 >= 3) {
    unint64_t v5 = *(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)this;
  }
  return sub_216C100DC(a2, (uint64_t)v5, v4, *((unsigned char *)this + 36), 1, a3);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::_MapPathExpressionImpl(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v16 = a2;
  uint64_t v14 = a5;
  uint64_t v15 = a4;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v10[0] = a1;
  v10[1] = &v16;
  v8[0] = (void **)&v11;
  v8[1] = (void **)v10;
  v8[2] = (void **)&v14;
  uint64_t v9 = &v11;
  v7[0] = &v11;
  v7[1] = v10;
  uint64_t v7[2] = &v15;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(a3, (uint64_t)&v9, (uint64_t)sub_216C1177C, (uint64_t)v8, sub_216C11AB8, (uint64_t)v7, (void (*)(uint64_t, uint64_t))sub_216C1219C);
  if (v11 == v12)
  {
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 8sub_216C01044((uint64_t *)this, 0) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  else
  {
    sub_2169B70E4((void *)a6, v12 - 96);
  }
  v8[0] = (void **)&v11;
  sub_216B0B294(v8);
}

void sub_216C104A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216B0B294((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v62, "Pcp", "PcpMapFunction");
  uint64_t v54 = this;
  if (!*((_DWORD *)this + 8)
    && *((unsigned char *)this + 36)
    && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40)))
  {
    uint64_t result = (uint64_t)sub_216BBEE18((_DWORD *)a3, (uint64_t)a2);
    long long v8 = *(_OWORD *)((char *)a2 + 40);
    goto LABEL_52;
  }
  if (*((_DWORD *)a2 + 8)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *((unsigned char *)a2 + 36) == 0;
  }
  if (!v6
    && pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)a2 + 40)))
  {
    uint64_t result = (uint64_t)sub_216BBEE18((_DWORD *)a3, (uint64_t)this);
    long long v8 = *(_OWORD *)((char *)this + 40);
LABEL_52:
    *(_OWORD *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = v8;
    goto LABEL_89;
  }
  for (uint64_t i = 0; i != 64; i += 16)
    sub_216C12584(&v64[i]);
  memset(v61, 0, sizeof(v61));
  unint64_t v10 = (int *)v64;
  uint64_t v60 = (int *)v64;
  int v11 = *((_DWORD *)a2 + 8);
  unint64_t v12 = v11 + *((unsigned __int8 *)a2 + 36) + *((_DWORD *)v54 + 8) + *((unsigned __int8 *)v54 + 36);
  uint64_t v53 = a3;
  if ((int)v12 >= 5)
  {
    sub_216C10C68(v61, v12);
    unint64_t v10 = (int *)v61[0];
    uint64_t v60 = (int *)v61[0];
    int v11 = *((_DWORD *)a2 + 8);
  }
  int64x2_t v59 = v10;
  if (v11 >= 3) {
    uint64_t v13 = *(const pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a2;
  }
  else {
    uint64_t v13 = a2;
  }
  uint64_t v14 = v10;
  uint64_t v15 = v54;
  if (v11)
  {
    uint64_t v14 = v10;
    char v16 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)v13 + 16 * v11);
    do
    {
      sub_216A8FD38(&v57, v13);
      int v17 = *((_DWORD *)v15 + 8);
      uint64_t v18 = (uint64_t)v15;
      if (v17 >= 3) {
        uint64_t v18 = *(void *)v15;
      }
      sub_216C100DC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, v18, v17, *((unsigned char *)v15 + 36), 0, &v55);
      sub_21697DE94((int *)&v58, &v55);
      sub_21697DEEC((int *)&v58 + 1, &v56);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_21697C414(&v55);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v58))
      {
        if (v10 == v14)
        {
          uint64_t v19 = v10;
        }
        else
        {
          uint64_t v19 = v10;
          while (*(void ***)v19 != v57 || *((void *)v19 + 1) != v58)
          {
            v19 += 4;
            if (v19 == v14)
            {
              uint64_t v19 = v14;
              break;
            }
          }
        }
        if (v19 == v14)
        {
          sub_216C10D00(v14, (int *)&v57);
          v14 += 4;
          uint64_t v15 = v54;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_21697C414(&v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
      sub_21697C414(&v57);
      uint64_t v13 = (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)v13 + 16);
    }
    while (v13 != v16);
  }
  int64x2_t v59 = v14;
  if (*((unsigned char *)a2 + 36))
  {
    int v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C12584(&v57);
    int v22 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v21);
    sub_2169C487C((int *)&v57, v22);
    uint64_t v23 = sub_2169C48D4((int *)&v57 + 1, v22 + 1);
    unint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
    int v25 = *((_DWORD *)v15 + 8);
    uint64_t v26 = (uint64_t)v15;
    if (v25 >= 3) {
      uint64_t v26 = *(void *)v15;
    }
    sub_216C100DC(v24, v26, v25, *((unsigned char *)v15 + 36), 0, &v55);
    sub_21697DE94((int *)&v58, &v55);
    sub_21697DEEC((int *)&v58 + 1, &v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
    sub_21697C414(&v55);
    uint64_t v15 = v54;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v58))
    {
      if (v10 != v14)
      {
        while (*(void ***)v10 != v57 || *((void *)v10 + 1) != v58)
        {
          v10 += 4;
          if (v10 == v14)
          {
            unint64_t v10 = v14;
            break;
          }
        }
      }
      if (v10 == v14)
      {
        int64x2_t v59 = v14 + 4;
        sub_216C10D00(v14, (int *)&v57);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_21697C414(&v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
    sub_21697C414(&v57);
  }
  uint64_t v28 = *((unsigned int *)v15 + 8);
  if ((int)v28 >= 3)
  {
    uint64x2_t v31 = *(_DWORD **)v15;
    uint64_t v30 = *(void *)v15 + 16 * v28;
    uint64_t v29 = v59;
LABEL_54:
    uint64_t v32 = v60;
    do
    {
      sub_216A8FD38(&v57, v31);
      int v33 = *((_DWORD *)a2 + 8);
      if (v33 >= 3) {
        int v34 = *(const pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a2;
      }
      else {
        int v34 = a2;
      }
      sub_216C100DC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v57, (uint64_t)v34, v33, *((unsigned char *)a2 + 36), 1, &v55);
      sub_21697DE94((int *)&v57, &v55);
      sub_21697DEEC((int *)&v57 + 1, &v56);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_21697C414(&v55);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v57))
      {
        if (v32 == v29)
        {
          int v35 = v32;
        }
        else
        {
          int v35 = v32;
          while (*(void ***)v35 != v57 || *((void *)v35 + 1) != v58)
          {
            v35 += 4;
            if (v35 == v29)
            {
              int v35 = v29;
              break;
            }
          }
        }
        if (v35 == v29)
        {
          sub_216C10D00(v29, (int *)&v57);
          v29 += 4;
          uint64_t v15 = v54;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_21697C414(&v58);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
      sub_21697C414(&v57);
      v31 += 4;
    }
    while (v31 != (_DWORD *)v30);
    goto LABEL_71;
  }
  uint64_t v29 = v59;
  if (v28)
  {
    uint64_t v30 = (uint64_t)v15 + 16 * (int)v28;
    uint64x2_t v31 = v15;
    goto LABEL_54;
  }
LABEL_71:
  int64x2_t v59 = v29;
  if (*((unsigned char *)v15 + 36))
  {
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C12584(&v57);
    unint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v37);
    int v39 = *((_DWORD *)a2 + 8);
    if (v39 >= 3) {
      uint64_t v40 = *(const pxrInternal__aapl__pxrReserved__::PcpMapFunction **)a2;
    }
    else {
      uint64_t v40 = a2;
    }
    sub_216C100DC(v38, (uint64_t)v40, v39, *((unsigned char *)a2 + 36), 1, &v55);
    sub_21697DE94((int *)&v57, &v55);
    sub_21697DEEC((int *)&v57 + 1, &v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
    long long v41 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v55);
    char v42 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v41);
    sub_2169C487C((int *)&v58, v42);
    sub_2169C48D4((int *)&v58 + 1, v42 + 1);
    uint64_t v15 = v54;
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v57))
    {
      uint64_t v43 = v29;
      if (v60 != v29)
      {
        uint64_t v43 = v60;
        while (*(void ***)v43 != v57 || *((void *)v43 + 1) != v58)
        {
          v43 += 4;
          if (v43 == v29)
          {
            uint64_t v43 = v29;
            break;
          }
        }
      }
      if (v43 == v29)
      {
        int64x2_t v59 = v29 + 4;
        sub_216C10D00(v29, (int *)&v57);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_21697C414(&v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
    sub_21697C414(&v57);
  }
  char v45 = sub_216C0FA00(&v60, &v59);
  unint64_t v47 = (char *)v59;
  uint64_t v46 = (char *)v60;
  double v48 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)v15 + 5, (double *)a2 + 5);
  uint64_t v50 = v49;
  sub_216C114B4((int **)v53, v46, v47, v45);
  *(double *)(v53 + 4sub_216C01044((uint64_t *)this, 0) = v48;
  *(void *)(v53 + 48) = v50;
  v57 = (void **)v61;
  sub_216BECE18(&v57);
  uint64_t v51 = 16;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63[v51 + 1]);
    sub_21697C414(&v63[v51]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63[v51 - 1]);
    uint64_t result = (uint64_t)sub_21697C414(&v63[v51 - 2]);
    v51 -= 4;
  }
  while (v51 * 4);
LABEL_89:
  while (v63[0]--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v62);
  return result;
}

void sub_216C10B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  a12 = (void **)&a16;
  sub_216BECE18(&a12);
  for (uint64_t i = 48; i != -16; i -= 16)
    sub_2169CFB98(&a21 + i);
  sub_21684E6B8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C10C68(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (_DWORD *)result[1];
  unint64_t v4 = ((uint64_t)v3 - *result) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      for (i = *result + 16 * a2; v3 != (_DWORD *)i; uint64_t result = (uint64_t *)sub_216BECEB0((uint64_t)(v2 + 2), v3))
        v3 -= 4;
      v2[1] = i;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (uint64_t *)sub_216C13874(result, v5);
  }
  return result;
}

int *sub_216C10D00(int *a1, int *a2)
{
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::ComposeOffset(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216BBEE18((_DWORD *)a3, (uint64_t)this);
  *(_OWORD *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)((char *)this + 40);
  *(double *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)(a3 + 40), (double *)a2);
  *(void *)(a3 + 48) = v6;
}

void sub_216C10DA4(_Unwind_Exception *a1)
{
  sub_216BBED8C(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetInverse(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, uint64_t a2@<X8>)
{
  sub_216851EE4((uint64_t)&v16, "Pcp", "PcpMapFunction");
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_216C10EEC((uint64_t *)&v13, *((int *)this + 8));
  uint64_t v4 = *((unsigned int *)this + 8);
  if ((int)v4 >= 3)
  {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::PcpMapFunction **)this;
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(*(void *)this + 16 * v4);
  }
  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 16 * (int)v4);
    uint64_t v6 = this;
  }
  do
  {
    sub_216BEAC8C((uint64_t *)&v13, (_DWORD *)v6 + 2, v6);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)v6 + 16);
  }
  while (v6 != v5);
LABEL_6:
  uint64_t v7 = v13;
  long long v8 = v14;
  double Inverse = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40));
  uint64_t v11 = v10;
  sub_216C114B4((int **)a2, v7, v8, *((unsigned char *)this + 36));
  *(double *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = Inverse;
  *(void *)(a2 + 48) = v11;
  uint64_t v18 = &v13;
  sub_216BECE18((void ***)&v18);
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
}

void sub_216C10EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  sub_216BECE18(&a14);
  sub_21684E6B8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void **sub_216C10EEC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216787EE0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    sub_216BED33C(a1, v7);
    return sub_216BED4E8(v7);
  }
  return result;
}

void sub_216C10F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BED4E8((void **)va);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = *((int *)this + 8);
  uint64_t v5 = (unint64_t *)this;
  if ((int)v4 >= 3) {
    uint64_t v5 = *(unint64_t **)this;
  }
  uint64_t result = (int *)sub_216C13998((uint64_t)a2, v5, &v5[2 * v4]);
  if (*((unsigned char *)this + 36))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result);
    uint64_t v9 = (unint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    long long v8 = sub_216C089DC(a2, v9, (uint64_t)&unk_2174BFD90, (_DWORD **)&v9);
    sub_2169C487C((int *)v8 + 9, v7);
    return sub_2169C48D4((int *)v8 + 10, (_DWORD *)v7 + 1);
  }
  return result;
}

void sub_216C11028(_Unwind_Exception *a1)
{
  sub_21698F21C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this@<X0>, std::string *a2@<X8>)
{
  int v35 = 0;
  int8x16_t v36 = 0;
  unint64_t v37 = 0;
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)((char *)this + 40)))
  {
    sub_216BFB1D4();
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3) + 1;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    if (0x5555555555555556 * ((uint64_t)(v37 - (void)v35) >> 3) > v4) {
      unint64_t v4 = 0x5555555555555556 * ((uint64_t)(v37 - (void)v35) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v35) >> 3) >= 0x555555555555555) {
      unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v5 = v4;
    }
    char v42 = &v37;
    if (v5) {
      uint64_t v6 = (void **)sub_216782ED8((uint64_t)&v37, v5);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = &v6[((char *)v36 - (char *)v35) >> 3];
    unint64_t v38 = (std::string **)v6;
    int v39 = v7;
    long long v41 = &v6[3 * v5];
    long long v8 = *(_OWORD *)__p;
    uint64_t v7[2] = v34;
    *(_OWORD *)uint64_t v7 = v8;
    __p[1] = 0;
    int v34 = 0;
    __p[0] = 0;
    uint64_t v40 = v7 + 3;
    sub_216790CCC((uint64_t *)&v35, &v38);
    uint64_t v9 = v36;
    sub_216790E64((uint64_t)&v38);
    int8x16_t v36 = v9;
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetSourceToTargetMap(this, (uint64_t **)__p);
  sub_216C13C78(&v31, (void *)__p[0], &__p[1]);
  uint64_t v29 = v31;
  uint64_t v30 = &v32;
  while ((void **)v29 != v30)
  {
    unint64_t v12 = sub_216BEF3B8(&v29, v10, v11);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v12 + 28));
    uint64_t v16 = sub_216BEF3B8(&v29, v14, v15);
    int v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v16 + 36));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s -> %s", v18, v19, Text, v17);
    int v20 = v36;
    if ((unint64_t)v36 >= v37)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v35) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v37 - (void)v35) >> 3) > v22) {
        unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v37 - (void)v35) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v35) >> 3) >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v22;
      }
      char v42 = &v37;
      if (v23) {
        unint64_t v24 = (void **)sub_216782ED8((uint64_t)&v37, v23);
      }
      else {
        unint64_t v24 = 0;
      }
      int v25 = &v24[3 * v21];
      unint64_t v38 = (std::string **)v24;
      int v39 = v25;
      long long v41 = &v24[3 * v23];
      v25[2] = (void *)v28;
      *(_OWORD *)int v25 = *(_OWORD *)v27;
      std::string::size_type v28 = 0;
      *(_OWORD *)uint64_t v27 = 0uLL;
      uint64_t v40 = v25 + 3;
      sub_216790CCC((uint64_t *)&v35, &v38);
      uint64_t v26 = v36;
      sub_216790E64((uint64_t)&v38);
      int8x16_t v36 = v26;
    }
    else
    {
      v36->__r_.__value_.__r.__words[2] = v28;
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)v27;
      int8x16_t v36 = v20 + 1;
    }
    sub_216BEF434(&v29);
  }
  sub_216881C38("\n", v35, v36, a2);
  sub_21698F21C((uint64_t)&v31, v32);
  sub_21698F21C((uint64_t)__p, (void *)__p[1]);
  unint64_t v38 = &v35;
  sub_216782F20((void ***)&v38);
}

void sub_216C11374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  sub_216790E64(v29 - 120);
  if (a28 < 0) {
    operator delete(__p);
  }
  std::string __p = &a29;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpMapFunction::Hash(pxrInternal__aapl__pxrReserved__::PcpMapFunction *this)
{
  return sub_216C11444((uint64_t)&v2, (uint64_t)this);
}

unint64_t sub_216C11444(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  sub_216C0F2CC((uint64_t)&v5, (unsigned int *)a2);
  unint64_t Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash((int8x16_t *)(a2 + 40));
  if (v6) {
    Hash += (v5 + Hash + (v5 + Hash) * (v5 + Hash)) >> 1;
  }
  return bswap64(0x9E3779B97F4A7C55 * Hash);
}

int **sub_216C114B4(int **a1, char *a2, char *a3, char a4)
{
  unint64_t v4 = a1;
  unint64_t v5 = (unint64_t)(a3 - a2) >> 4;
  *((_DWORD *)a1 + 8) = v5;
  *((unsigned char *)a1 + 36) = a4;
  if (v5)
  {
    uint64_t v7 = a2;
    if ((int)v5 > 2)
    {
      uint64_t v9 = ((unint64_t)(a3 - a2) >> 4);
      uint64_t v10 = 16 * v9;
      uint64_t v11 = operator new[](16 * v9 + 16);
      void *v11 = 16;
      v11[1] = v9;
      uint64_t v12 = (uint64_t)(v11 + 2);
      uint64_t v13 = v11 + 2;
      do
      {
        uint64_t v13 = sub_216C12584(v13) + 4;
        v10 -= 16;
      }
      while (v10);
      sub_216C11598(v4, v12);
      if (v7 != a3)
      {
        uint64_t v14 = *v4;
        do
        {
          sub_216C1172C(v14, v7);
          v7 += 16;
          v14 += 4;
        }
        while (v7 != a3);
      }
    }
    else if (a2 != a3)
    {
      do
      {
        long long v8 = sub_216A8FD38(a1, v7);
        v7 += 16;
        a1 = (int **)(v8 + 4);
      }
      while (v7 != a3);
    }
  }
  return v4;
}

void *sub_216C11598(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &unk_26C75D780;
  v4[1] = 0;
  v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216C115F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  __cxa_begin_catch(a1);
  sub_216C11624((uint64_t)&a13, v13);
  __cxa_rethrow();
}

void sub_216C11610(_Unwind_Exception *a1)
{
}

void sub_216C11624(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 - 8);
    if (v3)
    {
      uint64_t v4 = 16 * v3;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + v4 - 4));
        sub_21697C414((_DWORD *)(a2 + v4 - 8));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + v4 - 12));
        sub_21697C414((_DWORD *)(a2 + v4 - 16));
        v4 -= 16;
      }
      while (v4);
    }
    operator delete[]((void *)(a2 - 16));
  }
}

void sub_216C116B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C116E0(uint64_t a1)
{
}

uint64_t sub_216C116E8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D7C0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

int *sub_216C1172C(int *a1, _DWORD *a2)
{
  return a1;
}

void sub_216C1177C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2, int a3)
{
  if (a2)
  {
    if (a3 != 2) {
      return;
    }
    uint64_t v5 = *(void *)(*a1 + 8);
    *(_OWORD *)int v25 = *(_OWORD *)(v5 - 96);
    uint64_t v26 = *(void *)(v5 - 80);
    *(void *)(v5 - 96) = 0;
    *(void *)(v5 - 88) = 0;
    *(void *)(v5 - 8sub_216C01044((uint64_t *)this, 0) = 0;
    long long v27 = *(_OWORD *)(v5 - 72);
    uint64_t v28 = *(void *)(v5 - 56);
    *(void *)(v5 - 72) = 0;
    *(void *)(v5 - 64) = 0;
    *(void *)(v5 - 56) = 0;
    long long v29 = *(_OWORD *)(v5 - 48);
    uint64_t v30 = *(void *)(v5 - 32);
    *(void *)(v5 - 48) = 0;
    *(void *)(v5 - 4sub_216C01044((uint64_t *)this, 0) = 0;
    *(void *)(v5 - 32) = 0;
    long long v6 = *(_OWORD *)(v5 - 24);
    uint64_t v32 = *(void *)(v5 - 8);
    long long v31 = v6;
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - 8) = 0;
    *(void *)(v5 - 24) = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = *(void *)(*a1 + 8) - 96;
    sub_216B02BDC(*a1 + 16, v8);
    *(void *)(v7 + 8) = v8;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(a2, (void *)(*(void *)(*a1 + 8) - 96), (uint64_t)v25, (uint64_t)__p);
    uint64_t v9 = *(void *)(*a1 + 8);
    uint64_t v10 = *(void **)(v9 - 96);
    if (v10)
    {
      *(void *)(v9 - 88) = v10;
      operator delete(v10);
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 8sub_216C01044((uint64_t *)this, 0) = 0;
    }
    *(_OWORD *)(v9 - 96) = *(_OWORD *)__p;
    *(void *)(v9 - 8sub_216C01044((uint64_t *)this, 0) = v18;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    sub_2169B59AC((void **)(v9 - 72));
    *(_OWORD *)(v9 - 72) = v19;
    *(void *)(v9 - 56) = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    sub_2169B5A6C((void **)(v9 - 48));
    *(_OWORD *)(v9 - 48) = v21;
    *(void *)(v9 - 32) = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    uint64_t v11 = (void **)(v9 - 24);
    if (*(char *)(v9 - 1) < 0) {
      operator delete(*v11);
    }
    long long v12 = v23;
    *(void *)(v9 - 8) = v24;
    *(_OWORD *)uint64_t v11 = v12;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    int v33 = (void **)&v21;
    sub_2169B81EC(&v33);
    int v33 = (void **)&v19;
    sub_2169B74B8(&v33);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    __p[0] = &v29;
    sub_2169B81EC((void ***)__p);
    __p[0] = &v27;
  }
  else
  {
    if (a3 != 1) {
      return;
    }
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(*(void *)(*a1 + 8) - 96, (uint64_t)v25);
    uint64_t v13 = *(void *)(*a1 + 8);
    uint64_t v14 = *(void **)(v13 - 96);
    if (v14)
    {
      *(void *)(v13 - 88) = v14;
      operator delete(v14);
      *(void *)(v13 - 96) = 0;
      *(void *)(v13 - 88) = 0;
      *(void *)(v13 - 8sub_216C01044((uint64_t *)this, 0) = 0;
    }
    *(_OWORD *)(v13 - 96) = *(_OWORD *)v25;
    *(void *)(v13 - 8sub_216C01044((uint64_t *)this, 0) = v26;
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v26 = 0;
    sub_2169B59AC((void **)(v13 - 72));
    *(_OWORD *)(v13 - 72) = v27;
    *(void *)(v13 - 56) = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    sub_2169B5A6C((void **)(v13 - 48));
    *(_OWORD *)(v13 - 48) = v29;
    *(void *)(v13 - 32) = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    uint64_t v15 = (void **)(v13 - 24);
    if (*(char *)(v13 - 1) < 0) {
      operator delete(*v15);
    }
    long long v16 = v31;
    *(void *)(v13 - 8) = v32;
    *(_OWORD *)uint64_t v15 = v16;
    HIBYTE(v32) = 0;
    LOBYTE(v31) = 0;
    __p[0] = &v29;
    sub_2169B81EC((void ***)__p);
    __p[0] = &v27;
  }
  sub_2169B74B8((void ***)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_216C11A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_2169B81EC((void ***)&a9);
  sub_2169B74B8((void ***)&a9);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_216C11AB8(uint64_t a1, uint64_t a2)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2))
  {
    uint64_t v4 = *(unsigned __int8 ***)(a1 + 8);
    uint64_t v5 = *v4;
    int v6 = *((_DWORD *)*v4 + 8);
    uint64_t v7 = (uint64_t)*v4;
    if (v6 >= 3) {
      uint64_t v7 = *(void *)v5;
    }
    sub_216C100DC((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v7, v6, v5[36], *v4[1], &v28);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)a1;
      sub_216981010(&v25, &v28);
      sub_21698105C((_DWORD *)&v25 + 1, &v29);
      if (*(char *)(a2 + 31) < 0)
      {
        sub_216778F24(&v26, *(void **)(a2 + 8), *(void *)(a2 + 16));
      }
      else
      {
        long long v26 = *(_OWORD *)(a2 + 8);
        uint64_t v27 = *(void *)(a2 + 24);
      }
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v25, (char **)v30);
      unint64_t v17 = v9[1];
      if (v17 >= v9[2])
      {
        uint64_t v19 = sub_216B02D70(v9, (uint64_t)v30);
        int v20 = SHIBYTE(v37);
        v9[1] = v19;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        *(void *)unint64_t v17 = 0;
        *(void *)(v17 + 8) = 0;
        *(_OWORD *)unint64_t v17 = *(_OWORD *)v30;
        *(void *)(v17 + 16) = v31;
        v30[0] = 0;
        v30[1] = 0;
        *(void *)(v17 + 32) = 0;
        *(void *)(v17 + 4sub_216C01044((uint64_t *)this, 0) = 0;
        *(_OWORD *)(v17 + 24) = v32;
        *(void *)(v17 + 4sub_216C01044((uint64_t *)this, 0) = v33;
        *(void *)(v17 + 48) = 0;
        uint64_t v31 = 0;
        long long v32 = 0uLL;
        uint64_t v33 = 0;
        *(void *)(v17 + 56) = 0;
        *(void *)(v17 + 64) = 0;
        *(_OWORD *)(v17 + 48) = v34;
        *(void *)(v17 + 64) = v35;
        long long v34 = 0uLL;
        long long v18 = *(_OWORD *)__p;
        *(void *)(v17 + 88) = v37;
        *(_OWORD *)(v17 + 72) = v18;
        uint64_t v35 = 0;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v37 = 0;
        v9[1] = v17 + 96;
      }
      unint64_t v38 = (void **)&v34;
      sub_2169B81EC(&v38);
      unint64_t v38 = (void **)&v32;
      sub_2169B74B8(&v38);
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)v26);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_21697C414(&v25);
    }
    else
    {
      uint64_t v15 = **(uint64_t ***)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        if (v16 >= v15[2])
        {
          uint64_t v8 = sub_216C11F10(v15, a2);
        }
        else
        {
          sub_216C12000((uint64_t)(v15 + 2), v15[1], a2);
          uint64_t v8 = v16 + 32;
          v15[1] = v16 + 32;
        }
        v15[1] = v8;
      }
      long long v21 = *(uint64_t **)a1;
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v8);
      unint64_t v23 = v21[1];
      if (v23 >= v21[2])
      {
        uint64_t v24 = sub_216C12094(v21, v22);
      }
      else
      {
        sub_2169B70E4((void *)v21[1], v22);
        uint64_t v24 = v23 + 96;
        v21[1] = v23 + 96;
      }
      v21[1] = v24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
  }
  else
  {
    uint64_t v10 = *(uint64_t **)a1;
    sub_216AFF334(a2, (char **)v30);
    unint64_t v11 = v10[1];
    if (v11 >= v10[2])
    {
      uint64_t v13 = sub_216B02D70(v10, (uint64_t)v30);
      int v14 = SHIBYTE(v37);
      v10[1] = v13;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)unint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v30;
      *(void *)(v11 + 16) = v31;
      v30[0] = 0;
      v30[1] = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 4sub_216C01044((uint64_t *)this, 0) = 0;
      *(_OWORD *)(v11 + 24) = v32;
      *(void *)(v11 + 4sub_216C01044((uint64_t *)this, 0) = v33;
      *(void *)(v11 + 48) = 0;
      uint64_t v31 = 0;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(void *)(v11 + 56) = 0;
      *(void *)(v11 + 64) = 0;
      *(_OWORD *)(v11 + 48) = v34;
      *(void *)(v11 + 64) = v35;
      long long v34 = 0uLL;
      long long v12 = *(_OWORD *)__p;
      *(void *)(v11 + 88) = v37;
      *(_OWORD *)(v11 + 72) = v12;
      uint64_t v35 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v37 = 0;
      v10[1] = v11 + 96;
    }
    int v25 = (void **)&v34;
    sub_2169B81EC(&v25);
    int v25 = (void **)&v32;
    sub_2169B74B8(&v25);
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
  }
}

void sub_216C11E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v35 = v33;
  *(void *)(v35 + 8) = v34;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_21697C414(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_216C11F10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v11 = v8;
  long long v12 = &v8[32 * v3];
  int v14 = &v8[32 * v7];
  sub_216C12000((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_216B0B120(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216B0A840(&v11);
  return v9;
}

void sub_216C11FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B0A840((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216C12000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216981010((_DWORD *)a2, (_DWORD *)a3);
  sub_21698105C((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0) {
    return sub_216778F24(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t result = v6;
  return result;
}

void sub_216C12074(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C12094(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21682B950(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = &v10[96 * v4];
  unint64_t v16 = &v10[96 * v9];
  sub_2169B70E4(v14, a2);
  uint64_t v15 = v14 + 96;
  sub_216B02EF8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216B030B4(&v13);
  return v11;
}

void sub_216C12188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B030B4((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C1219C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v4 = *(unsigned __int8 ***)(a1 + 8);
  unint64_t v5 = *v4;
  int v6 = *((_DWORD *)*v4 + 8);
  uint64_t v7 = (uint64_t)*v4;
  if (v6 >= 3) {
    uint64_t v7 = *(void *)v5;
  }
  sub_216C100DC(a2, v7, v6, v5[36], *v4[1], &v31);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v31))
  {
    sub_2169B76F8((uint64_t)&v27, (uint64_t)a2);
    sub_216B053D0((uint64_t)&v27, &v31);
    unint64_t v8 = *(uint64_t **)a1;
    sub_216B0325C((uint64_t)&v27, (char **)v19);
    unint64_t v9 = v8[1];
    if (v9 >= v8[2])
    {
      uint64_t v16 = sub_216B02D70(v8, (uint64_t)v19);
      int v17 = SHIBYTE(v26);
      v8[1] = v16;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v19;
      *(void *)(v9 + 16) = v20;
      v19[0] = 0;
      v19[1] = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 4sub_216C01044((uint64_t *)this, 0) = 0;
      *(_OWORD *)(v9 + 24) = v21;
      *(void *)(v9 + 4sub_216C01044((uint64_t *)this, 0) = v22;
      *(void *)(v9 + 48) = 0;
      uint64_t v20 = 0;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = 0;
      *(_OWORD *)(v9 + 48) = v23;
      *(void *)(v9 + 64) = v24;
      long long v23 = 0uLL;
      long long v10 = *(_OWORD *)__p;
      *(void *)(v9 + 88) = v26;
      *(_OWORD *)(v9 + 72) = v10;
      uint64_t v24 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v26 = 0;
      v8[1] = v9 + 96;
    }
    uint64_t v33 = (void **)&v23;
    sub_2169B81EC(&v33);
    uint64_t v33 = (void **)&v21;
    sub_2169B74B8(&v33);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    v19[0] = &v30;
    sub_2169B5B38((void ***)v19);
    v19[0] = &v29;
    sub_2168706D8((void ***)v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
  }
  else
  {
    uint64_t v11 = **(uint64_t ***)(a1 + 16);
    if (v11) {
      uint64_t v11 = (uint64_t *)sub_216C12470(v11, (uint64_t)a2);
    }
    long long v12 = *(uint64_t **)a1;
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v11);
    unint64_t v14 = v12[1];
    if (v14 >= v12[2])
    {
      uint64_t v15 = sub_216C12094(v12, v13);
    }
    else
    {
      sub_2169B70E4((void *)v12[1], v13);
      uint64_t v15 = v14 + 96;
      v12[1] = v14 + 96;
    }
    v12[1] = v15;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  return sub_21697C414(&v31);
}

void sub_216C1239C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  *(void *)(v29 - 24) = &a15;
  sub_2169B81EC((void ***)(v29 - 24));
  *(void *)(v29 - 24) = &a12;
  sub_2169B74B8((void ***)(v29 - 24));
  if (a9)
  {
    a10 = (uint64_t)a9;
    operator delete(a9);
  }
  a9 = &a29;
  sub_2169B5B38((void ***)&a9);
  a9 = &a26;
  sub_2168706D8((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a25);
  sub_21697C414(&a24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v29 - 28));
  sub_21697C414((_DWORD *)(v29 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_216C12470(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)sub_2169B761C(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[64 * v10];
    long long v18 = &v14[64 * v13];
    sub_2169B76F8((uint64_t)v16, a2);
    int v17 = v16 + 64;
    sub_216B0B198(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = (uint64_t)sub_216B0AF9C(&v15);
  }
  else
  {
    uint64_t result = sub_2169B76F8(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_216C12564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_216C12584(_DWORD *a1)
{
  *(void *)a1 = 0;
  char v2 = a1 + 3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3 + 1);
  *((void *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  return a1;
}

void *sub_216C125E0(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = a2;
    do
    {
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      unint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  sub_216C12668(a1, a2, a3, v4);
  return a1;
}

void *sub_216C12668(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_216C126F0((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216C126D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216BECE18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C126F0(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  unint64_t v4 = a4;
  unint64_t v13 = a4;
  unint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_216A8FD38(v4, (_DWORD *)v6 + 7);
      unint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          unint64_t v6 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v14 + 4;
      v14 += 4;
      unint64_t v6 = v8;
    }
    while (v8 != a3);
  }
  char v12 = 1;
  sub_216C127AC((uint64_t)v11);
  return v4;
}

uint64_t sub_216C127AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C127E4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C127E4(uint64_t *result)
{
  char v2 = (void *)result[1];
  uint64_t v1 = (_DWORD **)result[2];
  uint64_t v3 = *v1;
  unint64_t v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 4;
      uint64_t result = (uint64_t *)sub_216BECEB0(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

int *sub_216C12838(int *a1, int *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1 + 2, a2 + 2);

  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 3, a2 + 3);
}

uint64_t sub_216C12890(uint64_t result, int *a2, uint64_t a3, char a4)
{
  BOOL v9 = (unint64_t *)result;
  while (2)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4);
    int v56 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 12);
    v57 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 8);
    uint64_t v11 = v9;
    uint64_t v58 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          BOOL v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = ((char *)a2 - (char *)v11) >> 4;
          if (!(!v5 & v4))
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t result = sub_216C132B4(v10, v9);
                if (result) {
                  uint64_t result = (uint64_t)sub_216C12838((int *)v9, (int *)v10);
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)sub_216C13408(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2), v10);
                break;
              case 4uLL:
                uint64_t result = (uint64_t)sub_216C136E8(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4), v10);
                break;
              case 5uLL:
                uint64_t result = (uint64_t)sub_216C13334(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 6), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            if (a4)
            {
              if (v9 != (unint64_t *)a2)
              {
                int v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2);
                if (v9 + 2 != (unint64_t *)a2)
                {
                  uint64_t v28 = 0;
                  uint64_t v29 = v9;
                  do
                  {
                    uint64_t v30 = v29;
                    uint64_t v29 = (unint64_t *)v27;
                    uint64_t result = sub_216C132B4(v27, v30);
                    if (result)
                    {
                      sub_2169DC194(&v63, v29);
                      uint64_t v31 = v28;
                      while (1)
                      {
                        sub_216C10D00((int *)((char *)v9 + v31 + 16), (int *)((char *)v9 + v31));
                        if (!v31) {
                          break;
                        }
                        char v32 = sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, (unint64_t *)((char *)v9 + v31 - 16));
                        v31 -= 16;
                        if ((v32 & 1) == 0)
                        {
                          uint64_t v33 = (int *)((char *)v9 + v31 + 16);
                          goto LABEL_70;
                        }
                      }
                      uint64_t v33 = (int *)v9;
LABEL_70:
                      sub_216C10D00(v33, (int *)&v63);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
                      sub_21697C414(&v64);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
                      uint64_t result = (uint64_t)sub_21697C414(&v63);
                    }
                    int v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 + 2);
                    v28 += 16;
                  }
                  while (v29 + 2 != (unint64_t *)a2);
                }
              }
            }
            else if (v9 != (unint64_t *)a2)
            {
              uint64_t v54 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2);
              if (v9 + 2 != (unint64_t *)a2)
              {
                do
                {
                  int v55 = (unint64_t *)v54;
                  uint64_t result = sub_216C132B4(v54, v9);
                  if (result)
                  {
                    sub_2169DC194(&v63, v55);
                    do
                    {
                      sub_216C10D00((int *)v9 + 4, (int *)v9);
                      v9 -= 2;
                    }
                    while ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v9) & 1) != 0);
                    sub_216C10D00((int *)v9 + 4, (int *)&v63);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
                    sub_21697C414(&v64);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
                    uint64_t result = (uint64_t)sub_21697C414(&v63);
                  }
                  uint64_t v54 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v55 + 2);
                  BOOL v9 = v55;
                }
                while (v55 + 2 != (unint64_t *)a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if (v9 != (unint64_t *)a2)
            {
              int64_t v34 = (v13 - 2) >> 1;
              int64_t v35 = v34;
              do
              {
                int64_t v36 = v35;
                if (v34 >= v35)
                {
                  uint64_t v37 = (2 * v35) | 1;
                  unint64_t v38 = &v9[2 * v37];
                  if (2 * v35 + 2 < (uint64_t)v13
                    && sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * v37], v38 + 2))
                  {
                    v38 += 2;
                    uint64_t v37 = 2 * v36 + 2;
                  }
                  int v39 = (int *)&v9[2 * v36];
                  if ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)v38, (unint64_t *)v39) & 1) == 0)
                  {
                    sub_2169DC194(&v63, &v9[2 * v36]);
                    do
                    {
                      uint64_t v40 = (int *)v38;
                      sub_216C10D00(v39, (int *)v38);
                      if (v34 < v37) {
                        break;
                      }
                      uint64_t v41 = (2 * v37) | 1;
                      unint64_t v38 = &v9[2 * v41];
                      uint64_t v37 = 2 * v37 + 2;
                      if (v37 < (uint64_t)v13)
                      {
                        if (sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * v41], v38 + 2))v38 += 2; {
                        else
                        }
                          uint64_t v37 = v41;
                      }
                      else
                      {
                        uint64_t v37 = v41;
                      }
                      int v39 = v40;
                    }
                    while (!sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)v38, &v63));
                    sub_216C10D00(v40, (int *)&v63);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
                    sub_21697C414(&v64);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
                    sub_21697C414(&v63);
                  }
                }
                int64_t v35 = v36 - 1;
              }
              while (v36);
              uint64_t v42 = (unint64_t)v12 >> 4;
              uint64_t v43 = v58;
              do
              {
                sub_2169DC194(&v59, v9);
                uint64_t v44 = 0;
                char v45 = (int *)v9;
                do
                {
                  uint64_t v46 = &v45[4 * v44 + 4];
                  uint64_t v47 = (2 * v44) | 1;
                  uint64_t v48 = 2 * v44 + 2;
                  if (v48 < v42
                    && sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45[4 * v44 + 4], (unint64_t *)&v45[4 * v44 + 8]))
                  {
                    v46 += 4;
                    uint64_t v47 = v48;
                  }
                  sub_216C10D00(v45, v46);
                  char v45 = v46;
                  uint64_t v44 = v47;
                }
                while (v47 <= (uint64_t)((unint64_t)(v42 - 2) >> 1));
                v43 -= 4;
                if (v46 == v43)
                {
                  sub_216C10D00(v46, &v59);
                }
                else
                {
                  sub_216C10D00(v46, v43);
                  sub_216C10D00(v43, &v59);
                  uint64_t v49 = (char *)v46 - (char *)v9 + 16;
                  if (v49 >= 17)
                  {
                    unint64_t v50 = (((unint64_t)v49 >> 4) - 2) >> 1;
                    uint64_t v51 = (int *)&v9[2 * v50];
                    if (sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)v51, (unint64_t *)v46))
                    {
                      sub_2169DC194(&v63, v46);
                      do
                      {
                        uint64_t v52 = v51;
                        sub_216C10D00(v46, v51);
                        if (!v50) {
                          break;
                        }
                        unint64_t v50 = (v50 - 1) >> 1;
                        uint64_t v51 = (int *)&v9[2 * v50];
                        uint64_t v46 = v52;
                      }
                      while ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)v51, &v63) & 1) != 0);
                      sub_216C10D00(v52, (int *)&v63);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
                      sub_21697C414(&v64);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
                      sub_21697C414(&v63);
                    }
                  }
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
                sub_21697C414(&v61);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v60);
                uint64_t result = (uint64_t)sub_21697C414(&v59);
              }
              while (v42-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 >= 0x801)
          {
            sub_216C13408(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * (v13 >> 1)], v10);
            sub_216C13408(v9 + 2, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 - 16), v57);
            sub_216C13408(v9 + 4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * v14 + 2], v56);
            sub_216C13408((unint64_t *)v15 - 2, v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[2 * v14 + 2]);
            sub_216C12838((int *)v9, (int *)v15);
          }
          else
          {
            sub_216C13408(&v9[2 * (v13 >> 1)], (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, v10);
          }
          --a3;
          a2 = v58;
          if (a4 & 1) != 0 || (sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 - 2), v9)) {
            break;
          }
          sub_2169DC194(&v63, v9);
          if (sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, (unint64_t *)v10))
          {
            uint64_t v11 = v9;
            do
              v11 += 2;
            while ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v11) & 1) == 0);
          }
          else
          {
            uint64_t v24 = v9 + 2;
            do
            {
              uint64_t v11 = v24;
              if (v24 >= (unint64_t *)v58) {
                break;
              }
              int v25 = sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v24);
              uint64_t v24 = v11 + 2;
            }
            while (!v25);
          }
          uint64_t v26 = (unint64_t *)v58;
          if (v11 < (unint64_t *)v58)
          {
            uint64_t v26 = (unint64_t *)v58;
            do
              v26 -= 2;
            while ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v26) & 1) != 0);
          }
          while (v11 < v26)
          {
            sub_216C12838((int *)v11, (int *)v26);
            do
              v11 += 2;
            while (!sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v11));
            do
              v26 -= 2;
            while ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v63, v26) & 1) != 0);
          }
          if (v11 - 2 != v9) {
            sub_216C10D00((int *)v9, (int *)v11 - 4);
          }
          sub_216C10D00((int *)v11 - 4, (int *)&v63);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
          sub_21697C414(&v64);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
          uint64_t result = (uint64_t)sub_21697C414(&v63);
          a4 = 0;
        }
        sub_2169DC194(&v63, v9);
        uint64_t v16 = 0;
        do
        {
          char v17 = sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9[v16 + 2], &v63);
          v16 += 2;
        }
        while ((v17 & 1) != 0);
        long long v18 = &v9[v16];
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v58;
        if (v16 == 2)
        {
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v58;
          do
          {
            if (v18 >= (unint64_t *)v19) {
              break;
            }
            uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 - 16);
          }
          while ((sub_216C132B4(v19, &v63) & 1) == 0);
        }
        else
        {
          do
            uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 - 16);
          while (!sub_216C132B4(v19, &v63));
        }
        if (v18 < (unint64_t *)v19)
        {
          uint64_t v20 = (int *)&v9[v16];
          long long v21 = (int *)v19;
          do
          {
            sub_216C12838(v20, v21);
            do
              v20 += 4;
            while ((sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)v20, &v63) & 1) != 0);
            do
              v21 -= 4;
            while (!sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, &v63));
          }
          while (v20 < v21);
          uint64_t v22 = v20 - 4;
        }
        else
        {
          uint64_t v22 = (int *)(v18 - 2);
        }
        if (v22 != (int *)v9) {
          sub_216C10D00((int *)v9, v22);
        }
        sub_216C10D00(v22, (int *)&v63);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
        sub_21697C414(&v64);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
        sub_21697C414(&v63);
        if (v18 >= (unint64_t *)v19) {
          break;
        }
LABEL_33:
        uint64_t result = sub_216C12890(v9, v22, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = (unint64_t *)(v22 + 4);
      }
      BOOL v23 = sub_216C134D4((int *)v9, v22);
      uint64_t v11 = (unint64_t *)(v22 + 4);
      uint64_t result = sub_216C134D4(v22 + 4, v58);
      if (result) {
        break;
      }
      if (!v23) {
        goto LABEL_33;
      }
    }
    a2 = v22;
    if (!v23) {
      continue;
    }
    return result;
  }
}

void sub_216C1310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
  sub_21697C414(a5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a6);
  sub_21697C414((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C132B4(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unint64_t *a2)
{
  char v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  unint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 1);
  unint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  if (*(void *)a1 == *a2 && v6 == v8) {
    return 0;
  }
  uint64_t v10 = *v4;
  if (v5 == *v4 && v6 == v10) {
    return 1;
  }
  if (v7 == v10 && v8 == v10) {
    return 0;
  }
  BOOL v14 = v5 == v7 && v6 < v8;
  return v5 < v7 || v14;
}

int *sub_216C13334(unint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  sub_216C136E8(a1, a2, a3, a4);
  uint64_t result = (int *)sub_216C132B4(a5, (unint64_t *)a4);
  if (result)
  {
    sub_216C12838((int *)a4, (int *)a5);
    uint64_t result = (int *)sub_216C132B4(a4, (unint64_t *)a3);
    if (result)
    {
      sub_216C12838((int *)a3, (int *)a4);
      uint64_t result = (int *)sub_216C132B4(a3, (unint64_t *)a2);
      if (result)
      {
        sub_216C12838((int *)a2, (int *)a3);
        uint64_t result = (int *)sub_216C132B4(a2, a1);
        if (result)
        {
          return sub_216C12838((int *)a1, (int *)a2);
        }
      }
    }
  }
  return result;
}

int *sub_216C13408(unint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v6 = sub_216C132B4(a2, a1);
  uint64_t result = (int *)sub_216C132B4(a3, (unint64_t *)a2);
  if (v6)
  {
    if (result)
    {
      unint64_t v8 = (int *)a1;
    }
    else
    {
      sub_216C12838((int *)a1, (int *)a2);
      uint64_t result = (int *)sub_216C132B4(a3, (unint64_t *)a2);
      if (!result) {
        return result;
      }
      unint64_t v8 = (int *)a2;
    }
    BOOL v9 = (int *)a3;
  }
  else
  {
    if (!result) {
      return result;
    }
    sub_216C12838((int *)a2, (int *)a3);
    uint64_t result = (int *)sub_216C132B4(a2, a1);
    if (!result) {
      return result;
    }
    unint64_t v8 = (int *)a1;
    BOOL v9 = (int *)a2;
  }

  return sub_216C12838(v8, v9);
}

BOOL sub_216C134D4(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = a2 - 4;
      if (sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4), (unint64_t *)a1)) {
        sub_216C12838(a1, v6);
      }
      return 1;
    case 3:
      sub_216C13408((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4));
      return 1;
    case 4:
      sub_216C136E8((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4));
      return 1;
    case 5:
      sub_216C13334((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 12), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 4));
      return 1;
    default:
      unint64_t v7 = (unint64_t *)(a1 + 8);
      sub_216C13408((unint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 12);
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (sub_216C132B4(v8, v7))
    {
      sub_2169DC194(&v14, v8);
      uint64_t v11 = v9;
      while (1)
      {
        sub_216C10D00((int *)((char *)a1 + v11 + 48), (int *)((char *)a1 + v11 + 32));
        if (v11 == -32) {
          break;
        }
        char v12 = sub_216C132B4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (unint64_t *)((char *)a1 + v11 + 16));
        v11 -= 16;
        if ((v12 & 1) == 0)
        {
          unint64_t v13 = (int *)((char *)a1 + v11 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v13 = a1;
LABEL_12:
      sub_216C10D00(v13, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      ++v10;
      sub_21697C414(&v14);
      if (v10 == 8) {
        return (int *)((char *)v8 + 16) == a2;
      }
    }
    unint64_t v7 = (unint64_t *)v8;
    v9 += 16;
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 16);
    if (v8 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) {
      return 1;
    }
  }
}

void sub_216C136BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

int *sub_216C136E8(unint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  sub_216C13408(a1, a2, a3);
  BOOL result = (int *)sub_216C132B4(a4, (unint64_t *)a3);
  if (result)
  {
    sub_216C12838((int *)a3, (int *)a4);
    BOOL result = (int *)sub_216C132B4(a3, (unint64_t *)a2);
    if (result)
    {
      sub_216C12838((int *)a2, (int *)a3);
      BOOL result = (int *)sub_216C132B4(a2, a1);
      if (result)
      {
        return sub_216C12838((int *)a1, (int *)a2);
      }
    }
  }
  return result;
}

uint64_t **sub_216C13790(uint64_t **a1, unint64_t *a2, _DWORD *a3)
{
  char v6 = a1 + 1;
  unint64_t v5 = a1[1];
  unint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v10 = *(uint64_t *)((char *)v5 + 28);
        if (v9 >= v10) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v13[1] = v6;
    sub_2169DC194((_DWORD *)v11 + 7, a3);
    char v14 = 1;
    sub_21677B358(a1, (uint64_t)v8, v7, v11);
    v13[0] = 0;
    sub_21698F170((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

void **sub_216C13874(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a1[2];
  BOOL result = (void **)a1[1];
  if (a2 <= (v5 - (uint64_t)result) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      char v14 = &result[2 * a2];
      do
      {
        BOOL result = (void **)(sub_216C12584(result) + 4);
        v13 -= 16;
      }
      while (v13);
      BOOL result = v14;
    }
    a1[1] = (uint64_t)result;
  }
  else
  {
    uint64_t v7 = (uint64_t)result - *a1;
    unint64_t v8 = a2 + (v7 >> 4);
    if (v8 >> 60) {
      sub_21677CB10();
    }
    uint64_t v9 = v7 >> 4;
    uint64_t v10 = v5 - *a1;
    if (v10 >> 3 > v8) {
      unint64_t v8 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v8;
    }
    v18[4] = v4;
    if (v11) {
      char v12 = (char *)sub_216787EE0((uint64_t)v4, v11);
    }
    else {
      char v12 = 0;
    }
    int v15 = &v12[16 * v9];
    v18[0] = v12;
    v18[1] = v15;
    _OWORD v18[3] = &v12[16 * v11];
    uint64_t v16 = 16 * a2;
    int v17 = &v15[16 * a2];
    do
    {
      int v15 = (char *)(sub_216C12584(v15) + 4);
      v16 -= 16;
    }
    while (v16);
    int v18[2] = v17;
    sub_216BED33C(a1, v18);
    return sub_216BED4E8(v18);
  }
  return result;
}

void sub_216C13984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BED4E8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C13998(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      sub_216C13A1C((uint64_t **)a1, v4, v6, v6);
      v6 += 2;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216C13A04(_Unwind_Exception *a1)
{
  sub_21698F21C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216C13A1C(uint64_t **a1, void *a2, unint64_t *a3, _DWORD *a4)
{
  char v6 = (void **)sub_216C13AD0(a1, a2, &v13, &v12, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_216A8FD38((_DWORD *)v7 + 7, a4);
    char v11 = 1;
    sub_21677B358(a1, v13, v8, v7);
    v10[0] = 0;
    sub_21698F170((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_216C13AD0(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = *(void *)((char *)a2 + 28), *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (*(void *)((char *)v10 + 28) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = v16;
          unint64_t v18 = *(void *)((char *)v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *(void *)((char *)a4 + 28))
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = v20;
          unint64_t v22 = *(void *)((char *)v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_216C13C78(uint64_t *a1, void *a2, void *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216A9A940(a1, a2, a3);
  return a1;
}

void sub_216C13CB0(_Unwind_Exception *a1)
{
  sub_21698F21C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_216C13CC8()
{
  sub_216779094(v3, "PcpNamespaceEdits::EditPath");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7D0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpNamespaceEdits::EditInherit");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7D0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpNamespaceEdits::EditSpecializes");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7D0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpNamespaceEdits::EditReference");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7D0, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpNamespaceEdits::EditPayload");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7D0, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "PcpNamespaceEdits::EditRelocate");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7D0, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216C13ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PcpComputeNamespaceEdits(pxrInternal__aapl__pxrReserved__::PcpCache *a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)(a6 + 64) = 0;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  memset(v390, 0, sizeof(v390));
  if (*a2 != a2[1])
  {
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(a1, (uint64_t *)&v396);
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)&v396 + 1);
    if (*((void *)&v396 + 1))
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v396 + 1) + 14)) {
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v396;
      }
      else {
        unint64_t v7 = 0;
      }
    }
    v389 = v7;
    sub_2168BD80C((uint64_t *)&v389);
    uint64_t v8 = *((void *)&v396 + 1);
    if (*((void *)&v396 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v396 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, &v387);
    if (pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)a1, (unsigned int *)&v387))
    {
      if (*(void *)a3 != *(void *)a4)
      {
        v384 = 0;
        v385 = 0;
        uint64_t v386 = 0;
        pxrInternal__aapl__pxrReserved__::PcpComposeSitePrimSites((uint64_t *)&v389, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v387, (uint64_t *)&v384);
        v383[0] = 0;
        v383[1] = 0;
        uint64_t v381 = 0;
        v382 = (uint64_t *)v383;
        v379 = (uint64_t *)&v380;
        v380 = 0;
        uint64_t v10 = *a2;
        uint64_t v9 = a2[1];
        uint64_t v346 = (v9 - *a2) >> 3;
        if (v384 == v385)
        {
          if (v9 != v10)
          {
            uint64_t v78 = 0;
            do
            {
              v359 = v78;
              unint64_t v79 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * (void)v78);
              pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v79, a5, &v387, 47, 1, 1, 1, (uint64_t *)&v377);
              uint64_t v80 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v377 + 1);
              unint64_t v81 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v377;
              if ((void)v377 != *((void *)&v377 + 1))
              {
                v357 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v377 + 1);
                do
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v393);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v393 + 1);
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(v81, &v396);
                  sub_21697DE94((int *)&v393, (int *)&v396);
                  sub_21697DEEC((int *)&v393 + 1, (int *)&v396 + 1);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
                  v361 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v81 + 8);
                  while (1)
                  {
                    sub_21697C414(&v396);
                    *(void *)&long long v396 = 0;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v396);
                    v82 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v396 + 1);
                    v83 = v393;
                    uint64_t v84 = (void **)v396;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v82);
                    sub_21697C414(&v396);
                    if (v83 == v84)
                    {
                      char v86 = 0;
                      goto LABEL_117;
                    }
                    PrimIndex = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v79, (unsigned int *)&v393);
                    if (PrimIndex) {
                      break;
                    }
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v393, &v396);
                    sub_21697DE94((int *)&v393, (int *)&v396);
                    sub_21697DEEC((int *)&v393 + 1, (int *)&v396 + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
                  }
                  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(PrimIndex, 6u, (uint64_t *)&v396);
                  std::string::size_type v88 = *((void *)&v396 + 1);
                  std::string::size_type v89 = v396;
                  uint64_t v90 = v397;
                  if (v396 == v397)
                  {
                    char v86 = 0;
                  }
                  else
                  {
                    char v86 = 0;
                    uint64_t v91 = *((void *)&v397 + 1) - 1;
                    do
                    {
                      std::string::size_type v92 = v88;
                      v395.__r_.__value_.__r.__words[0] = v89;
                      v395.__r_.__value_.__l.__size_ = v88;
                      if (pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)&v395, v87))
                      {
                        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                        uint64_t v94 = sub_216BBBFA8(LayerStack);
                        if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v94, a5))
                        {
                          Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                          if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v361, Path))
                          {
                            sub_216C18500(v359, (uint64_t)v395.__r_.__value_.__l.__data_, v395.__r_.__value_.__l.__size_, &v382);
                            char v86 = 1;
                          }
                        }
                      }
                      std::string::size_type v88 = v92 + 1;
                    }
                    while (v89 != v90 || v91 != v92);
                  }
                  uint64_t v80 = v357;
LABEL_117:
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v393 + 1);
                  sub_21697C414(&v393);
                  if ((v86 & 1) == 0)
                  {
                    *(void *)&long long v396 = "pcp/dependencies.h";
                    *((void *)&v396 + 1) = "Pcp_ForEachDependentNode";
                    *(void *)&long long v397 = 382;
                    *((void *)&v397 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(const SdfPa"
                                             "th &, const LayerOrLayerStack &, const SdfPath &, const PcpCache &, const F"
                                             "N &) [FN = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/"
                                             "usd/pcp/namespaceEdits.cpp:508:32), LayerOrLayerStack = pxrInternal__aapl__"
                                             "pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>]";
                    char v398 = 0;
                    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v361);
                    uint64_t v97 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a5);
                    uint64_t Identifier = (char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v97);
                    pxrInternal__aapl__pxrReserved__::TfStringify(Identifier, (uint64_t)&v395);
                    if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v99 = &v395;
                    }
                    else {
                      v99 = (std::string *)v395.__r_.__value_.__r.__words[0];
                    }
                    uint64_t v100 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v81);
                    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v79, (uint64_t *)&m);
                    v101 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&m);
                    v102 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v101);
                    sub_216BBBE60(v102);
                    v105 = &v393;
                    if (v394 < 0) {
                      v105 = (void ***)v393;
                    }
                    v106 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v103, v104, Text, v99, v100, v105);
                    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v396, "foundDep", v106);
                    if (SHIBYTE(v394) < 0) {
                      operator delete(v393);
                    }
                    uint64_t v107 = *((void *)&m + 1);
                    if (*((void *)&m + 1)
                      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&m + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                    {
                      (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
                    }
                    if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v395.__r_.__value_.__l.__data_);
                    }
                  }
                  unint64_t v81 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v81 + 72);
                }
                while (v81 != v80);
              }
              *(void *)&long long v396 = &v377;
              sub_216BE117C((void ***)&v396);
              uint64_t v78 = v359 + 1;
            }
            while (v359 + 1 != (char *)v346);
          }
        }
        else
        {
          v350 = a1;
          if (v9 != v10)
          {
            uint64_t v11 = 0;
            do
            {
              uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * (void)v11);
              uint64_t v13 = v384;
              v352 = v385;
              if (v384 != v385)
              {
                v358 = (char *)v11;
                do
                {
                  v364 = v13;
                  pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v12, v13, &v387, 47, 0, 0, 1, (uint64_t *)&v377);
                  BOOL v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v377 + 1);
                  v354 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v377 + 1);
                  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)v377;
                        i != v14;
                        uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 72))
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&m);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&m + 1);
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(i, &v396);
                    sub_21697DE94((int *)&m, (int *)&v396);
                    sub_21697DEEC((int *)&m + 1, (int *)&v396 + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
                    v360 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)i + 8);
                    while (1)
                    {
                      sub_21697C414(&v396);
                      *(void *)&long long v396 = 0;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v396);
                      uint64_t v16 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v396 + 1);
                      uint64_t v17 = m;
                      uint64_t v18 = v396;
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
                      sub_21697C414(&v396);
                      if (v17 == v18)
                      {
                        char v20 = 0;
                        goto LABEL_37;
                      }
                      uint64_t v19 = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v12, (unsigned int *)&m);
                      if (v19) {
                        break;
                      }
                      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&m, &v396);
                      sub_21697DE94((int *)&m, (int *)&v396);
                      sub_21697DEEC((int *)&m + 1, (int *)&v396 + 1);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
                    }
                    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v19, 6u, (uint64_t *)&v396);
                    v356 = i;
                    uint64_t v22 = *((void *)&v396 + 1);
                    BOOL v23 = (void **)v396;
                    uint64_t v24 = (void **)v397;
                    if (v396 == v397)
                    {
                      char v25 = 0;
                    }
                    else
                    {
                      char v25 = 0;
                      uint64_t v26 = *((void *)&v397 + 1) - 1;
                      do
                      {
                        uint64_t v27 = v22;
                        v393 = v23;
                        *(void *)&long long v394 = v22;
                        if (pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)&v393, v21))
                        {
                          uint64_t v28 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v393);
                          uint64_t v29 = sub_216BBBFA8(v28);
                          if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v29, v364))
                          {
                            uint64_t v30 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v393);
                            if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v360, v30))
                            {
                              if (sub_216BBBDFC(5))
                              {
                                uint64_t v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v356);
                                char v32 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v393);
                                uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v32);
                                int64_t v35 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpClassifyNodeDependency((pxrInternal__aapl__pxrReserved__ *)&v393, v34);
                                pxrInternal__aapl__pxrReserved__::PcpDependencyFlagsToString(v35, &v395);
                                unint64_t v38 = &v395;
                                if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  unint64_t v38 = (std::string *)v395.__r_.__value_.__r.__words[0];
                                }
                                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" found dep node: <%s> -> <%s> %s\n", v36, v37, v31, v33, v38);
                                if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v395.__r_.__value_.__l.__data_);
                                }
                              }
                              sub_216C18500(v358, (uint64_t)v393, v394, &v382);
                              char v25 = 1;
                            }
                          }
                        }
                        uint64_t v22 = v27 + 1;
                      }
                      while (v23 != v24 || v26 != v27);
                    }
                    char v20 = v25;
                    uint64_t i = v356;
                    uint64_t v11 = (void **)v358;
                    BOOL v14 = v354;
LABEL_37:
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
                    sub_21697C414(&m);
                    if ((v20 & 1) == 0)
                    {
                      *(void *)&long long v396 = "pcp/dependencies.h";
                      *((void *)&v396 + 1) = "Pcp_ForEachDependentNode";
                      *(void *)&long long v397 = 382;
                      *((void *)&v397 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(const Sdf"
                                               "Path &, const LayerOrLayerStack &, const SdfPath &, const PcpCache &, con"
                                               "st FN &) [FN = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/US"
                                               "D/pxr/usd/pcp/namespaceEdits.cpp:535:36), LayerOrLayerStack = pxrInternal"
                                               "__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>]";
                      char v398 = 0;
                      int v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v360);
                      uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v364);
                      uint64_t v41 = (char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v40);
                      pxrInternal__aapl__pxrReserved__::TfStringify(v41, (uint64_t)&v395);
                      if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v42 = &v395;
                      }
                      else {
                        uint64_t v42 = (std::string *)v395.__r_.__value_.__r.__words[0];
                      }
                      uint64_t v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(i);
                      pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v12, (uint64_t *)&m);
                      uint64_t v44 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&m);
                      char v45 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v44);
                      sub_216BBBE60(v45);
                      uint64_t v48 = &v393;
                      if (v394 < 0) {
                        uint64_t v48 = (void ***)v393;
                      }
                      uint64_t v49 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v46, v47, v39, v42, v43, v48);
                      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v396, "foundDep", v49);
                      if (SHIBYTE(v394) < 0) {
                        operator delete(v393);
                      }
                      uint64_t v50 = *((void *)&m + 1);
                      if (*((void *)&m + 1)
                        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&m + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                      {
                        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
                      }
                      if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v395.__r_.__value_.__l.__data_);
                      }
                    }
                  }
                  *(void *)&long long v396 = &v377;
                  sub_216BE117C((void ***)&v396);
                  uint64_t v13 = v364 + 3;
                }
                while (v364 + 3 != v352);
              }
              if (v12 == v350 && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
              {
                *(_OWORD *)&v395.__r_.__value_.__r.__words[1] = 0uLL;
                v395.__r_.__value_.__r.__words[0] = (std::string::size_type)&v395.__r_.__value_.__l.__size_;
                sub_216BC11A8((uint64_t *)&v393, (uint64_t *)&v389);
                pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v350, (uint64_t *)&v393, &v387, 38, 1, 0, 1, (uint64_t *)&v396);
                uint64_t v51 = v394;
                if ((void)v394
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(v394 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
                }
                uint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v396 + 1);
                for (uint64_t j = (pxrInternal__aapl__pxrReserved__::SdfPath *)v396;
                      j != v53;
                      uint64_t j = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)j + 72))
                {
                  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(j)) {
                    sub_216A5CF30((uint64_t **)&v395, j, j);
                  }
                }
                v393 = (void **)&v396;
                sub_216BE117C(&v393);
                sub_216BC11A8((uint64_t *)&v393, (uint64_t *)&v389);
                pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v350, (uint64_t *)&v393, &v387, 38, 0, 0, 1, (uint64_t *)&v396);
                uint64_t v54 = v394;
                if ((void)v394
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(v394 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
                }
                int v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v396 + 1);
                for (k = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v396;
                      k != v56;
                      k = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)k + 72))
                {
                  sub_216AF1BE4((uint64_t **)&v395, k);
                }
                v393 = (void **)&v396;
                sub_216BE117C(&v393);
                std::string::size_type v57 = v395.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v395.__r_.__value_.__l.__data_ != &v395.__r_.__value_.__r.__words[1])
                {
                  do
                  {
                    int v60 = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v350, (unsigned int *)(v57 + 28));
                    if (v60
                      || (*(void *)&long long v396 = "pcp/namespaceEdits.cpp",
                          *((void *)&v396 + 1) = "PcpComputeNamespaceEdits",
                          *(void *)&long long v397 = 602,
                          *((void *)&v397 + 1) = "PcpNamespaceEdits pxrInternal__aapl__pxrReserved__::PcpComputeNamespa"
                                                   "ceEdits(const PcpCache *, const std::vector<PcpCache *> &, const SdfP"
                                                   "ath &, const SdfPath &, const SdfLayerHandle &)",
                          char v398 = 0,
                          uint64_t v71 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Reported descendent dependency lacks a prim index", v58, v59), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v396, "index", v71) & 1) != 0))
                    {
                      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v60, 1u, (uint64_t *)&v396);
                      uint64_t v61 = *((void *)&v396 + 1);
                      uint64_t v62 = v396;
                      uint64_t v63 = v397;
                      BOOL v64 = (void)v396 == (void)v397 && *((void *)&v396 + 1) == *((void *)&v397 + 1);
                      if (!v64)
                      {
                        uint64_t v65 = *((void *)&v397 + 1) - 1;
                        do
                        {
                          uint64_t v66 = v61;
                          *(void *)&long long v377 = v62;
                          *((void *)&v377 + 1) = v61;
                          v67 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v377);
                          if (*v67 == v389)
                          {
                            v68 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v377);
                            if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(v68) & 1) == 0
                              && (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v377) & 1) == 0)
                            {
                              v393 = v11;
                              long long v394 = v377;
                              sub_216C183B0(&v379, (unint64_t *)&v393, (uint64_t)&v393);
                            }
                          }
                          uint64_t v61 = v66 + 1;
                        }
                        while (v62 != v63 || v65 != v66);
                      }
                    }
                    uint64_t v69 = *(std::string **)(v57 + 8);
                    if (v69)
                    {
                      do
                      {
                        uint64_t v70 = v69;
                        uint64_t v69 = (std::string *)v69->__r_.__value_.__r.__words[0];
                      }
                      while (v69);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v70 = *(std::string **)(v57 + 16);
                        BOOL v64 = v70->__r_.__value_.__r.__words[0] == v57;
                        std::string::size_type v57 = (std::string::size_type)v70;
                      }
                      while (!v64);
                    }
                    std::string::size_type v57 = (std::string::size_type)v70;
                  }
                  while (v70 != (std::string *)&v395.__r_.__value_.__r.__words[1]);
                }
                sub_216981EE8((uint64_t)&v395, (void *)v395.__r_.__value_.__l.__size_);
              }
              uint64_t v11 = (void **)((char *)v11 + 1);
            }
            while (v11 != (void **)v346);
          }
        }
        *((void *)&v377 + 1) = 0;
        uint64_t v378 = 0;
        *(void *)&long long v377 = (char *)&v377 + 8;
        unint64_t v108 = v382;
        if (v382 != (uint64_t *)v383)
        {
          do
          {
            uint64_t v109 = v108[4];
            long long m = *(_OWORD *)(v108 + 5);
            sub_216981010(&v368, a3);
            sub_21698105C((_DWORD *)&v368 + 1, (_DWORD *)a3 + 1);
            sub_216981010(&v366, a4);
            sub_21698105C((_DWORD *)&v366 + 1, (_DWORD *)a4 + 1);
            if (sub_216BBBDFC(5))
            {
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * v109), (uint64_t *)&v373);
              unint64_t v110 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v373);
              v111 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v110);
              sub_216BBBE60(v111);
              if ((SBYTE7(v397) & 0x80u) == 0) {
                v112 = &v396;
              }
              else {
                v112 = (long long *)v396;
              }
              unsigned int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C75BAC8, ArcType, (uint64_t)&v395);
              if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v114 = &v395;
              }
              else {
                v114 = (std::string *)v395.__r_.__value_.__r.__words[0];
              }
              v115 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              uint64_t v116 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v115);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&m);
              v371 = v117;
              v372[0] = v118;
              v119 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v371);
              v353 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v119);
              v355 = v116;
              uint64_t v120 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              uint64_t v121 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v120);
              v122 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v121);
              sub_216BBBE60(v122);
              if (v394 >= 0) {
                uint64_t v123 = &v393;
              }
              else {
                uint64_t v123 = (void ***)v393;
              }
              uint64_t v124 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
              uint64_t v125 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a4);
              uint64_t v126 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v368);
              v127 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v366);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\n processing node:\n  cache:           %s\n  node.type:       %s\n  node.path:       <%s>\n  node.rootPath:   <%s>\n  node.layerStack: %s\n  curPath:         <%s>\n  newPath:         <%s>\n  oldNodePath:     <%s>\n  newNodePath:     <%s>\n", v128, v129, v112, v114, v355, v353, v123, v124,
                v125,
                v126,
                v127);
              if (SHIBYTE(v394) < 0) {
                operator delete(v393);
              }
              if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v395.__r_.__value_.__l.__data_);
              }
              if (SBYTE7(v397) < 0) {
                operator delete((void *)v396);
              }
              long long v130 = v374[0];
              if (v374[0]
                && atomic_fetch_add_explicit((atomic_uint *volatile)v374[0] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*v130 + 8))(v130);
              }
            }
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m, (uint64_t)&v396);
            sub_216C1867C((uint64_t **)&v377, &v396, (uint64_t)&v396);
            char v132 = v131;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 3);
            sub_21697C414((_DWORD *)&v396 + 2);
            sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v396);
            if (v132)
            {
              BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v366, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v368);
              uint64_t v134 = 24;
              if (HasPrefix)
              {
                uint64_t v134 = 48;
                long long v135 = (void *)(a6 + 48);
              }
              else
              {
                long long v135 = (void *)(a6 + 24);
              }
              sub_216C16908(v135, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v135[1] - *(void *)(a6 + v134)) >> 3) + 1);
              uint64_t v136 = v135[1];
              *(void *)(v136 - 56) = v109;
              *(_DWORD *)(v136 - 48) = 0;
              sub_2169C487C((int *)(v136 - 24), &v368);
              sub_2169C48D4((int *)(v136 - 20), (_DWORD *)&v368 + 1);
              sub_2169C487C((int *)(v136 - 16), &v368);
              sub_2169C48D4((int *)(v136 - 12), (_DWORD *)&v368 + 1);
              sub_2169C487C((int *)(v136 - 8), &v366);
              sub_2169C48D4((int *)(v136 - 4), (_DWORD *)&v366 + 1);
              uint64_t v137 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              sub_216BC11A8((uint64_t *)&v396, v137);
              uint64_t v138 = *(atomic_uint **)(v136 - 32);
              *(_OWORD *)(v136 - 4sub_216C01044((uint64_t *)this, 0) = v396;
              *((void *)&v396 + 1) = 0;
              if (v138)
              {
                if (atomic_fetch_add_explicit(v138 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v138 + 8))(v138);
                }
                uint64_t v139 = *((void *)&v396 + 1);
                *(void *)&long long v396 = 0;
                if (*((void *)&v396 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v396 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
                }
              }
              uint64_t v140 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              sub_216BC11A8((uint64_t *)&v396, v140);
              sub_216C1699C((uint64_t *)a6, (uint64_t)&v396, v109, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v368, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v366);
              uint64_t v141 = *((void *)&v396 + 1);
              if (*((void *)&v396 + 1)
                && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v396 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
              }
            }
            while (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m)
                 && v142 != -1)
            {
              if (sub_216BBBDFC(5))
              {
                v143 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
                uint64_t v144 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v143);
                v145 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v368);
                v146 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v366);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - traverse to parent of <%s>.  <%s> -> <%s>\n", v147, v148, v144, v145, v146);
              }
              v395.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              v395.__r_.__value_.__l.__size_ = v149;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395, (uint64_t)&v396);
              sub_216C1867C((uint64_t **)&v377, &v396, (uint64_t)&v396);
              uint64_t v151 = v150;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 3);
              sub_21697C414((_DWORD *)&v396 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v396);
              if (sub_216C16CA4((uint64_t *)((v151 << 63 >> 63) & a6), (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m, v109, (int *)&v368, (int *)&v366))
              {
                if (sub_216BBBDFC(5)) {
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - done!  fixed direct arc.\n", v153, v154);
                }
                break;
              }
              *(void *)&long long m = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m);
              *((void *)&m + 1) = v152;
            }
            if ((!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&m)
               || v155 == -1)
              && !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v366, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v368))
            {
              if (sub_216BBBDFC(5))
              {
                v156 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v368);
                v157 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v366);
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - adding cacheSite <%s> -> <%s>\n", v158, v159, v156, v157);
              }
              sub_216C1752C((void **)a6, 1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
              uint64_t v160 = *(void *)(a6 + 8);
              *(void *)(v160 - 24) = v109;
              sub_2169C487C((int *)(v160 - 16), &v368);
              sub_2169C48D4((int *)(v160 - 12), (_DWORD *)&v368 + 1);
              sub_2169C487C((int *)(v160 - 8), &v366);
              sub_2169C48D4((int *)(v160 - 4), (_DWORD *)&v366 + 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v366 + 1);
            sub_21697C414(&v366);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v368 + 1);
            sub_21697C414(&v368);
            long long v161 = (uint64_t *)v108[1];
            if (v161)
            {
              do
              {
                uint64_t v162 = v161;
                long long v161 = (uint64_t *)*v161;
              }
              while (v161);
            }
            else
            {
              do
              {
                uint64_t v162 = (uint64_t *)v108[2];
                BOOL v64 = *v162 == (void)v108;
                unint64_t v108 = v162;
              }
              while (!v64);
            }
            unint64_t v108 = v162;
          }
          while (v162 != (uint64_t *)v383);
        }
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4)
          && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3))
        {
          *((void *)&m + 1) = 0;
          uint64_t v376 = 0;
          v374[1] = 0;
          *(void *)&long long m = (char *)&m + 8;
          v373 = (uint64_t *)v374;
          v374[0] = 0;
          unint64_t v163 = v379;
          if (v379 != (uint64_t *)&v380)
          {
            do
            {
              v395.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v163 + 5));
              v395.__r_.__value_.__l.__size_ = v164;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395, (uint64_t)&v396);
              sub_216C1867C(&v373, &v396, (uint64_t)&v396);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 3);
              sub_21697C414((_DWORD *)&v396 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v396);
              v165 = (uint64_t *)v163[1];
              if (v165)
              {
                do
                {
                  uint64_t v166 = v165;
                  v165 = (uint64_t *)*v165;
                }
                while (v165);
              }
              else
              {
                do
                {
                  uint64_t v166 = (uint64_t *)v163[2];
                  BOOL v64 = *v166 == (void)v163;
                  unint64_t v163 = v166;
                }
                while (!v64);
              }
              unint64_t v163 = v166;
            }
            while (v166 != (uint64_t *)&v380);
          }
          uint64_t v167 = a2[1] - *a2;
          if (v167)
          {
            uint64_t v168 = 0;
            uint64_t v342 = v167 >> 3;
            do
            {
              unint64_t v169 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * v168);
              if (sub_216BBBDFC(5))
              {
                pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v169, (uint64_t *)&v395);
                uint64_t v172 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v395);
                v173 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v172);
                sub_216BBBE60(v173);
                uint64_t v176 = &v396;
                if (SBYTE7(v397) < 0) {
                  uint64_t v176 = (long long *)v396;
                }
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"- dep cache: %s\n", v174, v175, v176);
                if (SBYTE7(v397) < 0) {
                  operator delete((void *)v396);
                }
                std::string::size_type size = v395.__r_.__value_.__l.__size_;
                if (v395.__r_.__value_.__l.__size_
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(v395.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
                }
              }
              v372[0] = 0;
              v372[1] = 0;
              v371 = (uint64_t *)v372;
              uint64_t v178 = (uint64_t)v384;
              v179 = v385;
              if (v384 == v385)
              {
                v369 = 0;
                uint64_t v370 = 0;
                v219 = (uint64_t *)&v369;
                v368 = (uint64_t *)&v369;
              }
              else
              {
                do
                {
                  uint64_t AllLayerStacksUsingLayer = pxrInternal__aapl__pxrReserved__::PcpCache::FindAllLayerStacksUsingLayer((uint64_t)v169, v178);
                  v181 = *(uint64_t **)AllLayerStacksUsingLayer;
                  v182 = *(uint64_t **)(AllLayerStacksUsingLayer + 8);
                  while (v181 != v182)
                  {
                    sub_216C18DA8(&v371, v372, (uint64_t)v181, v181);
                    v181 += 2;
                  }
                  v178 += 24;
                }
                while ((uint64_t *)v178 != v179);
                uint64_t v183 = v371;
                v369 = 0;
                uint64_t v370 = 0;
                v368 = (uint64_t *)&v369;
                uint64_t v347 = v168;
                if (v371 == (uint64_t *)v372)
                {
                  v219 = (uint64_t *)&v369;
                }
                else
                {
                  do
                  {
                    v345 = v183;
                    v362 = v183 + 4;
                    pxrInternal__aapl__pxrReserved__::PcpCache::FindSiteDependencies(v169, v183 + 4, &v387, 47, 1, 1, 1, (uint64_t *)&v366);
                    uint64_t v184 = (uint64_t)v366;
                    int64x2_t v185 = v367;
                    if (v366 != v367)
                    {
                      int64x2_t v186 = v345 + 5;
                      v348 = v367;
                      do
                      {
                        uint64_t v187 = *v186;
                        if (*v186)
                        {
                          if (*(unsigned char *)(sub_216850B68(v186) + 14)) {
                            uint64_t v187 = *v362;
                          }
                          else {
                            uint64_t v187 = 0;
                          }
                        }
                        *(void *)&long long v396 = v187;
                        sub_2168BD80C((uint64_t *)&v396);
                        int HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs((uint64_t *)&v396, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v184 + 8));
                        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v396);
                        if (HasPrimSpecs)
                        {
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v393);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v393 + 1);
                          pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v184, &v396);
                          sub_21697DE94((int *)&v393, (int *)&v396);
                          sub_21697DEEC((int *)&v393 + 1, (int *)&v396 + 1);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
                          while (1)
                          {
                            sub_21697C414(&v396);
                            *(void *)&long long v396 = 0;
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v396);
                            uint64_t v189 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v396 + 1);
                            v190 = v393;
                            v191 = (void **)v396;
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v189);
                            sub_21697C414(&v396);
                            if (v190 == v191)
                            {
                              char v193 = 0;
                              goto LABEL_236;
                            }
                            v192 = pxrInternal__aapl__pxrReserved__::PcpCache::FindPrimIndex((uint64_t)v169, (unsigned int *)&v393);
                            if (v192) {
                              break;
                            }
                            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v393, &v396);
                            sub_21697DE94((int *)&v393, (int *)&v396);
                            sub_21697DEEC((int *)&v393 + 1, (int *)&v396 + 1);
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
                          }
                          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v192, 6u, (uint64_t *)&v396);
                          std::string::size_type v195 = *((void *)&v396 + 1);
                          std::string::size_type v196 = v396;
                          uint64_t v197 = v397;
                          if (v396 == v397)
                          {
                            char v198 = 0;
                          }
                          else
                          {
                            char v198 = 0;
                            uint64_t v199 = *((void *)&v397 + 1) - 1;
                            do
                            {
                              std::string::size_type v200 = v195;
                              v395.__r_.__value_.__r.__words[0] = v196;
                              v395.__r_.__value_.__l.__size_ = v195;
                              if (pxrInternal__aapl__pxrReserved__::PcpNodeIntroducesDependency((pxrInternal__aapl__pxrReserved__ *)&v395, v194))
                              {
                                v201 = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                                if (sub_216ABA3A0(v362, v201))
                                {
                                  uint64_t v202 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                                  if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v184 + 8), v202))
                                  {
                                    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v184)
                                      || *(void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395) != *(void *)a3)
                                    {
                                      v391 = (_DWORD *)v184;
                                      uint64_t v203 = sub_216C18EDC(&v368, (pxrInternal__aapl__pxrReserved__::SdfPath *)v184, (uint64_t)&unk_2174BFD90, &v391);
                                      *(_OWORD *)(v203 + 5) = *(_OWORD *)&v395.__r_.__value_.__l.__data_;
                                    }
                                    char v198 = 1;
                                  }
                                }
                              }
                              std::string::size_type v195 = v200 + 1;
                            }
                            while (v196 != v197 || v199 != v200);
                          }
                          char v193 = v198;
                          uint64_t v168 = v347;
                          int64x2_t v185 = v348;
LABEL_236:
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v393 + 1);
                          sub_21697C414(&v393);
                          if ((v193 & 1) == 0)
                          {
                            *(void *)&long long v396 = "pcp/dependencies.h";
                            *((void *)&v396 + 1) = "Pcp_ForEachDependentNode";
                            *(void *)&long long v397 = 382;
                            *((void *)&v397 + 1) = "void pxrInternal__aapl__pxrReserved__::Pcp_ForEachDependentNode(con"
                                                     "st SdfPath &, const LayerOrLayerStack &, const SdfPath &, const Pcp"
                                                     "Cache &, const FN &) [FN = (lambda at /Library/Caches/com.apple.xbs"
                                                     "/Sources/USDLib/USD/pxr/usd/pcp/namespaceEdits.cpp:888:36), LayerOr"
                                                     "LayerStack = pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInterna"
                                                     "l__aapl__pxrReserved__::PcpLayerStack>]";
                            char v398 = 0;
                            uint64_t v204 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v184 + 8));
                            v205 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v362);
                            v206 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v205);
                            sub_216BBBE60(v206);
                            if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              unint64_t v207 = &v395;
                            }
                            else {
                              unint64_t v207 = (std::string *)v395.__r_.__value_.__r.__words[0];
                            }
                            v208 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v184);
                            pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(v169, (uint64_t *)&v391);
                            v209 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v391);
                            uint64_t v210 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v209);
                            sub_216BBBE60(v210);
                            v213 = &v393;
                            if (v394 < 0) {
                              v213 = (void ***)v393;
                            }
                            uint64_t v214 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unable to find node that introduced dependency on site <%s>@%s@ for prim <%s> in %s", v211, v212, v204, v207, v208, v213);
                            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v396, "foundDep", v214);
                            if (SHIBYTE(v394) < 0) {
                              operator delete(v393);
                            }
                            uint64_t v215 = v392;
                            if (v392
                              && atomic_fetch_add_explicit((atomic_uint *volatile)(v392 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                            {
                              (*(void (**)(uint64_t))(*(void *)v215 + 8))(v215);
                            }
                            if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v395.__r_.__value_.__l.__data_);
                            }
                          }
                          int64x2_t v186 = v345 + 5;
                        }
                        v184 += 72;
                      }
                      while ((void ***)v184 != v185);
                    }
                    *(void *)&long long v396 = &v366;
                    sub_216BE117C((void ***)&v396);
                    v216 = v345;
                    v217 = (uint64_t *)v345[1];
                    if (v217)
                    {
                      do
                      {
                        int v218 = v217;
                        v217 = (uint64_t *)*v217;
                      }
                      while (v217);
                    }
                    else
                    {
                      do
                      {
                        int v218 = (uint64_t *)v216[2];
                        BOOL v64 = *v218 == (void)v216;
                        v216 = v218;
                      }
                      while (!v64);
                    }
                    uint64_t v183 = v218;
                  }
                  while (v218 != (uint64_t *)v372);
                  v219 = v368;
                }
              }
              *(void *)&long long v396 = v219;
              *((void *)&v396 + 1) = &v369;
              while ((void)v396 != *((void *)&v396 + 1))
              {
                *(_OWORD *)&v395.__r_.__value_.__l.__data_ = *(_OWORD *)(*sub_216C175D0(&v396, v170, v171) + 40);
                uint64_t v222 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*sub_216C175D0(&v396, v220, v221) + 32);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v222, &v391);
                if (v395.__r_.__value_.__r.__words[0] && v395.__r_.__value_.__l.__size_ != -1)
                {
                  do
                  {
                    int64x2_t v223 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v365, v222, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v391, v223, 1);
                    uint64_t v224 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v393, v224, &v365);
                    v225 = (void *)*((void *)&m + 1);
                    uint64_t v226 = (uint64_t *)&m + 1;
                    if (!*((void *)&m + 1)) {
                      goto LABEL_281;
                    }
                    v227 = (long long *)((char *)&m + 8);
                    do
                    {
                      long long v228 = v227;
                      uint64_t v229 = v225 + 4;
                      int v230 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(v225 + 4, &v393);
                      v231 = v225 + 1;
                      if (!v230)
                      {
                        v231 = v225;
                        v227 = v225;
                      }
                      v225 = (void *)*v231;
                    }
                    while (*v231);
                    uint64_t v226 = (uint64_t *)&m + 1;
                    if (v227 == (long long *)((char *)&m + 8)
                      || (!v230 ? (v232 = v229) : (v232 = v228 + 2),
                          BOOL v233 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(v232, &v393),
                          uint64_t v226 = (uint64_t *)v227,
                          !v233))
                    {
LABEL_281:
                      if (v226 == (uint64_t *)m) {
                        goto LABEL_374;
                      }
                      uint64_t v234 = *v226;
                      if (*v226)
                      {
                        do
                        {
                          uint64_t v235 = v234;
                          uint64_t v234 = *(void *)(v234 + 8);
                        }
                        while (v234);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v235 = v226[2];
                          BOOL v64 = *(void *)v235 == (void)v226;
                          uint64_t v226 = (uint64_t *)v235;
                        }
                        while (v64);
                      }
                      if (v393 != *(void ***)(v235 + 32)
                        || !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v394, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v235 + 40)))
                      {
LABEL_374:
                        if (!sub_216C1904C((uint64_t)&v373, &v393))
                        {
                          v366 = &v393;
                          sub_216C190B8((uint64_t **)&m, &v393, (uint64_t)&unk_2174BFD90, (uint64_t *)&v366)[6] = v168;
                        }
                      }
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v394 + 1);
                    sub_21697C414(&v394);
                    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v393);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v365 + 1);
                    sub_21697C414(&v365);
                    v395.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v395);
                    v395.__r_.__value_.__l.__size_ = v236;
                  }
                  while (v395.__r_.__value_.__r.__words[0] && v236 != -1);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v391 + 1);
                sub_21697C414(&v391);
                sub_216C1764C(&v396);
              }
              sub_216C18E40((uint64_t)&v368, v369);
              sub_21699DA30((uint64_t)&v371, v372[0]);
              ++v168;
            }
            while (v168 != v342);
          }
          *(void *)&long long v396 = m;
          *((void *)&v396 + 1) = (char *)&m + 8;
          while ((void)v396 != *((void *)&v396 + 1))
          {
            sub_216C16908((void *)(a6 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a6 + 32) - *(void *)(a6 + 24)) >> 3) + 1);
            uint64_t v237 = *(void *)(a6 + 32);
            *(void *)(v237 - 56) = *(void *)(*sub_216C176F4(&v396, v238, v239) + 48);
            *(_DWORD *)(v237 - 48) = 0;
            uint64_t v242 = *sub_216C176F4(&v396, v240, v241);
            sub_2169C487C((int *)(v237 - 24), (_DWORD *)(v242 + 40));
            sub_2169C48D4((int *)(v237 - 20), (_DWORD *)(v242 + 44));
            uint64_t v245 = *sub_216C176F4(&v396, v243, v244);
            sub_2169C487C((int *)(v237 - 16), (_DWORD *)(v245 + 40));
            sub_2169C48D4((int *)(v237 - 12), (_DWORD *)(v245 + 44));
            sub_2169C487C((int *)(v237 - 8), a4);
            sub_2169C48D4((int *)(v237 - 4), (_DWORD *)a4 + 1);
            v248 = sub_216C176F4(&v396, v246, v247);
            sub_216BC11A8((uint64_t *)&v395, (uint64_t *)(*v248 + 32));
            v249 = *(atomic_uint **)(v237 - 32);
            *(_OWORD *)(v237 - 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)&v395.__r_.__value_.__l.__data_;
            v395.__r_.__value_.__l.__size_ = 0;
            if (v249)
            {
              if (atomic_fetch_add_explicit(v249 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v249 + 8))(v249);
              }
              std::string::size_type v250 = v395.__r_.__value_.__l.__size_;
              v395.__r_.__value_.__r.__words[0] = 0;
              if (v395.__r_.__value_.__l.__size_
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v395.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(std::string::size_type))(*(void *)v250 + 8))(v250);
              }
            }
            sub_216C17770(&v396);
          }
          sub_216C185D8((uint64_t)&v373, v374[0]);
          sub_216C18D04((uint64_t)&m, *((void **)&m + 1));
        }
        if (v381)
        {
          v251 = v379;
          if (v379 != (uint64_t *)&v380)
          {
            do
            {
              uint64_t v252 = v251[4];
              v253 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v251 + 5));
              sub_216981010(&v396, v253);
              sub_21698105C((_DWORD *)&v396 + 1, v253 + 1);
              pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v395, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v396, a3, a4, 1);
              sub_216C16CA4((uint64_t *)a6, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v251 + 5), v252, (int *)&v396, (int *)&v395);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v395.__r_.__value_.__r.__words + 1);
              sub_21697C414(&v395);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v396 + 1);
              sub_21697C414(&v396);
              v254 = (uint64_t *)v251[1];
              if (v254)
              {
                do
                {
                  v255 = v254;
                  v254 = (uint64_t *)*v254;
                }
                while (v254);
              }
              else
              {
                do
                {
                  v255 = (uint64_t *)v251[2];
                  BOOL v64 = *v255 == (void)v251;
                  v251 = v255;
                }
                while (!v64);
              }
              v251 = v255;
            }
            while (v255 != (uint64_t *)&v380);
          }
        }
        if (sub_216BBBDFC(5))
        {
          if (sub_216BBBDFC(5))
          {
            v256 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)&v389);
            v257 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v256);
            sub_216BBBE60(v257);
            v258 = (SBYTE7(v397) & 0x80u) == 0 ? &v396 : (long long *)v396;
            v259 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
            v260 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a4);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"PcpComputeNamespaceEdits():\n  cache:   %s\n  curPath: <%s>\n  newPath: <%s>\n", v261, v262, v258, v259, v260);
            if (SBYTE7(v397) < 0) {
              operator delete((void *)v396);
            }
          }
          *(_OWORD *)&v395.__r_.__value_.__l.__data_ = *(_OWORD *)a6;
          while (v395.__r_.__value_.__r.__words[0] != v395.__r_.__value_.__l.__size_)
          {
            if (sub_216BBBDFC(5))
            {
              v265 = sub_216C17818(&v395, v263, v264);
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * *(void *)*v265), (uint64_t *)&v393);
              v266 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v393);
              v267 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v266);
              sub_216BBBE60(v267);
              if ((SBYTE7(v397) & 0x80u) == 0) {
                v270 = &v396;
              }
              else {
                v270 = (long long *)v396;
              }
              v271 = sub_216C17818(&v395, v268, v269);
              v272 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v271 + 8));
              v275 = sub_216C17818(&v395, v273, v274);
              v276 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v275 + 16));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" cacheSite:\n  cache:   %s\n  oldPath: <%s>\n  newPath: <%s>\n", v277, v278, v270, v272, v276);
              if (SBYTE7(v397) < 0) {
                operator delete((void *)v396);
              }
              uint64_t v279 = v394;
              if ((void)v394
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v394 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v279 + 8))(v279);
              }
            }
            sub_216C17894(&v395);
          }
          for (long long m = *(_OWORD *)(a6 + 24); (void)m != *((void *)&m + 1); sub_216C17990(&m))
          {
            if (sub_216BBBDFC(5))
            {
              v282 = sub_216C17914(&m, v280, v281);
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * *(void *)*v282), (uint64_t *)&v373);
              v283 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v373);
              v284 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v283);
              sub_216BBBE60(v284);
              if ((SBYTE7(v397) & 0x80u) == 0) {
                v287 = &v396;
              }
              else {
                v287 = (long long *)v396;
              }
              v288 = sub_216C17914(&m, v285, v286);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C75D7D0, *(unsigned int *)(*v288 + 8), (uint64_t)&v395);
              if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v291 = &v395;
              }
              else {
                v291 = (std::string *)v395.__r_.__value_.__r.__words[0];
              }
              v292 = sub_216C17914(&m, v289, v290);
              v293 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(*v292 + 16));
              v294 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v293);
              sub_216BBBE60(v294);
              if (v394 >= 0) {
                v297 = &v393;
              }
              else {
                v297 = (void ***)v393;
              }
              v298 = sub_216C17914(&m, v295, v296);
              v299 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v298 + 32));
              v302 = sub_216C17914(&m, v300, v301);
              v303 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v302 + 40));
              v306 = sub_216C17914(&m, v304, v305);
              v307 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v306 + 48));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" layerStackSite:\n  cache:      %s\n  type:       %s\n  layerStack: %s\n  sitePath:   <%s>\n  oldPath:    <%s>\n  newPath:    <%s>\n", v308, v309, v287, v291, v297, v299, v303, v307);
              if (SHIBYTE(v394) < 0) {
                operator delete(v393);
              }
              if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v395.__r_.__value_.__l.__data_);
              }
              if (SBYTE7(v397) < 0) {
                operator delete((void *)v396);
              }
              v310 = v374[0];
              if (v374[0]
                && atomic_fetch_add_explicit((atomic_uint *volatile)v374[0] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*v310 + 8))(v310);
              }
            }
          }
          for (long long m = *(_OWORD *)(a6 + 48); (void)m != *((void *)&m + 1); sub_216C17990(&m))
          {
            if (sub_216BBBDFC(5))
            {
              v313 = sub_216C17914(&m, v311, v312);
              pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)(*a2 + 8 * *(void *)*v313), (uint64_t *)&v373);
              v314 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v373);
              v315 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v314);
              sub_216BBBE60(v315);
              if ((SBYTE7(v397) & 0x80u) == 0) {
                v318 = &v396;
              }
              else {
                v318 = (long long *)v396;
              }
              v319 = sub_216C17914(&m, v316, v317);
              pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C75D7D0, *(unsigned int *)(*v319 + 8), (uint64_t)&v395);
              if ((v395.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v322 = &v395;
              }
              else {
                v322 = (std::string *)v395.__r_.__value_.__r.__words[0];
              }
              v323 = sub_216C17914(&m, v320, v321);
              v324 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(*v323 + 16));
              v325 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v324);
              sub_216BBBE60(v325);
              if (v394 >= 0) {
                v328 = &v393;
              }
              else {
                v328 = (void ***)v393;
              }
              v329 = sub_216C17914(&m, v326, v327);
              v330 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v329 + 32));
              v333 = sub_216C17914(&m, v331, v332);
              v334 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v333 + 40));
              v337 = sub_216C17914(&m, v335, v336);
              v338 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v337 + 48));
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" invalidLayerStackSite:\n  cache:      %s\n  type:       %s\n  layerStack: %s\n  sitePath:   <%s>\n  oldPath:    <%s>\n  newPath:    <%s>\n", v339, v340, v318, v322, v328, v330, v334, v338);
              if (SHIBYTE(v394) < 0) {
                operator delete(v393);
              }
              if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v395.__r_.__value_.__l.__data_);
              }
              if (SBYTE7(v397) < 0) {
                operator delete((void *)v396);
              }
              v341 = v374[0];
              if (v374[0]
                && atomic_fetch_add_explicit((atomic_uint *volatile)v374[0] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*v341 + 8))(v341);
              }
            }
          }
        }
        sub_216C185D8((uint64_t)&v377, *((void **)&v377 + 1));
        sub_2167FB780((uint64_t)&v379, v380);
        sub_2167FB780((uint64_t)&v382, v383[0]);
        *(void *)&long long v396 = &v384;
        sub_216C18318((void ***)&v396);
      }
    }
    else
    {
      *(void *)&long long v396 = "pcp/namespaceEdits.cpp";
      *((void *)&v396 + 1) = "PcpComputeNamespaceEdits";
      *(void *)&long long v397 = 443;
      *((void *)&v397 + 1) = "PcpNamespaceEdits pxrInternal__aapl__pxrReserved__::PcpComputeNamespaceEdits(const PcpCac"
                               "he *, const std::vector<PcpCache *> &, const SdfPath &, const SdfPath &, const SdfLayerHandle &)";
      char v398 = 0;
      uint64_t v72 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)&v389);
      long long v73 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v72);
      sub_216BBBE60(v73);
      int v74 = SHIBYTE(v395.__r_.__value_.__r.__words[2]);
      std::string::size_type v75 = v395.__r_.__value_.__r.__words[0];
      v76 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
      int64x2_t v77 = &v395;
      if (v74 < 0) {
        int64x2_t v77 = (std::string *)v75;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v396, 1, (pxrInternal__aapl__pxrReserved__ *)"No prim index computed for %s<%s>\n", (const char *)v77, v76);
      if (SHIBYTE(v395.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v395.__r_.__value_.__l.__data_);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v388);
    sub_21697C414(&v387);
    sub_216BBEEA4(&v389);
  }
  *(void *)&long long v396 = v390;
  sub_216981168((void ***)&v396);
}

void sub_216C161F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,void *a59,uint64_t a60,char a61,void *a62,uint64_t a63)
{
  sub_216981EE8(v64 - 176, *(void **)(v64 - 168));
  sub_2167FB780((uint64_t)&a58, a59);
  sub_2167FB780((uint64_t)&a61, a62);
  *(void *)(v64 - 20sub_216C01044((uint64_t *)this, 0) = &a64;
  sub_216C18318((void ***)(v64 - 200));
  sub_21697B754((_DWORD *)(v64 - 256));
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v64 - 248));
  *(void *)(v64 - 20sub_216C01044((uint64_t *)this, 0) = v64 - 240;
  sub_216981168((void ***)(v64 - 200));
  sub_216C17A10(a30);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C16908(void *a1, unint64_t a2)
{
  BOOL result = (_DWORD *)a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return sub_216C17F24((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (result != (_DWORD *)v7)
      BOOL result = (_DWORD *)sub_216C17D98((uint64_t)(result - 14));
    a1[1] = v7;
  }
  return result;
}

uint64_t *sub_216C1699C(uint64_t *result, uint64_t a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)a2);
    BOOL result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetPathsToPrimsWithRelocates(v10);
    uint64_t v11 = result[1];
    uint64_t v44 = *result;
    for (i = v11; v44 != i; BOOL result = sub_216998538(&v44))
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)a2);
      uint64_t Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v12);
      uint64_t v16 = *Layers;
      uint64_t v17 = Layers[1];
      uint64_t v42 = *Layers;
      uint64_t v43 = v17;
      while (v16 != v17)
      {
        uint64_t v18 = (uint64_t *)sub_216BD9634(&v42, v14, v15);
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v18);
        uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169984B8(&v44, v20, v21);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v19, v22, &v41);
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v41) & 1) == 0)
        {
          uint64_t v24 = sub_216A663FC(&v41);
          if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasRelocates(v24))
          {
            char v25 = sub_216A663FC(&v41);
            pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(v25, &v39);
            memset(v46, 0, sizeof(v46));
            sub_21698EBCC(&v39, v46);
            sub_21698ED3C(&v39, (uint64_t **)&v47);
            *(_OWORD *)((char *)&v46[1] + 8) = v47;
            *((void *)&v46[2] + 1) = v48;
            if (sub_21698EDEC((uint64_t)v46, (uint64_t)&v46[1] + 8))
            {
LABEL_11:
              int v30 = 0;
            }
            else
            {
              while (1)
              {
                uint64_t v26 = sub_21698B334((uint64_t)v46);
                uint64_t v27 = sub_21698EEC4(*(uint64_t **)v26, *(void *)(v26 + 8), *(char **)(v26 + 16));
                if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v27, a4))
                {
                  break;
                }
                uint64_t v28 = sub_21698B334((uint64_t)v46);
                uint64_t v29 = sub_21698EEC4(*(uint64_t **)v28, *(void *)(v28 + 8), *(char **)(v28 + 16));
                if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 + 8), a4))
                {
                  break;
                }
                sub_21698B3B0((uint64_t)v46);
                if (sub_21698EDEC((uint64_t)v46, (uint64_t)&v46[1] + 8)) {
                  goto LABEL_11;
                }
              }
              int v30 = 1;
            }
            if (v40) {
              sub_216784EC4(v40);
            }
            if (v30)
            {
              BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a5, a4);
              uint64_t v32 = 3;
              if (HasPrefix)
              {
                uint64_t v32 = 6;
                uint64_t v33 = v9 + 6;
              }
              else
              {
                uint64_t v33 = v9 + 3;
              }
              sub_216C16908(v33, 0x6DB6DB6DB6DB6DB7 * ((v33[1] - v9[v32]) >> 3) + 1);
              uint64_t v34 = v33[1];
              *(void *)(v34 - 56) = a3;
              *(_DWORD *)(v34 - 48) = 5;
              uint64_t v37 = (_DWORD *)sub_2169984B8(&v44, v35, v36);
              sub_2169C487C((int *)(v34 - 24), v37);
              sub_2169C48D4((int *)(v34 - 20), v37 + 1);
              sub_2169C487C((int *)(v34 - 16), a4);
              sub_2169C48D4((int *)(v34 - 12), (_DWORD *)a4 + 1);
              sub_2169C487C((int *)(v34 - 8), a5);
              sub_2169C48D4((int *)(v34 - 4), (_DWORD *)a5 + 1);
              *(void *)(v34 - 4sub_216C01044((uint64_t *)this, 0) = *(void *)a2;
              sub_2168CD2FC((atomic_uint **)(v34 - 32), (atomic_uint **)(a2 + 8));
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v38, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v41);
              break;
            }
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v23, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v41);
        sub_216BD96B4(&v42);
        uint64_t v16 = v42;
        uint64_t v17 = v43;
      }
    }
  }
  return result;
}

void sub_216C16C6C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C16CA4(uint64_t *a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, uint64_t a3, int *a4, int *a5)
{
  sub_216981010(&v55, a4);
  sub_21698105C(&v56, a4 + 1);
  sub_216981010(&v53, a5);
  sub_21698105C(&v54, a5 + 1);
  sub_216C17A68(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v64);
  sub_216C17A68(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a5, &v62);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a4))
  {
    sub_2169C487C(a4, v64);
    sub_2169C48D4(a4 + 1, (_DWORD *)v64 + 1);
    sub_2169C487C(a5, &v62);
    sub_2169C48D4(a5 + 1, &v63);
    goto LABEL_18;
  }
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  uint64_t v61 = v9;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
  sub_216BC11A8((uint64_t *)&v49, LayerStack);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)&v49);
  RelocatesTargetToSource = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesTargetToSource(v11);
  uint64_t v13 = sub_216AFBFC0(RelocatesTargetToSource, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64, 0, (uint64_t)&ParentNode);
  if (RelocatesTargetToSource + 1 != v13)
  {
    uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28);
    unint64_t v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&ParentNode, (pxrInternal__aapl__pxrReserved__::SdfPath *)v64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36), 1);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v59, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, v14, v15, 1);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v62))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, &v58);
      uint64_t v47 = a3;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, &v57);
      uint64_t v16 = v57;
      uint64_t v17 = v58;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v57 + 1);
      sub_21697C414(&v57);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
      sub_21697C414(&v58);
      if (v17 == v16)
      {
        a3 = v47;
        sub_216C1699C(a1, (uint64_t)&v49, v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&ParentNode, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
        if (*(void *)v14 == v64[0])
        {
          NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v15);
          if ((*(void *)NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v14) & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a5);
            pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(v14, v19, (int *)&v58);
            sub_21697DE94(&v62, (int *)&v58);
            sub_21697DEEC(&v63, (int *)&v58 + 1);
            sub_21697B754(&v58);
LABEL_11:
            sub_216C1699C(a1, (uint64_t)&v49, a3, v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
LABEL_14:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
            sub_21697C414(&v59);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&ParentNode + 1);
            sub_21697C414(&ParentNode);
            goto LABEL_15;
          }
        }
      }
      else
      {
        a3 = v47;
        sub_216C1699C(a1, (uint64_t)&v49, v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&ParentNode, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
      }
      sub_2169C487C(&v62, v64);
      sub_2169C48D4(&v63, (_DWORD *)v64 + 1);
      goto LABEL_14;
    }
    uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64;
    goto LABEL_11;
  }
  sub_216C1699C(a1, (uint64_t)&v49, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v64, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v62);
LABEL_15:
  sub_2169C487C(a4, v64);
  sub_2169C48D4(a4 + 1, (_DWORD *)v64 + 1);
  sub_2169C487C(a5, &v62);
  sub_2169C48D4(a5 + 1, &v63);
  uint64_t v20 = *((void *)&v49 + 1);
  if (*((void *)&v49 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
  sub_21697C414(&v62);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
  long long v21 = sub_21697C414(v64);
  sub_216981010(v21, a4);
  sub_21698105C((_DWORD *)v64 + 1, a4 + 1);
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2) == 3)
  {
    sub_2169C487C(a4, &v55);
    sub_2169C48D4(a4 + 1, &v56);
    sub_2169C487C(a5, &v53);
    sub_2169C48D4(a5 + 1, &v54);
    if (sub_216BBBDFC(5)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - not final. skipping relocate\n", v22, v23);
    }
    uint64_t v24 = 0;
  }
  else if (*(void *)a4 == *(void *)a5)
  {
    if (sub_216BBBDFC(5)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - final.  stopping at node where path is unaffected\n", v25, v26);
    }
LABEL_25:
    uint64_t v24 = 1;
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a4) {
         && (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a2) & 1) == 0)
  }
  {
    if (sub_216BBBDFC(5)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - final.  direct arc fixup\n", v41, v42);
    }
    int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2);
    uint64_t v24 = 1;
    switch(ArcType)
    {
      case 1:
        goto LABEL_29;
      case 2:
        break;
      case 4:
        int ArcType = 3;
        goto LABEL_29;
      case 5:
        int ArcType = 4;
        goto LABEL_29;
      case 6:
        int ArcType = 2;
        goto LABEL_29;
      default:
        *(void *)&long long v49 = "pcp/namespaceEdits.cpp";
        *((void *)&v49 + 1) = "_AddLayerStackSite";
        uint64_t v50 = 381;
        uint64_t v51 = "BOOL pxrInternal__aapl__pxrReserved__::_AddLayerStackSite(PcpNamespaceEdits *, const PcpNodeRef &, size_t,"
              " SdfPath *, SdfPath *)";
        char v52 = 0;
        uint64_t v43 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2);
        uint64_t v46 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected arc type %d", v44, v45, v43);
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v49, "false", v46);
        goto LABEL_25;
    }
  }
  else
  {
    sub_2169C487C(&v55, a4);
    sub_2169C48D4(&v56, a4 + 1);
    sub_2169C487C(&v53, a5);
    sub_2169C48D4(&v54, a5 + 1);
    int ArcType = 0;
    uint64_t v24 = 0;
LABEL_29:
    if (a1)
    {
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
      uint64_t v29 = 3;
      if (HasPrefix)
      {
        uint64_t v29 = 6;
        int v30 = a1 + 6;
      }
      else
      {
        int v30 = a1 + 3;
      }
      sub_216C16908(v30, 0x6DB6DB6DB6DB6DB7 * ((v30[1] - a1[v29]) >> 3) + 1);
      uint64_t v31 = v30[1];
      *(void *)(v31 - 56) = a3;
      *(_DWORD *)(v31 - 48) = ArcType;
      sub_2169C487C((int *)(v31 - 24), v64);
      sub_2169C48D4((int *)(v31 - 20), (_DWORD *)v64 + 1);
      sub_2169C487C((int *)(v31 - 16), &v55);
      sub_2169C48D4((int *)(v31 - 12), &v56);
      sub_2169C487C((int *)(v31 - 8), &v53);
      sub_2169C48D4((int *)(v31 - 4), &v54);
      uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
      uint64_t v61 = v32;
      uint64_t v33 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&ParentNode);
      sub_216BC11A8((uint64_t *)&v49, v33);
      uint64_t v34 = *(atomic_uint **)(v31 - 32);
      *(_OWORD *)(v31 - 4sub_216C01044((uint64_t *)this, 0) = v49;
      *((void *)&v49 + 1) = 0;
      if (v34)
      {
        if (atomic_fetch_add_explicit(v34 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v34 + 8))(v34);
        }
        uint64_t v35 = *((void *)&v49 + 1);
        *(void *)&long long v49 = 0;
        if (*((void *)&v49 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
        }
      }
      if (sub_216BBBDFC(5))
      {
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v31 - 16));
        uint64_t v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v31 - 8));
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  - adding layer stack edit <%s> -> <%s>\n", v38, v39, Text, v37);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v64 + 1);
  sub_21697C414(v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  sub_21697C414(&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
  sub_21697C414(&v55);
  return v24;
}

void sub_216C17400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  sub_21697B754((_DWORD *)(v13 - 96));
  sub_21697B754((uint64_t *)va);
  sub_21697B754(va1);
  _Unwind_Resume(a1);
}

void **sub_216C1752C(void **result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (char *)result[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (unsigned char *)*result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return sub_216C18868(result, v6);
  }
  else if (!v5)
  {
    for (i = (uint64_t)*result + 24 * a2; v3 != (char *)i; BOOL result = (void **)sub_216C17ED0((uint64_t)(v2 + 2), v3))
      v3 -= 24;
    v2[1] = (void *)i;
  }
  return result;
}

void *sub_216C175D0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, p"
            "xrInternal__aapl__pxrReserved__::PcpNodeRef>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::"
            "SdfPath, pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C1764C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::SdfPath, pxrInternal__aapl__pxrReserved__::PcpNodeRef>>::operator++() [T = std::map<pxrInternal__aapl__p"
            "xrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void *sub_216C176F4(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved__::PcpLayerSt"
            "ackSite, unsigned long>>::operator->() [T = std::map<pxrInternal__aapl__pxrReserved__::PcpLayerStackSite, un"
            "signed long>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C17770(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    uint64_t v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<pxrInternal__aapl__pxrReserved"
            "__::PcpLayerStackSite, unsigned long>>::operator++() [T = std::map<pxrInternal__aapl__pxrReserved__::PcpLaye"
            "rStackSite, unsigned long>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void *sub_216C17818(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::PcpName"
            "spaceEdits::CacheSite>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNamespaceEdits::"
            "CacheSite>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C17894(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::PcpNamespaceEdits::CacheSite>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNa"
            "mespaceEdits::CacheSite>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

void *sub_216C17914(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::PcpName"
            "spaceEdits::LayerStackSite>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNamespaceEd"
            "its::LayerStackSite>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C17990(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::PcpNamespaceEdits::LayerStackSite>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::"
            "PcpNamespaceEdits::LayerStackSite>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 56;
  }
  return a1;
}

void **sub_216C17A10(void **a1)
{
  uint64_t v3 = a1 + 6;
  sub_216C17D14(&v3);
  uint64_t v3 = a1 + 3;
  sub_216C17D14(&v3);
  uint64_t v3 = a1;
  sub_216C17E38(&v3);
  return a1;
}

_DWORD *sub_216C17A68@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v7, v8);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v9, a2, &v30);
  if (v30 == *(void *)a2)
  {
    uint64_t v11 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10);
    sub_216981010(&v27, v11);
    sub_21698105C((_DWORD *)&v27 + 1, v11 + 1);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v12, v13, v14);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &v31);
    uint64_t v16 = v31;
    uint64_t v17 = (uint64_t)v27;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
    sub_21697C414(&v31);
    if (v16 == (void **)v17)
    {
      *(void *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_21697C414(&v27);
      goto LABEL_13;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_21697C414(&v27);
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v30, (uint64_t *)&v27);
  uint64_t v18 = v27;
  uint64_t v19 = v28;
  if (v27 == v28)
  {
LABEL_11:
    sub_21697D878(a3, &v30);
    sub_21697D8B4(a3 + 1, (_DWORD *)&v30 + 1);
  }
  else
  {
    while (1)
    {
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a1);
      BOOL v23 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v20, v21, v22);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v23, v18, &v31);
      BOOL v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      if (v24)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v30, v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, 1);
        sub_21697DE94((int *)&v30, (int *)&v26);
        sub_21697DEEC((int *)&v30 + 1, (int *)&v26 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
        sub_21697C414(&v26);
      }
      else
      {
        *(void *)a3 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      sub_21697C414(&v31);
      if (!v24) {
        break;
      }
      uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 8);
      if (v18 == v19) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v31 = (void **)&v27;
  sub_216981168(&v31);
LABEL_13:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  return sub_21697C414(&v30);
}

void sub_216C17CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216C17D14(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_216C17D98(v4 - 56);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216C17D98(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_21697C414((_DWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_216C17E38(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        sub_216C17ED0((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216C17ED0(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 5);
  sub_21697C414(a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);

  return sub_21697C414(a2 + 2);
}

_DWORD *sub_216C17F24(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    return sub_216C18098((_DWORD *)a1, a2);
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *(void *)a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *(void *)a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v20 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_2167B421C(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = (uint64_t)&v12[56 * v8];
    v17[0] = v12;
    v17[1] = v14;
    uint64_t v18 = v14;
    uint64_t v19 = &v12[56 * v11];
    uint64_t v15 = 56 * a2;
    unint64_t v16 = v14 + 56 * a2;
    do
    {
      sub_216C181AC(v20, v14);
      v14 += 56;
      v15 -= 56;
    }
    while (v15);
    uint64_t v18 = v16;
    sub_216C1810C((uint64_t *)a1, v17);
    return (_DWORD *)sub_216C182C8((uint64_t)v17);
  }
}

void sub_216C18078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C182C8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C18098(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = v3 + 56 * a2;
    uint64_t v5 = 56 * a2;
    do
    {
      BOOL result = sub_216C181AC((uint64_t)(v2 + 4), v3);
      v3 += 56;
      v5 -= 56;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *((void *)v2 + 1) = v3;
  return result;
}

void sub_216C18104(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_216C1810C(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (uint64_t *)*result;
  uint64_t v4 = (uint64_t *)result[1];
  uint64_t v6 = a2[1];
  if (v4 != (uint64_t *)*result)
  {
    do
    {
      v6 -= 56;
      v4 -= 7;
      BOOL result = (uint64_t *)sub_216C18234((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_216C181AC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 48) = 0;
  uint64_t v3 = (_DWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 32) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 36));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 44));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v3);

  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 52));
}

_DWORD *sub_216C18234(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 16) = *((_OWORD *)a3 + 1);
  a3[2] = 0;
  a3[3] = 0;
  sub_21697D878((_DWORD *)(a2 + 32), (_DWORD *)a3 + 8);
  sub_21697D8B4((_DWORD *)(a2 + 36), (_DWORD *)a3 + 9);
  sub_21697D878((_DWORD *)(a2 + 40), (_DWORD *)a3 + 10);
  sub_21697D8B4((_DWORD *)(a2 + 44), (_DWORD *)a3 + 11);
  sub_21697D878((_DWORD *)(a2 + 48), (_DWORD *)a3 + 12);

  return sub_21697D8B4((_DWORD *)(a2 + 52), (_DWORD *)a3 + 13);
}

uint64_t sub_216C182C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_216C17D98(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216C18318(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_216BF3510((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_216C183B0(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_216C1843C((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_21677B358(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_216C1843C(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a3 + 1;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unint64_t v9 = *a3;
        unint64_t v10 = v4[4];
        if (*a3 >= v10) {
          break;
        }
LABEL_6:
        uint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      if (v10 >= v9)
      {
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v7, v8 + 5)) {
          goto LABEL_6;
        }
        unint64_t v10 = v8[4];
        unint64_t v9 = *a3;
      }
      if (v10 < v9 || v9 >= v10 && pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v8 + 5, v7))
      {
        uint64_t v5 = v8 + 1;
        uint64_t v4 = (void *)v8[1];
        if (v4) {
          continue;
        }
      }
      goto LABEL_15;
    }
  }
  uint64_t v8 = (void *)(a1 + 8);
LABEL_15:
  *a2 = v8;
  return v5;
}

_OWORD *sub_216C18500(char *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t ParentNode = a2;
  *(void *)&long long v13 = a2;
  *((void *)&v13 + 1) = a3;
  if (a2)
  {
    while (a3 != -1)
    {
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13) != 2)
      {
        a3 = *((void *)&v13 + 1);
        uint64_t ParentNode = v13;
        break;
      }
      uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v13);
      a3 = v7;
      *(void *)&long long v13 = ParentNode;
      *((void *)&v13 + 1) = v7;
      if (!ParentNode) {
        break;
      }
    }
  }
  if (ParentNode && a3 != -1
    || (unint64_t v9 = "pcp/namespaceEdits.cpp",
        *(void *)&long long v10 = "InsertCacheNodePair",
        *((void *)&v10 + 1) = 485,
        unint64_t v11 = "static void pxrInternal__aapl__pxrReserved__::PcpComputeNamespaceEdits(const PcpCache *, const std::vector"
              "<PcpCache *> &, const SdfPath &, const SdfPath &, const SdfLayerHandle &)::_CacheNodeHelper::InsertCacheNo"
              "dePair(size_t, PcpNodeRef, std::set<CacheNodePair> *)",
        char v12 = 0,
        BOOL result = (_OWORD *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "node", 0),
        result))
  {
    unint64_t v9 = a1;
    long long v10 = v13;
    return sub_216C183B0(a4, (unint64_t *)&v9, (uint64_t)&v9);
  }
  return result;
}

void sub_216C185D8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C185D8(a1, *a2);
    sub_216C185D8(a1, a2[1]);
    sub_216C18634((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216C18634(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  return sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

uint64_t *sub_216C1867C(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)sub_216C18710((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    sub_216C187A4((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_216C18810((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_216C18710(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *sub_216C187A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  void v6[4] = *(void *)a2;
  *(void *)a2 = 0;
  sub_21697D878((_DWORD *)v6 + 10, (_DWORD *)(a2 + 8));
  BOOL result = sub_21697D8B4((_DWORD *)v6 + 11, (_DWORD *)(a2 + 12));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216C18810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C18634((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void **sub_216C18868(void **result, unint64_t a2)
{
  uint64_t v3 = (uint64_t *)result;
  uint64_t v5 = (uint64_t)(result + 2);
  uint64_t v4 = result[2];
  uint64_t v6 = (uint64_t)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-v6] >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v12 = v6 + 24 * a2;
      uint64_t v13 = 24 * a2;
      do
      {
        BOOL result = (void **)sub_216C18A54(v5, v6);
        v6 += 24;
        v13 -= 24;
      }
      while (v13);
      uint64_t v6 = v12;
    }
    v3[1] = v6;
  }
  else
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)*result) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*result) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    v18[4] = result + 2;
    if (v10) {
      unint64_t v11 = (char *)sub_216782ED8((uint64_t)(result + 2), v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v14 = &v11[24 * v7];
    v18[0] = v11;
    v18[1] = v14;
    _OWORD v18[3] = &v11[24 * v10];
    uint64_t v15 = 3 * a2;
    unint64_t v16 = &v14[24 * a2];
    uint64_t v17 = 8 * v15;
    do
    {
      sub_216C18A54(v5, (uint64_t)v14);
      v14 += 24;
      v17 -= 24;
    }
    while (v17);
    int v18[2] = v16;
    sub_216C189DC(v3, v18);
    return sub_216C18C88(v18);
  }
  return result;
}

void sub_216C189C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C18C88((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C189DC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C18ACC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_216C18A54(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (_DWORD *)(a2 + 16);
  *(void *)a2 = 0;
  uint64_t v4 = (_DWORD *)(a2 + 12);
  *(void *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v3);

  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
}

uint64_t sub_216C18ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 24;
      sub_216C18B84(a1, v7 - 24, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 24;
      *((void *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216C18BFC((uint64_t)v13);
  return v11;
}

_DWORD *sub_216C18B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (_DWORD *)(a3 + 12);
  *(void *)a2 = *(void *)a3;
  uint64_t v6 = (_DWORD *)(a2 + 12);
  sub_21697D878((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_21697D8B4(v6, v5);
  sub_21697D878((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));

  return sub_21697D8B4((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
}

uint64_t sub_216C18BFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C18C34((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C18C34(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C17ED0(v3, v1);
      v1 += 6;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216C18C88(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216C18CBC(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 24;
      uint64_t result = sub_216C17ED0(v4, (_DWORD *)(v1 - 24));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_216C18D04(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C18D04(a1, *a2);
    sub_216C18D04(a1, a2[1]);
    sub_216C18D60((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216C18D60(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  return sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

uint64_t *sub_216C18DA8(uint64_t **a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_216BC0F40(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    void v7[4] = *a4;
    void v7[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
    sub_21677B358(a1, v12, v8, v7);
  }
  return v7;
}

void sub_216C18E40(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C18E40(a1, *a2);
    sub_216C18E40(a1, a2[1]);
    sub_216C18E9C((_DWORD *)a2 + 8);
    operator delete(a2);
  }
}

_DWORD *sub_216C18E9C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t *sub_216C18EDC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216C18F88((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216C18FF4((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_216C18F88@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  sub_216981010(v6 + 8, v7);
  uint64_t result = sub_21698105C(v6 + 9, v7 + 1);
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = -1;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216C18FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C18E9C(v2 + 8);
    }
    operator delete(v2);
  }
}

uint64_t sub_216C1904C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(a2, v2 + 4) & 1) == 0)
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(v2 + 4, a2)) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *sub_216C190B8(uint64_t **a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_216C18710((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_216C19164((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_216C1922C((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_216C19164@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216C191D0((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216C191B8(_Unwind_Exception *a1)
{
  sub_216C1922C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216C191D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 12);
  *(void *)a1 = *(void *)a2;
  sub_2168BD80C((uint64_t *)a1);
  sub_216981010((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_21698105C((_DWORD *)(a1 + 12), v4);
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_216C1922C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C18D60((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 < v3) {
    return 1;
  }
  if (v2 > v3) {
    return 0;
  }
  return *a1 < *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(void *)this + (*((void *)this + 1) << 6);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChildSubgraph(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildSubgraph(*a1, a1, a2, a3, a4);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChild(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **a1, uint64_t *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a4)
{
  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::InsertChildNode(*a1, a1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  uint64_t result = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = **(void **)(result + 16);
  do
  {
    uint64_t v5 = v3;
    uint64_t v3 = *(unsigned __int16 *)(v4 + 48 * v3 + 26);
    if (v3 == 0xFFFF) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = result;
    }
    if (v3 == 0xFFFF || v6 == 0) {
      break;
    }
    int v8 = *(unsigned __int16 *)(v4 + 48 * v5 + 24);
    uint64_t v9 = v8 == 0xFFFF ? 0 : result;
    BOOL v10 = v8 != 0xFFFF && v8 == v3;
  }
  while (!v10 || v6 != v9);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  if (*(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 26) == 0xFFFF) {
    return 0;
  }
  else {
    return *(void *)this;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  if (*(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 24) == 0xFFFF) {
    return 0;
  }
  else {
    return *(void *)this;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int8 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 40);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 38);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 36);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return **(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return **(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned char *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 42) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2, char *a3)
{
  uint64_t result = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  if (((((*(unsigned char *)(**(void **)(result + 16) + 48 * v6 + 42) & 1) == 0) ^ a2) & 1) == 0)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    if (a2) {
      int v7 = 0x10000;
    }
    else {
      int v7 = 0;
    }
    *(_DWORD *)(result + 4sub_216C01044((uint64_t *)this, 0) = *(_DWORD *)(result + 40) & 0xFFFEFFFF | v7;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int8 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 41);
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission(unint64_t *a1, int a2, char *a3)
{
  unint64_t result = *a1;
  unint64_t v6 = a1[1];
  if (*(unsigned __int8 *)(**(void **)(result + 16) + 48 * v6 + 41) != a2)
  {
    unint64_t result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    *(unsigned char *)(result + 41) = a2;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return (*(unsigned __int8 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 42) >> 2) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return **(void **)(*(void *)this + 16) + 48 * *((void *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return (*(unsigned __int8 *)(*(void *)(*(void *)this + 32) + 12 * *((void *)this + 1) + 10) >> 1) & 1;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetCulled(void *this, int a2)
{
  if (((((*(unsigned char *)(*(void *)(*this + 32) + 12 * this[1] + 10) & 2) == 0) ^ a2) & 1) == 0)
  {
    unint64_t v2 = this;
    if (a2)
    {
      *(unsigned char *)(*this + 56) &= ~4u;
      char v3 = 2;
    }
    else
    {
      char v3 = 0;
    }
    this = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)this, a2 ^ 1u);
    uint64_t v4 = *(void *)(*v2 + 32) + 12 * v2[1];
    *(unsigned char *)(v4 + 1sub_216C01044((uint64_t *)this, 0) = *(unsigned char *)(v4 + 10) & 0xFD | v3;
  }
  return this;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2)
{
  if (a2)
  {
    char CanContributeSpecs = pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(*(void *)this + 32) + 12
                                                                                           * *((void *)this + 1));
    if (CanContributeSpecs)
    {
      unint64_t result = 0;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(*(void *)this + 32) + 12
                                                                                           * *((void *)this + 1));
  }
  unint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(v4);
  if (result >= 0x10000)
  {
    v7[0] = "pcp/node.cpp";
    v7[1] = "_RecordRestrictionDepth";
    uint64_t v7[2] = 217;
    void v7[3] = "void pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(_Restricted)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v7, (pxrInternal__aapl__pxrReserved__ *)"Maximum restriction namespace depth exceeded", v6);
    unint64_t result = 0xFFFFLL;
  }
LABEL_7:
  *((_WORD *)v4 + 4) = result;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetRestricted(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2, char *a3)
{
  unint64_t result = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  int v7 = *(_DWORD *)(**(void **)(result + 16) + 48 * v6 + 40);
  if (((((v7 & 0x40000) == 0) ^ a2) & 1) == 0)
  {
    unint64_t result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
    if (a2) {
      int v8 = 0x40000;
    }
    else {
      int v8 = 0;
    }
    *(_DWORD *)(result + 4sub_216C01044((uint64_t *)this, 0) = *(_DWORD *)(result + 40) & 0xFFFBFFFF | v8;
  }
  if (a2 != (v7 & 0x40000u) >> 18)
  {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(this, a2 ^ 1u);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, int a2, char *a3)
{
  unint64_t result = *(void *)this;
  unint64_t v6 = *((void *)this + 1);
  if ((*(unsigned char *)(**(void **)(result + 16) + 48 * v6 + 42) & 2) != 0)
  {
    if (a2) {
      return result;
    }
    int v8 = 1;
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)(*(void *)(result + 32) + 12 * v6 + 10);
    if ((a2 & 1) == 0)
    {
      if (a2 == (v7 & 2) >> 1) {
        return result;
      }
      goto LABEL_10;
    }
    int v8 = (v7 >> 1) & 1;
  }
  unint64_t result = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::_GetWriteableNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)result, v6, a3);
  if (a2) {
    int v9 = 0x20000;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(result + 4sub_216C01044((uint64_t *)this, 0) = *(_DWORD *)(result + 40) & 0xFFFDFFFF | v9;
  if (v8 != a2)
  {
LABEL_10:
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::_RecordRestrictionDepth(this, a2 ^ 1u);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  uint64_t v1 = *((void *)this + 1);
  if ((*(unsigned char *)(**(void **)(*(void *)this + 16) + 48 * v1 + 42) & 2) != 0) {
    return 1;
  }
  else {
    return (*(unsigned __int8 *)(*(void *)(*(void *)this + 32) + 12 * v1 + 10) >> 1) & 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  int v3 = *(_DWORD *)(**(void **)(*(void *)this + 16) + 48 * v2 + 40);
  if ((v3 & 0x20000) != 0 || (*(unsigned char *)(*(void *)(v1 + 32) + 12 * v2 + 10) & 2) != 0) {
    return 0;
  }
  if ((v3 & 0x40000) != 0) {
    return (*(unsigned __int8 *)(v1 + 56) >> 3) & 1;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(void *)(*(void *)this + 32) + 12 * *((void *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return (*(unsigned __int8 *)(*(void *)(*(void *)this + 32) + 12 * *((void *)this + 1) + 10) >> 2) & 1;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetIsDueToAncestor(void *this, int a2)
{
  if (a2) {
    char v3 = 4;
  }
  else {
    char v3 = 0;
  }
  uint64_t v2 = *(void *)(*this + 32) + 12 * this[1];
  *(unsigned char *)(v2 + 1sub_216C01044((uint64_t *)this, 0) = *(unsigned char *)(v2 + 10) & 0xFB | v3;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned char *)(*(void *)(*(void *)this + 32) + 12 * *((void *)this + 1) + 10) & 1;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(void *this, char a2)
{
  uint64_t v2 = *(void *)(*this + 32) + 12 * this[1];
  *(unsigned char *)(v2 + 1sub_216C01044((uint64_t *)this, 0) = *(unsigned char *)(v2 + 10) & 0xFE | a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X0>, uint64_t a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(a2, **(void **)(*(void *)this + 16) + 48 * *((void *)this + 1), *(void *)(*(void *)this + 32) + 12 * *((void *)this + 1));
}

BOOL pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned char *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 40) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)this + 32) + 12 * *((void *)this + 1) + 8);
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(void *this, __int16 a2)
{
  *(_WORD *)(*(void *)(*this + 32) + 12 * this[1] + 8) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 24);
  if (v3 == 0xFFFF) {
    uint64_t v2 = 0;
  }
  if (v3 == 0xFFFF || v2 == 0) {
    return 0;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v2 + 32)+ 12* *(unsigned __int16 *)(**(void **)(*(void *)this+ 16)+ 48 * *((void *)this + 1)+ 24)), a2)- *(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 38);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(this);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(this))
  {
    sub_216981010(&v7, this);
    sub_21698105C(&v8, (_DWORD *)this + 1);
    do
    {
      while ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v5);
        sub_21697DE94(&v7, &v5);
        sub_21697DEEC(&v8, &v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
        sub_21697C414(&v5);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v5);
      sub_21697DE94(&v7, &v5);
      sub_21697DEEC(&v8, &v6);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
      sub_21697C414(&v5);
      uint64_t PathElementCount = (PathElementCount - 1);
    }
    while ((pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7) & 1) != 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
  }
  return PathElementCount;
}

void sub_216C19B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X0>, int *a2@<X8>)
{
  uint64_t v4 = (_DWORD *)(*(void *)(*(void *)this + 32) + 12 * *((void *)this + 1));
  sub_216981010(a2, v4);
  sub_21698105C(a2 + 1, v4 + 1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(this, v5);
  for (int i = result; i; --i)
  {
    while (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v8);
      sub_21697DE94(a2, &v8);
      sub_21697DEEC(a2 + 1, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
      sub_21697C414(&v8);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v8);
    sub_21697DE94(a2, &v8);
    sub_21697DEEC(a2 + 1, &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    uint64_t result = (uint64_t)sub_21697C414(&v8);
  }
  return result;
}

void sub_216C19C98(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetIntroPath@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X0>, int *a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 24);
  if (v4 == 0xFFFF) {
    uint64_t v3 = 0;
  }
  if (v4 == 0xFFFF || v3 == 0)
  {
    int v6 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
    sub_216981010(a2, v6);
    return sub_21698105C(a2 + 1, v6 + 1);
  }
  else
  {
    int v8 = (_DWORD *)(*(void *)(v3 + 32)
                  + 12
                  * *(unsigned __int16 *)(**(void **)(*(void *)this + 16) + 48 * *((void *)this + 1) + 24));
    sub_216981010(a2, v8);
    sub_21698105C(a2 + 1, v8 + 1);
    uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(this, v9);
    for (int i = (int)result; i; --i)
    {
      while (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v12);
        sub_21697DE94(a2, &v12);
        sub_21697DEEC(a2 + 1, &v13);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
        sub_21697C414(&v12);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v12);
      sub_21697DE94(a2, &v12);
      sub_21697DEEC(a2 + 1, &v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      uint64_t result = sub_21697C414(&v12);
    }
  }
  return result;
}

void sub_216C19E24(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetChildrenRange@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  uint64_t v4 = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * v3 + 28);
  *a2 = *this;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v2;
  a2[4] = v3;
  a2[5] = 0xFFFFLL;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::PcpNodeRef_ChildrenIterator(void *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char a3)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  if (a3) {
    uint64_t v3 = 0xFFFFLL;
  }
  else {
    uint64_t v3 = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * this[1] + 28);
  }
  this[2] = v3;
  return this;
}

{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  if (a3) {
    uint64_t v3 = 0xFFFFLL;
  }
  else {
    uint64_t v3 = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * this[1] + 28);
  }
  this[2] = v3;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::PcpNodeRef_ChildrenIterator(pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator *this)
{
  *(void *)this = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_21747F4D0;
  return result;
}

{
  double result;

  *(void *)this = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_21747F4D0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::increment(void *this)
{
  this[2] = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * this[2] + 34);
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::PcpNodeRef_ChildrenReverseIterator(pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator *this)
{
  *(void *)this = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_21747F4D0;
  return result;
}

{
  double result;

  *(void *)this = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 8) = xmmword_21747F4D0;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::PcpNodeRef_ChildrenReverseIterator(uint64_t *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  uint64_t v2 = *((void *)a2 + 2);
  uint64_t v3 = *this;
  if (v2 == 0xFFFF) {
    uint64_t v4 = (unsigned __int16 *)(**(void **)(v3 + 16) + 48 * this[1] + 30);
  }
  else {
    uint64_t v4 = (unsigned __int16 *)(**(void **)(v3 + 16) + 48 * v2 + 32);
  }
  this[2] = *v4;
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;

  *(_OWORD *)this = *(_OWORD *)a2;
  uint64_t v2 = *((void *)a2 + 2);
  uint64_t v3 = *this;
  if (v2 == 0xFFFF) {
    uint64_t v4 = (unsigned __int16 *)(**(void **)(v3 + 16) + 48 * this[1] + 30);
  }
  else {
    uint64_t v4 = (unsigned __int16 *)(**(void **)(v3 + 16) + 48 * v2 + 32);
  }
  this[2] = *v4;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::increment(void *this)
{
  this[2] = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * this[2] + 32);
  return this;
}

void *pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenReverseIterator::PcpNodeRef_ChildrenReverseIterator(void *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char a3)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  if (a3) {
    uint64_t v3 = 0xFFFFLL;
  }
  else {
    uint64_t v3 = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * this[1] + 30);
  }
  this[2] = v3;
  return this;
}

{
  uint64_t v3;

  *(_OWORD *)this = *(_OWORD *)a2;
  if (a3) {
    uint64_t v3 = 0xFFFFLL;
  }
  else {
    uint64_t v3 = *(unsigned __int16 *)(**(void **)(*this + 16) + 48 * this[1] + 30);
  }
  this[2] = v3;
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, &v26);
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  int v9 = MapToRoot;
  if (a3) {
    *(unsigned char *)a3 = 0;
  }
  if (!*MapToRoot)
  {
    *(void *)&long long v34 = "pcp/pathTranslation.cpp";
    *((void *)&v34 + 1) = "Pcp_TranslatePath";
    uint64_t v35 = 50;
    int64_t v36 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    char v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
    goto LABEL_10;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v26)) {
    goto LABEL_12;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
  {
    *(void *)&long long v34 = "pcp/pathTranslation.cpp";
    *((void *)&v34 + 1) = "Pcp_TranslatePath";
    uint64_t v35 = 62;
    int64_t v36 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    char v37 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.", Text);
    goto LABEL_10;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
  {
    *(void *)&long long v34 = "pcp/pathTranslation.cpp";
    *((void *)&v34 + 1) = "Pcp_TranslatePath";
    uint64_t v35 = 67;
    int64_t v36 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    char v37 = 0;
    int v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.", v12);
LABEL_10:
    *(void *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
    goto LABEL_15;
  }
  char v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v9, v10, v11);
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v14))
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v9, v15, v16);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, &v32);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v32))
    {
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v32, (uint64_t *)&v34);
      for (long long i = v34; (void)i != *((void *)&i + 1); sub_21698147C(&i))
      {
        long long v21 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v19, v20);
        BOOL v24 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v9, v22, v23);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v24, v21, &v29);
        BOOL v25 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        if (v25)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, 1);
          sub_21697DE94(&v32, (int *)&v28);
          sub_21697DEEC(&v33, (int *)&v28 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
          sub_21697C414(&v28);
        }
        else
        {
          *(void *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_21697C414(&v29);
        if (!v25) {
          goto LABEL_28;
        }
      }
      if (a3) {
        *(unsigned char *)a3 = 1;
      }
      sub_21697D878(a4, &v32);
      sub_21697D8B4(a4 + 1, &v33);
LABEL_28:
      *(void *)&long long i = &v34;
      sub_216981168((void ***)&i);
    }
    else
    {
      *(void *)a4 = 0;
      sub_2169C4380(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_21697C414(&v32);
  }
  else
  {
LABEL_12:
    if (a3) {
      *(unsigned char *)a3 = 1;
    }
    sub_216981010(a4, &v26);
    sub_21698105C(a4 + 1, &v27);
  }
LABEL_15:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  return sub_21697C414(&v26);
}

void sub_216C1A3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_216981168(&a13);
  sub_21697B754(&a16);
  sub_21697B754(&a10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNode@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, int *a4@<X8>)
{
  char v17 = 0;
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  double result = sub_216C1A59C(MapToRoot, a2, &v17, a4);
  if (v17)
  {
    Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    sub_216981010(&v15, Path);
    sub_21698105C(&v16, Path + 1);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 0);
    sub_21697DE94(a4, (int *)&v12);
    sub_21697DEEC(a4 + 1, (int *)&v12 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_21697C414(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    double result = sub_21697C414(&v15);
  }
  if (a3) {
    *(unsigned char *)a3 = v17;
  }
  return result;
}

void sub_216C1A568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, int a13)
{
  sub_21697B754(&a11);
  sub_21697B754(&a13);
  sub_21697B754(v13);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C1A59C@<X0>(pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, unsigned char *a3@<X2>, _DWORD *a4@<X8>)
{
  if (a3) {
    *a3 = 0;
  }
  if (!*a1)
  {
    *(void *)&long long v28 = "pcp/pathTranslation.cpp";
    *((void *)&v28 + 1) = "Pcp_TranslatePath";
    uint64_t v29 = 50;
    int v30 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
    goto LABEL_10;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)) {
    goto LABEL_13;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    *(void *)&long long v28 = "pcp/pathTranslation.cpp";
    *((void *)&v28 + 1) = "Pcp_TranslatePath";
    uint64_t v29 = 62;
    int v30 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.");
    goto LABEL_10;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2))
  {
    *(void *)&long long v28 = "pcp/pathTranslation.cpp";
    *((void *)&v28 + 1) = "Pcp_TranslatePath";
    uint64_t v29 = 67;
    int v30 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapExpression]";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.");
LABEL_10:
    *(void *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a1, v8, v9);
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v11))
  {
    int v14 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a1, v12, v13);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v14, a2, &v26);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v26))
    {
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v26, (uint64_t *)&v28);
      for (long long i = v28; (void)i != *((void *)&i + 1); sub_21698147C(&i))
      {
        char v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v15, v16);
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a1, v18, v19);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v20, v17, &v23);
        BOOL v21 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
        if (v21)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, 1);
          sub_21697DE94(&v26, (int *)&v22);
          sub_21697DEEC(&v27, (int *)&v22 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
          sub_21697C414(&v22);
        }
        else
        {
          *(void *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        if (!v21) {
          goto LABEL_30;
        }
      }
      if (a3) {
        *a3 = 1;
      }
      sub_21697D878(a4, &v26);
      sub_21697D8B4(a4 + 1, &v27);
LABEL_30:
      *(void *)&long long i = &v28;
      sub_216981168((void ***)&i);
    }
    else
    {
      *(void *)a4 = 0;
      sub_2169C4380(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    return sub_21697C414(&v26);
  }
  else
  {
LABEL_13:
    if (a3) {
      *a3 = 1;
    }
    sub_216981010(a4, a2);
    return sub_21698105C(a4 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_216C1A8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_216981168(&a13);
  sub_21697B754(&a16);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslateTargetPathFromRootToNode@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);

  return sub_216C1A59C(MapToRoot, a2, a3, a4);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNodeUsingFunction@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  if (a3) {
    *(unsigned char *)a3 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsNull(this))
  {
    *(void *)&long long v20 = "pcp/pathTranslation.cpp";
    *((void *)&v20 + 1) = "Pcp_TranslatePath";
    uint64_t v21 = 50;
    uint64_t v22 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
LABEL_5:
    *(void *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)) {
    goto LABEL_13;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    *(void *)&long long v20 = "pcp/pathTranslation.cpp";
    *((void *)&v20 + 1) = "Pcp_TranslatePath";
    uint64_t v21 = 62;
    uint64_t v22 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.");
    goto LABEL_5;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2))
  {
    *(void *)&long long v20 = "pcp/pathTranslation.cpp";
    *((void *)&v20 + 1) = "Pcp_TranslatePath";
    uint64_t v21 = 67;
    uint64_t v22 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = false, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.");
    goto LABEL_5;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(this, a2, &v18);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18))
    {
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v18, (uint64_t *)&v20);
      for (long long i = v20; (void)i != *((void *)&i + 1); sub_21698147C(&i))
      {
        uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v10, v11);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(this, v12, &v15);
        BOOL v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        if (v13)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 1);
          sub_21697DE94(&v18, (int *)&v14);
          sub_21697DEEC(&v19, (int *)&v14 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
          sub_21697C414(&v14);
        }
        else
        {
          *(void *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        sub_21697C414(&v15);
        if (!v13) {
          goto LABEL_30;
        }
      }
      if (a3) {
        *(unsigned char *)a3 = 1;
      }
      sub_21697D878(a4, &v18);
      sub_21697D8B4(a4 + 1, &v19);
LABEL_30:
      *(void *)&long long i = &v20;
      sub_216981168((void ***)&i);
    }
    else
    {
      *(void *)a4 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    return sub_21697C414(&v18);
  }
  else
  {
LABEL_13:
    if (a3) {
      *(unsigned char *)a3 = 1;
    }
    sub_216981010(a4, a2);
    return sub_21698105C(a4 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_216C1ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_216981168(&a13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a17);
  sub_21697C414(&a16);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRootUsingFunction@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpMapFunction *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, _DWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(a2, &v15);
  if (a3) {
    *(unsigned char *)a3 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsNull(this))
  {
    *(void *)&long long v23 = "pcp/pathTranslation.cpp";
    *((void *)&v23 + 1) = "Pcp_TranslatePath";
    uint64_t v24 = 50;
    BOOL v25 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Null map function");
LABEL_5:
    *(void *)a4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
    goto LABEL_15;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15)) {
    goto LABEL_12;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15))
  {
    *(void *)&long long v23 = "pcp/pathTranslation.cpp";
    *((void *)&v23 + 1) = "Pcp_TranslatePath";
    uint64_t v24 = 62;
    BOOL v25 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    char v26 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> is not absolute.", Text);
    goto LABEL_5;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15))
  {
    *(void *)&long long v23 = "pcp/pathTranslation.cpp";
    *((void *)&v23 + 1) = "Pcp_TranslatePath";
    uint64_t v24 = 67;
    BOOL v25 = "SdfPath pxrInternal__aapl__pxrReserved__::Pcp_TranslatePath(const Mapping &, const SdfPath &, BOOL *) [NodeToR"
          "oot = true, Mapping = pxrInternal__aapl__pxrReserved__::PcpMapFunction]";
    char v26 = 0;
    int v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Path to translate <%s> must not contain a variant selection.", v8);
    goto LABEL_5;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(this))
  {
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v21);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v21))
    {
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v21, (uint64_t *)&v23);
      for (long long i = v23; (void)i != *((void *)&i + 1); sub_21698147C(&i))
      {
        BOOL v13 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v11, v12);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(this, v13, &v18);
        BOOL v14 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        if (v14)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, 1);
          sub_21697DE94(&v21, (int *)&v17);
          sub_21697DEEC(&v22, (int *)&v17 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
          sub_21697C414(&v17);
        }
        else
        {
          *(void *)a4 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_21697C414(&v18);
        if (!v14) {
          goto LABEL_28;
        }
      }
      if (a3) {
        *(unsigned char *)a3 = 1;
      }
      sub_21697D878(a4, &v21);
      sub_21697D8B4(a4 + 1, &v22);
LABEL_28:
      *(void *)&long long i = &v23;
      sub_216981168((void ***)&i);
    }
    else
    {
      *(void *)a4 = 0;
      sub_2169C4380(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
  }
  else
  {
LABEL_12:
    if (a3) {
      *(unsigned char *)a3 = 1;
    }
    sub_216981010(a4, &v15);
    sub_21698105C(a4 + 1, &v16);
  }
LABEL_15:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_21697C414(&v15);
}

void sub_216C1B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, int a16, int a17, char a18)
{
  a13 = (void **)&a18;
  sub_216981168(&a13);
  sub_21697B754(&a16);
  sub_21697B754(&a10);
  _Unwind_Resume(a1);
}

void sub_216C1B0D4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpIsNewDefaultStandinBehaviorEnabled(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  return *v1;
}

double pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 4) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (*(void *)this)
  {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (*(void *)this)
  {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v1);
    v5[0] = v2;
    v5[1] = v3;
    return (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v5);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(this);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasSpecs(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (!*(void *)this || (*(unsigned char *)(sub_216BCFCE4((uint64_t *)this) + 56) & 8) == 0) {
    return *((void *)this + 1) != *((void *)this + 2);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, &v10);
  uint64_t v4 = v10;
  uint64_t v3 = v11;
  uint64_t v5 = v12;
  if (v10 == v12 && v11 == v13) {
    return 0;
  }
  uint64_t v7 = v13 - 1;
  do
  {
    uint64_t v8 = v3;
    v9[0] = v4;
    v9[1] = v3;
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v9);
    if (result) {
      break;
    }
    uint64_t v3 = v8 + 1;
  }
  while (v4 != v5 || v7 != v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsUsd(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (*(void *)this) {
    return (*(unsigned __int8 *)(sub_216BCFCE4((uint64_t *)this) + 56) >> 3) & 1;
  }
  else {
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *result;
  if (*result)
  {
    int v6 = result;
    uint64_t v7 = sub_216BCFCE4(result);
    uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(v7, a2);
    uint64_t v4 = *v6;
    *a3 = *v6;
    a3[1] = (uint64_t)result;
  }
  else
  {
    *(_OWORD *)a3 = xmmword_21747F4E0;
    uint64_t v8 = -1;
  }
  a3[2] = v4;
  a3[3] = v8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::HasAnyPayloads(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)this);

  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::HasPayloads(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)this);

  return pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::IsInstanceable(v1);
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  *((void *)this + 4) = 0;
  uint64_t v4 = (void ***)((char *)this + 32);
  uint64_t v5 = (char *)this + 8;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)this = *(void *)a2;
  sub_2168BD80C((uint64_t *)a2);
  sub_2168BD378((int)this, 0);
  if (this != a2) {
    sub_216825D78(v5, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  int v6 = (void **)*((void *)a2 + 4);
  if (v6)
  {
    uint64_t v7 = (void **)operator new(0x18uLL);
    uint64_t *v7 = 0;
    v7[1] = 0;
    uint64_t v7[2] = 0;
    sub_216BCBAB4(v7, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
    sub_2168BBAAC(v4, v7);
  }
  return this;
}

void sub_216C1B484(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  operator delete(v5);
  sub_2168BBAAC(v3, 0);
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::Swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PrintStatistics(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this)
{
  return pxrInternal__aapl__pxrReserved__::Pcp_PrintPrimIndexStatistics(this, MEMORY[0x263F8C100]);
}

pxrInternal__aapl__pxrReserved__::PcpNodeRef *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::DumpToDotGraph(pxrInternal__aapl__pxrReserved__ *a1, char *a2, const char *a3, uint64_t a4)
{
  if (a2[23] < 0) {
    a2 = *(char **)a2;
  }
  return pxrInternal__aapl__pxrReserved__::PcpDumpDotGraph(a1, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeIteratorAtNode(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v4 = sub_216BCFCE4((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexForNode(v4, a2);
  }
  return v2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeSubtreeRange@<X0>(uint64_t *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *this;
  if (*this)
  {
    uint64_t v6 = this;
    uint64_t v7 = sub_216BCFCE4(this);
    this = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForSubtreeRange(v7, a2);
    uint64_t v4 = *v6;
    *a3 = *v6;
    a3[1] = (uint64_t)this;
  }
  else
  {
    *(_OWORD *)a3 = xmmword_21747F4E0;
    uint64_t v8 = -1;
  }
  a3[2] = v4;
  a3[3] = v8;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange@<D0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (*a1)
  {
    if (a2 == 6)
    {
      uint64_t v6 = (uint64_t)a1;
      unint64_t v7 = 0;
    }
    else
    {
      uint64_t v9 = sub_216BCFCE4(a1);
      unint64_t NodeIndexesForRange = pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeIndexesForRange(v9, a2);
      uint64_t v12 = a1[1];
      uint64_t v13 = a1[2] - v12;
      unint64_t v7 = v13 >> 2;
      if (v13)
      {
        uint64_t v14 = 0;
        if (v7 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v7;
        }
        int v16 = (unsigned __int16 *)(v12 + 4);
        while (1)
        {
          unint64_t v17 = *(v16 - 2);
          if (NodeIndexesForRange <= v17 && v11 > v17) {
            break;
          }
          ++v14;
          v16 += 2;
          if (v15 == v14) {
            goto LABEL_17;
          }
        }
        if (v7 <= v14 + 1) {
          unint64_t v22 = v14 + 1;
        }
        else {
          unint64_t v22 = v7;
        }
        uint64_t v23 = v14;
        while (++v23 < v7)
        {
          unsigned int v24 = *v16;
          v16 += 2;
          if (v11 <= v24) {
            goto LABEL_28;
          }
        }
        uint64_t v23 = v22;
LABEL_28:
        pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v26, (uint64_t)a1, v14);
        uint64_t v20 = (uint64_t)a1;
        uint64_t v19 = v23;
        goto LABEL_19;
      }
LABEL_17:
      uint64_t v6 = (uint64_t)a1;
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v26, v6, v7);
    uint64_t v19 = (a1[2] - a1[1]) >> 2;
    uint64_t v20 = (uint64_t)a1;
LABEL_19:
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v25, v20, v19);
    long long v21 = v25;
    double result = *(double *)&v26;
    *(_OWORD *)a3 = v26;
    *((_OWORD *)a3 + 1) = v21;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3);

  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3 + 2);
  return result;
}

double pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRangeForNode@<D0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this@<X0>, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(&v16, (uint64_t)this, 0);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(v15, (uint64_t)this, (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 2);
  while (!pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v16, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v15))
  {
    uint64_t Node = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode((uint64_t **)&v16);
    if (v7 == *((void *)a2 + 1) && *(void *)a2 == Node) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v16);
  }
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v16, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v15))
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3);
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a3 + 2);
  }
  else
  {
    long long v14 = v16;
    do
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::increment((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v14);
      if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v14, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v15))
      {
        break;
      }
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode((uint64_t **)&v14);
    }
    while (v11 == *((void *)a2 + 1) && *(void *)a2 == v10);
    double result = *(double *)&v16;
    long long v13 = v14;
    *(_OWORD *)a3 = v16;
    *((_OWORD *)a3 + 1) = v13;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t v4 = (uint64_t **)sub_216A663FC(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v4, &v10);
  uint64_t v5 = sub_216A663FC(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v5, &v9);
  uint64_t NodeProvidingSpec = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(a1, &v10, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_21697C414(&v9);
  uint64_t v7 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return NodeProvidingSpec;
}

void sub_216C1B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeProvidingSpec(uint64_t *a1, uint64_t *a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, &v15);
  uint64_t v6 = v15;
  uint64_t v5 = v16;
  uint64_t v7 = v17;
  if (v15 == v17 && v16 == v18) {
    return 0;
  }
  uint64_t v9 = v18 - 1;
  while (1)
  {
    uint64_t v10 = v5;
    v14[0] = v6;
    v14[1] = v5;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14))
    {
      if (*(void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14) == *a3)
      {
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v14);
        uint64_t v12 = sub_216BBBFA8(LayerStack);
        if (pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v12, a2)) {
          break;
        }
      }
    }
    uint64_t v5 = v10 + 1;
    if (v6 == v7 && v9 == v10) {
      return 0;
    }
  }
  return v14[0];
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComposeAuthoredVariantSelections@<W0>(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this@<X0>, uint64_t *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v4 = *((void *)v3 + 57);
  uint64_t v32 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange((uint64_t *)this, 6u, &v33);
  sub_216BC8294((uint64_t)v30, &v33);
  while (1)
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)v30, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v31);
    if (result) {
      break;
    }
    SiteRef = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIterator::_GetSiteRef(v30);
    uint64_t v8 = v7;
    v29[0] = 0;
    v29[1] = 0;
    long long v28 = v29;
    uint64_t v9 = (void *)sub_216AA5ECC(SiteRef);
    *((void *)&v33 + 1) = &v28;
    long long v34 = &stru_26C756CC0;
    __int16 v35 = 0;
    *(void *)&long long v33 = &unk_26C75C2E8;
    char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v9, v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v32, (uint64_t (***)(void, uint64_t))&v33);
    if ((_BYTE)v35) {
      char v11 = 0;
    }
    else {
      char v11 = HasField;
    }
    if (v11)
    {
      uint64_t v12 = (uint64_t *)v28;
      if (v28 != v29)
      {
        while (1)
        {
          uint64_t v13 = (void **)(v12 + 7);
          if (!pxrInternal__aapl__pxrReserved__::Pcp_IsVariableExpression(v12 + 7)) {
            goto LABEL_24;
          }
          *(void *)&long long v33 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode(v30);
          *((void *)&v33 + 1) = v14;
          LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v33);
          long long v33 = 0uLL;
          long long v34 = 0;
          uint64_t v16 = *(void *)(sub_216BBBFA8(LayerStack) + 392);
          sub_216779094(&__p, "variant");
          sub_216ABBA60(&v23, SiteRef);
          pxrInternal__aapl__pxrReserved__::Pcp_EvaluateVariableExpression((const std::string *)(v12 + 7), v16, &__p, (uint64_t)&v23, v8, 0, (uint64_t *)&v33, (uint64_t)&v26);
          if (*((char *)v12 + 79) < 0) {
            operator delete(*v13);
          }
          *(_OWORD *)uint64_t v13 = v26;
          v12[9] = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          uint64_t v17 = v24;
          if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)(v24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((void)v33 == *((void *)&v33 + 1)) {
            break;
          }
          uint64_t v18 = sub_2167AE00C((uint64_t **)&v28, v12);
          sub_21677B5A0((uint64_t)(v12 + 4));
          operator delete(v12);
          *(void *)&long long v26 = &v33;
          sub_216787968((void ***)&v26);
LABEL_29:
          uint64_t v12 = v18;
          if (v18 == (uint64_t *)v29)
          {
            long long v21 = v28;
            goto LABEL_32;
          }
        }
        *(void *)&long long v26 = &v33;
        sub_216787968((void ***)&v26);
LABEL_24:
        uint64_t v19 = (uint64_t *)v12[1];
        if (v19)
        {
          do
          {
            uint64_t v18 = v19;
            uint64_t v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v18 = (uint64_t *)v12[2];
            BOOL v20 = *v18 == (void)v12;
            uint64_t v12 = v18;
          }
          while (!v20);
        }
        goto LABEL_29;
      }
      long long v21 = v29;
LABEL_32:
      sub_216789928(a2, (const void **)v21, v29);
    }
    sub_2167877AC((uint64_t)&v28, v29[0]);
    sub_216BC2E20((uint64_t)v30);
  }
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216C1BD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetSelectionAppliedForVariantSet(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, &v25);
  uint64_t v5 = v25;
  uint64_t v6 = v26;
  uint64_t v7 = v27;
  uint64_t v8 = v28;
  if (v25 == v27 && v26 == v28)
  {
LABEL_29:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return;
  }
  while (1)
  {
    v24[0] = v5;
    v24[1] = v6;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v24);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(Path)) {
      goto LABEL_24;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v24);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(v11, (uint64_t)&__s1);
    uint64_t v12 = v21;
    unsigned __int8 v13 = v21;
    if ((v21 & 0x80u) == 0) {
      size_t v14 = v21;
    }
    else {
      size_t v14 = __n;
    }
    uint64_t v15 = a2[23];
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)a2 + 1);
    }
    if (v14 == v15) {
      break;
    }
LABEL_22:
    if (SHIBYTE(v23) < 0)
    {
      operator delete((void *)__p);
      if ((v21 & 0x80) == 0) {
        goto LABEL_24;
      }
    }
    else if ((v13 & 0x80) == 0)
    {
      goto LABEL_24;
    }
    operator delete(__s1);
LABEL_24:
    ++v6;
    if (v5 == v7 && v6 == v8) {
      goto LABEL_29;
    }
  }
  if (v16 >= 0) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = *(unsigned __int8 **)a2;
  }
  if (((char)v21 & 0x80000000) == 0)
  {
    if (!v21) {
      goto LABEL_30;
    }
    p_s1 = &__s1;
    while (*(unsigned __int8 *)p_s1 == *v17)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      ++v17;
      if (!--v12) {
        goto LABEL_30;
      }
    }
    goto LABEL_22;
  }
  if (memcmp(__s1, v17, __n)) {
    goto LABEL_22;
  }
LABEL_30:
  if (SHIBYTE(v23) < 0)
  {
    sub_216778F24((unsigned char *)a3, (void *)__p, *((unint64_t *)&__p + 1));
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(_OWORD *)a3 = __p;
    *(void *)(a3 + 16) = v23;
  }
  if ((char)v21 < 0) {
    operator delete(__s1);
  }
}

void sub_216C1BFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPrimIndexInputs::IsEquivalentTo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if (v4 != v5)
  {
    uint64_t v6 = &qword_267B91568;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91580, memory_order_acquire) & 1) == 0)
    {
      int v21 = __cxa_guard_acquire(&qword_267B91580);
      uint64_t v6 = &qword_267B91568;
      if (v21)
      {
        qword_267B91578 = 0;
        qword_267B91570 = 0;
        qword_267B91568 = (uint64_t)&qword_267B91570;
        __cxa_atexit((void (*)(void *))sub_216C309C0, &qword_267B91568, &dword_216758000);
        __cxa_guard_release(&qword_267B91580);
        uint64_t v6 = &qword_267B91568;
      }
    }
    if (!v4) {
      uint64_t v4 = &qword_267B91568;
    }
    if (v5) {
      uint64_t v6 = v5;
    }
    if (v4[2] != v6[2]) {
      return 0;
    }
    uint64_t v9 = *v4;
    uint64_t v7 = v4 + 1;
    uint64_t v8 = (unsigned __int8 *)v9;
    if ((uint64_t *)v9 != v7)
    {
      uint64_t v10 = (unsigned __int8 *)*v6;
      while ((sub_216BE09A8((uint64_t)&v22, v8 + 32, v10 + 32) & 1) != 0)
      {
        char v11 = (unsigned __int8 *)*((void *)v8 + 1);
        uint64_t v12 = v8;
        if (v11)
        {
          do
          {
            uint64_t v8 = v11;
            char v11 = *(unsigned __int8 **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v8 = (unsigned __int8 *)*((void *)v12 + 2);
            BOOL v13 = *(void *)v8 == (void)v12;
            uint64_t v12 = v8;
          }
          while (!v13);
        }
        size_t v14 = (unsigned __int8 *)*((void *)v10 + 1);
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            size_t v14 = *(unsigned __int8 **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (unsigned __int8 *)*((void *)v10 + 2);
            BOOL v13 = *(void *)v15 == (void)v10;
            uint64_t v10 = v15;
          }
          while (!v13);
        }
        uint64_t v10 = v15;
        if (v8 == (unsigned __int8 *)v7) {
          goto LABEL_22;
        }
      }
      return 0;
    }
  }
LABEL_22:
  int v16 = *(long long **)(a1 + 16);
  uint64_t v17 = *(long long **)(a2 + 16);
  if (v16 == v17) {
    return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B915B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B915B0))
  {
    xmmword_267B91588 = 0u;
    unk_267B91598 = 0u;
    dword_267B915A8 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_216C309EC, &xmmword_267B91588, &dword_216758000);
    __cxa_guard_release(&qword_267B915B0);
  }
  uint64_t v18 = v16 ? v16 : &xmmword_267B91588;
  uint64_t v19 = v17 ? v17 : &xmmword_267B91588;
  BOOL result = sub_216C309F0((uint64_t)v18, v19);
  if (result) {
    return *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *pxrInternal__aapl__pxrReserved__::PcpPrimIndexOutputs::Append(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v17 = *(_OWORD *)(a3 + 8);
  inserted = pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChildSubgraph((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v17, (uint64_t *)a2, a3, a4);
  if (inserted && v6 != -1)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)a2);
    if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::HasPayloads(v8)) {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(v17, 1);
    }
    pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AppendDependencyData((uint64_t *)(a1 + 72), (uint64_t **)(a2 + 72));
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AppendDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(a2 + 80));
    sub_216BBF6D8((uint64_t *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a2 + 88), *(void *)(a2 + 96), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
    sub_216BCC2B4((uint64_t *)(a1 + 40), *(void **)(a1 + 48), *(uint64_t **)(a2 + 40), *(void **)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 4);
    int v9 = *(_DWORD *)(a2 + 64);
    if (v9)
    {
      int v10 = *(_DWORD *)(a1 + 64);
      if (v10)
      {
        if (v9 != v10)
        {
          v15[0] = "pcp/primIndex.cpp";
          v15[1] = "Append";
          void v15[2] = 448;
          v15[3] = "PcpNodeRef pxrInternal__aapl__pxrReserved__::PcpPrimIndexOutputs::Append(PcpPrimIndexOutputs &&, cons"
                   "t PcpArc &, PcpErrorBasePtr *)";
          char v16 = 0;
          Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v15, (pxrInternal__aapl__pxrReserved__ *)"Inconsistent payload states for primIndex <%s> -- parent=%d vs child=%d;"
                                                " taking parent=%d\n",
            v13,
            Text,
            *(unsigned int *)(a1 + 64),
            *(unsigned int *)(a2 + 64),
            *(unsigned int *)(a1 + 64));
        }
      }
      else
      {
        *(_DWORD *)(a1 + 64) = v9;
      }
    }
  }
  return inserted;
}

void sub_216C1C364()
{
  sub_216779094(v3, "Task::EvalNodeRelocations");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalImpliedRelocations");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeReferences");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodePayload");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeInherits");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalImpliedClasses");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeSpecializes");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalImpliedSpecializes");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 11, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeAncestralVariantSets");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 7, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeAncestralVariantAuthored");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeAncestralVariantFallback");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 9, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeAncestralVariantNoneFound");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 10, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeVariantSets");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 12, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeVariantAuthored");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 13, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeVariantFallback");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 14, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalNodeVariantNoneFound");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 15, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::EvalUnresolvedPrimPathError");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 16, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "Task::None");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D7E0, 17, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216C1C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Pcp_RescanForSpecs(pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, int a3)
{
  int v4 = (int)a2;
  sub_216851EE4((uint64_t)&v54, "Pcp", "Pcp_RescanForSpecs");
  if (v4)
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, (uint64_t *)&v48);
      long long v52 = v48;
      long long v53 = v49;
      long long v50 = v48;
      long long v51 = v49;
      while ((void)v50 != (void)v51 || *((void *)&v50 + 1) != *((void *)&v51 + 1))
      {
        int v9 = sub_216C1CCF4(&v50, v6, v7);
        uint64_t v10 = v9[1];
        *(void *)&long long v48 = *v9;
        *((void *)&v48 + 1) = v10;
        *(void *)&long long v46 = sub_216C1CD78((uint64_t *)&v50, v11, v12);
        *((void *)&v46 + 1) = v13;
        LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v46);
        Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v46);
        char HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v48, HasPrimSpecs);
        sub_216C1CE00(&v50);
      }
    }
    goto LABEL_46;
  }
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, (uint64_t *)&v48);
  long long v52 = v48;
  long long v53 = v49;
  long long v50 = v48;
  long long v51 = v49;
  while ((void)v50 != (void)v51 || *((void *)&v50 + 1) != *((void *)&v51 + 1))
  {
    *(void *)&long long v48 = sub_216C1CD78((uint64_t *)&v50, v17, v18);
    *((void *)&v48 + 1) = v20;
    if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48) & 1) != 0
      || !pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48))
    {
      char v42 = 0;
      if (a3) {
        goto LABEL_42;
      }
    }
    else
    {
      int v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48);
      char v22 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v21);
      uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v22);
      uint64_t v24 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v48);
      uint64_t v25 = Layers[1] - *Layers;
      if (v25)
      {
        uint64_t v26 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v24;
        unint64_t v27 = 0;
        char v28 = 0;
        uint64_t v29 = v25 >> 3;
        do
        {
          int v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + 8 * v27));
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v30, v26))
          {
            sub_216C22D24(v56, *((unint64_t *)&v48 + 1), v27);
            int v31 = v56[0];
            uint64_t v32 = *((void *)&v46 + 1);
            if (*((void *)&v46 + 1) >= (unint64_t)v47)
            {
              uint64_t v34 = (uint64_t)(*((void *)&v46 + 1) - v46) >> 2;
              if ((unint64_t)(v34 + 1) >> 62) {
                sub_21677CB10();
              }
              unint64_t v35 = (uint64_t)&v47[-v46] >> 1;
              if (v35 <= v34 + 1) {
                unint64_t v35 = v34 + 1;
              }
              if ((unint64_t)&v47[-v46] >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v35;
              }
              if (v36) {
                char v37 = (char *)sub_21677EA28((uint64_t)&v47, v36);
              }
              else {
                char v37 = 0;
              }
              unint64_t v38 = &v37[4 * v34];
              *(_DWORD *)unint64_t v38 = v31;
              long long v33 = v38 + 4;
              uint64_t v39 = (char *)*((void *)&v46 + 1);
              uint64_t v40 = (char *)v46;
              if (*((void *)&v46 + 1) != (void)v46)
              {
                do
                {
                  int v41 = *((_DWORD *)v39 - 1);
                  v39 -= 4;
                  *((_DWORD *)v38 - 1) = v41;
                  v38 -= 4;
                }
                while (v39 != v40);
                uint64_t v39 = (char *)v46;
              }
              *(void *)&long long v46 = v38;
              *((void *)&v46 + 1) = v33;
              uint64_t v47 = &v37[4 * v36];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              **((_DWORD **)&v46 + 1) = v56[0];
              long long v33 = (_DWORD *)(v32 + 4);
            }
            *((void *)&v46 + 1) = v33;
            char v28 = 1;
          }
          ++v27;
        }
        while (v27 != v29);
      }
      else
      {
        char v28 = 0;
      }
      char v42 = v28;
      if (a3) {
LABEL_42:
      }
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v48, v42);
    }
    sub_216C1CE00(&v50);
  }
  uint64_t v43 = (void *)*((void *)this + 1);
  *(_OWORD *)((char *)this + 8) = v46;
  uint64_t v44 = (char *)*((void *)this + 3);
  *((void *)this + 3) = v47;
  *(void *)&long long v46 = v43;
  uint64_t v47 = v44;
  if (v43)
  {
    *((void *)&v46 + 1) = v43;
    operator delete(v43);
  }
LABEL_46:
  while (v55--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v54);
}

void sub_216C1CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  sub_21684E6B8(v10 - 112);
  _Unwind_Resume(a1);
}

void *sub_216C1CCF4(void *result, uint64_t a2, char *a3)
{
  if (*result == result[2] && result[1] == result[3])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    void v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpNodeIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>>::operator->() [T = std::pair<pxrInternal__aapl__"
            "pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216C1CD78(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[2] && a1[1] == a1[3])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    v6[2] = 271;
    void v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__::PcpNodeIt"
            "erator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>>::operator*() [T = std::pair<pxrInternal__aapl__p"
            "xrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = false]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216C1CDF8()
{
}

void *sub_216C1CE00(void *a1)
{
  uint64_t v2 = a1[1];
  if (*a1 == a1[2] && v2 == a1[3])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator++";
    void v5[2] = 250;
    v5[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserve"
            "d__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>>::operator++() [T = std::pair<pxrIn"
            "ternal__aapl__pxrReserved__::PcpNodeIterator, pxrInternal__aapl__pxrReserved__::PcpNodeIterator>, Reverse = false]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    a1[1] = v2 + 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)4>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(LayerStack);
}

void sub_216C1CEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)5>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
  pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(LayerStack);
}

void sub_216C1CF78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Pcp_NeedToRecomputeDueToAssetPathChange(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)this, 6u, &v9);
  uint64_t v2 = v9;
  uint64_t v3 = v10;
  uint64_t v4 = v11;
  uint64_t v5 = v12;
  if (v9 != v11 || v10 != v12)
  {
    do
    {
      v8[0] = v2;
      v8[1] = v3;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v8))
      {
        sub_216C30A6C((uint64_t)v8, 4, &v17);
        if (v18 != v20 || v17 != v19)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)4>((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v8, &v13);
        }
        sub_216C30A6C((uint64_t)v8, 5, &v17);
        if (v18 != v20 || v17 != v19)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          pxrInternal__aapl__pxrReserved__::_GetSourceArcs<(pxrInternal__aapl__pxrReserved__::PcpArcType)5>((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v8, &v13);
        }
      }
      ++v3;
    }
    while (v2 != v4 || v3 != v5);
  }
  return 0;
}

void sub_216C1D39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  a15 = (void **)&a20;
  sub_2169CC78C(&a15);
  a15 = (void **)&a23;
  sub_216C29988(&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *Resolver)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v51, "Pcp", "PcpComputePrimIndex");
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a1)
    && ((IsAbsoluteRootOrPrimPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a1),
         (IsAbsoluteRootOrPrimPath & 1) != 0)
     || (IsAbsoluteRootOrPrimPath = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a1),
         (IsAbsoluteRootOrPrimPath & 1) != 0)))
  {
    if (!Resolver) {
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(IsAbsoluteRootOrPrimPath);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v11);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v80, (pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
    uint64_t v13 = a2[1];
    if (v13)
    {
      if (*(unsigned char *)(sub_216850B68(a2 + 1) + 14)) {
        uint64_t v13 = *a2;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    *(void *)&long long v57 = v13;
    sub_2168BD80C((uint64_t *)&v57);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v48, &v57, a1);
    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v57);
    sub_216C1DC2C((uint64_t)&v48, (uint64_t)&v48, 0, 1, 1u, 1, 0, a3, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a4);
    if (*(unsigned char *)(a3 + 96))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a4);
      sub_216C224B0(v14, v15, (char *)&v48, a4 + 11);
    }
    if (!*(unsigned char *)(a3 + 97))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a4);
      v78[0] = v18;
      v78[1] = v16;
      if (!v18 || v16 == -1)
      {
        *(void *)&long long v57 = "pcp/primIndex.cpp";
        *((void *)&v57 + 1) = "_EnforcePermissions";
        uint64_t v58 = 4435;
        uint64_t v59 = "void pxrInternal__aapl__pxrReserved__::_EnforcePermissions(PcpPrimIndex *, PcpErrorVector *)";
        v60[0] = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v57, "rootNode", 0);
      }
      std::string::size_type v75 = 0;
      v76 = 0;
      uint64_t v77 = 0;
      sub_216C2F848(v78, (unint64_t)&v75, v17);
      *(void *)&long long v74 = 0;
      *((void *)&v74 + 1) = -1;
      uint64_t v70 = v76;
      uint64_t v71 = v76;
      uint64_t v72 = v75;
      long long v73 = v75;
      while (v71 != v73)
      {
        long long v69 = *(_OWORD *)sub_216C2F9AC((uint64_t)&v70, v19, v20);
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69))
        {
          if (!(void)v74 || *((void *)&v74 + 1) == -1) {
            goto LABEL_66;
          }
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetRestricted((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69, 1, v21);
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69))
          {
            LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69);
            uint64_t v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
            uint64_t Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v23);
            uint64_t v65 = Layers[1];
            uint64_t v66 = v65;
            uint64_t v67 = *Layers;
            uint64_t v68 = v67;
            while (v66 != v68)
            {
              unint64_t v27 = (uint64_t *)sub_216BEF334((uint64_t)&v65, v25, v26);
              char v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v27);
              Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69);
              if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v28, Path))
              {
                pxrInternal__aapl__pxrReserved__::PcpErrorPrimPermissionDenied::New(&v64);
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v69);
                v53[0] = v30;
                v53[1] = v31;
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v53, (uint64_t)&v54);
                pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v57, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v54);
                uint64_t v32 = v64;
                pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v64 + 16, (uint64_t)&v57);
                sub_21697DE94((int *)(v32 + 96), &v62);
                sub_21697DEEC((int *)(v32 + 100), &v63);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
                sub_21697C414(&v62);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v61);
                unint64_t v79 = (void **)v60;
                sub_216787968(&v79);
                long long v33 = v59;
                if (v59
                  && atomic_fetch_add_explicit((atomic_uint *volatile)v59 + 2, 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(const char *))(*(void *)v33 + 8))(v33);
                }
                uint64_t v34 = *((void *)&v57 + 1);
                if (*((void *)&v57 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
                sub_21697C414(&v55);
                sub_216BBEEA4(&v54);
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69, (uint64_t)&v54);
                pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v57, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v54);
                uint64_t v35 = v64;
                pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v64 + 104, (uint64_t)&v57);
                sub_21697DE94((int *)(v35 + 184), &v62);
                sub_21697DEEC((int *)(v35 + 188), &v63);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
                sub_21697C414(&v62);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v61);
                v53[0] = (void **)v60;
                sub_216787968(v53);
                unint64_t v36 = v59;
                if (v59
                  && atomic_fetch_add_explicit((atomic_uint *volatile)v59 + 2, 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(const char *))(*(void *)v36 + 8))(v36);
                }
                uint64_t v37 = *((void *)&v57 + 1);
                if (*((void *)&v57 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
                sub_21697C414(&v55);
                sub_216BBEEA4(&v54);
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v74, (uint64_t)&v54);
                pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v57, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v54);
                uint64_t v38 = v64;
                pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v64 + 192, (uint64_t)&v57);
                sub_21697DE94((int *)(v38 + 272), &v62);
                sub_21697DEEC((int *)(v38 + 276), &v63);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
                sub_21697C414(&v62);
                pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v61);
                v53[0] = (void **)v60;
                sub_216787968(v53);
                uint64_t v39 = v59;
                if (v59
                  && atomic_fetch_add_explicit((atomic_uint *volatile)v59 + 2, 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(const char *))(*(void *)v39 + 8))(v39);
                }
                uint64_t v40 = *((void *)&v57 + 1);
                if (*((void *)&v57 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
                sub_21697C414(&v55);
                sub_216BBEEA4(&v54);
                long long v57 = v64;
                if (*((void *)&v64 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                sub_216C27B4C(&v57, (uint64_t)a4, a4 + 5);
                if (*((void *)&v57 + 1)) {
                  sub_216784EC4(*((std::__shared_weak_count **)&v57 + 1));
                }
                if (*((void *)&v64 + 1)) {
                  sub_216784EC4(*((std::__shared_weak_count **)&v64 + 1));
                }
                break;
              }
              sub_216BEF4DC((uint64_t)&v65);
            }
          }
          if (!(void)v74 || *((void *)&v74 + 1) == -1)
          {
LABEL_66:
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v69)) {
              long long v74 = v69;
            }
          }
        }
        sub_216C2FA30((uint64_t)&v70);
      }
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
    }
    uint64_t v43 = sub_216BCFCE4(a4);
    BOOL IsInstanceable = pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexIsInstanceable((pxrInternal__aapl__pxrReserved__ *)a4, v44);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetIsInstanceable(v43, IsInstanceable);
    long long v46 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4(a4);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::Finalize(v46);
    pxrInternal__aapl__pxrReserved__::Pcp_RescanForSpecs((pxrInternal__aapl__pxrReserved__ *)a4, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)*(unsigned __int8 *)(a3 + 97), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
    sub_21697C414(&v49);
    sub_216BBEEA4(&v48);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v80);
  }
  else
  {
    *(void *)&long long v57 = "pcp/primIndex.cpp";
    *((void *)&v57 + 1) = "PcpComputePrimIndex";
    uint64_t v58 = 5132;
    uint64_t v59 = "void pxrInternal__aapl__pxrReserved__::PcpComputePrimIndex(const SdfPath &, const PcpLayerStackPtr &, const Pc"
          "pPrimIndexInputs &, PcpPrimIndexOutputs *, ArResolver *)";
    v60[0] = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Path <%s> must be an absolute path to a prim, a prim variant-selection, or the pseudo-root.", Text);
  }
  while (v52--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v51);
}

void sub_216C1DB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  char v6 = *(void **)(v4 - 200);
  if (v6)
  {
    *(void *)(v4 - 192) = v6;
    operator delete(v6);
  }
  sub_216BC9108((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v4 - 152));
  sub_21684E6B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C1DC2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a9)
{
  uint64_t v504 = *MEMORY[0x263EF8340];
  uint64_t v16 = a9;
  if (a7) {
    uint64_t v16 = *(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)(a7 + 48);
  }
  v460 = 0;
  v461 = 0;
  if (sub_216BBBDFC(2))
  {
    v460 = a9;
    v461 = v16;
    pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PushIndex(&v460, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)a1);
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8))
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8))
     || (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)) & 1) != 0))
  {
    goto LABEL_8;
  }
  v489.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/primIndex.cpp";
  v489.__r_.__value_.__l.__size_ = (std::string::size_type)"Pcp_BuildPrimIndex";
  v489.__r_.__value_.__r.__words[2] = 4998;
  v490 = "void pxrInternal__aapl__pxrReserved__::Pcp_BuildPrimIndex(const PcpLayerStackSite &, const PcpLayerStackSite &,"
         " int, BOOL, BOOL, BOOL, PcpPrimIndex_StackFrame *, const PcpPrimIndexInputs &, PcpPrimIndexOutputs *)";
  LOBYTE(v491) = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
  int v56 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s", v54, v55, Text);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v489, "site.path.IsAbsolutePath() && (site.path.IsAbsoluteRootOrPrimPath() || site.path.IsPrimVariantSelectionPath())", v56);
  if (result)
  {
LABEL_8:
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)*(unsigned __int8 *)(a8 + 97), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v489);
      uint64_t v26 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a9;
      *(void *)a9 = v489.__r_.__value_.__r.__words[0];
      sub_2168BD80C((uint64_t *)&v489);
      sub_2168BD378((int)a9, v26);
      sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v489);
      unint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)a9);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v27);
      v489.__r_.__value_.__r.__words[0] = v28;
      v489.__r_.__value_.__l.__size_ = v29;
      LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v489);
      Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v489);
      char HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v489, HasPrimSpecs);
      goto LABEL_665;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)a1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)*(unsigned __int8 *)(a8 + 97), (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v489);
      uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a9;
      *(void *)a9 = v489.__r_.__value_.__r.__words[0];
      sub_2168BD80C((uint64_t *)&v489);
      sub_2168BD378((int)a9, v18);
      sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v489);
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)a9);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v19);
      v489.__r_.__value_.__r.__words[0] = v20;
      v489.__r_.__value_.__l.__size_ = v21;
      char v22 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v489);
      uint64_t v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v489);
      char v24 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(v22, v23);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v489, v24);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v489, a6 ^ 1, v25);
LABEL_41:
      v457 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2;
      sub_2168BD80C((uint64_t *)&v457);
      sub_216981010(&v458, (_DWORD *)(a2 + 8));
      sub_21698105C(&v459, (_DWORD *)(a2 + 12));
      sub_216C23160((uint64_t)&v489, a8, (uint64_t)a9, (uint64_t)&v457, a3, a7, a4, a5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v459);
      sub_21697C414(&v458);
      sub_216BBEEA4(&v457);
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
      __s1[0] = v67;
      __s1[1] = v68;
      sub_216C235E4((uint64_t)&v489, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1, 0, 0, 0, 0, *((unsigned __int8 *)v490 + 97));
      while (1)
      {
        *(_OWORD *)v452 = 0x11uLL;
        *(void *)&v452[16] = -1;
        uint64_t v454 = 0;
        long long v453 = 0uLL;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v455);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v456);
        long long v69 = v493;
        uint64_t v70 = v494;
        if (v493 != v494)
        {
          if (v494 - v493 >= 57)
          {
            long long v71 = *(_OWORD *)v493;
            *(void *)v463 = *((void *)v493 + 2);
            *(_OWORD *)__s1 = v71;
            uint64_t v72 = *((void *)v493 + 5);
            *(_OWORD *)&v463[8] = *(_OWORD *)(v493 + 24);
            uint64_t v464 = v72;
            *((void *)v493 + 4) = 0;
            *((void *)v69 + 5) = 0;
            *((void *)v69 + 3) = 0;
            v465[0] = *((_DWORD *)v69 + 12);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v69 + 12);
            v465[1] = *((_DWORD *)v69 + 13);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v69 + 13);
            uint64_t v74 = 0;
            uint64_t v75 = 0x6DB6DB6DB6DB6DB7 * ((v70 - v69) >> 3);
            v76 = v69;
            do
            {
              uint64_t v77 = (uint64_t)&v76[7 * v74 + 7];
              uint64_t v78 = 2 * v74;
              uint64_t v74 = (2 * v74) | 1;
              uint64_t v79 = v78 + 2;
              if (v78 + 2 < v75 && sub_216C24CF8((int *)v77, v77 + 56, v73))
              {
                v77 += 56;
                uint64_t v74 = v79;
              }
              long long v80 = *(_OWORD *)v77;
              v76[2] = *(void *)(v77 + 16);
              *(_OWORD *)v76 = v80;
              uint64_t v81 = (void **)(v76 + 3);
              if (*((char *)v76 + 47) < 0) {
                operator delete(*v81);
              }
              long long v82 = *(_OWORD *)(v77 + 24);
              v76[5] = *(void *)(v77 + 40);
              *(_OWORD *)uint64_t v81 = v82;
              *(unsigned char *)(v77 + 47) = 0;
              *(unsigned char *)(v77 + 24) = 0;
              sub_21697DE94((int *)v76 + 12, (int *)(v77 + 48));
              sub_21697DEEC((int *)v76 + 13, (int *)(v77 + 52));
              v76 = (void *)v77;
            }
            while (v74 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
            v83 = (void **)(v77 + 24);
            uint64_t v84 = (long long *)(v70 - 56);
            if ((const char *)v77 == v70 - 56)
            {
              long long v90 = *(_OWORD *)__s1;
              *(void *)(v77 + 16) = *(void *)v463;
              *(_OWORD *)uint64_t v77 = v90;
              if (*(char *)(v77 + 47) < 0) {
                operator delete(*v83);
              }
              long long v91 = *(_OWORD *)&v463[8];
              *(void *)(v77 + 4sub_216C01044((uint64_t *)this, 0) = v464;
              *(_OWORD *)v83 = v91;
              HIBYTE(v464) = 0;
              v463[8] = 0;
              sub_21697DE94((int *)(v77 + 48), v465);
              sub_21697DEEC((int *)(v77 + 52), &v465[1]);
            }
            else
            {
              long long v85 = *v84;
              *(void *)(v77 + 16) = *((void *)v70 - 5);
              *(_OWORD *)uint64_t v77 = v85;
              if (*(char *)(v77 + 47) < 0) {
                operator delete(*v83);
              }
              char v86 = (void **)(v70 - 32);
              long long v87 = *((_OWORD *)v70 - 2);
              *(void *)(v77 + 4sub_216C01044((uint64_t *)this, 0) = *((void *)v70 - 2);
              *(_OWORD *)v83 = v87;
              *((unsigned char *)v70 - 9) = 0;
              *((unsigned char *)v70 - 32) = 0;
              sub_21697DE94((int *)(v77 + 48), (int *)v70 - 2);
              sub_21697DEEC((int *)(v77 + 52), (int *)v70 - 1);
              uint64_t v88 = *(void *)v463;
              *uint64_t v84 = *(_OWORD *)__s1;
              *((void *)v70 - 5) = v88;
              if (*(v70 - 9) < 0) {
                operator delete(*v86);
              }
              long long v89 = *(_OWORD *)&v463[8];
              *((void *)v70 - 2) = v464;
              *(_OWORD *)char v86 = v89;
              HIBYTE(v464) = 0;
              v463[8] = 0;
              sub_21697DE94((int *)v70 - 2, v465);
              sub_21697DEEC((int *)v70 - 1, &v465[1]);
              sub_216C24AFC((uint64_t)v69, v77 + 56, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(0x6DB6DB6DB6DB6DB7* ((v77 + 56 - (uint64_t)v69) >> 3)));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v465[1]);
            sub_21697C414(v465);
            if (SHIBYTE(v464) < 0) {
              operator delete(*(void **)&v463[8]);
            }
            uint64_t v70 = v494;
          }
          long long v92 = *(_OWORD *)(v70 - 56);
          *(void *)&v452[16] = *((void *)v70 - 5);
          *(_OWORD *)v452 = v92;
          if (SHIBYTE(v454) < 0) {
            operator delete((void *)v453);
          }
          long long v93 = *((_OWORD *)v70 - 2);
          uint64_t v454 = *((void *)v70 - 2);
          long long v453 = v93;
          *((unsigned char *)v70 - 9) = 0;
          *((unsigned char *)v70 - 32) = 0;
          sub_21697DE94(&v455, (int *)v70 - 2);
          sub_21697DEEC(v456, (int *)v70 - 1);
          uint64_t v94 = (char *)(v494 - 56);
          sub_216C23588((uint64_t)(v494 - 56));
          v494 = v94;
          int v95 = *(_DWORD *)v452;
          if (*(_DWORD *)v452 != 11 && *(_DWORD *)v452 != 5) {
            goto LABEL_78;
          }
          unint64_t v96 = sub_216C24630((unsigned int *)v452);
          unint64_t v97 = (unint64_t)__p;
          uint64_t v98 = v497;
          unint64_t v99 = (unint64_t)__p & v96;
          if ((*(__int16 *)(v497 + (((unint64_t)__p & v96) << 6) + 4) & 0x80000000) == 0)
          {
            LOWORD(v10sub_216C01044((uint64_t *)this, 0) = 0;
            while (!sub_216C246B8(v98 + (v99 << 6) + 8, (uint64_t)v452))
            {
              int v100 = (__int16)(v100 + 1);
              unint64_t v99 = (v99 + 1) & v97;
              if (v100 > *(__int16 *)(v98 + (v99 << 6) + 4)) {
                goto LABEL_77;
              }
            }
            if (v99 != v498)
            {
              uint64_t v101 = v98 + (v99 << 6);
              sub_216C23530(v101);
              --v499;
              uint64_t v102 = v497;
              uint64_t v103 = (v101 - v497) >> 6;
              unint64_t v104 = (v103 + 1) & (unint64_t)__p;
              int v105 = *(__int16 *)(v497 + (v104 << 6) + 4);
              if (v105 >= 1)
              {
                do
                {
                  v106 = (int *)(v102 + (v104 << 6));
                  int v107 = *v106;
                  uint64_t v108 = *((void *)v106 + 3);
                  __int16 v109 = v105 - 1;
                  uint64_t v110 = v102 + (v103 << 6);
                  *(_OWORD *)(v110 + 8) = *(_OWORD *)(v106 + 2);
                  *(void *)(v110 + 24) = v108;
                  uint64_t v111 = *((void *)v106 + 6);
                  *(_OWORD *)(v110 + 32) = *((_OWORD *)v106 + 2);
                  *(void *)(v110 + 48) = v111;
                  *((void *)v106 + 5) = 0;
                  *((void *)v106 + 6) = 0;
                  *((void *)v106 + 4) = 0;
                  sub_21697D878((_DWORD *)(v110 + 56), v106 + 14);
                  sub_21697D8B4((_DWORD *)(v110 + 60), v106 + 15);
                  *(_DWORD *)uint64_t v110 = v107;
                  *(_WORD *)(v110 + 4) = v109;
                  sub_216C23530(v497 + (v104 << 6));
                  uint64_t v102 = v497;
                  uint64_t v103 = v104;
                  unint64_t v104 = (unint64_t)__p & (v104 + 1);
                  int v105 = *(__int16 *)(v497 + (v104 << 6) + 4);
                }
                while (v105 > 0);
              }
              char v500 = 1;
            }
          }
        }
LABEL_77:
        int v95 = *(_DWORD *)v452;
LABEL_78:
        int v112 = 1;
        switch(v95)
        {
          case 0:
            if (sub_216BBBDFC(2))
            {
              v355 = &v491;
              if (v492) {
                v355 = (uint64_t *)(v492 + 48);
              }
              uint64_t v356 = *v355;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v357);
              v360 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v360 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating relocations under %s", v358, v359, v360);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v471, v356, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              v471.__r_.__value_.__r.__words[0] = 0;
            }
            if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]) & 1) == 0
              && !pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], v113))
            {
              goto LABEL_370;
            }
            v114 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            v115 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v114);
            uint64_t IncrementalRelocatesTargetToSource = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesTargetToSource(v115);
            v117 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            uint64_t v118 = sub_21698EFF0(IncrementalRelocatesTargetToSource, v117);
            if ((void *)(IncrementalRelocatesTargetToSource + 8) == v118) {
              goto LABEL_370;
            }
            uint64_t v121 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v118 + 36);
            if (sub_216BBBDFC(2))
            {
              v410 = (pxrInternal__aapl__pxrReserved__ **)&v491;
              if (v492) {
                v410 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
              }
              v411 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v118 + 28);
              v412 = *v410;
              v413 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v411);
              v414 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v121);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v412, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"<%s> was relocated from source <%s>", v415, v413, v414);
            }
            *(_OWORD *)v465 = *(_OWORD *)&v452[8];
            uint64_t v122 = **(void **)(*(void *)&v452[8] + 16);
            uint64_t v123 = (void *)*(unsigned __int16 *)(v122 + 48 * *(void *)&v452[16] + 28);
            __s1[0] = *(void **)&v452[8];
            __s1[1] = v123;
            *(void *)v463 = v122;
            *(void *)&v463[8] = *(void *)&v452[8];
            *(void *)&v463[16] = 0xFFFFLL;
            uint64_t v464 = v122;
            while (1)
            {
              if (__s1[1] == *(void **)&v463[16] && __s1[0] == *(void **)&v463[8])
              {
                pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v485);
                uint64_t v228 = *(void *)&v452[8];
                uint64_t v229 = *(void *)&v452[16];
                uint64_t v230 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
                pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(__s1, v230, v121);
                *(void *)&long long v502 = sub_216C25080((uint64_t)&v489, 3u, v228, v229, &v452[8], __s1, (uint64_t *)&v485, 0, 256);
                *((void *)&v502 + 1) = v231;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__s1[1] + 1);
                sub_21697C414(&__s1[1]);
                sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__s1);
                if ((void)v502 && *((void *)&v502 + 1) != -1)
                {
                  memset(&v482, 0, sizeof(v482));
                  BOOL v233 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
                  uint64_t v234 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
                  pxrInternal__aapl__pxrReserved__::PcpComposeSitePrimSites(v233, v234, (uint64_t *)&v482);
                  for (long long i = *(_OWORD *)&v482.__r_.__value_.__l.__data_; (void)i != *((void *)&i + 1); sub_216C25190(&i))
                  {
                    pxrInternal__aapl__pxrReserved__::PcpErrorOpinionAtRelocationSource::New(&v487);
                    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v452[8]);
                    v475 = v235;
                    v476[0] = v236;
                    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v475, (uint64_t)&v478);
                    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__s1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v478);
                    uint64_t v237 = v487;
                    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v487 + 16, (uint64_t)__s1);
                    sub_21697DE94((int *)(v237 + 96), &v466);
                    sub_21697DEEC((int *)(v237 + 100), &v467);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v467);
                    sub_21697C414(&v466);
                    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v465[2]);
                    uint64_t OriginNode = &v463[16];
                    sub_216787968((void ***)&OriginNode);
                    uint64_t v238 = *(void *)&v463[8];
                    if (*(void *)&v463[8]
                      && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v463[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
                    {
                      (*(void (**)(uint64_t))(*(void *)v238 + 8))(v238);
                    }
                    v239 = __s1[1];
                    if (__s1[1]
                      && atomic_fetch_add_explicit((atomic_uint *volatile)__s1[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
                    {
                      (*(void (**)(void *))(*(void *)v239 + 8))(v239);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v479 + 1);
                    sub_21697C414(&v479);
                    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v478);
                    uint64_t v242 = sub_216C25114(&i, v240, v241);
                    uint64_t v243 = v487;
                    v244 = (atomic_uint **)(*v242 + 8);
                    *(void *)(v487 + 104) = *(void *)*v242;
                    sub_2168CD2FC((atomic_uint **)(v243 + 112), v244);
                    v247 = sub_216C25114(&i, v245, v246);
                    uint64_t v248 = *v247;
                    uint64_t v249 = v487;
                    sub_2169C487C((int *)(v487 + 120), (_DWORD *)(*v247 + 16));
                    sub_2169C48D4((int *)(v249 + 124), (_DWORD *)(v248 + 20));
                    *(_OWORD *)__s1 = v487;
                    if (*((void *)&v487 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v487 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    sub_216C27B4C((long long *)__s1, v491, (uint64_t *)(v491 + 40));
                    if (__s1[1]) {
                      sub_216784EC4((std::__shared_weak_count *)__s1[1]);
                    }
                    if (*((void *)&v487 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v487 + 1));
                    }
                  }
                  sub_216C25210(&v489, v502, *((char **)&v502 + 1));
                  __s1[0] = &v482;
                  sub_216C18318((void ***)__s1);
                }
                sub_216BD0624((atomic_uint **)&v485, v232);
LABEL_370:
                if (!v471.__r_.__value_.__r.__words[0]) {
                  goto LABEL_486;
                }
                goto LABEL_371;
              }
              uint64_t v124 = (char **)sub_216BC2828(__s1, v119, v120);
              int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v124);
              if (!ArcType) {
                goto LABEL_91;
              }
              if (ArcType == 2) {
                goto LABEL_93;
              }
              if (ArcType != 7)
              {
                sub_216C24FB4((uint64_t)&v489, (uint64_t)*v124, v124[1]);
                if (sub_216BBBDFC(2))
                {
                  long long v129 = &v491;
                  if (v492) {
                    long long v129 = (uint64_t *)(v492 + 48);
                  }
                  uint64_t v130 = *v129;
                  char v131 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v121);
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Elided subtree that will be superceded by relocation source <%s>", v132, v133, v131);
                  pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v130, (long long *)v124, &v482);
                  if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v482.__r_.__value_.__l.__data_);
                  }
                }
              }
              else
              {
LABEL_91:
                v482.__r_.__value_.__r.__words[0] = (std::string::size_type)"pcp/primIndex.cpp";
                v482.__r_.__value_.__l.__size_ = (std::string::size_type)"_EvalNodeRelocations";
                v482.__r_.__value_.__r.__words[2] = 2627;
                v483 = "void pxrInternal__aapl__pxrReserved__::_EvalNodeRelocations(const PcpNodeRef &, Pcp_PrimIndexer *)";
                char v484 = 0;
                unint64_t v128 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected child node encountered", v126, v127);
                pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v482, "false", v128);
              }
LABEL_93:
              sub_216BC28B8(__s1);
            }
          case 1:
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]) != 3
              || (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]) & 1) != 0)
            {
              goto LABEL_487;
            }
            if (sub_216BBBDFC(2))
            {
              v427 = &v491;
              if (v492) {
                v427 = (uint64_t *)(v492 + 48);
              }
              uint64_t v428 = *v427;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v429);
              v432 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v432 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating relocations implied by %s", v430, v431, v432);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v478, v428, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              v478 = 0;
            }
            *(void *)&long long v502 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            *((void *)&v502 + 1) = v189;
            if (!(void)v502) {
              goto LABEL_465;
            }
            if (v189 == -1) {
              goto LABEL_465;
            }
            *(void *)&long long i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
            *((void *)&i + 1) = v190;
            if (!(void)i || v190 == -1) {
              goto LABEL_465;
            }
            MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
            v192 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            std::string::size_type v195 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v193, v194);
            pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v195, v192, &v475);
            if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v475))
            {
              if (sub_216BBBDFC(2))
              {
                v433 = &v491;
                if (v492) {
                  v433 = (uint64_t *)(v492 + 48);
                }
                uint64_t v434 = *v433;
                pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v487);
                pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v487, v435);
                int v436 = SHIBYTE(v482.__r_.__value_.__r.__words[2]);
                std::string::size_type v437 = v482.__r_.__value_.__r.__words[0];
                v438 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v475);
                v441 = &v482;
                if (v436 < 0) {
                  v441 = (std::string *)v437;
                }
                pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Propagating relocate from %s to %s", v439, v440, v441, v438);
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&OriginNode, v434, &v452[8], __s1);
                if ((v463[7] & 0x80000000) != 0) {
                  operator delete(__s1[0]);
                }
                if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v482.__r_.__value_.__l.__data_);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v487 + 3);
                sub_21697C414((_DWORD *)&v487 + 2);
                sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v487);
              }
              else
              {
                uint64_t OriginNode = 0;
              }
              *(_OWORD *)v465 = i;
              uint64_t v198 = **(void **)(i + 16);
              uint64_t v199 = (void *)*(unsigned __int16 *)(v198 + 48 * *((void *)&i + 1) + 28);
              __s1[0] = (void *)i;
              __s1[1] = v199;
              *(void *)v463 = v198;
              *(void *)&v463[8] = i;
              *(void *)&v463[16] = 0xFFFFLL;
              uint64_t v464 = v198;
              while (__s1[1] != *(void **)&v463[16] || __s1[0] != *(void **)&v463[8])
              {
                std::string::size_type v200 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(__s1, v196, v197);
                v201 = (uint64_t **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v200);
                if (*v201 == v475 && pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v200) == 3)
                {
                  if (sub_216BBBDFC(2))
                  {
                    v444 = &v491;
                    if (v492) {
                      v444 = (uint64_t *)(v492 + 48);
                    }
                    uint64_t v445 = *v444;
                    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Relocate already exists -- skipping", v326, v327);
                    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v487, v445, &v452[8], &v482);
                    if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v482.__r_.__value_.__l.__data_);
                    }
                  }
                  else
                  {
                    *(void *)&long long v487 = 0;
                  }
                  sub_216C25308((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v487);
                  goto LABEL_462;
                }
                sub_216BC28B8(__s1);
              }
              long long v323 = i;
              uint64_t v324 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
              pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(__s1, v324, &v475);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v482);
              sub_216C25080((uint64_t)&v489, 3u, v323, *((uint64_t *)&v323 + 1), &v452[8], __s1, (uint64_t *)&v482, 0, 0);
              sub_216BD0624((atomic_uint **)&v482, v325);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__s1[1] + 1);
              sub_21697C414(&__s1[1]);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__s1);
LABEL_462:
              if (OriginNode) {
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&OriginNode);
              }
              goto LABEL_464;
            }
            if (sub_216BBBDFC(2))
            {
              v442 = &v491;
              if (v492) {
                v442 = (uint64_t *)(v492 + 48);
              }
              uint64_t v443 = *v442;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No implied site for relocation source -- skipping", v321, v322);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v482, v443, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (v482.__r_.__value_.__r.__words[0]) {
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v482);
              }
            }
LABEL_464:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v475 + 1);
            sub_21697C414(&v475);
LABEL_465:
            if (v478) {
LABEL_455:
            }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v478);
            goto LABEL_486;
          case 2:
            long long v487 = *(_OWORD *)&v452[8];
            if (sub_216BBBDFC(2))
            {
              v361 = &v491;
              if (v492) {
                v361 = (uint64_t *)(v492 + 48);
              }
              uint64_t v362 = *v361;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v487, (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v363);
              v366 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v366 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating references at %s", v364, v365, v366);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v475, v362, &v487, __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              v475 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v487))
            {
              memset(&v482, 0, sizeof(v482));
              long long v502 = 0uLL;
              uint64_t v503 = 0;
              *(_OWORD *)__s1 = 0u;
              *(_OWORD *)v463 = 0u;
              *(_DWORD *)&v463[16] = 1065353216;
              long long i = 0uLL;
              v481[0] = 0;
              v179 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v487);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v487);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(v179);
            }
            if (v475) {
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v475);
            }
            goto LABEL_486;
          case 3:
            if (sub_216BBBDFC(2))
            {
              v391 = &v491;
              if (v492) {
                v391 = (uint64_t *)(v492 + 48);
              }
              uint64_t v392 = *v391;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v393);
              long long v396 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v396 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating payload for %s", v394, v395, v396);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v478, v392, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              v478 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]))
            {
              memset(&v482, 0, sizeof(v482));
              long long v502 = 0uLL;
              uint64_t v503 = 0;
              *(_OWORD *)__s1 = 0u;
              *(_OWORD *)v463 = 0u;
              *(_DWORD *)&v463[16] = 1065353216;
              long long i = 0uLL;
              v481[0] = 0;
              v206 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(v206);
            }
            if (v478) {
              goto LABEL_455;
            }
            goto LABEL_486;
          case 4:
            long long v502 = *(_OWORD *)&v452[8];
            if (sub_216BBBDFC(2))
            {
              long long v397 = &v491;
              if (v492) {
                long long v397 = (uint64_t *)(v492 + 48);
              }
              uint64_t v398 = *v397;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502, (uint64_t)&i);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&i, v399);
              v402 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v402 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating inherits at %s", v400, v401, v402);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v487, v398, &v502, __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 3);
              sub_21697C414((_DWORD *)&i + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&i);
            }
            else
            {
              *(void *)&long long v487 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502))
            {
              __s1[0] = 0;
              __s1[1] = 0;
              *(void *)v463 = 0;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteInherits();
            }
            if ((void)v487) {
              goto LABEL_202;
            }
            goto LABEL_487;
          case 5:
            long long v502 = *(_OWORD *)&v452[8];
            if (sub_216BBBDFC(2))
            {
              v367 = &v491;
              if (v492) {
                v367 = (uint64_t *)(v492 + 48);
              }
              uint64_t v368 = *v367;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502, (uint64_t)&i);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&i, v369);
              v372 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v372 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating implied classes at %s", v370, v371, v372);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v487, v368, &v502, __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 3);
              sub_21697C414((_DWORD *)&i + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&i);
            }
            else
            {
              *(void *)&long long v487 = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502)
              && v180 != -1
              && !sub_216C2C738((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502)
              && sub_216C27AB4((uint64_t *)&v502, v181, v182))
            {
              uint64_t v183 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity(v183, v184, v185, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)__s1);
              uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
              sub_216C2C844(ParentNode, v187, v502, *((uint64_t *)&v502 + 1), (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)__s1, 1, (uint64_t)&v489);
              sub_216BD0624((atomic_uint **)__s1, v188);
            }
            if ((void)v487) {
LABEL_202:
            }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v487);
            goto LABEL_487;
          case 6:
            if (sub_216BBBDFC(2))
            {
              v379 = &v491;
              if (v492) {
                v379 = (uint64_t *)(v492 + 48);
              }
              uint64_t v380 = *v379;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v381);
              v384 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v384 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating specializes at %s", v382, v383, v384);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v380, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              *(void *)&long long i = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]))
            {
              __s1[0] = 0;
              __s1[1] = 0;
              *(void *)v463 = 0;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteSpecializes();
            }
            if ((void)i) {
              goto LABEL_208;
            }
            goto LABEL_487;
          case 7:
            if (sub_216BBBDFC(2))
            {
              v385 = &v491;
              if (v492) {
                v385 = (uint64_t *)(v492 + 48);
              }
              uint64_t v386 = *v385;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v387);
              v390 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v390 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating ancestral variant sets at %s", v388, v389, v390);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v386, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              *(void *)&long long i = 0;
            }
            uint64_t v202 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v202, &v482);
            while (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v482))
            {
              unint64_t SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              if (!SpecContributionRestrictedDepth
                || SpecContributionRestrictedDepth > pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v482))
              {
                if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v482) & 1) == 0)
                {
                  __s1[0] = "pcp/primIndex.cpp";
                  __s1[1] = "_EvalNodeAncestralVariantSets";
                  *(void *)v463 = 4278;
                  *(void *)&v463[8] = "void pxrInternal__aapl__pxrReserved__::_EvalNodeAncestralVariantSets(const PcpNo"
                                        "deRef &, Pcp_PrimIndexer *)";
                  v463[16] = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "path.IsPrimOrPrimVariantSelectionPath()", 0);
                }
                sub_216C2DB44((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v482, __s1);
              sub_21697DE94((int *)&v482, (int *)__s1);
              sub_21697DEEC((int *)v482.__r_.__value_.__r.__words + 1, (int *)__s1 + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__s1 + 1);
              sub_21697C414(__s1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v482.__r_.__value_.__r.__words + 1);
            sub_21697C414(&v482);
            if ((void)i) {
              goto LABEL_256;
            }
            goto LABEL_486;
          case 8:
            goto LABEL_132;
          case 9:
            goto LABEL_99;
          case 11:
            if (sub_216BBBDFC(2))
            {
              v349 = &v491;
              if (v492) {
                v349 = (uint64_t *)(v492 + 48);
              }
              uint64_t v350 = *v349;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v351);
              v354 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v354 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating implied specializes at %s", v352, v353, v354);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v471, v350, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              v471.__r_.__value_.__r.__words[0] = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8])
              && v138 != -1)
            {
              if (sub_216C2C738((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]))
              {
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]) != 6)
                {
                  __s1[0] = "pcp/primIndex.cpp";
                  __s1[1] = "_FindArcsToPropagateToOrigin";
                  *(void *)v463 = 3701;
                  *(void *)&v463[8] = "void pxrInternal__aapl__pxrReserved__::_FindArcsToPropagateToOrigin(const PcpNod"
                                        "eRef &, Pcp_PrimIndexer *)";
                  v463[16] = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "PcpIsSpecializeArc(node.GetArcType())", 0);
                }
                *(_OWORD *)__s1 = *(_OWORD *)&v452[8];
                *(void *)v463 = **(void **)(*(void *)&v452[8] + 16);
                __s1[1] = (void *)*(unsigned __int16 *)(*(void *)v463 + 48 * *(void *)&v452[16] + 28);
                *(_OWORD *)&v482.__r_.__value_.__l.__data_ = *(_OWORD *)&v452[8];
                v482.__r_.__value_.__r.__words[2] = **(void **)(*(void *)&v452[8] + 16);
                v482.__r_.__value_.__l.__size_ = 0xFFFFLL;
                sub_216C2D0B8((uint64_t)&v502, (uint64_t *)__s1, (uint64_t *)&v482);
                uint64_t v140 = (long long *)*((void *)&v502 + 1);
                uint64_t v139 = (long long *)v502;
                if ((void)v502 != *((void *)&v502 + 1))
                {
                  do
                  {
                    long long i = *v139;
                    if (sub_216BBBDFC(2))
                    {
                      v146 = (pxrInternal__aapl__pxrReserved__ **)&v491;
                      if (v492) {
                        v146 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
                      }
                      uint64_t v147 = *v146;
                      *(void *)&long long v487 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
                      *((void *)&v487 + 1) = v148;
                      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i, (uint64_t)&v478);
                      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)__s1, (pxrInternal__aapl__pxrReserved__ *)&v478, v149);
                      if (v463[7] >= 0) {
                        uint64_t v150 = __s1;
                      }
                      else {
                        uint64_t v150 = (void **)__s1[0];
                      }
                      uint64_t OriginNode = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
                      uint64_t v473 = v151;
                      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&OriginNode, (uint64_t)&v475);
                      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v475, v152);
                      uint64_t v154 = &v482;
                      if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v154 = (std::string *)v482.__r_.__value_.__r.__words[0];
                      }
                      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v147, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&i, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v487, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Propagating arcs under %s to specializes origin %s", v153, v150, v154);
                      if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v482.__r_.__value_.__l.__data_);
                      }
                      sub_216BC9108((uint64_t)&v475);
                      if ((v463[7] & 0x80000000) != 0) {
                        operator delete(__s1[0]);
                      }
                      sub_216BC9108((uint64_t)&v478);
                    }
                    uint64_t v141 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
                    uint64_t v143 = v142;
                    long long v144 = i;
                    v145 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                    sub_216C2D50C(v141, v143, v144, *((uint64_t *)&v144 + 1), v145, &v452[8], (uint64_t)&v489);
                    ++v139;
                  }
                  while (v139 != v140);
                  uint64_t v139 = (long long *)v502;
                }
                if (v139)
                {
                  *((void *)&v502 + 1) = v139;
                  operator delete(v139);
                }
              }
              else
              {
                sub_216C2D1EC(*(uint64_t *)&v452[8], *(uint64_t *)&v452[16], (uint64_t)&v489);
              }
            }
            if (v471.__r_.__value_.__r.__words[0]) {
LABEL_371:
            }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v471);
            goto LABEL_486;
          case 12:
            if (sub_216BBBDFC(2))
            {
              v373 = &v491;
              if (v492) {
                v373 = (uint64_t *)(v492 + 48);
              }
              uint64_t v374 = *v373;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v502);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v482, (pxrInternal__aapl__pxrReserved__ *)&v502, v375);
              uint64_t v378 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v378 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating variant sets at %s", v376, v377, v378);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v374, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v502 + 3);
              sub_21697C414((_DWORD *)&v502 + 2);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v502);
            }
            else
            {
              *(void *)&long long i = 0;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]))
            {
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              sub_216C2DB44((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            }
            if ((void)i) {
LABEL_208:
            }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&i);
            goto LABEL_487;
          case 13:
            int v112 = 0;
LABEL_132:
            uint64_t v155 = *(unsigned int *)&v452[4];
            if (sub_216BBBDFC(2))
            {
              v338 = &v491;
              if (v492) {
                v338 = (uint64_t *)(v492 + 48);
              }
              uint64_t v339 = *v338;
              if (v454 >= 0) {
                v340 = &v453;
              }
              else {
                v340 = (long long *)v453;
              }
              uint64_t v341 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              sub_216C2DDEC(v341, (uint64_t)&v455, (uint64_t *)&v482);
              v344 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v344 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating authored selections for variant set %s at %s", v342, v343, v340, v344);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v477, v339, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              uint64_t v477 = 0;
            }
            unint64_t v156 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            if (v156
              && v156 <= pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v455))
            {
              goto LABEL_484;
            }
            v476[0] = 0;
            v476[1] = 0;
            v475 = (uint64_t *)v476;
            v157 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSetOptions(v157, &v455, (uint64_t)&v453, &v475);
            sub_216C2DE68((const void **)&v453, (uint64_t)&v475, *((void *)v490 + 1), (uint64_t)&OriginNode);
            uint64_t v158 = v474;
            if ((v474 & 0x80u) != 0) {
              uint64_t v158 = v473;
            }
            if (v158 && sub_216BBBDFC(2))
            {
              v403 = (pxrInternal__aapl__pxrReserved__ **)&v491;
              if (v492) {
                v403 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
              }
              v404 = *v403;
              v405 = &v453;
              if (v454 < 0) {
                v405 = (long long *)v453;
              }
              p_uint64_t OriginNode = &OriginNode;
              if ((v474 & 0x80u) != 0) {
                p_uint64_t OriginNode = OriginNode;
              }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v404, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found fallback {%s=%s}", v159, v405, p_OriginNode);
            }
            memset(&v471, 0, sizeof(v471));
            *(void *)&long long v470 = 0;
            *((void *)&v470 + 1) = -1;
            pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v455, &v468);
            if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v468))
            {
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "_ComposeVariantSelection";
              *(void *)v463 = 3959;
              *(void *)&v463[8] = "void pxrInternal__aapl__pxrReserved__::_ComposeVariantSelection(const PcpNodeRef &, "
                                    "const SdfPath &, Pcp_PrimIndexer *, const std::string &, std::string *, PcpNodeRef *)";
              v463[16] = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "!pathInNode.IsEmpty()", 0);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v468))
            {
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "_ComposeVariantSelection";
              *(void *)v463 = 3961;
              *(void *)&v463[8] = "void pxrInternal__aapl__pxrReserved__::_ComposeVariantSelection(const PcpNodeRef &, "
                                    "const SdfPath &, Pcp_PrimIndexer *, const std::string &, std::string *, PcpNodeRef *)";
              v463[16] = 0;
              v345 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v468);
              v348 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s", v346, v347, v345);
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "!pathInNode.ContainsPrimVariantSelection()", v348);
            }
            if (v492)
            {
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "_ComposeVariantSelection";
              *(void *)v463 = 3973;
              *(void *)&v463[8] = "void pxrInternal__aapl__pxrReserved__::_ComposeVariantSelection(const PcpNodeRef &, "
                                    "const SdfPath &, Pcp_PrimIndexer *, const std::string &, std::string *, PcpNodeRef *)";
              v463[16] = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "!indexer->previousFrame", 0);
            }
            pxrInternal__aapl__pxrReserved__::Pcp_TranslatePathFromNodeToRootOrClosestNode((pxrInternal__aapl__pxrReserved__ *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v468, (uint64_t)&v478);
            uint64_t v160 = (void **)sub_216C2E398((uint64_t)&v489, &v479, &v478);
            sub_216C2EB34(v160);
            long long v161 = *v160;
            std::string::size_type k = (std::string::size_type)v160[1];
            unint64_t v163 = (const char *)**((void **)*v160 + 2);
            v482.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
            v482.__r_.__value_.__l.__size_ = (std::string::size_type)v161;
            v482.__r_.__value_.__r.__words[2] = k;
            v483 = v163;
            char v484 = 0;
            sub_216C2E47C((uint64_t)v160, (uint64_t)&v502);
            while (2)
            {
              if (v160 != (void **)v502 || k != v503)
              {
                std::string::size_type size = v482.__r_.__value_.__l.__size_;
                goto LABEL_153;
              }
              std::string::size_type size = v482.__r_.__value_.__l.__size_;
              if (v482.__r_.__value_.__l.__size_ == *((void *)&v502 + 1))
              {
                unint64_t v207 = (void **)sub_216C2E398((uint64_t)&v489, &v479, &v478);
                sub_216C2EB34(v207);
                v208 = *v207;
                std::string::size_type v209 = (std::string::size_type)v207[1];
                uint64_t v210 = (const char *)**((void **)*v207 + 2);
                v482.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
                v482.__r_.__value_.__l.__size_ = (std::string::size_type)v208;
                v482.__r_.__value_.__r.__words[2] = v209;
                v483 = v210;
                char v484 = 0;
                sub_216C2E47C((uint64_t)v207, (uint64_t)&v502);
                while (1)
                {
                  BOOL v211 = v207 == (void **)v502 && v209 == v503;
                  if (v211 && v482.__r_.__value_.__l.__size_ == *((void *)&v502 + 1)) {
                    goto LABEL_333;
                  }
                  sub_216C2F550((uint64_t *)&v482, (uint64_t)&i);
                  long long v212 = (int *)v481[1];
                  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v481)) {
                    break;
                  }
                  unint64_t v213 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                  if (v213
                    && v213 <= pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)v481))
                  {
                    goto LABEL_274;
                  }
                  int v214 = v212[2];
                  if (v214 == 2)
                  {
                    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i) == 2)
                    {
                      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i, (int *)__s1);
                      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)__s1, (int *)&v487);
                      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v485, (pxrInternal__aapl__pxrReserved__::SdfPath *)v481, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v487, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__s1, 1);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v487 + 1);
                      sub_21697C414(&v487);
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__s1 + 1);
                      sub_21697C414(__s1);
                    }
                    else
                    {
                      sub_216981010(&v485, v481);
                      sub_21698105C((_DWORD *)&v485 + 1, (_DWORD *)v481 + 1);
                    }
                    sub_21697DE94(v212, (int *)&v485);
                    sub_21697DEEC(v212 + 1, (int *)&v485 + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485 + 1);
                    sub_21697C414(&v485);
                    uint64_t v215 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                    int v214 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasVariantSelections(v215, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v212) ^ 1;
                    v212[2] = v214;
                  }
                  if (v214 == 1) {
                    goto LABEL_274;
                  }
                  *(_OWORD *)__s1 = 0u;
                  *(_OWORD *)v463 = 0u;
                  *(_DWORD *)&v463[16] = 1065353216;
                  long long v487 = 0uLL;
                  uint64_t v488 = 0;
                  v219 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                  int v220 = pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSelection(v219, (pxrInternal__aapl__pxrReserved__::SdfPath *)v212, (const void **)&v453, (uint64_t)&v471, (uint64_t)__s1, (uint64_t)&v487);
                  if (*(void *)&v463[8])
                  {
                    uint64_t v221 = v491;
                    uint64_t v222 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
                    sub_216BC11A8((uint64_t *)&v485, v222);
                    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::AddDependencies((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)(v221 + 80), &v485, (uint64_t *)__s1);
                    uint64_t v223 = v486;
                    if (v486)
                    {
                      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v486 + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v223 + 8))(v223); {
                    }
                      }
                  }
                  v225 = (long long *)*((void *)&v487 + 1);
                  for (uint64_t j = (long long *)v487; j != v225; ++j)
                    sub_216C27B4C(j, v491, (uint64_t *)(v491 + 40));
                  v485 = (void **)&v487;
                  sub_216787968(&v485);
                  sub_216850298((uint64_t)__s1);
                  if (v220)
                  {
                    long long v470 = i;
                    int v216 = 1;
                  }
                  else
                  {
                    int v216 = 0;
                  }
LABEL_275:
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v481 + 1);
                  sub_21697C414(v481);
                  if ((v216 | 4) != 4)
                  {
                    if (!sub_216BBBDFC(2)) {
                      goto LABEL_333;
                    }
                    std::string::size_type v250 = (pxrInternal__aapl__pxrReserved__ **)&v491;
                    if (v492) {
                      std::string::size_type v250 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
                    }
                    v251 = *v250;
                    if (v454 >= 0) {
                      uint64_t v252 = &v453;
                    }
                    else {
                      uint64_t v252 = (long long *)v453;
                    }
                    if ((v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v253 = &v471;
                    }
                    else {
                      v253 = (std::string *)v471.__r_.__value_.__r.__words[0];
                    }
                    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470, (uint64_t)&v482);
                    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)__s1, (pxrInternal__aapl__pxrReserved__ *)&v482, v254);
                    v256 = __s1;
                    if (v463[7] < 0) {
                      v256 = (void **)__s1[0];
                    }
                    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v251, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found authored variant selection {%s=%s} at %s", v255, v252, v253, v256);
                    goto LABEL_621;
                  }
                  if (v484)
                  {
                    std::string::size_type v217 = v482.__r_.__value_.__r.__words[2];
                  }
                  else
                  {
                    std::string::size_type v217 = v482.__r_.__value_.__r.__words[2];
                    unsigned int v218 = *(unsigned __int16 *)&v483[48 * v482.__r_.__value_.__r.__words[2] + 28];
                    if (v218 != 0xFFFF) {
                      goto LABEL_283;
                    }
                  }
                  std::string::size_type v209 = 0xFFFFLL;
                  if (v217 == 0xFFFF) {
                    goto LABEL_284;
                  }
                  while (1)
                  {
                    unsigned int v218 = *(unsigned __int16 *)&v483[48 * v217 + 34];
                    if (v218 != 0xFFFF) {
                      break;
                    }
                    std::string::size_type v217 = *(unsigned __int16 *)&v483[48 * v217 + 24];
                    v482.__r_.__value_.__r.__words[2] = v217;
                    std::string::size_type v209 = 0xFFFFLL;
                    if (v217 == 0xFFFF) {
                      goto LABEL_284;
                    }
                  }
LABEL_283:
                  std::string::size_type v209 = v218;
                  v482.__r_.__value_.__r.__words[2] = v218;
LABEL_284:
                  char v484 = 0;
                  unint64_t v207 = (void **)v482.__r_.__value_.__r.__words[0];
                }
                char v484 = 1;
LABEL_274:
                int v216 = 4;
                goto LABEL_275;
              }
LABEL_153:
              *(void *)&long long i = size;
              *((void *)&i + 1) = k;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i) != 2) {
                goto LABEL_180;
              }
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i, (int *)&v487);
              pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v487, (uint64_t)__s1);
              uint64_t v166 = v463[7];
              if (v463[7] >= 0) {
                uint64_t v167 = (void *)v463[7];
              }
              else {
                uint64_t v167 = __s1[1];
              }
              uint64_t v168 = (void *)HIBYTE(v454);
              if (v454 < 0) {
                uint64_t v168 = (void *)*((void *)&v453 + 1);
              }
              if (v167 != v168) {
                goto LABEL_173;
              }
              if (v454 >= 0) {
                unint64_t v169 = &v453;
              }
              else {
                unint64_t v169 = (long long *)v453;
              }
              if ((v463[7] & 0x80) != 0)
              {
                if (memcmp(__s1[0], v169, (size_t)__s1[1])) {
                  goto LABEL_173;
                }
              }
              else if (v463[7])
              {
                uint64_t v170 = __s1;
                while (*(unsigned __int8 *)v170 == *(unsigned __int8 *)v169)
                {
                  uint64_t v170 = (void **)((char *)v170 + 1);
                  unint64_t v169 = (long long *)((char *)v169 + 1);
                  if (!--v166) {
                    goto LABEL_170;
                  }
                }
LABEL_173:
                int v176 = 0;
                char v175 = 1;
                goto LABEL_174;
              }
LABEL_170:
              v171 = (_DWORD *)sub_216C2F2C0((uint64_t)v482.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v482.__r_.__value_.__r.__words[1], 1);
              if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v171))
              {
                char v175 = 0;
                int v176 = 1;
                char v484 = 1;
                goto LABEL_174;
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v487, &v485);
              uint64_t v172 = (void ***)sub_216C2F2C0((uint64_t)v482.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v482.__r_.__value_.__r.__words[1], 1);
              v173 = v485;
              uint64_t v174 = *v172;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v485 + 1);
              sub_21697C414(&v485);
              if (v173 != v174) {
                goto LABEL_173;
              }
              std::string::operator=(&v471, (const std::string *)&v463[8]);
              char v175 = 0;
              int v176 = 0;
              long long v470 = i;
LABEL_174:
              if (SHIBYTE(v464) < 0) {
                operator delete(*(void **)&v463[8]);
              }
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v487 + 1);
              sub_21697C414(&v487);
              if ((v175 & 1) != 0 || v176)
              {
LABEL_180:
                if (v484)
                {
                  std::string::size_type v177 = v482.__r_.__value_.__r.__words[2];
                  goto LABEL_183;
                }
                std::string::size_type v177 = v482.__r_.__value_.__r.__words[2];
                unsigned int v178 = *(unsigned __int16 *)&v483[48 * v482.__r_.__value_.__r.__words[2] + 28];
                if (v178 == 0xFFFF)
                {
LABEL_183:
                  for (std::string::size_type k = 0xFFFFLL; v177 != 0xFFFF; std::string::size_type k = 0xFFFFLL)
                  {
                    unsigned int v178 = *(unsigned __int16 *)&v483[48 * v177 + 34];
                    if (v178 != 0xFFFF) {
                      goto LABEL_187;
                    }
                    std::string::size_type v177 = *(unsigned __int16 *)&v483[48 * v177 + 24];
                    v482.__r_.__value_.__r.__words[2] = v177;
                  }
                }
                else
                {
LABEL_187:
                  std::string::size_type k = v178;
                  v482.__r_.__value_.__r.__words[2] = v178;
                }
                char v484 = 0;
                uint64_t v160 = (void **)v482.__r_.__value_.__r.__words[0];
                continue;
              }
              break;
            }
            if (sub_216BBBDFC(2))
            {
              v416 = (pxrInternal__aapl__pxrReserved__ **)&v491;
              if (v492) {
                v416 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
              }
              v417 = *v416;
              if (v454 >= 0) {
                v418 = &v453;
              }
              else {
                v418 = (long long *)v453;
              }
              if ((v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v419 = &v471;
              }
              else {
                v419 = (std::string *)v471.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470, (uint64_t)&v482);
              pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)__s1, (pxrInternal__aapl__pxrReserved__ *)&v482, v420);
              v422 = __s1;
              if (v463[7] < 0) {
                v422 = (void **)__s1[0];
              }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v417, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found prior variant selection {%s=%s} at %s", v421, v418, v419, v422);
LABEL_621:
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              sub_216BC9108((uint64_t)&v482);
            }
LABEL_333:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v478 + 1);
            sub_21697C414(&v478);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v469);
            sub_21697C414(&v468);
            uint64_t v257 = v474;
            if ((v474 & 0x80u) != 0) {
              uint64_t v257 = v473;
            }
            if (!v257) {
              goto LABEL_382;
            }
            std::string::size_type v258 = HIBYTE(v471.__r_.__value_.__r.__words[2]);
            if ((v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v258 = v471.__r_.__value_.__l.__size_;
            }
            if (!v258) {
              goto LABEL_473;
            }
            if (SHIBYTE(v454) < 0)
            {
              if (*((void *)&v453 + 1) != 7) {
                goto LABEL_382;
              }
              v259 = (long long *)v453;
            }
            else
            {
              v259 = &v453;
              if (SHIBYTE(v454) != 7) {
                goto LABEL_382;
              }
            }
            int v284 = *(_DWORD *)v259;
            int v285 = *(_DWORD *)((char *)v259 + 3);
            if (v284 != 1851880563 || v285 != 1852400750) {
              goto LABEL_382;
            }
            v287 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::MENV30_ENABLE_NEW_DEFAULT_STANDIN_BEHAVIOR);
            if (!v287) {
              pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
            }
            if (*v287) {
              goto LABEL_382;
            }
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470) == 2)
            {
              v297 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470);
              if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v297))
              {
                v298 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(v298, (uint64_t)__s1);
                BOOL v299 = sub_21691B1C8((unsigned __int8 *)__s1, (unsigned __int8 *)&v453);
                if (SHIBYTE(v464) < 0) {
                  operator delete(*(void **)&v463[8]);
                }
                if ((v463[7] & 0x80000000) != 0) {
                  operator delete(__s1[0]);
                }
                if (v299) {
                  goto LABEL_382;
                }
              }
            }
            *(_OWORD *)__s1 = v470;
            if ((void)v470 && __s1[1] != (void *)-1)
            {
              do
              {
                if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1) == 5) {
                  goto LABEL_473;
                }
                __s1[0] = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1);
                __s1[1] = v300;
              }
              while (__s1[0] && v300 != (void *)-1);
            }
            v301 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)&v489);
            uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v301);
            v303 = *(atomic_uint **)(Identifier + 8);
            __s1[0] = *(void **)Identifier;
            __s1[1] = v303;
            if (v303) {
              atomic_fetch_add_explicit(v303 + 2, 1u, memory_order_relaxed);
            }
            uint64_t v304 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)&v489);
            *(_OWORD *)&v482.__r_.__value_.__l.__data_ = *(_OWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v304);
            while (1)
            {
              if (v482.__r_.__value_.__r.__words[0] == v482.__r_.__value_.__l.__size_
                || (v307 = (void *)sub_216BD9634((uint64_t *)&v482, v305, v306), sub_216ABA3A0((uint64_t *)__s1, v307)))
              {
                BOOL v328 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v470) != 0;
                goto LABEL_469;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91560, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_267B91560))
              {
                v319 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v319) {
                  v319 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                uint64_t v320 = *((void *)v319 + 57);
                qword_267B91558 = v320;
                if ((v320 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v320 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  qword_267B91558 &= 0xFFFFFFFFFFFFFFF8;
                }
                __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B91558, &dword_216758000);
                __cxa_guard_release(&qword_267B91560);
              }
              v310 = (uint64_t *)sub_216BD9634((uint64_t *)&v482, v308, v309);
              uint64_t v311 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v310);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v311, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v489.__r_.__value_.__r.__words[1], (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B91558, (pxrInternal__aapl__pxrReserved__::VtValue *)&v502);
              if (!sub_2169DBB2C((pxrInternal__aapl__pxrReserved__::VtValue *)&v502)) {
                goto LABEL_445;
              }
              uint64_t v312 = (BYTE8(v502) & 4) != 0
                   ? (*(uint64_t (**)(long long *))((*((void *)&v502 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v502)
                   : v502;
              uint64_t v313 = sub_21678C2D8(v312, (const void **)&v453);
              if (v312 + 8 == v313) {
                goto LABEL_445;
              }
              uint64_t v314 = *(unsigned __int8 *)(v313 + 79);
              if ((v314 & 0x80u) == 0) {
                uint64_t v315 = *(unsigned __int8 *)(v313 + 79);
              }
              else {
                uint64_t v315 = *(void *)(v313 + 64);
              }
              std::string::size_type v316 = HIBYTE(v471.__r_.__value_.__r.__words[2]);
              if ((v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v316 = v471.__r_.__value_.__l.__size_;
              }
              if (v315 != v316) {
                goto LABEL_445;
              }
              v317 = (const void **)(v313 + 56);
              v318 = (v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v471
                   : (std::string *)v471.__r_.__value_.__r.__words[0];
              if ((v314 & 0x80) != 0) {
                break;
              }
              if (!*(unsigned char *)(v313 + 79)) {
                goto LABEL_468;
              }
              while (*(unsigned __int8 *)v317 == v318->__r_.__value_.__s.__data_[0])
              {
                v317 = (const void **)((char *)v317 + 1);
                v318 = (std::string *)((char *)v318 + 1);
                if (!--v314) {
                  goto LABEL_468;
                }
              }
LABEL_445:
              sub_2168EE084((uint64_t)&v502);
              sub_216BD96B4(&v482);
            }
            if (memcmp(*v317, v318, *(void *)(v313 + 64))) {
              goto LABEL_445;
            }
LABEL_468:
            sub_2168EE084((uint64_t)&v502);
            BOOL v328 = 0;
LABEL_469:
            v329 = __s1[1];
            if (__s1[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)__s1[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(void *))(*(void *)v329 + 8))(v329);
            }
            if (v328)
            {
LABEL_473:
              if (sub_216BBBDFC(2))
              {
                v426 = (pxrInternal__aapl__pxrReserved__ **)&v491;
                if (v492) {
                  v426 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
                }
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v426, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Deferring to variant fallback", v330);
              }
              if (v112) {
                int v290 = 9;
              }
              else {
                int v290 = 14;
              }
LABEL_477:
              sub_216C2DF38((uint64_t)__s1, v290, &v452[8], &v455, (uint64_t)&v453, v155);
              sub_216C23F48((uint64_t)&v489, (uint64_t)__s1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v465[1]);
              sub_21697C414(v465);
              if (SHIBYTE(v464) < 0) {
                operator delete(*(void **)&v463[8]);
              }
              goto LABEL_479;
            }
LABEL_382:
            std::string::size_type v288 = HIBYTE(v471.__r_.__value_.__r.__words[2]);
            if ((v471.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v288 = v471.__r_.__value_.__l.__size_;
            }
            if (!v288)
            {
              if (sub_216BBBDFC(2))
              {
                v423 = (pxrInternal__aapl__pxrReserved__ **)&v491;
                if (v492) {
                  v423 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
                }
                v424 = *v423;
                v425 = &v453;
                if (v454 < 0) {
                  v425 = (long long *)v453;
                }
                pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v424, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"No variant selection found for set '%s'", v289, v425);
              }
              if (v112) {
                int v290 = 10;
              }
              else {
                int v290 = 15;
              }
              goto LABEL_477;
            }
            if (v112) {
              sub_216C2DFF8((uint64_t)&v489, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v455, (uint64_t)&v453, v155, (uint64_t)&v471);
            }
            else {
              sub_216C2E20C((uint64_t)&v489, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v453, v155, (uint64_t)&v471);
            }
LABEL_479:
            if (SHIBYTE(v471.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v471.__r_.__value_.__l.__data_);
            }
            if ((char)v474 < 0) {
              operator delete(OriginNode);
            }
            sub_21678A498((uint64_t)&v475, v476[0]);
LABEL_484:
            if (v477) {
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v477);
            }
LABEL_486:
            LOBYTE(v112) = 1;
LABEL_487:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v456);
            sub_21697C414(&v455);
            if (SHIBYTE(v454) < 0)
            {
              operator delete((void *)v453);
              if ((v112 & 1) == 0)
              {
LABEL_662:
                if (v501[40]) {
                  sub_216C2E52C((uint64_t)v501);
                }
                __s1[0] = v496;
                sub_216C23484((void ***)__s1);
                sub_216C23244((void **)&v493);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v489.__r_.__value_.__r.__words[1] + 1);
                sub_21697C414(&v489.__r_.__value_.__r.__words[1]);
                uint64_t result = (uint64_t)sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v489);
                goto LABEL_665;
              }
            }
            else if ((v112 & 1) == 0)
            {
              goto LABEL_662;
            }
            break;
          case 14:
            int v112 = 0;
LABEL_99:
            uint64_t v134 = *(unsigned int *)&v452[4];
            if (sub_216BBBDFC(2))
            {
              uint64_t v331 = &v491;
              if (v492) {
                uint64_t v331 = (uint64_t *)(v492 + 48);
              }
              uint64_t v332 = *v331;
              if (v454 >= 0) {
                v333 = &v453;
              }
              else {
                v333 = (long long *)v453;
              }
              uint64_t v334 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              sub_216C2DDEC(v334, (uint64_t)&v455, (uint64_t *)&v482);
              v337 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v337 = (std::string *)v482.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Evaluating fallback selections for variant set %s s at %s", v335, v336, v333, v337);
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&i, v332, &v452[8], __s1);
              if ((v463[7] & 0x80000000) != 0) {
                operator delete(__s1[0]);
              }
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v482.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              *(void *)&long long i = 0;
            }
            unint64_t v135 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            if (!v135
              || v135 > pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v455))
            {
              *(_OWORD *)&v482.__r_.__value_.__r.__words[1] = 0uLL;
              v482.__r_.__value_.__r.__words[0] = (std::string::size_type)&v482.__r_.__value_.__l.__size_;
              uint64_t v136 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              pxrInternal__aapl__pxrReserved__::PcpComposeSiteVariantSetOptions(v136, &v455, (uint64_t)&v453, (uint64_t **)&v482);
              sub_216C2DE68((const void **)&v453, (uint64_t)&v482, *((void *)v490 + 1), (uint64_t)&v502);
              uint64_t v137 = HIBYTE(v503);
              if (v503 < 0) {
                uint64_t v137 = *((void *)&v502 + 1);
              }
              if (v137)
              {
                if (v112) {
                  sub_216C2DFF8((uint64_t)&v489, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v455, (uint64_t)&v453, v134, (uint64_t)&v502);
                }
                else {
                  sub_216C2E20C((uint64_t)&v489, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (uint64_t)&v453, v134, (uint64_t)&v502);
                }
              }
              else
              {
                if (sub_216BBBDFC(2))
                {
                  v407 = (pxrInternal__aapl__pxrReserved__ **)&v491;
                  if (v492) {
                    v407 = (pxrInternal__aapl__pxrReserved__ **)(v492 + 48);
                  }
                  v408 = *v407;
                  v409 = &v453;
                  if (v454 < 0) {
                    v409 = (long long *)v453;
                  }
                  pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v408, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v452[8], (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"No variant fallback found for set '%s'", v226, v409);
                }
                if (v112) {
                  int v227 = 10;
                }
                else {
                  int v227 = 15;
                }
                sub_216C2DF38((uint64_t)__s1, v227, &v452[8], &v455, (uint64_t)&v453, v134);
                sub_216C23F48((uint64_t)&v489, (uint64_t)__s1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v465[1]);
                sub_21697C414(v465);
                if (SHIBYTE(v464) < 0) {
                  operator delete(*(void **)&v463[8]);
                }
              }
              if (SHIBYTE(v503) < 0) {
                operator delete((void *)v502);
              }
              sub_21678A498((uint64_t)&v482, (char *)v482.__r_.__value_.__l.__size_);
            }
            if ((void)i) {
LABEL_256:
            }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&i);
            goto LABEL_486;
          case 16:
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], (int *)&v475);
            if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8], v204))char v205 = sub_216C2F744((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]); {
            else
            }
              char v205 = sub_216C2F6A0((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
            if ((v205 & 1) == 0)
            {
              *(void *)&long long v502 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              *((void *)&v502 + 1) = v260;
              v261 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              v264 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v261, v262, v263);
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v264, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v475, &OriginNode);
              pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New(&i);
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v452[8]);
              *(void *)&long long v487 = v265;
              *((void *)&v487 + 1) = v266;
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v487, (uint64_t)&v482);
              pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__s1, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v482);
              uint64_t v267 = i;
              pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(i + 16, (uint64_t)__s1);
              sub_21697DE94((int *)(v267 + 96), &v466);
              sub_21697DEEC((int *)(v267 + 100), &v467);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v467);
              sub_21697C414(&v466);
              pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v465[2]);
              v478 = (void **)&v463[16];
              sub_216787968(&v478);
              uint64_t v268 = *(void *)&v463[8];
              if (*(void *)&v463[8]
                && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v463[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v268 + 8))(v268);
              }
              v269 = __s1[1];
              if (__s1[1]
                && atomic_fetch_add_explicit((atomic_uint *volatile)__s1[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*(void *)v269 + 8))(v269);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v482.__r_.__value_.__r.__words[1] + 1);
              sub_21697C414(&v482.__r_.__value_.__r.__words[1]);
              sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v482);
              v270 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
              sub_216BC11A8((uint64_t *)&v482, v270);
              pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(__s1, &v482, &OriginNode);
              uint64_t v271 = i;
              pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(i + 104, (uint64_t)__s1);
              sub_21697DE94((int *)(v271 + 184), &v466);
              sub_21697DEEC((int *)(v271 + 188), &v467);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v467);
              sub_21697C414(&v466);
              pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v465[2]);
              *(void *)&long long v487 = &v463[16];
              sub_216787968((void ***)&v487);
              uint64_t v272 = *(void *)&v463[8];
              if (*(void *)&v463[8]
                && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v463[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v272 + 8))(v272);
              }
              uint64_t v273 = __s1[1];
              if (__s1[1]
                && atomic_fetch_add_explicit((atomic_uint *volatile)__s1[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(void *))(*(void *)v273 + 8))(v273);
              }
              std::string::size_type v274 = v482.__r_.__value_.__l.__size_;
              if (v482.__r_.__value_.__l.__size_
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v482.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(std::string::size_type))(*(void *)v274 + 8))(v274);
              }
              v275 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              v276 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v275);
              uint64_t v277 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v276);
              uint64_t v278 = i;
              *(void *)(i + 208) = *(void *)v277;
              sub_2168CD2FC((atomic_uint **)(v278 + 216), (atomic_uint **)(v277 + 8));
              uint64_t v279 = i;
              sub_2169C487C((int *)(i + 224), &v475);
              sub_2169C48D4((int *)(v279 + 228), (_DWORD *)&v475 + 1);
              memset(&v482, 0, sizeof(v482));
              int v280 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              if (v280 == 4)
              {
                __s1[0] = 0;
                __s1[1] = 0;
                *(void *)v463 = 0;
                v291 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
                pxrInternal__aapl__pxrReserved__::PcpComposeSiteReferences(v291);
              }
              if (v280 == 5)
              {
                __s1[0] = 0;
                __s1[1] = 0;
                *(void *)v463 = 0;
                v283 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v502);
                pxrInternal__aapl__pxrReserved__::PcpComposeSitePayloads(v283);
              }
              __s1[0] = "pcp/primIndex.cpp";
              __s1[1] = "operator()";
              *(void *)v463 = 2471;
              *(void *)&v463[8] = "auto pxrInternal__aapl__pxrReserved__::_EvalUnresolvedPrimPathError(const PcpNodeRef"
                                    " &, Pcp_PrimIndexer *)::(anonymous class)::operator()() const";
              v463[16] = 0;
              v292 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected arc type", v281, v282);
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__s1, "false", v292);
              __s1[0] = &v482;
              sub_216C29988((void ***)__s1);
              uint64_t v293 = i;
              v294 = *(atomic_uint **)(i + 200);
              *(void *)(i + 192) = 0;
              *(void *)(v293 + 20sub_216C01044((uint64_t *)this, 0) = 0;
              if (v294 && atomic_fetch_add_explicit(v294 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v294 + 8))(v294);
              }
              int v295 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v452[8]);
              long long v296 = i;
              *(_DWORD *)(i + 232) = v295;
              *(_OWORD *)__s1 = v296;
              if (*((void *)&v296 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v296 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              sub_216C27B4C((long long *)__s1, v491, (uint64_t *)(v491 + 40));
              if (__s1[1]) {
                sub_216784EC4((std::__shared_weak_count *)__s1[1]);
              }
              if (*((void *)&i + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&i + 1));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&OriginNode + 1);
              sub_21697C414(&OriginNode);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v475 + 1);
            sub_21697C414(&v475);
            goto LABEL_486;
          case 17:
            LOBYTE(v112) = 0;
            goto LABEL_487;
          default:
            goto LABEL_487;
        }
      }
    }
    if (a7 || !a4) {
      goto LABEL_28;
    }
    pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStack(*(pxrInternal__aapl__pxrReserved__::PcpCache **)a8, (uint64_t *)__s1);
    if (sub_216ABA3A0((uint64_t *)__s1, (void *)a1))
    {
      pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(*(pxrInternal__aapl__pxrReserved__::PcpCache **)a8, (uint64_t)&v489);
      BOOL IsEquivalentTo = pxrInternal__aapl__pxrReserved__::PcpPrimIndexInputs::IsEquivalentTo((uint64_t)&v489, a8);
      if ((v496[15] & 0x80000000) != 0) {
        operator delete(__p);
      }
      sub_216ABC260(&v491);
    }
    else
    {
      BOOL IsEquivalentTo = 0;
    }
    uint64_t v35 = __s1[1];
    if (__s1[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__s1[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v35 + 8))(v35);
    }
    if (IsEquivalentTo)
    {
      unint64_t v36 = *(uint64_t **)(a8 + 64);
      if (!v36)
      {
        uint64_t v37 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)a8;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v17, &v489);
        unint64_t v36 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpCache::_ComputePrimIndexWithCompatibleInputs(v37, &v489, a8, (char *)a9 + 40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v489.__r_.__value_.__r.__words + 1);
        sub_21697C414(&v489);
      }
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::New(v36, &v489);
      uint64_t v38 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a9;
      *(void *)a9 = v489.__r_.__value_.__r.__words[0];
      sub_2168BD80C((uint64_t *)&v489);
      sub_2168BD378((int)a9, v38);
      sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v489);
      int IsInstanceable = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v36);
      if (sub_216BBBDFC(2))
      {
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
        __s1[0] = v57;
        __s1[1] = v58;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v17, v452);
        uint64_t v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v452);
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Retrieved index for <%s> from cache", v60, v61, v59);
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate((uint64_t)a9, (long long *)__s1, &v489);
        if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v489.__r_.__value_.__l.__data_);
        }
        sub_21697B754(v452);
        if ((IsInstanceable & 1) == 0) {
          goto LABEL_38;
        }
      }
      else if (!IsInstanceable)
      {
        goto LABEL_38;
      }
    }
    else
    {
LABEL_28:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), __s1);
      pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v489, a1, __s1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__s1 + 1);
      sub_21697C414(__s1);
      sub_216C1DC2C(&v489, &v489, (a3 + 1), a4, a5, 1, a7, a8, a9);
      BOOL v41 = pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexIsInstanceable(a9, v40);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v489.__r_.__value_.__r.__words[1] + 1);
      sub_21697C414(&v489.__r_.__value_.__r.__words[1]);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v489);
      if (!v41)
      {
LABEL_38:
        int v62 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)sub_216BCFCE4((uint64_t *)a9);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::AppendChildNameToAllSites(v62, v17);
        uint64_t v63 = sub_216BCFCE4((uint64_t *)a9);
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::SetHasPayloads(v63, 0);
        *((_DWORD *)a9 + 16) = 0;
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
        __s1[0] = v64;
        __s1[1] = v65;
        sub_216C22EE8((unint64_t)v64, (uint64_t)v65, a8, 1);
        if ((a6 & 1) == 0) {
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__s1, 1, v66);
        }
        if (sub_216BBBDFC(2))
        {
          uint64_t v446 = (uint64_t)a9;
          if (a7) {
            uint64_t v446 = *(void *)(a7 + 48);
          }
          Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v17);
          if (*((char *)Name + 23) >= 0) {
            uint64_t v450 = (uint64_t)Name;
          }
          else {
            uint64_t v450 = *Name;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Adjusted ancestral index for %s", v448, v449, v450);
          pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v446, (long long *)__s1, &v489);
          if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v489.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_41;
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a9);
    uint64_t v43 = (const char *)v42;
    std::string::size_type v45 = v44;
    v489.__r_.__value_.__r.__words[0] = v42;
    v489.__r_.__value_.__l.__size_ = v44;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v489, 1, v46);
    v493 = v43;
    v494 = (const char *)v45;
    std::string::size_type v49 = **((void **)v43 + 2);
    std::string::size_type v50 = *(unsigned __int16 *)(v49 + 48 * v45 + 28);
    v489.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    v489.__r_.__value_.__l.__size_ = v50;
    v489.__r_.__value_.__r.__words[2] = v49;
    v490 = v43;
    uint64_t v51 = 0xFFFFLL;
    uint64_t v491 = 0xFFFFLL;
    std::string::size_type v492 = v49;
    while (v50 != v51 || v489.__r_.__value_.__l.__data_ != v490)
    {
      int v52 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v489, v47, v48);
      sub_216C2306C(v52, (uint64_t)__s1, 0);
      sub_216BC28B8(&v489);
      std::string::size_type v50 = v489.__r_.__value_.__l.__size_;
      uint64_t v51 = v491;
    }
    goto LABEL_38;
  }
LABEL_665:
  if (v460) {
    return pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PopIndex((pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug *)&v460);
  }
  return result;
}

void sub_216C21930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  sub_21697B754(&a51);
  sub_216C22EAC((pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug *)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_216C224B0(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  *(void *)&long long v28 = a1;
  *((void *)&v28 + 1) = a2;
  *(void *)&long long v34 = a1;
  *((void *)&v34 + 1) = a2;
  uint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 48 * a2 + 28);
  *(void *)&long long v29 = a1;
  *((void *)&v29 + 1) = v7;
  uint64_t v30 = v6;
  uint64_t v31 = a1;
  uint64_t v8 = 0xFFFFLL;
  uint64_t v32 = 0xFFFFLL;
  uint64_t v33 = v6;
  while (v7 != v8 || (void)v29 != v31)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v29, a2, a3);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v9) != 6)
    {
      uint64_t v12 = sub_216BC2828(&v29, v10, v11);
      sub_216C224B0(*v12, v12[1], a3, a4);
    }
    sub_216BC28B8(&v29);
    uint64_t v7 = *((void *)&v29 + 1);
    uint64_t v8 = v32;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28)) {
    goto LABEL_8;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
  if ((result & 1) == 0)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28, v14);
    if (result)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
      if ((result & 1) == 0)
      {
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28) != 1
          || *(void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28) != *(void *)a3)
        {
          goto LABEL_20;
        }
        uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
        uint64_t v19 = v18;
        uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
        if (v19 == v21 && OriginNode == ParentNode)
        {
          long long v29 = v28;
        }
        else
        {
          *(void *)&long long v29 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28);
          *((void *)&v29 + 1) = v22;
        }
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29, &v35);
        char IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
        uint64_t result = (uint64_t)sub_21697C414(&v35);
        if (IsRootPrimPath)
        {
LABEL_20:
          long long v34 = v28;
          uint64_t v24 = **(void **)(v28 + 16);
          uint64_t v25 = *(unsigned __int16 *)(v24 + 48 * *((void *)&v28 + 1) + 28);
          *(void *)&long long v29 = v28;
          *((void *)&v29 + 1) = v25;
          uint64_t v30 = v24;
          uint64_t v31 = v28;
          uint64_t v26 = 0xFFFFLL;
          uint64_t v32 = 0xFFFFLL;
          uint64_t v33 = v24;
          while (v25 != v26 || (void)v29 != v31)
          {
            unint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v29, v15, v16);
            uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(v27);
            if (!result) {
              return result;
            }
            sub_216BC28B8(&v29);
            uint64_t v25 = *((void *)&v29 + 1);
            uint64_t v26 = v32;
          }
          if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28)
            || (uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28),
                (result & 1) == 0))
          {
LABEL_8:
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetCulled(&v28, 1);
            return (uint64_t)pxrInternal__aapl__pxrReserved__::Pcp_AddCulledDependency((pxrInternal__aapl__pxrReserved__ *)&v28, a4);
          }
        }
      }
    }
  }
  return result;
}

void sub_216C226D8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v1 + 4));
  sub_21697C414((_DWORD *)(v2 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimChildNames(uint64_t *a1, uint64_t **a2, uint64_t *a3)
{
  if (*a1)
  {
    sub_216C2299C((uint64_t)&v21, *a2, a2[1], 0);
    if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1))
    {
      uint64_t v6 = *a1;
      if (*a1) {
        LODWORD(v6) = (*(unsigned __int8 *)(sub_216BCFCE4(a1) + 56) >> 3) & 1;
      }
      uint64_t v23 = a1;
      char v24 = v6;
      uint64_t v25 = a2;
      uint64_t v26 = &v21;
      unint64_t v27 = a3;
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
      uint64_t v34 = v9;
      uint64_t v35 = v7;
      uint64_t v10 = **(void **)(v9 + 16);
      uint64_t v11 = *(unsigned __int16 *)(v10 + 48 * v7 + 30);
      long long v28 = (void **)v9;
      uint64_t v29 = v11;
      uint64_t v30 = v10;
      uint64_t v31 = (void **)v9;
      uint64_t v12 = 0xFFFFLL;
      uint64_t v32 = 0xFFFFLL;
      uint64_t v33 = v10;
      while (v11 != v12 || v28 != v31)
      {
        uint64_t v13 = sub_216BC9150(&v28, v7, v8);
        sub_216C2FAB4(v13, (uint64_t *)&v23, 0);
        sub_216BC91E0(&v28);
        uint64_t v11 = v29;
        uint64_t v12 = v32;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)a1);
      long long v28 = v14;
      uint64_t v29 = v15;
      if (*a1) {
        uint64_t v16 = (*(unsigned __int8 *)(sub_216BCFCE4(a1) + 56) >> 3) & 1;
      }
      else {
        uint64_t v16 = 0;
      }
      sub_216C22A1C((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v28, v16, (uint64_t *)a2, &v21, a3);
    }
    if (!a3[6]) {
      goto LABEL_32;
    }
    uint64_t v17 = *a2;
    uint64_t v18 = a2[1];
    if (*a2 == v18) {
      goto LABEL_30;
    }
    uint64_t v19 = a2[1];
    while (a3[4] + 16 * a3[5] == sub_216C303C8(a3, v17, bswap64(0x9E3779B97F4A7C55 * (*v17 & 0xFFFFFFFFFFFFFFF8))))
    {
      if (++v17 == v18) {
        goto LABEL_31;
      }
    }
    if (v17 == v18) {
      goto LABEL_31;
    }
    std::string::size_type v20 = v17 + 1;
    if (v17 + 1 == v18)
    {
LABEL_30:
      uint64_t v19 = v17;
    }
    else
    {
      uint64_t v19 = v17;
      do
      {
        if (a3[4] + 16 * a3[5] == sub_216C303C8(a3, v20, bswap64(0x9E3779B97F4A7C55 * (*v20 & 0xFFFFFFFFFFFFFFF8))))
        {
          if (v20 != v19)
          {
            if ((*v19 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *uint64_t v19 = *v20;
            uint64_t *v20 = 0;
          }
          ++v19;
        }
        ++v20;
      }
      while (v20 != v18);
    }
LABEL_31:
    sub_216AD0DE4((uint64_t)a2, v19, a2[1]);
LABEL_32:
    long long v28 = (void **)&v22;
    sub_216BDFE6C(&v28);
  }
}

void sub_216C22968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 - 88) = &a10;
  sub_216BDFE6C((void ***)(v10 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_216C2299C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7 = sub_216BDFC40(a1, a4, 0.0, 0.5);
  sub_216BF480C(v7, a2, a3);
  return a1;
}

void sub_216C22A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  sub_216BDFE6C(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C22A1C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) == 0)
  {
    uint64_t v13 = *((void *)a1 + 1);
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = v13;
    uint64_t v14 = **(void **)(v24 + 16);
    uint64_t v15 = *(unsigned __int16 *)(v14 + 48 * v13 + 30);
    uint64_t v18 = v24;
    uint64_t v19 = v15;
    uint64_t v20 = v14;
    uint64_t v21 = v24;
    uint64_t v16 = 0xFFFFLL;
    uint64_t v22 = 0xFFFFLL;
    uint64_t v23 = v14;
    while (v15 != v16 || v18 != v21)
    {
      uint64_t v17 = sub_216BC9150(&v18, v11, v12);
      sub_216C22A1C(v17, a2, a3, a4, a5);
      sub_216BC91E0(&v18);
      uint64_t v15 = v19;
      uint64_t v16 = v22;
    }
    return sub_216C2FBD8(a1, a2, a3, a4, a5);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::PcpPrimIndex::ComputePrimPropertyNames(pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a1, uint64_t **a2)
{
  if (*(void *)a1)
  {
    sub_216BDFC40((uint64_t)&v8, 0, 0.0, 0.5);
    sub_216BF480C((uint64_t)&v8, *a2, a2[1]);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(a1);
    v7[0] = v4;
    v7[1] = v5;
    if (*(void *)a1) {
      uint64_t v6 = (*(unsigned __int8 *)(sub_216BCFCE4((uint64_t *)a1) + 56) >> 3) & 1;
    }
    else {
      uint64_t v6 = 0;
    }
    sub_216C22BCC((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7, v6, (void **)a2, &v8);
    v7[0] = (void **)&v9;
    sub_216BDFE6C(v7);
  }
}

void sub_216C22BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a10 = (void **)&a13;
  sub_216BDFE6C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216C22BCC(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, void **a3, int *a4)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if ((result & 1) == 0)
  {
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = v11;
    uint64_t v12 = **(void **)(v31 + 16);
    uint64_t v13 = *(unsigned __int16 *)(v12 + 48 * v11 + 30);
    uint64_t v25 = v31;
    uint64_t v26 = v13;
    uint64_t v27 = v12;
    uint64_t v28 = v31;
    uint64_t v14 = 0xFFFFLL;
    uint64_t v29 = 0xFFFFLL;
    uint64_t v30 = v12;
    while (v13 != v14 || v25 != v28)
    {
      uint64_t v15 = sub_216BC9150(&v25, v9, v10);
      sub_216C22BCC(v15, a2, a3, a4);
      sub_216BC91E0(&v25);
      uint64_t v13 = v26;
      uint64_t v14 = v29;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a1);
    if (result)
    {
      LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
      uint64_t Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v17);
      Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a1);
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v20) {
        uint64_t v20 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      uint64_t v21 = (char *)v20 + 40;
      if (a2)
      {
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v23)
        {
          uint64_t v24 = v21;
          uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          uint64_t v21 = v24;
        }
        uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v23 + 272);
      }
      return (uint64_t)pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, Path, v21, a3, a4, v22);
    }
  }
  return result;
}

_WORD *sub_216C22D24(_WORD *a1, unint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a2 >= 0x10000)
  {
    uint64_t v6 = "pcp/types.h";
    uint64_t v7 = "Pcp_CompressedSdSite";
    uint64_t v8 = 181;
    uint64_t v9 = "pxrInternal__aapl__pxrReserved__::Pcp_CompressedSdSite::Pcp_CompressedSdSite(size_t, size_t)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "nodeIndex_ < (size_t(1) << 16)", 0);
  }
  if (a3 >= 0x10000)
  {
    uint64_t v6 = "pcp/types.h";
    uint64_t v7 = "Pcp_CompressedSdSite";
    uint64_t v8 = 182;
    uint64_t v9 = "pxrInternal__aapl__pxrReserved__::Pcp_CompressedSdSite::Pcp_CompressedSdSite(size_t, size_t)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v6, "layerIndex_ < (size_t(1) << 16)", 0);
  }
  return a1;
}

uint64_t sub_216C22DEC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216C22E34(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192)) {
    sub_216C2E52C(a1 + 152);
  }
  uint64_t v3 = (void **)(a1 + 80);
  sub_216C23484(&v3);
  sub_216C23244((void **)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  return sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1);
}

pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug *sub_216C22EAC(pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug *this)
{
  if (*(void *)this) {
    pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexingDebug::_PopIndex(this);
  }
  return this;
}

uint64_t sub_216C22EE8(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
  if (result)
  {
    LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
    Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
    char HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, Path);
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v32, HasPrimSpecs);
  }
  if (!*(unsigned char *)(a3 + 97))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
    if ((result & 1) == 0)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
      if (result)
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32))
        {
          uint64_t v12 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          int v14 = pxrInternal__aapl__pxrReserved__::PcpComposeSitePermission(v12, v13);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission(&v32, v14, v15);
        }
        uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
        if ((result & 1) == 0)
        {
          uint64_t v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          uint64_t v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
          int HasSymmetry = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasSymmetry(v16, v17);
          uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32, HasSymmetry, v19);
        }
      }
    }
  }
  unint64_t v30 = v32;
  uint64_t v31 = v33;
  uint64_t v20 = **(void **)(v32 + 16);
  uint64_t v21 = *(unsigned __int16 *)(v20 + 48 * v33 + 28);
  unint64_t v24 = v32;
  uint64_t v25 = v21;
  uint64_t v26 = v20;
  unint64_t v27 = v32;
  uint64_t v22 = 0xFFFFLL;
  uint64_t v28 = 0xFFFFLL;
  uint64_t v29 = v20;
  while (v21 != v22 || v24 != v27)
  {
    uint64_t v23 = sub_216BC2828(&v24, v7, v8);
    sub_216C22EE8(*v23, v23[1], a3, 0);
    uint64_t result = (uint64_t)sub_216BC28B8(&v24);
    uint64_t v21 = v25;
    uint64_t v22 = v28;
  }
  if ((a4 & 1) == 0) {
    return (uint64_t)pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetIsDueToAncestor(&v32, 1);
  }
  return result;
}

uint64_t sub_216C2306C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2, char a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled(a1);
  if (result) {
    return result;
  }
  if (a3)
  {
    uint64_t v7 = 1;
    goto LABEL_6;
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor(a1) ^ 1;
  if (v7)
  {
LABEL_6:
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1);
    long long v16 = *(_OWORD *)a1;
    if (result) {
      return result;
    }
    goto LABEL_8;
  }
  long long v16 = *(_OWORD *)a1;
LABEL_8:
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v16, 1, v8);
  uint64_t v11 = *((void *)a1 + 1);
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = v11;
  uint64_t v12 = **(void **)(v21 + 16);
  uint64_t v13 = *(unsigned __int16 *)(v12 + 48 * v11 + 28);
  *(void *)&long long v16 = v21;
  *((void *)&v16 + 1) = v13;
  uint64_t v17 = v12;
  uint64_t v18 = v21;
  uint64_t v14 = 0xFFFFLL;
  uint64_t v19 = 0xFFFFLL;
  uint64_t v20 = v12;
  while (v13 != v14 || (void)v16 != v18)
  {
    uint64_t v15 = sub_216BC2828(&v16, v9, v10);
    sub_216C2306C(v15, a2, v7);
    uint64_t result = (uint64_t)sub_216BC28B8(&v16);
    uint64_t v13 = *((void *)&v16 + 1);
    uint64_t v14 = v19;
  }
  return result;
}

uint64_t sub_216C23160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, char a7, char a8)
{
  long long v16 = (_DWORD *)(a4 + 12);
  *(void *)a1 = *(void *)a4;
  uint64_t v17 = (_DWORD *)(a1 + 12);
  sub_2168BD80C((uint64_t *)a1);
  sub_216981010((_DWORD *)(a1 + 8), (_DWORD *)(a4 + 8));
  sub_21698105C(v17, v16);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = a6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_216C232A8(a1 + 72, 0, 0.0, 0.5);
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 20sub_216C01044((uint64_t *)this, 0) = a7;
  *(unsigned char *)(a1 + 201) = a8;
  return a1;
}

void sub_216C23228(_Unwind_Exception *a1)
{
  sub_216C23244(v2);
  sub_216BC9108(v1);
  _Unwind_Resume(a1);
}

void **sub_216C23244(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 56;
        sub_216C23588(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216C232A8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  v15[0] = a2;
  sub_21686EB98((unint64_t *)a1, v15);
  uint64_t v7 = v15[0];
  if ((unint64_t)v15[0] >> 58)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  v15[1] = a1 + 8;
  char v16 = 0;
  if (v7)
  {
    uint64_t v8 = (int *)operator new(v7 << 6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[16 * v7];
    *(void *)(a1 + 24) = v9;
    char v10 = v8;
    do
    {
      int *v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((unsigned char *)v10 + 6) = 0;
      v10 += 16;
    }
    while (v10 != v9);
    *(void *)(a1 + 16) = v9;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B91550, memory_order_acquire))
  {
    uint64_t v8 = &dword_267B91510;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B91550))
    {
      dword_267B91510 = 0;
      word_267B91514 = -1;
      byte_267B91516 = 1;
      __cxa_atexit((void (*)(void *))sub_216C23508, &dword_267B91510, &dword_216758000);
      __cxa_guard_release(&qword_267B91550);
    }
    uint64_t v8 = &dword_267B91510;
  }
  unint64_t v11 = v15[0];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v11;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v11) {
    *(unsigned char *)(*(void *)(a1 + 16) - 58) = 1;
  }
  float v12 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v12;
  *(void *)(a1 + 56) = (unint64_t)(float)(v12 * (float)v11);
  return a1;
}

void sub_216C23460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_216C23484(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_216C23530(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216C23508(uint64_t a1)
{
  return a1;
}

void sub_216C23530(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
    sub_21697C414((_DWORD *)(a1 + 56));
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    *(_WORD *)(a1 + 4) = -1;
  }
}

void sub_216C23588(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_21697C414((_DWORD *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void sub_216C235E4(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *((void *)a2 + 1);
  v60[0] = *(void *)a2;
  v60[1] = v14;
  uint64_t v15 = **(void **)(v60[0] + 16);
  uint64_t v16 = *(unsigned __int16 *)(v15 + 48 * v14 + 28);
  uint64_t v55 = v60[0];
  *(void *)&long long v56 = v16;
  *((void *)&v56 + 1) = v15;
  long long __p = (void *)v60[0];
  uint64_t v17 = 0xFFFFLL;
  uint64_t v58 = 0xFFFFLL;
  uint64_t v59 = v15;
  while (v16 != v17 || (void *)v55 != __p)
  {
    uint64_t v18 = sub_216BC2828(&v55, (uint64_t)a2, a3);
    sub_216C235E4(a1, v18, a3, a4, a5, a6, a7);
    sub_216BC28B8(&v55);
    uint64_t v16 = v56;
    uint64_t v17 = v58;
  }
  uint64_t v51 = a2;
  uint64_t v54 = a1;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a2)
    && pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(a2)
    && (Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(a2),
        LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2),
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack),
        uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v21),
        unint64_t v24 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)Layers,
        uint64_t v23 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(Layers + 8),
        *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)Layers != v23))
  {
    uint64_t v25 = 0;
    int v52 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(Layers + 8);
    do
    {
      uint64_t v26 = *v24;
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(*v24, Path))
      {
        uint64_t v27 = v25;
        uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v28) {
          uint64_t v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unsigned int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 192), 0);
        unint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v30) {
          unint64_t v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v25 = v27 | HasField;
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v30 + 472), 0))v25 |= 2uLL; {
        uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (!v31) {
          uint64_t v31 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 280), 0))v25 |= 4uLL; {
        unint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v23 = v52;
        if (!v32) {
          unint64_t v32 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v32 + 240), 0))v25 |= 8uLL; {
        uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (!v33) {
          uint64_t v33 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v26, Path, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v33 + 304), 0))v25 |= 0x10uLL; {
      }
        }
      ++v24;
    }
    while (v24 != v23);
  }
  else
  {
    LOBYTE(v25) = 0;
  }
  uint64_t v34 = v51;
  if ((a5 & 1) != 0
    && (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v51) == 4
     || pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v51) == 5))
  {
    uint64_t v55 = 16;
    long long v56 = *(_OWORD *)v51;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_21697C414(v60);
    if (SHIBYTE(v59) < 0) {
      operator delete(__p);
    }
  }
  BOOL v36 = (v25 & 2) == 0 || *(unsigned char *)(v54 + 201) == 0;
  if (!a4)
  {
    char v53 = v25;
    if (v36) {
      goto LABEL_47;
    }
    uint64_t v55 = 12;
    long long v56 = *(_OWORD *)v51;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_21697C414(v60);
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p);
      if (!a6) {
        goto LABEL_66;
      }
    }
    else
    {
LABEL_47:
      if (!a6) {
        goto LABEL_66;
      }
    }
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v51);
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(v37))
    {
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(v51);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v38, &v55);
      unint64_t SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth(v51);
      if (SpecContributionRestrictedDepth)
      {
        for (unint64_t i = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
              i >= SpecContributionRestrictedDepth;
              --i)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55)) {
            break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &v61);
          sub_21697DE94((int *)&v55, &v61);
          sub_21697DEEC((int *)&v55 + 1, &v62);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
          sub_21697C414(&v61);
        }
      }
      BOOL v41 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(v51);
      while (1)
      {
        BOOL IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55);
        if (IsAbsoluteRootPath) {
          break;
        }
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v41);
        uint64_t v44 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v43);
        long long v46 = *(uint64_t **)v44;
        std::string::size_type v45 = *(uint64_t **)(v44 + 8);
        while (v46 != v45)
        {
          uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v46);
          long long v48 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v48) {
            long long v48 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v48 + 472), 0))goto LABEL_62; {
          ++v46;
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &v61);
        sub_21697DE94((int *)&v55, &v61);
        sub_21697DEEC((int *)&v55 + 1, &v62);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
        sub_21697C414(&v61);
      }
LABEL_62:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
      sub_21697C414(&v55);
      uint64_t v34 = v51;
      if (!IsAbsoluteRootPath)
      {
        uint64_t v55 = 7;
        long long v56 = *(_OWORD *)v51;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        long long __p = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
        sub_216C23F48(v54, (uint64_t)&v55);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
        sub_21697C414(v60);
        if (SHIBYTE(v59) < 0) {
          operator delete(__p);
        }
      }
    }
LABEL_66:
    if (a3)
    {
      uint64_t v49 = v54;
      if (a7) {
        return;
      }
      goto LABEL_84;
    }
    char v50 = v53;
    uint64_t v49 = v54;
    if ((v53 & 0x10) == 0) {
      goto LABEL_71;
    }
    uint64_t v55 = 6;
    long long v56 = *(_OWORD *)v34;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_21697C414(v60);
    char v50 = v53;
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p);
      if ((v53 & 1) == 0) {
        goto LABEL_75;
      }
    }
    else
    {
LABEL_71:
      if ((v50 & 1) == 0) {
        goto LABEL_75;
      }
    }
    uint64_t v55 = 4;
    long long v56 = *(_OWORD *)v34;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_21697C414(v60);
    char v50 = v53;
    if (SHIBYTE(v59) < 0) {
      operator delete(__p);
    }
    if ((v50 & 8) == 0) {
      goto LABEL_77;
    }
LABEL_75:
    uint64_t v55 = 3;
    long long v56 = *(_OWORD *)v34;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_21697C414(v60);
    char v50 = v53;
    if (SHIBYTE(v59) < 0)
    {
      operator delete(__p);
      if ((v53 & 4) != 0)
      {
LABEL_78:
        uint64_t v55 = 2;
        long long v56 = *(_OWORD *)v34;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        long long __p = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
        sub_216C23F48(v54, (uint64_t)&v55);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
        sub_21697C414(v60);
        if (SHIBYTE(v59) < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
LABEL_77:
      if ((v50 & 4) != 0) {
        goto LABEL_78;
      }
    }
    if (a7) {
      return;
    }
    uint64_t v55 = 0;
    long long v56 = *(_OWORD *)v34;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v54, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    sub_21697C414(v60);
    if (SHIBYTE(v59) < 0) {
      operator delete(__p);
    }
LABEL_84:
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v34) != 3) {
      return;
    }
    uint64_t v55 = 1;
    long long v56 = *(_OWORD *)v34;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
    sub_216C23F48(v49, (uint64_t)&v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
    goto LABEL_86;
  }
  if (v36) {
    return;
  }
  uint64_t v55 = 12;
  long long v56 = *(_OWORD *)v51;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  long long __p = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v60);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v60 + 1);
  sub_216C23F48(v54, (uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v60 + 1);
LABEL_86:
  sub_21697C414(v60);
  if (SHIBYTE(v59) < 0) {
    operator delete(__p);
  }
}

void sub_216C23EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216C22DEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C23F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = (uint64_t *)(a1 + 48);
  if (v4 == *(void *)(a1 + 56) && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 64) - v4) >> 3)) <= 7)
  {
    *((void *)&__p + 1) = a1 + 64;
    *(void *)&long long v51 = operator new(0x1C0uLL);
    *((void *)&v51 + 1) = v51;
    int v52 = (char *)v51;
    *(void *)&long long __p = v51 + 448;
    sub_216C244FC(v5, &v51);
    sub_216C245E0((uint64_t)&v51);
  }
  if (*(_DWORD *)a2 != 11 && *(_DWORD *)a2 != 5) {
    goto LABEL_49;
  }
  unint64_t v7 = sub_216C24630((unsigned int *)a2);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = v8 & v7;
  if (*(__int16 *)(v9 + ((v8 & v7) << 6) + 4) < 0)
  {
    LOWORD(v11) = 0;
LABEL_15:
    if (*(unsigned char *)(a1 + 144) || (unint64_t v12 = *(void *)(a1 + 120), v12 >= *(void *)(a1 + 128)))
    {
      uint64_t v21 = sub_21686E8DC((void *)(a1 + 72));
      sub_216C24838((uint64_t *)(a1 + 72), v21);
      *(unsigned char *)(a1 + 144) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 145)) {
        goto LABEL_32;
      }
      *(unsigned char *)(a1 + 145) = 0;
      float v13 = *(float *)(a1 + 136);
      if (v13 == 0.0) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(a1 + 112);
      float v15 = 0.0;
      float v16 = (float)v12;
      if (v14) {
        float v15 = (float)v12 / (float)v14;
      }
      if (v15 >= v13) {
        goto LABEL_32;
      }
      float v17 = *(float *)(a1 + 140);
      unint64_t v18 = vcvtps_u32_f32((float)(v12 + 1) / v17);
      unint64_t v19 = vcvtps_u32_f32(v16 / v17);
      if (v19 <= v18) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = v19;
      }
      sub_216C24838((uint64_t *)(a1 + 72), v20);
    }
    uint64_t v22 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = v22 & v7;
    if (*(__int16 *)(v9 + ((v22 & v7) << 6) + 4) < 0)
    {
      LOWORD(v11) = 0;
    }
    else
    {
      LOWORD(v11) = 0;
      do
      {
        int v11 = (__int16)(v11 + 1);
        uint64_t v10 = (v10 + 1) & v22;
      }
      while (v11 <= *(__int16 *)(v9 + (v10 << 6) + 4));
    }
LABEL_32:
    uint64_t v23 = v9 + (v10 << 6);
    unint64_t v24 = (long long *)(a2 + 24);
    if (*(__int16 *)(v23 + 4) == -1)
    {
      long long v25 = *(_OWORD *)a2;
      *(void *)(v23 + 24) = *(void *)(a2 + 16);
      *(_OWORD *)(v23 + 8) = v25;
      uint64_t v26 = (unsigned char *)(v23 + 32);
      if (*(char *)(a2 + 47) < 0)
      {
        sub_216778F24(v26, *(void **)(a2 + 24), *(void *)(a2 + 32));
      }
      else
      {
        long long v27 = *v24;
        *(void *)(v23 + 48) = *(void *)(a2 + 40);
        *(_OWORD *)uint64_t v26 = v27;
      }
      uint64_t v39 = v9 + (v10 << 6);
      sub_216981010((_DWORD *)(v39 + 56), (_DWORD *)(a2 + 48));
      sub_21698105C((_DWORD *)(v39 + 60), (_DWORD *)(a2 + 52));
      *(_DWORD *)uint64_t v23 = v7;
      *(_WORD *)(v23 + 4) = v11;
    }
    else
    {
      long long v51 = *(_OWORD *)a2;
      int v52 = *(char **)(a2 + 16);
      if (*(char *)(a2 + 47) < 0)
      {
        sub_216778F24(&__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
      }
      else
      {
        long long __p = *v24;
        uint64_t v54 = *(void *)(a2 + 40);
      }
      sub_216981010(&v55, (_DWORD *)(a2 + 48));
      sub_21698105C(&v56, (_DWORD *)(a2 + 52));
      __int16 v58 = v11;
      int v57 = v7;
      sub_216C24A48((int *)(*(void *)(a1 + 104) + (v10 << 6)), &v58, &v57, (int *)&v51);
      uint64_t v28 = *(void *)(a1 + 72);
      uint64_t v29 = v28 & (v10 + 1);
      __int16 v30 = ++v58;
      uint64_t v31 = *(void *)(a1 + 104);
      uint64_t v32 = v31 + (v29 << 6);
      uint64_t v34 = (__int16 *)(v32 + 4);
      for (__int16 i = *(_WORD *)(v32 + 4); (unsigned __int16)i != 0xFFFF; __int16 i = *(_WORD *)(v32 + 4))
      {
        if (v30 > i)
        {
          if (v30 >= 4096) {
            *(unsigned char *)(a1 + 144) = 1;
          }
          sub_216C24A48((int *)v32, &v58, &v57, (int *)&v51);
          uint64_t v28 = *(void *)(a1 + 72);
          __int16 v30 = v58;
          uint64_t v31 = *(void *)(a1 + 104);
        }
        uint64_t v29 = v28 & (v29 + 1);
        __int16 v58 = ++v30;
        uint64_t v32 = v31 + (v29 << 6);
        uint64_t v34 = (__int16 *)(v32 + 4);
      }
      int v35 = v57;
      uint64_t v36 = v31 + (v29 << 6);
      uint64_t v37 = v52;
      *(_OWORD *)(v36 + 8) = v51;
      *(void *)(v36 + 24) = v37;
      uint64_t v38 = v54;
      *(_OWORD *)(v36 + 32) = __p;
      *(void *)(v36 + 48) = v38;
      uint64_t v54 = 0;
      long long __p = 0uLL;
      sub_21697D878((_DWORD *)(v36 + 56), &v55);
      sub_21697D8B4((_DWORD *)(v36 + 60), &v56);
      *(_DWORD *)uint64_t v32 = v35;
      __int16 *v34 = v30;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v56);
      sub_21697C414(&v55);
      if (SHIBYTE(v54) < 0) {
        operator delete((void *)__p);
      }
    }
    ++*(void *)(a1 + 120);
LABEL_49:
    unint64_t v40 = *(void *)(a1 + 64);
    unint64_t v41 = *(void *)(a1 + 56);
    if (v41 >= v40)
    {
      uint64_t v45 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v41 - *v5) >> 3);
      if ((unint64_t)(v45 + 1) > 0x492492492492492) {
        sub_21677CB10();
      }
      unint64_t v46 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v40 - *v5) >> 3);
      uint64_t v47 = 2 * v46;
      if (2 * v46 <= v45 + 1) {
        uint64_t v47 = v45 + 1;
      }
      if (v46 >= 0x249249249249249) {
        unint64_t v48 = 0x492492492492492;
      }
      else {
        unint64_t v48 = v47;
      }
      *((void *)&__p + 1) = a1 + 64;
      if (v48)
      {
        if (v48 > 0x492492492492492) {
          sub_21677CA1C();
        }
        uint64_t v49 = (char *)operator new(56 * v48);
      }
      else
      {
        uint64_t v49 = 0;
      }
      char v50 = &v49[56 * v45];
      *(void *)&long long v51 = v49;
      *((void *)&v51 + 1) = v50;
      *(void *)&long long __p = &v49[56 * v48];
      *(_OWORD *)char v50 = *(_OWORD *)a2;
      *((void *)v50 + 2) = *(void *)(a2 + 16);
      *(_OWORD *)(v50 + 24) = *(_OWORD *)(a2 + 24);
      *((void *)v50 + 5) = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = 0;
      sub_21697D878((_DWORD *)v50 + 12, (_DWORD *)(a2 + 48));
      sub_21697D8B4((_DWORD *)v50 + 13, (_DWORD *)(a2 + 52));
      int v52 = v50 + 56;
      sub_216C244FC(v5, &v51);
      uint64_t v44 = *(void *)(a1 + 56);
      sub_216C245E0((uint64_t)&v51);
    }
    else
    {
      long long v42 = *(_OWORD *)a2;
      *(void *)(v41 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v41 = v42;
      long long v43 = *(_OWORD *)(a2 + 24);
      *(void *)(v41 + 4sub_216C01044((uint64_t *)this, 0) = *(void *)(a2 + 40);
      *(_OWORD *)(v41 + 24) = v43;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = 0;
      *(void *)(a2 + 24) = 0;
      sub_21697D878((_DWORD *)(v41 + 48), (_DWORD *)(a2 + 48));
      sub_21697D8B4((_DWORD *)(v41 + 52), (_DWORD *)(a2 + 52));
      uint64_t v44 = v41 + 56;
    }
    *(void *)(a1 + 56) = v44;
    sub_216C24AFC(*(void *)(a1 + 48), v44, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(0x6DB6DB6DB6DB6DB7 * ((v44 - *(void *)(a1 + 48)) >> 3)));
    return;
  }
  LOWORD(v11) = 0;
  while (!sub_216C246B8(v9 + (v10 << 6) + 8, a2))
  {
    int v11 = (__int16)(v11 + 1);
    uint64_t v10 = (v10 + 1) & v8;
    if (v11 > *(__int16 *)(v9 + (v10 << 6) + 4)) {
      goto LABEL_15;
    }
  }
}

uint64_t *sub_216C244FC(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      uint64_t v9 = v4 + v7;
      long long v10 = *(_OWORD *)(v4 + v7 - 56);
      *(void *)(v8 - 4sub_216C01044((uint64_t *)this, 0) = *(void *)(v4 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      long long v11 = *(_OWORD *)(v4 + v7 - 32);
      *(void *)(v8 - 16) = *(void *)(v4 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v11;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      sub_21697D878((_DWORD *)(v6 + v7 - 8), (_DWORD *)(v4 + v7 - 8));
      uint64_t result = (uint64_t *)sub_21697D8B4((_DWORD *)(v6 + v7 - 4), (_DWORD *)(v4 + v7 - 4));
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v12 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v12;
  uint64_t v13 = v3[1];
  v3[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = v3[2];
  v3[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C245E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_216C23588(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_216C24630(unsigned int *a1)
{
  uint64_t v2 = a1 + 12;
  uint64_t v3 = *a1;
  char v7 = 1;
  Uniqueuint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 2));
  unint64_t v6 = UniqueIdentifier
     + ((unint64_t)(UniqueIdentifier + v3 + (UniqueIdentifier + v3) * (UniqueIdentifier + v3)) >> 1);
  sub_216C247B0((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, (int *)a1 + 1, (uint64_t)(a1 + 6), v2);
  return bswap64(0x9E3779B97F4A7C55 * v6);
}

BOOL sub_216C246B8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)(a1 + 48) != *(void *)(a2 + 48))
  {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 47);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 47);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 32);
  }
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 24);
  if (v7 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 24);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 24);
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 32))) {
      return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 47))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
      }
    }
    return 0;
  }
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
}

uint64_t sub_216C247B0(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, int *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6 = *a2;
  if (*((unsigned char *)this + 8)) {
    v6 += (unint64_t)(*(void *)this + v6 + (*(void *)this + v6) * (*(void *)this + v6)) >> 1;
  }
  else {
    *((unsigned char *)this + 8) = 1;
  }
  *(void *)this = v6;
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)a3;
  }
  else {
    uint64_t v8 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = (char *)*(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(char **)(a3 + 8);
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(this, v8, v9);

  return sub_2169827F8((uint64_t)this, a4);
}

__n128 sub_216C24838(uint64_t *a1, uint64_t a2)
{
  sub_216C232A8((uint64_t)&v24, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  uint64_t v3 = v27;
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    int64x2_t v17 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  unint64_t v6 = (unint64_t)(v27 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1) {
      goto LABEL_13;
    }
    if (v6) {
      unint64_t v7 = sub_216C24630(v4 + 2);
    }
    else {
      unint64_t v7 = *v4;
    }
    __int16 v8 = 0;
    uint64_t v9 = v24;
    uint64_t v10 = v24 & v7;
    __int16 v32 = 0;
    LODWORD(v33) = v7;
    while (1)
    {
      uint64_t v11 = *((void *)&v26 + 1) + (v10 << 6);
      int v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8) {
        goto LABEL_11;
      }
      if (v12 == -1) {
        break;
      }
      sub_216C24A48((int *)(*((void *)&v26 + 1) + (v10 << 6)), &v32, (int *)&v33, (int *)v4 + 2);
      __int16 v8 = v32;
      uint64_t v9 = v24;
LABEL_11:
      __int16 v32 = ++v8;
      uint64_t v10 = v9 & (v10 + 1);
    }
    int v13 = (int)v33;
    uint64_t v14 = *((void *)&v26 + 1) + (v10 << 6);
    uint64_t v15 = *((void *)v4 + 3);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v4 + 2);
    *(void *)(v14 + 24) = v15;
    uint64_t v16 = *((void *)v4 + 6);
    *(_OWORD *)(v14 + 32) = *((_OWORD *)v4 + 2);
    *(void *)(v14 + 48) = v16;
    *((void *)v4 + 5) = 0;
    *((void *)v4 + 6) = 0;
    *((void *)v4 + 4) = 0;
    sub_21697D878((_DWORD *)(v14 + 56), v4 + 14);
    sub_21697D8B4((_DWORD *)(v14 + 60), v4 + 15);
    *(_DWORD *)uint64_t v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 16;
  }
  while (v4 != v5);
  int64x2_t v17 = *(int64x2_t *)(a1 + 1);
  uint64_t v3 = v27;
LABEL_16:
  uint64_t v18 = v24;
  uint64_t v24 = *a1;
  *a1 = v18;
  int64x2_t v19 = v25;
  int64x2_t v25 = v17;
  *(int64x2_t *)(a1 + 1) = v19;
  long long v20 = v26;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v20;
  long long v21 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  long long v27 = v21;
  uint64_t v22 = v28;
  uint64_t v28 = a1[7];
  a1[7] = v22;
  *(void *)&long long v20 = v29;
  uint64_t v29 = a1[8];
  a1[8] = v20;
  LOBYTE(v22) = v30;
  char v30 = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = v22;
  LOBYTE(v22) = v31;
  char v31 = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = v22;
  uint64_t v33 = &v25;
  sub_216C23484((void ***)&v33);
  return result;
}

void sub_216C24A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a10;
  sub_216C23484(&a20);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C24A48(int *a1, __int16 *a2, int *a3, int *a4)
{
  int v7 = *a4;
  *a4 = a1[2];
  a1[2] = v7;
  long long v8 = *(_OWORD *)(a4 + 2);
  *(_OWORD *)(a4 + 2) = *((_OWORD *)a1 + 1);
  *((_OWORD *)a1 + 1) = v8;
  uint64_t v9 = *((void *)a4 + 5);
  long long v10 = *(_OWORD *)(a4 + 6);
  uint64_t v11 = *((void *)a1 + 6);
  *(_OWORD *)(a4 + 6) = *((_OWORD *)a1 + 2);
  *((void *)a4 + 5) = v11;
  *((_OWORD *)a1 + 2) = v10;
  *((void *)a1 + 6) = v9;
  LODWORD(v9) = a4[1];
  a4[1] = a1[3];
  a1[3] = v9;
  __n128 result = sub_216BBE4F4(a4 + 12, a1 + 14);
  __int16 v13 = *a2;
  *a2 = *((_WORD *)a1 + 2);
  *((_WORD *)a1 + 2) = v13;
  int v14 = *a1;
  *a1 = *a3;
  *a3 = v14;
  return result;
}

void sub_216C24AFC(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  if ((uint64_t)a3 >= 2)
  {
    unint64_t v5 = ((unint64_t)a3 - 2) >> 1;
    unint64_t v6 = (long long *)(a1 + 56 * v5);
    int v7 = (long long *)(a2 - 56);
    if (sub_216C24CF8((int *)v6, a2 - 56, a3))
    {
      long long v8 = *v7;
      uint64_t v20 = *((void *)v7 + 2);
      long long v19 = v8;
      long long v9 = *(_OWORD *)(a2 - 32);
      uint64_t v22 = *(void *)(a2 - 16);
      *(_OWORD *)long long __p = v9;
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 16) = 0;
      int v10 = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      int v23 = v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 8));
      v24[0] = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        uint64_t v11 = v6;
        long long v12 = *v6;
        *((void *)v7 + 2) = *((void *)v6 + 2);
        long long *v7 = v12;
        __int16 v13 = (void **)v7 + 3;
        if (*((char *)v7 + 47) < 0) {
          operator delete(*v13);
        }
        long long v14 = *(long long *)((char *)v11 + 24);
        *((void *)v7 + 5) = *((void *)v11 + 5);
        *(_OWORD *)__int16 v13 = v14;
        *((unsigned char *)v11 + 47) = 0;
        *((unsigned char *)v11 + 24) = 0;
        sub_21697DE94((int *)v7 + 12, (int *)v11 + 12);
        sub_21697DEEC((int *)v7 + 13, (int *)v11 + 13);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v6 = (long long *)(a1 + 56 * v5);
        int v7 = v11;
      }
      while (sub_216C24CF8((int *)v6, (uint64_t)&v19, v15));
      uint64_t v16 = (void **)v11 + 3;
      long long v17 = v19;
      *((void *)v11 + 2) = v20;
      long long *v11 = v17;
      if (*((char *)v11 + 47) < 0) {
        operator delete(*v16);
      }
      long long v18 = *(_OWORD *)__p;
      *((void *)v11 + 5) = v22;
      *(_OWORD *)uint64_t v16 = v18;
      HIBYTE(v22) = 0;
      LOBYTE(__p[0]) = 0;
      sub_21697DE94((int *)v11 + 12, &v23);
      sub_21697DEEC((int *)v11 + 13, v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v24);
      sub_21697C414(&v23);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_216C24CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216C22DEC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C24CF8(int *a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  int v3 = *a1;
  if (*a1 != *(_DWORD *)a2) {
    return v3 > *(_DWORD *)a2;
  }
  switch(v3)
  {
    case 3:
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)(a1 + 2);
      unint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a2 + 8);
      return pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(v4, v5, a3) == 1;
    case 5:
      long long v9 = (void *)(a2 + 8);
      long long v8 = a1 + 2;
      goto LABEL_13;
    case 8:
    case 9:
    case 13:
    case 14:
      if (*((void *)a1 + 2) == *(void *)(a2 + 16) && *((void *)a1 + 1) == *(void *)(a2 + 8))
      {
        __int16 v13 = a1 + 12;
        long long v14 = a1 + 1;
        int v10 = (void *)(a2 + 48);
        uint64_t v11 = a2 + 4;
        return sub_216C24E70((uint64_t)&v16, (uint64_t)&v10, (uint64_t)&v13);
      }
      else
      {
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)(a1 + 2);
        unint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a2 + 8);
        return pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(v4, v5, a3) == 1;
      }
    case 10:
    case 15:
      __int16 v13 = a1 + 2;
      long long v14 = a1 + 12;
      uint64_t v15 = a1 + 1;
      int v10 = (void *)(a2 + 8);
      uint64_t v11 = a2 + 48;
      uint64_t v12 = a2 + 4;
      return sub_216C24EDC((uint64_t)&v16, &v10, &v13);
    default:
      int v7 = a1 + 2;
      long long v8 = (void *)(a2 + 8);
      long long v9 = v7;
LABEL_13:
      BOOL result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(v8, v9);
      break;
  }
  return result;
}

BOOL sub_216C24E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_2169817E8(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a2, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)a3))return 1; {
  if (sub_2169817E8(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a3, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)a2))return 0;
  }
  return **(_DWORD **)(a2 + 8) < **(_DWORD **)(a3 + 8);
}

BOOL sub_216C24EDC(uint64_t a1, void **a2, void **a3)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(*a2, *a3)) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::operator<(*a3, *a2)) {
    return 0;
  }
  return sub_216C24F48((uint64_t)&v6, (uint64_t)a2, (uint64_t)a3);
}

BOOL sub_216C24F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_2169817E8(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8)))return 1; {
  if (sub_2169817E8(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8)))return 0;
  }
  return **(_DWORD **)(a2 + 16) < **(_DWORD **)(a3 + 16);
}

void *sub_216C24FB4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  if (*(unsigned char *)(*(void *)(a1 + 24) + 96)) {
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetCulled(&v19, 1);
  }
  else {
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v19, 1, a3);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v19, 1);
  uint64_t v17 = v19;
  long long v18 = v20;
  uint64_t v7 = **(void **)(v19 + 16);
  uint64_t v8 = *(unsigned __int16 *)(v7 + 48 * (void)v20 + 28);
  uint64_t v11 = v19;
  uint64_t v12 = v8;
  uint64_t v13 = v7;
  uint64_t v14 = v19;
  uint64_t v9 = 0xFFFFLL;
  uint64_t v15 = 0xFFFFLL;
  uint64_t v16 = v7;
  while (v8 != v9 || v11 != v14)
  {
    int v10 = sub_216BC2828(&v11, v5, v6);
    sub_216C24FB4(a1, *v10, v10[1]);
    BOOL result = sub_216BC28B8(&v11);
    uint64_t v8 = v12;
    uint64_t v9 = v15;
  }
  return result;
}

uint64_t sub_216C25080(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  Path = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v19);
  NonVariantuint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(Path, v16);
  return sub_216C25344(a1, a2, v19, v20, a5, a6, a7, a8, NonVariantPathElementCount, a9 & 0xFFFFFFFFFFLL);
}

void *sub_216C25114(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfSite"
            ">>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSite>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216C25190(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfSite>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSite>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

void *sub_216C25210(void *result, uint64_t a2, char *a3)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v4 = **(void **)(a2 + 16);
  uint64_t v5 = *(unsigned __int16 *)(v4 + 48 * (void)a3 + 28);
  uint64_t v12 = a2;
  uint64_t v13 = v5;
  uint64_t v14 = v4;
  uint64_t v15 = a2;
  uint64_t v6 = 0xFFFFLL;
  uint64_t v16 = 0xFFFFLL;
  uint64_t v17 = v4;
  while (v5 != v6 || v12 != v15)
  {
    uint64_t v7 = sub_216BC2828(&v12, a2, a3);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7) != 3)
    {
      if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7)
        || (LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7),
            uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack),
            uint64_t IncrementalRelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesSourceToTarget(v9),
            Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v7),
            (void *)(IncrementalRelocatesSourceToTarget + 8) == sub_21698EFF0(IncrementalRelocatesSourceToTarget, Path)))
      {
        sub_216C25210(v3, *v7, v7[1]);
      }
      else
      {
        sub_216C24FB4(v3, *v7, (char *)v7[1]);
      }
    }
    BOOL result = sub_216BC28B8(&v12);
    uint64_t v5 = v13;
    uint64_t v6 = v16;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *sub_216C25308(pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *this)
{
  if (*(void *)this) {
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope(this);
  }
  return this;
}

uint64_t sub_216C25344(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6, uint64_t *a7, uint64_t a8, unsigned int a9, unint64_t a10)
{
  *(void *)&long long v177 = a3;
  *((void *)&v177 + 1) = a4;
  if (sub_216BBBDFC(2))
  {
    uint64_t v98 = *(void *)(a1 + 40);
    if (v98) {
      unint64_t v99 = (uint64_t *)(v98 + 48);
    }
    else {
      unint64_t v99 = (uint64_t *)(a1 + 32);
    }
    uint64_t v100 = *v99;
    uint64_t v101 = a2;
    uint64_t v102 = &v178;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, v101, (uint64_t)&v178);
    if (v180 < 0) {
      uint64_t v102 = (long long *)v178;
    }
    unint64_t v104 = v164;
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v164, (pxrInternal__aapl__pxrReserved__ *)a6, v103);
    if (v164[23] < 0) {
      unint64_t v104 = *(unsigned char **)v164;
    }
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v177, (uint64_t)&v169);
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v174, (pxrInternal__aapl__pxrReserved__ *)&v169, v105);
    if (v175 >= 0) {
      uint64_t v108 = v174;
    }
    else {
      uint64_t v108 = (void **)v174[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Adding new %s arc to %s from %s", v106, v107, v102, v104, v108);
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v176, v100, &v177, __p);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    if (v175 < 0) {
      operator delete(v174[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v171);
    sub_21697C414(&v170);
    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v169);
    if ((v164[23] & 0x80000000) != 0) {
      operator delete(*(void **)v164);
    }
    if (SHIBYTE(v180) < 0) {
      operator delete((void *)v178);
    }
  }
  else
  {
    uint64_t v176 = 0;
  }
  long long v144 = a5;
  if (sub_216BBBDFC(2))
  {
    uint64_t v109 = *(void *)(a1 + 40);
    uint64_t v110 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 32);
    if (v109) {
      uint64_t v110 = (pxrInternal__aapl__pxrReserved__ **)(v109 + 48);
    }
    uint64_t v111 = *v110;
    if (*a5) {
      BOOL v112 = a5[1] == -1;
    }
    else {
      BOOL v112 = 1;
    }
    int v113 = !v112;
    if (v112)
    {
      v115 = "<None>";
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a5, (uint64_t)v173);
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v174, (pxrInternal__aapl__pxrReserved__ *)v173, v114);
      if (v175 >= 0) {
        v115 = (const char *)v174;
      }
      else {
        v115 = (const char *)v174[0];
      }
      uint64_t v109 = *(void *)(a1 + 40);
    }
    if (a10) {
      uint64_t v116 = "true";
    }
    else {
      uint64_t v116 = "false";
    }
    if ((a10 & 0x100) != 0) {
      v117 = "true";
    }
    else {
      v117 = "false";
    }
    if ((a10 & 0x10000) != 0) {
      uint64_t v118 = "true";
    }
    else {
      uint64_t v118 = "false";
    }
    if (v109)
    {
      if (*(unsigned char *)(v109 + 56)) {
        uint64_t v119 = "true";
      }
      else {
        uint64_t v119 = "false";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" (prev. frame: %s)", v12, v13, v119);
      if (v172 >= 0) {
        uint64_t v120 = (const char *)&v169;
      }
      else {
        uint64_t v120 = (const char *)v169;
      }
    }
    else
    {
      uint64_t v120 = "";
    }
    if ((a10 & 0x1000000) != 0) {
      uint64_t v121 = "true";
    }
    else {
      uint64_t v121 = "false";
    }
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v111, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v177, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"origin: %s\narcSiblingNum: %d\nnamespaceDepth: %d\ndirectNodeShouldContributeSpecs: %s\nincludeAncestralOpinions: %s\nskipDuplicateNodes: %s%s\nskipImpliedSpecializesCompletedNodes: %s\n\n", v14, v115, a8, a9, v116, v117, v118, v120, v121);
    a5 = v144;
    if (v109 && v172 < 0) {
      operator delete(v169);
    }
    if (v113)
    {
      if (v175 < 0) {
        operator delete(v174[0]);
      }
      sub_216BC9108((uint64_t)v173);
    }
  }
  if (!*a7)
  {
    __p[0] = "pcp/primIndex.cpp";
    __p[1] = "_AddArc";
    *(void *)&long long v156 = 1608;
    *((void *)&v156 + 1) = "PcpNodeRef pxrInternal__aapl__pxrReserved__::_AddArc(Pcp_PrimIndexer *, const PcpArcType, P"
                             "cpNodeRef, const PcpNodeRef &, const PcpLayerStackSite &, const PcpMapExpression &, int, int, _ArcOptions)";
    LOBYTE(v157) = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "!mapExpr.IsNull()", 0) & 1) == 0) {
      goto LABEL_194;
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v146 = a1 + 40;
  switch(a2)
  {
    case 6u:
      goto LABEL_8;
    case 2u:
LABEL_22:
      long long v168 = 0uLL;
      goto LABEL_91;
    case 1u:
LABEL_8:
      if (v177 != *(_OWORD *)a5)
      {
        *(_OWORD *)long long __p = v177;
        *(void *)&long long v156 = v15;
        while (__p[0])
        {
          if (__p[1] == (void *)-1
            || (int v16 = sub_216C273B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p), v16 != 6) && v16 != 1
            || v177 == *(_OWORD *)a5)
          {
            if (__p[0]) {
              BOOL v17 = __p[1] == (void *)-1;
            }
            else {
              BOOL v17 = 1;
            }
            if (!v17 && sub_216C273B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)__p) == 3) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          sub_216C27414((uint64_t *)__p);
        }
      }
      break;
  }
LABEL_23:
  v154.__r_.__value_.__r.__words[0] = *(void *)a6;
  sub_2168BD80C((uint64_t *)&v154);
  sub_216981010(&v154.__r_.__value_.__r.__words[1], a6 + 2);
  sub_21698105C((_DWORD *)&v154.__r_.__value_.__r.__words[1] + 1, a6 + 3);
  *(_OWORD *)long long __p = v177;
  *(void *)&long long v156 = v15;
  if (!(void)v177 || __p[1] == (void *)-1)
  {
LABEL_46:
    long long v168 = 0uLL;
  }
  else
  {
    uint64_t v18 = v15;
    while (1)
    {
      long long v178 = *(_OWORD *)__p;
      if (__p[0] && __p[1] != (void *)-1) {
        break;
      }
LABEL_39:
      if (v18)
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)__p);
        *(void *)&long long v178 = v22;
        *((void *)&v178 + 1) = v23;
        Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v178);
        if (*(void *)Path == v154.__r_.__value_.__l.__size_)
        {
          sub_216981010(&v178, (_DWORD *)(v18 + 16));
          sub_21698105C((_DWORD *)&v178 + 1, (_DWORD *)(v18 + 20));
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v178, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v18 + 16), Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v154.__r_.__value_.__r.__words[1], 1);
        }
        sub_2169C487C((int *)&v154.__r_.__value_.__r.__words[1], &v178);
        sub_2169C48D4((int *)&v154.__r_.__value_.__r.__words[1] + 1, (_DWORD *)&v178 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178 + 1);
        sub_21697C414(&v178);
        if ((void)v156)
        {
          *(_OWORD *)long long __p = *(_OWORD *)(v156 + 24);
          uint64_t v18 = *(void *)v156;
          *(void *)&long long v156 = *(void *)v156;
          if (__p[0])
          {
            if (__p[1] != (void *)-1) {
              continue;
            }
          }
        }
      }
      goto LABEL_46;
    }
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v178, (uint64_t)v164);
      BOOL v20 = *(void *)v164 == v154.__r_.__value_.__r.__words[0]
         && (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v164[8], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v154.__r_.__value_.__r.__words[1])|| pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v154.__r_.__value_.__r.__words[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v164[8]));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v164[12]);
      sub_21697C414(&v164[8]);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v164);
      if (v20) {
        break;
      }
      *(void *)&long long v178 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v178);
      *((void *)&v178 + 1) = v21;
      if (!(void)v178 || v21 == -1)
      {
        uint64_t v18 = v156;
        goto LABEL_39;
      }
    }
    pxrInternal__aapl__pxrReserved__::PcpErrorArcCycle::New(&v168);
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p);
    *(_OWORD *)std::string::size_type v164 = v177;
    *(void *)&v164[16] = v15;
    while (*(void *)v164 && *(void *)&v164[8] != -1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v164, (uint64_t)&v151);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v178, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v151);
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)__p, (uint64_t)&v178);
      sub_21697DE94((int *)&v161, &v184);
      sub_21697DEEC((int *)&v161 + 1, v185);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v185);
      sub_21697C414(&v184);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v183);
      *(void *)&long long v163 = v182;
      sub_216787968((void ***)&v163);
      uint64_t v26 = v181;
      if (v181 && atomic_fetch_add_explicit((atomic_uint *volatile)(v181 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      uint64_t v27 = *((void *)&v178 + 1);
      if (*((void *)&v178 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v178 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v152 + 1);
      sub_21697C414(&v152);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v151);
      LODWORD(v162[0]) = sub_216C273B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v164);
      uint64_t v28 = v168;
      unint64_t v29 = *(void *)(v168 + 112);
      if (v29 >= *(void *)(v168 + 120))
      {
        uint64_t v30 = sub_216C27548((uint64_t *)(v168 + 104), (uint64_t)__p);
      }
      else
      {
        sub_216C02920(*(void *)(v168 + 112), (uint64_t)__p);
        *(_DWORD *)(v29 + 88) = v162[0];
        uint64_t v30 = v29 + 96;
        *(void *)(v28 + 112) = v29 + 96;
      }
      *(void *)(v28 + 112) = v30;
      sub_216C27414((uint64_t *)v164);
    }
    uint64_t v31 = v168;
    uint64_t v33 = *(int **)(v168 + 104);
    __int16 v32 = *(int **)(v168 + 112);
    uint64_t v34 = v32 - 24;
    if (v33 != v32 && v34 > v33)
    {
      do
      {
        sub_216C278A8(v33, v34);
        v33 += 24;
        v34 -= 24;
      }
      while (v33 < v34);
      uint64_t v31 = v168;
      uint64_t v33 = *(int **)(v168 + 104);
    }
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v31 + 16, (uint64_t)v33);
    sub_2169C487C((int *)(v31 + 96), v33 + 20);
    sub_2169C48D4((int *)(v31 + 100), v33 + 21);
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v178, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)a6);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)__p, (uint64_t)&v178);
    sub_21697DE94((int *)&v161, &v184);
    sub_21697DEEC((int *)&v161 + 1, v185);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v185);
    sub_21697C414(&v184);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v183);
    *(void *)std::string::size_type v164 = v182;
    sub_216787968((void ***)v164);
    uint64_t v36 = v181;
    if (v181 && atomic_fetch_add_explicit((atomic_uint *volatile)(v181 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    uint64_t v37 = *((void *)&v178 + 1);
    if (*((void *)&v178 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v178 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    LODWORD(v162[0]) = a2;
    uint64_t v38 = v168;
    unint64_t v39 = *(void *)(v168 + 112);
    if (v39 >= *(void *)(v168 + 120))
    {
      uint64_t v40 = sub_216C27548((uint64_t *)(v168 + 104), (uint64_t)__p);
    }
    else
    {
      sub_216C02920(*(void *)(v168 + 112), (uint64_t)__p);
      *(_DWORD *)(v39 + 88) = v162[0];
      uint64_t v40 = v39 + 96;
      *(void *)(v38 + 112) = v39 + 96;
    }
    *(void *)(v38 + 112) = v40;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v161 + 1);
    sub_21697C414(&v161);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v158 + 8));
    *(void *)&long long v178 = &v157;
    sub_216787968((void ***)&v178);
    uint64_t v41 = *((void *)&v156 + 1);
    if (*((void *)&v156 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
    }
    long long v42 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v42 + 8))(v42);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154.__r_.__value_.__r.__words[1] + 1);
  sub_21697C414(&v154.__r_.__value_.__r.__words[1]);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v154);
  if ((void)v168)
  {
    *(_OWORD *)long long __p = v168;
    if (*((void *)&v168 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v168 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    sub_216C27B4C((long long *)__p, *(void *)(a1 + 32), (uint64_t *)(*(void *)(a1 + 32) + 40));
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    if (*((void *)&v168 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v168 + 1));
    }
LABEL_194:
    uint64_t v95 = 0;
    goto LABEL_195;
  }
LABEL_91:
  if (*((void *)&v168 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v168 + 1));
  }
  long long v43 = (uint64_t *)a6;
  if (*(void *)v146)
  {
    if (WORD1(a10) & 1 | *(unsigned __int8 *)(*(void *)v146 + 56)) {
      goto LABEL_95;
    }
LABEL_105:
    char v50 = 0;
    goto LABEL_106;
  }
  if ((a10 & 0x10000) == 0) {
    goto LABEL_105;
  }
LABEL_95:
  __p[0] = *(void **)a6;
  sub_2168BD80C((uint64_t *)__p);
  sub_216981010(&__p[1], a6 + 2);
  sub_21698105C((_DWORD *)&__p[1] + 1, a6 + 3);
  uint64_t v44 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v177;
  if ((void)v177 && *((void *)&v177 + 1) != -1)
  {
    uint64_t v45 = (void *)(a1 + 40);
    while (1)
    {
      uint64_t v45 = (void *)*v45;
      if (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetNodeUsingSite((uint64_t)v44, (uint64_t *)__p))
      {
        if (v46 != -1) {
          break;
        }
      }
      if (v45)
      {
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph::GetRootNode(v44);
        *(void *)&long long v178 = v47;
        *((void *)&v178 + 1) = v48;
        uint64_t v49 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v178);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v178, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v45 + 2), v49, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p[1], 1);
        sub_21697DE94((int *)&__p[1], (int *)&v178);
        sub_21697DEEC((int *)&__p[1] + 1, (int *)&v178 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v178 + 1);
        sub_21697C414(&v178);
        uint64_t v44 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)v45[3];
        if (v44)
        {
          if (v45[4] != -1) {
            continue;
          }
        }
      }
      goto LABEL_103;
    }
    if (sub_216BBBDFC(2))
    {
      uint64_t v142 = *(void *)(a1 + 40);
      if (v142) {
        uint64_t v143 = (pxrInternal__aapl__pxrReserved__ **)(v142 + 48);
      }
      else {
        uint64_t v143 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 32);
      }
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v143, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v177, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Skipping because duplicate node exists.", v96);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
    sub_21697C414(&__p[1]);
    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    goto LABEL_194;
  }
LABEL_103:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
  sub_21697C414(&__p[1]);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  char v50 = 1;
  long long v43 = (uint64_t *)a6;
LABEL_106:
  if (a10)
  {
    if ((a10 & 0x100) != 0)
    {
      int v52 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v43);
      uint64_t RelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetRelocatesSourceToTarget(v52);
      uint64_t v54 = RelocatesSourceToTarget + 8;
      int v55 = *(void **)(RelocatesSourceToTarget + 8);
      if (!v55) {
        goto LABEL_119;
      }
      int v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 + 2);
      uint64_t v57 = RelocatesSourceToTarget + 8;
      do
      {
        int v58 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v55 + 28), v56);
        uint64_t v59 = v55 + 1;
        if (!v58)
        {
          uint64_t v59 = v55;
          uint64_t v57 = (uint64_t)v55;
        }
        int v55 = (void *)*v59;
      }
      while (*v59);
      if (v57 == v54)
      {
LABEL_119:
        char v60 = a10;
      }
      else if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v57 + 28), v56))
      {
        char v60 = 0;
      }
      else
      {
        char v60 = a10;
      }
      uint64_t v51 = v60 & 1;
    }
    else
    {
      uint64_t v51 = 1;
    }
  }
  else
  {
    uint64_t v51 = 0;
  }
  *(void *)&v164[8] = 0;
  *(void *)&v164[16] = -1;
  *(void *)&long long v165 = 0;
  *((void *)&v165 + 1) = -1;
  uint64_t v166 = 0;
  unint64_t v167 = 0;
  *(_DWORD *)std::string::size_type v164 = a2;
  sub_216BD05D4(&v166, a7);
  *(_OWORD *)&v164[8] = v177;
  long long v165 = *v144;
  unint64_t v167 = __PAIR64__(a9, a8);
  *(void *)&long long v168 = 0;
  *((void *)&v168 + 1) = -1;
  long long v163 = 0uLL;
  if ((a10 & 0x100) != 0)
  {
    if (sub_216BBBDFC(2))
    {
      uint64_t v122 = *(void *)(a1 + 40);
      if (v122) {
        uint64_t v123 = (pxrInternal__aapl__pxrReserved__ **)(v122 + 48);
      }
      else {
        uint64_t v123 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 32);
      }
      uint64_t v124 = *v123;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, a2, (uint64_t)__p);
      int v125 = SBYTE7(v156);
      uint64_t v126 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v178, (pxrInternal__aapl__pxrReserved__ *)a6, v127);
      long long v129 = __p;
      if (v125 < 0) {
        long long v129 = v126;
      }
      if (v180 >= 0) {
        uint64_t v130 = &v178;
      }
      else {
        uint64_t v130 = (long long *)v178;
      }
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v124, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v177, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Need to build index for %s source at %s to pick up ancestral opinions", v128, v129, v130);
      if (SHIBYTE(v180) < 0) {
        operator delete((void *)v178);
      }
      if (SBYTE7(v156) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v61 = *(void *)(a1 + 40);
    int v62 = (uint64_t *)(a1 + 32);
    uint64_t v63 = (uint64_t *)(v61 + 48);
    if (!v61) {
      uint64_t v63 = (uint64_t *)(a1 + 32);
    }
    sub_216C27A28((uint64_t)&v178, (uint64_t)a6, &v177, (uint64_t)v164, v61, *v63, v50);
    uint64_t v160 = 0;
    *(_OWORD *)long long __p = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    int v159 = 0;
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::PcpExpressionVariablesDependencyData(&v161);
    memset(v162, 0, sizeof(v162));
    sub_216C1DC2C(a6, a1, *(unsigned int *)(a1 + 16), 0, 0, v51, &v178, *(void *)(a1 + 24), __p);
    *(void *)&long long v168 = pxrInternal__aapl__pxrReserved__::PcpPrimIndexOutputs::Append(*v62, (uint64_t)__p, (uint64_t)v164, (uint64_t)&v163);
    *((void *)&v168 + 1) = v64;
    if ((void)v168 && v64 != -1 && sub_216BBBDFC(2))
    {
      if (*(void *)v146) {
        int v62 = (uint64_t *)(*(void *)v146 + 48);
      }
      uint64_t v132 = *v62;
      sub_216C26D48((uint64_t *)a6);
      if (v153 >= 0) {
        unint64_t v135 = &v151;
      }
      else {
        unint64_t v135 = v151;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Added subtree for site %s to graph", v133, v134, v135);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v132, &v168, &v154);
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
      if (v153 < 0) {
        operator delete(v151);
      }
    }
    v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v162;
    sub_216BC1290((void ***)&v154);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData::~PcpExpressionVariablesDependencyData((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesDependencyData *)&v161);
    uint64_t v65 = v160;
    uint64_t v160 = 0;
    if (v65) {
      sub_216BBECE0((uint64_t)&v160, v65);
    }
    v154.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157 + 8;
    sub_216787968((void ***)&v154);
    sub_2168BBAAC((void ***)&v157, 0);
    if (__p[1])
    {
      *(void **)&long long v156 = __p[1];
      operator delete(__p[1]);
    }
    sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v180);
    sub_21697C414(&v179);
    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v178 + 1);
  }
  else
  {
    *(void *)&long long v168 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::InsertChild((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v177, (uint64_t *)a6, (uint64_t)v164, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)&v163);
    *((void *)&v168 + 1) = v66;
    if ((void)v168 && v66 != (char *)-1)
    {
      if ((v51 & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168, 1, v67);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v168, 1);
      }
      LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168);
      long long v69 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168);
      char HasPrimSpecs = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, v69);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSpecs(&v168, HasPrimSpecs);
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168) & 1) == 0
        && pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168)
        && !*(unsigned char *)(*(void *)(a1 + 24) + 97))
      {
        int v71 = pxrInternal__aapl__pxrReserved__::PcpComposeSitePermission((uint64_t *)a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 + 2));
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission((unint64_t *)&v168, v71, v72);
        int HasSymmetry = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasSymmetry((uint64_t *)a6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 + 2));
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168, HasSymmetry, v74);
      }
      if (sub_216BBBDFC(2))
      {
        uint64_t v136 = *(void *)(a1 + 40);
        if (v136) {
          uint64_t v137 = (uint64_t *)(v136 + 48);
        }
        else {
          uint64_t v137 = (uint64_t *)(a1 + 32);
        }
        uint64_t v138 = *v137;
        sub_216C26D48((uint64_t *)a6);
        if (v180 >= 0) {
          uint64_t v141 = &v178;
        }
        else {
          uint64_t v141 = (long long *)v178;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Added new node for site %s to graph", v139, v140, v141);
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingUpdate(v138, &v168, (const std::string *)__p);
        if (SBYTE7(v156) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v180) < 0) {
          operator delete((void *)v178);
        }
      }
    }
  }
  if ((void)v163)
  {
    pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)a1);
    uint64_t v75 = v163;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v163 + 16, (uint64_t)__p);
    sub_21697DE94((int *)(v75 + 96), (int *)&v161);
    sub_21697DEEC((int *)(v75 + 100), (int *)&v161 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v161 + 1);
    sub_21697C414(&v161);
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v158 + 8));
    *(void *)&long long v178 = &v157;
    sub_216787968((void ***)&v178);
    uint64_t v76 = *((void *)&v156 + 1);
    if (*((void *)&v156 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
    }
    uint64_t v77 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v77 + 8))(v77);
    }
    sub_216C27B4C(&v163, *(void *)(a1 + 32), (uint64_t *)(*(void *)(a1 + 32) + 40));
  }
  if (!(void)v168 || *((void *)&v168 + 1) == -1)
  {
    if (!(void)v163)
    {
      __p[0] = "pcp/primIndex.cpp";
      __p[1] = "_AddArc";
      *(void *)&long long v156 = 1814;
      *((void *)&v156 + 1) = "PcpNodeRef pxrInternal__aapl__pxrReserved__::_AddArc(Pcp_PrimIndexer *, const PcpArcType,"
                               " PcpNodeRef, const PcpNodeRef &, const PcpLayerStackSite &, const PcpMapExpression &, int"
                               ", int, _ArcOptions)";
      LOBYTE(v157) = 0;
      char v131 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Failed to create a node, but did not specify the error.", v66, v67);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "newNodeError", v131);
    }
    uint64_t v95 = 0;
  }
  else
  {
    BOOL v79 = (a10 & 0x100) != 0 && *(unsigned char *)(a1 + 201) != 0;
    sub_216C26ED4(a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168, (char *)(BYTE4(a10) & 1 | ((a10 & 0x100) >> 8)), (a10 >> 24) & 1, v79);
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168) == 1)
    {
      pxrInternal__aapl__pxrReserved__::PcpErrorArcPermissionDenied::New(&v178);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v177);
      uint64_t v151 = v80;
      uint64_t v152 = v81;
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t)&v154);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v154);
      uint64_t v82 = v178;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v178 + 16, (uint64_t)__p);
      sub_21697DE94((int *)(v82 + 96), (int *)&v161);
      sub_21697DEEC((int *)(v82 + 100), (int *)&v161 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v161 + 1);
      sub_21697C414(&v161);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v158 + 8));
      int64x2_t v186 = (void **)&v157;
      sub_216787968(&v186);
      uint64_t v83 = *((void *)&v156 + 1);
      if (*((void *)&v156 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
      }
      uint64_t v84 = __p[1];
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v84 + 8))(v84);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154.__r_.__value_.__r.__words[1] + 1);
      sub_21697C414(&v154.__r_.__value_.__r.__words[1]);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v154);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v177, (uint64_t)&v154);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v154);
      uint64_t v85 = v178;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v178 + 104, (uint64_t)__p);
      sub_21697DE94((int *)(v85 + 184), (int *)&v161);
      sub_21697DEEC((int *)(v85 + 188), (int *)&v161 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v161 + 1);
      sub_21697C414(&v161);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v158 + 8));
      uint64_t v151 = &v157;
      sub_216787968((void ***)&v151);
      uint64_t v86 = *((void *)&v156 + 1);
      if (*((void *)&v156 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
      }
      long long v87 = __p[1];
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v87 + 8))(v87);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154.__r_.__value_.__r.__words[1] + 1);
      sub_21697C414(&v154.__r_.__value_.__r.__words[1]);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v154);
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168, (uint64_t)&v154);
      pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v154);
      uint64_t v88 = v178;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v178 + 192, (uint64_t)__p);
      sub_21697DE94((int *)(v88 + 272), (int *)&v161);
      sub_21697DEEC((int *)(v88 + 276), (int *)&v161 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v161 + 1);
      sub_21697C414(&v161);
      pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v158 + 8));
      uint64_t v151 = &v157;
      sub_216787968((void ***)&v151);
      uint64_t v89 = *((void *)&v156 + 1);
      if (*((void *)&v156 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
      }
      long long v90 = __p[1];
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v90 + 8))(v90);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v154.__r_.__value_.__r.__words[1] + 1);
      sub_21697C414(&v154.__r_.__value_.__r.__words[1]);
      sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v154);
      long long v91 = v178;
      *(_DWORD *)(v178 + 28sub_216C01044((uint64_t *)this, 0) = a2;
      *(_OWORD *)long long __p = v91;
      if (*((void *)&v91 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v91 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      sub_216C27B4C((long long *)__p, *(void *)(a1 + 32), (uint64_t *)(*(void *)(a1 + 32) + 40));
      if (__p[1]) {
        sub_216784EC4((std::__shared_weak_count *)__p[1]);
      }
      sub_216C2731C(v168, *((uint64_t *)&v168 + 1), v92);
      if (*((void *)&v178 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v178 + 1));
      }
    }
    long long v93 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v168);
    if (*(void *)v93 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v93)) {
      sub_216C2731C(v168, *((uint64_t *)&v168 + 1), v94);
    }
    uint64_t v95 = v168;
  }
  if (*((void *)&v163 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v163 + 1));
  }
  sub_216BD0624(&v166, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v66);
LABEL_195:
  if (v176) {
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v176);
  }
  return v95;
}

void sub_216C269A8(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 169) < 0) {
    operator delete(*(void **)(v54 - 192));
  }
  if (a53) {
    sub_216784EC4(a53);
  }
  sub_216BD0624(v53, a2);
  sub_216C25308((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)(v54 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_216C26D48(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216C26E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C26E90(uint64_t a1)
{
  return a1;
}

void sub_216C26ED4(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4) {
    goto LABEL_49;
  }
  int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType != 6 && ArcType != 1)
  {
    if (!sub_216C27AB4((uint64_t *)this, v11, v12)) {
      goto LABEL_25;
    }
    *(void *)uint64_t v38 = 5;
    *(_OWORD *)&v38[8] = *(_OWORD *)this;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
    sub_216C23F48(a1, (uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
    goto LABEL_23;
  }
  int v13 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (v13 != 1 && v13 != 6)
  {
    *(void *)uint64_t v38 = "pcp/primIndex.cpp";
    *(void *)&v38[8] = "_FindStartingNodeForImpliedClasses";
    *(void *)&v38[16] = 589;
    long long __p = "PcpNodeRef pxrInternal__aapl__pxrReserved__::_FindStartingNodeForImpliedClasses(const PcpNodeRef &)";
    LOBYTE(v4sub_216C01044((uint64_t *)this, 0) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v38, "PcpIsClassBasedArc(n.GetArcType())", 0);
  }
  long long v37 = *(_OWORD *)this;
  while (1)
  {
    int v14 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v37);
    if (v14 != 6 && v14 != 1) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy((pxrInternal__aapl__pxrReserved__ *)&v37, (uint64_t)v38);
    long long v37 = *(_OWORD *)v38;
    int v16 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38);
    if (v16 == 6 || v16 == 1)
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38, &v35);
      Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v38[16]);
      BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
      sub_21697C414(&v35);
      if (HasPrefix) {
        break;
      }
    }
  }
  if ((void)v37) {
    BOOL v19 = *((void *)&v37 + 1) == -1;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    *(void *)uint64_t v38 = 5;
    *(_OWORD *)&v38[8] = v37;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    long long __p = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
    sub_216C23F48(a1, (uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
LABEL_23:
    sub_21697C414(v42);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p);
    }
  }
LABEL_25:
  if (*(unsigned char *)(a1 + 200))
  {
    *(_OWORD *)uint64_t v38 = *(_OWORD *)this;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)v38);
    uint64_t v23 = v20;
    uint64_t v24 = v21;
    if (*(void *)&v38[8] == v21 && *(void *)v38 == v20) {
      goto LABEL_41;
    }
    uint64_t v25 = 0;
    uint64_t v26 = -1;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38) == 6)
      {
        uint64_t v25 = *(void *)v38;
        uint64_t v26 = *(void *)&v38[8];
      }
      uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38);
      *(void *)uint64_t v38 = ParentNode;
      *(void *)&v38[8] = v21;
    }
    while (v21 != v24 || ParentNode != v23);
    if (!v25 || v26 == -1)
    {
LABEL_41:
      uint64_t v30 = *((void *)this + 1);
      v42[0] = *(void *)this;
      v42[1] = v30;
      uint64_t v31 = **(void **)(v42[0] + 16);
      uint64_t v32 = *(unsigned __int16 *)(v31 + 48 * v30 + 28);
      *(void *)uint64_t v38 = v42[0];
      *(void *)&v38[8] = v32;
      *(void *)&v38[16] = v31;
      long long __p = (void *)v42[0];
      uint64_t v33 = 0xFFFFLL;
      uint64_t v40 = 0xFFFFLL;
      uint64_t v41 = v31;
      while (v32 != v33 || *(void **)v38 != __p)
      {
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(v38, v21, v22);
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v34) == 6)
        {
          *(void *)uint64_t v38 = 11;
          *(_OWORD *)&v38[8] = *(_OWORD *)this;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          long long __p = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
          sub_216C23F48(a1, (uint64_t)v38);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
          goto LABEL_47;
        }
        sub_216BC28B8(v38);
        uint64_t v32 = *(void *)&v38[8];
        uint64_t v33 = v40;
      }
    }
    else
    {
      *(void *)uint64_t v38 = 11;
      *(void *)&v38[8] = v25;
      *(void *)&v38[16] = v26;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      long long __p = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v42 + 1);
      sub_216C23F48(a1, (uint64_t)v38);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v42 + 1);
LABEL_47:
      sub_21697C414(v42);
      if (SHIBYTE(v41) < 0) {
        operator delete(__p);
      }
    }
  }
LABEL_49:
  sub_216C235E4(a1, this, a3, a4, *(void *)(a1 + 40) == 0, a5, *(unsigned __int8 *)(*(void *)(a1 + 24) + 97));
}

void sub_216C272DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216C22DEC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216C2731C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  unint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18, 1, a3);
  uint64_t v16 = v18;
  uint64_t v17 = v19;
  uint64_t v6 = **(void **)(v18 + 16);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 48 * v19 + 28);
  uint64_t v10 = v18;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  uint64_t v13 = v18;
  uint64_t v8 = 0xFFFFLL;
  uint64_t v14 = 0xFFFFLL;
  uint64_t v15 = v6;
  while (v7 != v8 || v10 != v13)
  {
    uint64_t v9 = sub_216BC2828(&v10, v4, v5);
    sub_216C2731C(*v9, v9[1]);
    unint64_t result = (unint64_t)sub_216BC28B8(&v10);
    uint64_t v7 = v11;
    uint64_t v8 = v14;
  }
  return result;
}

uint64_t sub_216C273B4(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1))
  {
    return pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1);
  }
  else
  {
    uint64_t v3 = *((void *)a1 + 2);
    if (v3) {
      return **(unsigned int **)(v3 + 40);
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_216C27414(uint64_t *a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
    *a1 = result;
    a1[1] = v3;
  }
  else
  {
    uint64_t v4 = a1[2];
    if (v4)
    {
      *(_OWORD *)a1 = *(_OWORD *)(v4 + 24);
      a1[2] = *(void *)v4;
    }
    else
    {
      *a1 = 0;
      a1[1] = -1;
    }
  }
  return result;
}

uint64_t sub_216C27470(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 84));
  sub_21697C414((_DWORD *)(a1 + 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 56));
  uint64_t v5 = (void **)(a1 + 32);
  sub_216787968(&v5);
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_216C27548(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21682B950(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[96 * v4];
  uint64_t v15 = (uint64_t)v14;
  uint64_t v16 = &v10[96 * v9];
  sub_216C02920((uint64_t)v14, a2);
  *((_DWORD *)v14 + 22) = *(_DWORD *)(a2 + 88);
  v15 += 96;
  sub_216C27660(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216C2782C((atomic_uint *)&v13);
  return v11;
}

void sub_216C2764C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C2782C((atomic_uint *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C27660(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C276D8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C276D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      sub_216C02920(v7 - 96, v9 - 96);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      v9 -= 96;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216C277A0((uint64_t)v12);
  return v10;
}

void sub_216C2778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C277A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C277D8((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C277D8(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216BFDC84(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_216C2782C(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_216C27860(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 96;
      uint64_t result = sub_216BFDC84(v4, v1 - 96);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216C278A8(int *a1, int *a2)
{
  sub_216C026B0((uint64_t)v6, (uint64_t)a1);
  int v13 = a1[22];
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)a1, (uint64_t)a2);
  sub_21697DE94(a1 + 20, a2 + 20);
  sub_21697DEEC(a1 + 21, a2 + 21);
  a1[22] = a2[22];
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)a2, (uint64_t)v6);
  sub_21697DE94(a2 + 20, &v11);
  sub_21697DEEC(a2 + 21, &v12);
  a2[22] = v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v10);
  long long v14 = (void **)&v9;
  sub_216787968(&v14);
  uint64_t v4 = v8;
  if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = v7;
  if (v7)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216C27A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C27470((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C27A28(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)a1 = a5;
  int v13 = (_DWORD *)(a2 + 12);
  *(void *)(a1 + 8) = *(void *)a2;
  sub_2168BD80C((uint64_t *)(a1 + 8));
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 8));
  sub_21698105C((_DWORD *)(a1 + 20), v13);
  *(_OWORD *)(a1 + 24) = *a3;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = a4;
  *(void *)(a1 + 48) = a6;
  *(unsigned char *)(a1 + 56) = a7;
  return a1;
}

uint64_t sub_216C27AB4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a1[1];
  uint64_t v17 = *a1;
  uint64_t v18 = v3;
  uint64_t v4 = **(void **)(v17 + 16);
  uint64_t v5 = *(unsigned __int16 *)(v4 + 48 * v3 + 28);
  uint64_t v11 = v17;
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  uint64_t v14 = v17;
  uint64_t v6 = 0xFFFFLL;
  uint64_t v15 = 0xFFFFLL;
  uint64_t v16 = v4;
  while (v5 != v6 || v11 != v14)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v11, a2, a3);
    int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v7);
    if (ArcType == 1 || ArcType == 6) {
      return 1;
    }
    sub_216BC28B8(&v11);
    uint64_t v5 = v12;
    uint64_t v6 = v15;
  }
  return 0;
}

long long *sub_216C27B4C(long long *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(*(void *)result + 8);
  if ((v5 - 2) <= 2)
  {
    for (uint64_t i = *a3; i != a3[1]; i += 16)
    {
      if (*(_DWORD *)(*(void *)i + 8) == v5) {
        return result;
      }
    }
  }
  sub_216C27BFC(a3, result);
  uint64_t v9 = *(void ***)(a2 + 32);
  uint64_t v8 = (void ***)(a2 + 32);
  uint64_t v7 = v9;
  if (!v9)
  {
    uint64_t v10 = (void **)operator new(0x18uLL);
    v10[1] = 0;
    void v10[2] = 0;
    char *v10 = 0;
    sub_2168BBAAC(v8, v10);
    uint64_t v7 = *v8;
  }

  return (long long *)sub_216C27BFC((uint64_t *)v7, v4);
}

void **sub_216C27BFC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    _OWORD v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v18[2] = v15 + 16;
    sub_216BD6608(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216C27D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void sub_216C27D18(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v151 = a1;
  uint64_t v152 = a2;
  uint64_t v5 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v6 = 0;
    uint64_t v132 = a3 + 4;
    do
    {
      uint64_t v7 = v5 + 56 * v6;
      uint64_t v8 = *a5;
      long long v150 = *(_OWORD *)(v7 + 32);
      if (sub_216BBBDFC(2))
      {
        uint64_t v121 = a3[5];
        uint64_t v122 = (pxrInternal__aapl__pxrReserved__ **)v132;
        if (v121) {
          uint64_t v122 = (pxrInternal__aapl__pxrReserved__ **)(v121 + 48);
        }
        uint64_t v123 = v8 + 56 * v6;
        uint64_t v124 = (void *)(v123 + 32);
        if (*(char *)(v123 + 55) < 0) {
          uint64_t v124 = (void *)*v124;
        }
        int v125 = *v122;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 56 * v6 + 24));
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v125, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v151, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found %s to @%s@<%s>", v127, "reference", v124, Text);
      }
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 56 * v6 + 24);
      uint64_t v133 = v8 + 56 * v6;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9)
        || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v9)
        && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v9)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(v9))
      {
        char v21 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New(&__str);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v151);
        v134.__r_.__value_.__r.__words[0] = v10;
        v134.__r_.__value_.__l.__size_ = v11;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v134, (uint64_t)&v137);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v137);
        std::string::size_type v12 = __str.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 16, (uint64_t)&v143);
        sub_21697DE94((int *)(v12 + 96), &v148);
        sub_21697DEEC((int *)(v12 + 100), v149);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
        sub_21697C414(&v148);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
        *(void *)&long long v139 = v146;
        sub_216787968((void ***)&v139);
        uint64_t v13 = v145;
        if (v145 && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        uint64_t v14 = *((void *)&v143 + 1);
        if (*((void *)&v143 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v137 + 3);
        sub_21697C414((_DWORD *)&v137 + 2);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v137);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t)&v137);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v137);
        std::string::size_type v15 = __str.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 104, (uint64_t)&v143);
        sub_21697DE94((int *)(v15 + 184), &v148);
        sub_21697DEEC((int *)(v15 + 188), v149);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
        sub_21697C414(&v148);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
        v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
        sub_216787968((void ***)&v134);
        uint64_t v16 = v145;
        if (v145 && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        uint64_t v17 = *((void *)&v143 + 1);
        if (*((void *)&v143 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v137 + 3);
        sub_21697C414((_DWORD *)&v137 + 2);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v137);
        std::string::size_type v18 = __str.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(__str.__r_.__value_.__r.__words[0] + 192), v9);
        sub_2169C48D4((int *)(v18 + 196), (_DWORD *)(v5 + 56 * v6 + 28));
        std::string::size_type v19 = __str.__r_.__value_.__r.__words[0];
        *(void *)(__str.__r_.__value_.__r.__words[0] + 20sub_216C01044((uint64_t *)this, 0) = *(void *)v133;
        sub_2168CD2FC((atomic_uint **)(v19 + 208), (atomic_uint **)(v133 + 8));
        long long v20 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 216) = 4;
        long long v143 = v20;
        if (*((void *)&v20 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C(&v143, *v132, (uint64_t *)(*v132 + 40));
        if (*((void *)&v143 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
        }
        if (__str.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        char v21 = 1;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v150)
        && (*(void *)&long long v143 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v150),
            *((void *)&v143 + 1) = v22,
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v143)))
      {
        *(void *)&long long v150 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)(v8 + 56 * v6 + 16), (double *)&v150);
        *((void *)&v150 + 1) = v23;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::New(&__str);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v151);
        v134.__r_.__value_.__r.__words[0] = v24;
        v134.__r_.__value_.__l.__size_ = v25;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v134, (uint64_t)&v137);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v137);
        std::string::size_type v26 = __str.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 16, (uint64_t)&v143);
        sub_21697DE94((int *)(v26 + 96), &v148);
        sub_21697DEEC((int *)(v26 + 100), v149);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
        sub_21697C414(&v148);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
        *(void *)&long long v139 = v146;
        sub_216787968((void ***)&v139);
        uint64_t v27 = v145;
        if (v145 && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        }
        uint64_t v28 = *((void *)&v143 + 1);
        if (*((void *)&v143 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v137 + 3);
        sub_21697C414((_DWORD *)&v137 + 2);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v137);
        std::string::size_type v29 = __str.__r_.__value_.__r.__words[0];
        *(void *)(__str.__r_.__value_.__r.__words[0] + 104) = *(void *)v133;
        sub_2168CD2FC((atomic_uint **)(v29 + 112), (atomic_uint **)(v133 + 8));
        Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151);
        std::string::size_type v31 = __str.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(__str.__r_.__value_.__r.__words[0] + 120), Path);
        sub_2169C48D4((int *)(v31 + 124), Path + 1);
        std::string::operator=((std::string *)(__str.__r_.__value_.__r.__words[0] + 128), (const std::string *)(v8 + 56 * v6 + 32));
        std::string::size_type v32 = __str.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(__str.__r_.__value_.__r.__words[0] + 152), v9);
        sub_2169C48D4((int *)(v32 + 156), (_DWORD *)(v5 + 56 * v6 + 28));
        long long v33 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_OWORD *)(__str.__r_.__value_.__r.__words[0] + 16sub_216C01044((uint64_t *)this, 0) = v150;
        *(_DWORD *)(v33 + 176) = 4;
        long long v143 = v33;
        if (*((void *)&v33 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C(&v143, *v132, (uint64_t *)(*v132 + 40));
        if (*((void *)&v143 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
        }
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v143, 0.0, 1.0);
        long long v150 = v143;
        if (__str.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      if (v21) {
        goto LABEL_175;
      }
      uint64_t v141 = 0;
      uint64_t v142 = 0;
      if (*(char *)(v7 + 23) < 0)
      {
        uint64_t v34 = *(void *)(v7 + 8);
        if (!v34)
        {
LABEL_67:
          LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151);
          uint64_t v48 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
          uint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v48);
          uint64_t v50 = Identifier[1];
          if (v50)
          {
            if (*(unsigned char *)(sub_216850B68(Identifier + 1) + 14)) {
              uint64_t v50 = *Identifier;
            }
            else {
              uint64_t v50 = 0;
            }
          }
          *(void *)&long long v143 = v50;
          sub_2168BD80C((uint64_t *)&v143);
          uint64_t v51 = v142;
          uint64_t v142 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v143;
          *(void *)&long long v143 = 0;
          sub_2168BD378((int)&v142, v51);
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v143);
          int v52 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151);
          char v53 = v141;
          uint64_t v141 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v52;
          sub_2168BD80C(v52);
          sub_2168BD378((int)&v141, v53);
LABEL_133:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v135);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v135 + 1);
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9)) {
            goto LABEL_138;
          }
          long long v91 = sub_216ABBA60((uint64_t *)&v143, (uint64_t *)&v142);
          sub_216C296EC(v91, &__str);
          sub_21697DE94((int *)v135, (int *)&__str);
          sub_21697DEEC((int *)v135 + 1, (int *)__str.__r_.__value_.__r.__words + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__str.__r_.__value_.__r.__words + 1);
          sub_21697C414(&__str);
          uint64_t v92 = *((void *)&v143 + 1);
          if (*((void *)&v143 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v135))
          {
LABEL_138:
            uint64_t v93 = 1;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New(&__str);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v151);
            v134.__r_.__value_.__r.__words[0] = v94;
            v134.__r_.__value_.__l.__size_ = v95;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v134, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v137);
            std::string::size_type v96 = __str.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 16, (uint64_t)&v143);
            sub_21697DE94((int *)(v96 + 96), &v148);
            sub_21697DEEC((int *)(v96 + 100), v149);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
            sub_21697C414(&v148);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
            *(void *)&long long v139 = v146;
            sub_216787968((void ***)&v139);
            uint64_t v97 = v145;
            if (v145
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
            }
            uint64_t v98 = *((void *)&v143 + 1);
            if (*((void *)&v143 + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v137 + 3);
            sub_21697C414((_DWORD *)&v137 + 2);
            sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v137);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t)&v137);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v137);
            std::string::size_type v99 = __str.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(__str.__r_.__value_.__r.__words[0] + 104, (uint64_t)&v143);
            sub_21697DE94((int *)(v99 + 184), &v148);
            sub_21697DEEC((int *)(v99 + 188), v149);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
            sub_21697C414(&v148);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
            v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
            sub_216787968((void ***)&v134);
            uint64_t v100 = v145;
            if (v145
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
            }
            uint64_t v101 = *((void *)&v143 + 1);
            if (*((void *)&v143 + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v137 + 3);
            sub_21697C414((_DWORD *)&v137 + 2);
            sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v137);
            sub_216ABBA60((uint64_t *)&v143, (uint64_t *)&v142);
            uint64_t v102 = *(atomic_uint **)(__str.__r_.__value_.__r.__words[0] + 216);
            *(_OWORD *)(__str.__r_.__value_.__r.__words[0] + 208) = v143;
            *((void *)&v143 + 1) = 0;
            if (v102)
            {
              if (atomic_fetch_add_explicit(v102 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v102 + 8))(v102);
              }
              uint64_t v102 = (atomic_uint *)*((void *)&v143 + 1);
              *(void *)&long long v143 = 0;
              if (*((void *)&v143 + 1)
                && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                uint64_t v102 = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v102 + 8))(v102);
              }
            }
            uint64_t v103 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v102);
            unint64_t v104 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v104) {
              unint64_t v104 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v103, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v104 + 96), &v143);
            std::string::size_type v105 = __str.__r_.__value_.__r.__words[0];
            sub_21697DE94((int *)(__str.__r_.__value_.__r.__words[0] + 224), (int *)&v143);
            sub_21697DEEC((int *)(v105 + 228), (int *)&v143 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
            sub_21697C414(&v143);
            std::string::size_type v106 = __str.__r_.__value_.__r.__words[0];
            *(void *)(__str.__r_.__value_.__r.__words[0] + 192) = *(void *)v133;
            sub_2168CD2FC((atomic_uint **)(v106 + 200), (atomic_uint **)(v133 + 8));
            long long v107 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 232) = 4;
            long long v143 = v107;
            if (*((void *)&v107 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v107 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_216C27B4C(&v143, *v132, (uint64_t *)(*v132 + 40));
            uint64_t v108 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v143 + 1);
            if (*((void *)&v143 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
            }
            uint64_t v109 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v108);
            sub_2169C487C((int *)v135, v109);
            sub_2169C48D4((int *)v135 + 1, v109 + 1);
            if (__str.__r_.__value_.__l.__size_) {
              sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
            }
            uint64_t v93 = 0;
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v135)) {
            uint64_t v110 = v135;
          }
          else {
            uint64_t v110 = (void ***)v9;
          }
          sub_216C297A8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, v110, a3[3], (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v150, (atomic_uint **)&__str);
          if (!v34)
          {
            pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((uint64_t)&__str, v111, v112, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v137);
            std::string::size_type v113 = v137;
            *(void *)&long long v137 = 0;
            *(void *)&long long v143 = __str.__r_.__value_.__r.__words[0];
            __str.__r_.__value_.__r.__words[0] = v113;
            sub_216BD0624((atomic_uint **)&v143, v114);
            sub_216BD0624((atomic_uint **)&v137, v115);
          }
          int IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v110);
          v117 = v151;
          uint64_t v118 = v152;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v143, &v141, v110);
          uint64_t v119 = 256;
          if (IsRootPrimPath) {
            uint64_t v119 = 0;
          }
          unint64_t v128 = v93 | v128 & 0xFFFFFF0000000000 | v119;
          sub_216C25080((uint64_t)a3, 4u, (uint64_t)v117, v118, &v151, &v143, (uint64_t *)&__str, v6, v128);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 3);
          sub_21697C414((_DWORD *)&v143 + 2);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v143);
          sub_216BD0624((atomic_uint **)&__str, v120);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v135 + 1);
          sub_21697C414(v135);
          goto LABEL_174;
        }
      }
      else
      {
        uint64_t v34 = *(unsigned __int8 *)(v7 + 23);
        if (!*(unsigned char *)(v7 + 23)) {
          goto LABEL_67;
        }
      }
      memset(&__str, 0, sizeof(__str));
      int v35 = (const std::string *)(v8 + 56 * v6 + 32);
      if (pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(*(void *)a3[3], (uint64_t *)v133, (uint64_t)v35, (long long *)&__str))
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::New(&v137);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v151);
        *(void *)&long long v139 = v36;
        *((void *)&v139 + 1) = v37;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v139, (uint64_t)&v134);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v134);
        uint64_t v38 = v137;
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v137 + 16, (uint64_t)&v143);
        sub_21697DE94((int *)(v38 + 96), &v148);
        sub_21697DEEC((int *)(v38 + 100), v149);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
        sub_21697C414(&v148);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
        v135[0] = (void **)v146;
        sub_216787968(v135);
        uint64_t v39 = v145;
        if (v145 && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
        }
        uint64_t v40 = *((void *)&v143 + 1);
        if (*((void *)&v143 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134.__r_.__value_.__r.__words[1] + 1);
        sub_21697C414(&v134.__r_.__value_.__r.__words[1]);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v134);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t)&v134);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v134);
        uint64_t v41 = v137;
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v137 + 104, (uint64_t)&v143);
        sub_21697DE94((int *)(v41 + 184), &v148);
        sub_21697DEEC((int *)(v41 + 188), v149);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
        sub_21697C414(&v148);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
        *(void *)&long long v139 = v146;
        sub_216787968((void ***)&v139);
        uint64_t v42 = v145;
        if (v145 && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
        }
        uint64_t v43 = *((void *)&v143 + 1);
        if (*((void *)&v143 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134.__r_.__value_.__r.__words[1] + 1);
        sub_21697C414(&v134.__r_.__value_.__r.__words[1]);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v134);
        uint64_t v44 = v137;
        sub_2169C487C((int *)(v137 + 192), v9);
        sub_2169C48D4((int *)(v44 + 196), (_DWORD *)(v5 + 56 * v6 + 28));
        std::string::operator=((std::string *)(v137 + 200), v35);
        std::string::operator=((std::string *)(v137 + 224), &__str);
        uint64_t v45 = v137;
        *(_DWORD *)(v137 + 264) = 4;
        *(void *)(v45 + 248) = *(void *)v133;
        sub_2168CD2FC((atomic_uint **)(v45 + 256), (atomic_uint **)(v133 + 8));
        long long v143 = v137;
        if (*((void *)&v137 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C(&v143, *v132, (uint64_t *)(*v132 + 40));
        if (*((void *)&v143 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
        }
        if (*((void *)&v137 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v137 + 1));
        }
        int v46 = 4;
      }
      else
      {
        *((void *)&v137 + 1) = 0;
        uint64_t v138 = 0;
        *(void *)&long long v137 = (char *)&v137 + 8;
        pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(v5 + 56 * v6, a3[3] + 72, (uint64_t **)&v137);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v136);
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v5 + 56 * v6, &v137, &v143);
        uint64_t v54 = v142;
        uint64_t v142 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v143;
        *(void *)&long long v143 = 0;
        sub_2168BD378((int)&v142, v54);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v143);
        if (v142)
        {
          int v55 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151);
          int v56 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v55);
          uint64_t v57 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v56);
          sub_216ABBA60((uint64_t *)&v134, (uint64_t *)&v142);
          long long v139 = 0uLL;
          int v58 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151);
          uint64_t v59 = sub_216BBBFA8(v58);
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(&v143, &v134, &v139, v57 + 32, *(void *)(v59 + 392));
          uint64_t v60 = *((void *)&v139 + 1);
          if (*((void *)&v139 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v139 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
          }
          std::string::size_type size = v134.__r_.__value_.__l.__size_;
          if (v134.__r_.__value_.__l.__size_
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v134.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
          }
          pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(*(void *)a3[3], (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)&v143, a3[4] + 40, (uint64_t *)&v134);
          int v62 = v141;
          uint64_t v141 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v134.__r_.__value_.__r.__words[0];
          v134.__r_.__value_.__r.__words[0] = 0;
          sub_2168BD378((int)&v141, v62);
          uint64_t v63 = sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v134);
          if ((pxrInternal__aapl__pxrReserved__::PcpIsTimeScalingForLayerTimeCodesPerSecondDisabled((pxrInternal__aapl__pxrReserved__ *)v63) & 1) == 0)
          {
            uint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v133);
            double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v64);
            double v66 = *(double *)(sub_216BBBFA8((uint64_t *)&v141) + 168);
            if (TimeCodesPerSecond != v66) {
              *((double *)&v150 + 1) = TimeCodesPerSecond * *((double *)&v150 + 1) / v66;
            }
          }
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
          sub_216787968((void ***)&v134);
          uint64_t v67 = v145;
          if (v145
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
          }
          uint64_t v68 = *((void *)&v143 + 1);
          if (*((void *)&v143 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
          }
          int v46 = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::New(&v139);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(&v151);
          v135[0] = v69;
          v135[1] = v70;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v135, (uint64_t)&v134);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v134);
          uint64_t v71 = v139;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v139 + 16, (uint64_t)&v143);
          sub_21697DE94((int *)(v71 + 96), &v148);
          sub_21697DEEC((int *)(v71 + 100), v149);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
          sub_21697C414(&v148);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
          char v153 = (void **)v146;
          sub_216787968(&v153);
          uint64_t v72 = v145;
          if (v145
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
          }
          uint64_t v73 = *((void *)&v143 + 1);
          if (*((void *)&v143 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134.__r_.__value_.__r.__words[1] + 1);
          sub_21697C414(&v134.__r_.__value_.__r.__words[1]);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v134);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v151, (uint64_t)&v134);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)&v143, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v134);
          uint64_t v74 = v139;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v139 + 104, (uint64_t)&v143);
          sub_21697DE94((int *)(v74 + 184), &v148);
          sub_21697DEEC((int *)(v74 + 188), v149);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v149);
          sub_21697C414(&v148);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v147);
          v135[0] = (void **)v146;
          sub_216787968(v135);
          uint64_t v75 = v145;
          if (v145
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v145 + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
          }
          uint64_t v76 = *((void *)&v143 + 1);
          if (*((void *)&v143 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v134.__r_.__value_.__r.__words[1] + 1);
          sub_21697C414(&v134.__r_.__value_.__r.__words[1]);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v134);
          uint64_t v77 = v139;
          sub_2169C487C((int *)(v139 + 192), v9);
          sub_2169C48D4((int *)(v77 + 196), (_DWORD *)(v5 + 56 * v6 + 28));
          std::string::operator=((std::string *)(v139 + 200), v35);
          std::string::operator=((std::string *)(v139 + 224), (const std::string *)(v5 + 56 * v6));
          uint64_t v78 = v139;
          *(_DWORD *)(v139 + 264) = 4;
          *(void *)(v78 + 248) = *(void *)v133;
          sub_2168CD2FC((atomic_uint **)(v78 + 256), (atomic_uint **)(v133 + 8));
          unint64_t v79 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v79) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
          unint64_t v80 = v136;
          unint64_t v81 = atomic_load((unint64_t *)(v79 + 144));
          if (v80 < v81
            && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v136, (atomic_ullong *)v79))
          {
            long long v143 = 0uLL;
            unint64_t v144 = 0;
            uint64_t v82 = sub_216862604(&v136, 0);
            uint64_t v83 = sub_216878D10();
            if (v82 != (void *)v83)
            {
              unint64_t v84 = *((void *)&v143 + 1);
              do
              {
                uint64_t v85 = (long long *)(v82 + 7);
                if (v84 >= v144)
                {
                  unint64_t v84 = sub_2167E9A44((uint64_t *)&v143, v85);
                }
                else
                {
                  if (*((char *)v82 + 79) < 0)
                  {
                    sub_216778F24((unsigned char *)v84, (void *)v82[7], v82[8]);
                  }
                  else
                  {
                    long long v86 = *v85;
                    *(void *)(v84 + 16) = v82[9];
                    *(_OWORD *)unint64_t v84 = v86;
                  }
                  v84 += 24;
                }
                *((void *)&v143 + 1) = v84;
                uint64_t v82 = (void *)v82[1];
              }
              while (v82 != (void *)v83);
            }
            long long v87 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v87) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            uint64_t v88 = sub_216862604(&v136, 0);
            LOBYTE(v135[0]) = 0;
            uint64_t v89 = (void *)sub_2168520EC(v87 + 19, v135);
            if (v89 != v88) {
              pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v87, v88, v89);
            }
            sub_216881C38("; ", (std::string *)v143, *((std::string **)&v143 + 1), &v134);
            long long v90 = (void **)(v139 + 272);
            if (*(char *)(v139 + 295) < 0) {
              operator delete(*v90);
            }
            *(std::string *)long long v90 = v134;
            v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
            sub_216782F20((void ***)&v134);
          }
          long long v143 = v139;
          if (*((void *)&v139 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v139 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          sub_216C27B4C(&v143, *v132, (uint64_t *)(*v132 + 40));
          if (*((void *)&v143 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
          }
          if (*((void *)&v139 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v139 + 1));
          }
          int v46 = 4;
        }
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v136);
        sub_2167877AC((uint64_t)&v137, *((void **)&v137 + 1));
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!v46) {
          goto LABEL_133;
        }
      }
      else if (!v46)
      {
        goto LABEL_133;
      }
LABEL_174:
      sub_216BBEEA4(&v141);
      sub_216ABB798(&v142);
LABEL_175:
      ++v6;
      uint64_t v5 = *a4;
    }
    while (v6 < 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 3));
  }
}

void sub_216C29338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  a29 = v48 - 240;
  sub_216782F20((void ***)&a29);
  if (a42) {
    sub_216784EC4(a42);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a34);
  sub_2167877AC((uint64_t)&a36, a39);
  if (a48 < 0) {
    operator delete(__p);
  }
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v48 - 256));
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v48 - 248));
  _Unwind_Resume(a1);
}

_DWORD *sub_216C296EC@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(a1);
  DefaultPrilong long m = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v3, (atomic_uint **)&v9);
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(DefaultPrim);
  }
  IsValiduint64_t Identifier = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString);
  if (IsValidIdentifier)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsValidIdentifier);
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, a2);
  }
  else
  {
    *(void *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

_DWORD *sub_216C297A8@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, _DWORD *a2@<X0>, uint64_t a3@<X2>, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a4@<X3>, atomic_uint **a5@<X8>)
{
  v26[7] = *(_DWORD **)MEMORY[0x263EF8340];
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, &v24);
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v22 = (uint64_t *)v23;
  v26[0] = a2;
  std::string::size_type v11 = sub_216C089DC(&v22, (unint64_t *)a2, (uint64_t)&unk_2174BFD90, v26);
  sub_2169C487C((int *)v11 + 9, &v24);
  sub_2169C48D4((int *)v11 + 10, &v25);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(&v22, a4, (uint64_t)v26);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Constant((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v26, a5);
  sub_216BBED8C((uint64_t)v26);
  if (!*(unsigned char *)(a3 + 97))
  {
    LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetExpressionForRelocatesAtPath((uint64_t *)&v20, v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)&v20, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)a5, v14, (uint64_t *)&v21);
    std::string::size_type v15 = v21;
    char v21 = 0;
    v26[0] = *a5;
    *a5 = v15;
    sub_216BD0624(v26, v16);
    sub_216BD0624(&v21, v17);
    sub_216BD0624(&v20, v18);
  }
  sub_21698F21C((uint64_t)&v22, v23[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  return sub_21697C414(&v24);
}

void sub_216C2991C(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14)
{
  sub_216BD0624(&a9, a2);
  sub_216BD0624(v14, v16);
  sub_21698F21C((uint64_t)&a11, a12);
  sub_21697B754(&a14);
  _Unwind_Resume(a1);
}

void sub_216C29988(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_216BF1FD0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_216C29A20@<W0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, uint64_t a2@<X0>, int *a3@<X8>)
{
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, &v21);
  std::string::size_type v10 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v8, v9);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  std::string::size_type v11 = (void *)(a2 + 40);
  while (1)
  {
    std::string::size_type v11 = (void *)*v11;
    BOOL result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
    if (!v11 || !result) {
      break;
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)(v11[5] + 40), v13, v14);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v21);
    sub_21697DE94(a3, &v21);
    sub_21697DEEC(a3 + 1, &v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v11 + 3));
    long long v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v17, v18, v19);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3, &v21);
    sub_21697DE94(a3, &v21);
    sub_21697DEEC(a3 + 1, &v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
  }
  return result;
}

void sub_216C29B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216C29B7C(unint64_t a1, unint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  v161[2] = *(void ***)MEMORY[0x263EF8340];
  v155.n128_u64[0] = a1;
  v155.n128_u64[1] = a2;
  uint64_t v5 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v6 = 0;
    uint64_t v140 = a3 + 4;
    do
    {
      uint64_t v7 = v5 + 48 * v6;
      uint64_t v8 = *a5;
      long long v154 = *(_OWORD *)(v7 + 32);
      if (sub_216BBBDFC(2))
      {
        uint64_t v129 = a3[5];
        uint64_t v130 = (pxrInternal__aapl__pxrReserved__ **)v140;
        if (v129) {
          uint64_t v130 = (pxrInternal__aapl__pxrReserved__ **)(v129 + 48);
        }
        uint64_t v131 = v8 + 56 * v6;
        uint64_t v132 = (void *)(v131 + 32);
        if (*(char *)(v131 + 55) < 0) {
          uint64_t v132 = (void *)*v132;
        }
        uint64_t v133 = *v130;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 48 * v6 + 24));
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v133, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v155, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found %s to @%s@<%s>", v135, "payload", v132, Text);
      }
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 48 * v6 + 24);
      uint64_t v10 = v8 + 56 * v6;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9)
        || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v9)
        && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v9)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(v9))
      {
        char v22 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New(&v158);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v155);
        __str.__r_.__value_.__r.__words[0] = v11;
        __str.__r_.__value_.__l.__size_ = v12;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__str, (uint64_t)&v156);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
        std::string::size_type v13 = v158.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
        sub_21697DE94((int *)(v13 + 96), &v152);
        sub_21697DEEC((int *)(v13 + 100), v153);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
        sub_21697C414(&v152);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
        uint64_t v142 = (uint64_t *)v150;
        sub_216787968((void ***)&v142);
        uint64_t v14 = v149;
        if (v149 && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        std::string::size_type v15 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v15 + 8))(v15);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
        sub_21697C414(v157);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155, (uint64_t)&v156);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
        std::string::size_type v16 = v158.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 104, (uint64_t)__p);
        sub_21697DE94((int *)(v16 + 184), &v152);
        sub_21697DEEC((int *)(v16 + 188), v153);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
        sub_21697C414(&v152);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
        sub_216787968((void ***)&__str);
        uint64_t v17 = v149;
        if (v149 && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        std::string::size_type v18 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v18 + 8))(v18);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
        sub_21697C414(v157);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
        std::string::size_type v19 = v158.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(v158.__r_.__value_.__r.__words[0] + 192), v9);
        sub_2169C48D4((int *)(v19 + 196), (_DWORD *)(v5 + 48 * v6 + 28));
        std::string::size_type v20 = v158.__r_.__value_.__r.__words[0];
        *(void *)(v158.__r_.__value_.__r.__words[0] + 20sub_216C01044((uint64_t *)this, 0) = *(void *)v10;
        sub_2168CD2FC((atomic_uint **)(v20 + 208), (atomic_uint **)(v10 + 8));
        long long v21 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        *(_DWORD *)(v158.__r_.__value_.__r.__words[0] + 216) = 5;
        *(_OWORD *)long long __p = v21;
        if (*((void *)&v21 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C((long long *)__p, *v140, (uint64_t *)(*v140 + 40));
        if (__p[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p[1]);
        }
        if (v158.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v158.__r_.__value_.__l.__size_);
        }
        char v22 = 1;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v154)
        && (__p[0] = COERCE_VOID_(pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetInverse((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v154)),
            __p[1] = v23,
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsValid((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)__p)))
      {
        *(void *)&long long v154 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)(v8 + 56 * v6 + 16), (double *)&v154);
        *((void *)&v154 + 1) = v24;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidReferenceOffset::New(&v158);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v155);
        __str.__r_.__value_.__r.__words[0] = v25;
        __str.__r_.__value_.__l.__size_ = v26;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__str, (uint64_t)&v156);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
        std::string::size_type v27 = v158.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
        sub_21697DE94((int *)(v27 + 96), &v152);
        sub_21697DEEC((int *)(v27 + 100), v153);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
        sub_21697C414(&v152);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
        uint64_t v142 = (uint64_t *)v150;
        sub_216787968((void ***)&v142);
        uint64_t v28 = v149;
        if (v149 && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        std::string::size_type v29 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v29 + 8))(v29);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
        sub_21697C414(v157);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
        std::string::size_type v30 = v158.__r_.__value_.__r.__words[0];
        *(void *)(v158.__r_.__value_.__r.__words[0] + 104) = *(void *)v10;
        sub_2168CD2FC((atomic_uint **)(v30 + 112), (atomic_uint **)(v10 + 8));
        Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155);
        std::string::size_type v32 = v158.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(v158.__r_.__value_.__r.__words[0] + 120), Path);
        sub_2169C48D4((int *)(v32 + 124), Path + 1);
        std::string::operator=((std::string *)(v158.__r_.__value_.__r.__words[0] + 128), (const std::string *)(v8 + 56 * v6 + 32));
        std::string::size_type v33 = v158.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(v158.__r_.__value_.__r.__words[0] + 152), v9);
        sub_2169C48D4((int *)(v33 + 156), (_DWORD *)(v5 + 48 * v6 + 28));
        long long v34 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        *(_OWORD *)(v158.__r_.__value_.__r.__words[0] + 16sub_216C01044((uint64_t *)this, 0) = v154;
        *(_DWORD *)(v34 + 176) = 5;
        *(_OWORD *)long long __p = v34;
        if (*((void *)&v34 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C((long long *)__p, *v140, (uint64_t *)(*v140 + 40));
        uint64_t v10 = v8 + 56 * v6;
        if (__p[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p[1]);
        }
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, 0.0, 1.0);
        long long v154 = *(_OWORD *)__p;
        if (v158.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v158.__r_.__value_.__l.__size_);
        }
      }
      if (v22) {
        goto LABEL_187;
      }
      uint64_t v145 = 0;
      uint64_t v146 = 0;
      if (*(char *)(v7 + 23) < 0)
      {
        uint64_t v35 = *(void *)(v7 + 8);
        if (!v35)
        {
LABEL_67:
          LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155);
          uint64_t v50 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
          uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v50);
          int v52 = *(void **)(Identifier + 8);
          if (v52)
          {
            if (*(unsigned char *)(sub_216850B68((uint64_t *)(Identifier + 8)) + 14)) {
              int v52 = *(void **)Identifier;
            }
            else {
              int v52 = 0;
            }
          }
          __p[0] = v52;
          sub_2168BD80C((uint64_t *)__p);
          char v53 = v146;
          uint64_t v146 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p[0];
          __p[0] = 0;
          sub_2168BD378((int)&v146, v53);
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
          uint64_t v54 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155);
          int v55 = v145;
          uint64_t v145 = *v54;
          sub_2168BD80C((uint64_t *)v54);
          sub_2168BD378((int)&v145, v55);
LABEL_145:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v159);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v159 + 1);
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v9)) {
            goto LABEL_150;
          }
          sub_216ABBA60((uint64_t *)__p, (uint64_t *)&v146);
          uint64_t v100 = v10;
          sub_216C296EC((uint64_t *)__p, &v158);
          sub_21697DE94((int *)&v159, (int *)&v158);
          sub_21697DEEC((int *)&v159 + 1, (int *)v158.__r_.__value_.__r.__words + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v158.__r_.__value_.__r.__words + 1);
          sub_21697C414(&v158);
          uint64_t v101 = __p[1];
          if (__p[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v101 + 8))(v101);
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v159))
          {
LABEL_150:
            uint64_t v102 = 1;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::PcpErrorUnresolvedPrimPath::New(&v158);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v155);
            __str.__r_.__value_.__r.__words[0] = v103;
            __str.__r_.__value_.__l.__size_ = v104;
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__str, (uint64_t)&v156);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
            std::string::size_type v105 = v158.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
            sub_21697DE94((int *)(v105 + 96), &v152);
            sub_21697DEEC((int *)(v105 + 100), v153);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
            sub_21697C414(&v152);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
            uint64_t v142 = (uint64_t *)v150;
            sub_216787968((void ***)&v142);
            uint64_t v106 = v149;
            if (v149
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
            }
            long long v107 = __p[1];
            if (__p[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(void *))(*(void *)v107 + 8))(v107);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
            sub_21697C414(v157);
            sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155, (uint64_t)&v156);
            pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
            std::string::size_type v108 = v158.__r_.__value_.__r.__words[0];
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 104, (uint64_t)__p);
            sub_21697DE94((int *)(v108 + 184), &v152);
            sub_21697DEEC((int *)(v108 + 188), v153);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
            sub_21697C414(&v152);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
            sub_216787968((void ***)&__str);
            uint64_t v109 = v149;
            if (v149
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
            }
            uint64_t v110 = __p[1];
            if (__p[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(void *))(*(void *)v110 + 8))(v110);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
            sub_21697C414(v157);
            sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
            sub_216ABBA60((uint64_t *)__p, (uint64_t *)&v146);
            uint64_t v111 = *(atomic_uint **)(v158.__r_.__value_.__r.__words[0] + 216);
            *(_OWORD *)(v158.__r_.__value_.__r.__words[0] + 208) = *(_OWORD *)__p;
            __p[1] = 0;
            if (v111)
            {
              if (atomic_fetch_add_explicit(v111 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v111 + 8))(v111);
              }
              uint64_t v111 = (atomic_uint *)__p[1];
              __p[0] = 0;
              if (__p[1]
                && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                uint64_t v111 = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v111 + 8))(v111);
              }
            }
            BOOL v112 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v111);
            std::string::size_type v113 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v113) {
              std::string::size_type v113 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v112, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v113 + 96), __p);
            std::string::size_type v114 = v158.__r_.__value_.__r.__words[0];
            sub_21697DE94((int *)(v158.__r_.__value_.__r.__words[0] + 224), (int *)__p);
            sub_21697DEEC((int *)(v114 + 228), (int *)__p + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
            sub_21697C414(__p);
            std::string::size_type v115 = v158.__r_.__value_.__r.__words[0];
            *(void *)(v158.__r_.__value_.__r.__words[0] + 192) = *(void *)v100;
            sub_2168CD2FC((atomic_uint **)(v115 + 200), (atomic_uint **)(v100 + 8));
            long long v116 = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
            *(_DWORD *)(v158.__r_.__value_.__r.__words[0] + 232) = 5;
            *(_OWORD *)long long __p = v116;
            if (*((void *)&v116 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            sub_216C27B4C((long long *)__p, *v140, (uint64_t *)(*v140 + 40));
            v117 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p[1];
            if (__p[1]) {
              sub_216784EC4((std::__shared_weak_count *)__p[1]);
            }
            uint64_t v118 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v117);
            sub_2169C487C((int *)&v159, v118);
            sub_2169C48D4((int *)&v159 + 1, v118 + 1);
            if (v158.__r_.__value_.__l.__size_) {
              sub_216784EC4((std::__shared_weak_count *)v158.__r_.__value_.__l.__size_);
            }
            uint64_t v102 = 0;
          }
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v159)) {
            uint64_t v119 = &v159;
          }
          else {
            uint64_t v119 = (void ***)v9;
          }
          sub_216C297A8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155, v119, a3[3], (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v154, (atomic_uint **)&v158);
          if (!v35)
          {
            pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((uint64_t)&v158, v120, v121, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v156);
            uint64_t v122 = v156;
            long long v156 = 0;
            __p[0] = v158.__r_.__value_.__l.__data_;
            v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
            sub_216BD0624((atomic_uint **)__p, v123);
            sub_216BD0624(&v156, v124);
          }
          int IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v119);
          __n128 v126 = v155;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(__p, &v145, v119);
          uint64_t v127 = 256;
          if (IsRootPrimPath) {
            uint64_t v127 = 0;
          }
          unint64_t v136 = v102 | v136 & 0xFFFFFF0000000000 | v127;
          sub_216C25080((uint64_t)a3, 5u, v126.n128_i64[0], v126.n128_i64[1], &v155, __p, (uint64_t *)&v158, v6, v136);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
          sub_21697C414(&__p[1]);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
          sub_216BD0624((atomic_uint **)&v158, v128);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v159 + 1);
          sub_21697C414(&v159);
          goto LABEL_186;
        }
      }
      else
      {
        uint64_t v35 = *(unsigned __int8 *)(v7 + 23);
        if (!*(unsigned char *)(v7 + 23)) {
          goto LABEL_67;
        }
      }
      memset(&__str, 0, sizeof(__str));
      uint64_t v36 = (const std::string *)(v8 + 56 * v6 + 32);
      if (pxrInternal__aapl__pxrReserved__::PcpCache::IsLayerMuted(*(void *)a3[3], (uint64_t *)v10, (uint64_t)v36, (long long *)&__str))
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorMutedAssetPath::New(&v158);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v155);
        uint64_t v142 = v37;
        v143[0] = v38;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v142, (uint64_t)&v156);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
        std::string::size_type v39 = v158.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 16, (uint64_t)__p);
        sub_21697DE94((int *)(v39 + 96), &v152);
        sub_21697DEEC((int *)(v39 + 100), v153);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
        sub_21697C414(&v152);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
        int v159 = (void **)v150;
        sub_216787968(&v159);
        uint64_t v40 = v149;
        if (v149 && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
        }
        uint64_t v41 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v41 + 8))(v41);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
        sub_21697C414(v157);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155, (uint64_t)&v156);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v156);
        std::string::size_type v42 = v158.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v158.__r_.__value_.__r.__words[0] + 104, (uint64_t)__p);
        sub_21697DE94((int *)(v42 + 184), &v152);
        sub_21697DEEC((int *)(v42 + 188), v153);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
        sub_21697C414(&v152);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
        uint64_t v142 = (uint64_t *)v150;
        sub_216787968((void ***)&v142);
        uint64_t v43 = v149;
        if (v149 && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        uint64_t v44 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v44 + 8))(v44);
        }
        uint64_t v45 = v10;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v157 + 1);
        sub_21697C414(v157);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v156);
        std::string::size_type v46 = v158.__r_.__value_.__r.__words[0];
        sub_2169C487C((int *)(v158.__r_.__value_.__r.__words[0] + 192), v9);
        sub_2169C48D4((int *)(v46 + 196), (_DWORD *)(v5 + 48 * v6 + 28));
        std::string::operator=((std::string *)(v158.__r_.__value_.__r.__words[0] + 200), v36);
        uint64_t v10 = v45;
        std::string::operator=((std::string *)(v158.__r_.__value_.__r.__words[0] + 224), &__str);
        std::string::size_type v47 = v158.__r_.__value_.__r.__words[0];
        *(_DWORD *)(v158.__r_.__value_.__r.__words[0] + 264) = 5;
        *(void *)(v47 + 248) = *(void *)v45;
        sub_2168CD2FC((atomic_uint **)(v47 + 256), (atomic_uint **)(v45 + 8));
        *(_OWORD *)long long __p = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        if (v158.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v158.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C((long long *)__p, *v140, (uint64_t *)(*v140 + 40));
        if (__p[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p[1]);
        }
        if (v158.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v158.__r_.__value_.__l.__size_);
        }
        int v48 = 4;
      }
      else
      {
        v143[0] = 0;
        v143[1] = 0;
        uint64_t v142 = (uint64_t *)v143;
        pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(v5 + 48 * v6, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)__p, a3[3] + 72, (uint64_t *)&v159);
        if (SHIBYTE(v148) < 0) {
          operator delete(__p[0]);
        }
        int v56 = sub_216AA0AEC(&v159);
        int v58 = v160;
        if (v57 & 1 | (unint64_t)v56 && v160)
        {
          if (*(unsigned char *)(sub_216850B68((uint64_t *)&v160) + 14))
          {
            if (v159)
            {
              if (v59)
              {
                uint64_t v60 = (uint64_t)v59;
                *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
                v158.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158.__r_.__value_.__l.__size_;
                v157[0] = 0;
                v157[1] = 0;
                long long v156 = (atomic_uint *)v157;
                __n128 v61 = pxrInternal__aapl__pxrReserved__::Pcp_CreateDynamicFileFormatContext(&v155, a3[5], (unint64_t)&v158, (unint64_t)&v156, (__n128 *)__p);
                v161[1] = 0;
                (*(void (**)(uint64_t, unint64_t, void **, uint64_t **, void ***, __n128))(*(void *)v60 + 16))(v60, v5 + 48 * v6, __p, &v142, v161, v61);
                pxrInternal__aapl__pxrReserved__::PcpDynamicFileFormatDependencyData::AddDependencyContext((uint64_t *)(*v140 + 72), v60, v161, (uint64_t)&v158, (uint64_t)&v156);
                sub_2168EE084((uint64_t)v161);
                sub_2168CB05C((uint64_t)&v156, v157[0]);
                sub_2168CB05C((uint64_t)&v158, (void *)v158.__r_.__value_.__l.__size_);
              }
            }
          }
          int v58 = v160;
        }
        if (v58 && atomic_fetch_add_explicit(v58 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v58 + 8))(v58);
        }
        pxrInternal__aapl__pxrReserved__::Pcp_GetArgumentsForFileFormatTarget(v5 + 48 * v6, a3[3] + 72, &v142);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v141);
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v5 + 48 * v6, &v142, __p);
        int v62 = v146;
        uint64_t v146 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p[0];
        __p[0] = 0;
        sub_2168BD378((int)&v146, v62);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        if (v146)
        {
          uint64_t v63 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155);
          uint64_t v64 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v63);
          uint64_t v65 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v64);
          sub_216ABBA60((uint64_t *)&v158, (uint64_t *)&v146);
          long long v156 = 0;
          v157[0] = 0;
          double v66 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155);
          uint64_t v67 = sub_216BBBFA8(v66);
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(__p, &v158, &v156, v65 + 32, *(void *)(v67 + 392));
          uint64_t v68 = v157[0];
          if (v157[0]
            && atomic_fetch_add_explicit((atomic_uint *volatile)v157[0] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*v68 + 8))(v68);
          }
          std::string::size_type size = v158.__r_.__value_.__l.__size_;
          if (v158.__r_.__value_.__l.__size_
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v158.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
          }
          pxrInternal__aapl__pxrReserved__::PcpCache::ComputeLayerStack(*(void *)a3[3], (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)__p, a3[4] + 40, (uint64_t *)&v158);
          uint64_t v70 = v145;
          uint64_t v145 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v158.__r_.__value_.__r.__words[0];
          v158.__r_.__value_.__r.__words[0] = 0;
          sub_2168BD378((int)&v145, v70);
          uint64_t v71 = sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v158);
          if ((pxrInternal__aapl__pxrReserved__::PcpIsTimeScalingForLayerTimeCodesPerSecondDisabled((pxrInternal__aapl__pxrReserved__ *)v71) & 1) == 0)
          {
            uint64_t v72 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v10);
            double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(v72);
            double v74 = *(double *)(sub_216BBBFA8((uint64_t *)&v145) + 168);
            if (TimeCodesPerSecond != v74) {
              *((double *)&v154 + 1) = TimeCodesPerSecond * *((double *)&v154 + 1) / v74;
            }
          }
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
          v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
          sub_216787968((void ***)&v158);
          uint64_t v75 = v149;
          if (v149
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
          }
          uint64_t v76 = __p[1];
          if (__p[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v76 + 8))(v76);
          }
          int v48 = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorInvalidAssetPath::New(&v156);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v155);
          int v159 = v77;
          uint64_t v160 = (atomic_uint *)v78;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v159, (uint64_t)&v158);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v158);
          unint64_t v79 = v156;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)(v156 + 4), (uint64_t)__p);
          sub_21697DE94(v79 + 24, &v152);
          sub_21697DEEC(v79 + 25, v153);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
          sub_21697C414(&v152);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
          v161[0] = (void **)v150;
          sub_216787968(v161);
          uint64_t v80 = v149;
          if (v149
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
          }
          unint64_t v81 = __p[1];
          if (__p[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v81 + 8))(v81);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[1] + 1);
          sub_21697C414(&v158.__r_.__value_.__r.__words[1]);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v158);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v155, (uint64_t)&v158);
          pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v158);
          uint64_t v82 = v156;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)(v156 + 26), (uint64_t)__p);
          sub_21697DE94(v82 + 46, &v152);
          sub_21697DEEC(v82 + 47, v153);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v153);
          sub_21697C414(&v152);
          pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v151);
          int v159 = (void **)v150;
          sub_216787968(&v159);
          uint64_t v83 = v149;
          if (v149
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v149 + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
          }
          unint64_t v84 = __p[1];
          if (__p[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v84 + 8))(v84);
          }
          uint64_t v85 = v10;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v158.__r_.__value_.__r.__words[1] + 1);
          sub_21697C414(&v158.__r_.__value_.__r.__words[1]);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v158);
          long long v86 = v156;
          sub_2169C487C(v156 + 48, v9);
          sub_2169C48D4(v86 + 49, (_DWORD *)(v5 + 48 * v6 + 28));
          std::string::operator=((std::string *)(v156 + 50), v36);
          uint64_t v10 = v85;
          std::string::operator=((std::string *)(v156 + 56), (const std::string *)(v5 + 48 * v6));
          long long v87 = v156;
          v156[66] = 5;
          *((void *)v87 + 31) = *(void *)v85;
          sub_2168CD2FC((atomic_uint **)v87 + 32, (atomic_uint **)(v85 + 8));
          unint64_t v88 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v88) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
          unint64_t v89 = v141;
          unint64_t v90 = atomic_load((unint64_t *)(v88 + 144));
          if (v89 < v90
            && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v141, (atomic_ullong *)v88))
          {
            __p[0] = 0;
            __p[1] = 0;
            unint64_t v148 = 0;
            long long v91 = sub_216862604(&v141, 0);
            uint64_t v92 = sub_216878D10();
            if (v91 != (void *)v92)
            {
              uint64_t v93 = (char *)__p[1];
              do
              {
                std::string::size_type v94 = (long long *)(v91 + 7);
                if ((unint64_t)v93 >= v148)
                {
                  uint64_t v93 = (char *)sub_2167E9A44((uint64_t *)__p, v94);
                }
                else
                {
                  if (*((char *)v91 + 79) < 0)
                  {
                    sub_216778F24(v93, (void *)v91[7], v91[8]);
                  }
                  else
                  {
                    long long v95 = *v94;
                    *((void *)v93 + 2) = v91[9];
                    *(_OWORD *)uint64_t v93 = v95;
                  }
                  v93 += 24;
                }
                __p[1] = v93;
                long long v91 = (void *)v91[1];
              }
              while (v91 != (void *)v92);
            }
            std::string::size_type v96 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
            if (!v96) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
            }
            uint64_t v97 = sub_216862604(&v141, 0);
            LOBYTE(v159) = 0;
            uint64_t v98 = (void *)sub_2168520EC(v96 + 19, &v159);
            if (v98 != v97) {
              pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v96, v97, v98);
            }
            sub_216881C38("; ", (std::string *)__p[0], (std::string *)__p[1], &v158);
            std::string::size_type v99 = (void **)(v156 + 68);
            if (*((char *)v156 + 295) < 0) {
              operator delete(*v99);
            }
            *(std::string *)std::string::size_type v99 = v158;
            v158.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            sub_216782F20((void ***)&v158);
          }
          __p[0] = v156;
          __p[1] = v157[0];
          if (v157[0]) {
            atomic_fetch_add_explicit(v157[0] + 1, 1uLL, memory_order_relaxed);
          }
          sub_216C27B4C((long long *)__p, *v140, (uint64_t *)(*v140 + 40));
          if (__p[1]) {
            sub_216784EC4((std::__shared_weak_count *)__p[1]);
          }
          if (v157[0]) {
            sub_216784EC4((std::__shared_weak_count *)v157[0]);
          }
          int v48 = 4;
        }
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v141);
        sub_2167877AC((uint64_t)&v142, v143[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!v48) {
          goto LABEL_145;
        }
      }
      else if (!v48)
      {
        goto LABEL_145;
      }
LABEL_186:
      sub_216BBEEA4(&v145);
      sub_216ABB798(&v146);
LABEL_187:
      ++v6;
      uint64_t v5 = *a4;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4));
  }
}

void sub_216C2B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a45,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  *(void *)(v52 - 176) = &a47;
  sub_216782F20((void ***)(v52 - 176));
  uint64_t v54 = *(std::__shared_weak_count **)(v52 - 192);
  if (v54) {
    sub_216784EC4(v54);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a32);
  sub_2167877AC((uint64_t)&a34, a37);
  if (a44 < 0) {
    operator delete(__p);
  }
  sub_216BBEEA4(&a45);
  sub_216ABB798(&a46);
  _Unwind_Resume(a1);
}

void sub_216C2B87C(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a1, uint64_t *a2, unsigned __int32 a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unsigned int v6 = a3;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v38 = a3;
    uint64_t v40 = (uint64_t *)(a4 + 32);
    do
    {
      std::string::size_type v11 = (_DWORD *)(v4 + v9);
      if (sub_216BBBDFC(2))
      {
        uint64_t v30 = *(void *)(a4 + 40);
        std::string::size_type v31 = (pxrInternal__aapl__pxrReserved__ **)v40;
        if (v30) {
          std::string::size_type v31 = (pxrInternal__aapl__pxrReserved__ **)(v30 + 48);
        }
        uint64_t v37 = *v31;
        pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, v38, (uint64_t)__p);
        int v32 = v46;
        uint64_t v36 = (void **)__p[0];
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + v9));
        uint64_t v35 = __p;
        if (v32 < 0) {
          uint64_t v35 = v36;
        }
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v37, a1, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found %s to <%s>", v34, v35, Text);
        unsigned int v6 = a3;
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v4 + v9))
        && (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + v9))
         || pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + v9))))
      {
        pxrInternal__aapl__pxrReserved__::PcpErrorInvalidPrimPath::New(&v52);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a1);
        v41[0] = v12;
        v41[1] = v13;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v41, (uint64_t)&v42);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v42);
        uint64_t v14 = v52;
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)(v52 + 4), (uint64_t)__p);
        sub_21697DE94(v14 + 24, &v50);
        sub_21697DEEC(v14 + 25, &v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
        sub_21697C414(&v50);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v49);
        uint64_t v54 = (void **)v48;
        sub_216787968(&v54);
        uint64_t v15 = v47;
        if (v47 && atomic_fetch_add_explicit((atomic_uint *volatile)(v47 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        std::string::size_type v16 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v16 + 8))(v16);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
        sub_21697C414(&v43);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v42);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a1, (uint64_t)&v42);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)__p, (const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v42);
        uint64_t v17 = v52;
        pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)(v52 + 26), (uint64_t)__p);
        sub_21697DE94(v17 + 46, &v50);
        sub_21697DEEC(v17 + 47, &v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
        sub_21697C414(&v50);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v49);
        v41[0] = (void **)v48;
        sub_216787968(v41);
        uint64_t v18 = v47;
        if (v47 && atomic_fetch_add_explicit((atomic_uint *volatile)(v47 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        std::string::size_type v19 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v19 + 8))(v19);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
        sub_21697C414(&v43);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v42);
        std::string::size_type v20 = v52;
        sub_2169C487C(v52 + 48, (_DWORD *)(v4 + v9));
        sub_2169C48D4(v20 + 49, (_DWORD *)(v4 + v9 + 4));
        char v22 = v52;
        long long v21 = v53;
        unsigned int v6 = a3;
        v52[54] = a3;
        __p[0] = v22;
        __p[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216C27B4C((long long *)__p, *v40, (uint64_t *)(*v40 + 40));
        if (__p[1]) {
          sub_216784EC4((std::__shared_weak_count *)__p[1]);
        }
        if (v53) {
          sub_216784EC4(v53);
        }
      }
      else
      {
        uint64_t v23 = *(void *)(a4 + 24);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, 0.0, 1.0);
        sub_216C297A8(a1, v11, v23, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)__p, &v42);
        pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((uint64_t)&v42, v24, v25, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v52);
        sub_216BD0624(&v42, v26);
        uint64_t v27 = *(void *)a1;
        uint64_t v28 = *((void *)a1 + 1);
        pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite((pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)__p);
        sub_216C2BDCC(v6, v27, v28, v27, v28, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v52, v10, (pxrInternal__aapl__pxrReserved__ *)__p, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p[1] + 1);
        sub_21697C414(&__p[1]);
        sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
        sub_216BD0624(&v52, v29);
      }
      ++v10;
      uint64_t v4 = *a2;
      v9 += 8;
    }
    while (v10 < (a2[1] - *a2) >> 3);
  }
}

void sub_216C2BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C2BDCC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a6, uint64_t a7, pxrInternal__aapl__pxrReserved__ *a8, uint64_t a9)
{
  *(void *)&long long v76 = a2;
  *((void *)&v76 + 1) = a3;
  v75[0] = a4;
  v75[1] = a5;
  if (sub_216BBBDFC(2))
  {
    uint64_t v40 = *(void *)(a9 + 40);
    if (v40) {
      uint64_t v41 = (uint64_t *)(v40 + 48);
    }
    else {
      uint64_t v41 = (uint64_t *)(a9 + 32);
    }
    uint64_t v42 = *v41;
    int v43 = v72;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, a1, (uint64_t)v72);
    if (v73 < 0) {
      int v43 = (void **)v72[0];
    }
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76, (uint64_t)&v65);
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v65, v44);
    if (v71 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Preparing to add %s arc to %s", v45, v46, v43, p_p);
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::Pcp_IndexingPhaseScope(&v74, v42, &v76, &v83);
    if (SHIBYTE(v84) < 0) {
      operator delete((void *)v83);
    }
    if (v71 < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
    sub_21697C414(&v66);
    sub_216BBEEA4(&v65);
    if (v73 < 0) {
      operator delete(v72[0]);
    }
  }
  else
  {
    uint64_t v74 = 0;
  }
  if (sub_216BBBDFC(2))
  {
    uint64_t v48 = *(void *)(a9 + 40);
    if (v48) {
      uint64_t v49 = (pxrInternal__aapl__pxrReserved__ **)(v48 + 48);
    }
    else {
      uint64_t v49 = (pxrInternal__aapl__pxrReserved__ **)(a9 + 32);
    }
    int v50 = *v49;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v75, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v83, (pxrInternal__aapl__pxrReserved__ *)&__p, v51);
    if (v84 >= 0) {
      uint64_t v52 = &v83;
    }
    else {
      uint64_t v52 = (long long *)v83;
    }
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite((pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *)&v65);
    BOOL v55 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(a8, &v65);
    if (v55)
    {
      int v56 = (void **)"<none>";
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v72, a8, v53);
      if (v73 >= 0) {
        int v56 = v72;
      }
      else {
        int v56 = (void **)v72[0];
      }
    }
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v50, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"origin: %s\ninheritArcNum: %d\nignoreIfSameAsSite: %s\n", v54, v52, a7, v56);
    if (!v55 && v73 < 0) {
      operator delete(v72[0]);
    }
    sub_216BC9108((uint64_t)&v65);
    if (SHIBYTE(v84) < 0) {
      operator delete((void *)v83);
    }
    sub_216BC9108((uint64_t)&__p);
  }
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(Path))
  {
    sub_216981010(&v65, Path);
    sub_21698105C((_DWORD *)&v65 + 1, (_DWORD *)Path + 1);
    while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v65)
         && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v65, &v83);
      sub_21697DE94((int *)&v65, (int *)&v83);
      sub_21697DEEC((int *)&v65 + 1, (int *)&v83 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
      sub_21697C414(&v83);
    }
    LODWORD(__p) = v65;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v65);
    HIDWORD(__p) = HIDWORD(v65);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v65 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
    sub_21697C414(&v65);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&__p))
    {
      *(void *)&long long v83 = "pcp/primIndex.cpp";
      *((void *)&v83 + 1) = "_DetermineInheritPath";
      uint64_t v84 = 2891;
      uint64_t v85 = "SdfPath pxrInternal__aapl__pxrReserved__::_DetermineInheritPath(const SdfPath &, const PcpMapExpression &)";
      char v86 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v83, "!varPath.IsEmpty()", 0);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, &v81);
    std::string::size_type v19 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a6, v17, v18);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v81, &v83);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v79);
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v64, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v83, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v79, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v80);
    sub_21697C414(&v79);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
    sub_21697C414(&v83);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_21697C414(&v81);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
  }
  else
  {
    std::string::size_type v16 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a6, v14, v15);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v16, Path, &v64);
  }
  uint64_t v20 = *(void *)(a9 + 40);
  long long v83 = v76;
  uint64_t v84 = v20;
  uint64_t v21 = sub_216C273B4((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v83);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v64))
  {
    if (sub_216BBBDFC(2))
    {
      uint64_t v57 = *(void *)(a9 + 40);
      if (v57) {
        int v58 = (pxrInternal__aapl__pxrReserved__ **)(v57 + 48);
      }
      else {
        int v58 = (pxrInternal__aapl__pxrReserved__ **)(a9 + 32);
      }
      uint64_t v59 = *v58;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v59, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Inheriting from path <%s>", v61, Text);
    }
    LayerStacstd::string::size_type k = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&__p, LayerStack, &v64);
    int DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v75, v23);
    uint64_t v77 = sub_216C2C5B0((uint64_t *)&v76, v21, (char *)&__p, a1, a6, DepthBelowIntroduction);
    uint64_t v78 = v25;
    if (!v77 || v25 == -1)
    {
      uint64_t v35 = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v76);
      if (v64 == *v35 || pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&__p, a8))
      {
        int v36 = 0;
        int v37 = 0;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64)) {
          int v37 = 0;
        }
        else {
          int v37 = 256;
        }
        int v36 = 1;
      }
      uint64_t v77 = sub_216C25080(a9, a1, v76, *((uint64_t *)&v76 + 1), v75, &__p, (uint64_t *)a6, a7, v37 | (v36 << 16) | v36);
      uint64_t v78 = v38;
    }
    else if (sub_216BBBDFC(2))
    {
      uint64_t v26 = *(void *)(a9 + 40);
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__ **)(v26 ? v26 + 48 : a9 + 32);
      uint64_t v28 = *v27;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, a1, (uint64_t)&v83);
      int v29 = SHIBYTE(v84);
      uint64_t v30 = (long long *)v83;
      std::string::size_type v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
      std::string::size_type v33 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v29 >= 0 ? &v83 : v30);
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v28, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v77, v33, v32, "A %s arc to <%s> already exists. Skipping.", v31);
      if (SHIBYTE(v84) < 0) {
        operator delete((void *)v83);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
    sub_21697C414(&v69);
    sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  }
  else
  {
    if (sub_216BBBDFC(2))
    {
      uint64_t v62 = *(void *)(a9 + 40);
      if (v62) {
        uint64_t v63 = (pxrInternal__aapl__pxrReserved__ **)(v62 + 48);
      }
      else {
        uint64_t v63 = (pxrInternal__aapl__pxrReserved__ **)(a9 + 32);
      }
      pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v63, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v76, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"No appropriate site for inheriting opinions", v34);
    }
    uint64_t v77 = 0;
    uint64_t v78 = -1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_21697C414(&v64);
  if (v74) {
    pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope::_EndScope((pxrInternal__aapl__pxrReserved__::Pcp_IndexingPhaseScope *)&v74);
  }
  return v77;
}

void sub_216C2C414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
}

uint64_t sub_216C2C5B0(uint64_t *a1, uint64_t a2, char *a3, int a4, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a5, int a6)
{
  int v10 = a2;
  uint64_t v11 = a1[1];
  uint64_t v35 = *a1;
  uint64_t v36 = v11;
  uint64_t v12 = **(void **)(v35 + 16);
  uint64_t v13 = *(unsigned __int16 *)(v12 + 48 * v11 + 28);
  uint64_t v29 = v35;
  uint64_t v30 = v13;
  uint64_t v31 = v12;
  uint64_t v32 = v35;
  uint64_t v14 = 0xFFFFLL;
  uint64_t v33 = 0xFFFFLL;
  uint64_t v34 = v12;
  while (v13 != v14 || v29 != v32)
  {
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v29, a2, a3);
    std::string::size_type v16 = v15;
    if (v10 == 3)
    {
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v15) == a4)
      {
        MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v16);
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v18, v19);
        uint64_t v23 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(a5, v21, v22);
        if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==((uint64_t)v20, (uint64_t)v23))
        {
          uint64_t OriginNode = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(v16);
          uint64_t v28 = v24;
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&OriginNode, v24) == a6)return *(void *)v16; {
        }
          }
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(v15, (uint64_t)&OriginNode);
      BOOL v25 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&OriginNode, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
      sub_21697C414(&v28);
      sub_216BBEEA4(&OriginNode);
      if (v25) {
        return *(void *)v16;
      }
    }
    sub_216BC28B8(&v29);
    uint64_t v13 = v30;
    uint64_t v14 = v33;
  }
  return 0;
}

void sub_216C2C724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216C2C738(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1) != 6) {
    return 0;
  }
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
  uint64_t v4 = v3;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a1);
  if (v4 != v6 || ParentNode != v5) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a1, (uint64_t)&v14);
  v10[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a1);
  v10[1] = v7;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v10, (uint64_t)&v11);
  BOOL v8 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v14, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  sub_216BBEEA4(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  sub_216BBEEA4(&v14);
  return v8;
}

void sub_216C2C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_216BC9108((uint64_t)va);
  sub_216BC9108((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216C2C844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::PcpMapExpression *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v109 = a1;
  *((void *)&v109 + 1) = a2;
  *(void *)&long long v108 = a3;
  *((void *)&v108 + 1) = a4;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109) == 3)
  {
    uint64_t MapToParent = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity(MapToParent, v11, v12, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)&v98);
    pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)&v98, a5, v13, (uint64_t *)&v110);
    sub_216BD0624((atomic_uint **)&v98, v14);
    uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109);
    sub_216C2C844(ParentNode, v16, v108, *((void *)&v108 + 1), &v110, a6, a7);
    v98.__r_.__value_.__r.__words[0] = 5;
    *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = v109;
    std::string::size_type v100 = 0;
    long long __p = 0uLL;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v101 + 1);
    sub_216C23F48(a7, (uint64_t)&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v101 + 1);
    sub_21697C414(&v101);
    if (SHIBYTE(v100) < 0) {
      operator delete((void *)__p);
    }
    sub_216BD0624((atomic_uint **)&v110, v17);
  }
  else
  {
    uint64_t v97 = a7;
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v108;
    v98.__r_.__value_.__r.__words[2] = **(void **)(v108 + 16);
    v98.__r_.__value_.__l.__size_ = *(unsigned __int16 *)(v98.__r_.__value_.__r.__words[2]
                                                        + 48 * *((void *)&v108 + 1)
                                                        + 28);
    long long v110 = v108;
    uint64_t v18 = **(void **)(v108 + 16);
    *((void *)&v110 + 1) = 0xFFFFLL;
    uint64_t v111 = v18;
    sub_216C2D0B8((uint64_t)&v106, (uint64_t *)&v98, (uint64_t *)&v110);
    uint64_t v20 = v106;
    std::string::size_type v19 = v107;
    if (v106 != v107)
    {
      do
      {
        int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v20);
        if (ArcType == 1 || ArcType == 6)
        {
          if (sub_216BBBDFC(2))
          {
            uint64_t v73 = *(void *)(v97 + 40);
            uint64_t v74 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
            if (v73) {
              uint64_t v74 = (pxrInternal__aapl__pxrReserved__ **)(v73 + 48);
            }
            uint64_t v75 = *v74;
            unsigned int v76 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v20);
            pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_26C75BAC8, v76, (uint64_t)&v98);
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v77 = &v98;
            }
            else {
              uint64_t v77 = (std::string *)v98.__r_.__value_.__r.__words[0];
            }
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(v20, (uint64_t)v105);
            pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v110, (pxrInternal__aapl__pxrReserved__ *)v105, v78);
            if (v111 >= 0) {
              int v79 = &v110;
            }
            else {
              int v79 = (long long *)v110;
            }
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (uint64_t)v102);
            pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)v103, (pxrInternal__aapl__pxrReserved__ *)v102, v80);
            int v82 = v103;
            if (v104 < 0) {
              int v82 = (void **)v103[0];
            }
            pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v75, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Attempting to propagate %s of %s to %s.", v81, v77, v79, v82);
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            sub_216BC9108((uint64_t)v102);
            if (SHIBYTE(v111) < 0) {
              operator delete((void *)v110);
            }
            sub_216BC9108((uint64_t)v105);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v98.__r_.__value_.__l.__data_);
            }
          }
          if (a6
            && ((int v22 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v108),
                 v22 == 6)
             || v22 == 1)
            && (int DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v108, v23), DepthBelowIntroduction == pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction(v20, v25)))
          {
            if (sub_216BBBDFC(2))
            {
              uint64_t v27 = *(void *)(v97 + 40);
              uint64_t v28 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
              if (v27) {
                uint64_t v28 = (pxrInternal__aapl__pxrReserved__ **)(v27 + 48);
              }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v28, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Skipping ancestral class", v26);
            }
          }
          else
          {
            uint64_t v29 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v20);
            uint64_t v30 = *(_DWORD **)a5;
            if (*(void *)a5
              && !*v30
              && pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(v30 + 6)))
            {
              uint64_t v31 = *(atomic_uint **)v29;
              v105[0] = v31;
              if (v31) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_add_ref((uint64_t)v31);
              }
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Inverse(a5, v103);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(v29, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v103, v32, (uint64_t *)&v110);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(a5, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)&v110, v33, (uint64_t *)&v98);
              pxrInternal__aapl__pxrReserved__::PcpMapExpression::AddRootIdentity((uint64_t)&v98, v34, v35, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)v105);
              sub_216BD0624((atomic_uint **)&v98, v36);
              sub_216BD0624((atomic_uint **)&v110, v37);
              sub_216BD0624((atomic_uint **)v103, v38);
            }
            if (sub_216BBBDFC(2))
            {
              uint64_t v83 = *(void *)(v97 + 40);
              uint64_t v84 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
              if (v83) {
                uint64_t v84 = (pxrInternal__aapl__pxrReserved__ **)(v83 + 48);
              }
              uint64_t v85 = *v84;
              char v86 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)a5, v39, v40);
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v86, &v98);
              unint64_t v88 = &v98;
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v88 = (std::string *)v98.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v85, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Transfer function:\n%s", v87, v88);
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v98.__r_.__value_.__l.__data_);
              }
            }
            if (sub_216BBBDFC(2))
            {
              uint64_t v89 = *(void *)(v97 + 40);
              unint64_t v90 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
              if (v89) {
                unint64_t v90 = (pxrInternal__aapl__pxrReserved__ **)(v89 + 48);
              }
              long long v91 = *v90;
              uint64_t v92 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)v105, v41, v42);
              pxrInternal__aapl__pxrReserved__::PcpMapFunction::GetString(v92, &v98);
              std::string::size_type v94 = &v98;
              if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v94 = (std::string *)v98.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v91, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v109, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Implied class:\n%s", v93, v94);
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v98.__r_.__value_.__l.__data_);
              }
            }
            *(void *)&long long v110 = 0;
            *((void *)&v110 + 1) = -1;
            long long v101 = v109;
            std::string::size_type v43 = **(void **)(v109 + 16);
            std::string::size_type v44 = *(unsigned __int16 *)(v43 + 48 * *((void *)&v109 + 1) + 28);
            v98.__r_.__value_.__r.__words[0] = v109;
            v98.__r_.__value_.__l.__size_ = v44;
            v98.__r_.__value_.__r.__words[2] = v43;
            *(void *)&long long __p = v109;
            *((void *)&__p + 1) = 0xFFFFLL;
            std::string::size_type v100 = v43;
            while (*(_OWORD *)&v98.__r_.__value_.__l.__data_ != __p)
            {
              uint64_t v45 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v98, (uint64_t)v41, v42);
              uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(v45);
              if (v47 == *((void *)v20 + 1) && *(void *)v20 == OriginNode)
              {
                uint64_t v49 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BF5D44(&v98, v47, v48);
                int v50 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v49);
                char v53 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v50, v51, v52);
                int v56 = pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)v105, v54, v55);
                if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==((uint64_t)v53, (uint64_t)v56))
                {
                  long long v110 = *(_OWORD *)sub_216BC2828(&v98, v57, v58);
                  if (sub_216BBBDFC(2))
                  {
                    uint64_t v95 = *(void *)(v97 + 40);
                    std::string::size_type v96 = (pxrInternal__aapl__pxrReserved__ **)(v97 + 32);
                    if (v95) {
                      std::string::size_type v96 = (pxrInternal__aapl__pxrReserved__ **)(v95 + 48);
                    }
                    pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(*v96, v20, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v110, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Found previously added implied inherit node", v59);
                  }
                  break;
                }
              }
              sub_216BC28B8(&v98);
            }
            if ((void)v110) {
              BOOL v60 = *((void *)&v110 + 1) == -1;
            }
            else {
              BOOL v60 = 1;
            }
            if (!v60) {
              goto LABEL_79;
            }
            unsigned int v61 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(v20);
            long long v62 = v109;
            uint64_t v64 = *(void *)v20;
            uint64_t v63 = *((void *)v20 + 1);
            uint64_t SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(v20);
            pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(v20, (uint64_t)&v98);
            *(void *)&long long v110 = sub_216C2BDCC(v61, v62, *((uint64_t *)&v62 + 1), v64, v63, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)v105, SiblingNumAtOrigin, (pxrInternal__aapl__pxrReserved__ *)&v98, v97);
            *((void *)&v110 + 1) = v66;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98.__r_.__value_.__r.__words[1] + 1);
            sub_21697C414(&v98.__r_.__value_.__r.__words[1]);
            sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v98);
            if ((void)v110)
            {
              if (*((void *)&v110 + 1) != -1)
              {
LABEL_79:
                if (sub_216C27AB4((uint64_t *)v20, (uint64_t)v41, v42))
                {
                  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Inverse((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v105, v103);
                  int v67 = (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(v20);
                  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose(a5, v67, v68, (uint64_t *)v102);
                  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Compose((pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v103, (const pxrInternal__aapl__pxrReserved__::PcpMapExpression *)v102, v69, (uint64_t *)&v98);
                  sub_216BD0624(v102, v70);
                  sub_216BD0624((atomic_uint **)v103, v71);
                  sub_216C2C844(v110, *((void *)&v110 + 1), *(void *)v20, *((void *)v20 + 1), &v98, 0, v97);
                  sub_216BD0624((atomic_uint **)&v98, v72);
                }
              }
            }
            sub_216BD0624(v105, (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)v41);
          }
        }
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)((char *)v20 + 16);
      }
      while (v20 != v19);
      uint64_t v20 = v106;
    }
    if (v20)
    {
      long long v107 = v20;
      operator delete(v20);
    }
  }
}

void sub_216C2CF40(_Unwind_Exception *a1, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,atomic_uint *a36)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_216BD0624(&a36, a2);
  uint64_t v38 = *(void **)(v36 - 168);
  if (v38)
  {
    *(void *)(v36 - 16sub_216C01044((uint64_t *)this, 0) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C2D0B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (v6 != v8 || v5 != v7)
  {
    unint64_t v4 = 0;
    do
    {
      ++v4;
      uint64_t v6 = *(unsigned __int16 *)(a2[2] + 48 * v6 + 34);
    }
    while (v8 != v6 || v5 != v7);
  }
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = a2[2];
  long long v12 = *(_OWORD *)a3;
  uint64_t v13 = a3[2];
  sub_216C2D158((char *)a1, (uint64_t *)&v14, (uint64_t *)&v12, v4);
  return a1;
}

char *sub_216C2D158(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_21682BF78(result, a4);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v9 = *a3;
    uint64_t v10 = a3[1];
    uint64_t v11 = (void *)*((void *)v6 + 1);
    if (v8 != v10 || v7 != v9)
    {
      uint64_t v13 = a2[2];
      do
      {
        void *v11 = v7;
        v11[1] = v8;
        v11 += 2;
        uint64_t v8 = *(unsigned __int16 *)(v13 + 48 * v8 + 34);
      }
      while (v10 != v8 || v7 != v9);
    }
    *((void *)v6 + 1) = v11;
  }
  return result;
}

void sub_216C2D1D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C2D1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v41 = a1;
  *((void *)&v41 + 1) = a2;
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
  uint64_t v6 = v5;
  v40[0] = ParentNode;
  v40[1] = v5;
  uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
  if (v6 == v8 && ParentNode == OriginNode) {
    goto LABEL_7;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v40) != 3) {
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v40, (uint64_t)&v44);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, (uint64_t)&v42);
  BOOL v10 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v44, &v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 3);
  sub_21697C414((_DWORD *)&v42 + 2);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 3);
  sub_21697C414((_DWORD *)&v44 + 2);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v44);
  if (!v10)
  {
LABEL_7:
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41) == 6)
    {
      if (sub_216BBBDFC(2))
      {
        uint64_t v30 = *(void *)(a3 + 40);
        if (v30) {
          uint64_t v31 = (pxrInternal__aapl__pxrReserved__ **)(v30 + 48);
        }
        else {
          uint64_t v31 = (pxrInternal__aapl__pxrReserved__ **)(a3 + 32);
        }
        uint64_t v32 = *v31;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v41);
        *(void *)&long long v42 = v33;
        *((void *)&v42 + 1) = v34;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, (uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::Pcp_FormatSite((uint64_t *)&v44, (pxrInternal__aapl__pxrReserved__ *)&v38, v35);
        if (v45 >= 0) {
          int v37 = &v44;
        }
        else {
          int v37 = (long long *)v44;
        }
        pxrInternal__aapl__pxrReserved__::Pcp_IndexingMsg(v32, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v41, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v42, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)"Propagating specializes arc %s to root", v36, v37);
        if (SHIBYTE(v45) < 0) {
          operator delete((void *)v44);
        }
        sub_216BC9108((uint64_t)&v38);
      }
      int IsInert = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
      __int16 SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
      if (IsInert)
      {
        __int16 v14 = SpecContributionRestrictedDepth;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41, 0, v13);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v41);
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        long long v19 = v41;
        MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
        sub_216C2DA04(v16, v18, v19, *((uint64_t *)&v19 + 1), MapToRoot, &v41, a3);
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v41, v14);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v41);
        uint64_t v22 = v21;
        uint64_t v24 = v23;
        long long v25 = v41;
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v41);
        sub_216C2DA04(v22, v24, v25, *((uint64_t *)&v25 + 1), v26, &v41, a3);
      }
    }
    long long v44 = v41;
    uint64_t v45 = **(void **)(v41 + 16);
    *((void *)&v44 + 1) = *(unsigned __int16 *)(v45 + 48 * *((void *)&v41 + 1) + 28);
    long long v42 = v41;
    uint64_t v27 = **(void **)(v41 + 16);
    *((void *)&v42 + 1) = 0xFFFFLL;
    uint64_t v43 = v27;
    sub_216C2D0B8((uint64_t)&v38, (uint64_t *)&v44, (uint64_t *)&v42);
    uint64_t v28 = v38;
    uint64_t v29 = v39;
    if (v38 != v39)
    {
      do
      {
        sub_216C2D1EC(*v28, v28[1], a3);
        v28 += 2;
      }
      while (v28 != v29);
      uint64_t v28 = v38;
    }
    if (v28)
    {
      std::string::size_type v39 = v28;
      operator delete(v28);
    }
  }
}

void sub_216C2D4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (*(char *)(v17 - 57) < 0) {
    operator delete(*(void **)(v17 - 80));
  }
  sub_216BC9108((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_216C2D50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a5, void *a6, uint64_t a7)
{
  sub_216C2D63C(a1, a2, a3, a4, 0, 1, a5, a6, (uint64_t)&v20, a7);
  uint64_t v11 = v20;
  uint64_t v12 = v21;
  if (v20) {
    BOOL v13 = v21 == -1;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    *(void *)&long long v23 = a3;
    uint64_t v24 = **(void **)(a3 + 16);
    *((void *)&v23 + 1) = *(unsigned __int16 *)(v24 + 48 * a4 + 28);
    v22[0] = a3;
    v22[1] = 0xFFFFLL;
    _OWORD v22[2] = v24;
    sub_216C2D0B8((uint64_t)&v18, (uint64_t *)&v23, v22);
    __int16 v14 = v18;
    uint64_t v15 = v19;
    if (v18 != v19)
    {
      do
      {
        long long v23 = *v14;
        long long v16 = v23;
        uint64_t MapToParent = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
        sub_216C2D50C(v11, v12, v16, *((void *)&v16 + 1), MapToParent, a6, a7);
        ++v14;
      }
      while (v14 != v15);
      __int16 v14 = v18;
    }
    if (v14)
    {
      long long v19 = v14;
      operator delete(v14);
    }
  }
}

void sub_216C2D620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216C2D63C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  *(void *)&long long v63 = a3;
  *((void *)&v63 + 1) = a4;
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  if (v18 == a2 && a1 == ParentNode)
  {
    char v27 = 0;
    long long v62 = v63;
    goto LABEL_41;
  }
  uint64_t ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v64);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, (uint64_t)&v66);
  int v21 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  int DepthBelowIntroduction = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, v22);
  uint64_t v24 = sub_216C2C5B0(&v64, ArcType, (char *)&v66, v21, a7, DepthBelowIntroduction);
  uint64_t v26 = v25;
  *(void *)&long long v62 = v24;
  *((void *)&v62 + 1) = v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 3);
  sub_21697C414((_DWORD *)&v66 + 2);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v66);
  if (v24 && v26 != -1)
  {
    char v27 = 0;
    goto LABEL_37;
  }
  if (sub_216C2D998((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63))
  {
    for (uint64_t i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
          ;
          uint64_t i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v66))
    {
      *(void *)&long long v66 = i;
      *((void *)&v66 + 1) = v29;
      if (!i || v29 == -1) {
        break;
      }
      if (v29 == a8[1] && *a8 == i)
      {
        char v27 = 0;
        if (v24) {
          goto LABEL_36;
        }
        goto LABEL_40;
      }
    }
  }
  if (v63 == *(_OWORD *)a8)
  {
    Path = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v64);
    NonVariantuint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(Path, v55);
  }
  else
  {
    NonVariantuint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  }
  unsigned int v32 = NonVariantPathElementCount;
  if (v63 == *(_OWORD *)a8)
  {
    uint64_t v57 = (uint64_t *)&v63;
  }
  else
  {
    BOOL v33 = sub_216C2D998((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
    uint64_t v57 = &v64;
    if (v33) {
      uint64_t v57 = (uint64_t *)&v63;
    }
  }
  long long v66 = *(_OWORD *)v57;
  int IsInert = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  unsigned int v35 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  uint64_t v36 = v64;
  uint64_t v37 = v65;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, (uint64_t)&v59);
  uint64_t SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  uint64_t v39 = 0x100000000;
  if (!a6) {
    uint64_t v39 = 0;
  }
  uint64_t v40 = 0x1000000;
  if (!a5) {
    uint64_t v40 = 0;
  }
  uint64_t v41 = sub_216C25344(a10, v35, v36, v37, &v66, &v59, (uint64_t *)a7, SiblingNumAtOrigin, v32, v39 | v40 | IsInert ^ 1u);
  uint64_t v26 = v42;
  *(void *)&long long v62 = v41;
  *((void *)&v62 + 1) = v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
  sub_21697C414(&v60);
  sub_216BBEEA4(&v59);
  if (v41) {
    BOOL v43 = v26 == -1;
  }
  else {
    BOOL v43 = 1;
  }
  char v27 = !v43;
  if (!v41)
  {
LABEL_40:
    sub_216C2731C(v63, *((uint64_t *)&v63 + 1), v30);
    goto LABEL_41;
  }
LABEL_36:
  if (v26 == -1) {
    goto LABEL_40;
  }
LABEL_37:
  uint64_t SpecContributionRestrictedDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSpecContributionRestrictedDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62);
  int v45 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62, v45, v46);
  int HasSymmetry = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetHasSymmetry((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62, HasSymmetry, v48);
  int Permission = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetPermission((unint64_t *)&v62, Permission, v50);
  int IsRestricted = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetRestricted((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v62, IsRestricted, v52);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v63, 1, v53);
  if (SpecContributionRestrictedDepth) {
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::SetSpecContributionRestrictedDepth(&v63, SpecContributionRestrictedDepth);
  }
LABEL_41:
  double result = *(double *)&v62;
  *(_OWORD *)a9 = v62;
  *(unsigned char *)(a9 + 16) = v27;
  return result;
}

void sub_216C2D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216BC9108((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C2D998(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a1);
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a1);
  uint64_t v5 = v4;
  uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a1);
  if (ArcType != 6 && ArcType != 1) {
    return 0;
  }
  return v5 != v7 || ParentNode != OriginNode;
}

void sub_216C2DA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **a5, void *a6, uint64_t a7)
{
  sub_216C2D63C(a1, a2, a3, a4, 1, 0, a5, a6, (uint64_t)&v20, a7);
  uint64_t v11 = v20;
  uint64_t v12 = v21;
  if (v20) {
    BOOL v13 = v21 == -1;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    *(void *)&long long v23 = a3;
    uint64_t v24 = **(void **)(a3 + 16);
    *((void *)&v23 + 1) = *(unsigned __int16 *)(v24 + 48 * a4 + 28);
    v22[0] = a3;
    v22[1] = 0xFFFFLL;
    _OWORD v22[2] = v24;
    sub_216C2D0B8((uint64_t)&v18, (uint64_t *)&v23, v22);
    __int16 v14 = v18;
    uint64_t v15 = v19;
    if (v18 != v19)
    {
      do
      {
        long long v23 = *v14;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23) != 6)
        {
          long long v16 = v23;
          uint64_t MapToParent = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v23);
          sub_216C2DA04(v11, v12, v16, *((void *)&v16 + 1), MapToParent, a6, a7);
        }
        ++v14;
      }
      while (v14 != v15);
      __int16 v14 = v18;
    }
    if (v14)
    {
      long long v19 = v14;
      operator delete(v14);
    }
  }
}

void sub_216C2DB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C2DB44(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
}

void sub_216C2DD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a12 != a11 && a31 < 0) {
    operator delete(__p);
  }
  a19 = v31 - 112;
  sub_216782F20((void ***)&a19);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216C2DDEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v6, a1, a2);
  pxrInternal__aapl__pxrReserved__::Pcp_FormatSite(a3, (pxrInternal__aapl__pxrReserved__ *)&v6, v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return sub_216BBEEA4(&v6);
}

void sub_216C2DE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216C2DE68@<X0>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result = (void *)sub_21678C2D8(a3, a1);
  if ((void *)(a3 + 8) == result || (int v8 = (long long *)result[7], v9 = (long long *)result[8], v8 == v9))
  {
LABEL_5:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    while (1)
    {
      double result = (void *)sub_21678C2D8(a2, (const void **)v8);
      if ((void *)(a2 + 8) != result) {
        break;
      }
      int v8 = (long long *)((char *)v8 + 24);
      if (v8 == v9) {
        goto LABEL_5;
      }
    }
    if (*((char *)v8 + 23) < 0)
    {
      uint64_t v11 = *(void **)v8;
      unint64_t v12 = *((void *)v8 + 1);
      return sub_216778F24((unsigned char *)a4, v11, v12);
    }
    else
    {
      long long v10 = *v8;
      *(void *)(a4 + 16) = *((void *)v8 + 2);
      *(_OWORD *)a4 = v10;
    }
  }
  return result;
}

uint64_t sub_216C2DF38(uint64_t a1, int a2, _OWORD *a3, _DWORD *a4, uint64_t a5, int a6)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a5;
    uint64_t v13 = *(void *)(a5 + 16);
  }
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a6;
  *(_OWORD *)(a1 + 8) = *a3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)__p;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v13;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  sub_216981010((_DWORD *)(a1 + 48), a4);
  sub_21698105C((_DWORD *)(a1 + 52), a4 + 1);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

_DWORD *sub_216C2DFF8(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a3, a4, a6, &v29);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v28, Path, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
  sub_21697C414(&v29);
  NonVariantuint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::PcpNode_GetNonVariantPathElementCount(a3, v13);
  long long v29 = *(_OWORD *)this;
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29))
  {
LABEL_11:
    unint64_t v15 = 257;
  }
  else
  {
    unint64_t v15 = 65793;
    while (1)
    {
      int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
      BOOL v18 = ArcType == 6 || ArcType == 1;
      if (v18
        && !pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetDepthBelowIntroduction((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29, v17)&& !pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29))
      {
        break;
      }
      *(void *)&long long v29 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
      *((void *)&v29 + 1) = v19;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29)) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v20 = *(void *)this;
  uint64_t v21 = *((void *)this + 1);
  LayerStacstd::string::size_type k = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v29, LayerStack, &v28);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v27);
  uint64_t v23 = sub_216C25344(a1, 2u, v20, v21, this, &v29, (uint64_t *)&v27, a5, NonVariantPathElementCount, v15);
  uint64_t v25 = v24;
  sub_216BD0624(&v27, v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 3);
  sub_21697C414((_DWORD *)&v29 + 2);
  sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v29);
  if (v23 && v25 != (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)-1) {
    sub_216C2F5F0(a1);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  return sub_21697C414(&v28);
}

void sub_216C2E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C2E20C(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v19, a3, a5, &v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  sub_216BBEEA4(&v18);
  uint64_t v10 = *(void *)this;
  uint64_t v11 = *((void *)this + 1);
  LayerStacstd::string::size_type k = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v18, LayerStack, &v21);
  pxrInternal__aapl__pxrReserved__::PcpMapExpression::Identity(&v17);
  uint64_t v13 = sub_216C25080(a1, 2u, v10, v11, this, &v18, (uint64_t *)&v17, a4, 1);
  unint64_t v15 = v14;
  sub_216BD0624(&v17, v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  sub_216BBEEA4(&v18);
  if (v13 && v15 != (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node *)-1) {
    sub_216C2F5F0(a1);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  return sub_21697C414(&v21);
}

void sub_216C2E344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_216C2E398(uint64_t a1, long long *a2, _DWORD *a3)
{
  uint64_t v5 = (_OWORD *)(a1 + 152);
  if (!*(unsigned char *)(a1 + 192))
  {
    *uint64_t v5 = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_DWORD *)(a1 + 184) = 1065353216;
    *(unsigned char *)(a1 + 192) = 1;
  }
  long long v8 = *a2;
  sub_216981010(&v9, a3);
  sub_21698105C(&v10, a3 + 1);
  v11[1] = a3;
  unint64_t v12 = &v8;
  v11[0] = a2;
  uint64_t v6 = sub_216C2E6D8((uint64_t)v5, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v8, (uint64_t)&unk_2174BFD90, (uint64_t *)&v12, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  return v6 + 5;
}

void sub_216C2E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_216C2E47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = sub_216C2EB34((void **)a1);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = **(void **)(*(void *)a1 + 16);
  for (uint64_t i = 0xFFFFLL; v6 != 0xFFFF; uint64_t i = 0xFFFFLL)
  {
    uint64_t i = *(unsigned __int16 *)(v7 + 48 * v6 + 34);
    if (i != 0xFFFF) {
      break;
    }
    uint64_t v6 = *(unsigned __int16 *)(v7 + 48 * v6 + 24);
  }
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = i;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_216C2E4F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_216C2E52C(uint64_t a1)
{
  sub_216C2E568(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C2E568(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216C2E5AC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216C2E5AC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_216C2E5F8(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  return sub_21697C414((_DWORD *)(a1 + 16));
}

void sub_216C2E5F8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_216C2E690((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216C2E690(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 16));
  sub_21697C414((_DWORD *)(a2 + 12));

  return sub_216982EE4(a2);
}

void *sub_216C2E6D8(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  Uniqueuint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetUniqueIdentifier(this);
  uint64_t v11 = *((unsigned int *)this + 4);
  unint64_t v12 = v11 + UniqueIdentifier + (v11 + UniqueIdentifier) * (v11 + UniqueIdentifier);
  unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)this + 5)+ ((*((unsigned int *)this + 5)+ v11+ (v12 >> 1)+ (*((unsigned int *)this + 5) + v11 + (v12 >> 1)) * (*((unsigned int *)this + 5) + v11 + (v12 >> 1))) >> 1)));
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v5 = v13;
      if (v13 >= v14) {
        unint64_t v5 = v13 % v14;
      }
    }
    else
    {
      unint64_t v5 = v13 & (v14 - 1);
    }
    long long v16 = *(void **)(*(void *)a1 + 8 * v5);
    if (v16)
    {
      uint64_t v17 = (void *)*v16;
      if (*v16)
      {
        do
        {
          unint64_t v18 = v17[1];
          if (v18 == v13)
          {
            if (v17[3] == *((void *)this + 1) && v17[2] == *(void *)this && v17[4] == *((void *)this + 2)) {
              return v17;
            }
          }
          else
          {
            if (v15.u32[0] > 1uLL)
            {
              if (v18 >= v14) {
                v18 %= v14;
              }
            }
            else
            {
              v18 &= v14 - 1;
            }
            if (v18 != v5) {
              break;
            }
          }
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
    }
  }
  sub_216C2E9A4(a1, v13, a4, a5, (uint64_t)v28);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v14 || (float)(v20 * (float)v14) < v19)
  {
    BOOL v21 = 1;
    if (v14 >= 3) {
      BOOL v21 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v14);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v5 = v13 % v14;
      }
      else {
        unint64_t v5 = v13;
      }
    }
    else
    {
      unint64_t v5 = (v14 - 1) & v13;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *uint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v5) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v26 >= v14) {
          v26 %= v14;
        }
      }
      else
      {
        v26 &= v14 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t v17 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C2F268((uint64_t)v28, 0);
  return v17;
}

void sub_216C2E98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C2F268((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216C2E9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = operator new(0x50uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_216C2EA24((uint64_t)(v10 + 2), *a3, *(_OWORD **)a4, *(_DWORD **)(a4 + 8));
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216C2EA0C(_Unwind_Exception *a1)
{
  sub_216C2F268(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216C2EA24(uint64_t a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_216C2EAB8(a1 + 24, a3, a4);
  return a1;
}

void sub_216C2EA98(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C2EAB8(uint64_t a1, _OWORD *a2, _DWORD *a3)
{
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_216C2EB34((void **)a1);
  sub_216C2EC18(*(void *)(a1 + 16) + 24 * *(void *)(a1 + 8), a3);
  return a1;
}

void sub_216C2EB1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C2E5F8((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_216C2EB34(void **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = (void *)*((void *)*result + 2);
  uint64_t v3 = result + 2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)result[3] - (unsigned char *)result[2]) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 4) < v4)
  {
    uint64_t v6 = result;
    v7[0] = "pcp/traversalCache.h";
    v7[1] = "_ResizeForGraph";
    uint64_t v7[2] = 182;
    void v7[3] = "void pxrInternal__aapl__pxrReserved__::Pcp_TraversalCache<pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexer:"
            ":_VariantSelectionInfo>::_ResizeForGraph() [Data = pxrInternal__aapl__pxrReserved__::Pcp_PrimIndexer::_Varia"
            "ntSelectionInfo]";
    char v8 = 0;
    uint64_t result = (void **)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "graph->_GetNumNodes() >= _cache.size()", 0);
    uint64_t v2 = (void *)v1[2];
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v6[3] - (unsigned char *)v6[2]) >> 3);
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 4);
  if (v5 > v4) {
    return sub_216C2EC80(v3, v5);
  }
  return result;
}

uint64_t sub_216C2EC18(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (int *)(a1 + 4);
  unint64_t v4 = a2 + 1;
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2169C487C((int *)a1, a2);
    sub_2169C48D4(v3, v4);
  }
  else
  {
    sub_216981010((_DWORD *)a1, a2);
    sub_21698105C(v3, v4);
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

void **sub_216C2EC80(void **result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)result[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)*result) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return sub_216C2ED24((uint64_t)result, v6);
  }
  else if (!v5)
  {
    for (i = (uint64_t)*result + 24 * a2; v3 != i; uint64_t result = (void **)sub_216C2E690((uint64_t)(v2 + 2), v3))
      v3 -= 24;
    v2[1] = (void *)i;
  }
  return result;
}

void **sub_216C2ED24(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    return (void **)sub_216C2EE58((_DWORD *)a1, a2);
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(void *)a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v18 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_216782ED8(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = v12;
    uint8x8_t v15 = &v12[24 * v8];
    long long v16 = v15;
    uint64_t v17 = &v12[24 * v11];
    sub_216C2EED8(&v14, a2);
    sub_216C2EF68((uint64_t *)a1, &v14);
    return sub_216C2F1EC(&v14);
  }
}

void sub_216C2EE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C2F1EC((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C2EE58(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = (_DWORD *)(v3 + 24 * a2);
    uint64_t v5 = (_DWORD *)(v3 + 16);
    do
    {
      *((void *)v5 - 2) = 0;
      *((void *)v5 - 1) = 0;
      *(void *)uint64_t v5 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v5 - 1);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v5);
      v5[1] = 2;
      uint64_t v6 = v5 + 2;
      v5 += 6;
    }
    while (v6 != v4);
  }
  else
  {
    uint64_t v4 = (_DWORD *)*((void *)result + 1);
  }
  *((void *)v2 + 1) = v4;
  return result;
}

_DWORD *sub_216C2EED8(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 2);
  if (a2)
  {
    uint64_t v4 = (_DWORD *)(v3 + 24 * a2);
    uint64_t v5 = (_DWORD *)(v3 + 12);
    do
    {
      *(void *)(v5 - 1) = 0;
      *(void *)(v5 - 3) = 0;
      *(void *)(v5 + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v5);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v5 + 1);
      void v5[2] = 2;
      uint64_t v6 = v5 + 3;
      v5 += 6;
    }
    while (v6 != v4);
  }
  else
  {
    uint64_t v4 = (_DWORD *)*((void *)result + 2);
  }
  *((void *)v2 + 2) = v4;
  return result;
}

uint64_t sub_216C2EF68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C2EFE0((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C2EFE0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 6;
      sub_216C2F098(a1, (_DWORD *)(v7 - 24), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 24;
      *((void *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216C2F160((uint64_t)v13);
  return v11;
}

_DWORD *sub_216C2F098(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  sub_216C2F0E8((uint64_t)a2, (uint64_t)a3);
  sub_21697D878(a2 + 3, a3 + 3);
  uint64_t result = sub_21697D8B4(a2 + 4, a3 + 4);
  a2[5] = a3[5];
  return result;
}

uint64_t sub_216C2F0E8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  sub_216C2F11C((_DWORD *)a1, a2);
  return a1;
}

_DWORD *sub_216C2F11C(_DWORD *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_21697D878(result, (_DWORD *)a2);
    uint64_t result = sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
    *((unsigned char *)v3 + 8) = 1;
  }
  return result;
}

uint64_t sub_216C2F160(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C2F198((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C2F198(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C2E690(v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216C2F1EC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_216C2F220(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 24;
      uint64_t result = sub_216C2E690(v4, v1 - 24);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_216C2F268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C2E5AC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216C2F2C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, int a3)
{
  if (*((void *)a2 + 1) >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3))
  {
    v9[0] = "pcp/traversalCache.h";
    v9[1] = "_GetEntry";
    void v9[2] = 212;
    v9[3] = "_Entry &pxrInternal__aapl__pxrReserved__::Pcp_TraversalCache<pxrInternal__aapl__pxrReserved__::Pcp_PrimIndex"
            "er::_VariantSelectionInfo>::_GetEntry(const PcpNodeRef &, BOOL) [Data = pxrInternal__aapl__pxrReserved__::Pc"
            "p_PrimIndexer::_VariantSelectionInfo]";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "node._GetNodeIndex() < _cache.size()", 0);
    if (!a3) {
      return *(void *)(a1 + 16) + 24 * *((void *)a2 + 1);
    }
    goto LABEL_3;
  }
  if (a3)
  {
LABEL_3:
    sub_216C2F39C(a1, a2, &v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
  }
  return *(void *)(a1 + 16) + 24 * *((void *)a2 + 1);
}

_DWORD *sub_216C2F39C@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16) + 24 * *((void *)a2 + 1);
  if (!*(unsigned char *)(v4 + 8))
  {
    v15[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
    v15[1] = v7;
    int v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a1 + 16) + 24 * v7);
    if (!*((unsigned char *)v8 + 8))
    {
      sub_216C2F39C(&v14, a1, v15);
      sub_216C2F4E8((uint64_t)v8, (int *)&v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
      sub_21697C414(&v14);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v8))
    {
      uint64_t MapToParent = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent(a2);
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToParent, v10, v11);
      pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v12, v8, &v14);
    }
    else
    {
      uint64_t v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v14 + 1);
    }
    sub_216C2F4E8(v4, (int *)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_21697C414(&v14);
  }
  sub_216981010(a3, (_DWORD *)v4);
  return sub_21698105C(a3 + 1, (_DWORD *)(v4 + 4));
}

void sub_216C2F4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C2F4E8(uint64_t a1, int *a2)
{
  uint64_t v3 = (int *)(a1 + 4);
  uint64_t v4 = a2 + 1;
  if (*(unsigned char *)(a1 + 8))
  {
    sub_21697DE94((int *)a1, a2);
    sub_21697DEEC(v3, v4);
  }
  else
  {
    sub_21697D878((_DWORD *)a1, a2);
    sub_21697D8B4(v3, v4);
    *(unsigned char *)(a1 + 8) = 1;
  }
  return a1;
}

_DWORD *sub_216C2F550@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (_DWORD *)sub_216C2F2C0(*a1, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a1 + 1), 1);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 1);
  sub_216981010((_DWORD *)(a2 + 16), v4);
  uint64_t result = sub_21698105C((_DWORD *)(a2 + 20), v4 + 1);
  *(void *)(a2 + 24) = v4 + 3;
  return result;
}

uint64_t sub_216C2F5B8(uint64_t a1)
{
  return a1;
}

void sub_216C2F5F0(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 48);
  uint64_t v2 = *(_DWORD **)(a1 + 56);
  if (v1 != v2)
  {
    uint64_t v4 = (uint64_t)(v1 + 14);
    while ((*v1 - 9) >= 2)
    {
      if ((*v1 - 14) <= 1)
      {
        *uint64_t v1 = 13;
LABEL_7:
        sub_216C24AFC(*(void *)(a1 + 48), v4, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(0x6DB6DB6DB6DB6DB7* ((v4 - *(void *)(a1 + 48)) >> 3)));
      }
      v1 += 14;
      v4 += 56;
      if (v1 == v2) {
        return;
      }
    }
    *uint64_t v1 = 8;
    goto LABEL_7;
  }
}

uint64_t sub_216C2F6A0(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs(a1)) {
    return 1;
  }
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = v5;
  uint64_t v6 = **(void **)(v16 + 16);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 48 * v5 + 28);
  uint64_t v10 = v16;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  uint64_t v13 = v16;
  uint64_t v8 = 0xFFFFLL;
  uint64_t v14 = 0xFFFFLL;
  uint64_t v15 = v6;
  while (v7 != v8 || v10 != v13)
  {
    unint64_t v9 = sub_216BC2828(&v10, v2, v3);
    if (sub_216C2F6A0(v9)) {
      return 1;
    }
    sub_216BC28B8(&v10);
    uint64_t v7 = v11;
    uint64_t v8 = v14;
  }
  return 0;
}

uint64_t sub_216C2F744(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1)
{
  LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(a1, (int *)&v11);
  LOBYTE(LayerStack) = pxrInternal__aapl__pxrReserved__::PcpComposeSiteHasPrimSpecs(LayerStack, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (LayerStack) {
    return 1;
  }
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v17 = *(void *)a1;
  uint64_t v18 = v6;
  uint64_t v7 = **(void **)(v17 + 16);
  uint64_t v8 = *(unsigned __int16 *)(v7 + 48 * v6 + 28);
  uint64_t v11 = v17;
  uint64_t v12 = v8;
  uint64_t v13 = v7;
  uint64_t v14 = v17;
  uint64_t v9 = 0xFFFFLL;
  uint64_t v15 = 0xFFFFLL;
  uint64_t v16 = v7;
  while (v8 != v9 || v11 != v14)
  {
    uint64_t v10 = sub_216BC2828(&v11, v3, v4);
    if (sub_216C2F744(v10)) {
      return 1;
    }
    sub_216BC28B8(&v11);
    uint64_t v8 = v12;
    uint64_t v9 = v15;
  }
  return 0;
}

void sub_216C2F828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v9 + 4));
  sub_21697C414(&a9);
  _Unwind_Resume(a1);
}

void sub_216C2F848(uint64_t *a1, unint64_t a2, char *a3)
{
  uint64_t v3 = (void **)a2;
  uint64_t v5 = a2 + 16;
  unint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *(void *)a2) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v11 = v6 - *(void *)a2;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      a2 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      a2 = v10;
    }
    if (a2) {
      uint64_t v12 = (char *)sub_216787EE0(v5, a2);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[16 * v9];
    uint64_t v14 = &v12[16 * a2];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
    uint64_t v8 = v13 + 16;
    uint64_t v16 = (char *)*v3;
    uint64_t v15 = (char *)v3[1];
    if (v15 != *v3)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)*v3;
    }
    char *v3 = v13;
    v3[1] = v8;
    v3[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    _OWORD *v7 = *(_OWORD *)a1;
    uint64_t v8 = v7 + 1;
  }
  v3[1] = v8;
  uint64_t v17 = a1[1];
  uint64_t v28 = *a1;
  uint64_t v29 = v17;
  uint64_t v18 = **(void **)(v28 + 16);
  uint64_t v19 = *(unsigned __int16 *)(v18 + 48 * v17 + 28);
  uint64_t v22 = v28;
  uint64_t v23 = v19;
  uint64_t v24 = v18;
  uint64_t v25 = v28;
  uint64_t v20 = 0xFFFFLL;
  uint64_t v26 = 0xFFFFLL;
  uint64_t v27 = v18;
  while (v19 != v20 || v22 != v25)
  {
    BOOL v21 = sub_216BC2828(&v22, a2, a3);
    sub_216C2F848(v21, v3);
    sub_216BC28B8(&v22);
    uint64_t v19 = v23;
    uint64_t v20 = v26;
  }
}

uint64_t sub_216C2F9AC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == *(void *)(a1 + 24))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::PcpNode"
            "Ref>, true>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = true]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return v3 - 16;
}

void sub_216C2FA28()
{
}

uint64_t sub_216C2FA30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::PcpNodeRef>, true>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::PcpNodeRef>, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 - 16;
  }
  return a1;
}

uint64_t *sub_216C2FAB4(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsCulled((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
  if (result) {
    return result;
  }
  if (a3)
  {
    uint64_t v7 = 1;
  }
  else
  {
    int IsDueToAncestor = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
    uint64_t v7 = IsDueToAncestor ^ 1u;
    if (IsDueToAncestor)
    {
      int HasSpecs = 0;
      goto LABEL_7;
    }
  }
  int HasSpecs = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a1);
LABEL_7:
  uint64_t v12 = a1[1];
  uint64_t v23 = *a1;
  uint64_t v24 = v12;
  uint64_t v13 = **(void **)(v23 + 16);
  uint64_t v14 = *(unsigned __int16 *)(v13 + 48 * v12 + 30);
  uint64_t v17 = v23;
  uint64_t v18 = v14;
  uint64_t v19 = v13;
  uint64_t v20 = v23;
  uint64_t v15 = 0xFFFFLL;
  uint64_t v21 = 0xFFFFLL;
  uint64_t v22 = v13;
  while (v14 != v15 || v17 != v20)
  {
    uint64_t v16 = sub_216BC9150(&v17, v9, v10);
    sub_216C2FAB4(v16, a2, v7);
    sub_216BC91E0(&v17);
    uint64_t v14 = v18;
    uint64_t v15 = v21;
  }
  return sub_216C2FBA0(a2, *a1, a1[1], HasSpecs);
}

uint64_t *sub_216C2FBA0(uint64_t *result, uint64_t a2, uint64_t a3, int a4)
{
  v4[0] = a2;
  v4[1] = a3;
  if (a4) {
    return sub_216C2FBD8((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v4, *((unsigned char *)result + 8), (uint64_t *)result[2], (uint64_t *)result[3], (uint64_t *)result[4]);
  }
  return result;
}

uint64_t *sub_216C2FBD8(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if ((a2 & 1) == 0)
  {
    v94[0] = 0;
    v94[1] = 0;
    uint64_t v93 = (uint64_t *)v94;
    long long v91 = 0;
    uint64_t v92 = 0;
    uint64_t v89 = 0;
    unint64_t v90 = (uint64_t *)&v91;
    long long v87 = (uint64_t *)&v88;
    unint64_t v88 = 0;
    LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    uint64_t IncrementalRelocatesSourceToTarget = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesSourceToTarget(v9);
    uint64_t Path = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    uint64_t v14 = *(void **)(IncrementalRelocatesSourceToTarget + 8);
    uint64_t v12 = (void *)(IncrementalRelocatesSourceToTarget + 8);
    uint64_t v13 = v14;
    uint64_t v15 = a3;
    if (v14)
    {
      uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path;
      uint64_t v17 = v12;
      do
      {
        int v18 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), v16);
        uint64_t v19 = v13 + 1;
        if (!v18)
        {
          uint64_t v19 = v13;
          uint64_t v17 = v13;
        }
        uint64_t v13 = (void *)*v19;
      }
      while (*v19);
      if (v17 != v12)
      {
        do
        {
          uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), v20))break; {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28), &v85);
          }
          uint64_t v21 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          uint64_t v22 = v85;
          uint64_t v23 = *v21;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
          sub_21697C414(&v85);
          BOOL v24 = v22 == v23;
          a3 = v15;
          if (v24)
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 36), &v85);
            uint64_t v25 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
            uint64_t v26 = v85;
            uint64_t v27 = *v25;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
            sub_21697C414(&v85);
            if (v26 == v27)
            {
              NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 36));
              a3 = v15;
              *(void *)&long long v85 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
              uint64_t v29 = sub_216C30330(&v87, (uint64_t *)v85, (uint64_t)&unk_2174BFD90, (uint64_t **)&v85);
              sub_2168D2318(v29 + 5, NameToken);
            }
            else
            {
              uint64_t v30 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
              a3 = v15;
              sub_216A8E144(&v90, v30, v30);
            }
            uint64_t v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 28));
            sub_216BF146C(a5, v31, (uint64_t *)v31);
          }
          unsigned int v32 = (void *)v17[1];
          if (v32)
          {
            do
            {
              BOOL v33 = v32;
              unsigned int v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              BOOL v33 = (void *)v17[2];
              BOOL v24 = *v33 == (void)v17;
              uint64_t v17 = v33;
            }
            while (!v24);
          }
          uint64_t v17 = v33;
        }
        while (v33 != v12);
      }
    }
    uint64_t v34 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    unsigned int v35 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v34);
    uint64_t IncrementalRelocatesTargetToSource = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIncrementalRelocatesTargetToSource(v35);
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    uint64_t v40 = *(void **)(IncrementalRelocatesTargetToSource + 8);
    uint64_t v38 = (void *)(IncrementalRelocatesTargetToSource + 8);
    uint64_t v39 = v40;
    if (v40)
    {
      uint64_t v41 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v37;
      uint64_t v42 = v38;
      do
      {
        int v43 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v39 + 28), v41);
        long long v44 = v39 + 1;
        if (!v43)
        {
          long long v44 = v39;
          uint64_t v42 = v39;
        }
        uint64_t v39 = (void *)*v44;
      }
      while (*v44);
      if (v42 != v38)
      {
        do
        {
          int v45 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28), v45))break; {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28), &v85);
          }
          char v46 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          uint64_t v47 = v85;
          uint64_t v48 = *v46;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
          sub_21697C414(&v85);
          BOOL v24 = v47 == v48;
          a3 = v15;
          if (v24)
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 36), &v85);
            uint64_t v49 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
            uint64_t v50 = v85;
            uint64_t v51 = *v49;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
            sub_21697C414(&v85);
            BOOL v24 = v50 == v51;
            a3 = v15;
            if (!v24)
            {
              uint64_t v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28));
              if (a4[4] + 16 * a4[5] == sub_216C303C8(a4, v52, bswap64(0x9E3779B97F4A7C55 * (*(void *)v52 & 0xFFFFFFFFFFFFFFF8))))
              {
                char v53 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v42 + 28));
                sub_216A8E144(&v93, v53, v53);
              }
            }
          }
          uint64_t v54 = (void *)v42[1];
          if (v54)
          {
            do
            {
              BOOL v55 = v54;
              uint64_t v54 = (void *)*v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              BOOL v55 = (void *)v42[2];
              BOOL v24 = *v55 == (void)v42;
              uint64_t v42 = v55;
            }
            while (!v24);
          }
          uint64_t v42 = v55;
        }
        while (v55 != v38);
      }
    }
    if (v89 | v92)
    {
      long long v85 = 0uLL;
      unint64_t v86 = 0;
      sub_216973388((char **)&v85, (a3[1] - *a3) >> 3);
      for (long long i = *(_OWORD *)a3; ; sub_2169CECC4(&i))
      {
        if ((void)i == *((void *)&i + 1))
        {
          long long v73 = *(_OWORD *)a3;
          *(_OWORD *)a3 = v85;
          long long v85 = v73;
          uint64_t v74 = a3[2];
          a3[2] = v86;
          unint64_t v86 = v74;
          *(void *)&long long i = &v85;
          sub_216889A04((void ***)&i);
          break;
        }
        int v58 = (uint64_t *)sub_2169CEBC8((uint64_t *)&i, v56, v57);
        int v61 = sub_216A8E1C4((uint64_t)&v87, v58);
        if (&v88 == v61)
        {
          int v67 = (uint64_t *)sub_2169CEBC8((uint64_t *)&i, v59, v60);
          if (&v91 != sub_216A8E1C4((uint64_t)&v90, v67))
          {
            int v70 = (void *)sub_2169CEBC8((uint64_t *)&i, v68, v69);
            sub_216C3042C((uint64_t)a4, v70, bswap64(0x9E3779B97F4A7C55 * (*v70 & 0xFFFFFFFFFFFFFFF8)));
            continue;
          }
          uint64_t v72 = (uint64_t *)sub_2169CEBC8((uint64_t *)&i, v68, v69);
          uint64_t v65 = (uint64_t *)*((void *)&v85 + 1);
          if (*((void *)&v85 + 1) < v86)
          {
            uint64_t v66 = *v72;
            goto LABEL_51;
          }
          char v71 = sub_216973984((char **)&v85, v72);
        }
        else
        {
          long long v62 = (void *)sub_2169CEBC8((uint64_t *)&i, v59, v60);
          sub_216C3042C((uint64_t)a4, v62, bswap64(0x9E3779B97F4A7C55 * (*v62 & 0xFFFFFFFFFFFFFFF8)));
          long long v63 = v61 + 5;
          sub_216BF146C(a4, v63, v63);
          if ((v64 & 1) == 0) {
            continue;
          }
          uint64_t v65 = (uint64_t *)*((void *)&v85 + 1);
          if (*((void *)&v85 + 1) < v86)
          {
            uint64_t v66 = *v63;
LABEL_51:
            uint64_t *v65 = v66;
            if ((v66 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v65 &= 0xFFFFFFFFFFFFFFF8;
            }
            char v71 = (char *)(v65 + 1);
            goto LABEL_56;
          }
          char v71 = sub_216973984((char **)&v85, v63);
        }
LABEL_56:
        *((void *)&v85 + 1) = v71;
      }
    }
    sub_216C302D8(a3, (void *)a3[1], v93, v94);
    sub_216C30828((uint64_t)a4, v93, v94);
    sub_216C3093C((uint64_t)&v87, v88);
    sub_2168CB05C((uint64_t)&v90, v91);
    sub_2168CB05C((uint64_t)&v93, v94[0]);
  }
  uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs(this);
  if (result)
  {
    unsigned int v76 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    uint64_t v77 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v76);
    uint64_t Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v77);
    int v79 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
    int v80 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v80) {
      int v80 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    int v81 = (char *)v80 + 32;
    int v82 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v82) {
      int v82 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, v79, v81, (void **)a3, (int *)a4, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v82 + 216));
  }
  return result;
}

void sub_216C30214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,char a21,void *a22)
{
  a13 = (void **)&a15;
  sub_216889A04(&a13);
  sub_216C3093C((uint64_t)&a18, a19);
  sub_2168CB05C((uint64_t)&a21, a22);
  sub_2168CB05C(v22 - 104, *(void **)(v22 - 96));
  _Unwind_Resume(a1);
}

void *sub_216C302D8(uint64_t *a1, void *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    char v5 = a3;
    do
    {
      char v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          char v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          char v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      char v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_216C30560(a1, a2, a3, a4, v4);
}

uint64_t *sub_216C30330(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  char v6 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_216AE24F0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_216C303C8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 16 * v4 + 4) < 0)
  {
LABEL_5:
    uint64_t v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while ((*(void *)(v3 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      int v5 = (__int16)(v5 + 1);
      uint64_t v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 16 * v4 + 4)) {
        goto LABEL_5;
      }
    }
  }
  return v3 + 16 * v4;
}

uint64_t sub_216C3042C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_216C303C8((void *)a1, a2, a3);
  if (*(void *)(a1 + 32) + 16 * *(void *)(a1 + 40) == v4) {
    return 0;
  }
  sub_216C3047C((uint64_t *)a1, v4);
  uint64_t result = 1;
  *(unsigned char *)(a1 + 73) = 1;
  return result;
}

uint64_t *sub_216C3047C(uint64_t *result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1)
  {
    uint64_t v2 = *(void *)(a2 + 8);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  uint64_t v3 = result[4];
  uint64_t v4 = (a2 - v3) >> 4;
  uint64_t v5 = *result;
  uint64_t v6 = (v4 + 1) & *result;
  int v7 = *(__int16 *)(v3 + 16 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      BOOL v8 = (int *)(v3 + 16 * v6);
      uint64_t v9 = v3 + 16 * v4;
      int v10 = *v8;
      *(void *)(v9 + 8) = *((void *)v8 + 1);
      *((void *)v8 + 1) = 0;
      *(_DWORD *)uint64_t v9 = v10;
      *(_WORD *)(v9 + 4) = v7 - 1;
      uint64_t v3 = result[4];
      uint64_t v11 = v3 + 16 * v6;
      int v13 = *(__int16 *)(v11 + 4);
      uint64_t v12 = (_WORD *)(v11 + 4);
      if (v13 != -1)
      {
        uint64_t v14 = *(void *)(v3 + 16 * v6 + 8);
        if ((v14 & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          uint64_t v5 = *result;
          uint64_t v3 = result[4];
        }
        _WORD *v12 = -1;
      }
      uint64_t v4 = v6;
      uint64_t v6 = v5 & (v6 + 1);
      int v7 = *(__int16 *)(v3 + 16 * v6 + 4);
    }
    while (v7 > 0);
  }
  return result;
}

void *sub_216C30560(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[1];
    if (a5 <= (uint64_t)(v9 - v11) >> 3)
    {
      uint64_t v21 = a3;
      sub_21680F304(&v21, a5);
      uint64_t v19 = a1[1] - (void)v5;
      if (v19 >> 3 >= a5
        || (uint64_t v21 = a3,
            sub_21680F304(&v21, v19 >> 3),
            a1[1] = (uint64_t)sub_216BADFCC(v10, v21, a4, (void *)a1[1]),
            v19 >= 1))
      {
        sub_216A8E328((uint64_t)a1, (uint64_t)v5, v11, (uint64_t)&v5[a5]);
        sub_216C3079C((uint64_t)&v26, a3, v21, v5);
      }
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 + ((uint64_t)(v11 - *a1) >> 3);
      if (v13 >> 61) {
        sub_21677CB10();
      }
      uint64_t v14 = ((uint64_t)a2 - v12) >> 3;
      uint64_t v15 = v9 - v12;
      if (v15 >> 2 > v13) {
        unint64_t v13 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      uint64_t v25 = a1 + 2;
      if (v16) {
        uint64_t v17 = sub_21677CB28((uint64_t)(a1 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v21 = v17;
      uint64_t v22 = &v17[v14];
      uint64_t v23 = v22;
      BOOL v24 = &v17[v16];
      sub_216C3071C((uint64_t)&v21, a3, a5);
      uint64_t v5 = (void *)sub_216A8E370(a1, &v21, v5);
      sub_2168BE9D8((uint64_t)&v21);
    }
  }
  return v5;
}

void sub_216C306FC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C3071C(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[a3];
    do
    {
      uint64_t v5 = a2[4];
      void *v3 = v5;
      if ((v5 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v6 = (void *)a2[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)a2[2];
          BOOL v8 = *v7 == (void)a2;
          a2 = v7;
        }
        while (!v8);
      }
      ++v3;
      a2 = v7;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

void *sub_216C3079C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_2168D2318(a4, v5 + 4);
      int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      ++a4;
      uint64_t v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

void sub_216C30828(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v6 = 0;
    int v7 = a2;
    do
    {
      unint64_t v8 = v6;
      BOOL v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          int v7 = v10;
        }
        while (!v11);
      }
      unint64_t v6 = v8 + 1;
      int v7 = v10;
    }
    while (v10 != a3);
    unint64_t v12 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 56) - v12 <= v8)
    {
      float v13 = *(float *)(a1 + 68);
      unint64_t v14 = vcvtps_u32_f32((float)(v12 + v6) / v13);
      unint64_t v15 = vcvtps_u32_f32((float)v12 / v13);
      if (v15 <= v14) {
        unint64_t v16 = v14;
      }
      else {
        unint64_t v16 = v15;
      }
      sub_216BF1744(a1, v16);
    }
    if (v4 != a3)
    {
      do
      {
        sub_216BF146C((uint64_t *)a1, v4 + 4, v4 + 4);
        uint64_t v17 = (void *)v4[1];
        if (v17)
        {
          do
          {
            int v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            int v18 = (void *)v4[2];
            BOOL v11 = *v18 == (void)v4;
            uint64_t v4 = v18;
          }
          while (!v11);
        }
        uint64_t v4 = v18;
      }
      while (v18 != a3);
    }
  }
}

void sub_216C3093C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C3093C(a1, *a2);
    sub_216C3093C(a1, a2[1]);
    uint64_t v4 = a2[5];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v5 = a2[4];
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t sub_216C309C0(uint64_t a1)
{
  return a1;
}

BOOL sub_216C309F0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)(a1 + 16);
  do
  {
    uint64_t v3 = *(unsigned int **)v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = sub_216A9DB14(a2, v3 + 4);
    if (!v5) {
      break;
    }
  }
  while (*((void *)v3 + 2) == v5[2]);
  return v4;
}

uint64_t sub_216C30A6C@<X0>(uint64_t result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)result;
  uint64_t v6 = **(void **)(*(void *)result + 16);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 48 * *(void *)(result + 8) + 28);
  *a3 = *(void *)result;
  a3[1] = v7;
  a3[2] = v6;
  a3[3] = v5;
  uint64_t v8 = 0xFFFFLL;
  a3[4] = 0xFFFFLL;
  a3[5] = v6;
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v9 = *a3;
      if (*a3 == a3[3]) {
        break;
      }
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a3);
    if (result == a2)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)a3);
      if ((result & 1) == 0)
      {
        uint64_t v9 = a3[3];
        uint64_t v8 = a3[4];
        break;
      }
    }
    uint64_t v7 = *(unsigned __int16 *)(a3[2] + 48 * a3[1] + 34);
    a3[1] = v7;
    uint64_t v8 = a3[4];
  }
  *(_OWORD *)(a3 + 3) = *(_OWORD *)a3;
  a3[5] = a3[2];
  if (a3[4] != v8 || a3[3] != v9)
  {
    do
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a3 + 3));
      if (result != a2) {
        break;
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(a3 + 3));
      if (result) {
        break;
      }
      uint64_t v11 = a3[3];
      uint64_t v12 = *(unsigned __int16 *)(a3[5] + 48 * a3[4] + 34);
      a3[4] = v12;
    }
    while (v8 != v12 || v11 != v9);
  }
  return result;
}

BOOL sub_216C30B80(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t a2)
{
  LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v4);
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(Identifier + 8);
  if (v6)
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(Identifier + 8)) + 14)) {
      uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)Identifier;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v23 = v6;
  sub_2168BD80C((uint64_t *)&v23);
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = v20;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v23);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(v8, v21, &v19) & 1) != 0
    || (unint64_t v14 = "pcp/primIndex.cpp",
        unint64_t v15 = "_ComputedAssetPathWouldCreateDifferentNode",
        uint64_t v16 = 4569,
        uint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::_ComputedAssetPathWouldCreateDifferentNode(const PcpNodeRef &, cons"
              "t std::string &)",
        char v18 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "SdfLayer::SplitIdentifier( nodeRootLayer->GetIdentifier(), &oldAssetPath, &oldArgs)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find(a2, (uint64_t)&v19, (uint64_t *)&v14);
    uint64_t v9 = sub_21697CF14(&v14);
    if (v10 & 1 | (unint64_t)v9) {
      BOOL v11 = !sub_216ABA3A0((uint64_t *)&v14, &v23);
    }
    else {
      BOOL v11 = 1;
    }
    uint64_t v12 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  sub_2167877AC((uint64_t)&v19, v20[0]);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  sub_216ABB798(&v23);
  return v11;
}

void sub_216C30D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  sub_2167877AC((uint64_t)&a14, a15);
  if (*(char *)(v15 - 25) < 0) {
    operator delete(*(void **)(v15 - 48));
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v15 - 24));
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this)
{
  return *(void *)this == *((void *)this + 1);
}

pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::PcpPropertyIndex(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2)
{
  BOOL v4 = (void ***)((char *)this + 24);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (this != a2) {
    sub_216C333EC((uint64_t)this, *(void *)a2, *((void *)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  }
  uint64_t v5 = (void **)*((void *)a2 + 3);
  if (v5)
  {
    uint64_t v6 = (void **)operator new(0x18uLL);
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
    sub_216BCBAB4(v6, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
    uint64_t v7 = v4;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = 0;
  }
  sub_2168BBAAC(v7, v8);
  return this;
}

void sub_216C30E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v11);
  sub_2168BBAAC(v10, 0);
  sub_216BDCF18((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::Swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

double pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetPropertyRange@<D0>(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  if (a2)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5 == *(void *)this)
    {
      unint64_t v6 = 0;
      uint64_t v9 = *((void *)this + 1);
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v7 = 8;
      uint64_t v5 = *(void *)this;
      do
      {
        IsRootuint64_t Node = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v5 + v7));
        uint64_t v5 = *(void *)this;
        uint64_t v9 = *((void *)this + 1);
        if (IsRootNode) {
          break;
        }
        ++v6;
        v7 += 24;
      }
      while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 3));
    }
    unint64_t v12 = v6;
    if (v6 < 0xAAAAAAAAAAAAAAABLL * ((v9 - v5) >> 3))
    {
      uint64_t v13 = 24 * v6 + 8;
      unint64_t v12 = v6;
      do
      {
        if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v5 + v13))) {
          break;
        }
        ++v12;
        uint64_t v5 = *(void *)this;
        v13 += 24;
      }
      while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
    }
    if (v6 == v12) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v6;
    }
    if (v6 == v12) {
      unint64_t v15 = 0;
    }
    else {
      unint64_t v15 = v12;
    }
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(&v19, (uint64_t)this, v14);
    BOOL v11 = this;
    uint64_t v10 = v15;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(&v19, (uint64_t)this, 0);
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
    BOOL v11 = this;
  }
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(&v18, (uint64_t)v11, v10);
  long long v17 = v18;
  double result = *(double *)&v19;
  *a3 = v19;
  a3[1] = v17;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetNumLocalSpecs(pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 8;
  do
  {
    v4 += pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v1 + v5));
    ++v3;
    uint64_t v1 = *(void *)this;
    v5 += 24;
  }
  while (v3 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
  return v4;
}

void pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::_AddPropertySpecIfPermitted(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, long long *a3, _DWORD *a4, uint64_t *a5)
{
  if (*a4)
  {
    pxrInternal__aapl__pxrReserved__::PcpErrorPropertyPermissionDenied::New(&v34);
    uint64_t v7 = v34;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v34 + 16, a1 + 8);
    sub_2169C487C((int *)(v7 + 96), (_DWORD *)(a1 + 88));
    sub_2169C48D4((int *)(v7 + 100), (_DWORD *)(a1 + 92));
    uint64_t v8 = sub_216990F1C(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &v32);
    uint64_t v9 = v34;
    sub_21697DE94((int *)(v34 + 104), (int *)&v32);
    sub_21697DEEC((int *)(v9 + 108), (int *)&v32 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
    sub_21697C414(&v32);
    uint64_t v10 = sub_216990F1C(a2);
    int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v10);
    *(_DWORD *)(v34 + 112) = SpecType;
    unint64_t v12 = (uint64_t **)sub_216990F1C(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v12, (uint64_t *)&v32);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v32);
    uint64_t Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
    std::string::operator=((std::string *)(v34 + 120), Identifier);
    uint64_t v15 = v33;
    if ((void)v33
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    unsigned int v32 = (atomic_uint *)v34;
    *(void *)&long long v33 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_216C314FC((uint64_t **)a1, (long long *)&v32);
    if ((void)v33) {
      sub_216784EC4((std::__shared_weak_count *)v33);
    }
    if (v35) {
      sub_216784EC4(v35);
    }
  }
  else
  {
    long long v18 = *a2;
    unsigned int v32 = (atomic_uint *)v18;
    if (v18) {
      atomic_fetch_add((atomic_uint *volatile)v18, 1u);
    }
    long long v33 = *a3;
    unint64_t v19 = a5[2];
    unint64_t v20 = a5[1];
    if (v20 >= v19)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a5) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a5) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      uint64_t v38 = a5 + 2;
      if (v26) {
        uint64_t v27 = (char *)sub_216782ED8((uint64_t)(a5 + 2), v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = (std::__shared_weak_count *)&v27[24 * v23];
      uint64_t v34 = (uint64_t)v27;
      unsigned int v35 = v28;
      uint64_t v36 = v28;
      uint64_t v37 = &v27[24 * v26];
      uint64_t v29 = v32;
      v28->__vftable = (std::__shared_weak_count_vtbl *)v32;
      if (v29)
      {
        atomic_fetch_add(v29, 1u);
        uint64_t v28 = v36;
      }
      *(_OWORD *)&v27[24 * v23 + 8] = v33;
      uint64_t v36 = v28 + 1;
      sub_216C33658(a5, &v34);
      uint64_t v22 = a5[1];
      sub_216C336E0((uint64_t)&v34);
    }
    else
    {
      uint64_t v21 = v32;
      *(void *)unint64_t v20 = v32;
      if (v21) {
        atomic_fetch_add(v21, 1u);
      }
      *(_OWORD *)(v20 + 8) = v33;
      uint64_t v22 = v20 + 24;
    }
    a5[1] = v22;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v32);
    uint64_t v30 = sub_216990F1C(a2);
    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v31) {
      uint64_t v31 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    a4[1] = sub_216C3143C(v30, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v31 + 248), a4 + 1);
  }
}

void sub_216C3139C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_216C336E0((uint64_t)&a12);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3143C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned int *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  if (v7 && (sub_216B44AD8((pxrInternal__aapl__pxrReserved__::VtValue *)v6) & 1) != 0)
  {
    if ((v7 & 4) != 0) {
      a3 = (unsigned int *)(*(uint64_t (**)(unsigned char *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
    }
    else {
      a3 = (unsigned int *)v6;
    }
  }
  uint64_t v4 = *a3;
  sub_2168EE084((uint64_t)v6);
  return v4;
}

void sub_216C314E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_216C314FC(uint64_t **a1, long long *a2)
{
  sub_216C27BFC(a1[12], a2);
  uint64_t v5 = (void ***)(*a1 + 3);
  uint64_t v4 = *v5;
  if (!*v5)
  {
    unint64_t v6 = (void **)operator new(0x18uLL);
    v6[1] = 0;
    v6[2] = 0;
    *unint64_t v6 = 0;
    sub_2168BBAAC(v5, v6);
    uint64_t v4 = (void **)(*a1)[3];
  }

  return sub_216C27BFC((uint64_t *)v4, a2);
}

__n128 pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherPropertySpecs(long long **this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, char a3)
{
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 11));
  long long v37 = 0uLL;
  uint64_t v38 = 0;
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)a2, 6u, (uint64_t *)&v31);
    unint64_t v8 = *((void *)&v31 + 1);
    unint64_t v7 = v31;
    long long v9 = v32;
    if ((void)v31 != (void)v32 || *((void *)&v31 + 1) != *((void *)&v32 + 1))
    {
      do
      {
        *(void *)&long long v29 = v7;
        *((void *)&v29 + 1) = v8;
        if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::CanContributeSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29))
        {
          uint64_t Path = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
          LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v29);
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
          uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v13);
          uint64_t v15 = *(uint64_t **)Layers;
          uint64_t v16 = *(uint64_t **)(Layers + 8);
          while (v15 != v16)
          {
            sub_216C31850((uint64_t)this, v15, Path, NameToken, 1, (atomic_uint **)&v39);
            if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v39) & 1) == 0) {
              sub_216C31CC8((uint64_t *)&v37, (atomic_uint **)&v39, &v29);
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v39);
            ++v15;
          }
        }
        ++v8;
      }
      while (__PAIR128__(v8, v7) != v9);
    }
  }
  else
  {
    uint64_t v40 = 0;
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPrimRange((uint64_t *)a2, 6u, &v29);
    sub_216C33730(&v31);
    uint64_t v18 = 0;
    long long v35 = v29;
    long long v36 = v30;
    long long v31 = v30;
    long long v32 = v30;
    long long v33 = v29;
    long long v34 = v29;
    uint64_t v19 = -1;
    while (1)
    {
      long long v29 = v32;
      long long v39 = v34;
      if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v29, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v39))
      {
        break;
      }
      long long v29 = v32;
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v29);
      uint64_t Node = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::GetNode((uint64_t **)&v29);
      *(void *)&long long v39 = Node;
      *((void *)&v39 + 1) = v21;
      if (v21 != v19 || v18 != Node)
      {
        LODWORD(v4sub_216C01044((uint64_t *)this, 0) = HIDWORD(v40);
        uint64_t v18 = Node;
        uint64_t v19 = v21;
      }
      long long v29 = v32;
      pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v29);
      SiteRef = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpPrimIterator::_GetSiteRef((uint64_t **)&v29);
      sub_216C31850((uint64_t)this, SiteRef, v23, NameToken, 0, (atomic_uint **)&v29);
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29) & 1) == 0) {
        pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::_AddPropertySpecIfPermitted((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29, &v39, &v40, (uint64_t *)&v37);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v24, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
      sub_216C31C30((uint64_t)&v31);
    }
    sub_216C33770((atomic_uint **)v37, *((atomic_uint ***)&v37 + 1));
  }
  unint64_t v25 = *this;
  long long v26 = **this;
  *unint64_t v25 = v37;
  long long v37 = v26;
  uint64_t v27 = *((void *)v25 + 2);
  *((void *)v25 + 2) = v38;
  uint64_t v38 = v27;
  *(void *)&long long v31 = &v37;
  sub_216BDCF18((void ***)&v31);
  return result;
}

void sub_216C317F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)(v25 - 88) = &a25;
  sub_216BDCF18((void ***)(v25 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_216C31850@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, char a5@<W4>, atomic_uint **a6@<X8>)
{
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v12, a3);
  if ((result & 1) == 0)
  {
    *a6 = 0;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a3, a4, &v40);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40))
  {
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v39, v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v40);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v39))
    {
      long long v17 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v39);
      int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v17);
      int v19 = SpecType;
      int v20 = *(_DWORD *)(a1 + 124);
      if (v20)
      {
        if (v20 != SpecType)
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentPropertyType::New(&v37);
          uint64_t v21 = v37;
          pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v37 + 16, a1 + 8);
          sub_2169C487C((int *)(v21 + 96), (_DWORD *)(a1 + 88));
          sub_2169C48D4((int *)(v21 + 100), (_DWORD *)(a1 + 92));
          uint64_t v22 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v22, (uint64_t *)&v36);
          unint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v36);
          uint64_t Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v23);
          std::string::operator=((std::string *)(v37 + 104), Identifier);
          uint64_t v25 = *((void *)&v36 + 1);
          if (*((void *)&v36 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
          }
          long long v26 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v26, &v36);
          uint64_t v27 = v37;
          sub_21697DE94((int *)(v37 + 128), (int *)&v36);
          sub_21697DEEC((int *)(v27 + 132), (int *)&v36 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
          sub_21697C414(&v36);
          *(_DWORD *)(v37 + 168) = *(_DWORD *)(a1 + 124);
          uint64_t v28 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v39);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v28, (uint64_t *)&v36);
          long long v29 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v36);
          long long v30 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v29);
          std::string::operator=((std::string *)(v37 + 136), v30);
          uint64_t v31 = *((void *)&v36 + 1);
          if (*((void *)&v36 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          }
          long long v32 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v39);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &v36);
          uint64_t v33 = v37;
          sub_21697DE94((int *)(v37 + 160), (int *)&v36);
          sub_21697DEEC((int *)(v33 + 164), (int *)&v36 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
          sub_21697C414(&v36);
          uint64_t v35 = v37;
          long long v34 = v38;
          *(_DWORD *)(v37 + 172) = v19;
          *(void *)&long long v36 = v35;
          *((void *)&v36 + 1) = v34;
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_216C314FC((uint64_t **)a1, &v36);
          if (*((void *)&v36 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v36 + 1));
          }
          *a6 = 0;
          if (v38) {
            sub_216784EC4(v38);
          }
          goto LABEL_27;
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)(a1 + 104), &v39);
        *(_DWORD *)(a1 + 124) = v19;
      }
      if (a5 & 1) != 0 || v19 != 1 || (sub_216C32ACC(a1, (uint64_t **)&v39))
      {
        unsigned int add = v39;
        *a6 = v39;
        if (add) {
          unsigned int add = (atomic_uint *)atomic_fetch_add(add, 1u);
        }
        goto LABEL_27;
      }
    }
    *a6 = 0;
LABEL_27:
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v39);
    goto LABEL_28;
  }
  *a6 = 0;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  return (uint64_t)sub_21697C414(&v40);
}

void sub_216C31B70(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  if (a4) {
    sub_216784EC4(a4);
  }
  if (a6) {
    sub_216784EC4(a6);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_21697B754((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C31C30(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 48);
  if (pxrInternal__aapl__pxrReserved__::PcpPrimIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v4, (const pxrInternal__aapl__pxrReserved__::PcpPrimIterator *)&v8))
  {
    *(void *)&long long v4 = "tf/iterator.h";
    *((void *)&v4 + 1) = "operator++";
    uint64_t v5 = 250;
    unint64_t v6 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::pair<pxrInternal__aapl__pxrReserved__"
         "::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, true>::operator++() [T = std::pair<pxrIn"
         "ternal__aapl__pxrReserved__::PcpPrimIterator, pxrInternal__aapl__pxrReserved__::PcpPrimIterator>, Reverse = true]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPrimIterator::decrement(v2);
  }
  return a1;
}

uint64_t sub_216C31CC8(uint64_t *a1, atomic_uint **a2, _OWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v23 = v6;
    if (v15) {
      uint64_t v16 = (char *)sub_216782ED8(v6, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    long long v17 = (atomic_uint **)&v16[24 * v12];
    v20[0] = v16;
    v20[1] = v17;
    uint64_t v21 = v17;
    uint64_t v22 = &v16[24 * v15];
    uint64_t v18 = *a2;
    void *v17 = *a2;
    if (v18)
    {
      atomic_fetch_add(v18, 1u);
      long long v17 = v21;
    }
    *(_OWORD *)&v16[24 * v12 + 8] = *a3;
    uint64_t v21 = v17 + 3;
    sub_216C33658(a1, v20);
    uint64_t v11 = a1[1];
    sub_216C336E0((uint64_t)v20);
  }
  else
  {
    uint64_t v10 = *a2;
    *(void *)unint64_t v9 = *a2;
    if (v10) {
      atomic_fetch_add(v10, 1u);
    }
    *(_OWORD *)(v9 + 8) = *a3;
    uint64_t v11 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v11;
  return v11 - 24;
}

void sub_216C31E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C336E0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs(int64x2_t **this, const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2, int a3)
{
  long long v39 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(this + 11);
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 11)) & 1) == 0)
  {
    *(void *)uint64_t v52 = "pcp/propertyIndex.cpp";
    *(void *)&v52[8] = "GatherRelationalAttributeSpecs";
    *(void *)&v52[16] = 397;
    char v53 = "void pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs(const PcpPropertyIndex &, BOOL)";
    LOBYTE(v54) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v52, "relAttrPath.IsRelationalAttributePath()", 0);
  }
  int64x2_t v50 = 0uLL;
  v51[0] = 0;
  uint64_t v49 = 0;
  pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetPropertyRange(a2, 0, &v47);
  uint64_t v7 = *((void *)&v48 + 1);
  uint64_t v6 = v48;
  v45[1] = v48;
  long long v46 = v48;
  long long v8 = v47;
  while (1)
  {
    *(void *)uint64_t v52 = v6;
    *(void *)&v52[8] = v7;
    *(_OWORD *)int v40 = v8;
    if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v40))
    {
      break;
    }
    *(_OWORD *)uint64_t v52 = v46;
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52);
    *(void *)&v45[0] = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52);
    *((void *)&v45[0] + 1) = v9;
    pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNode((pxrInternal__aapl__pxrReserved__ *)v45, v39, 0, &v43);
    while (1)
    {
      *(_OWORD *)uint64_t v52 = v46;
      *(_OWORD *)int v40 = v8;
      if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v40))
      {
        break;
      }
      *(_OWORD *)uint64_t v52 = v46;
      pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52);
      uint64_t Node = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::GetNode((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52);
      if (__PAIR128__(v11, Node) != v45[0]) {
        break;
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v43))
      {
        *(_OWORD *)uint64_t v52 = v46;
        pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52);
        unint64_t v12 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)v52);
        uint64_t v42 = v12;
        if (v12) {
          atomic_fetch_add((atomic_uint *volatile)v12, 1u);
        }
        unint64_t v13 = (uint64_t **)sub_216990F1C(&v42);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v13, (uint64_t *)v52);
        sub_216C32338((uint64_t)this, (uint64_t *)v52, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v43, &v41);
        uint64_t v14 = *(void *)&v52[8];
        if (*(void *)&v52[8]
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v52[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v41) & 1) == 0)
        {
          if (a3)
          {
            *(void *)int v40 = v41;
            if (v41) {
              atomic_fetch_add(v41, 1u);
            }
            *(_OWORD *)&v40[8] = v45[0];
            uint64_t v16 = v50.i64[1];
            if (v50.i64[1] >= v51[0])
            {
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v50.i64[1] - v50.i64[0]) >> 3);
              unint64_t v20 = v19 + 1;
              if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              if (0x5555555555555556 * ((v51[0] - v50.i64[0]) >> 3) > v20) {
                unint64_t v20 = 0x5555555555555556 * ((v51[0] - v50.i64[0]) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v51[0] - v50.i64[0]) >> 3) >= 0x555555555555555) {
                unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v21 = v20;
              }
              uint64_t v54 = v51;
              if (v21) {
                uint64_t v22 = (char *)sub_216782ED8((uint64_t)v51, v21);
              }
              else {
                uint64_t v22 = 0;
              }
              uint64_t v23 = &v22[24 * v19];
              *(void *)uint64_t v52 = v22;
              *(void *)&v52[8] = v23;
              *(void *)&v52[16] = v23;
              char v53 = &v22[24 * v21];
              unint64_t v24 = *(atomic_uint **)v40;
              *(void *)uint64_t v23 = *(void *)v40;
              if (v24)
              {
                atomic_fetch_add(v24, 1u);
                uint64_t v23 = *(char **)&v52[16];
              }
              *(_OWORD *)&v22[24 * v19 + 8] = *(_OWORD *)&v40[8];
              uint64_t v18 = v23 + 24;
              *(void *)&v52[16] = v23 + 24;
              uint64_t v25 = v50.i64[1];
              uint64_t v26 = v50.i64[0];
              uint64_t v27 = *(void *)&v52[8];
              if (v50.i64[1] == v50.i64[0])
              {
                int64x2_t v32 = vdupq_n_s64(v50.u64[1]);
              }
              else
              {
                uint64_t v28 = v50.i64[1];
                uint64_t v29 = *(void *)&v52[8];
                do
                {
                  uint64_t v31 = *(atomic_uint **)(v28 - 24);
                  v28 -= 24;
                  long long v30 = v31;
                  *(void *)(v29 - 24) = v31;
                  v29 -= 24;
                  if (v31) {
                    atomic_fetch_add(v30, 1u);
                  }
                  *(_OWORD *)(v27 - 16) = *(_OWORD *)(v25 - 16);
                  uint64_t v25 = v28;
                  uint64_t v27 = v29;
                }
                while (v28 != v26);
                int64x2_t v32 = v50;
                uint64_t v18 = *(void **)&v52[16];
                uint64_t v27 = v29;
              }
              v50.i64[0] = v27;
              v50.i64[1] = (uint64_t)v18;
              *(int64x2_t *)&v52[8] = v32;
              uint64_t v33 = (const char *)v51[0];
              v51[0] = v53;
              char v53 = v33;
              *(void *)uint64_t v52 = v32.i64[0];
              sub_216C336E0((uint64_t)v52);
            }
            else
            {
              long long v17 = *(atomic_uint **)v40;
              *(void *)v50.i64[1] = *(void *)v40;
              if (v17) {
                atomic_fetch_add(v17, 1u);
              }
              *(_OWORD *)(v16 + 8) = *(_OWORD *)&v40[8];
              uint64_t v18 = (void *)(v16 + 24);
            }
            v50.i64[1] = (uint64_t)v18;
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v40);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::_AddPropertySpecIfPermitted((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v41, v45, &v49, v50.i64);
          }
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v41);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v34, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
      }
      pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v46);
    }
    LODWORD(v49) = HIDWORD(v49);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_21697C414(&v43);
    uint64_t v7 = *((void *)&v46 + 1);
    uint64_t v6 = v46;
  }
  sub_216C33770((atomic_uint **)v50.i64[0], (atomic_uint **)v50.i64[1]);
  uint64_t v35 = *this;
  int64x2_t v36 = **this;
  int64x2_t *v35 = v50;
  int64x2_t v50 = v36;
  uint64_t v37 = v35[1].i64[0];
  v35[1].i64[0] = v51[0];
  v51[0] = v37;
  *(void *)uint64_t v52 = &v50;
  sub_216BDCF18((void ***)v52);
  return result;
}

void sub_216C32270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  a24 = (void **)&a29;
  sub_216BDCF18(&a24);
  _Unwind_Resume(a1);
}

void sub_216C32338(uint64_t a1@<X0>, uint64_t *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, atomic_uint **a4@<X8>)
{
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath((uint64_t *)&v9, v7, a3);
  uint64_t v10 = v9;
  if (v9) {
    atomic_fetch_add(v9, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v10)) {
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104))) {
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)(a1 + 104), &v10);
  }
  if ((sub_216C32ACC(a1, (uint64_t **)&v10) & 1) == 0)
  {
LABEL_9:
    *a4 = 0;
  }
  else
  {
    long long v8 = v10;
    *a4 = v10;
    if (v8) {
      atomic_fetch_add(v8, 1u);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
}

void sub_216C323FC(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::PcpCache *a2, uint64_t a3, uint64_t a4)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a1) & 1) != 0
    || (uint64_t v26 = (void **)"pcp/propertyIndex.cpp",
        uint64_t v27 = "PcpBuildPropertyIndex",
        uint64_t v28 = 456,
        uint64_t v29 = "void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(const SdfPath &, PcpCache *, PcpPropertyIndex"
              " *, PcpErrorVector *)",
        char v30 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "propertyPath.IsPropertyPath()", 0) & 1) != 0))
  {
    if (*(void *)a3 == *(void *)(a3 + 8))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v42);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42, &v26);
        sub_21697DE94(&v42, (int *)&v26);
        sub_21697DEEC(&v43, (int *)&v26 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
        sub_21697C414(&v26);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePrimIndex(a2, (unsigned int *)&v42, a4);
        pxrInternal__aapl__pxrReserved__::PcpBuildPrimPropertyIndex(a1, a2, (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)v9, (long long *)a3, a4);
      }
      else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42))
      {
        LayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(a2);
        pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v35, LayerStackIdentifier, a1);
        sub_216C02920((uint64_t)v19, (uint64_t)v35);
        uint64_t v26 = (void **)a3;
        sub_216C02920((uint64_t)&v27, (uint64_t)v19);
        uint64_t v31 = a4;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
        sub_21697C414(&v24);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v23);
        *(void *)&long long v17 = &v22;
        sub_216787968((void ***)&v17);
        uint64_t v11 = v21;
        if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        uint64_t v12 = v20;
        if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        if (pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a2))
        {
          long long v17 = 0u;
          long long v18 = 0u;
          pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(&v42, a2, &v17, a4);
          pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs((int64x2_t **)&v26, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)&v17, 1);
          sub_2168BBAAC((void ***)&v18 + 1, 0);
          int v44 = (void **)&v17;
          sub_216BDCF18(&v44);
        }
        else
        {
          uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *)pxrInternal__aapl__pxrReserved__::PcpCache::ComputePropertyIndex((int)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
          pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherRelationalAttributeSpecs((int64x2_t **)&v26, v14, 0);
        }
        sub_216C332F4((uint64_t)&v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
        sub_21697C414(&v40);
        pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v39);
        uint64_t v26 = (void **)&v38;
        sub_216787968(&v26);
        uint64_t v15 = v37;
        if (v37 && atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        uint64_t v16 = v36;
        if (v36)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      else
      {
        uint64_t v26 = (void **)"pcp/propertyIndex.cpp";
        uint64_t v27 = "PcpBuildPropertyIndex";
        uint64_t v28 = 507;
        uint64_t v29 = "void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(const SdfPath &, PcpCache *, PcpPropertyIndex"
              " *, PcpErrorVector *)";
        char v30 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Error, the property <%s> is owned by something that is not a prim or a relationship.", Text);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      sub_21697C414(&v42);
    }
    else
    {
      uint64_t v26 = (void **)"pcp/propertyIndex.cpp";
      uint64_t v27 = "PcpBuildPropertyIndex";
      uint64_t v28 = 461;
      uint64_t v29 = "void pxrInternal__aapl__pxrReserved__::PcpBuildPropertyIndex(const SdfPath &, PcpCache *, PcpPropertyIndex *"
            ", PcpErrorVector *)";
      char v30 = 0;
      long long v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build property index for %s with a non-empty property stack.", v8);
    }
  }
}

void sub_216C3281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_216C332F4((uint64_t)&a26);
  sub_216BD8084(v26 - 168);
  sub_21697B754((_DWORD *)(v26 - 80));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpBuildPrimPropertyIndex(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::PcpCache *this, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3, long long *a4, uint64_t a5)
{
  LayerStackuint64_t Identifier = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpCache::GetLayerStackIdentifier(this);
  pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite((pxrInternal__aapl__pxrReserved__::PcpSite *)v25, LayerStackIdentifier, a1);
  sub_216C02920((uint64_t)v16, (uint64_t)v25);
  uint64_t v23 = a4;
  sub_216C02920((uint64_t)v24, (uint64_t)v16);
  v24[11] = a5;
  memset(&v24[12], 0, 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v20);
  uint64_t v32 = (void **)&v19;
  sub_216787968(&v32);
  uint64_t v11 = v18;
  if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v17;
  if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  char IsUsd = pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(this);
  pxrInternal__aapl__pxrReserved__::Pcp_PropertyIndexer::GatherPropertySpecs(&v23, a3, IsUsd);
  sub_216C332F4((uint64_t)&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_21697C414(&v30);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v29);
  uint64_t v23 = (long long *)&v28;
  sub_216787968((void ***)&v23);
  uint64_t v14 = v27;
  if (v27 && atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v26;
  if (v26)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216C32A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BD8084((uint64_t)va);
  sub_216BD8084(v2 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_216C32ACC(uint64_t a1, uint64_t **this)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v47 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this))
  {
    int v4 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, (uint64_t *)&v48);
    if (*((void *)&v48 + 1))
    {
      BOOL v5 = *(unsigned char *)(sub_216850B68((uint64_t *)&v48 + 1) + 14) == 0;
      uint64_t v6 = *((void *)&v48 + 1);
      if (v5) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v48;
      }
      if (*((void *)&v48 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v45);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v9 = (uint64_t *)(v7 + 112);
    uint64_t v10 = sub_216A5B7B0(v9);
    (*(void (**)(long long *__return_ptr))(*(void *)v10 + 136))(&v48);
    if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v48))
    {
      if ((BYTE8(v48) & 4) != 0) {
        uint64_t v11 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v48);
      }
      else {
        uint64_t v11 = &v48;
      }
      uint64_t v12 = *(void *)v11;
      if ((*(void *)v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    sub_2168EE084((uint64_t)&v48);
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v47 = v12;
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    int v46 = 0;
    uint64_t v14 = sub_216A5B7B0(v9);
    (*(void (**)(long long *__return_ptr))(*(void *)v14 + 136))(&v48);
    if (sub_2169DC5C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v48))
    {
      if ((BYTE8(v48) & 4) != 0) {
        uint64_t v15 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v48);
      }
      else {
        uint64_t v15 = &v48;
      }
    }
    else
    {
      uint64_t v15 = (long long *)&v46;
    }
    int v4 = *(_DWORD *)v15;
    sub_2168EE084((uint64_t)&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_21697C414(&v45);
  }
  uint64_t v16 = *(void *)(a1 + 112);
  if (!v16)
  {
    sub_2168D2318((void *)(a1 + 112), &v47);
    *(_DWORD *)(a1 + 12sub_216C01044((uint64_t *)this, 0) = v4;
LABEL_58:
    uint64_t result = 1;
    goto LABEL_59;
  }
  if ((v16 & 0xFFFFFFFFFFFFFFF8) == (v47 & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a1 + 120) != v4)
    {
      pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeVariability::New(&v48);
      uint64_t v31 = v48;
      pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v48 + 16, a1 + 8);
      sub_2169C487C((int *)(v31 + 96), (_DWORD *)(a1 + 88));
      sub_2169C48D4((int *)(v31 + 100), (_DWORD *)(a1 + 92));
      uint64_t v32 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v32, (uint64_t *)&v45);
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v45);
      uint64_t Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v33);
      std::string::operator=((std::string *)(v48 + 104), Identifier);
      uint64_t v35 = *((void *)&v45 + 1);
      if (*((void *)&v45 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      uint64_t v36 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v36, &v45);
      uint64_t v37 = v48;
      sub_21697DE94((int *)(v48 + 128), (int *)&v45);
      sub_21697DEEC((int *)(v37 + 132), (int *)&v45 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
      sub_21697C414(&v45);
      *(_DWORD *)(v48 + 168) = *(_DWORD *)(a1 + 120);
      uint64_t v38 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v38, (uint64_t *)&v45);
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v45);
      int v40 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v39);
      std::string::operator=((std::string *)(v48 + 136), v40);
      uint64_t v41 = *((void *)&v45 + 1);
      if (*((void *)&v45 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
      int v42 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v42, &v45);
      uint64_t v43 = v48;
      sub_21697DE94((int *)(v48 + 160), (int *)&v45);
      sub_21697DEEC((int *)(v43 + 164), (int *)&v45 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
      sub_21697C414(&v45);
      long long v44 = v48;
      *(_DWORD *)(v48 + 172) = v4;
      long long v45 = v44;
      if (*((void *)&v44 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      sub_216C314FC((uint64_t **)a1, &v45);
      if (*((void *)&v45 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
      }
      if (*((void *)&v48 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    goto LABEL_58;
  }
  pxrInternal__aapl__pxrReserved__::PcpErrorInconsistentAttributeType::New(&v48);
  uint64_t v17 = v48;
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v48 + 16, a1 + 8);
  sub_2169C487C((int *)(v17 + 96), (_DWORD *)(a1 + 88));
  sub_2169C48D4((int *)(v17 + 100), (_DWORD *)(a1 + 92));
  uint64_t v18 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, (uint64_t *)&v45);
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v45);
  uint64_t v20 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v19);
  std::string::operator=((std::string *)(v48 + 104), v20);
  uint64_t v21 = *((void *)&v45 + 1);
  if (*((void *)&v45 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  int v22 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v22, &v45);
  uint64_t v23 = v48;
  sub_21697DE94((int *)(v48 + 128), (int *)&v45);
  sub_21697DEEC((int *)(v23 + 132), (int *)&v45 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_21697C414(&v45);
  sub_2168D2318((void *)(v48 + 168), (void *)(a1 + 112));
  int v24 = (uint64_t **)sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v24, (uint64_t *)&v45);
  int v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v45);
  uint64_t v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v25);
  std::string::operator=((std::string *)(v48 + 136), v26);
  uint64_t v27 = *((void *)&v45 + 1);
  if (*((void *)&v45 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = sub_216990F1C((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v45);
  uint64_t v29 = v48;
  sub_21697DE94((int *)(v48 + 160), (int *)&v45);
  sub_21697DEEC((int *)(v29 + 164), (int *)&v45 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
  sub_21697C414(&v45);
  sub_2168D2318((void *)(v48 + 176), &v47);
  long long v45 = v48;
  if (*((void *)&v48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_216C314FC((uint64_t **)a1, &v45);
  if (*((void *)&v45 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
  }
  if (*((void *)&v48 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
  }
  uint64_t result = 0;
LABEL_59:
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216C33184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C332F4(uint64_t a1)
{
  unint64_t add_explicit = *(void *)(a1 + 112);
  if ((add_explicit & 7) != 0) {
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(add_explicit & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 104));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 92));
  sub_21697C414((_DWORD *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 64));
  uint64_t v6 = (void **)(a1 + 40);
  sub_216787968(&v6);
  unint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  int v4 = *(atomic_uint **)(a1 + 16);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

char *sub_216C333EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  long long v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216C3358C((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_216782E84((void *)a1, v10);
    for (uint64_t i = *(void *)(a1 + 8); v6 != a3; v6 += 24)
    {
      unint64_t v13 = *(atomic_uint **)v6;
      *(void *)uint64_t i = *(void *)v6;
      if (v13) {
        atomic_fetch_add(v13, 1u);
      }
      *(_OWORD *)(i + 8) = *(_OWORD *)(v6 + 8);
      i += 24;
    }
LABEL_19:
    *(void *)(a1 + 8) = i;
    return result;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) < a4)
  {
    uint64_t v14 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3);
    uint64_t result = (char *)sub_216C335EC(a2, v14, (uint64_t)v8);
    uint64_t i = *(void *)(a1 + 8);
    if (v14 != a3)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      do
      {
        uint64_t v16 = *(atomic_uint **)v14;
        *(void *)uint64_t v15 = *(void *)v14;
        if (v16) {
          atomic_fetch_add(v16, 1u);
        }
        *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
        i += 24;
        v14 += 24;
        v15 += 24;
      }
      while (v14 != a3);
    }
    goto LABEL_19;
  }
  sub_216C335EC(a2, a3, (uint64_t)v8);
  uint64_t v19 = v18;
  uint64_t result = *(char **)(a1 + 8);
  if (result != v18)
  {
    do
      uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(result - 24));
    while (result != v19);
  }
  *(void *)(a1 + 8) = v19;
  return result;
}

void sub_216C3358C(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    int v4 = v1;
    if (v3 != v1)
    {
      do
        unint64_t v3 = (char *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v3 - 24));
      while (v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216C335EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)a3, (atomic_uint **)v4);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v4 + 8);
    a3 += 24;
    v4 += 24;
  }
  while (v4 != v5);
  return v5;
}

uint64_t *sub_216C33658(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v6 = a2[1];
  }
  else
  {
    uint64_t v5 = result[1];
    uint64_t v6 = a2[1];
    do
    {
      long long v8 = *(atomic_uint **)(v5 - 24);
      v5 -= 24;
      uint64_t v7 = v8;
      *(void *)(v6 - 24) = v8;
      v6 -= 24;
      if (v8) {
        atomic_fetch_add(v7, 1u);
      }
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      uint64_t v3 = v5;
      uint64_t v4 = v6;
    }
    while (v5 != v2);
  }
  a2[1] = v6;
  uint64_t v9 = *result;
  *uint64_t result = v6;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C336E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_216C33730(void *a1)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a1);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(v2 + 2);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a1 + 4);
  pxrInternal__aapl__pxrReserved__::PcpPrimIterator::PcpPrimIterator(a1 + 6);
  return a1;
}

atomic_uint **sub_216C33770(atomic_uint **result, atomic_uint **a2)
{
  uint64_t v3 = result;
  if (result != a2)
  {
    unint64_t v2 = (unint64_t)(a2 - 3);
    if (a2 - 3 > result)
    {
      do
      {
        uint64_t result = (atomic_uint **)sub_216C337CC(&v3, (uint64_t *)&v2);
        v2 -= 24;
        v3 += 3;
      }
      while ((unint64_t)v3 < v2);
    }
  }
  return result;
}

void *sub_216C337CC(atomic_uint ***a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = **a1;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  long long v7 = *(_OWORD *)(v2 + 1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, (atomic_uint **)v3);
  *(_OWORD *)(v2 + 1) = *(_OWORD *)(v3 + 8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v3, &v6);
  *(_OWORD *)(v3 + 8) = v7;
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(&v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_216C33850(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpSite *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpSite *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(this);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v2 + 80));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 21);
  return this;
}

pxrInternal__aapl__pxrReserved__::PcpSite *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpSite *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  sub_21695F340((void *)this + 4, *((void **)a2 + 4), *((void **)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  uint64_t v8 = *((void *)a2 + 8);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)this + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 9) = *((void *)a2 + 9);
  sub_216981010((_DWORD *)this + 20, a3);
  sub_21698105C((_DWORD *)this + 21, (_DWORD *)a3 + 1);
  return this;
}

void sub_216C33968(_Unwind_Exception *a1)
{
  uint64_t v4 = *(atomic_uint **)(v1 + 24);
  if (v4) {
    sub_217324328(v4);
  }
  sub_217324C90(v2);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(a1);
  sub_216981010((_DWORD *)(v6 + 80), a3);
  sub_21698105C((_DWORD *)a1 + 21, a3 + 1);
  uint64_t v7 = sub_216BCA2D4(a2);
  if (v8 & 1 | (unint64_t)v7)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v9);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)a1, Identifier);
  }
  return a1;
}

void sub_216C33A0C(_Unwind_Exception *a1)
{
  sub_21697B754(v2);
  sub_216BCB5AC(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  memset(v9, 0, sizeof(v9));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::PcpExpressionVariablesSource(v8);
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(a1, a2, &v10, v9, v8);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v8);
  v8[0] = (void **)v9;
  sub_216787968(v8);
  uint64_t v6 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_216981010((_DWORD *)(a1 + 80), a3);
  sub_21698105C((_DWORD *)(a1 + 84), a3 + 1);
  return a1;
}

void sub_216C33B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  a10 = (void **)&a12;
  sub_216787968(&a10);
  uint64_t v17 = a16;
  if (a16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::PcpSite *pxrInternal__aapl__pxrReserved__::PcpSite::PcpSite(pxrInternal__aapl__pxrReserved__::PcpSite *this, const pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::PcpLayerStackIdentifier(this);
  sub_216981010((_DWORD *)(v4 + 80), (_DWORD *)a2 + 2);
  sub_21698105C((_DWORD *)this + 21, (_DWORD *)a2 + 3);
  if (*(void *)a2)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8((uint64_t *)a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v5);
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=((uint64_t)this, Identifier);
  }
  return this;
}

void sub_216C33BE4(_Unwind_Exception *a1)
{
  sub_21697B754(v2);
  sub_216BCB5AC(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpSite::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(a1, a2);
  if (result) {
    return *(void *)(a1 + 80) == *(void *)(a2 + 80);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpSite::operator<(uint64_t a1, uint64_t a2)
{
  if (pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator<(a1, a2)) {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator==(a1, a2);
  if (result)
  {
    return sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 80), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 80));
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpSite::Hash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  sub_216C33F30((uint64_t)&v3, a2, (unsigned int *)(a2 + 80));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(pxrInternal__aapl__pxrReserved__::PcpLayerStackSite *this)
{
  *(void *)this = 0;
  uint64_t v2 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  return this;
}

{
  _DWORD *v2;

  *(void *)this = 0;
  uint64_t v2 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(uint64_t a1, void *a2, _DWORD *a3)
{
  *(void *)a1 = *a2;
  uint64_t v5 = (_DWORD *)(a1 + 12);
  sub_2168BD80C((uint64_t *)a1);
  sub_216981010((_DWORD *)(a1 + 8), a3);
  sub_21698105C(v5, a3 + 1);
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator<(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 == *a2) {
    return sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 1), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 1));
  }
  return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::Hash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  sub_216B15920((uint64_t)&v3, (uint64_t *)a2, (unsigned int *)(a2 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_216C33F30(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a2 + 72);
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_2169827F8(a1, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  uint64_t v7 = v6;
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  if (v7 != v9 || ParentNode != v8)
  {
    *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
    *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    uint64_t v103 = 111;
    char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    char v105 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v102, 1, (pxrInternal__aapl__pxrReserved__ *)"Nodes are not siblings");
    return 0;
  }
  if (*((void *)this + 1) == *((void *)a2 + 1) && *(void *)this == *(void *)a2) {
    return 0;
  }
  int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (ArcType < (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2)) {
    return 0xFFFFFFFFLL;
  }
  int v13 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (v13 > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(a2)) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this) != 6)
  {
    int NamespaceDepth = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
    if (NamespaceDepth > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2)) {
      return 0xFFFFFFFFLL;
    }
    int v35 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
    if (v35 < (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2)) {
      return 1;
    }
    uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
    uint64_t v38 = v37;
    *(void *)&long long v100 = OriginNode;
    *((void *)&v100 + 1) = v37;
    uint64_t v39 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
    *(void *)&long long v98 = v39;
    *((void *)&v98 + 1) = v40;
    if (v38 == v40 && OriginNode == v39)
    {
LABEL_52:
      int SiblingNumAtOrigin = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(this);
      if (SiblingNumAtOrigin >= (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(a2))
      {
        int v42 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(this);
        return v42 > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSiblingNumAtOrigin(a2);
      }
      return 0xFFFFFFFFLL;
    }
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    *(void *)&long long v102 = v64;
    *((void *)&v102 + 1) = v65;
    int v66 = sub_216C347EC((uint64_t *)&v102, &v100, (uint64_t)&v98);
    if (v66 < 0) {
      return 0xFFFFFFFFLL;
    }
    if (v66) {
      return 1;
    }
    *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
    *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    uint64_t v103 = 311;
    char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    char v105 = 0;
    uint64_t v33 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Did not find either origin", v67, v68);
    uint64_t v32 = "false";
LABEL_69:
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, v32, v33);
    goto LABEL_52;
  }
  sub_216C34770(this, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v100);
  sub_216C34770(a2, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v98);
  long long v102 = v100;
  uint64_t v14 = v100;
  if ((void)v100)
  {
    uint64_t v15 = *((void *)&v102 + 1);
    while (v15 != -1)
    {
      if (v15 == *((void *)&v98 + 1) && v14 == (void)v98) {
        goto LABEL_31;
      }
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v102);
      *(void *)&long long v102 = v14;
      *((void *)&v102 + 1) = v15;
      if (!v14) {
        break;
      }
    }
  }
  long long v102 = v98;
  uint64_t v17 = v98;
  if ((void)v98)
  {
    uint64_t v18 = *((void *)&v102 + 1);
    while (v18 != -1)
    {
      if (v18 == *((void *)&v100 + 1) && v17 == (void)v100) {
        goto LABEL_31;
      }
      uint64_t v17 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v102);
      *(void *)&long long v102 = v17;
      *((void *)&v102 + 1) = v18;
      if (!v17) {
        break;
      }
    }
  }
  int v20 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
  if (v20 > (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2)) {
    return 0xFFFFFFFFLL;
  }
  int v21 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(this);
  if (v21 < (int)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth(a2)) {
    return 1;
  }
LABEL_31:
  uint64_t v96 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(this);
  uint64_t v97 = v22;
  uint64_t v94 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
  uint64_t v95 = v23;
  uint64_t v24 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  BOOL v27 = v97 == v25 && v96 == v24;
  uint64_t v28 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
  BOOL v31 = v95 == v29 && v94 == v28;
  if (v97 == v95 && v96 == v94)
  {
    if (v27 || v31)
    {
      if (v27 && v31) {
        goto LABEL_52;
      }
      *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
      *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
      uint64_t v103 = 185;
      char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
      char v105 = 0;
      uint64_t v32 = "aIsAuthoredArc && bIsAuthoredArc";
      uint64_t v33 = 0;
      goto LABEL_69;
    }
    uint64_t v49 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
    uint64_t v51 = v50;
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    if (v51 != v53
      || v49 != v52
      || (uint64_t v54 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2),
          uint64_t v56 = v55,
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2),
          v56 != v58)
      || v54 != v57)
    {
      *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
      *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
      uint64_t v103 = 170;
      char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
      char v105 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "a.GetParentNode() == a.GetRootNode() && b.GetParentNode() == b.GetRootNode()", 0);
    }
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v102);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v96, (uint64_t)v93);
    BOOL v59 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
    sub_216BC9108((uint64_t)v93);
    sub_216BC9108((uint64_t)&v102);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a2, (uint64_t)&v102);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v94, (uint64_t)v93);
    BOOL v60 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
    sub_216BC9108((uint64_t)v93);
    sub_216BC9108((uint64_t)&v102);
    if (!v59 && v60) {
      return 0xFFFFFFFFLL;
    }
    if (v59 && !v60) {
      return 1;
    }
    *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
    *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    uint64_t v103 = 181;
    char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    char v105 = 0;
    long long v63 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Did not find copied specialize node.", v61, v62);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "false", v63);
    return 0;
  }
  if (v100 != v98)
  {
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    *(void *)&long long v102 = v43;
    *((void *)&v102 + 1) = v44;
    uint64_t v11 = sub_216C347EC((uint64_t *)&v102, &v100, (uint64_t)&v98);
    if (v11) {
      return v11;
    }
    *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
    *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    uint64_t v103 = 194;
    char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    char v105 = 0;
    uint64_t v47 = "Did not find either origin root";
LABEL_58:
    long long v48 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)v47, v45, v46);
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "result != 0", v48);
    return v11;
  }
  uint64_t v69 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(this);
  uint64_t v71 = v70;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
  if (v71 != v73
    || v69 != v72
    || (uint64_t v74 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2),
        uint64_t v76 = v75,
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2),
        v76 != v78)
    || v74 != v77)
  {
    *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
    *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
    uint64_t v103 = 204;
    char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    char v105 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v102, "a.GetParentNode() == a.GetRootNode() && b.GetParentNode() == b.GetRootNode()", 0);
    if (v27) {
      goto LABEL_75;
    }
LABEL_78:
    int v79 = sub_216C348D8((pxrInternal__aapl__pxrReserved__ *)&v96);
    goto LABEL_79;
  }
  if (!v27) {
    goto LABEL_78;
  }
LABEL_75:
  int v79 = 0;
LABEL_79:
  if (v31) {
    int v80 = 0;
  }
  else {
    int v80 = sub_216C348D8((pxrInternal__aapl__pxrReserved__ *)&v94);
  }
  if (v79 < v80) {
    return 0xFFFFFFFFLL;
  }
  if (v80 < v79) {
    return 1;
  }
  if (v101 > v99) {
    return 0xFFFFFFFFLL;
  }
  if (v99 > v101) {
    return 1;
  }
  LayerStacstd::string::size_type k = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
  *(void *)&long long v102 = v82;
  *((void *)&v102 + 1) = v83;
  if (*LayerStack != *(void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v102)) {
    goto LABEL_103;
  }
  uint64_t v84 = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a2);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2);
  v93[0] = v85;
  v93[1] = v86;
  BOOL v87 = *v84 != *(void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v93)
     || v27;
  if (v87 || v31) {
    goto LABEL_103;
  }
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(this, (uint64_t)&v102);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v96, (uint64_t)v93);
  BOOL v88 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
  sub_216BC9108((uint64_t)v93);
  sub_216BC9108((uint64_t)&v102);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite(a2, (uint64_t)&v102);
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v94, (uint64_t)v93);
  BOOL v89 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&v102, v93);
  sub_216BC9108((uint64_t)v93);
  sub_216BC9108((uint64_t)&v102);
  uint64_t v11 = v88 || !v89 ? 1 : 0xFFFFFFFFLL;
  if (v88 ? v89 : !v89)
  {
LABEL_103:
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    *(void *)&long long v102 = v91;
    *((void *)&v102 + 1) = v92;
    uint64_t v11 = sub_216C347EC((uint64_t *)&v102, &v96, (uint64_t)&v94);
    if (!v11)
    {
      *(void *)&long long v102 = "pcp/strengthOrdering.cpp";
      *((void *)&v102 + 1) = "PcpCompareSiblingNodeStrength";
      uint64_t v103 = 285;
      char v104 = "int pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
      char v105 = 0;
      uint64_t v47 = "Did not find either origin";
      goto LABEL_58;
    }
  }
  return v11;
}

void sub_216C34734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t sub_216C34770@<X0>(_OWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X8>)
{
  *(_OWORD *)a2 = *a1;
  *((void *)a2 + 2) = 0;
  for (uint64_t i = a2; ; uint64_t i = a2)
  {
    uint64_t OriginNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(i);
    uint64_t v6 = v5;
    uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode(a2);
    if (v6 == v8 && OriginNode == result) {
      break;
    }
    *(void *)a2 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode(a2);
    *((void *)a2 + 1) = v9;
    ++*((void *)a2 + 2);
  }
  return result;
}

uint64_t sub_216C347EC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  if (v5 == a2[1] && *a1 == *a2) {
    return 0xFFFFFFFFLL;
  }
  if (v5 == *(void *)(a3 + 8))
  {
    uint64_t v6 = *a1;
    if (*a1 == *(void *)a3) {
      return 1;
    }
  }
  else
  {
    uint64_t v6 = *a1;
  }
  uint64_t v18 = v6;
  uint64_t v19 = v5;
  uint64_t v8 = **(void **)(v6 + 16);
  uint64_t v9 = *(unsigned __int16 *)(v8 + 48 * v5 + 28);
  uint64_t v12 = v6;
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  uint64_t v15 = v6;
  uint64_t v10 = 0xFFFFLL;
  uint64_t v16 = 0xFFFFLL;
  uint64_t v17 = v8;
  while (v9 != v10 || v12 != v15)
  {
    uint64_t v11 = sub_216BC2828(&v12, (uint64_t)a2, (char *)a3);
    uint64_t result = sub_216C347EC(v11, a2, a3);
    if (result) {
      return result;
    }
    sub_216BC28B8(&v12);
    uint64_t v9 = v13;
    uint64_t v10 = v16;
  }
  return 0;
}

uint64_t sub_216C348D8(pxrInternal__aapl__pxrReserved__ *a1)
{
  pxrInternal__aapl__pxrReserved__::Pcp_FindStartingNodeOfClassHierarchy(a1, (uint64_t)&v3);
  for (long long i = v3;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i) == 3;
        *((void *)&i + 1) = v1)
  {
    *(void *)&long long i = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
  }
  return pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetNamespaceDepth((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&i);
}

uint64_t pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **this, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(this);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2);
  if (v8 != v10 || v6 != v9)
  {
    uint64_t v17 = "pcp/strengthOrdering.cpp";
    uint64_t v18 = "PcpCompareNodeStrength";
    uint64_t v19 = 383;
    int v20 = "int pxrInternal__aapl__pxrReserved__::PcpCompareNodeStrength(const PcpNodeRef &, const PcpNodeRef &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Nodes are not part of the same prim index");
    return 0;
  }
  uint64_t v11 = (uint64_t)this[1];
  if (v11 == *((void *)a2 + 1))
  {
    uint64_t v12 = *this;
    if (*this == *(pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)a2) {
      return 0;
    }
  }
  else
  {
    uint64_t v12 = *this;
  }
  sub_216C34A6C((uint64_t)v12, v11, &v17);
  sub_216C34A6C(*(void *)a2, *((void *)a2 + 1), __p);
  uint64_t v13 = sub_216C34BCC((pxrInternal__aapl__pxrReserved__ **)&v17, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef **)__p, v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17)
  {
    uint64_t v18 = (const char *)v17;
    operator delete(v17);
  }
  return v13;
}

void sub_216C34A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C34A6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  *(void *)&long long v18 = result;
  *((void *)&v18 + 1) = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (result && a2 != -1)
  {
    uint64_t v4 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v6 = a3[1];
      unint64_t v5 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - (unsigned char *)*a3) >> 4;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v10 = v5 - (void)*a3;
        if (v10 >> 3 > v9) {
          unint64_t v9 = v10 >> 3;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11) {
          uint64_t v12 = (char *)sub_216787EE0(v4, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = &v12[16 * v8];
        *(_OWORD *)uint64_t v13 = v18;
        uint64_t v15 = (char *)*a3;
        uint64_t v14 = (char *)a3[1];
        uint64_t v16 = v13;
        if (v14 != *a3)
        {
          do
          {
            *((_OWORD *)v16 - 1) = *((_OWORD *)v14 - 1);
            v16 -= 16;
            v14 -= 16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*a3;
        }
        uint64_t v7 = v13 + 16;
        *a3 = v16;
        a3[1] = v13 + 16;
        a3[2] = &v12[16 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v6 = v18;
        uint64_t v7 = v6 + 1;
      }
      a3[1] = v7;
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18);
      *(void *)&long long v18 = result;
      *((void *)&v18 + 1) = v17;
    }
    while (result && v17 != -1);
  }
  return result;
}

void sub_216C34BA8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C34BCC(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::PcpNodeRef **a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  unint64_t v5 = a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a1[1];
  uint64_t v8 = *a1;
  if (v5 - *a2 < (unint64_t)(v7 - *a1)) {
    return -sub_216C34BCC(a2, a1);
  }
  while (v7 != v8)
  {
    uint64_t v10 = *((void *)v7 - 2);
    uint64_t v11 = *((void *)v7 - 1);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)((char *)v7 - 16);
    uint64_t v12 = *((void *)v5 - 2);
    uint64_t v13 = *((void *)v5 - 1);
    unint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)((char *)v5 - 16);
    if (v11 != v13 || v10 != v12)
    {
      if ((const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)((char *)v5 + 16) == v6)
      {
        uint64_t v17 = "pcp/strengthOrdering.cpp";
        long long v18 = "_CompareNodeStrength";
        uint64_t v19 = 373;
        int v20 = "int pxrInternal__aapl__pxrReserved__::_CompareNodeStrength(const PcpNodeRef &, const PcpNodeRefVector &, c"
              "onst PcpNodeRef &, const PcpNodeRefVector &)";
        char v21 = 0;
        uint64_t v15 = v5;
        uint64_t v16 = v7;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "nodesUnderCommonParent.first != aNodes.rend() && nodesUnderCommonParent.second != bNodes.rend()", 0);
        unint64_t v5 = v15;
        uint64_t v7 = v16;
      }
      return pxrInternal__aapl__pxrReserved__::PcpCompareSiblingNodeStrength(v7, v5, a3);
    }
  }
  if (v5 == v6)
  {
    uint64_t v17 = "pcp/strengthOrdering.cpp";
    long long v18 = "_CompareNodeStrength";
    uint64_t v19 = 367;
    int v20 = "int pxrInternal__aapl__pxrReserved__::_CompareNodeStrength(const PcpNodeRef &, const PcpNodeRefVector &, const"
          " PcpNodeRef &, const PcpNodeRefVector &)";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "nodesUnderCommonParent.second != bNodes.rend()", 0);
  }
  return 0xFFFFFFFFLL;
}

void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *this, int a3, int a4, void *a5, char a6, int a7, long long *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (a3 == 1 || a3 == 8)
  {
    if (!pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::IsEmpty(this))
    {
      pxrInternal__aapl__pxrReserved__::PcpPropertyIndex::GetPropertyRange(this, a4, &v43);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v43);
      uint64_t v17 = sub_216990F1C(v16);
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v17) == a3) {
        goto LABEL_5;
      }
      *(void *)&long long v33 = "pcp/targetIndex.cpp";
      *((void *)&v33 + 1) = "PcpBuildFilteredTargetIndex";
      *(void *)&long long v34 = 477;
      *((void *)&v34 + 1) = "void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(const PcpSite &, const "
                              "PcpPropertyIndex &, const SdfSpecType, const BOOL, const SdfSpecHandle &, const BOOL, PcpC"
                              "ache *, PcpTargetIndex *, SdfPathVector *, PcpErrorVector *)";
      LOBYTE(v35) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 80));
      int v30 = "a relationship";
      if (a3 == 1) {
        int v30 = "an attribute";
      }
      BOOL v31 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"<%s> is not %s", v28, v29, Text, v30);
      if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v33, "(*propertyRange.first)->GetSpecType() == relOrAttrType", v31))
      {
LABEL_5:
        long long v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (a3 == 1)
        {
          if (!v18) {
            long long v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 56);
        }
        else
        {
          if (!v18) {
            long long v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v18 + 424);
        }
        long long v41 = 0uLL;
        uint64_t v42 = 0;
        long long v39 = 0uLL;
        uint64_t v40 = 0;
        sub_216C368C8(&v33);
        long long v37 = v43;
        long long v38 = v44;
        long long v33 = v44;
        long long v34 = v44;
        long long v35 = v43;
        long long v36 = v43;
        while (1)
        {
          long long v45 = v36;
          long long v46 = v34;
          if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v46, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v45))
          {
            break;
          }
          int v20 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_216C351FC((uint64_t)&v33);
          char v21 = v20;
          if ((a6 & 1) == 0 && pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(v20, a5)) {
            break;
          }
          uint64_t v22 = sub_216990F1C(v21);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v22, v19, (pxrInternal__aapl__pxrReserved__::VtValue *)&v50);
          if (v51)
          {
            if ((sub_216980CE8((pxrInternal__aapl__pxrReserved__::VtValue *)&v50) & 1) != 0
              || (*(void *)&long long v46 = "pcp/targetIndex.cpp",
                  *((void *)&v46 + 1) = "PcpBuildFilteredTargetIndex",
                  uint64_t v47 = 498,
                  long long v48 = "void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(const PcpSite &, const PcpPro"
                        "pertyIndex &, const SdfSpecType, const BOOL, const SdfSpecHandle &, const BOOL, PcpCache *, PcpT"
                        "argetIndex *, SdfPathVector *, PcpErrorVector *)",
                  char v49 = 0,
                  (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v46, "pathValue.IsHolding<SdfPathListOp>()", 0) & 1) != 0))
            {
              if ((v51 & 4) != 0) {
                (*(void (**)(uint64_t *))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(&v50);
              }
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::HasKeys();
            }
          }
          sub_2168EE084((uint64_t)&v50);
          sub_216C3633C((uint64_t)&v33);
        }
        sub_216BCC2B4((uint64_t *)a10, *(void **)(a10 + 8), (uint64_t *)v39, *((void **)&v39 + 1), (uint64_t)(*((void *)&v39 + 1) - v39) >> 4);
        long long v23 = *a8;
        *a8 = v41;
        long long v41 = v23;
        uint64_t v24 = *((void *)a8 + 2);
        *((void *)a8 + 2) = v42;
        uint64_t v42 = v24;
        long long v25 = *(long long *)((char *)a8 + 24);
        *(long long *)((char *)a8 + 24) = v39;
        long long v39 = v25;
        uint64_t v26 = *((void *)a8 + 5);
        *((void *)a8 + 5) = v40;
        uint64_t v40 = v26;
        *((unsigned char *)a8 + 48) = 0;
        *(void *)&long long v33 = &v39;
        sub_216787968((void ***)&v33);
        *(void *)&long long v33 = &v41;
        sub_216981168((void ***)&v33);
      }
    }
  }
  else
  {
    *(void *)&long long v33 = "pcp/targetIndex.cpp";
    *((void *)&v33 + 1) = "PcpBuildFilteredTargetIndex";
    *(void *)&long long v34 = 457;
    *((void *)&v34 + 1) = "void pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(const PcpSite &, const Pc"
                            "pPropertyIndex &, const SdfSpecType, const BOOL, const SdfSpecHandle &, const BOOL, PcpCache"
                            " *, PcpTargetIndex *, SdfPathVector *, PcpErrorVector *)";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v33, 1, (pxrInternal__aapl__pxrReserved__ *)"relOrAttrType msut be either SdfSpecTypeRelationship or SdfSpecTypeAttribute");
  }
}

void sub_216C35188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_2168EE084(v31 - 112);
  a15 = (void **)&a27;
  sub_216787968(&a15);
  a15 = (void **)&a31;
  sub_216981168(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_216C351FC(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 48);
  if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v9))
  {
    *(void *)&long long v4 = "tf/iterator.h";
    *((void *)&v4 + 1) = "operator*";
    uint64_t v5 = 271;
    uint64_t v6 = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::pair<pxrInternal__aapl__pxrReserved__::PcpPro"
         "pertyIterator, pxrInternal__aapl__pxrReserved__::PcpPropertyIterator>, true>::operator*() [T = const std::pair<"
         "pxrInternal__aapl__pxrReserved__::PcpPropertyIterator, pxrInternal__aapl__pxrReserved__::PcpPropertyIterator>, Reverse = true]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  long long v4 = *v1;
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4);
  return pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::dereference((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4);
}

_DWORD *sub_216C352A0@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X2>, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a2@<X3>, int a3@<W0>, uint64_t a4@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a5@<X4>, int a6@<W5>, pxrInternal__aapl__pxrReserved__::PcpCache *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, pxrInternal__aapl__pxrReserved__::PcpCache *a11)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  char v127 = 0;
  pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromNodeToRoot(this, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v127, &v126);
  if (a3 == 2)
  {
    if (v127
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v126))
    {
      if (a8)
      {
        unint64_t v20 = a8[1];
        if (v20 >= a8[2])
        {
          uint64_t v21 = sub_216981B30(a8, &v126);
        }
        else
        {
          sub_216981010((_DWORD *)a8[1], &v126);
          sub_21698105C((_DWORD *)(v20 + 4), (_DWORD *)&v126 + 1);
          uint64_t v21 = v20 + 8;
        }
        a8[1] = v21;
      }
      uint64_t v64 = *a10;
      uint64_t v65 = (long long *)a10[1];
      if ((long long *)*a10 != v65)
      {
        do
        {
          uint64_t v66 = v126;
          uint64_t v67 = -v64;
          while (1)
          {
            if (*(void *)v64)
            {
              if (v68)
              {
                if (v68[18] == v66) {
                  break;
                }
              }
            }
            v64 += 16;
            v67 -= 16;
            if ((long long *)v64 == v65) {
              goto LABEL_84;
            }
          }
          uint64_t v64 = -v67;
          sub_2167B0AB0((uint64_t)&v143, (long long *)(16 - v67), v65, -v67);
          uint64_t v65 = v69;
          for (long long i = (long long *)a10[1]; i != v65; --i)
          {
            uint64_t v71 = (std::__shared_weak_count *)*((void *)i - 1);
            if (v71) {
              sub_216784EC4(v71);
            }
          }
          a10[1] = (uint64_t)v65;
        }
        while (v65 != (long long *)v64);
      }
      goto LABEL_84;
    }
    goto LABEL_29;
  }
  if (v127)
  {
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v126))
    {
LABEL_29:
      *(unsigned char *)a9 = 0;
      *(unsigned char *)(a9 + 8) = 0;
      goto LABEL_85;
    }
    if (a7)
    {
      int v118 = a6;
      uint64_t v119 = a5;
      v122[0] = a7;
      v122[1] = a11;
      sub_216981010(&v123, &v126);
      sub_21698105C(&v124, (_DWORD *)&v126 + 1);
      uint64_t v125 = 0;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this) == 1)
      {
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(this, (int *)&v143);
        BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v143);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
        sub_21697C414(&v143);
        if (!HasPrefix)
        {
          long long v23 = (uint64_t *)sub_216C365A0((uint64_t)v122);
          LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
          sub_216BC11A8((uint64_t *)&v131, LayerStack);
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPathAtIntroduction(this, (int *)&v136);
          pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v23, 6u, (uint64_t *)&v143);
          uint64_t v25 = *((void *)&v143 + 1);
          uint64_t v26 = (void *)v143;
          BOOL v27 = (void *)v144;
          if (v143 != v144)
          {
            uint64_t v28 = *((void *)&v144 + 1) - 1;
            while (1)
            {
              uint64_t v29 = v25;
              long long __p = v26;
              uint64_t v129 = v25;
              if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__p) == 1)
              {
                int v30 = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__p);
                if (sub_216ABA3A0((uint64_t *)&v131, v30))
                {
                  uint64_t Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&__p);
                  if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(Path, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v136))
                  {
                    break;
                  }
                }
              }
              uint64_t v25 = v29 + 1;
              if (v26 == v27 && v28 == v29) {
                goto LABEL_19;
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v136 + 1);
            sub_21697C414(&v136);
            uint64_t v90 = *((void *)&v131 + 1);
            if (*((void *)&v131 + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
            }
            pxrInternal__aapl__pxrReserved__::PcpErrorInvalidInstanceTargetPath::New(&v131);
            uint64_t v91 = v131;
            pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v131 + 16, a4);
            sub_2169C487C((int *)(v91 + 96), (_DWORD *)(a4 + 80));
            sub_2169C48D4((int *)(v91 + 100), (_DWORD *)(a4 + 84));
            uint64_t v92 = v131;
            sub_2169C487C((int *)(v131 + 104), a2);
            sub_2169C48D4((int *)(v92 + 108), (_DWORD *)a2 + 1);
            uint64_t v93 = sub_216990F1C(v119);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, &v143);
            uint64_t v94 = v131;
            sub_21697DE94((int *)(v131 + 112), (int *)&v143);
            sub_21697DEEC((int *)(v94 + 116), (int *)&v143 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
            sub_21697C414(&v143);
            *(_DWORD *)(v131 + 12sub_216C01044((uint64_t *)this, 0) = v118;
            uint64_t v95 = (uint64_t **)sub_216990F1C(v119);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v95, (uint64_t *)&v143);
            uint64_t v96 = *(atomic_uint **)(v131 + 136);
            *(_OWORD *)(v131 + 128) = v143;
            *((void *)&v143 + 1) = 0;
            if (v96)
            {
              if (atomic_fetch_add_explicit(v96 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v96 + 8))(v96);
              }
              uint64_t v97 = *((void *)&v143 + 1);
              *(void *)&long long v143 = 0;
              if (*((void *)&v143 + 1)
                && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
              }
            }
            uint64_t v98 = v131;
            sub_2169C487C((int *)(v131 + 144), &v126);
            sub_2169C48D4((int *)(v98 + 148), (_DWORD *)&v126 + 1);
            long long v99 = v131;
            uint64_t v100 = *((void *)&v131 + 1);
            if (*((void *)&v131 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v101 = a10[2];
            long long v102 = (void *)a10[1];
            if ((unint64_t)v102 >= v101)
            {
              long long v120 = v99;
              uint64_t v104 = ((uint64_t)v102 - *a10) >> 4;
              unint64_t v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v106 = v101 - *a10;
              if (v106 >> 3 > v105) {
                unint64_t v105 = v106 >> 3;
              }
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v105;
              }
              v145[0] = a10 + 2;
              long long v108 = (char *)sub_216787EE0((uint64_t)(a10 + 2), v107);
              long long v109 = &v108[16 * v104];
              *(void *)&long long v143 = v108;
              *((void *)&v143 + 1) = v109;
              *((void *)&v144 + 1) = &v108[16 * v110];
              *(_OWORD *)long long v109 = v120;
              *(void *)&long long v144 = v109 + 16;
              sub_216BD6608(a10, &v143);
              uint64_t v103 = (void *)a10[1];
              sub_216788028((void **)&v143);
            }
            else
            {
              void *v102 = v99;
              v102[1] = v100;
              uint64_t v103 = v102 + 2;
              a10[1] = (uint64_t)(v102 + 2);
            }
            a10[1] = (uint64_t)v103;
            *(unsigned char *)a9 = 0;
            *(unsigned char *)(a9 + 8) = 0;
            BOOL v89 = (std::__shared_weak_count *)*((void *)&v131 + 1);
            if (!*((void *)&v131 + 1)) {
              goto LABEL_98;
            }
LABEL_97:
            sub_216784EC4(v89);
LABEL_98:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v124);
            sub_21697C414(&v123);
            goto LABEL_85;
          }
LABEL_19:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v136 + 1);
          sub_21697C414(&v136);
          uint64_t v32 = *((void *)&v131 + 1);
          if (*((void *)&v131 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
      }
      if ((pxrInternal__aapl__pxrReserved__::PcpCache::IsUsd(a7) & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v126, &v141);
        long long v33 = (uint64_t *)sub_216C365A0((uint64_t)v122);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v139);
        uint64_t v34 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
        pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::PcpLayerStackSite(&v136, v34, &v139);
        *(void *)&long long v135 = 0;
        *((void *)&v135 + 1) = -1;
        pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v33, 6u, (uint64_t *)&v143);
        uint64_t v35 = *((void *)&v143 + 1);
        uint64_t v36 = v143;
        uint64_t v37 = v144;
        if (v143 == v144) {
          goto LABEL_68;
        }
        uint64_t v38 = *((void *)&v144 + 1) - 1;
        while (1)
        {
          uint64_t v39 = v35;
          *(void *)&long long v131 = v36;
          *((void *)&v131 + 1) = v35;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetSite((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v131, (uint64_t)&__p);
          BOOL v40 = pxrInternal__aapl__pxrReserved__::PcpLayerStackSite::operator==(&__p, &v136);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v129 + 1);
          sub_21697C414(&v129);
          sub_216BBEEA4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
          if (v40) {
            break;
          }
          uint64_t v35 = v39 + 1;
          if (v36 == v37 && v38 == v39) {
            goto LABEL_68;
          }
        }
        long long v135 = v131;
        if (!(void)v131 || *((void *)&v135 + 1) == -1)
        {
LABEL_68:
          pxrInternal__aapl__pxrReserved__::PcpCache::GetPrimIndexInputs(v122[0], (uint64_t)&v143);
          uint64_t v73 = a10;
          if (!v147)
          {
            *(void *)&long long v131 = "pcp/targetIndex.cpp";
            *((void *)&v131 + 1) = "_TargetIsPermitted";
            uint64_t v132 = 286;
            uint64_t v133 = "Pcp_PathTranslationError pxrInternal__aapl__pxrReserved__::_TargetIsPermitted(const SdfPath &, const "
                   "SdfPath &, const PcpNodeRef &, Pcp_TargetIndexContext &)";
            char v134 = 0;
            sub_216C26D48((uint64_t *)&v136);
            int v111 = v130;
            BOOL v112 = (void **)__p;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v141);
            p_p = &__p;
            if (v111 < 0) {
              p_p = v112;
            }
            v117 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Could not find expected node for site %s in prim index for <%s>", v114, v115, p_p, Text);
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v131, "context.GetCache()->GetPrimIndexInputs().cull", v117);
            if (v130 < 0) {
              operator delete(__p);
            }
            uint64_t v73 = a10;
          }
          if (v146 < 0) {
            operator delete((void *)v145[5]);
          }
          sub_216ABC260(v145);
          int v72 = 0;
        }
        else
        {
          int v72 = sub_216C3662C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v126, (uint64_t *)&v135);
          uint64_t v73 = a10;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v138);
        sub_21697C414(&v137);
        sub_216BBEEA4(&v136);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v140);
        sub_21697C414(&v139);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v142);
        sub_21697C414(&v141);
        if (v72 == 2)
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorInvalidTargetPath::New(&v143);
          sub_216C36434(v143 + 16, a4);
          uint64_t v82 = v143;
          sub_2169C487C((int *)(v143 + 104), a2);
          sub_2169C48D4((int *)(v82 + 108), (_DWORD *)a2 + 1);
          uint64_t v83 = sub_216990F1C(v119);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v83, &v131);
          uint64_t v84 = v143;
          sub_21697DE94((int *)(v143 + 112), (int *)&v131);
          sub_21697DEEC((int *)(v84 + 116), (int *)&v131 + 1);
          sub_21697B754(&v131);
          *(_DWORD *)(v143 + 12sub_216C01044((uint64_t *)this, 0) = v118;
          uint64_t v85 = (uint64_t **)sub_216990F1C(v119);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v85, (uint64_t *)&v131);
          uint64_t v86 = *(atomic_uint **)(v143 + 136);
          *(_OWORD *)(v143 + 128) = v131;
          *((void *)&v131 + 1) = 0;
          if (v86)
          {
            if (atomic_fetch_add_explicit(v86 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v86 + 8))(v86);
            }
            uint64_t v87 = *((void *)&v131 + 1);
            *(void *)&long long v131 = 0;
            if (*((void *)&v131 + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
            }
          }
          uint64_t v88 = v143;
          sub_2169C487C((int *)(v143 + 144), &v126);
          sub_2169C48D4((int *)(v88 + 148), (_DWORD *)&v126 + 1);
          long long v131 = v143;
          if (*((void *)&v143 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v143 + 1) + 8), 1uLL, memory_order_relaxed);
          }
LABEL_94:
          sub_216C36478(v73, (uint64_t)&v131);
          if (*((void *)&v131 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v131 + 1));
          }
          *(unsigned char *)a9 = 0;
          *(unsigned char *)(a9 + 8) = 0;
          BOOL v89 = (std::__shared_weak_count *)*((void *)&v143 + 1);
          if (!*((void *)&v143 + 1)) {
            goto LABEL_98;
          }
          goto LABEL_97;
        }
        if (v72 == 1)
        {
          pxrInternal__aapl__pxrReserved__::PcpErrorTargetPermissionDenied::New(&v143);
          sub_216C36434(v143 + 16, a4);
          uint64_t v74 = v143;
          sub_2169C487C((int *)(v143 + 104), a2);
          sub_2169C48D4((int *)(v74 + 108), (_DWORD *)a2 + 1);
          uint64_t v75 = sub_216990F1C(v119);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v75, &v131);
          uint64_t v76 = v143;
          sub_21697DE94((int *)(v143 + 112), (int *)&v131);
          sub_21697DEEC((int *)(v76 + 116), (int *)&v131 + 1);
          sub_21697B754(&v131);
          *(_DWORD *)(v143 + 12sub_216C01044((uint64_t *)this, 0) = v118;
          uint64_t v77 = (uint64_t **)sub_216990F1C(v119);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v77, (uint64_t *)&v131);
          uint64_t v78 = *(atomic_uint **)(v143 + 136);
          *(_OWORD *)(v143 + 128) = v131;
          *((void *)&v131 + 1) = 0;
          if (v78)
          {
            if (atomic_fetch_add_explicit(v78 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v78 + 8))(v78);
            }
            uint64_t v79 = *((void *)&v131 + 1);
            *(void *)&long long v131 = 0;
            if (*((void *)&v131 + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
            }
          }
          uint64_t v80 = v143;
          sub_2169C487C((int *)(v143 + 144), &v126);
          sub_2169C48D4((int *)(v80 + 148), (_DWORD *)&v126 + 1);
          long long v131 = v143;
          if (*((void *)&v143 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v143 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_94;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v124);
      sub_21697C414(&v123);
    }
LABEL_84:
    sub_216981010((_DWORD *)a9, &v126);
    sub_21698105C((_DWORD *)(a9 + 4), (_DWORD *)&v126 + 1);
    *(unsigned char *)(a9 + 8) = 1;
    goto LABEL_85;
  }
  int v41 = a6;
  pxrInternal__aapl__pxrReserved__::PcpErrorInvalidExternalTargetPath::New(&v131);
  uint64_t v42 = v131;
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(v131 + 16, a4);
  sub_2169C487C((int *)(v42 + 96), (_DWORD *)(a4 + 80));
  sub_2169C48D4((int *)(v42 + 100), (_DWORD *)(a4 + 84));
  uint64_t v43 = v131;
  sub_2169C487C((int *)(v131 + 104), a2);
  sub_2169C48D4((int *)(v43 + 108), (_DWORD *)a2 + 1);
  long long v44 = sub_216990F1C(a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44, &v143);
  uint64_t v45 = v131;
  sub_21697DE94((int *)(v131 + 112), (int *)&v143);
  sub_21697DEEC((int *)(v45 + 116), (int *)&v143 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
  sub_21697C414(&v143);
  *(_DWORD *)(v131 + 12sub_216C01044((uint64_t *)this, 0) = v41;
  int ArcType = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  *(_DWORD *)(v131 + 152) = ArcType;
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetIntroPath(this, (int *)&v143);
  uint64_t v47 = v131;
  sub_21697DE94((int *)(v131 + 156), (int *)&v143);
  sub_21697DEEC((int *)(v47 + 160), (int *)&v143 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
  sub_21697C414(&v143);
  long long v48 = (uint64_t **)sub_216990F1C(a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v48, (uint64_t *)&v143);
  char v49 = *(atomic_uint **)(v131 + 136);
  *(_OWORD *)(v131 + 128) = v143;
  *((void *)&v143 + 1) = 0;
  if (v49)
  {
    if (atomic_fetch_add_explicit(v49 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v49 + 8))(v49);
    }
    uint64_t v50 = *((void *)&v143 + 1);
    *(void *)&long long v143 = 0;
    if (*((void *)&v143 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
    }
  }
  *(void *)&long long v143 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v143);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v143 + 1);
  uint64_t v51 = v131;
  sub_21697DE94((int *)(v131 + 144), (int *)&v143);
  sub_21697DEEC((int *)(v51 + 148), (int *)&v143 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
  sub_21697C414(&v143);
  long long v52 = v131;
  uint64_t v53 = *((void *)&v131 + 1);
  if (*((void *)&v131 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v54 = a10[2];
  uint64_t v55 = (void *)a10[1];
  if ((unint64_t)v55 >= v54)
  {
    long long v121 = v52;
    uint64_t v57 = ((uint64_t)v55 - *a10) >> 4;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v59 = v54 - *a10;
    if (v59 >> 3 > v58) {
      unint64_t v58 = v59 >> 3;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v58;
    }
    v145[0] = a10 + 2;
    int v61 = (char *)sub_216787EE0((uint64_t)(a10 + 2), v60);
    long long v62 = &v61[16 * v57];
    *(void *)&long long v143 = v61;
    *((void *)&v143 + 1) = v62;
    *((void *)&v144 + 1) = &v61[16 * v63];
    *(_OWORD *)long long v62 = v121;
    *(void *)&long long v144 = v62 + 16;
    sub_216BD6608(a10, &v143);
    uint64_t v56 = (void *)a10[1];
    sub_216788028((void **)&v143);
  }
  else
  {
    *uint64_t v55 = v52;
    v55[1] = v53;
    uint64_t v56 = v55 + 2;
    a10[1] = (uint64_t)(v55 + 2);
  }
  a10[1] = (uint64_t)v56;
  *(unsigned char *)a9 = 0;
  *(unsigned char *)(a9 + 8) = 0;
  if (*((void *)&v131 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v131 + 1));
  }
LABEL_85:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
  return sub_21697C414(&v126);
}

void sub_216C36110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  sub_216BD7BA0(v40 - 208);
  sub_216BC9108((uint64_t)&a40);
  sub_21697B754((_DWORD *)(v40 - 224));
  sub_21697B754((_DWORD *)(v40 - 216));
  sub_216C36568((uint64_t)&a20);
  sub_21697B754(&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3633C(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 48);
  if (pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::equal((pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v4, (const pxrInternal__aapl__pxrReserved__::PcpPropertyIterator *)&v8))
  {
    *(void *)&long long v4 = "tf/iterator.h";
    *((void *)&v4 + 1) = "operator++";
    uint64_t v5 = 250;
    uint64_t v6 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::pair<pxrInternal__aapl__pxrRese"
         "rved__::PcpPropertyIterator, pxrInternal__aapl__pxrReserved__::PcpPropertyIterator>, true>::operator++() [T = c"
         "onst std::pair<pxrInternal__aapl__pxrReserved__::PcpPropertyIterator, pxrInternal__aapl__pxrReserved__::PcpProp"
         "ertyIterator>, Reverse = true]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::decrement(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PcpBuildTargetIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpPropertyIndex *a2, int a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::PcpBuildFilteredTargetIndex(a1, a2, a3, 0, &v5, 0, 0, a4, 0, a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_216C36420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C36434(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(a1, a2);
  sub_2169C487C((int *)(a1 + 80), (_DWORD *)(a2 + 80));
  sub_2169C48D4((int *)(a1 + 84), (_DWORD *)(a2 + 84));
  return a1;
}

void **sub_216C36478(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    void v16[4] = result;
    uint64_t v13 = (char *)sub_216787EE0((uint64_t)result, v12);
    uint64_t v14 = &v13[16 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[16 * v15];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v16[2] = v14 + 16;
    sub_216BD6608(a1, v16);
    long long v8 = (_OWORD *)a1[1];
    uint64_t result = sub_216788028(v16);
  }
  else
  {
    _OWORD *v7 = *(_OWORD *)a2;
    long long v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_216C36554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C36568(uint64_t a1)
{
  return a1;
}

uint64_t sub_216C365A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result)
  {
    long long v3 = *(pxrInternal__aapl__pxrReserved__::PcpCache **)a1;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), &v4);
    *(void *)(a1 + 24) = pxrInternal__aapl__pxrReserved__::PcpCache::ComputePrimIndex(v3, &v4, *(void *)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
    sub_21697C414(&v4);
    return *(void *)(a1 + 24);
  }
  return result;
}

void sub_216C36618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3662C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  IsPropertyuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a1);
  uint64_t v8 = a2[1];
  uint64_t v37 = *a2;
  uint64_t v38 = v8;
  uint64_t v9 = **(void **)(v37 + 16);
  uint64_t v10 = *(unsigned __int16 *)(v9 + 48 * v8 + 28);
  uint64_t v31 = v37;
  uint64_t v32 = v10;
  uint64_t v33 = v9;
  uint64_t v34 = v37;
  uint64_t v11 = 0xFFFFLL;
  uint64_t v35 = 0xFFFFLL;
  uint64_t v36 = v9;
  while (v10 != v11 || v31 != v34)
  {
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)sub_216BC2828(&v31, v5, v6);
    if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRestricted(v12) & 1) != 0
      || pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPermission(v12) == 1)
    {
      return 1;
    }
    pxrInternal__aapl__pxrReserved__::PcpTranslatePathFromRootToNode(v12, a1, 0, &v29);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v29))
    {
      if (IsPropertyPath)
      {
        LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(v12);
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v14);
        while (v28[0] != v28[1])
        {
          sub_216981010(&v26, &v29);
          sub_21698105C(&v27, &v30);
          while (1)
          {
            IsPrimuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
            if (IsPrimPath) {
              break;
            }
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26))
            {
              long long v18 = (uint64_t *)sub_216BD9634(v28, v16, v17);
              uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v18);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath((uint64_t *)&v25, v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
              if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v25) & 1) == 0)
              {
                uint64_t v21 = sub_216990F1C(&v25);
                if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(v21) == 1)
                {
                  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
                  uint64_t v2 = 1;
                  break;
                }
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
            }
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, &v25);
            sub_21697DE94(&v26, (int *)&v25);
            sub_21697DEEC(&v27, (int *)&v25 + 1);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
            sub_21697C414(&v25);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
          sub_21697C414(&v26);
          if (!IsPrimPath) {
            goto LABEL_21;
          }
          sub_216BD96B4(v28);
        }
      }
      unsigned int v23 = sub_216C3662C(a1, v12);
      BOOL v22 = v23 != 0;
      if (v23) {
        uint64_t v2 = v23;
      }
      else {
        uint64_t v2 = v2;
      }
    }
    else
    {
      uint64_t v2 = 2;
LABEL_21:
      BOOL v22 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    if (v22) {
      return v2;
    }
    sub_216BC28B8(&v31);
    uint64_t v10 = v32;
    uint64_t v11 = v35;
  }
  return 0;
}

void sub_216C36874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_216C368C8(void *a1)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(a1);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(v2 + 2);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(a1 + 4);
  pxrInternal__aapl__pxrReserved__::PcpPropertyIterator::PcpPropertyIterator(a1 + 6);
  return a1;
}

__n128 sub_216C36910(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26C75D800;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C3697C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75D800;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_216C369CC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, void, void, void, void, void))(a1 + 8))(*a2, *(void *)(a1 + 16), a1 + 24, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));
}

uint64_t sub_216C36A18(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75D870)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C36A58()
{
  return &unk_26C75D870;
}

void sub_216C36A64()
{
  sub_216779094(v2, "PcpArcTypeRoot");
  sub_216779094(__p, "root");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpArcTypeInherit");
  sub_216779094(__p, "inherit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpArcTypeRelocate");
  sub_216779094(__p, "relocate");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpArcTypeVariant");
  sub_216779094(__p, "variant");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpArcTypeReference");
  sub_216779094(__p, "reference");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpArcTypePayload");
  sub_216779094(__p, "payload");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpArcTypeSpecialize");
  sub_216779094(__p, "specialize");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75BAC8, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeRoot");
  sub_216779094(__p, "root");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeInherit");
  sub_216779094(__p, "inherit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeVariant");
  sub_216779094(__p, "variant");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeReference");
  sub_216779094(__p, "reference");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypePayload");
  sub_216779094(__p, "payload");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeSpecialize");
  sub_216779094(__p, "specialize");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeAll");
  sub_216779094(__p, "all");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeWeakerThanRoot");
  sub_216779094(__p, "weaker than root");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeStrongerThanPayload");
  sub_216779094(__p, "stronger than payload");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "PcpRangeTypeInvalid");
  sub_216779094(__p, "invalid");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C75D888, 9, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216C37060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::usd_initialize(const void ***a1)
{
  sub_216ABD240(v1, a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_267B915B8, memory_order_acquire) != -1)
  {
    char v3 = v1;
    uint64_t v2 = &v3;
    std::__call_once(&qword_267B915B8, &v2, (void (__cdecl *)(void *))sub_216C371C4);
  }
  sub_21678A498((uint64_t)v1, (char *)v1[1]);
}

void sub_216C37198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::USDInitializeConfiguration::AddEntitlement(uint64_t **a1, const void **a2)
{
  return sub_21680EE0C(a1, a2, (uint64_t)a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::USDInitializeConfiguration::GetEntitlements@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return sub_216ABD240(a2, this);
}

void sub_216C371C4(const void *****a1)
{
  char v1 = **a1;
  uint64_t has_internal_content = os_variant_has_internal_content();
  if ((has_internal_content & 1) == 0) {
    uint64_t has_internal_content = unsetenv("TF_DEBUG");
  }
  char v3 = tbb::internal::DoOneTimeInitializations((tbb::internal *)has_internal_content);
  pxrInternal__aapl__pxrReserved__::__usdlibInitFailure = (int)v3;
  if (!v3)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B915C8, memory_order_acquire) & 1) == 0)
    {
      char v3 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B915C8);
      if (v3)
      {
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)operator new(8uLL);
        pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Tf_RegistryInit(v34, "usd");
        qword_267B915C0 = (uint64_t)v34;
        __cxa_guard_release(&qword_267B915C8);
      }
    }
    pxrInternal__aapl__pxrReserved__::Work_InitializeThreading(v3);
    long long v4 = sub_216ABD240((uint64_t *)&v49, v1);
    pxrInternal__aapl__pxrReserved__::Plug_SetAdditionalEntitlements(v4);
    sub_21678A498((uint64_t)&v49, (char *)v49.__pn_.__r_.__value_.__l.__size_);
    memset(&v48, 0, sizeof(v48));
    uint64_t v5 = dyld_image_path_containing_address();
    dyld_image_header_containing_address();
    uint64_t v6 = macho_dylib_install_name();
    char v7 = [NSURL fileURLWithPath:[NSString stringWithUTF8String:v5] URLByResolvingSymlinksInPath];
    uint64_t v8 = [[NSURL fileURLWithPath:[NSString stringWithUTF8String:v6]] URLByResolvingSymlinksInPath];
    sub_216779094(v46, (char *)[v7 URLByDeletingLastPathComponent].path.cStringUsingEncoding:4);
    sub_216779094(v44, (char *)[v8 URLByDeletingLastPathComponent].path.cStringUsingEncoding:4);
    if ((v47 & 0x80u) == 0) {
      size_t v9 = v47;
    }
    else {
      size_t v9 = (size_t)v46[1];
    }
    uint64_t v10 = &v49;
    sub_2167940B4((uint64_t)&v49, v9 + 5);
    if ((v49.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v10 = (std::__fs::filesystem::path *)v49.__pn_.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if ((v47 & 0x80u) == 0) {
        uint64_t v11 = v46;
      }
      else {
        uint64_t v11 = (void **)v46[0];
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "/usd/");
    std::__fs::filesystem::path v43 = v49;
    if ((v45 & 0x80u) == 0) {
      size_t v12 = v45;
    }
    else {
      size_t v12 = (size_t)v44[1];
    }
    uint64_t v13 = &v49;
    sub_2167940B4((uint64_t)&v49, v12 + 5);
    if ((v49.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v13 = (std::__fs::filesystem::path *)v49.__pn_.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if ((v45 & 0x80u) == 0) {
        uint64_t v14 = v44;
      }
      else {
        uint64_t v14 = (void **)v44[0];
      }
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "/usd/");
    std::__fs::filesystem::path v42 = v49;
    std::__fs::filesystem::__status(&v43, 0);
    if (v49.__pn_.__r_.__value_.__s.__data_[0] && v49.__pn_.__r_.__value_.__s.__data_[0] != 255)
    {
      uint64_t v15 = &v43;
    }
    else
    {
      std::__fs::filesystem::__status(&v42, 0);
      if (!v49.__pn_.__r_.__value_.__s.__data_[0] || v49.__pn_.__r_.__value_.__s.__data_[0] == 255)
      {
LABEL_32:
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v48.__r_.__value_.__l.__size_)
          {
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            unint64_t v41 = 0;
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            sub_216778F24(&__p, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
            uint64_t v17 = v40;
            unint64_t v18 = v41;
            if ((unint64_t)v40 < v41)
            {
              long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((void *)v40 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
              _OWORD *v17 = v19;
              uint64_t v40 = (char *)v17 + 24;
LABEL_50:
              pxrInternal__aapl__pxrReserved__::Plug_SetPaths((uint64_t)&v39, (uint64_t)&v36, 1);
              pxrInternal__aapl__pxrReserved__::aapl_vt_castRegistry_init(v28);
              if (&qword_26B4AF0E8 < &qword_26B4B17E8)
              {
                uint64_t v31 = &qword_26B4AF0E8;
                do
                {
                  pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Add((pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)*v31, (const char *)v31[1], (void (*)(void *, void *))v31[2], v30);
                  v31 += 3;
                }
                while (v31 < &qword_26B4B17E8);
              }
              pxrInternal__aapl__pxrReserved__::__usdlib_internal_mtlx_intialize(v29);
              if (!atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance)) {
                pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
              }
              if (!atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance)) {
                pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
              }
              v49.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
              sub_216782F20((void ***)&v49);
              v49.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
              sub_216782F20((void ***)&v49);
              goto LABEL_58;
            }
            uint64_t v16 = v39;
LABEL_39:
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v16) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v16) >> 3);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x555555555555555) {
              unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v23 = v21;
            }
            uint64_t v51 = &v41;
            if (v23) {
              uint64_t v24 = (char *)sub_216782ED8((uint64_t)&v41, v23);
            }
            else {
              uint64_t v24 = 0;
            }
            std::string::size_type v25 = (std::string::size_type)&v24[24 * v20];
            v49.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
            v49.__pn_.__r_.__value_.__l.__size_ = v25;
            uint64_t v50 = &v24[24 * v23];
            long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v25 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)std::string::size_type v25 = v26;
            memset(&__p, 0, sizeof(__p));
            v49.__pn_.__r_.__value_.__r.__words[2] = v25 + 24;
            sub_216790CCC(&v39, &v49);
            int v27 = v40;
            sub_216790E64((uint64_t)&v49);
            uint64_t v40 = v27;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_50;
          }
        }
        else if (*((unsigned char *)&v48.__r_.__value_.__s + 23))
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          unint64_t v18 = 0;
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          unint64_t v41 = 0;
          std::string __p = v48;
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          goto LABEL_39;
        }
LABEL_58:
        if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__pn_.__r_.__value_.__l.__data_);
        }
        if ((char)v45 < 0) {
          operator delete(v44[0]);
        }
        if ((char)v47 < 0) {
          operator delete(v46[0]);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        return;
      }
      uint64_t v15 = &v42;
    }
    std::string::operator=(&v48, &v15->__pn_);
    goto LABEL_32;
  }
}

void sub_216C37754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  operator delete(v41);
  __cxa_guard_abort(&qword_267B915C8);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<BOOL>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C37F2C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C37F2C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C379D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(a3, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
}

double pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, double a2)
{
  double v2 = a2;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  if (sub_216C413F0(*((double ***)this + 15), &v16, &v15, a2))
  {
    long long v4 = (uint64_t *)*((void *)this + 15);
    unint64_t v6 = v15;
    unint64_t v5 = v16;
    uint64_t v7 = *v4;
    uint64_t v8 = (double *)(*v4 + 24 * v16);
    if (*(unsigned char *)(*v4 + 24 * v15 + 16))
    {
      uint64_t v9 = v15 + 1;
      if (v15 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v4[1] - v7) >> 3))
      {
        v13[0] = "usd/clip.cpp";
        v13[1] = "_TranslateTimeToInternal";
        void v13[2] = 647;
        void v13[3] = "Usd_Clip::InternalTime pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal(ExternalTime) const";
        char v14 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "i2 + 1 < times->size()", 0);
        long long v4 = (uint64_t *)*((void *)this + 15);
      }
      double v10 = *(double *)(*v4 + 24 * v9);
      double v11 = *v8;
      if (*v8 != v10 && v11 != v2) {
        goto LABEL_12;
      }
    }
    else
    {
      double v11 = *v8;
      double v10 = *(double *)(v7 + 24 * v15);
      if (*v8 != v10 && v11 != v2)
      {
LABEL_12:
        if (v10 == v2) {
          return *(double *)(v7 + 24 * v6 + 8);
        }
        else {
          return *(double *)(v7 + 24 * v5 + 8)
        }
               + (v2 - v11) * ((*(double *)(v7 + 24 * v6 + 8) - *(double *)(v7 + 24 * v5 + 8)) / (v10 - v11));
      }
    }
    return *(double *)(v7 + 24 * v5 + 8);
  }
  return v2;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 136))
  {
    *a2 = *((void *)this + 26);
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_2168BD80C(a2);
  }
  else
  {
    int v27 = 0;
    unint64_t v5 = sub_21697CF14((void *)this + 3);
    if (v6 & 1 | (unint64_t)v5
      || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clip.cpp",
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetLayerForClip",
          __p.__r_.__value_.__r.__words[2] = 743,
          int v29 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip() const",
          char v30 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "sourceLayer", 0) & 1) != 0))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)this);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v7);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&__p, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      unint64_t v23 = &v24;
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer((uint64_t *)this + 3, (uint64_t)this + 40, &v23, &v26);
      double v10 = v26;
      uint64_t v9 = v27;
      long long v26 = 0;
      int v27 = v10;
      sub_2168BD378((int)&v27, v9);
      sub_216ABB798(&v26);
      sub_2167877AC((uint64_t)&v23, v24);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&__p);
    }
    if (!v27)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clip.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetLayerForClip";
      __p.__r_.__value_.__r.__words[2] = 757;
      int v29 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip() const";
      char v30 = 0;
      size_t v12 = (void *)((char *)this + 40);
      if (*((char *)this + 63) < 0) {
        size_t v12 = (void *)*v12;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Unable to open clip layer @%s@", v11, v12);
      unint64_t v15 = *(void *)(sub_216C42268() + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        unint64_t v16 = (pxrInternal__aapl__pxrReserved__ *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0) {
          unint64_t v16 = *(pxrInternal__aapl__pxrReserved__ **)v16;
        }
      }
      else
      {
        unint64_t v16 = (pxrInternal__aapl__pxrReserved__ *)"";
      }
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
      if (!v17) {
        uint64_t v17 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
      }
      unint64_t v18 = *(void *)v17 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        double v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          double v19 = *(const char **)v19;
        }
      }
      else
      {
        double v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf(v16, v13, v14, v19);
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      unint64_t v23 = &v24;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v23, (uint64_t *)&v26);
      unint64_t v21 = v26;
      double v20 = v27;
      long long v26 = 0;
      int v27 = v21;
      sub_2168BD378((int)&v27, v20);
      sub_216ABB798(&v26);
      sub_2167877AC((uint64_t)&v23, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::mutex::lock((std::mutex *)((char *)this + 144));
    uint64_t v22 = *((void *)this + 26);
    if (!v22)
    {
      *((void *)this + 26) = v27;
      sub_2168BD80C((uint64_t *)&v27);
      sub_2168BD378(this + 208, 0);
      *((unsigned char *)this + 136) = 1;
      uint64_t v22 = *((void *)this + 26);
    }
    *a2 = v22;
    sub_2168BD80C(a2);
    std::mutex::unlock((std::mutex *)((char *)this + 144));
    return sub_216ABB798(&v27);
  }
}

void sub_216C37E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, int a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_216C37F2C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C38124(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C38124(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C380FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C38124(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<unsigned char>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3831C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3831C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C382F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3831C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C38514(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C38514(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C384EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C38514(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3870C(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3870C(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C386E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3870C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C38904(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C38904(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C388DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C38904(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<unsigned int>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C38AFC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C38AFC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C38AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C38AFC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C38CF4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C38CF4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C38CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C38CF4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C38EEC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C38EEC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C38EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C38EEC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C390E4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C390E4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C390BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C390E4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<unsigned long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C392DC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C392DC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C392B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C392DC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C394D4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C394D4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C394AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C394D4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C396CC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C396CC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C396A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C396CC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C398C4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C398C4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3989C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C398C4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<float>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C39ABC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C39ABC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C39A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C39ABC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C39CB4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C39CB4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C39C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C39CB4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<double>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C39EAC(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C39EAC(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C39E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C39EAC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3A0A4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3A0A4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3A07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3A0A4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), double *a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  if ((sub_216C3A2B4(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (uint64_t)a4, v9) & 1) != 0
    || (double v19 = 0.0,
        double v20 = 0.0,
        size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17),
        (pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) != 0)&& ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (char v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3A2B4(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (uint64_t)a4, v13)), (v15 & 1) != 0))
  {
    *a4 = a5 - v9 + *a4;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3A28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3A2B4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v22, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v21);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v21);
  if ((sub_216C3A4F0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (uint64_t)a4, v9) & 1) != 0
    || (double v23 = 0.0,
        double v24 = 0.0,
        unint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v21),
        (pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, v9, &v24, &v23) & 1) != 0)&& ((v17 = v24, vabdd_f64(v24, v23) >= 0.000001)? (char v19 = (**a3)(a3, &v21, &v22, v9, v24)): (v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v21), char v19 = sub_216C3A4F0(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, (uint64_t)a4, v17)), (v19 & 1) != 0))
  {
    if (*(void *)a4)
    {
      unint64_t v13 = 0;
      double v14 = a5 - v9;
      do
      {
        sub_2169B1440(a4, v11, v12);
        *(double *)(*((void *)a4 + 4) + 8 * v13) = v14 + *(double *)(*((void *)a4 + 4) + 8 * v13);
        ++v13;
      }
      while (v13 < *(void *)a4);
    }
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_216ABB798(&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
  sub_21697C414(&v22);
  return v15;
}

void sub_216C3A4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3A4F0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<std::string>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3A6E8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3A6E8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3A6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3A6E8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3A8E0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3A8E0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3A8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3A8E0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3AAD8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3AAD8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3AAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3AAD8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3ACD0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3ACD0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3ACA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3ACD0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3AEC8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3AEC8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3AEA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3AEC8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3B0C0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3B0C0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3B098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3B0C0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3B2B8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3B2B8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3B290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3B2B8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3B4B0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3B4B0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3B488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3B4B0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3B6A8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3B6A8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3B680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3B6A8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3B8A0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3B8A0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3B878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3B8A0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3BA98(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3BA98(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3BA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3BA98(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3BC90(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3BC90(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3BC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3BC90(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3BE88(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3BE88(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3BE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3BE88(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3C080(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3C080(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3C058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3C080(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3C278(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3C278(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3C250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3C278(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3C470(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3C470(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3C448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3C470(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3C668(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3C668(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3C640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3C668(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3C860(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3C860(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3C838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3C860(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3CA58(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3CA58(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3CA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3CA58(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3CC50(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3CC50(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3CC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3CC50(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3CE48(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3CE48(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3CE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3CE48(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3D040(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3D040(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3D018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3D040(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3D238(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3D238(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3D210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3D238(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3D430(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3D430(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3D408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3D430(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3D628(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3D628(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3D600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3D628(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3D820(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3D820(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3D7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3D820(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3DA18(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3DA18(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3D9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3DA18(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3DC10(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3DC10(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3DBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3DC10(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3DE08(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3DE08(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3DDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3DE08(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3E000(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3E000(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3DFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3E000(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3E1F8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3E1F8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3E1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3E1F8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3E3F0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3E3F0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3E3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3E3F0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3E5E8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3E5E8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3E5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3E5E8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3E7E0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3E7E0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3E7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3E7E0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3E9D8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3E9D8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3E9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3E9D8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3EBD0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3EBD0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3EBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3EBD0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3EDC8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3EDC8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3EDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3EDC8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3EFC0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3EFC0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3EF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3EFC0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3F1B8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3F1B8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3F190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3F1B8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3F3B0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3F3B0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3F388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3F3B0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3F5A8(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3F5A8(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3F580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3F5A8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3F7A0(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3F7A0(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3F778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3F7A0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3F998(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3F998(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3F970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3F998(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3FB90(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3FB90(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3FB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3FB90(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3FD88(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3FD88(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3FD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3FD88(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v18, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v17);
  double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
  BOOL v11 = 1;
  if ((sub_216C3FF80(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v9) & 1) == 0)
  {
    double v19 = 0.0;
    double v20 = 0.0;
    size_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, v9, &v20, &v19) & 1) == 0|| ((v13 = v20, vabdd_f64(v20, v19) >= 0.000001)? (v15 = (**a3)(a3, &v17, &v18, v9, v20)): (double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v17), v15 = sub_216C3FF80(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a4, v13)), (v15 & 1) == 0))
    {
      BOOL v11 = 0;
    }
  }
  sub_216ABB798(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v11;
}

void sub_216C3FF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C3FF80(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  if (a3) {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample((uint64_t)a1, a4);
  }
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(a1, a2, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), uint64_t a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v28, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v27);
  uint64_t v10 = sub_216AA5ECC((uint64_t *)&v27);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, v9)) {
    goto LABEL_2;
  }
  *(void *)&long long v32 = 0;
  *(void *)&long long v29 = 0;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v27);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, v9, (double *)&v32, (double *)&v29))goto LABEL_21; {
  double v23 = *(double *)&v32;
  }
  if (vabdd_f64(*(double *)&v32, *(double *)&v29) < 0.000001)
  {
    uint64_t v24 = sub_216AA5ECC((uint64_t *)&v27);
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v24, v23)
      && (!a4 || !*(unsigned char *)(a4 + 24)))
    {
      goto LABEL_2;
    }
LABEL_21:
    uint64_t v25 = 0;
    goto LABEL_22;
  }
  if (((**a3)(a3, &v27, &v28, v9, *(double *)&v32) & 1) == 0) {
    goto LABEL_21;
  }
LABEL_2:
  BOOL v11 = (const char *)(*(void *)(*(void *)(a4 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (!strcmp((const char *)(0x8000000217468BA7 & 0x7FFFFFFFFFFFFFFFLL), v11))
  {
    **(double **)(a4 + 8) = a5 - v9 + **(double **)(a4 + 8);
  }
  else if (!strcmp((const char *)(0x8000000217468BD9 & 0x7FFFFFFFFFFFFFFFLL), v11))
  {
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v12 = *(void *)(a4 + 8);
    long long v13 = *(_OWORD *)(v12 + 16);
    long long v32 = *(_OWORD *)v12;
    long long v33 = v13;
    *(_OWORD *)uint64_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    uint64_t v34 = *(void *)(v12 + 32);
    *(void *)(v12 + 32) = 0;
    if ((long long *)v12 != &v29)
    {
      sub_2168F83DC(v12);
      long long v14 = v30;
      *(_OWORD *)uint64_t v12 = v29;
      *(_OWORD *)(v12 + 16) = v14;
      long long v29 = 0u;
      long long v30 = 0u;
      *(void *)(v12 + 32) = v31;
      uint64_t v31 = 0;
    }
    sub_2168F83DC((uint64_t)&v29);
    long long v29 = v32;
    long long v30 = v33;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v31 = v34;
    uint64_t v34 = 0;
    sub_2168F83DC((uint64_t)&v32);
    if ((void)v29)
    {
      unint64_t v17 = 0;
      double v18 = a5 - v9;
      do
      {
        sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, v15, v16);
        *(double *)(v31 + 8 * v17) = v18 + *(double *)(v31 + 8 * v17);
        ++v17;
      }
      while (v17 < (unint64_t)v29);
    }
    uint64_t v19 = *(void *)(a4 + 8);
    long long v20 = *(_OWORD *)(v19 + 16);
    long long v32 = *(_OWORD *)v19;
    long long v33 = v20;
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    uint64_t v34 = *(void *)(v19 + 32);
    *(void *)(v19 + 32) = 0;
    if ((long long *)v19 != &v29)
    {
      sub_2168F83DC(v19);
      long long v21 = v30;
      *(_OWORD *)uint64_t v19 = v29;
      *(_OWORD *)(v19 + 16) = v21;
      long long v29 = 0u;
      long long v30 = 0u;
      *(void *)(v19 + 32) = v31;
      uint64_t v31 = 0;
    }
    sub_2168F83DC((uint64_t)&v29);
    long long v29 = v32;
    long long v30 = v33;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v31 = v34;
    uint64_t v34 = 0;
    sub_2168F83DC((uint64_t)&v32);
    sub_2168F83DC((uint64_t)&v29);
  }
  uint64_t v25 = 1;
LABEL_22:
  sub_216ABB798(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  return v25;
}

void sub_216C40318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, int a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t (***a3)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double), pxrInternal__aapl__pxrReserved__::VtValue *a4, double a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v35, this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  double v9 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, a5);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v34);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v34);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v9, a4))goto LABEL_2; {
  double v36 = 0.0;
  }
  v37[0] = 0.0;
  long long v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v34);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v9, v37, &v36))goto LABEL_17; {
  double v14 = v37[0];
  }
  if (vabdd_f64(v37[0], v36) >= 0.000001)
  {
    if (((**a3)(a3, &v34, &v35, v9, v37[0]) & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_2;
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v34);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35, v14, a4))
  {
LABEL_17:
    uint64_t v32 = 0;
    goto LABEL_18;
  }
  if (a4 && sub_216A5F85C(a4))
  {
    *((void *)&v38 + 1) = 0;
    sub_2168ED33C(a4, &v38);
    sub_2168EE084((uint64_t)&v38);
    goto LABEL_17;
  }
LABEL_2:
  if (sub_216B8D878(a4))
  {
    BOOL v11 = (double *)sub_216B8D9A4(a4);
    double v12 = *v11;
    double *v11 = 0.0;
    *(double *)sub_216B8D9A4(a4) = a5 - v9 + v12;
  }
  else if (sub_216B8DA34(a4))
  {
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v16 = sub_216B8DB90(a4);
    uint64_t v19 = *(void *)(v16 + 32);
    uint64_t v20 = v39;
    *(void *)(v16 + 32) = v40;
    uint64_t v40 = v19;
    long long v21 = *(_OWORD *)v16;
    *(_OWORD *)uint64_t v16 = v38;
    uint64_t v22 = *(void *)(v16 + 16);
    uint64_t v23 = *(void *)(v16 + 24);
    *(void *)(v16 + 16) = v20;
    long long v38 = v21;
    *(void *)(v16 + 24) = *((void *)&v39 + 1);
    *(void *)&long long v39 = v22;
    *((void *)&v39 + 1) = v23;
    if ((void)v21)
    {
      unint64_t v24 = 0;
      double v25 = a5 - v9;
      do
      {
        sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38, v17, v18);
        *(double *)(v40 + 8 * v24) = v25 + *(double *)(v40 + 8 * v24);
        ++v24;
      }
      while (v24 < (unint64_t)v38);
    }
    uint64_t v26 = sub_216B8DB90(a4);
    uint64_t v27 = *(void *)(v26 + 32);
    unint64_t v28 = v39;
    *(void *)(v26 + 32) = v40;
    uint64_t v40 = v27;
    long long v29 = *(_OWORD *)v26;
    *(_OWORD *)uint64_t v26 = v38;
    uint64_t v30 = *(void *)(v26 + 16);
    uint64_t v31 = *(void *)(v26 + 24);
    *(_OWORD *)(v26 + 16) = __PAIR128__(*((unint64_t *)&v39 + 1), v28);
    long long v38 = v29;
    *(void *)&long long v39 = v30;
    *((void *)&v39 + 1) = v31;
    sub_2168F83DC((uint64_t)&v38);
  }
  uint64_t v32 = 1;
LABEL_18:
  sub_216ABB798(&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
  sub_21697C414(&v35);
  return v32;
}

void sub_216C40644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdIsClipRelatedField(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3) {
    char v3 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v4) {
    uint64_t v4 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  return (*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8);
}

char *pxrInternal__aapl__pxrReserved__::UsdGetClipRelatedFields@<X0>(void *a1@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3) {
    char v3 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v4 = (atomic_uint *)*((void *)v3 + 1);
  double v14 = v4;
  if ((v4 & 7) != 0)
  {
    unint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      double v14 = v5;
    }
  }
  char v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v6) {
    char v6 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v7 = (atomic_uint *)*((void *)v6 + 2);
  uint64_t v15 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v8;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  __n128 result = (char *)operator new(0x10uLL);
  uint64_t v10 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 16;
  do
  {
    BOOL v11 = (&v14)[v10];
    *(void *)&result[v10 * 8] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v10 * 8] &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v10;
  }
  while (v10 != 2);
  a1[1] = result + 16;
  for (uint64_t i = 1; i != -1; --i)
  {
    long long v13 = (&v14)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_216C4089C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C40AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v30 != -1.79769313e308 && a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Usd_Clip *pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(pxrInternal__aapl__pxrReserved__::Usd_Clip *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 23);
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 12sub_216C01044((uint64_t *)this, 0) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 18) = 850045863;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20sub_216C01044((uint64_t *)this, 0) = 0u;
  return this;
}

void sub_216C40BDC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4) {
    sub_217324248(v4);
  }
  sub_217324DD0(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(uint64_t a1, uint64_t *a2, _DWORD *a3, unint64_t a4, long long *a5, _DWORD *a6, void *a7, double a8, double a9, double a10)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)a1 = *a2;
  uint64_t v20 = a2[1];
  *(void *)(a1 + 8) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 1u, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  long long v21 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a2);
  uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v21);
  if (a4 < (uint64_t)(Layers[1] - *Layers) >> 3
    || (v43[0] = "usd/clip.cpp",
        v43[1] = "Usd_Clip",
        v43[2] = 109,
        v43[3] = "pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(const PcpLayerStackPtr &, const SdfPath &, size_t,"
                 " const SdfAssetPath &, const SdfPath &, ExternalTime, ExternalTime, ExternalTime, const std::shared_ptr"
                 "<TimeMappings> &)",
        char v44 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v43, "clipSourceLayerIndex < clipSourceLayerStack->GetLayers().size()", 0)))
  {
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(a2);
    unint64_t v24 = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v23);
    sub_216ABBA60((uint64_t *)(a1 + 24), (uint64_t *)(*v24 + 8 * a4));
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 40), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v25 = *a5;
    *(void *)(a1 + 56) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v25;
  }
  uint64_t v26 = (unsigned char *)(a1 + 64);
  if (*((char *)a5 + 47) < 0)
  {
    sub_216778F24(v26, *((void **)a5 + 3), *((void *)a5 + 4));
  }
  else
  {
    long long v27 = *(long long *)((char *)a5 + 24);
    *(void *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = *((void *)a5 + 5);
    *(_OWORD *)uint64_t v26 = v27;
  }
  sub_216981010((_DWORD *)(a1 + 88), a6);
  sub_21698105C((_DWORD *)(a1 + 92), a6 + 1);
  *(double *)(a1 + 96) = a8;
  *(double *)(a1 + 104) = a9;
  *(double *)(a1 + 112) = a10;
  *(void *)(a1 + 12sub_216C01044((uint64_t *)this, 0) = *a7;
  uint64_t v28 = a7[1];
  *(void *)(a1 + 128) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 144) = 850045863;
  *(_OWORD *)(a1 + 152) = 0u;
  long long v29 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 208);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20sub_216C01044((uint64_t *)this, 0) = 0u;
  double v30 = sub_21697CF14((void *)(a1 + 24));
  if (v31 & 1 | (unint64_t)v30)
  {
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)a1);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v32);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v43, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
    v39[0] = 0;
    v39[1] = 0;
    long long v38 = v39;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer((uint64_t *)(a1 + 24), a1 + 40, (uint64_t)&v38, (uint64_t *)&v40);
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v41;
    if (v41)
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)&v41) + 14)) {
        uint64_t v34 = v40;
      }
      else {
        uint64_t v34 = 0;
      }
    }
    std::__fs::filesystem::path v42 = v34;
    sub_2168BD80C((uint64_t *)&v42);
    uint64_t v35 = *v29;
    *long long v29 = v42;
    std::__fs::filesystem::path v42 = 0;
    sub_2168BD378(a1 + 208, v35);
    sub_216ABB798(&v42);
    uint64_t v36 = (uint64_t)v41;
    if (v41 && atomic_fetch_add_explicit(v41 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    sub_2167877AC((uint64_t)&v38, v39[0]);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v43);
  }
  *(unsigned char *)(a1 + 136) = *(void *)(a1 + 208) != 0;
  return a1;
}

void sub_216C40F34(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  unint64_t v5 = *(atomic_uint **)(v1 + 32);
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  sub_21697B754(v2);
  char v6 = *(atomic_uint **)(v1 + 8);
  if (v6)
  {
    if (atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetBracketingTimeSamplesForPathFromClipLayer(double ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)this, (uint64_t *)&v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v52, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 11), 1);
  double v10 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal((pxrInternal__aapl__pxrReserved__::Usd_Clip *)this, a3);
  double v50 = 0.0;
  double v51 = 0.0;
  BOOL v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v53);
  BracketingTimeSamplesForuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v52, v10, &v51, &v50);
  if (BracketingTimeSamplesForPath)
  {
    unint64_t v48 = 0;
    unint64_t v49 = 0;
    if (!sub_216C413F0(this[15], &v49, &v48, a3))
    {
      *a4 = v51;
      double v29 = v50;
LABEL_65:
      *a5 = v29;
      goto LABEL_66;
    }
    unint64_t v13 = v48;
    unint64_t v14 = v49;
    uint64_t v15 = this[15];
    double v16 = 0.0;
    if (((v49 | v48) & 0x80000000) != 0)
    {
      int v22 = 1;
    }
    else
    {
      uint64_t v17 = v48;
      uint64_t v18 = v49;
      uint64_t v19 = (uint64_t)&(*v15)[3 * v49 + 2];
      uint64_t v20 = &(*v15)[3 * v48 + 1];
      long long v21 = (unsigned __int8 *)v19;
      int v22 = 1;
      while (1)
      {
        int v23 = *v21;
        v21 -= 24;
        if (!v23)
        {
          double v24 = *v20;
          double v25 = *(double *)(v19 - 8);
          double v26 = *v20 >= v25 ? *(double *)(v19 - 8) : *v20;
          double v27 = v25 >= v24 ? *(double *)(v19 - 8) : *v20;
          BOOL v28 = v26 > v51 || v51 > v27;
          if (!v28) {
            break;
          }
        }
        BOOL v28 = v18-- < 1;
        if (!v28)
        {
          v20 -= 3;
          uint64_t v19 = (uint64_t)v21;
          BOOL v28 = v17-- <= 0;
          if (!v28) {
            continue;
          }
        }
        goto LABEL_23;
      }
      if (v25 == v24)
      {
        double v16 = *(double *)(v19 - 16);
        if (v51 == v50 && v16 != a3 && *(v20 - 1) == a3)
        {
          int v22 = 0;
          double v16 = *(v20 - 1);
        }
        else
        {
          int v22 = 0;
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal((uint64_t)this, v51, v18, v17);
        double v16 = v46;
        int v22 = 0;
        uint64_t v15 = this[15];
      }
    }
LABEL_23:
    uint64_t v32 = v15;
    double v30 = *v15;
    char v31 = v32[1];
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
    if (v14 < v33 && v13 < v33)
    {
      uint64_t v35 = (uint64_t)&v30[3 * v14 + 2];
      uint64_t v36 = &v30[3 * v13 + 1];
      uint64_t v37 = (unsigned __int8 *)v35;
      while (1)
      {
        int v38 = *v37;
        v37 += 24;
        if (!v38)
        {
          double v39 = *v36;
          double v40 = *(double *)(v35 - 8);
          double v41 = *v36 >= v40 ? *(double *)(v35 - 8) : *v36;
          double v42 = v40 >= v39 ? *(double *)(v35 - 8) : *v36;
          if (v41 <= v50 && v50 <= v42) {
            break;
          }
        }
        if (++v14 < v33)
        {
          ++v13;
          v36 += 3;
          uint64_t v35 = (uint64_t)v37;
          if (v13 < v33) {
            continue;
          }
        }
        goto LABEL_42;
      }
      if (v40 == v39)
      {
        if (v51 != v50 || (double v29 = *(double *)(v35 - 16), v29 != a3)) {
          double v29 = *(v36 - 1);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal((uint64_t)this, v50, v14, v13);
      }
      if (v22) {
        double v16 = v29;
      }
      goto LABEL_64;
    }
LABEL_42:
    if ((v22 & 1) == 0)
    {
      double v29 = v16;
LABEL_64:
      *a4 = v16;
      goto LABEL_65;
    }
    double v44 = v30[1];
    uint64_t v45 = v30;
    if (v51 >= v44)
    {
      if (v51 <= *(v31 - 2)) {
        goto LABEL_47;
      }
      uint64_t v45 = v31 - 3;
    }
    double v16 = *v45;
LABEL_47:
    if (v50 >= v44)
    {
      double v29 = 0.0;
      if (v50 > *(v31 - 2)) {
        double v29 = *(v31 - 3);
      }
    }
    else
    {
      double v29 = *v30;
    }
    goto LABEL_64;
  }
LABEL_66:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  sub_21697C414(&v52);
  sub_216ABB798(&v53);
  return BracketingTimeSamplesForPath;
}

void sub_216C413B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

BOOL sub_216C413F0(double **a1, unint64_t *a2, unint64_t *a3, double a4)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (*a1 == v5) {
    return v4 != v5;
  }
  double v9 = *a1;
  double v10 = a1[1];
  if (*v4 >= a4)
  {
    *a2 = 0;
    unint64_t v19 = 1;
  }
  else
  {
    uint64_t v11 = v5 - v4;
    if (*(v5 - 3) > a4)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * v11;
      unint64_t v13 = *a1;
      do
      {
        unint64_t v14 = v12 >> 1;
        uint64_t v15 = &v13[3 * (v12 >> 1)];
        double v17 = *v15;
        double v16 = v15 + 3;
        v12 += ~(v12 >> 1);
        if (v17 < a4) {
          unint64_t v13 = v16;
        }
        else {
          unint64_t v12 = v14;
        }
      }
      while (v12);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v13 - v4);
      *a3 = v18;
      *a2 = v18 - 1;
      unint64_t v19 = *a3;
      goto LABEL_13;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * v11;
    *a2 = v20 - 2;
    unint64_t v19 = v20 - 1;
  }
  *a3 = v19;
LABEL_13:
  unint64_t v21 = *a2;
  if (*a2 >= v19)
  {
    double v24 = "usd/clip.cpp";
    double v25 = "_GetBracketingTimeSegment";
    uint64_t v26 = 166;
    double v27 = "BOOL pxrInternal__aapl__pxrReserved__::_GetBracketingTimeSegment(const Usd_Clip::TimeMappings &, Usd_Clip::Ext"
          "ernalTime, size_t *, size_t *)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "*m1 < *m2", 0);
    unint64_t v21 = *a2;
    double v9 = *a1;
    double v10 = a1[1];
  }
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
  if (v21 >= v22)
  {
    double v24 = "usd/clip.cpp";
    double v25 = "_GetBracketingTimeSegment";
    uint64_t v26 = 167;
    double v27 = "BOOL pxrInternal__aapl__pxrReserved__::_GetBracketingTimeSegment(const Usd_Clip::TimeMappings &, Usd_Clip::Ext"
          "ernalTime, size_t *, size_t *)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "0 <= *m1 && *m1 < times.size()", 0);
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  }
  if (*a3 >= v22)
  {
    double v24 = "usd/clip.cpp";
    double v25 = "_GetBracketingTimeSegment";
    uint64_t v26 = 168;
    double v27 = "BOOL pxrInternal__aapl__pxrReserved__::_GetBracketingTimeSegment(const Usd_Clip::TimeMappings &, Usd_Clip::Ext"
          "ernalTime, size_t *, size_t *)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "0 <= *m2 && *m2 < times.size()", 0);
  }
  return v4 != v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::GetBracketingTimeSamplesForPath(double ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  double v9 = (double *)v41;
  int BracketingTimeSamplesForPathFromClipLayer = pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetBracketingTimeSamplesForPathFromClipLayer(this, a2, a3, (double *)v41, (double *)v41 + 1);
  unint64_t v11 = 2;
  if (!BracketingTimeSamplesForPathFromClipLayer) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = this[15];
  unint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  if (v13 != v14)
  {
    uint64_t v15 = v11 | 1;
    double v16 = *v13;
    if (*v13 >= a3 || (double v16 = *(v14 - 3), v16 <= a3))
    {
      *((double *)v41 + v15) = v16;
    }
    else
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v14 - v13);
      unint64_t v18 = v13;
      do
      {
        unint64_t v19 = v17 >> 1;
        unint64_t v20 = &v18[3 * (v17 >> 1)];
        double v22 = *v20;
        unint64_t v21 = v20 + 3;
        v17 += ~(v17 >> 1);
        if (v22 < a3) {
          unint64_t v18 = v21;
        }
        else {
          unint64_t v17 = v19;
        }
      }
      while (v17);
      double v16 = *v18;
      *((double *)v41 + v15) = *v18;
      if (v16 != a3) {
        double v16 = *(v18 - 3);
      }
    }
    *(double *)&v41[v11 / 2] = v16;
  }
  if (v13 == v14) {
    unint64_t v23 = v11;
  }
  else {
    unint64_t v23 = v11 + 2;
  }
  uint64_t v24 = 8 * v23;
  double v25 = *((double *)this + 13);
  *((void *)v41 + v23) = this[12];
  uint64_t v26 = (double *)((char *)v41 + ((8 * v23) | 8));
  while (v25 <= *v9 && *((double *)this + 14) > *v9)
  {
    ++v9;
    v24 -= 8;
    if (v9 == v26) {
      goto LABEL_32;
    }
  }
  if (v9 != v26)
  {
    if (v9 + 1 == v26)
    {
      uint64_t v26 = v9;
    }
    else
    {
      uint64_t v27 = 1;
      uint64_t v26 = v9;
      do
      {
        double v28 = v9[v27];
        if (*((double *)this + 13) <= v28 && *((double *)this + 14) > v28) {
          *v26++ = v28;
        }
        ++v27;
        v24 -= 8;
      }
      while (v24);
    }
  }
LABEL_32:
  uint64_t v29 = ((char *)v26 - (char *)v41) >> 3;
  if (v29)
  {
    if (v29 == 1)
    {
      double v30 = *(double *)v41;
      goto LABEL_47;
    }
    char v31 = (double *)v41 + v29;
    std::__sort<std::__less<double,double> &,double *>();
    uint64_t v32 = sub_216C4287C((double *)v41, v31);
    if (v41 != (_OWORD *)v32)
    {
      double v30 = *(double *)v41;
      if (*(double *)v41 < a3)
      {
        double v30 = *(v32 - 1);
        if (v30 > a3)
        {
          unint64_t v33 = (double *)v41;
          unint64_t v34 = ((char *)v32 - (char *)v41) >> 3;
          do
          {
            uint64_t v35 = v33;
            unint64_t v36 = v34 >> 1;
            uint64_t v37 = &v35[v34 >> 1];
            double v38 = *v37;
            v34 += ~(v34 >> 1);
            if (*v37 < a3)
            {
              unint64_t v33 = v37 + 1;
            }
            else
            {
              unint64_t v34 = v36;
              unint64_t v33 = v35;
            }
          }
          while (v34);
          double v30 = *v33;
          *a5 = *v33;
          if (v30 != a3)
          {
            double v39 = v35 - 1;
            if (v38 < a3) {
              double v39 = v37;
            }
            double v30 = *v39;
          }
          goto LABEL_48;
        }
      }
LABEL_47:
      *a5 = v30;
LABEL_48:
      *a4 = v30;
      return 1;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath(this, a2, (uint64_t)v4);
  uint64_t v2 = v6;
  sub_2167FB780((uint64_t)v4, v5);
  return v2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_ListTimeSamplesForPathFromClipLayer((uint64_t)this, a2, a3);
  unint64_t v5 = (double **)*((void *)this + 15);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  while (v6 != v7)
  {
    if (*((double *)this + 13) <= *v6 && *v6 < *((double *)this + 14)) {
      sub_21708827C((uint64_t **)a3, v6, (uint64_t *)v6);
    }
    v6 += 3;
  }
  return sub_21708827C((uint64_t **)a3, (double *)this + 12, (uint64_t *)this + 12);
}

void sub_216C41950(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_Clip::_ListTimeSamplesForPathFromClipLayer(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip((pxrInternal__aapl__pxrReserved__::Usd_Clip *)a1, (uint64_t *)&v45);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v45);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v42, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 88), 1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath((uint64_t *)&v49, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
  sub_21697C414(&v42);
  sub_216ABB798(&v45);
  uint64_t v7 = *(uint64_t **)(a1 + 120);
  if (*v7 == v7[1])
  {
    char v31 = (uint64_t *)(a3 + 8);
    sub_2167FB780(a3, *(void **)(a3 + 8));
    uint64_t v32 = v50;
    *(void *)a3 = v49;
    *(void *)(a3 + 8) = v32;
    uint64_t v33 = v51;
    *(void *)(a3 + 16) = v51;
    if (v33)
    {
      v32[2] = v31;
      unint64_t v49 = &v50;
      double v50 = 0;
      uint64_t v51 = 0;
      unint64_t v34 = *(uint64_t **)a3;
    }
    else
    {
      *(void *)a3 = v31;
      unint64_t v34 = (uint64_t *)(a3 + 8);
    }
    uint64_t v35 = (uint64_t *)(a3 + 8);
    if (v32)
    {
      uint64_t v35 = (uint64_t *)(a3 + 8);
      do
      {
        unint64_t v36 = v32 + 1;
        if (*((double *)v32 + 4) >= *(double *)(a1 + 104))
        {
          unint64_t v36 = v32;
          uint64_t v35 = v32;
        }
        uint64_t v32 = (void *)*v36;
      }
      while (*v36);
    }
    sub_216C428E0((uint64_t **)a3, v34, v35);
    uint64_t v37 = *v31;
    double v38 = (uint64_t *)(a3 + 8);
    if (*v31)
    {
      double v38 = (uint64_t *)(a3 + 8);
      do
      {
        double v39 = (uint64_t *)(v37 + 8);
        if (*(double *)(v37 + 32) >= *(double *)(a1 + 112))
        {
          double v39 = (uint64_t *)v37;
          double v38 = (uint64_t *)v37;
        }
        uint64_t v37 = *v39;
      }
      while (*v39);
    }
    sub_216C428E0((uint64_t **)a3, v38, (uint64_t *)(a3 + 8));
  }
  else
  {
    double v40 = (uint64_t **)a3;
    double v8 = *(double *)(a1 + 112);
    uint64_t v45 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 104);
    BOOL v46 = fabs(*(double *)&v45) != INFINITY;
    double v47 = v8;
    char v48 = 0;
    uint64_t v9 = (uint64_t)v49;
    if (v49 != &v50)
    {
      uint64_t v10 = *v7;
      do
      {
        if (v7[1] - v10 != 24)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          double v13 = *(double *)(v9 + 32);
          do
          {
            unint64_t v14 = (double *)(v10 + v11);
            uint64_t v15 = (double *)(v10 + v11 + 24);
            double v16 = *v15;
            *(void *)&long long v42 = *(void *)(v10 + v11);
            BYTE8(v42) = fabs(*(double *)&v42) != INFINITY;
            double v43 = v16;
            BOOL v44 = fabs(v16) != INFINITY;
            BOOL v17 = sub_2168A5C70(&v42, (uint64_t)&v45);
            unint64_t v18 = v12 + 1;
            if (*(unsigned char *)(v10 + v11 + 16)) {
              BOOL v19 = 0;
            }
            else {
              BOOL v19 = v17;
            }
            if (v19)
            {
              double v20 = *(double *)(v10 + v11 + 32);
              double v21 = *(double *)(v10 + v11 + 8);
              double v22 = v20 >= v21 ? *(double *)(v10 + v11 + 8) : *(double *)(v10 + v11 + 32);
              if (v22 <= v13)
              {
                double v23 = v21 >= v20 ? *(double *)(v10 + v11 + 8) : *(double *)(v10 + v11 + 32);
                if (v13 <= v23)
                {
                  if (v21 == v20)
                  {
                    double v24 = *v14;
                    double v25 = v45;
                    if (*(double *)&v45 < *v14 || (*(double *)&v45 == *v14 ? (BOOL v26 = !v46) : (BOOL v26 = 1), !v26))
                    {
                      if (v47 > v24 || v47 == v24 && v48)
                      {
                        sub_21708827C(v40, (double *)(v10 + v11), (uint64_t *)(v10 + v11));
                        double v25 = v45;
                      }
                    }
                    double v27 = *v15;
                    if ((*(double *)&v25 < *v15 || *(double *)&v25 == *v15 && v46) && (v47 > v27 || v47 == v27 && v48)) {
                      sub_21708827C(v40, (double *)(v10 + v11 + 24), (uint64_t *)(v10 + v11 + 24));
                    }
                  }
                  else
                  {
                    double v41 = 0.0;
                    pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(a1, v13, v12, v12 + 1);
                    double v41 = v28;
                    if ((*(double *)&v45 < v28 || *(double *)&v45 == v28 && v46) && (v47 > v28 || v47 == v28 && v48)) {
                      sub_21708827C(v40, &v41, (uint64_t *)&v41);
                    }
                  }
                }
              }
            }
            uint64_t v7 = *(uint64_t **)(a1 + 120);
            uint64_t v10 = *v7;
            v11 += 24;
            ++v12;
          }
          while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3) - 1);
        }
        uint64_t v29 = *(void **)(v9 + 8);
        if (v29)
        {
          do
          {
            double v30 = (void **)v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            double v30 = *(void ***)(v9 + 16);
            BOOL v26 = *v30 == (void *)v9;
            uint64_t v9 = (uint64_t)v30;
          }
          while (!v26);
        }
        uint64_t v9 = (uint64_t)v30;
      }
      while (v30 != &v50);
    }
  }
  sub_2167FB780((uint64_t)&v49, v50);
}

void sub_216C41D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(uint64_t this, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = this;
  uint64_t v6 = **(void **)(this + 120);
  if (*(unsigned char *)(v6 + 24 * a3 + 16))
  {
    uint64_t v7 = "usd/clip.cpp";
    double v8 = "_TranslateTimeToExternal";
    uint64_t v9 = 689;
    uint64_t v10 = "Usd_Clip::ExternalTime pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(InternalTime, size"
          "_t, size_t) const";
    char v11 = 0;
    this = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v7, "!m1.isJumpDiscontinuity", 0);
  }
  if (*(unsigned char *)(v6 + 24 * a4 + 16))
  {
    if (a4 + 1 >= 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(*(void *)(*(void *)(v5 + 120) + 8) - **(void **)(v5 + 120)) >> 3))
    {
      uint64_t v7 = "usd/clip.cpp";
      double v8 = "_TranslateTimeToExternal";
      uint64_t v9 = 713;
      uint64_t v10 = "Usd_Clip::ExternalTime pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToExternal(InternalTime, si"
            "ze_t, size_t) const";
      char v11 = 0;
      return pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v7, "i2 + 1 < times->size()", 0);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::HasField(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v10);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v9, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
  uint64_t HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_21697C414(&v9);
  sub_216ABB798(&v10);
  return HasField;
}

void sub_216C41FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_Clip::HasAuthoredTimeSamples(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v8);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v7, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
  NumTimeSamplesForuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_21697C414(&v7);
  sub_216ABB798(&v8);
  return NumTimeSamplesForPath != 0;
}

void sub_216C420B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_Clip::IsBlocked(pxrInternal__aapl__pxrReserved__::Usd_Clip *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  void v10[2] = 0;
  v10[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&stru_26C757FD0;
  __int16 v11 = 0;
  v10[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C75D8A8;
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)v10);
  uint64_t v5 = sub_216AA5ECC((uint64_t *)v10);
  double v6 = pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslateTimeToInternal(this, a3);
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v5, v6);
  if ((_BYTE)v11) {
    uint64_t v8 = TimeSample;
  }
  else {
    uint64_t v8 = 0;
  }
  sub_216ABB798(v10);
  return v8;
}

void sub_216C42198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::GetPropertyAtPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v9);
  double v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v9);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v8, a2, (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::Usd_Clip *)((char *)this + 88), 1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(a3, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  return sub_216ABB798(&v9);
}

void sub_216C42240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

unint64_t sub_216C42268()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B915D0);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "dummy_clip", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "dummy_clip.%s", v13);
    char v3 = *(atomic_uint **)v0;
    double v16 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        double v16 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    BOOL v17 = v5;
    if ((v5 & 7) != 0)
    {
      double v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        BOOL v17 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    unint64_t v14 = (void **)(v0 + 16);
    char v15 = 0;
    uint64_t v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      uint64_t v9 = (&v16)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      __int16 v11 = (&v16)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B915D0, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      unint64_t v14 = (void **)(v0 + 16);
      sub_216889A04(&v14);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B915D0);
    }
  }
  return (unint64_t)v0;
}

void sub_216C42448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer@<X0>(pxrInternal__aapl__pxrReserved__::Usd_Clip *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(this, (uint64_t *)&v14);
  char v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v14);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v3);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216C42268();
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    uint64_t v7 = (const char *)EmptyString;
  }
  else {
    uint64_t v7 = (const char *)*EmptyString;
  }
  int v8 = *(char *)(Identifier + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(Identifier + 23);
  }
  else {
    size_t v9 = *(void *)(Identifier + 8);
  }
  size_t v10 = strlen(v7);
  if (v9 >= v10
    && ((v11 = v10, v8 >= 0) ? (uint64_t v12 = (const char *)Identifier) : (uint64_t v12 = *(const char **)Identifier),
        !strncmp(v12, v7, v11)))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_216ABBA60(a2, (uint64_t *)&v14);
  }
  return sub_216ABB798(&v14);
}

void sub_216C425AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen@<X0>(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this@<X0>, uint64_t *a2@<X8>)
{
  if (*((unsigned char *)this + 136)) {
    return pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer((pxrInternal__aapl__pxrReserved__::Usd_Clip *)this, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return this;
}

pxrInternal__aapl__pxrReserved__::UsdTokensType *sub_216C425D4(atomic_ullong *a1)
{
  __n128 result = sub_216C4261C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      uint64_t v4 = (void *)sub_216C42660((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdTokensType *sub_216C4261C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::UsdTokensType::UsdTokensType(v0);
  return v0;
}

void sub_216C4264C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C42660(uint64_t a1)
{
  double v22 = (void **)(a1 + 160);
  sub_216889A04(&v22);
  uint64_t v2 = *(void *)(a1 + 152);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 144);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 136);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 112);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 104);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 96);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 88);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 72);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 48);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 24);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 16);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 8);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

double *sub_216C4287C(double *a1, double *a2)
{
  __n128 result = a2;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    do
    {
      if (v4 == a2) {
        return a2;
      }
      double v5 = *(v4 - 1);
      double v6 = *v4++;
    }
    while (v5 != v6);
    uint64_t v7 = v4 - 2;
    while (v4 != a2)
    {
      double v8 = *v4;
      if (v5 != *v4)
      {
        v7[1] = v8;
        ++v7;
        double v5 = v8;
      }
      ++v4;
    }
    return v7 + 1;
  }
  return result;
}

uint64_t *sub_216C428E0(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      double v6 = sub_2167AE00C(a1, v4);
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t sub_216C42940(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216A5F85C(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    goto LABEL_4;
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
LABEL_4:
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
  *(unsigned char *)(a1 + 25) = 1;
  return result;
}

uint64_t sub_216C429AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216A5F85C(a2))
  {
    sub_216C42A04(a2);
LABEL_3:
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result) {
    goto LABEL_3;
  }
  *(unsigned char *)(a1 + 25) = 1;
  return result;
}

void *sub_216C42A04(void *a1)
{
  uint64_t result = sub_216C42A50(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void *sub_216C42A50(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *sub_216C42AE0(atomic_ullong *a1)
{
  uint64_t result = sub_216C42B28();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType::~UsdUsdaFileFormatTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *sub_216C42B28()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType::UsdUsdaFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_216C42B58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C42B6C(uint64_t a1, long long **a2)
{
  if (sub_216A31600((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      double v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      double v5 = *a2;
    }
    sub_216C42CBC(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C42BF0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216A31600(a2))
  {
    sub_216C42D70(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C42CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C42CBC(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C42D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C42D70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216A316E4(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C42E0C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C42E24(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_2169975B8(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(unsigned char **)(a1 + 8) = *(unsigned char *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C42EA8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169975B8(a2))
  {
    **(unsigned char **)(a1 + 8) = sub_216C42F10(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C42F10(void *a1)
{
  uint64_t v2 = sub_216B8C834(a1);
  uint64_t v3 = *v2;
  unsigned char *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C42F68(uint64_t a1, long long **a2)
{
  if (sub_216908770((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_216C430B8(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C42FEC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216908770(a2))
  {
    sub_216C4316C(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C4309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C430B8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C43150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4316C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216908BCC(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C43208(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C43220(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_21695A85C(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C432A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695A85C(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_216C4330C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4330C(void *a1)
{
  uint64_t v2 = sub_216B8C988(a1);
  uint64_t v3 = *v2;
  _DWORD *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C43364(uint64_t a1, long long **a2)
{
  if (sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_2169DCE38(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C433E8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216907880(a2))
  {
    sub_216C434B4(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C43498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C434B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_21690816C(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C43550(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C43568(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B8CB68(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C435EC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8CB68(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_216C43654(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43654(void *a1)
{
  uint64_t v2 = sub_216B8CBA0(a1);
  uint64_t v3 = *v2;
  _DWORD *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C436AC(uint64_t a1, long long **a2)
{
  if (sub_2169062C0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_2169DE964(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43730(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169062C0(a2))
  {
    sub_216C437FC(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C437E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C437FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216907618(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C43898(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C438B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_2169F9268(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43934(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169F9268(a2))
  {
    **(void **)(a1 + 8) = sub_216C4399C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4399C(void *a1)
{
  uint64_t v2 = sub_216B8CE34(a1);
  uint64_t v3 = *v2;
  uint64_t *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C439F4(uint64_t a1, long long **a2)
{
  if (sub_2169DDCD4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_2169DDD0C(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43A78(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169DDCD4(a2))
  {
    sub_216C43B44(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C43B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C43B44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216A31B6C(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C43BE0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C43BF8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B8D0C8(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43C7C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8D0C8(a2))
  {
    **(void **)(a1 + 8) = sub_216C43CE4(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43CE4(void *a1)
{
  uint64_t v2 = sub_216B8D100(a1);
  uint64_t v3 = *v2;
  uint64_t *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C43D3C(uint64_t a1, long long **a2)
{
  if (sub_2169DF540((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_2169DF578(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43DC0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169DF540(a2))
  {
    sub_216C43E8C(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C43E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C43E8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8D260(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C43F28(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C43F40(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B8D444(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_WORD **)(a1 + 8) = *(_WORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C43FC4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8D444(a2))
  {
    **(_WORD **)(a1 + 8) = sub_216C4402C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4402C(void *a1)
{
  uint64_t v2 = *(unsigned __int16 *)sub_216B8D47C(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v2;
}

uint64_t sub_216C44080(uint64_t a1, long long **a2)
{
  if (sub_2168F8308((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C441D0(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44104(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168F8308(a2))
  {
    sub_216C44284(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C441B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C441D0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C44268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C44284@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168F98A0(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C44320(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C44338(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_21691FA2C(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C443BC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21691FA2C(a2))
  {
    **(float **)(a1 + 8) = sub_21691FAAC(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44424(uint64_t a1, long long **a2)
{
  if (sub_2168F8860((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_2169412D4(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C444A8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168F8860(a2))
  {
    sub_216941DD8(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C44558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C44574(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_21691CE68(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C445F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21691CE68(a2))
  {
    **(double **)(a1 + 8) = sub_21691F184(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44660(uint64_t a1, long long **a2)
{
  if (sub_2168F9F4C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      long long v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v5 = *a2;
    }
    sub_21693E46C(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C446E4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168F9F4C(a2))
  {
    sub_21693EFC4(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C44794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C447B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B8D878(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44834(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8D878(a2))
  {
    **(double **)(a1 + 8) = sub_216C4489C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

double sub_216C4489C(void *a1)
{
  uint64_t v2 = (double *)sub_216B8D9A4(a1);
  double v3 = *v2;
  double *v2 = 0.0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C448FC(uint64_t a1, long long **a2)
{
  if (sub_216B8DA34((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_216C44A4C(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44980(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8DA34(a2))
  {
    sub_216C44B00(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C44A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C44A4C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C44AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C44B00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8DB90(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C44B9C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C44BB4(uint64_t a1, long long **a2)
{
  if (sub_216998044((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_2169E0154(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44C38(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216998044(a2))
  {
    sub_216C44D04(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2169B1EE4((void *)v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2169B1EE4(&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C44CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C44D04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216A31FF0(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C44DA0(_Unwind_Exception *a1)
{
  sub_2169B1EE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C44DB8(uint64_t a1, long long **a2)
{
  if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_2169E06EC(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C44E3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21699807C(a2))
  {
    sub_216C44F08(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2169B2E0C((void *)v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2169B2E0C(&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C44EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C44F08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8E248(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C44FA4(_Unwind_Exception *a1)
{
  sub_2169B2E0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C44FBC(uint64_t a1, const std::string **a2)
{
  if (sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(std::string **)(a1 + 8);
    std::string::operator=(v6, v5);
    std::string::operator=(v6 + 1, v5 + 1);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45054(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169980B4(a2))
  {
    sub_216C4513C((uint64_t)a2, (uint64_t)__p);
    uint64_t v4 = *(void *)(a1 + 8);
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    long long v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v12;
    *(_OWORD *)uint64_t v4 = v5;
    HIBYTE(v12) = 0;
    LOBYTE(__p[0]) = 0;
    uint64_t v6 = (void **)(v4 + 24);
    if (*(char *)(v4 + 47) < 0)
    {
      operator delete(*v6);
      int v8 = SHIBYTE(v12);
      long long v9 = v13;
      *(void *)(v4 + 4sub_216C01044((uint64_t *)this, 0) = v14;
      *(_OWORD *)uint64_t v6 = v9;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v7 = v13;
      *(void *)(v4 + 4sub_216C01044((uint64_t *)this, 0) = v14;
      *(_OWORD *)uint64_t v6 = v7;
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

long long *sub_216C4513C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)a2);
  uint64_t result = sub_216B8E5FC((long long **)a1);
  uint64_t v5 = *((void *)result + 2);
  long long v6 = *result;
  uint64_t v7 = *(void *)(a2 + 16);
  *uint64_t result = *(_OWORD *)a2;
  *((void *)result + 2) = v7;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v5;
  uint64_t v8 = *((void *)result + 5);
  long long v9 = *(long long *)((char *)result + 24);
  uint64_t v10 = *(void *)(a2 + 40);
  *(long long *)((char *)result + 24) = *(_OWORD *)(a2 + 24);
  *((void *)result + 5) = v10;
  *(_OWORD *)(a2 + 24) = v9;
  *(void *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = v8;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11 && (*(void *)(a1 + 8) & 3) != 3) {
    uint64_t result = (long long *)(*(uint64_t (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_216C451E0(_Unwind_Exception *a1)
{
  sub_21682E578(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C451F4(uint64_t a1, long long **a2)
{
  if (sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C45344(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45278(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216998140(a2))
  {
    sub_216C453F8(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2169B4408((void *)v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2169B4408(&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C45328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C45344(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2169B4408((void *)a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2169B4408(&v8);
  }
  return a1;
}

void sub_216C453DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C453F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8E760(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C45494(_Unwind_Exception *a1)
{
  sub_2169B4408(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C454AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21699510C(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45520(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21699510C(a2))
  {
    sub_216C45580(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void *sub_216C45580(void *a1)
{
  uint64_t result = sub_216B8E9F0(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    uint64_t result = (void *)(*(uint64_t (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

uint64_t sub_216C455CC(uint64_t a1, long long **a2)
{
  if (sub_216B8EA80((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C4571C(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45650(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8EA80(a2))
  {
    sub_216C457D0(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C45700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4571C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C457B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C457D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8EBDC(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C4586C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C45884(uint64_t a1, const std::string **a2)
{
  if (sub_21699AB4C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(std::string **)(a1 + 8);
    if (v6 != v5)
    {
      sub_216825D78((char *)v6, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_, (uint64_t)(v5->__r_.__value_.__l.__size_ - v5->__r_.__value_.__r.__words[0]) >> 2);
      sub_216B01A9C((uint64_t)&v6[1], (uint64_t)v5[1].__r_.__value_.__l.__data_, v5[1].__r_.__value_.__l.__size_, (uint64_t)(v5[1].__r_.__value_.__l.__size_ - v5[1].__r_.__value_.__r.__words[0]) >> 5);
      sub_216B01C6C((uint64_t)&v6[2], (uint64_t)v5[2].__r_.__value_.__l.__data_, v5[2].__r_.__value_.__l.__size_, (uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 6);
    }
    std::string::operator=(v6 + 3, v5 + 3);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45954(uint64_t a1, uint64_t *a2)
{
  if (sub_21699AB4C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_216C45A9C(a2, __p);
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void **)v4;
    if (*(void *)v4)
    {
      *(void *)(v4 + 8) = v5;
      operator delete(v5);
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v10;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    sub_2169B59AC((void **)(v4 + 24));
    *(_OWORD *)(v4 + 24) = v11;
    *(void *)(v4 + 4sub_216C01044((uint64_t *)this, 0) = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    sub_2169B5A6C((void **)(v4 + 48));
    *(_OWORD *)(v4 + 48) = v13;
    *(void *)(v4 + 64) = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v6 = (void **)(v4 + 72);
    if (*(char *)(v4 + 95) < 0) {
      operator delete(*v6);
    }
    long long v7 = v15;
    *(void *)(v4 + 88) = v16;
    *(_OWORD *)uint64_t v6 = v7;
    HIBYTE(v16) = 0;
    LOBYTE(v15) = 0;
    uint64_t v17 = (void **)&v13;
    sub_2169B81EC(&v17);
    uint64_t v17 = (void **)&v11;
    sub_2169B74B8(&v17);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C45A9C(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  v3.n128_f64[0] = sub_216B8EF88(a1, (uint64_t)a2);
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t *, __n128))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1, v3);
  }
  a1[1] = 0;
}

void sub_216C45B00(_Unwind_Exception *a1)
{
  sub_2169B5940(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C45B14(uint64_t a1, long long **a2)
{
  if (sub_21699AC40((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_216C45C64(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45B98(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21699AC40(a2))
  {
    sub_216C45D18(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2169B88CC((void *)v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2169B88CC(&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C45C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C45C64(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2169B88CC((void *)a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2169B88CC(&v8);
  }
  return a1;
}

void sub_216C45CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C45D18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B50650(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C45DB4(_Unwind_Exception *a1)
{
  sub_2169B88CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C45DCC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21694FB20(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    uint64_t v6 = *(_OWORD **)(a1 + 8);
    long long v7 = v5[1];
    *uint64_t v6 = *v5;
    v6[1] = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45E50(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21694FB20(a2))
  {
    double v4 = sub_21694FBB4((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(double *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = v7;
    *(void *)(v5 + 24) = v8;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45EBC(uint64_t a1, long long **a2)
{
  if (sub_216B8F40C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    double v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C4600C(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C45F40(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8F40C(a2))
  {
    sub_216C460C0(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C45FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4600C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C460A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C460C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8F514(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C4615C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C46174(uint64_t a1, uint64_t *a2)
{
  if (sub_21695273C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(void *)(a1 + 8);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    long long v8 = *(_OWORD *)(v5 + 32);
    long long v9 = *(_OWORD *)(v5 + 48);
    *(void *)(v6 + 64) = *(void *)(v5 + 64);
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 16) = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46210(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695273C(a2))
  {
    sub_216952804(a2, (uint64_t)v9);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_OWORD *)uint64_t v4 = v9[0];
    long long v5 = v9[1];
    long long v6 = v9[2];
    long long v7 = v9[3];
    *(void *)(v4 + 64) = v10;
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)(v4 + 48) = v7;
    *(_OWORD *)(v4 + 16) = v5;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C462A4(uint64_t a1, long long **a2)
{
  if (sub_216B8F888((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      long long v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v5 = *a2;
    }
    sub_216C463F4(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46328(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8F888(a2))
  {
    sub_216C464A8(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C463D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C463F4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C4648C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C464A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B8F990(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C46544(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C4655C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695529C(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(a2);
    else {
      uint64_t v5 = *(long long **)a2;
    }
    uint64_t v6 = *(_OWORD **)(a1 + 8);
    long long v7 = *v5;
    long long v8 = v5[1];
    long long v9 = v5[3];
    v6[2] = v5[2];
    void v6[3] = v9;
    *uint64_t v6 = v7;
    v6[1] = v8;
    long long v10 = v5[4];
    long long v11 = v5[5];
    long long v12 = v5[7];
    v6[6] = v5[6];
    v6[7] = v12;
    void v6[4] = v10;
    v6[5] = v11;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C465F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695529C(a2))
  {
    sub_216955364((uint64_t)a2, v12);
    uint64_t v4 = *(long long **)(a1 + 8);
    long long v5 = v12[0];
    long long v6 = v12[1];
    long long v7 = v12[3];
    void v4[2] = v12[2];
    void v4[3] = v7;
    *uint64_t v4 = v5;
    v4[1] = v6;
    long long v8 = v12[4];
    long long v9 = v12[5];
    long long v10 = v12[7];
    v4[6] = v12[6];
    v4[7] = v10;
    void v4[4] = v8;
    void v4[5] = v9;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46688(uint64_t a1, long long **a2)
{
  if (sub_2169026B0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      long long v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v5 = *a2;
    }
    sub_216C467D8(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4670C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169026B0(a2))
  {
    sub_216C4688C(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C467BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C467D8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C46870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4688C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216902C50(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C46928(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C46940(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B8FDA4(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C469C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B8FDA4(a2))
  {
    **(void **)(a1 + 8) = sub_216C46A2C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46A2C(void *a1)
{
  uint64_t v2 = *sub_216B8FE7C(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v2;
}

uint64_t sub_216C46A80(uint64_t a1, long long **a2)
{
  if (sub_216903B7C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C46BD0(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46B04(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216903B7C(a2))
  {
    sub_216C46C84(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C46BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C46BD0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C46C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C46C84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216905104(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C46D20(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C46D38(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695810C(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    *(_OWORD *)*(void *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46DBC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21695810C(a2))
  {
    float v4 = sub_216C46E28((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(float *)uint64_t v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 12) = v8;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

float sub_216C46E28(uint64_t a1)
{
  float v2 = *(float *)sub_216B90094((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_216C46E9C(uint64_t a1, long long **a2)
{
  if (sub_216904004((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C46FEC(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C46F20(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216904004(a2))
  {
    sub_216C470A0(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C46FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C46FEC(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C47084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C470A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216904590(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C4713C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C47154(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216956AEC(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    uint64_t v6 = *(_OWORD **)(a1 + 8);
    long long v7 = v5[1];
    *uint64_t v6 = *v5;
    v6[1] = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C471D8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216956AEC(a2))
  {
    double v4 = sub_216C47244((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(double *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = v7;
    *(void *)(v5 + 24) = v8;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

double sub_216C47244(uint64_t a1)
{
  double v2 = *(double *)sub_216B902B0((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_216C472B8(uint64_t a1, long long **a2)
{
  if (sub_21690577C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C47408(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4733C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21690577C(a2))
  {
    sub_216C474BC(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C473EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C47408(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C474A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C474BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216905D08(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C47558(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C47570(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  double v2 = a2;
  if (sub_216B90548(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      double v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C475F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B90548(a2))
  {
    **(void **)(a1 + 8) = sub_216C4765C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4765C(void *a1)
{
  uint64_t v2 = *sub_216B90580(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v2;
}

uint64_t sub_216C476B0(uint64_t a1, long long **a2)
{
  if (sub_216B90610((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C47800(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C47734(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B90610(a2))
  {
    sub_216C478B4(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C477E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C47800(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C47898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C478B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B90718(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C47950(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C47968(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B908FC(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C479EC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B908FC(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_216C47A54(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C47A54(void *a1)
{
  uint64_t v2 = *(unsigned int *)sub_216B90934(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v2;
}

uint64_t sub_216C47AA8(uint64_t a1, long long **a2)
{
  if (sub_2168FAA14((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C47BF8(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C47B2C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FAA14(a2))
  {
    sub_216C47CAC(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C47BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C47BF8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C47C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C47CAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FBEAC(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C47D48(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C47D60(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_2169456CC(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C47DE4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169456CC(a2))
  {
    float v4 = sub_21694575C(a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(float *)uint64_t v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C47E4C(uint64_t a1, long long **a2)
{
  if (sub_2168FAEA0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    float v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C47F9C(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C47ED0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FAEA0(a2))
  {
    sub_216C48050(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C47F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C47F9C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C48034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FB3D8(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C480EC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C48104(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216943B00(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    *(_OWORD *)*(void *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48188(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216943B00(a2))
  {
    double v4 = sub_216943B90((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(double *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = v6;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C481F0(uint64_t a1, long long **a2)
{
  if (sub_2168FC5B0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    double v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C48340(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48274(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FC5B0(a2))
  {
    sub_216C483F4(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C48324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48340(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C483D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C483F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FCAE8(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C48490(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C484A8(uint64_t a1, uint64_t *a2)
{
  if (sub_216B90E68((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)v5;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v5 + 8);
    *(void *)uint64_t v6 = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48534(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B90E68(a2))
  {
    uint64_t v4 = sub_216C485A0((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)uint64_t v5 = v4;
    *(_DWORD *)(v5 + 8) = v6;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C485A0(uint64_t a1)
{
  uint64_t v2 = *(void *)sub_216B90F94((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_216C48604(uint64_t a1, long long **a2)
{
  if (sub_216B91028((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C48754(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48688(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B91028(a2))
  {
    sub_216C48808(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C48738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48754(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C487EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48808@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B91130(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C488A4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C488BC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = (uint64_t)a2;
  if (sub_216B91330(a2))
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = *(_DWORD *)v2;
    *(_WORD *)(v5 + 4) = *(_WORD *)(v2 + 4);
    *(_DWORD *)uint64_t v5 = v6;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48948(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B91330(a2))
  {
    unint64_t v4 = sub_216C489B8(a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t v5 = v4;
    *(_WORD *)(v5 + 4) = WORD2(v4);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

unint64_t sub_216C489B8(void *a1)
{
  uint64_t v2 = sub_216B91368(a1);
  unint64_t v3 = *(unsigned int *)v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

uint64_t sub_216C48A14(uint64_t a1, long long **a2)
{
  if (sub_2168FD1A4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      BOOL v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      BOOL v5 = *a2;
    }
    sub_216C48B64(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48A98(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FD1A4(a2))
  {
    sub_216C48C18(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C48B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48B64(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C48BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48C18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FE6EC(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C48CB4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C48CCC(uint64_t a1, uint64_t *a2)
{
  if (sub_216949788((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)v5;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v5 + 8);
    *(void *)uint64_t v6 = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48D58(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216949788(a2))
  {
    float v4 = sub_21694981C((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(float *)uint64_t v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 8) = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48DC4(uint64_t a1, long long **a2)
{
  if (sub_2168FD6AC((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    float v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C48F14(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C48E48(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FD6AC(a2))
  {
    sub_216C48FC8(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C48EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48F14(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C48FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C48FC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FDB98(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C49064(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C4907C(uint64_t a1, uint64_t *a2)
{
  if (sub_216947714((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = *(void *)(a1 + 8);
    long long v7 = *(_OWORD *)v5;
    *(void *)(v6 + 16) = *(void *)(v5 + 16);
    *(_OWORD *)uint64_t v6 = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C49108(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216947714(a2))
  {
    double v4 = sub_2169477A8((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(double *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C49174(uint64_t a1, long long **a2)
{
  if (sub_2168FEEE8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    double v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C492C4(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C491F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FEEE8(a2))
  {
    sub_216C49378(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C492A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C492C4(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C4935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C49378@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2168FF3D4(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C49414(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C4942C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B919BC(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    *(_OWORD *)*(void *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C494B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B919BC(a2))
  {
    uint64_t v4 = sub_216C49518((uint64_t)a2);
    uint64_t v5 = *(uint64_t **)(a1 + 8);
    *uint64_t v5 = v4;
    v5[1] = v6;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C49518(uint64_t a1)
{
  uint64_t v2 = *(void *)sub_216B91AE0((atomic_uint **)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return v2;
}

uint64_t sub_216C49578(uint64_t a1, long long **a2)
{
  if (sub_216B91B74((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C496C8(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C495FC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B91B74(a2))
  {
    sub_216C4977C(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C496AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C496C8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C49760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4977C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216B91C7C(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C49818(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C49830(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_216B91E5C(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(void **)(a1 + 8) = *(void *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C498B4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_216B91E5C(a2))
  {
    **(void **)(a1 + 8) = sub_216C4991C(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4991C(void *a1)
{
  uint64_t v2 = *sub_216B91E94(a1);
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(void *))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v2;
}

uint64_t sub_216C49970(uint64_t a1, long long **a2)
{
  if (sub_2168FF9E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    BOOL v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C49AC0(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C499F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FF9E8(a2))
  {
    sub_216C49B74(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C49AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C49AC0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C49B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C49B74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216900F48(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C49C10(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C49C28(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21694D72C(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    *(_OWORD *)*(void *)(a1 + 8) = *v5;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C49CAC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21694D72C(a2))
  {
    float v4 = sub_21694D7C0((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(float *)uint64_t v5 = v4;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 12) = v8;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C49D18(uint64_t a1, long long **a2)
{
  if (sub_2168FFE70((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    float v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C49E68(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C49D9C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168FFE70(a2))
  {
    sub_216C49F1C(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C49E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C49E68(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C49F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C49F1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_2169003F0(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C49FB8(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C49FD0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21694B764(a2))
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v5 = (_OWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v5 = *(_OWORD **)a2;
    }
    uint64_t v6 = *(_OWORD **)(a1 + 8);
    long long v7 = v5[1];
    *uint64_t v6 = *v5;
    v6[1] = v7;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4A054(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21694B764(a2))
  {
    double v4 = sub_21694B7F8((uint64_t)a2);
    uint64_t v5 = *(void *)(a1 + 8);
    *(double *)uint64_t v5 = v4;
    *(void *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = v7;
    *(void *)(v5 + 24) = v8;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4A0C0(uint64_t a1, long long **a2)
{
  if (sub_2169015F0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    double v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216C4A210(*(void *)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C4A144(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169015F0(a2))
  {
    sub_216C4A2C4(a2, (uint64_t)&v7);
    uint64_t v4 = *(void *)(a1 + 8);
    if ((long long *)v4 != &v7)
    {
      sub_2168F83DC(v4);
      long long v5 = v8;
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v5;
      long long v7 = 0u;
      long long v8 = 0u;
      *(void *)(v4 + 32) = v9;
      uint64_t v9 = 0;
    }
    sub_2168F83DC((uint64_t)&v7);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void sub_216C4A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4A210(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        long long v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_216C4A2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C4A2C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = sub_216901B70(a1);
  uint64_t v5 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *(void *)(a2 + 32) = v5;
  uint64_t v6 = *(void *)(result + 16);
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v6;
  uint64_t v9 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  *(void *)(a2 + 24) = v9;
  uint64_t v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3) {
    uint64_t result = (*(uint64_t (**)(void *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return result;
}

void sub_216C4A360(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::ConcurrentPopulationContext(pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *this, pxrInternal__aapl__pxrReserved__::Usd_ClipCache *a2)
{
  *(void *)this = a2;
  sub_216C4BE0C((pthread_mutex_t *)((char *)this + 8));
  if (*(void *)(*(void *)this + 40))
  {
    v5[0] = "usd/clipCache.cpp";
    v5[1] = "ConcurrentPopulationContext";
    void v5[2] = 54;
    v5[3] = "pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::ConcurrentPopulationContext(Usd_ClipCache &)";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v3, "!_cache._concurrentPopulationContext");
  }
  *(void *)(*(void *)this + 4sub_216C01044((uint64_t *)this, 0) = this;
  return this;
}

void sub_216C4A414(_Unwind_Exception *a1)
{
  pthread_mutex_destroy(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext::~ConcurrentPopulationContext(pxrInternal__aapl__pxrReserved__::Usd_ClipCache::ConcurrentPopulationContext *this)
{
  *(void *)(*(void *)this + 4sub_216C01044((uint64_t *)this, 0) = 0;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::Lifeboat(pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat *this, pxrInternal__aapl__pxrReserved__::Usd_ClipCache *a2)
{
  *(void *)this = a2;
  uint64_t v4 = operator new(0x40uLL);
  *((void *)this + 1) = v4;
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  void v4[2] = 0u;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 14) = 1065353216;
  if (*((void *)a2 + 6))
  {
    v7[0] = "usd/clipCache.cpp";
    v7[1] = "Lifeboat";
    uint64_t v7[2] = 107;
    void v7[3] = "pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::Lifeboat(Usd_ClipCache &)";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v5, "!_cache._lifeboat");
  }
  *((void *)a2 + 6) = this;
  return this;
}

void sub_216C4A528(_Unwind_Exception *exception_object)
{
  long long v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_216C4BEBC((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Lifeboat::~Lifeboat(void ***this)
{
  (*this)[6] = 0;
  long long v3 = this[1];
  uint64_t v1 = this + 1;
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    sub_216C4BEBC((uint64_t)v1, v2);
  }
}

{
  void *v1;
  void **v2;
  void **v3;

  (*this)[6] = 0;
  long long v3 = this[1];
  uint64_t v1 = this + 1;
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    sub_216C4BEBC((uint64_t)v1, v2);
  }
}

double pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Usd_ClipCache(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::_ComputeClipsFromPrimIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3, uint64_t *a4)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  memset(v41, 0, sizeof(v41));
  pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(a3, &v42, v41);
  sub_216C4AAD0(a4, 0xF0F0F0F0F0F0F0F1 * ((v43 - v42) >> 4));
  double v27 = a4;
  uint64_t v6 = v42;
  if (v43 != v42)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (long long *)(v6 + v8);
      long long v11 = (std::string *)(v41[0] + v7);
      if (*(unsigned char *)(v6 + v8 + 96) || !*(void *)(a1 + 48))
      {
        BOOL v12 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v36);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v36 + 1);
        memset(&v37, 0, sizeof(v37));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v38);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v39);
        memset(v40, 0, sizeof(v40));
        sub_2169C487C((int *)&v36, a2);
        sub_2169C48D4((int *)&v36 + 1, (_DWORD *)a2 + 1);
        std::string::operator=(&v37, v11);
        uint64_t v13 = v6 + v8;
        if (*(unsigned char *)(v13 + 128))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v32, v13 + 104);
          sub_21697DE94(&v38, (int *)&v32);
          sub_21697DEEC(&v39, (int *)&v32 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
          sub_21697C414(&v32);
        }
        if (*(unsigned char *)(v13 + 40)) {
          sub_216C45344((uint64_t)v40, v10);
        }
        uint64_t v14 = sub_216C4C4F4((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), (unsigned int *)&v36);
        BOOL v12 = v14 != 0;
        if (v14)
        {
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v32);
          sub_216C4AB64((uint64_t)(v10 + 3), &v32);
          if (v35 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v33) < 0) {
            operator delete((void *)v32);
          }
        }
        sub_2169B4408(v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
        sub_21697C414(&v38);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
        sub_21697C414(&v36);
      }
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_ClipSet::New((long long *)v11, (uint64_t)v10, (uint64_t)&v32, &v31);
      uint64_t v15 = HIBYTE(v33);
      if (v33 < 0) {
        uint64_t v15 = *((void *)&v32 + 1);
      }
      if (v15)
      {
        if ((void)v31)
        {
          if (sub_216C4B19C(2))
          {
            int v16 = SHIBYTE(v33);
            uint64_t v17 = (long long *)v32;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            double v21 = &v32;
            if (v16 < 0) {
              double v21 = v17;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s (on prim <%s>)\n", v19, v20, v21, Text);
          }
        }
        else
        {
          unint64_t v36 = (void **)"usd/clipCache.cpp";
          v37.__r_.__value_.__r.__words[0] = (std::string::size_type)"_CreateClipSetFromDefinition";
          v37.__r_.__value_.__l.__size_ = 143;
          v37.__r_.__value_.__r.__words[2] = (std::string::size_type)"Usd_ClipSetRefPtr pxrInternal__aapl__pxrReserved__:"
                                                                     ":_CreateClipSetFromDefinition(const SdfPath &, cons"
                                                                     "t std::string &, const Usd_ClipSetDefinition &)";
          LOBYTE(v38) = 0;
          String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
          if (*((char *)String + 23) >= 0) {
            uint64_t v24 = (uint64_t)String;
          }
          else {
            uint64_t v24 = *String;
          }
          uint64_t v25 = (uint64_t)&v32;
          if (v33 < 0) {
            uint64_t v25 = v32;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v36, (pxrInternal__aapl__pxrReserved__ *)"Invalid clips specified for prim <%s>: %s", v23, v24, v25);
        }
      }
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
      if ((void)v31 && *(void *)(v31 + 88) != *(void *)(v31 + 96))
      {
        if (v12)
        {
          pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v31 + 72), &v29);
          uint64_t v26 = v30;
          if (v30)
          {
            if (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
          }
        }
        sub_216C4AC9C(v27, &v31);
      }
      if (*((void *)&v31 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v31 + 1));
      }
      ++v9;
      uint64_t v6 = v42;
      v8 += 272;
      v7 += 24;
    }
    while (v9 < 0xF0F0F0F0F0F0F0F1 * ((v43 - v42) >> 4));
  }
  unint64_t v36 = (void **)v41;
  sub_216782F20(&v36);
  unint64_t v36 = (void **)&v42;
  sub_216C4C1B8(&v36);
}

void sub_216C4AA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  a31 = v31 - 136;
  sub_216782F20((void ***)&a31);
  a31 = v31 - 112;
  sub_216C4C1B8((void ***)&a31);
  _Unwind_Resume(a1);
}

void **sub_216C4AAD0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216787EE0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    sub_216C4C3B0(a1, v7);
    return sub_216788028(v7);
  }
  return result;
}

void sub_216C4AB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C4AB64(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*v5);
    }
    long long v6 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
    *((unsigned char *)a2 + 47) = 0;
    *((unsigned char *)a2 + 24) = 0;
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v7;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v8 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v8;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

_DWORD *sub_216C4AC2C(uint64_t a1)
{
  sub_2169B4408((void *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void **sub_216C4AC9C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    _OWORD v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v18[2] = v15 + 16;
    sub_216C4C3B0(a1, v18);
    unint64_t v9 = (void *)a1[1];
    double result = sub_216788028(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216C4ADA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipCache::PopulateClipsForPrim(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a3)
{
  sub_216851EE4((uint64_t)&v27, "Usd", "Usd_ClipCache::PopulateClipsForPrim");
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_ClipCache::_ComputeClipsFromPrimIndex((uint64_t)this, a2, a3, (uint64_t *)&v25);
  long long v6 = v25;
  if ((void)v25 != *((void *)&v25 + 1))
  {
    uint64_t v29 = 0;
    uint64_t v7 = *((void *)this + 5);
    if (v7)
    {
      uint64_t v8 = (void **)(v7 + 8);
      sub_216C4BE48((pthread_mutex_t *)(v7 + 8));
      uint64_t v29 = v8;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v24);
    unint64_t v9 = 0;
    while (1)
    {
      BOOL IsAbsoluteRootPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
      char v11 = v9 || IsAbsoluteRootPath;
      if (v11) {
        break;
      }
      uint64_t v12 = sub_216BBE8E8(this, (unsigned int *)&v24);
      if (v12) {
        unint64_t v9 = (uint64_t **)(v12 + 1);
      }
      else {
        unint64_t v9 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v23);
      sub_21697DE94((int *)&v24, (int *)&v23);
      sub_21697DEEC((int *)&v24 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v23);
      while (v23 != v24)
      {
        unint64_t v13 = sub_216C4B0CC((uint64_t)this, &v23);
        if (v13 != (char *)v9) {
          sub_216C4CE90((uint64_t)v13, *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v21);
        sub_21697DE94((int *)&v23, &v21);
        sub_21697DEEC((int *)&v23 + 1, &v22);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        sub_21697C414(&v21);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_21697C414(&v23);
      sub_216C4CFE4((uint64_t *)&v25, *((void **)&v25 + 1), *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
    }
    uint64_t v14 = (uint64_t *)sub_216C4B0CC((uint64_t)this, a2);
    sub_2167ADF8C(v14);
    *(_OWORD *)uint64_t v14 = v25;
    void v14[2] = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    if (sub_216C4B19C(2))
    {
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
      if (*((char *)String + 23) >= 0) {
        uint64_t v18 = (uint64_t)String;
      }
      else {
        uint64_t v18 = *String;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Populated clips for prim <%s>\n", v16, v17, v18);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_21697C414(&v24);
    sub_216C4BE84((pthread_mutex_t **)&v29);
  }
  uint64_t v29 = (void **)&v25;
  sub_216787968(&v29);
  while (v28--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v27);
  return (void)v6 != *((void *)&v6 + 1);
}

void sub_216C4B048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a14;
  sub_216787968(&a19);
  sub_21684E6B8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

char *sub_216C4B0CC(uint64_t a1, _DWORD *a2)
{
  sub_216981010(&v7, a2);
  sub_21698105C(&v8, a2 + 1);
  memset(v9, 0, sizeof(v9));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216C4C7E8(a1, &v7);
  uint64_t v10 = (void **)v9;
  sub_216787968(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  uint64_t v10 = (void **)v6;
  sub_216787968(&v10);
  return (char *)v4 + 8;
}

void sub_216C4B178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_216C4C0E4((uint64_t)&a12);
  *(void *)(v12 - 4sub_216C01044((uint64_t *)this, 0) = &a9;
  sub_216787968((void ***)(v12 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_216C4B19C(int a1)
{
  uint64_t v2 = sub_216C4C130();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_216C4C130();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_264294558[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void **sub_216C4B200(void **a1)
{
  unsigned int v3 = a1;
  sub_216787968(&v3);
  return a1;
}

pthread_mutex_t **pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetUsedLayers@<X0>(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this@<X0>, uint64_t a2@<X8>)
{
  int v22 = 0;
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = (pthread_mutex_t *)(v4 + 8);
    sub_216C4BE48((pthread_mutex_t *)(v4 + 8));
    int v22 = v5;
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v6 = sub_216C4B470(this);
  for (uint64_t i = v6; v6; uint64_t i = v6)
  {
    uint64_t v7 = v6[1];
    uint64_t v8 = v6[2];
    if (v7 != v8)
    {
      do
      {
        unint64_t v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(*(void *)v7 + 72);
        if (v9)
        {
          pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(v9, &v19);
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
        }
        uint64_t v10 = sub_21697CF14(&v19);
        if (v11 & 1 | (unint64_t)v10) {
          sub_21699DAC4((uint64_t **)a2, (uint64_t)&v19, &v19);
        }
        uint64_t v12 = v20;
        if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        unint64_t v13 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(*(void *)v7 + 88);
        uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(*(void *)v7 + 96);
        while (v13 != v14)
        {
          pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(*v13, &v19);
          uint64_t v15 = sub_21697CF14(&v19);
          if (v16 & 1 | (unint64_t)v15) {
            sub_21699DAC4((uint64_t **)a2, (uint64_t)&v19, &v19);
          }
          uint64_t v17 = v20;
          if (v20)
          {
            if (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
            }
          }
          v13 += 2;
        }
        v7 += 16;
      }
      while (v7 != v8);
      uint64_t v6 = i;
    }
    uint64_t v6 = (void *)v6[5];
    if (!v6) {
      uint64_t v6 = (void *)sub_216BBE950((uint64_t)&i);
    }
  }
  return sub_216C4BE84(&v22);
}

void sub_216C4B3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216C4BE84((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void *sub_216C4B470(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  if (!*((void *)a1 + 3)) {
    return 0;
  }
  uint64_t v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);

  return sub_216BBE8E8(a1, v2);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Reload(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v33);
  long long v30 = 0u;
  long long v31 = 0u;
  int v32 = 1065353216;
  uint64_t v2 = sub_216C4B470(this);
  while (1)
  {
    *(void *)&v28[0] = v2;
    if (!v2) {
      break;
    }
    unsigned int v3 = (void *)v2[1];
    uint64_t v4 = (void *)v2[2];
    if (v3 != v4)
    {
      do
      {
        sub_216C4D33C((uint64_t)&v30, v3, v3);
        v3 += 2;
      }
      while (v3 != v4);
      uint64_t v2 = *(void **)&v28[0];
    }
    uint64_t v2 = (void *)v2[5];
    if (!v2) {
      uint64_t v2 = (void *)sub_216BBE950((uint64_t)v28);
    }
  }
  memset(v28, 0, sizeof(v28));
  int v29 = 1065353216;
  for (uint64_t i = (void *)v31; i; uint64_t i = (void *)*i)
  {
    uint64_t v6 = i[2];
    uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(v6 + 88);
    uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ****)(v6 + 96);
    if (v7 != v8)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(*v7, (uint64_t *)&__p);
        unint64_t v9 = sub_21697CF14(&__p);
        if (v10 & 1 | (unint64_t)v9)
        {
          sub_216851894((uint64_t)v28, (uint64_t)&__p, &__p);
          if (v11)
          {
            uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&__p);
            pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(v12, 0);
          }
        }
        uint64_t v13 = v23;
        if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
        v7 += 2;
      }
      while (v7 != v8);
      uint64_t v6 = i[2];
    }
    pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen(*(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v6 + 72), &v26);
    uint64_t v14 = sub_21697CF14(&v26);
    if (v15 & 1 | (unint64_t)v14)
    {
      if (pxrInternal__aapl__pxrReserved__::Usd_IsAutoGeneratedClipManifest(&v26))
      {
        uint64_t v16 = i[2];
        std::string __p = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest((pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(v16 + 88), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v16 + 64), (uint64_t *)&__p, 0, (uint64_t *)&v25);
        if (SHIBYTE(v24) < 0) {
          operator delete(__p);
        }
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v26);
        sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v25);
        pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(v17, (uint64_t *)&__p);
        uint64_t v18 = v23;
        if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        sub_216ABB798(&v25);
      }
      else
      {
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v26);
        pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(v19, 0);
      }
    }
    uint64_t v20 = v27;
    if (v27 && atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  sub_2168501D8((uint64_t)v28);
  sub_216C4D2B8((uint64_t)&v30);
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v33);
}

void sub_216C4B754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_216C4D2B8(v18 - 80);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v18 - 40));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_ClipCache::GetClipsForPrim(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = (pthread_mutex_t *)(v4 + 8);
    sub_216C4BE48((pthread_mutex_t *)(v4 + 8));
    uint64_t v8 = v5;
  }
  uint64_t v6 = sub_216C4B8E0(this, a2);
  sub_216C4BE84(&v8);
  return v6;
}

void sub_216C4B8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C4BE84((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C4B8E0(void *a1, _DWORD *a2)
{
  sub_216981010(&v13, a2);
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C((_DWORD *)&v13 + 1, a2 + 1);
        ;
        uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v11))
  {
    uint64_t v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(i);
    uint64_t v7 = v13;
    uint64_t v8 = *v6;
    if (v13 == *v6) {
      break;
    }
    unint64_t v9 = sub_216BBE8E8(a1, (unsigned int *)&v13);
    if (v9)
    {
      uint64_t v2 = v9 + 1;
      break;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v11);
    sub_21697DE94((int *)&v13, &v11);
    sub_21697DEEC((int *)&v13 + 1, &v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v13 + 1);
  sub_21697C414(&v13);
  if (v7 == v8)
  {
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_26798C678, memory_order_acquire))
    {
      return &qword_26798C660;
    }
    else
    {
      uint64_t v2 = &qword_26798C660;
      if (__cxa_guard_acquire(&qword_26798C678))
      {
        qword_26798C660 = 0;
        *(void *)algn_26798C668 = 0;
        qword_26798C670 = 0;
        __cxa_atexit((void (*)(void *))sub_216C4B200, &qword_26798C660, &dword_216758000);
        __cxa_guard_release(&qword_26798C678);
      }
    }
  }
  return v2;
}

void sub_216C4BA2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipCache::InvalidateClipsForPrim(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3)
{
  if (!*((void *)this + 6))
  {
    int v22 = "usd/clipCache.cpp";
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"InvalidateClipsForPrim";
    __p.__r_.__value_.__l.__size_ = 372;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::Inv"
                                                               "alidateClipsForPrim(const SdfPath &)";
    LOBYTE(v24) = 0;
    LODWORD(v26[0]) = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v22, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_lifeboat");
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  int v22 = (char *)sub_216BBE8E8(this, (unsigned int *)a2);
  unint64_t v4 = sub_216BBE950((uint64_t)&v22);
  unint64_t v5 = (unint64_t)v22;
  unint64_t v29 = (unint64_t)v22;
  unint64_t v20 = v4;
  if (v22 != (char *)v4)
  {
    do
    {
      sub_216C4CFE4(*(uint64_t **)(*((void *)this + 6) + 8), *(void **)(*(void *)(*((void *)this + 6) + 8) + 8), *(uint64_t **)(v5 + 8), *(void **)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
      int v21 = (_DWORD *)v5;
      uint64_t v7 = *(const std::string ***)(v5 + 8);
      for (uint64_t i = *(const std::string ***)(v5 + 16); v7 != i; v7 += 2)
      {
        pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayerIfOpen((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*v7)[3].__r_.__value_.__l.__data_, &v27);
        uint64_t v8 = sub_21697CF14(&v27);
        if (v9 & 1 | (unint64_t)v8 && pxrInternal__aapl__pxrReserved__::Usd_IsAutoGeneratedClipManifest(&v27))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
          memset(&__p, 0, sizeof(__p));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
          memset(v26, 0, sizeof(v26));
          sub_2169C487C((int *)&v22, v21);
          sub_2169C48D4((int *)&v22 + 1, v21 + 1);
          std::string::operator=(&__p, *v7);
          char v10 = *v7;
          sub_2169C487C(&v24, &(*v7)[2].__r_.__value_.__r.__words[2]);
          sub_2169C48D4(&v25, (_DWORD *)&v10[2].__r_.__value_.__r.__words[2] + 1);
          sub_216BBA74C(v26, (uint64_t)((*v7)[4].__r_.__value_.__r.__words[0] - (*v7)[3].__r_.__value_.__r.__words[2]) >> 4);
          int v11 = (char *)(*v7)[3].__r_.__value_.__r.__words[2];
          std::string::pointer data = (*v7)[4].__r_.__value_.__l.__data_;
          while (v11 != data)
          {
            sub_216C4D6C0((uint64_t)v26, (long long *)(*(void *)v11 + 40));
            v11 += 16;
          }
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v27);
          uint64_t Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
          uint64_t v15 = *(void *)(*((void *)this + 6) + 8) + 24;
          long long v30 = &v22;
          uint64_t v16 = (std::string *)sub_216C4D8A4(v15, (unsigned int *)&v22, (uint64_t)&unk_2174BFD90, (uint64_t *)&v30);
          std::string::operator=(v16 + 4, Identifier);
          sub_2169B4408(v26);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
          sub_21697C414(&v24);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
          sub_21697C414(&v22);
        }
        uint64_t v17 = v28;
        if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      unint64_t v5 = *(void *)(v29 + 40);
      if (!v5) {
        unint64_t v5 = sub_216BBE950((uint64_t)&v29);
      }
      unint64_t v29 = v5;
    }
    while (v5 != v20);
  }
  return sub_216C4BDC0(this, (unsigned int *)a2);
}

void sub_216C4BD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,atomic_uint *a26)
{
  if (a26)
  {
    if (atomic_fetch_add_explicit(a26 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a26 + 8))(a26);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216C4BDC0(pxrInternal__aapl__pxrReserved__::SdfPath *a1, unsigned int *a2)
{
  unsigned int v3 = sub_216BBE8E8(a1, a2);
  unint64_t v5 = v3;
  if (v3) {
    sub_216C4DCD8(a1, (uint64_t *)&v5);
  }
  return v3 != 0;
}

pthread_mutex_t *sub_216C4BE0C(pthread_mutex_t *a1)
{
  uint64_t v2 = (tbb::internal *)pthread_mutex_init(a1, 0);
  if (v2) {
    tbb::internal::handle_perror(v2, "mutex: pthread_mutex_init failed", v3);
  }
  return a1;
}

tbb::internal *sub_216C4BE48(pthread_mutex_t *a1)
{
  double result = (tbb::internal *)pthread_mutex_lock(a1);
  if (result)
  {
    tbb::internal::handle_perror(result, "mutex: pthread_mutex_lock failed", v2);
  }
  return result;
}

pthread_mutex_t **sub_216C4BE84(pthread_mutex_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    pthread_mutex_unlock(v2);
    *a1 = 0;
  }
  return a1;
}

void sub_216C4BEBC(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_216C4BF08((uint64_t)(a2 + 3));
    unsigned int v3 = a2;
    sub_216787968(&v3);
    operator delete(a2);
  }
}

uint64_t sub_216C4BF08(uint64_t a1)
{
  sub_216C4BF44(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C4BF44(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unsigned int v3 = (void *)*v2;
      sub_216C4BF88((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216C4BF88(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_2169B4408((void *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipCache::~Usd_ClipCache(pxrInternal__aapl__pxrReserved__::Usd_ClipCache *this)
{
  sub_216C4C040((uint64_t *)this);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void sub_216C4C040(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void *)(v6 + 32);
          char v9 = (void **)(v6 + 8);
          sub_216787968(&v9);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          uint64_t v8 = sub_21697C414((_DWORD *)v6);
          operator delete(v8);
          uint64_t v6 = v7;
        }
        while (v7);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

_DWORD *sub_216C4C0E4(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  sub_216787968(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216C4C130()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C688))
  {
    uint64_t v1 = operator new(0x44uLL);
    v1[16] = 0;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    qword_26798C680 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798C688);
  }
  return qword_26798C680;
}

void sub_216C4C1A0(_Unwind_Exception *a1)
{
}

void sub_216C4C1B8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_216C4C23C(v4 - 272);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216C4C23C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 260));
  sub_21697C414((_DWORD *)(a1 + 256));
  uint64_t v2 = *(atomic_uint **)(a1 + 248);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_216C4C2F4(a1 + 184);
  sub_216C4C2F4(a1 + 136);
  if (*(unsigned char *)(a1 + 128) && *(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  sub_216C4C32C(a1 + 48);

  return sub_216C4C378(a1);
}

uint64_t sub_216C4C2F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    sub_2168F83DC(a1);
  }
  return a1;
}

uint64_t sub_216C4C32C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t sub_216C4C378(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    sub_2169B4408((void *)a1);
  }
  return a1;
}

uint64_t sub_216C4C3B0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C4C428((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C4C428(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216C4C4BC((uint64_t)v12);
  return v10;
}

uint64_t sub_216C4C4BC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void *sub_216C4C4F4(void *a1, unsigned int *a2)
{
  unint64_t v4 = sub_216C4C630((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        v15[0] = v11 + 2;
        v15[1] = v11 + 3;
        void v15[2] = v11 + 6;
        v15[3] = v11 + 7;
        v14[0] = a2;
        v14[1] = a2 + 2;
        void v14[2] = a2 + 8;
        _OWORD v14[3] = a2 + 10;
        if (sub_216C4C784((uint64_t)&v16, (uint64_t)v15, (uint64_t)v14)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      int v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_216C4C630(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  char v6 = 1;
  uint64_t v5 = v3 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  sub_216C4C69C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, (pxrInternal__aapl__pxrReserved__ *)(a2 + 2), a2 + 8, (uint64_t *)a2 + 5);
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

unint64_t sub_216C4C69C(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, unsigned int *a3, uint64_t *a4)
{
  uint8x8_t v7 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    unint64_t v8 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    unint64_t v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v8);
  sub_2169827F8((uint64_t)a1, a3);

  return sub_216C4C70C((unint64_t)a1, a4);
}

unint64_t sub_216C4C70C(unint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    do
    {
      --v4;
      char v6 = (pxrInternal__aapl__pxrReserved__ *)((char *)v5 + 48);
      uint64_t result = sub_2169B4220(v2, v5);
      uint64_t v5 = v6;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_216C4C784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_2169B6920((uint64_t)&v6, a2, a3) & 1) != 0 && **(void **)(a2 + 16) == **(void **)(a3 + 16)) {
    return sub_2169B42A0(*(uint64_t **)(a2 + 24), *(void *)(a3 + 24));
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_216C4C7E8(uint64_t a1, unsigned int *a2)
{
  char v6 = a2;
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C4C964(a1, a2, (uint64_t *)&v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_216C4C838(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_216C4C838(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v12);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12))
  {
    sub_216981010(&v9, &v12);
    sub_21698105C(&v10, &v13);
    memset(v11, 0, sizeof(v11));
    memset(v8, 0, sizeof(v8));
    uint64_t v4 = sub_216C4C7E8(a1, &v9);
    long long v14 = (void **)v11;
    sub_216787968(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    long long v14 = (void **)v8;
    sub_216787968(&v14);
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5) {
      uint64_t v6 = v5 | 1;
    }
    else {
      uint64_t v6 = v4;
    }
    *((void *)v3 + 6) = v6;
    *(void *)(v4 + 4sub_216C01044((uint64_t *)this, 0) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_21697C414(&v12);
}

void sub_216C4C930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_216C4C0E4((uint64_t)va1);
  *(void *)(v2 - 56) = va;
  sub_216787968((void ***)(v2 - 56));
  sub_21697B754((int *)va2);
  _Unwind_Resume(a1);
}

void *sub_216C4C964(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_216C4CAA8((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  uint64_t v8 = (void *)*v7;
  if (*v7)
  {
    int v9 = (void *)*v7;
    while (*v9 != *(void *)a2)
    {
      int v9 = (void *)v9[4];
      if (!v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      sub_216C4CAA8((void **)a1);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      uint64_t v8 = (void *)*v7;
    }
    int v9 = operator new(0x38uLL);
    sub_216C4CCD8((uint64_t)v9, *a3);
    v9[5] = 0;
    v9[6] = 0;
    _OWORD v9[4] = v8;
    void *v7 = v9;
    ++*(void *)(a1 + 24);
  }
  return v9;
}

void sub_216C4CA94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216C4CAA8(void **a1)
{
  sub_216851EE4((uint64_t)&v21, "Sdf", "SdfPathTable::_Grow");
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>>::_Grow() [MappedType = std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>]", 0, v2);
    BOOL v5 = v4 != 0;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
  }
  uint64_t v19 = v4;
  unsigned int v20 = v5;
  unint64_t v6 = (2 * (void)a1[4]) | 1;
  if (v6 <= 7) {
    unint64_t v6 = 7;
  }
  a1[4] = (void *)v6;
  sub_216C4CC60(&v17, v6 + 1);
  uint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 3;
    do
    {
      uint64_t v10 = (unsigned int *)*((void *)*a1 + v8);
      if (v10)
      {
        unint64_t v11 = (unint64_t)a1[4];
        do
        {
          uint64_t v12 = (unsigned int *)*((void *)v10 + 4);
          unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          uint64_t v14 = v17;
          *((void *)v10 + 4) = *(void *)(v17 + 8 * v13);
          *(void *)(v14 + 8 * v13) = v10;
          uint64_t v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  long long v15 = a1[2];
  a1[2] = v18;
  *(void *)&long long v17 = v7;
  uint64_t v18 = v15;
  if (v7)
  {
    *((void *)&v17 + 1) = v7;
    operator delete(v7);
  }
  unsigned int v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    unsigned int v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_216C4CC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216C4CC60(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216C4CCBC(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C4CCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216C4CD40((void *)(a1 + 8), *(void **)(a2 + 8), *(void **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  return a1;
}

void sub_216C4CD2C(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void *sub_216C4CD40(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_216C4CDC8((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216C4CDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void *sub_216C4CDC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  uint64_t v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_216C4CE58((uint64_t)v7);
  return v4;
}

uint64_t sub_216C4CE58(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168B84AC(a1);
  }
  return a1;
}

void sub_216C4CE90(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_2167ADF8C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21682BF78((void *)a1, v12);
    unint64_t v13 = sub_216C4CDC8(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    sub_216BCC514((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = sub_216C4CDC8(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_216BCC514((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_216784EC4(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_216C4CFD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216C4CFDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_216C4CFE4(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        char v21 = &a3[2 * a5];
      }
      else
      {
        char v21 = &a3[2 * v20];
        a1[1] = (uint64_t)sub_216C4CDC8((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216970260((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      sub_216BCC514((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_216787EE0((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      int v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        *int v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      uint64_t v5 = (void *)sub_216C4D190(a1, v26, v5);
      sub_216788028(v26);
    }
  }
  return v5;
}

void sub_216C4D170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C4D190(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216C4C428((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216C4D244(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_OWORD *sub_216C4D244(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_216C4CE58((uint64_t)v6);
  return v4;
}

uint64_t sub_216C4D2B8(uint64_t a1)
{
  sub_216C4D2F4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C4D2F4(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unsigned __int8 v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        sub_216784EC4(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_216C4D33C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v15 = a3[1];
  i[2] = *a3;
  i[3] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_40:
    *uint64_t v23 = i;
    goto LABEL_41;
  }
  *uint64_t i = *v14;
  *unint64_t v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216C4D5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216C4D5CC(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216C4D5CC(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      sub_216784EC4(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

char *sub_216C4D628(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int64x2_t __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_216C4D6A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C4D6C0(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_21;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
      if (v6 != 1) {
        goto LABEL_21;
      }
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7)
      {
        if (*(void *)(a1 + 24)) {
          unint64_t v8 = (uint64_t *)a1;
        }
        else {
          unint64_t v8 = (uint64_t *)(v7 - 8);
        }
        uint64_t v5 = *v8;
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (v4 != v5)
    {
      uint64_t v9 = v7 + 48 * v4;
      if (*((char *)a2 + 23) < 0)
      {
        sub_216778F24((unsigned char *)(v7 + 48 * v4), *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v10 = *a2;
        *(void *)(v9 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v9 = v10;
      }
      uint64_t v11 = (unsigned char *)(v7 + 48 * v4 + 24);
      if (*((char *)a2 + 47) < 0)
      {
        sub_216778F24(v11, *((void **)a2 + 3), *((void *)a2 + 4));
      }
      else
      {
        long long v12 = *(long long *)((char *)a2 + 24);
        *(void *)(v7 + 48 * v4 + 4sub_216C01044((uint64_t *)this, 0) = *((void *)a2 + 5);
        *(_OWORD *)uint64_t v11 = v12;
      }
      goto LABEL_19;
    }
LABEL_21:
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = 1;
    do
    {
      unint64_t v15 = v14;
      v14 *= 2;
    }
    while (v15 < v4 + 1);
    float v16 = sub_2169B4728(a1, v15);
    uint64_t v17 = 3 * v4;
    sub_2169B48DC(v13, v13 + 16 * v17, (uint64_t)v16);
    sub_216C4D628((char *)&v16[2 * v17], a2);
    sub_2169B4408((void *)a1);
    *(void *)(a1 + 32) = v16;
LABEL_19:
    ++*(void *)a1;
    return;
  }
  v19[0] = "vt/array.h";
  v19[1] = "emplace_back";
  void v19[2] = 433;
  v19[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::emplace_back("
           "Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath, Args = <const pxrInternal__aapl__pxrReser"
           "ved__::SdfAssetPath &>]";
  char v20 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v18 = 4;
    }
    else {
      int v18 = 3;
    }
  }
  else
  {
    int v18 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v18);
}

void sub_216C4D888(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216C4D8A4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_216C4C630(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            v27[0] = v15 + 2;
            v27[1] = v15 + 3;
            v27[2] = v15 + 6;
            v27[3] = v15 + 7;
            v26[0] = a2;
            v26[1] = a2 + 2;
            void v26[2] = a2 + 8;
            v26[3] = a2 + 10;
            if (sub_216C4C784((uint64_t)&v28, (uint64_t)v27, (uint64_t)v26)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_216C4DB78(a1, v10, a4, (uint64_t)v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *uint64_t v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }
  unint64_t v15 = (void *)v27[0];
  v27[0] = 0;
  ++*v8;
  sub_216C4DC80((uint64_t)v27, 0);
  return v15;
}

void sub_216C4DB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216C4DC80((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216C4DB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216C4DBE8((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216C4DBD0(_Unwind_Exception *a1)
{
  sub_216C4DC80(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216C4DBE8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_21697D878((_DWORD *)(a1 + 32), (_DWORD *)(a2 + 32));
  sub_21697D8B4((_DWORD *)(a1 + 36), (_DWORD *)(a2 + 36));
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v6;
  *(_OWORD *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_216C4DC80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C4BF88((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_216C4DCD8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_216C4DD28(a1, *a2);
  sub_216C4DD7C(a1, v3);

  sub_216C4DE18(a1, (unsigned int *)v3);
}

void sub_216C4DD28(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    sub_216C4DED0(a1, *(void *)(a2 + 40));
    sub_216C4DE18(a1, v2);
  }
}

void *sub_216C4DD7C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(void *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    long long v5 = sub_216BBE8E8(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
    return (void *)sub_216BBEBAC((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_216C4DE04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216C4DE18(void *a1, unsigned int *a2)
{
  unint64_t v3 = a2 + 1;
  unint64_t v4 = (void *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    long long v5 = v4;
    unsigned int v6 = (unsigned int *)*v4;
    unint64_t v4 = (void *)(*v4 + 32);
  }
  while (v6 != a2);
  --a1[3];
  *long long v5 = *((void *)a2 + 4);
  unint64_t v8 = (void **)(a2 + 2);
  sub_216787968(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  int v7 = sub_21697C414(a2);
  operator delete(v7);
}

void sub_216C4DED0(void *a1, uint64_t a2)
{
  ((void (*)(void))sub_216C4DD28)();
  uint64_t v4 = *(void *)(a2 + 48);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      uint64_t v7 = *(void *)(v5 + 48);
      if ((v7 & 7) != 0) {
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v8 = 0;
      }
      sub_216C4DD28(a1, v5);
      sub_216C4DE18(a1, (unsigned int *)v5);
      unint64_t v5 = v8;
    }
    while (v8);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_IsAutoGeneratedClipManifest(uint64_t *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v2);
  if (result)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t Identifier = (char **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
    unsigned int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216C4DFD0();
    if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    }
    if (*((char *)EmptyString + 23) >= 0) {
      unint64_t v8 = (char *)EmptyString;
    }
    else {
      unint64_t v8 = (char *)*EmptyString;
    }
    return pxrInternal__aapl__pxrReserved__::TfStringContains(Identifier, v8);
  }
  return result;
}

unint64_t sub_216C4DFD0()
{
  v0 = (char *)atomic_load((unint64_t *)&qword_267B915D8);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "generated_manifest", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    unsigned int v6 = (void **)(v0 + 8);
    char v7 = 0;
    unint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    void *v3 = v2;
    uint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B915D8, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      unsigned int v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B915D8);
    }
  }
  return (unint64_t)v0;
}

void sub_216C4E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(pxrInternal__aapl__pxrReserved__::Usd_Clip ***a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  memset(v33, 0, sizeof(v33));
  sub_216AF2898((uint64_t *)v33, ((char *)a1[1] - (char *)*a1) >> 4);
  int v27 = a4;
  char v28 = a5;
  std::string __p = 0;
  long long v31 = 0;
  int v32 = 0;
  sub_2168042E8(&__p, ((char *)a1[1] - (char *)*a1) >> 4);
  uint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*v10, (uint64_t *)&v29);
      uint8x8_t v12 = sub_21697CF14(&v29);
      if (v13 & 1 | (unint64_t)v12)
      {
        sub_216AF29A8((uint64_t *)v33, &v29);
        uint64_t v14 = *v10;
        unint64_t v15 = v31;
        if (v31 >= v32)
        {
          float v17 = (char *)__p;
          uint64_t v18 = (v31 - (unsigned char *)__p) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v20 = v32 - (unsigned char *)__p;
          if ((v32 - (unsigned char *)__p) >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            size_t v22 = (char *)sub_21677CB28((uint64_t)&v32, v21);
            float v17 = (char *)__p;
            unint64_t v15 = v31;
          }
          else
          {
            size_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          *(void *)uint64_t v23 = *((void *)v14 + 12);
          unint64_t v16 = v23 + 8;
          while (v15 != v17)
          {
            uint64_t v24 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v23 - 1) = v24;
            v23 -= 8;
          }
          std::string __p = v23;
          long long v31 = v16;
          int v32 = &v22[8 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)long long v31 = *((void *)v14 + 12);
          unint64_t v16 = v15 + 8;
        }
        long long v31 = v16;
      }
      uint64_t v25 = *((void *)&v29 + 1);
      if (*((void *)&v29 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v29 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  if (v27) {
    p_p = &__p;
  }
  else {
    p_p = 0;
  }
  pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(a2, v33, a3, (uint64_t)p_p, v28);
  if (__p)
  {
    long long v31 = (char *)__p;
    operator delete(__p);
  }
  std::string __p = v33;
  sub_216850BF4((void ***)&__p);
}

void sub_216C4E368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, char a16)
{
  std::string __p = &a16;
  sub_216850BF4((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, std::string::size_type *a2@<X0>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v34 = a4;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    unint64_t v11 = (void *)*a2;
    uint8x8_t v12 = (void *)a2[1];
    while (v11 != v12)
    {
      char v13 = sub_21697CF14(v11);
      if (!(v9 & 1 | (unint64_t)v13))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clipSet.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Usd_GenerateClipManifest";
        __p.__r_.__value_.__r.__words[2] = 99;
        p_p = (std::string *)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(const SdfLayerHan"
                             "dleVector &, const SdfPath &, const std::string &, const std::vector<double> *)";
        char v40 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clip layer");
        goto LABEL_15;
      }
      v11 += 2;
    }
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    unint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
    if (!v15) {
      unint64_t v15 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
    }
    unint64_t v16 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      float v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        float v17 = *(const char **)v17;
      }
    }
    else
    {
      float v17 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s.%s", v9, v10, a3, v17);
    unint64_t v36 = 0;
    std::string v37 = 0;
    char v35 = &v36;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v35, a5);
    sub_2167877AC((uint64_t)&v35, v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v33);
    std::string::size_type v18 = *a2;
    unint64_t v19 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 != v19)
    {
      uint64_t v20 = (uint64_t *)*a2;
      do
      {
        uint64_t v21 = sub_2169791E0(v20);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C75E688;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)a5;
        __p.__r_.__value_.__r.__words[2] = v18;
        p_p = &__p;
        pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(v21, this, (uint64_t)&__p);
        sub_216ABEE34(&__p);
        v20 += 2;
        v18 += 16;
      }
      while (v20 != v19);
    }
    if (v34)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v22 = sub_216AA5ECC(a5);
      uint64_t v23 = (std::string *)operator new(0x20uLL);
      v23->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C75E740;
      v23->__r_.__value_.__l.__size_ = (std::string::size_type)a2;
      v23->__r_.__value_.__r.__words[2] = (std::string::size_type)&v34;
      v23[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      p_p = v23;
      pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(v22, this, (uint64_t)&__p);
      sub_216ABEE34(&__p);
      uint64_t v24 = v30;
      for (uint64_t i = v31; v24 != i; v24 += 32)
      {
        sub_216C50734((uint64_t)&__p, v24);
        int v27 = (char *)__p.__r_.__value_.__r.__words[2];
        std::string::size_type size = (char *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[2])
        {
          do
          {
            char v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a5);
            unint64_t v36 = &v29;
            std::string v37 = &stru_26C757FD0;
            char v35 = (char **)&unk_26C75E7C0;
            pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (uint64_t)&v35);
            size += 8;
          }
          while (size != v27);
          std::string::size_type size = (char *)__p.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)size;
          operator delete(size);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__p);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      sub_216C51438((void ***)&__p);
    }
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v33);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usd/clipSet.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Usd_GenerateClipManifest";
    __p.__r_.__value_.__r.__words[2] = 92;
    p_p = (std::string *)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(const SdfLayerHandleV"
                         "ector &, const SdfPath &, const std::string &, const std::vector<double> *)";
    char v40 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"<%s> must be a prim path", Text);
LABEL_15:
    *a5 = 0;
  }
}

void sub_216C4E780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_216ABEE34(&__p);
  std::string __p = &a13;
  sub_216C51438((void ***)&__p);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a16);
  sub_216ABB798(v26);
  _Unwind_Resume(a1);
}

_DWORD *sub_216C4E830(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipSet::New(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (!*(unsigned char *)(a2 + 40) || !*(unsigned char *)(a2 + 128) || !*(unsigned char *)(a2 + 176)) {
    goto LABEL_53;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 127);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 112);
  }
  if (!v7)
  {
    char v28 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v28) {
      char v28 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    }
    unint64_t v29 = *((void *)v28 + 4) & 0xFFFFFFFFFFFFFFF8;
    if (v29)
    {
      uint64_t v30 = (const char *)(v29 + 16);
      if (*(char *)(v29 + 39) < 0) {
        uint64_t v30 = *(const char **)v30;
      }
    }
    else
    {
      uint64_t v30 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No clip prim path specified in '%s'", (const char *)a2, (char *)a3, v30);
LABEL_50:
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v60;
    *(void *)(a3 + 16) = v61;
    goto LABEL_53;
  }
  int v9 = *(unsigned __int8 *)(a2 + 224);
  unint64_t v10 = *(void *)a2;
  if (*(void *)a2)
  {
    unint64_t v11 = (unsigned char *)(*(void *)(a2 + 32) + 23);
    for (uint64_t i = 48 * v10; i; i -= 48)
    {
      if ((char)*v11 < 0)
      {
        if (!*(void *)(v11 - 15))
        {
LABEL_34:
          uint64_t v31 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v31) {
            uint64_t v31 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          unint64_t v32 = *((void *)v31 + 1) & 0xFFFFFFFFFFFFFFF8;
          if (v32)
          {
            uint64_t v33 = (const char *)(v32 + 16);
            if (*(char *)(v32 + 39) < 0) {
              uint64_t v33 = *(const char **)v33;
            }
          }
          else
          {
            uint64_t v33 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Empty clip asset path in '%s'", (const char *)a2, (char *)a3, v33);
          goto LABEL_50;
        }
      }
      else if (!*v11)
      {
        goto LABEL_34;
      }
      v11 += 48;
    }
  }
  uint64_t v13 = a2 + 104;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString((long long *)(a2 + 104), a3)) {
    goto LABEL_53;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v66, a2 + 104);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v14)
    && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v66))
  {
    uint64_t v17 = *(void *)(a2 + 136);
    if (v17)
    {
      std::string::size_type v18 = *(double **)(a2 + 168);
      double v19 = (double)v10;
      uint64_t v20 = 16 * v17;
      uint64_t v21 = v18 + 1;
      uint64_t v22 = v20;
      do
      {
        double v23 = *v21;
        if (*v21 < 0.0 || v23 >= v19)
        {
          BOOL v46 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v46) {
            BOOL v46 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          unint64_t v47 = *(void *)v46 & 0xFFFFFFFFFFFFFFF8;
          if (v47)
          {
            char v48 = (const char *)(v47 + 16);
            if (*(char *)(v47 + 39) < 0) {
              char v48 = *(const char **)v48;
            }
          }
          else
          {
            char v48 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid clip index %d in '%s'", v15, v16, v19, (int)v23, v48);
          goto LABEL_56;
        }
        v21 += 2;
        v22 -= 16;
      }
      while (v22);
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v63 = (uint64_t *)&v64;
      while (1)
      {
        long long v60 = *(_OWORD *)v18;
        uint64_t v25 = sub_216C50828(&v63, (double *)&v60, (uint64_t)&v60);
        if (!(_BYTE)v26) {
          break;
        }
        v18 += 2;
        v20 -= 16;
        if (!v20) {
          goto LABEL_64;
        }
      }
      unint64_t v49 = v25;
      uint64_t v50 = *(void *)v18;
      double v51 = v18[1];
      uint64_t v52 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v52) {
        uint64_t v52 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      unint64_t v53 = *(void *)v52 & 0xFFFFFFFFFFFFFFF8;
      if (v53)
      {
        unint64_t v54 = (const char *)(v53 + 16);
        if (*(char *)(v53 + 39) < 0) {
          unint64_t v54 = *(const char **)v54;
        }
      }
      else
      {
        unint64_t v54 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Clip %d cannot be active at time %.3f in '%s' because clip %d was already specified as active at this time.", v26, v27, (int)v51, v50, v54, *((unsigned int *)v49 + 10));
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      char v37 = 0;
      *(_OWORD *)a3 = v60;
      *(void *)(a3 + 16) = v61;
      goto LABEL_96;
    }
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v63 = (uint64_t *)&v64;
LABEL_64:
    if (v9)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      int v62 = 1065353216;
      uint64_t v39 = *(void *)(a2 + 184);
      if (v39)
      {
        char v40 = *(double **)(a2 + 216);
        uint64_t v41 = 16 * v39;
        while (1)
        {
          LODWORD(v58) = 0;
          uint64_t v42 = sub_216C508EC((uint64_t)&v60, v40, v40, &v58);
          int v45 = *((_DWORD *)v42 + 6);
          *((_DWORD *)v42 + 6) = v45 + 1;
          if (v45 >= 2) {
            break;
          }
          v40 += 2;
          v41 -= 16;
          if (!v41) {
            goto LABEL_69;
          }
        }
        uint64_t v55 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v55) {
          uint64_t v55 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        unint64_t v56 = *((void *)v55 + 10) & 0xFFFFFFFFFFFFFFF8;
        if (v56)
        {
          uint64_t v57 = (const char *)(v56 + 16);
          if (*(char *)(v56 + 39) < 0) {
            uint64_t v57 = *(const char **)v57;
          }
        }
        else
        {
          uint64_t v57 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot have more than two entries in '%s' with the same stage time (%.3f).", v43, v44, v57, *(void *)v40);
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(_OWORD *)a3 = v58;
        *(void *)(a3 + 16) = v59;
        sub_216850320((uint64_t)&v60);
        char v37 = 0;
        goto LABEL_96;
      }
LABEL_69:
      sub_216850320((uint64_t)&v60);
    }
    char v37 = 1;
LABEL_96:
    sub_2167FB780((uint64_t)&v63, v64);
    goto LABEL_59;
  }
  if (*(char *)(a2 + 127) < 0) {
    uint64_t v13 = *(void *)(a2 + 104);
  }
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v34) {
    uint64_t v34 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  unint64_t v35 = *((void *)v34 + 4) & 0xFFFFFFFFFFFFFFF8;
  if (v35)
  {
    unint64_t v36 = (const char *)(v35 + 16);
    if (*(char *)(v35 + 39) < 0) {
      unint64_t v36 = *(const char **)v36;
    }
  }
  else
  {
    unint64_t v36 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Path '%s' in '%s' must be an absolute path to a prim", v15, v16, v13, v36);
LABEL_56:
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  char v37 = 0;
  *(_OWORD *)a3 = v60;
  *(void *)(a3 + 16) = v61;
LABEL_59:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
  sub_21697C414(&v66);
  if ((v37 & 1) == 0)
  {
LABEL_53:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  if (!*(unsigned char *)(a2 + 96)) {
    MEMORY[0x21D4477E0](a3, "No clip manifest specified. Performance may be improved if a manifest is specified.");
  }
  int v38 = (char *)operator new(0x78uLL);
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(v38, a1, a2);
  sub_216C51C54(a4, (uint64_t)v38);
}

void sub_216C4EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
  sub_216850320((uint64_t)&a17);
  sub_2167FB780((uint64_t)&a23, a24);
  sub_21697B754((_DWORD *)(v24 - 88));
  _Unwind_Resume(a1);
}

const char *pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(char *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)int64x2_t __dst = v5;
  }
  *((void *)__dst + 3) = *(void *)(a3 + 240);
  uint64_t v6 = *(void *)(a3 + 248);
  *((void *)__dst + 4) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)__dst + 10, (_DWORD *)(a3 + 256));
  sub_21698105C((_DWORD *)__dst + 11, (_DWORD *)(a3 + 260));
  uint64_t v80 = __dst;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(a3 + 240));
  uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
  sub_216ABBA60((uint64_t *)__dst + 6, (uint64_t *)(*Layers + 8 * *(void *)(a3 + 264)));
  uint64_t v76 = a3 + 256;
  uint64_t v77 = a3 + 240;
  uint64_t v79 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(__dst + 64);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__dst + 64, a3 + 104);
  *(_OWORD *)(__dst + 72) = 0u;
  int v9 = __dst + 72;
  *((_OWORD *)v9 + 1) = 0u;
  uint64_t v78 = (uint64_t *)(v9 + 16);
  uint64_t v75 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)v9;
  *(_OWORD *)(v9 + 25) = 0u;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = &v98;
  unint64_t v10 = (const std::string *)a3;
  uint64_t v11 = *(void *)(a3 + 136);
  if (v11)
  {
    uint8x8_t v12 = *(double **)(a3 + 168);
    int v81 = (uint64_t *)&v12[2 * v11];
    while (1)
    {
      if (!*(unsigned char *)(a3 + 40))
      {
        *(void *)&long long v90 = "usd/clipSet.cpp";
        *((void *)&v90 + 1) = "Usd_ClipSet";
        v91.__r_.__value_.__r.__words[0] = 361;
        v91.__r_.__value_.__l.__size_ = (std::string::size_type)"pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipS"
                                                                "et(const std::string &, const Usd_ClipSetDefinition &)";
        v91.__r_.__value_.__s.__data_[16] = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v90, 3, (pxrInternal__aapl__pxrReserved__ *)"Clip asset paths array is not allocated.");
        char v48 = v80;
        goto LABEL_114;
      }
      unsigned int v13 = (int)v12[1];
      if ((v13 & 0x80000000) != 0 || *(void *)a3 <= (unint64_t)v13) {
        break;
      }
      double v14 = *v12;
      uint64_t v15 = *(void *)(a3 + 32);
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v94[8]);
      *(double *)uint64_t v94 = v14;
      std::string::operator=((std::string *)&v94[8], (const std::string *)(v15 + 48 * v13));
      std::string::operator=((std::string *)&v95[8], (const std::string *)(v15 + 48 * v13 + 24));
      *(void *)&long long v90 = *(void *)v94;
      *((void *)&v90 + 1) = *(void *)v94;
      if ((v95[7] & 0x80000000) != 0)
      {
        sub_216778F24(&v91, *(void **)&v94[8], *(unint64_t *)&v94[16]);
      }
      else
      {
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)&v94[8];
        v91.__r_.__value_.__r.__words[2] = *(void *)v95;
      }
      if (SHIBYTE(v96) < 0)
      {
        sub_216778F24(&__p, *(void **)&v95[8], *(unint64_t *)&v95[16]);
      }
      else
      {
        long long __p = *(_OWORD *)&v95[8];
        uint64_t v93 = v96;
      }
      unint64_t v16 = v98;
      uint64_t v17 = v90;
      std::string::size_type v18 = &v98;
      double v19 = &v98;
      if (v98)
      {
        while (1)
        {
          while (1)
          {
            double v19 = (uint64_t **)v16;
            double v20 = *((double *)v16 + 4);
            if (*(double *)&v90 >= v20) {
              break;
            }
            unint64_t v16 = (uint64_t *)*v16;
            std::string::size_type v18 = v19;
            if (!*v19) {
              goto LABEL_24;
            }
          }
          if (v20 >= *(double *)&v90) {
            break;
          }
          unint64_t v16 = (uint64_t *)v16[1];
          if (!v16)
          {
            std::string::size_type v18 = v19 + 1;
            goto LABEL_24;
          }
        }
        *(void *)uint64_t v85 = "usd/clipSet.cpp";
        uint64_t v86 = (std::__shared_weak_count *)"Usd_ClipSet";
        uint64_t v87 = 378;
        uint64_t v88 = "pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(const std::string &, const Usd_ClipSetDefinition &)";
        char v89 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v85, "startTimeToClip.insert( std::make_pair(entry.startTime, entry)).second", 0);
      }
      else
      {
LABEL_24:
        uint64_t v21 = (char *)operator new(0x60uLL);
        uint64_t v22 = *((void *)&v90 + 1);
        *((void *)v21 + 4) = v17;
        *((void *)v21 + 5) = v22;
        *((_OWORD *)v21 + 3) = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
        *((void *)v21 + 8) = *((void *)&v91.__r_.__value_.__l + 2);
        memset(&v91, 0, sizeof(v91));
        *(_OWORD *)(v21 + 72) = __p;
        *((void *)v21 + 11) = v93;
        long long __p = 0uLL;
        uint64_t v93 = 0;
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = v19;
        *std::string::size_type v18 = (uint64_t *)v21;
        if (*v97)
        {
          uint64_t v97 = (uint64_t **)*v97;
          uint64_t v21 = (char *)*v18;
        }
        sub_21677B3B0(v98, (uint64_t *)v21);
        ++v99;
      }
      if (SHIBYTE(v93) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96) < 0) {
        operator delete(*(void **)&v95[8]);
      }
      if ((v95[7] & 0x80000000) != 0) {
        operator delete(*(void **)&v94[8]);
      }
      v12 += 2;
      if (v12 == (double *)v81) {
        goto LABEL_37;
      }
    }
    *(void *)&long long v90 = "usd/clipSet.cpp";
    *((void *)&v90 + 1) = "Usd_ClipSet";
    v91.__r_.__value_.__r.__words[0] = 366;
    v91.__r_.__value_.__l.__size_ = (std::string::size_type)"pxrInternal__aapl__pxrReserved__::Usd_ClipSet::Usd_ClipSet(c"
                                                            "onst std::string &, const Usd_ClipSetDefinition &)";
    v91.__r_.__value_.__s.__data_[16] = 0;
    char v48 = v80;
    unint64_t v49 = v80;
    if (v80[23] < 0) {
      unint64_t v49 = *(const char **)v80;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v90, 3, (pxrInternal__aapl__pxrReserved__ *)"Clipset <%s> has a bad clip index", v49);
  }
  else
  {
LABEL_37:
    double v23 = operator new(0x18uLL);
    *double v23 = 0;
    v23[1] = 0;
    void v23[2] = 0;
    sub_216C51EDC(v85, (uint64_t)v23);
    if (*(unsigned char *)(a3 + 224))
    {
      uint64_t v25 = *(void *)(a3 + 184);
      if (v25)
      {
        uint64_t v26 = *(uint64_t **)(a3 + 216);
        int v27 = &v26[2 * v25];
        do
        {
          uint64_t v29 = *v26;
          uint64_t v28 = v26[1];
          uint64_t v30 = *(void ***)v85;
          unint64_t v31 = *(void *)(*(void *)v85 + 8);
          unint64_t v32 = *(void *)(*(void *)v85 + 16);
          if (v31 >= v32)
          {
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - **(void **)v85) >> 3);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - **(void **)v85) >> 3);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x555555555555555) {
              unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37) {
              int v38 = (char *)sub_216782ED8(*(void *)v85 + 16, v37);
            }
            else {
              int v38 = 0;
            }
            uint64_t v39 = &v38[24 * v34];
            *(void *)uint64_t v39 = v29;
            *((void *)v39 + 1) = v28;
            v39[16] = 0;
            uint64_t v41 = (char *)*v30;
            char v40 = (char *)v30[1];
            uint64_t v42 = v39;
            if (v40 != *v30)
            {
              do
              {
                __n128 v24 = *(__n128 *)(v40 - 24);
                *(v42 - 8) = *(v40 - 8);
                *(__n128 *)(v42 - 24) = v24;
                v42 -= 24;
                v40 -= 24;
              }
              while (v40 != v41);
              char v40 = (char *)*v30;
            }
            uint64_t v33 = v39 + 24;
            *uint64_t v30 = v42;
            v30[1] = v39 + 24;
            double v30[2] = &v38[24 * v37];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *(void *)unint64_t v31 = v29;
            *(void *)(v31 + 8) = v28;
            uint64_t v33 = (char *)(v31 + 24);
            *(unsigned char *)(v31 + 16) = 0;
          }
          v30[1] = v33;
          v26 += 2;
        }
        while (v26 != v27);
      }
    }
    uint64_t v43 = **(__n128 ***)v85;
    uint64_t v44 = *(__n128 **)(*(void *)v85 + 8);
    if (**(__n128 ***)v85 != v44)
    {
      if ((char *)v44 - (char *)v43 < 3073)
      {
        int v45 = 0;
        uint64_t v47 = 0;
      }
      else
      {
        int v45 = (__n128 *)sub_216C52020(0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3));
        uint64_t v47 = v46;
      }
      sub_216C5208C(v43, v44, (uint64_t)v94, 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)v43) >> 3), v45, v47, v24);
      if (v45) {
        operator delete(v45);
      }
      uint64_t v50 = *(__n128 ***)v85;
      double v51 = **(char ***)v85;
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v85 + 8) - **(void **)v85) >> 3) - 1;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v85 + 8) - **(void **)v85) >> 3) != 1)
      {
        unint64_t v53 = (double *)(v51 + 24);
        double v54 = *(double *)v51;
        do
        {
          double v55 = *v53;
          if (v54 == *v53)
          {
            *(v53 - 3) = v54 + -0.0000000044408921;
            *((unsigned char *)v53 - 8) = 1;
          }
          v53 += 3;
          double v54 = v55;
          --v52;
        }
        while (v52);
      }
      sub_216C4F9E0((uint64_t)v50, v51, (unint64_t)v51);
      sub_216C4F9E0(*(uint64_t *)v85, *(char **)(*(void *)v85 + 8), *(void *)(*(void *)v85 + 8) - 24);
    }
    unint64_t v56 = v97;
    uint64_t v57 = v10;
    if (v97 != &v98)
    {
      long long v58 = v97;
      do
      {
        if (v58 == v56) {
          double v59 = -1.79769313e308;
        }
        else {
          double v59 = *((double *)v58 + 4);
        }
        long long v60 = v58[1];
        long long v61 = v58;
        if (v60)
        {
          do
          {
            int v62 = (double *)v60;
            long long v60 = (uint64_t *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            int v62 = (double *)v61[2];
            BOOL v63 = *(void *)v62 == (void)v61;
            long long v61 = (uint64_t **)v62;
          }
          while (!v63);
        }
        if (v62 == (double *)&v98) {
          double v64 = 1.79769313e308;
        }
        else {
          double v64 = v62[4];
        }
        uint64_t v65 = operator new(0xD8uLL);
        pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(v65, v77, v76, v57[11].__r_.__value_.__r.__words[0], v58 + 6, v79, v85, *((double *)v58 + 5), v59, v64);
        sub_216C52E1C(&v90, (uint64_t)v65);
        sub_216C4FCA8(v78, &v90);
        if (*((void *)&v90 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v90 + 1));
        }
        long long v58 = (uint64_t **)v62;
      }
      while (v62 != (double *)&v98);
    }
    char v48 = v80;
    if (v57[9].__r_.__value_.__s.__data_[17]) {
      *((unsigned char *)v80 + 112) = v57[9].__r_.__value_.__s.__data_[16];
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v90);
    uint64_t v84 = 0;
    if (v57[4].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=((std::string *)&v90, v57 + 2);
      std::string::operator=((std::string *)&v91.__r_.__value_.__r.__words[1], v57 + 3);
    }
    else
    {
      int v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216C4DFD0();
      if ((*(void *)v66 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v66 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
      }
      pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest((pxrInternal__aapl__pxrReserved__::Usd_Clip ***)v78, v79, EmptyString, 0, (uint64_t *)v94);
      uint64_t v68 = v84;
      uint64_t v84 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v94;
      *(void *)uint64_t v94 = 0;
      sub_2168BD378((int)&v84, v68);
      sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v94);
      uint64_t v69 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v84);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v69);
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v94);
      if (v91.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v90);
      }
      long long v90 = *(_OWORD *)v94;
      v91.__r_.__value_.__r.__words[0] = *(void *)&v94[16];
      v94[23] = 0;
      v94[0] = 0;
      if (SBYTE7(__p) < 0)
      {
        operator delete((void *)v91.__r_.__value_.__l.__size_);
        *(_OWORD *)&v91.__r_.__value_.__r.__words[1] = *(_OWORD *)v95;
        *(void *)&long long __p = *(void *)&v95[16];
        v95[23] = 0;
        v95[0] = 0;
        if ((v94[23] & 0x80000000) != 0) {
          operator delete(*(void **)v94);
        }
      }
      else
      {
        *(_OWORD *)&v91.__r_.__value_.__r.__words[1] = *(_OWORD *)v95;
        *(void *)&long long __p = *(void *)&v95[16];
      }
    }
    uint64_t v70 = operator new(0xD8uLL);
    std::string::pointer data = v57[11].__r_.__value_.__l.__data_;
    int v72 = operator new(0x30uLL);
    v72[1] = 0;
    v72[2] = 0;
    void *v72 = &unk_26C75E970;
    v72[4] = 0;
    v72[5] = 0;
    v72[3] = 0;
    *(void *)uint64_t v94 = v72 + 3;
    *(void *)&v94[8] = v72;
    pxrInternal__aapl__pxrReserved__::Usd_Clip::Usd_Clip(v70, v77, v76, data, &v90, v79, v94, -1.79769313e308, -1.79769313e308, 1.79769313e308);
    sub_216C4FDC4(v75, (uint64_t)v70);
    if (*(void *)&v94[8]) {
      sub_216784EC4(*(std::__shared_weak_count **)&v94[8]);
    }
    if (v84)
    {
      pxrInternal__aapl__pxrReserved__::Usd_Clip::GetLayer(*v75, &v82);
      uint64_t v73 = v83;
      if (v83)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v83 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
        }
      }
    }
    sub_216ABB798(&v84);
    if (SBYTE7(__p) < 0) {
      operator delete((void *)v91.__r_.__value_.__l.__size_);
    }
    if (v91.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v90);
    }
    if (v86) {
      sub_216784EC4(v86);
    }
  }
LABEL_114:
  sub_216C51E70((char *)v98);
  return v48;
}

void sub_216C4F7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_216C51E70(*(char **)(v34 - 128));
  a27 = a15;
  sub_216787968((void ***)&a27);
  unint64_t v36 = *(std::__shared_weak_count **)(a17 + 80);
  if (v36) {
    sub_216784EC4(v36);
  }
  sub_21697B754(a16);
  unint64_t v37 = *(atomic_uint **)(a17 + 56);
  if (v37 && atomic_fetch_add_explicit(v37 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v37 + 8))(v37);
  }
  sub_21697B754(a11);
  int v38 = *(atomic_uint **)(a17 + 32);
  if (v38 && atomic_fetch_add_explicit(v38 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v38 + 8))(v38);
  }
  if (*(char *)(a17 + 23) < 0) {
    operator delete(*(void **)a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C4F99C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

char *sub_216C4F9E0(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unsigned int v13 = *(char **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    uint64_t v15 = __src - v13;
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 3);
    if (2 * v17 > v14) {
      unint64_t v14 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v33 = a1 + 16;
    if (v18) {
      double v19 = (char *)sub_216782ED8(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    uint64_t v22 = &v19[24 * v16];
    long long __p = v19;
    uint64_t v30 = v22;
    unint64_t v31 = v22;
    unint64_t v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = 2 * v16;
        }
        uint64_t v25 = (char *)sub_216782ED8(v8, v24);
        uint64_t v22 = &v25[24 * (v24 >> 2)];
        long long __p = v25;
        uint64_t v30 = v22;
        unint64_t v32 = &v25[24 * v26];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= 24 * (v23 >> 1);
        uint64_t v30 = v22;
      }
    }
    long long v27 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)uint64_t v22 = v27;
    unint64_t v31 = v22 + 24;
    uint64_t v4 = (char *)sub_216C52D38((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30) {
      unint64_t v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    int v9 = __src + 24;
    unint64_t v10 = v6 - 24;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(v9, __src, v6 - v9 - 7);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    v4[16] = *(unsigned char *)(v3 + 16);
    *(_OWORD *)uint64_t v4 = v20;
  }
  return v4;
}

void sub_216C4FC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_216C4FCA8(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    _OWORD v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v18[2] = v15 + 16;
    sub_216C53040(a1, v18);
    int v9 = (void *)a1[1];
    BOOL result = sub_216788028(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216C4FDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void sub_216C4FDC4(void *a1, uint64_t a2)
{
  sub_216C52E1C(&v5, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_Clip **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (*(unsigned char *)(a1 + 112)
    && ((long long v5 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(a1 + 72),
         (pxrInternal__aapl__pxrReserved__::Usd_Clip::IsBlocked(*(pxrInternal__aapl__pxrReserved__::Usd_Clip **)(a1 + 72), a3, *((double *)*a2 + 12)) & 1) != 0)|| !pxrInternal__aapl__pxrReserved__::Usd_Clip::HasAuthoredTimeSamples(*a2, a3)))
  {
    return sub_216C4FE8C(v5, a3, 0) != 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_216C4FE8C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  long long v4 = *a1;
  long long v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      long long v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216C532E4(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      long long v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_ClipSet *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  unint64_t ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(this, a3);
  unint64_t v11 = (double ****)(*((void *)this + 11) + 16 * ClipIndexForTime);
  uint64_t v12 = 16 * ClipIndexForTime;
  if (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Usd_Clip **)v11, a2))
  {
    if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::GetBracketingTimeSamplesForPath(*v11, a2, a3, a4, a5) & 1) != 0
      || (uint64_t v25 = "usd/clipSet.cpp",
          uint64_t v26 = "GetBracketingTimeSamplesForPath",
          uint64_t v27 = 527,
          uint64_t v28 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(const SdfPath &, dou"
                "ble, double *, double *) const",
          char v29 = 0,
          uint64_t v13 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "activeClip->GetBracketingTimeSamplesForPath( path, time, lower, upper)", 0) & 1) != 0))
    {
      uint64_t v13 = 1;
      if (*a4 == *a5 && *a5 < a3)
      {
LABEL_15:
        while (1)
        {
          ++ClipIndexForTime;
          uint64_t v18 = *((void *)this + 11);
          if (ClipIndexForTime >= (*((void *)this + 12) - v18) >> 4) {
            break;
          }
          uint64_t v19 = v12 + 16;
          BOOL v20 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v18 + v12 + 16), a2);
          v12 += 16;
          if (v20)
          {
            uint64_t v21 = *(void *)(*(void *)(v18 + v19) + 104);
            *(void *)a5 = v21;
            if (v13) {
              return 1;
            }
            goto LABEL_22;
          }
        }
        if (v13)
        {
          *a5 = *a4;
          return 1;
        }
        uint64_t v21 = *(void *)(*(void *)v18 + 96);
        *(void *)a5 = v21;
LABEL_22:
        *(void *)a4 = v21;
        return 1;
      }
    }
  }
  else
  {
    if (!ClipIndexForTime)
    {
LABEL_12:
      LOBYTE(v13) = 0;
      goto LABEL_15;
    }
    uint64_t v15 = v12 - 16;
    unint64_t v16 = ClipIndexForTime;
    while (1)
    {
      uint64_t v17 = *((void *)this + 11);
      if (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, (pxrInternal__aapl__pxrReserved__::Usd_Clip **)(v17 + v15), a2))
      {
        break;
      }
      v15 -= 16;
      if (!--v16) {
        goto LABEL_12;
      }
    }
    double v23 = 0.0;
    double v24 = 0.0;
    if (pxrInternal__aapl__pxrReserved__::Usd_Clip::GetBracketingTimeSamplesForPath(*(double ****)(v17 + v15), a2, a3, &v24, &v23) & 1) != 0|| (uint64_t v25 = "usd/clipSet.cpp", v26 = "GetBracketingTimeSamplesForPath", v27 = 563, v28 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetBracketingTimeSamplesForPath(const SdfPath &, double, double *, double *) const", v29 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "clip->GetBracketingTimeSamplesForPath( path, time, &tmpLower, &tmpUpper)", 0)))
    {
      *a4 = v23;
      LOBYTE(v13) = 1;
      goto LABEL_15;
    }
    return 0;
  }
  return v13;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(pxrInternal__aapl__pxrReserved__::Usd_ClipSet *this, double a2)
{
  long long v4 = (char *)*((void *)this + 11);
  long long v5 = (char *)*((void *)this + 12);
  if ((unint64_t)(v5 - v4) < 0x11)
  {
    unint64_t v11 = 0;
  }
  else
  {
    if (v5 != v4)
    {
      unint64_t v6 = (v5 - v4) >> 4;
      long long v5 = (char *)*((void *)this + 11);
      do
      {
        unint64_t v7 = v6 >> 1;
        uint64_t v8 = (uint64_t *)&v5[16 * (v6 >> 1)];
        uint64_t v10 = *v8;
        int v9 = (char *)(v8 + 2);
        v6 += ~(v6 >> 1);
        if (*(double *)(v10 + 104) > a2) {
          unint64_t v6 = v7;
        }
        else {
          long long v5 = v9;
        }
      }
      while (v6);
    }
    if (v4 != v5) {
      goto LABEL_9;
    }
    unint64_t v16 = "usd/clipSet.cpp";
    uint64_t v17 = "_FindClipIndexForTime";
    uint64_t v18 = 700;
    uint64_t v19 = "size_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(double) const";
    char v20 = 0;
    char v15 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "it != valueClips.begin()", 0);
    unint64_t v11 = 0;
    long long v4 = (char *)*((void *)this + 11);
    if (v15) {
LABEL_9:
    }
      unint64_t v11 = ((v5 - v4) >> 4) - 1;
  }
  if (v11 < (uint64_t)(*((void *)this + 12) - (void)v4) >> 4)
  {
    uint64_t v12 = *(void *)&v4[16 * v11];
    if (*(double *)(v12 + 104) <= a2 && *(double *)(v12 + 112) > a2) {
      return v11;
    }
  }
  unint64_t v16 = "usd/clipSet.cpp";
  uint64_t v17 = "_FindClipIndexForTime";
  uint64_t v18 = 714;
  uint64_t v19 = "size_t pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(double) const";
  char v20 = 0;
  int v14 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "clipIndex < valueClips.size() && time >= valueClips[clipIndex]->startTime && time < valueClips[clipIndex]->endTime", 0);
  uint64_t result = 0;
  if (v14) {
    return v11;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipSet::ListTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_ClipSet *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  a3[2] = 0;
  a3[1] = 0;
  *a3 = (uint64_t)(a3 + 1);
  long long v5 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)*((void *)this + 11);
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_Clip **)*((void *)this + 12);
  if (v5 == v6) {
    goto LABEL_6;
  }
  do
  {
    if (pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue((uint64_t)this, v5, a2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath(*v5, a2, (uint64_t)&v8);
      sub_216A9C700(a3, v8, v9);
      sub_2167FB780((uint64_t)&v8, *(void **)&v9[0]);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if (!a3[2]) {
LABEL_6:
  }
    sub_21708827C((uint64_t **)a3, (double *)(**((void **)this + 11) + 96), (uint64_t *)(**((void **)this + 11) + 96));
}

void sub_216C503B4(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_ClipSet::GetTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 88);
  int v9 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 96);
  if (v8 != v9)
  {
    while (1)
    {
      double v10 = *((double *)*v8 + 13);
      double v11 = *(double *)(a3 + 16);
      if (*(unsigned char *)(a3 + 24))
      {
        if (v10 > v11) {
          goto LABEL_36;
        }
      }
      else if (v10 > v11)
      {
        goto LABEL_36;
      }
      uint64_t v12 = (void *)*((void *)*v8 + 14);
      uint64_t v45 = *((void *)*v8 + 13);
      LOBYTE(v46[0]) = fabs(v10) != INFINITY;
      v46[1] = v12;
      char v47 = 0;
      if (!sub_2168A5C70((long long *)a3, (uint64_t)&v45)
        || !pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue(a2, v8, a1))
      {
        goto LABEL_35;
      }
      pxrInternal__aapl__pxrReserved__::Usd_Clip::ListTimeSamplesForPath(*v8, a1, (uint64_t)&v45);
      double v13 = *(double *)a3;
      int v14 = v46[0];
      if (*(unsigned char *)(a3 + 8))
      {
        if (v46[0])
        {
          char v15 = v46;
          unint64_t v16 = v46[0];
          do
          {
            uint64_t v17 = v16 + 1;
            if (*((double *)v16 + 4) >= v13)
            {
              uint64_t v17 = v16;
              char v15 = v16;
            }
            unint64_t v16 = (void *)*v17;
          }
          while (*v17);
          goto LABEL_22;
        }
      }
      else if (v46[0])
      {
        char v15 = v46;
        uint64_t v18 = v46[0];
        do
        {
          uint64_t v19 = v18 + 1;
          if (v13 < *((double *)v18 + 4))
          {
            uint64_t v19 = v18;
            char v15 = v18;
          }
          uint64_t v18 = (void *)*v19;
        }
        while (*v19);
        goto LABEL_22;
      }
      char v15 = v46;
LABEL_22:
      double v20 = *(double *)(a3 + 16);
      uint64_t v21 = v46;
      if (*(unsigned char *)(a3 + 24))
      {
        if (v46[0])
        {
          uint64_t v21 = v46;
          do
          {
            uint64_t v22 = v14 + 1;
            if (v20 < *((double *)v14 + 4))
            {
              uint64_t v22 = v14;
              uint64_t v21 = v14;
            }
            int v14 = (void *)*v22;
          }
          while (*v22);
        }
      }
      else if (v46[0])
      {
        uint64_t v21 = v46;
        do
        {
          double v23 = v14 + 1;
          if (*((double *)v14 + 4) >= v20)
          {
            double v23 = v14;
            uint64_t v21 = v14;
          }
          int v14 = (void *)*v23;
        }
        while (*v23);
      }
      sub_216C50B28(a4, *(char **)(a4 + 8), v15, v21);
      sub_2167FB780((uint64_t)&v45, v46[0]);
LABEL_35:
      v8 += 2;
      if (v8 == v9)
      {
LABEL_36:
        if (*(void *)a4 == *(void *)(a4 + 8)) {
          break;
        }
        return;
      }
    }
  }
  double v24 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 88);
  uint64_t v25 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 96);
  if (v24 != v25)
  {
    do
    {
      BOOL v26 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_ClipContributesValue(a2, v24, a1);
      v24 += 2;
      int v27 = v24 == v25 || v26;
    }
    while (v27 != 1);
    if (v26) {
      return;
    }
    double v24 = *(pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(a2 + 88);
  }
  uint64_t v28 = *v24;
  double v29 = *((double *)*v24 + 12);
  if (*(double *)a3 < v29 || (*(double *)a3 == v29 ? (BOOL v30 = *(unsigned char *)(a3 + 8) == 0) : (BOOL v30 = 1), !v30))
  {
    double v31 = *(double *)(a3 + 16);
    if (v31 > v29 || (v31 == v29 ? (BOOL v32 = *(unsigned char *)(a3 + 24) == 0) : (BOOL v32 = 1), !v32))
    {
      unint64_t v33 = *(void *)(a4 + 16);
      uint64_t v34 = *(double **)(a4 + 8);
      if ((unint64_t)v34 >= v33)
      {
        unint64_t v36 = *(double **)a4;
        uint64_t v37 = ((uint64_t)v34 - *(void *)a4) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v39 = v33 - (void)v36;
        if (v39 >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          uint64_t v41 = (char *)sub_21677CB28(a4 + 16, v40);
          unint64_t v36 = *(double **)a4;
          uint64_t v34 = *(double **)(a4 + 8);
          double v29 = *((double *)v28 + 12);
        }
        else
        {
          uint64_t v41 = 0;
        }
        uint64_t v42 = (double *)&v41[8 * v37];
        uint64_t v43 = &v41[8 * v40];
        *uint64_t v42 = v29;
        unint64_t v35 = v42 + 1;
        while (v34 != v36)
        {
          uint64_t v44 = *((void *)v34-- - 1);
          *((void *)v42-- - 1) = v44;
        }
        *(void *)a4 = v42;
        *(void *)(a4 + 8) = v35;
        *(void *)(a4 + 16) = v43;
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        double *v34 = v29;
        unint64_t v35 = v34 + 1;
      }
      *(void *)(a4 + 8) = v35;
    }
  }
}

void sub_216C506F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C50734(uint64_t a1, uint64_t a2)
{
  long long v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_21677CA50((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  return a1;
}

void sub_216C50788(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *sub_216C5079C(atomic_ullong *a1)
{
  uint64_t result = sub_216C507E4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::~UsdClipsAPIInfoKeys_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *sub_216C507E4()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::UsdClipsAPIInfoKeys_StaticTokenType(v0);
  return v0;
}

void sub_216C50814(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_216C50828(uint64_t **a1, double *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        long long v5 = (uint64_t *)*v5;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = operator new(0x30uLL);
    double v11 = *(double *)(a3 + 8);
    v10[4] = *(void *)a3;
    *((_DWORD *)v10 + 1sub_216C01044((uint64_t *)this, 0) = (int)v11;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

double *sub_216C508EC(uint64_t a1, double *a2, double *a3, _DWORD *a4)
{
  if (*a2 == 0.0) {
    double v8 = 0.0;
  }
  else {
    double v8 = *a2;
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      double v4 = v8;
      if (*(void *)&v8 >= v9) {
        *(void *)&double v4 = *(void *)&v8 % v9;
      }
    }
    else
    {
      *(void *)&double v4 = (v9 - 1) & *(void *)&v8;
    }
    double v11 = *(void ***)(*(void *)a1 + 8 * *(void *)&v4);
    if (v11)
    {
      uint64_t v12 = (double *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == *(void *)&v8)
          {
            if (v12[2] == *a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != *(void *)&v4) {
              break;
            }
          }
          uint64_t v12 = *(double **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = (double *)operator new(0x20uLL);
  double *v12 = 0.0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (*(void *)&v8 >= v9) {
        *(void *)&double v4 = *(void *)&v8 % v9;
      }
      else {
        double v4 = v8;
      }
    }
    else
    {
      *(void *)&double v4 = (v9 - 1) & *(void *)&v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(double ***)(*(void *)a1 + 8 * *(void *)&v4);
  if (v21)
  {
    *(void *)uint64_t v12 = *v21;
LABEL_41:
    *uint64_t v21 = v12;
    goto LABEL_42;
  }
  double *v12 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * *(void *)&v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (double **)(*(void *)a1 + 8 * v22);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_216C50B14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216C50B28(uint64_t a1, char *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    long long v5 = a3;
    do
    {
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          double v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          double v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      long long v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_216C50B80(a1, a2, a3, a4, v4);
}

char *sub_216C50B80(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5)
{
  long long v5 = a2;
  if (a5 >= 1)
  {
    double v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      long long __p = a3;
      sub_21680F304((void **)&__p, a5);
      uint64_t v20 = *(char **)(a1 + 8);
      uint64_t v21 = v20 - v5;
      if (a5 > (v20 - v5) >> 3)
      {
        long long __p = v7;
        sub_21680F304((void **)&__p, v21 >> 3);
        sub_216932018(a1, __p, a4);
        if (v21 < 1) {
          return v5;
        }
        uint64_t v20 = *(char **)(a1 + 8);
      }
      unint64_t v22 = &v5[8 * a5];
      double v23 = &v20[-8 * a5];
      double v24 = v20;
      if ((unint64_t)v23 < v12)
      {
        double v24 = v20;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)double v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(void *)(a1 + 8) = v24;
      if (v20 != v22) {
        memmove(&v20[-8 * ((v20 - v22) >> 3)], v5, v20 - v22);
      }
      sub_216C50E98(v7, __p, v5);
    }
    else
    {
      unint64_t v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = (a2 - v13) >> 3;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v36 = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      BOOL v26 = &v18[8 * v15];
      long long __p = v18;
      unint64_t v33 = v26;
      unint64_t v35 = &v18[8 * v17];
      int v27 = &v26[8 * a5];
      do
      {
        *(void *)BOOL v26 = v7[4];
        v26 += 8;
        uint64_t v28 = (void *)v7[1];
        if (v28)
        {
          do
          {
            double v29 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            double v29 = (void *)v7[2];
            BOOL v30 = *v29 == (void)v7;
            double v7 = v29;
          }
          while (!v30);
        }
        double v7 = v29;
      }
      while (v26 != v27);
      uint64_t v34 = v27;
      long long v5 = sub_216C50DD0((void **)a1, (uint64_t)&__p, v5);
      if (v34 != v33) {
        v34 += (v33 - v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_216C50D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216C50DD0(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  double v7 = v5;
  if (*a1 != __src)
  {
    BOOL v8 = __src;
    double v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    double v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_216C50E98(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    do
    {
      *a3 = result[4];
      uint64_t v3 = (void *)result[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)result[2];
          BOOL v5 = *v4 == (void)result;
          uint64_t result = v4;
        }
        while (!v5);
      }
      ++a3;
      uint64_t result = v4;
    }
    while (v4 != a2);
    return a2;
  }
  return result;
}

__n128 sub_216C50EF8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75E688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216C50F44(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75E688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216C50F74(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(void *)(v5 + 8))
    {
      if (*(unsigned char *)(sub_216850B68((uint64_t *)(v5 + 8)) + 14)) {
        unint64_t v6 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)v5;
      }
      else {
        unint64_t v6 = 0;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    uint64_t v16 = 0;
    int v15 = 0;
    double v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(*(uint64_t **)(a1 + 8));
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v7, this);
    if ((result & 1) == 0)
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v6, this);
      if (result == 1)
      {
        BOOL v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v8) {
          BOOL v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v18 = (int *)&v16;
        size_t v19 = &stru_26C74C2C0;
        __int16 v20 = 0;
        unint64_t v17 = (uint64_t (**)(void, uint64_t))&unk_26C758B08;
        uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 448), &v17);
        if ((_BYTE)v20) {
          int v9 = 0;
        }
        else {
          int v9 = result;
        }
        if (v9 == 1)
        {
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v10) {
            uint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          unint64_t v18 = &v15;
          size_t v19 = &stru_26C756E50;
          __int16 v20 = 0;
          unint64_t v17 = (uint64_t (**)(void, uint64_t))&unk_26C75E6F8;
          uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 464), &v17);
          if ((_BYTE)v20) {
            int v11 = 0;
          }
          else {
            int v11 = result;
          }
          if (v11 == 1)
          {
            int64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(*(uint64_t **)(a1 + 16));
            uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v12, this);
            if (result)
            {
              sub_216ABBA60((uint64_t *)&v17, *(uint64_t **)(a1 + 8));
              Schema = (atomic_ullong ***)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v6);
              uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
              pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer((uint64_t)&v17, this, (uint64_t)&Type, v15, 0);
              uint64_t result = (uint64_t)v18;
              if (v18)
              {
                if (atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
                }
              }
            }
          }
        }
      }
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_216C511A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C51218(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75E720)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C51258()
{
  return &unk_26C75E720;
}

uint64_t sub_216C51264(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_2169DC5C4(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    **(_DWORD **)(a1 + 8) = *(_DWORD *)v2;
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(v2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C512E8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169DC5C4(a2))
  {
    **(_DWORD **)(a1 + 8) = sub_216C51350(a2);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C51350(void *a1)
{
  uint64_t v2 = sub_216C513A8(a1);
  uint64_t v3 = *v2;
  _DWORD *v2 = 0;
  uint64_t v4 = a1[1];
  if (v4) {
    BOOL v5 = (a1[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  a1[1] = 0;
  return v3;
}

void *sub_216C513A8(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

void sub_216C51438(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216C514D0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216C514D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

__n128 sub_216C51528(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C75E740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216C5157C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75E740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216C515B4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
  {
    __int16 v20 = 0;
    uint64_t v21 = 0;
    long long __p = 0;
    uint64_t v4 = **(void **)(a1 + 8);
    if (*(void *)(*(void *)(a1 + 8) + 8) != v4)
    {
      unint64_t v5 = 0;
      do
      {
        unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)(v4 + 16 * v5));
        if (!pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(v6, this))
        {
          uint64_t v7 = ***(void ***)(a1 + 16);
          BOOL v8 = v20;
          if (v20 >= v21)
          {
            uint64_t v10 = (char *)__p;
            uint64_t v11 = (v20 - (unsigned char *)__p) >> 3;
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v13 = v21 - (unsigned char *)__p;
            if ((v21 - (unsigned char *)__p) >> 2 > v12) {
              unint64_t v12 = v13 >> 2;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              int v15 = (char *)sub_21677CB28((uint64_t)&v21, v14);
              uint64_t v10 = (char *)__p;
              BOOL v8 = v20;
            }
            else
            {
              int v15 = 0;
            }
            uint64_t v16 = &v15[8 * v11];
            *(void *)uint64_t v16 = *(void *)(v7 + 8 * v5);
            int v9 = v16 + 8;
            while (v8 != v10)
            {
              uint64_t v17 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v16 - 1) = v17;
              v16 -= 8;
            }
            long long __p = v16;
            __int16 v20 = v9;
            uint64_t v21 = &v15[8 * v14];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *(void *)__int16 v20 = *(void *)(v7 + 8 * v5);
            int v9 = v8 + 8;
          }
          __int16 v20 = v9;
        }
        ++v5;
        uint64_t v4 = **(void **)(a1 + 8);
      }
      while (v5 < (*(void *)(*(void *)(a1 + 8) + 8) - v4) >> 4);
      unint64_t v18 = (char *)__p;
      if (__p != v20)
      {
        sub_216C517B4(*(uint64_t **)(a1 + 24), this, (uint64_t)&__p);
        unint64_t v18 = (char *)__p;
      }
      if (v18)
      {
        __int16 v20 = v18;
        operator delete(v18);
      }
    }
  }
}

void sub_216C51744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C51768(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75E7A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216C517A8()
{
  return &unk_26C75E7A0;
}

uint64_t sub_216C517B4(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 5;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      int v15 = (char *)sub_2168707F4(v6, v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v17 = v15;
    unint64_t v18 = &v15[32 * v11];
    __int16 v20 = &v15[32 * v14];
    sub_216C518C8((uint64_t)v18, a2, a3);
    size_t v19 = v18 + 32;
    sub_216C5192C(a1, &v17);
    uint64_t v10 = a1[1];
    sub_216C51B30(&v17);
  }
  else
  {
    sub_216C518C8(*(void *)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 32;
    a1[1] = v9 + 32;
  }
  a1[1] = v10;
  return v10 - 32;
}

void sub_216C518B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C51B30((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C518C8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)(a1 + 24) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return a1;
}

uint64_t sub_216C5192C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C519A4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C519A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216C51A4C(v7 - 32, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216C51AA4((uint64_t)v12);
  return v10;
}

uint64_t sub_216C51A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sub_216C51AA4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216C51ADC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216C51ADC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216C514D0(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216C51B30(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216C51B64(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 32;
      uint64_t result = sub_216C514D0(v4, v1 - 32);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216C51BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    BOOL v4 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    (*(void (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = (char *)&off_26C75B258 + 3;
  return 1;
}

uint64_t sub_216C51C04(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = sub_216A5F85C(a2);
  if (v3)
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
  }
  return v3;
}

void *sub_216C51C54(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75E808;
  v4[1] = 0;
  void v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216C51CAC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_216C51D70(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C51CCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C51CF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_216C51D70(v1);
    operator delete(v2);
  }
}

uint64_t sub_216C51D2C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75E858)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216C51D70(uint64_t a1)
{
  uint64_t v6 = (void **)(a1 + 88);
  sub_216787968(&v6);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_21697C414((_DWORD *)(a1 + 64));
  uint64_t v3 = *(atomic_uint **)(a1 + 56);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  uint64_t v4 = *(atomic_uint **)(a1 + 32);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216C51E70(char *a1)
{
  if (a1)
  {
    sub_216C51E70(*(void *)a1);
    sub_216C51E70(*((void *)a1 + 1));
    if (a1[95] < 0) {
      operator delete(*((void **)a1 + 9));
    }
    if (a1[71] < 0) {
      operator delete(*((void **)a1 + 6));
    }
    operator delete(a1);
  }
}

void *sub_216C51EDC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75E880;
  v4[1] = 0;
  void v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216C51F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_216C51FD4((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C51F60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C51F88(uint64_t a1)
{
}

uint64_t sub_216C51F90(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75E8D0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216C51FD4(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v3 = *__p;
    if (*__p)
    {
      __p[1] = v3;
      operator delete(v3);
    }
    operator delete(__p);
  }
}

void *sub_216C52020(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x555555555555555) {
    unint64_t v1 = 0x555555555555555;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(24 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double sub_216C5208C(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v9 = (__n128 *)((char *)a2 - 24);
      a7.n128_u64[0] = a2[-2].n128_u64[1];
      if (a7.n128_f64[0] < a1->n128_f64[0])
      {
        a7 = *a1;
        unint64_t v10 = a1[1].n128_u64[0];
        unsigned __int8 v11 = a2[-1].n128_u8[8];
        *a1 = *v9;
        a1[1].n128_u8[0] = v11;
        a2[-1].n128_u8[8] = v10;
        __n128 *v9 = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v16 = a4 >> 1;
      uint64_t v17 = (__n128 *)((char *)a1 + 24 * (a4 >> 1));
      unint64_t v18 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v20.n128_f64[0] = sub_216C52318(a1, v17, a3, v18, (uint64_t)a5, a7);
        sub_216C52318((__n128 *)((char *)a1 + 24 * (a4 >> 1)), a2, a3, a4 - (a4 >> 1), (uint64_t)a5 + 24 * v16, v20);
        a7.n128_u64[0] = sub_216C5249C(a5, (__n128 *)((char *)a5 + 24 * v16), (__n128 *)((char *)a5 + 24 * v16), (__n128 *)((char *)a5 + 24 * a4), a1).n128_u64[0];
      }
      else
      {
        sub_216C5208C(a1, v17, a3, v18, a5, a6);
        sub_216C5208C((char *)a1 + 24 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_216C52548(a1->n128_f64, &a1->n128_f64[3 * (a4 >> 1)], a2->n128_f64, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v19).n128_u64[0];
      }
    }
    else
    {
      sub_216C52270((uint64_t)a1, a2->n128_f64);
    }
  }
  return a7.n128_f64[0];
}

uint64_t sub_216C52270(uint64_t result, double *a2)
{
  if ((double *)result != a2)
  {
    uint64_t v2 = (double *)(result + 24);
    if ((double *)(result + 24) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        double v6 = *v2;
        if (*v2 < *(double *)v4)
        {
          long long v10 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(unsigned char *)(v8 + 4sub_216C01044((uint64_t *)this, 0) = *(unsigned char *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v6 >= *(double *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(double *)uint64_t v9 = v6;
          *(void *)(v9 + 8) = v10;
          *(unsigned char *)(v9 + 16) = BYTE8(v10);
        }
        uint64_t v2 = v5 + 3;
        v3 += 24;
        uint64_t v4 = (uint64_t)v5;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

double sub_216C52318(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      long long v10 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_f64[1] >= a1->n128_f64[0])
      {
        __n128 v14 = *a1;
        *(void *)(a5 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a5 = v14;
        a6 = *v10;
        unint64_t v12 = a2[-1].n128_u64[1];
      }
      else
      {
        __n128 v11 = *v10;
        *(void *)(a5 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a5 = v11;
        a6 = *a1;
        unint64_t v12 = a1[1].n128_u64[0];
      }
      *(void *)(a5 + 4sub_216C01044((uint64_t *)this, 0) = v12;
      *(__n128 *)(a5 + 24) = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *(void *)(a5 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a5 = a6;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_216C5208C(a1, (char *)a1 + 24 * (a4 >> 1), a3, a4 >> 1, a5, a4 >> 1);
      sub_216C5208C((char *)a1 + 24 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), a5 + 24 * (a4 >> 1), a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_216C528F0(a1, (__n128 *)((char *)a1 + 24 * (a4 >> 1)), (__n128 *)((char *)a1 + 24 * (a4 >> 1)), a2, (__n128 *)a5).n128_u64[0];
    }
    else
    {
      sub_216C52820((long long *)a1, (long long *)a2, a5);
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_216C5249C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *a3;
        a5[1].n128_u8[0] = a3[1].n128_u8[0];
        *a5 = result;
        a5 = (__n128 *)((char *)a5 + 24);
        a3 = (__n128 *)((char *)a3 + 24);
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f64[0] >= a1->n128_f64[0])
    {
      __n128 result = *a1;
      a5[1].n128_u8[0] = a1[1].n128_u8[0];
      *a5 = result;
      a1 = (__n128 *)((char *)a1 + 24);
    }
    else
    {
      __n128 result = *a3;
      a5[1].n128_u8[0] = a3[1].n128_u8[0];
      *a5 = result;
      a3 = (__n128 *)((char *)a3 + 24);
    }
    a5 = (__n128 *)((char *)a5 + 24);
  }
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (__n128 *)((char *)a5 + v6);
      __n128 result = *(__n128 *)((char *)a1 + v6);
      v7[1].n128_u8[0] = a1[1].n128_u8[v6];
      __n128 *v7 = result;
      v6 += 24;
    }
    while ((__n128 *)((char *)a1 + v6) != a2);
  }
  return result;
}

__n128 sub_216C52548(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (a6)
  {
    uint64_t v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v13 = 0;
      result.n128_f64[0] = *a2;
      uint64_t v14 = -a5;
      while (result.n128_f64[0] >= a1[v13 / 8])
      {
        v13 += 24;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v14;
      uint64_t v42 = a3;
      uint64_t v43 = a8;
      uint64_t v41 = &a1[v13 / 8];
      if (-v14 >= v10)
      {
        if (v14 == -1)
        {
          uint64_t v39 = &a1[v13 / 8];
          double v47 = a1[v13 / 8 + 2];
          __n128 v46 = *(__n128 *)&a1[v13 / 8];
          long long v40 = *(_OWORD *)a2;
          *((unsigned char *)v39 + 16) = *((unsigned char *)a2 + 16);
          *(_OWORD *)uint64_t v39 = v40;
          __n128 result = v46;
          *(__n128 *)a2 = v46;
          *((unsigned char *)a2 + 16) = LOBYTE(v47);
          return result;
        }
        if (v14 > 0) {
          uint64_t v16 = 1 - v14;
        }
        uint64_t v26 = v16 >> 1;
        __n128 v20 = (char *)&a1[3 * (v16 >> 1) + v13 / 8];
        __n128 v19 = (long long *)a2;
        if (a2 != a3)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          __n128 v19 = (long long *)a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            double v29 = (double *)v19 + 3 * (v27 >> 1);
            double v31 = *v29;
            BOOL v30 = (long long *)(v29 + 3);
            v27 += ~(v27 >> 1);
            if (v31 < *(double *)v20) {
              __n128 v19 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)a2) >> 3);
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v17 = v10;
        }
        else {
          uint64_t v17 = v10 + 1;
        }
        uint64_t v18 = v17 >> 1;
        __n128 v19 = (long long *)&a2[3 * (v17 >> 1)];
        __n128 v20 = (char *)a2;
        if ((char *)a2 - (char *)a1 != v13)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v13) >> 3);
          __n128 v20 = (char *)&a1[v13 / 8];
          do
          {
            unint64_t v22 = v21 >> 1;
            double v23 = (double *)&v20[24 * (v21 >> 1)];
            double v25 = *v23;
            double v24 = (char *)(v23 + 3);
            v21 += ~(v21 >> 1);
            if (*(double *)v19 < v25) {
              unint64_t v21 = v22;
            }
            else {
              __n128 v20 = v24;
            }
          }
          while (v21);
        }
        uint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (char *)a1 - v13) >> 3);
      }
      a5 = -v26 - v14;
      uint64_t v32 = v10 - v18;
      uint64_t v33 = v26;
      uint64_t v34 = sub_216C52B00(v20, (long long *)a2, v19);
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      if (v35 + v18 >= v10 - (v35 + v18) - v14)
      {
        uint64_t v38 = v35;
        sub_216C52548(v34, v19, v42, a4, a5, v10 - v18, a7, v43);
        a2 = (double *)v20;
        uint64_t v32 = v18;
        a8 = v43;
        a5 = v38;
        a3 = (double *)v36;
        a1 = v41;
      }
      else
      {
        uint64_t v37 = v18;
        a8 = v43;
        sub_216C52548(&a1[v13 / 8], v20, v34, a4, v35, v37, a7, v43);
        a1 = (double *)v36;
        a2 = (double *)v19;
        a3 = v42;
      }
      uint64_t v10 = v32;
      if (!v32) {
        return result;
      }
    }
    sub_216C5299C(a1, a2, a3, a4, a5, v10, a7);
  }
  return result;
}

long long *sub_216C52820(long long *result, long long *a2, uint64_t a3)
{
  if (result != a2)
  {
    long long v3 = *result;
    *(void *)(a3 + 16) = *((void *)result + 2);
    *(_OWORD *)a3 = v3;
    uint64_t v4 = (long long *)((char *)result + 24);
    if ((long long *)((char *)result + 24) != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a3;
      uint64_t v7 = a3;
      do
      {
        double v8 = *(double *)v7;
        v7 += 24;
        if (*(double *)v4 >= v8)
        {
          long long v12 = *v4;
          *(void *)(v7 + 16) = *((void *)v4 + 2);
          *(_OWORD *)uint64_t v7 = v12;
        }
        else
        {
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          *(void *)(v7 + 16) = *(void *)(v6 + 16);
          uint64_t v9 = a3;
          if (v6 != a3)
          {
            uint64_t v10 = v5;
            while (1)
            {
              uint64_t v9 = a3 + v10;
              if (*(double *)v4 >= *(double *)(a3 + v10 - 24)) {
                break;
              }
              *(_OWORD *)uint64_t v9 = *(_OWORD *)(a3 + v10 - 24);
              *(unsigned char *)(v9 + 16) = *(unsigned char *)(a3 + v10 - 8);
              v10 -= 24;
              if (!v10)
              {
                uint64_t v9 = a3;
                break;
              }
            }
          }
          long long v11 = *v4;
          *(unsigned char *)(v9 + 16) = *((unsigned char *)v4 + 16);
          *(_OWORD *)uint64_t v9 = v11;
        }
        uint64_t v4 = (long long *)((char *)v4 + 24);
        v5 += 24;
        uint64_t v6 = v7;
      }
      while (v4 != a2);
    }
  }
  return result;
}

__n128 sub_216C528F0(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 result = *a3;
        a5[1].n128_u64[0] = a3[1].n128_u64[0];
        *a5 = result;
        a5 = (__n128 *)((char *)a5 + 24);
        a3 = (__n128 *)((char *)a3 + 24);
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f64[0] >= a1->n128_f64[0])
    {
      __n128 result = *a1;
      a5[1].n128_u64[0] = a1[1].n128_u64[0];
      *a5 = result;
      a1 = (__n128 *)((char *)a1 + 24);
    }
    else
    {
      __n128 result = *a3;
      a5[1].n128_u64[0] = a3[1].n128_u64[0];
      *a5 = result;
      a3 = (__n128 *)((char *)a3 + 24);
    }
    a5 = (__n128 *)((char *)a5 + 24);
  }
  if (a1 != a2)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (__n128 *)((char *)a5 + v6);
      __n128 result = *(__n128 *)((char *)a1 + v6);
      v7[1].n128_u64[0] = a1[1].n128_u64[v6 / 8];
      __n128 *v7 = result;
      v6 += 24;
    }
    while ((__n128 *)((char *)a1 + v6) != a2);
  }
  return result;
}

double *sub_216C5299C(double *result, double *a2, double *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = &__src[v17 * 8];
        long long v19 = *(_OWORD *)&result[v17];
        *((double *)v18 + 2) = result[v17 + 2];
        *(_OWORD *)uint64_t v18 = v19;
        v17 += 3;
      }
      while (&result[v17] != a2);
      if (v17 * 8)
      {
        __n128 v20 = __src;
        while (a2 != a3)
        {
          if (*a2 >= *(double *)v20)
          {
            long long v22 = *(_OWORD *)v20;
            *((unsigned char *)result + 16) = v20[16];
            *(_OWORD *)__n128 result = v22;
            v20 += 24;
          }
          else
          {
            long long v21 = *(_OWORD *)a2;
            *((unsigned char *)result + 16) = *((unsigned char *)a2 + 16);
            *(_OWORD *)__n128 result = v21;
            a2 += 3;
          }
          result += 3;
          if (&__src[v17 * 8] == v20) {
            return result;
          }
        }
        return (double *)memmove(result, v20, __src - v20 + v17 * 8 - 7);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      double v8 = &__src[v7 * 8];
      long long v9 = *(_OWORD *)&a2[v7];
      *((double *)v8 + 2) = a2[v7 + 2];
      *(_OWORD *)double v8 = v9;
      v7 += 3;
    }
    while (&a2[v7] != a3);
    if (v7 * 8)
    {
      uint64_t v10 = (double *)&__src[v7 * 8];
      long long v11 = a3 - 3;
      while (a2 != result)
      {
        double v12 = *(v10 - 3);
        double v13 = *(a2 - 3);
        BOOL v14 = v12 < v13;
        if (v12 >= v13) {
          long long v15 = (char *)(v10 - 3);
        }
        else {
          long long v15 = (char *)(a2 - 3);
        }
        if (v12 < v13) {
          a2 -= 3;
        }
        long long v16 = *(_OWORD *)v15;
        if (!v14) {
          v10 -= 3;
        }
        *((unsigned char *)v11 + 16) = v15[16];
        *(_OWORD *)long long v11 = v16;
        v11 -= 3;
        if (v10 == (double *)__src) {
          return result;
        }
      }
      uint64_t v23 = 0;
      do
      {
        double v24 = &v11[v23];
        long long v25 = *(_OWORD *)&v10[v23 - 3];
        *((unsigned char *)v24 + 16) = LOBYTE(v10[v23 - 1]);
        *(_OWORD *)double v24 = v25;
        v23 -= 3;
      }
      while (&v10[v23] != (double *)__src);
    }
  }
  return result;
}

long long *sub_216C52B00(char *__src, long long *a2, long long *a3)
{
  long long v3 = a3;
  if (__src != (char *)a2)
  {
    if (a2 == a3)
    {
      return (long long *)__src;
    }
    else if (__src + 24 == (char *)a2)
    {
      long long v7 = *(_OWORD *)__src;
      uint64_t v9 = *((void *)__src + 2);
      int64_t v5 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2 - 7);
      long long v3 = (long long *)&__src[v5];
      long long *v3 = v7;
      *((unsigned char *)v3 + 16) = v9;
    }
    else if ((long long *)((char *)a2 + 24) == a3)
    {
      long long v3 = (long long *)(__src + 24);
      long long v8 = *(long long *)((char *)a3 - 24);
      uint64_t v10 = *((void *)a3 - 1);
      if ((char *)a3 - 24 != __src) {
        memmove(__src + 24, __src, (char *)a3 - 24 - __src - 7);
      }
      *(_OWORD *)__src = v8;
      __src[16] = v10;
    }
    else
    {
      return sub_216C52C00((long long *)__src, a2, a3);
    }
  }
  return v3;
}

long long *sub_216C52C00(long long *a1, long long *a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = (long long *)((char *)a1 + 24);
      int64_t v5 = (long long *)((char *)a2 + 24);
      do
      {
        long long v6 = *(long long *)((char *)v4 - 24);
        uint64_t v7 = *((void *)v4 - 1);
        char v8 = *((unsigned char *)v5 - 8);
        *(long long *)((char *)v4 - 24) = *(long long *)((char *)v5 - 24);
        *((unsigned char *)v4 - 8) = v8;
        *((unsigned char *)v5 - 8) = v7;
        *(long long *)((char *)v5 - 24) = v6;
        if (v4 == a2) {
          break;
        }
        uint64_t v4 = (long long *)((char *)v4 + 24);
        BOOL v9 = v5 == a3;
        int64_t v5 = (long long *)((char *)v5 + 24);
      }
      while (!v9);
    }
  }
  else
  {
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      uint64_t v12 = v11;
      unint64_t v11 = v10;
      uint64_t v10 = v12 % v10;
    }
    while (v10);
    if (v11)
    {
      double v13 = (long long *)((char *)a1 + 24 * v11);
      do
      {
        long long v14 = *(long long *)((char *)v13 - 24);
        uint64_t v15 = *((void *)v13 - 1);
        double v13 = (long long *)((char *)v13 - 24);
        long long v26 = v14;
        char v27 = v15;
        long long v16 = (long long *)((char *)v13 + 8 * (((char *)a2 - (char *)a1) >> 3));
        uint64_t v17 = v13;
        do
        {
          uint64_t v18 = v16;
          long long v19 = *v16;
          *((unsigned char *)v17 + 16) = *((unsigned char *)v16 + 16);
          long long *v17 = v19;
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v16) >> 3);
          long long v16 = (long long *)((char *)v16 + 8 * (((char *)a2 - (char *)a1) >> 3));
          BOOL v21 = __OFSUB__(v3, v20);
          uint64_t v23 = v3 - v20;
          char v22 = (v23 < 0) ^ v21;
          double v24 = (long long *)((char *)a1 + 24 * v23);
          if (!v22) {
            long long v16 = v24;
          }
          uint64_t v17 = v18;
        }
        while (v16 != v13);
        *((unsigned char *)v18 + 16) = v27;
        *uint64_t v18 = v26;
      }
      while (v13 != a1);
    }
    return (long long *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }
  return a2;
}

void *sub_216C52D38(void **a1, uint64_t a2, char *__src)
{
  int64_t v5 = *(void **)(a2 + 8);
  long long v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    char v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 24);
      uint64_t v7 = (void *)(v9 - 24);
      *(unsigned char *)(v9 - 8) = *(v8 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - 7);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  long long v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  long long v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_216C52E1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C75E8F8;
  v4[1] = 0;
  void v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216C52E74(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v3 = (void *)sub_216C52F38(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C52E94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C52EBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_216C52F38(v1);
    operator delete(v2);
  }
}

uint64_t sub_216C52EF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75E948)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216C52F38(uint64_t a1)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 208));
  std::mutex::~mutex((std::mutex *)(a1 + 144));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 92));
  sub_21697C414((_DWORD *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  unint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v4 = *(atomic_uint **)(a1 + 8);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sub_216C53040(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C530B8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216C530B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216C5314C((uint64_t)v12);
  return v10;
}

uint64_t sub_216C5314C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void sub_216C53184(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C75E970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216C531A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C75E970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216C531E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_216C53204(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v11);
  uint64_t v6 = sub_216AA5ECC((uint64_t *)&v11);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v10);
  uint64_t v7 = sub_216A5B7B0((uint64_t *)(v6 + 112));
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 144))(v7, &v10, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  sub_216ABB798(&v11);
  return v8;
}

void sub_216C532BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C532E4(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216C533B0(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216C53388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216C533B0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))MEMORY[0x263F8C258];
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C772360;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

void pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  v255 = 0;
  unint64_t v256 = 0;
  v254 = (uint64_t *)&v255;
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&__dst, a1, 1);
  uint64_t v237 = a3;
  uint64_t v238 = a2;
  while (1)
  {
    BOOL v5 = *(void *)__dst_16 == *(void *)&__dst_16[16] && *(void *)&__dst_16[8] == *(void *)&__dst_16[24];
    if (v5) {
      break;
    }
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    *(_OWORD *)&v263.__r_.__value_.__l.__data_ = *(_OWORD *)__dst_16;
    uint64_t Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263);
    LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263);
    __int16 v7 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    uint64_t Layers = (void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v7);
    uint64_t v9 = Layers[1] - *Layers;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) - 8;
    uint64_t v242 = Layers;
    while (v10)
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + v11));
      char v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v13) {
        char v13 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      int HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, Path, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v13 + 8), 0);
      v11 -= 8;
      --v10;
      uint64_t Layers = v242;
      if (HasField)
      {
        *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__l.__size_;
        memset(&v267, 0, sizeof(v267));
        uint64_t v244 = v10;
        long long v15 = (uint64_t *)(*v242 + 8 * v10);
        v261 = 0;
        long long v16 = (void *)sub_216AA5ECC(v15);
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v17) {
          uint64_t v17 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        *((void *)&v272 + 1) = &v261;
        v273[0] = (uint64_t)&stru_26C74DD70;
        LOWORD(v273[1]) = 0;
        *(void *)&long long v272 = &unk_26C75E9C0;
        int v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, Path, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v17 + 8), (uint64_t (***)(void, uint64_t))&v272);
        if (LOBYTE(v273[1])) {
          int v19 = 0;
        }
        else {
          int v19 = v18;
        }
        if (v19 != 1) {
          pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
        }
        memset(&v266, 0, sizeof(v266));
        unint64_t v20 = pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v261);
        sub_21680BC90((uint64_t *)&v266, v20);
        v264.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v261);
        v264.__r_.__value_.__l.__size_ = v21;
        uint64_t v22 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v261);
        uint64_t v24 = v23;
        while (2)
        {
          std::string::size_type v25 = v264.__r_.__value_.__r.__words[0];
          if (v24) {
            BOOL v26 = v264.__r_.__value_.__r.__words[0] == v22;
          }
          else {
            BOOL v26 = 1;
          }
          int v27 = v26;
          if (v264.__r_.__value_.__l.__size_ == v24 && v27 != 0)
          {
            unint64_t v76 = 126
                - 2
                * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v266.__r_.__value_.__l.__size_ - v266.__r_.__value_.__r.__words[0]) >> 3));
            if (v266.__r_.__value_.__l.__size_ == v266.__r_.__value_.__r.__words[0]) {
              uint64_t v77 = 0;
            }
            else {
              uint64_t v77 = v76;
            }
            sub_216878D58((uint64_t)v266.__r_.__value_.__l.__data_, (long long *)v266.__r_.__value_.__l.__size_, (uint64_t)&v272, v77, 1);
            pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
          }
          if (*(char *)(v264.__r_.__value_.__r.__words[0] + 55) < 0)
          {
            if (*(void *)(v264.__r_.__value_.__r.__words[0] + 40)) {
              goto LABEL_31;
            }
          }
          else if (*(unsigned char *)(v264.__r_.__value_.__r.__words[0] + 55))
          {
LABEL_31:
            double v29 = (long long *)(v264.__r_.__value_.__r.__words[0] + 32);
            if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(v264.__r_.__value_.__r.__words[0] + 56)))
            {
              BOOL v30 = sub_216C55884((uint64_t **)&__src, v25 + 32, v25 + 32);
              v260.__r_.__value_.__r.__words[0] = 0;
              sub_2168EC844((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + 56), (const void ****)&v260);
              double v31 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v31) {
                double v31 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              if ((*((void *)v31 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
                EmptyString = (uint64_t *)((*((void *)v31 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
              }
              uint64_t v57 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)&v260, (const void **)EmptyString);
              long long v58 = v57;
              if (v57 && sub_216998140(v57))
              {
                uint64_t v59 = *((void *)v58 + 1);
                if ((v59 & 4) != 0
                   ? (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v59 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(v58)
                   : *(void *)v58)
                {
                  goto LABEL_56;
                }
              }
              long long v61 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v61) {
                long long v61 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              if (sub_216C55CBC((pxrInternal__aapl__pxrReserved__::TfToken *)&v260, (void *)v61 + 5))
              {
LABEL_56:
                int v62 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263);
                BOOL v63 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263);
                double v64 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(v63);
                uint64_t v65 = *(void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v64);
                sub_216BC11A8((uint64_t *)&v272, v63);
                sub_216981010(v273, v62);
                sub_21698105C((_DWORD *)v273 + 1, v62 + 1);
                v273[1] = v244;
                v273[2] = 0;
                sub_216ABBA60((uint64_t *)&v275, (uint64_t *)(v65 + 8 * v244));
                *(void *)&long long v274 = sub_216C5617C((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263, (uint64_t *)&v275);
                *((void *)&v274 + 1) = v66;
                int v67 = (atomic_uint *)v30[8];
                *(_OWORD *)(v30 + 7) = v272;
                *((void *)&v272 + 1) = 0;
                if (v67 && atomic_fetch_add_explicit(v67 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v67 + 8))(v67);
                }
                *(void *)&long long v272 = 0;
                sub_21697DE94((int *)v30 + 18, (int *)v273);
                sub_21697DEEC((int *)v30 + 19, (int *)v273 + 1);
                long long v68 = v274;
                *((_OWORD *)v30 + 5) = *(_OWORD *)&v273[1];
                *((_OWORD *)v30 + 6) = v68;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v273 + 1);
                sub_21697C414(v273);
                uint64_t v69 = *((void *)&v272 + 1);
                if (*((void *)&v272 + 1)
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v272 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
                }
                std::string::size_type size = v275.__r_.__value_.__l.__size_;
                if (v275.__r_.__value_.__l.__size_
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(v275.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
                }
              }
              uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v71) {
                uint64_t v71 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              sub_216C55EAC((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263, v15, v71, (pxrInternal__aapl__pxrReserved__::TfToken *)&v260);
              int v72 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v72) {
                int v72 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              sub_216C55EAC((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v263, v15, (void *)v72 + 10, (pxrInternal__aapl__pxrReserved__::TfToken *)&v260);
              pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)&v260, (const char **)v30 + 14, 0);
              pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v30 + 14, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v260);
              uint64_t v73 = (_OWORD *)v266.__r_.__value_.__l.__size_;
              if (v266.__r_.__value_.__l.__size_ >= v266.__r_.__value_.__r.__words[2])
              {
                std::string::size_type v75 = sub_2167E9A44((uint64_t *)&v266, (long long *)(v25 + 32));
              }
              else
              {
                if (*(char *)(v25 + 55) < 0)
                {
                  sub_216778F24((unsigned char *)v266.__r_.__value_.__l.__size_, *(void **)(v25 + 32), *(void *)(v25 + 40));
                }
                else
                {
                  long long v74 = *v29;
                  *(void *)(v266.__r_.__value_.__l.__size_ + 16) = *(void *)(v25 + 48);
                  *uint64_t v73 = v74;
                }
                std::string::size_type v75 = (std::string::size_type)v73 + 24;
              }
              v266.__r_.__value_.__l.__size_ = v75;
              sub_2168EBBB8(&v260, 0);
            }
            else
            {
              *(void *)&long long v272 = "usd/clipSetDefinition.cpp";
              *((void *)&v272 + 1) = "_ResolveClipSetsInNode";
              v273[0] = 443;
              v273[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_ResolveClipSetsInNode(const PcpNodeRef &, std::"
                                 "map<std::string, _ClipSet> *)";
              LOBYTE(v273[2]) = 0;
              if (*(char *)(v25 + 55) < 0) {
                double v29 = *(long long **)v29;
              }
              pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v263);
              v275.__r_.__value_.__r.__words[0] = v46;
              v275.__r_.__value_.__l.__size_ = v47;
              char v48 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v275);
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v48);
              uint64_t v50 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v15);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v50);
              int v52 = *(char *)(Identifier + 23);
              uint64_t v53 = *(void *)Identifier;
              double v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
              if (v52 >= 0) {
                uint64_t v56 = Identifier;
              }
              else {
                uint64_t v56 = v53;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v272, (pxrInternal__aapl__pxrReserved__ *)"Expected dictionary for entry '%s' for prim <%s> in 'clips' dictionary on spec @%s@<%s>", v55, v29, Text, v56, v54);
            }
            goto LABEL_76;
          }
          *(void *)&long long v272 = "usd/clipSetDefinition.cpp";
          *((void *)&v272 + 1) = "_ResolveClipSetsInNode";
          v273[0] = 433;
          v273[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_ResolveClipSetsInNode(const PcpNodeRef &, std::map<"
                             "std::string, _ClipSet> *)";
          LOBYTE(v273[2]) = 0;
          pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)&v263);
          v275.__r_.__value_.__r.__words[0] = v33;
          v275.__r_.__value_.__l.__size_ = v34;
          uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v275);
          uint64_t v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v35);
          uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v15);
          uint64_t v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v37);
          int v39 = *(char *)(v38 + 23);
          uint64_t v40 = *(void *)v38;
          uint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(Path);
          if (v39 >= 0) {
            uint64_t v43 = v38;
          }
          else {
            uint64_t v43 = v40;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v272, (pxrInternal__aapl__pxrReserved__ *)"Invalid unnamed clip set for prim <%s> in 'clips' dictionary on spec @%s@<%s>", v42, v36, v43, v41);
LABEL_76:
          sub_2168EF1B0(&v264, v44, v45);
          continue;
        }
      }
    }
    std::string::size_type v78 = __str.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[1])
    {
      do
      {
        uint64_t v79 = sub_216C55884(&v254, v78 + 32, v78 + 32);
        uint64_t v80 = sub_216BCA2D4(v79 + 7);
        if (!(v81 & 1 | (unint64_t)v80))
        {
          v79[7] = *(void *)(v78 + 56);
          sub_2168CD2FC((atomic_uint **)v79 + 8, (atomic_uint **)(v78 + 64));
          sub_2169C487C((int *)v79 + 18, (_DWORD *)(v78 + 72));
          sub_2169C48D4((int *)v79 + 19, (_DWORD *)(v78 + 76));
          long long v82 = *(_OWORD *)(v78 + 96);
          *((_OWORD *)v79 + 5) = *(_OWORD *)(v78 + 80);
          *((_OWORD *)v79 + 6) = v82;
        }
        pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)(v79 + 14), (const char **)(v78 + 112), 0);
        uint64_t v83 = *(std::string **)(v78 + 8);
        if (v83)
        {
          do
          {
            uint64_t v84 = v83;
            uint64_t v83 = (std::string *)v83->__r_.__value_.__r.__words[0];
          }
          while (v83);
        }
        else
        {
          do
          {
            uint64_t v84 = *(std::string **)(v78 + 16);
            BOOL v5 = v84->__r_.__value_.__r.__words[0] == v78;
            std::string::size_type v78 = (std::string::size_type)v84;
          }
          while (!v5);
        }
        std::string::size_type v78 = (std::string::size_type)v84;
      }
      while (v84 != (std::string *)&__str.__r_.__value_.__r.__words[1]);
    }
    sub_216C56A2C((uint64_t)&__str, (void *)__str.__r_.__value_.__l.__size_);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextNode((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)&__dst);
  }
  uint64_t v85 = v254;
  if (v254 != (uint64_t *)&v255)
  {
    do
    {
      uint64_t v86 = sub_216BCA2D4(v85 + 7);
      if (v87 & 1 | (unint64_t)v86)
      {
        uint64_t v88 = (uint64_t *)v85[1];
        if (v88)
        {
          do
          {
            char v89 = v88;
            uint64_t v88 = (uint64_t *)*v88;
          }
          while (v88);
        }
        else
        {
          do
          {
            char v89 = (uint64_t *)v85[2];
            BOOL v5 = *v89 == (void)v85;
            uint64_t v85 = v89;
          }
          while (!v5);
        }
      }
      else
      {
        char v89 = sub_216C55AE0(&v254, v85);
      }
      uint64_t v85 = v89;
    }
    while (v89 != (uint64_t *)&v255);
  }
  if (v256)
  {
    uint64_t v249 = 0;
    unint64_t v250 = 0;
    unint64_t v251 = 0;
    if (v256 > 0x2E8BA2E8BA2E8BALL) {
      sub_21677CB10();
    }
    sub_216C56CD4(&v272, v256, 0, (uint64_t)&v251);
    sub_216C56D54(&v249, &v272);
    sub_216C56DE8((uint64_t)&v272);
    long long v90 = v254;
    if (v254 == (uint64_t *)&v255)
    {
      unint64_t v91 = v250;
    }
    else
    {
      unint64_t v91 = v250;
      do
      {
        if (v91 >= v251)
        {
          uint64_t v92 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v91 - v249) >> 3);
          unint64_t v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) > 0x2E8BA2E8BA2E8BALL) {
            sub_21677CB10();
          }
          if (0x5D1745D1745D1746 * ((uint64_t)(v251 - v249) >> 3) > v93) {
            unint64_t v93 = 0x5D1745D1745D1746 * ((uint64_t)(v251 - v249) >> 3);
          }
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v251 - v249) >> 3)) >= 0x1745D1745D1745DLL) {
            unint64_t v94 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v94 = v93;
          }
          sub_216C56CD4(&v272, v94, v92, (uint64_t)&v251);
          sub_216C56E3C(v273[0], (uint64_t)(v90 + 7));
          v273[0] += 88;
          sub_216C56D54(&v249, &v272);
          unint64_t v91 = v250;
          sub_216C56DE8((uint64_t)&v272);
        }
        else
        {
          sub_216C56E3C(v91, (uint64_t)(v90 + 7));
          v91 += 88;
        }
        unint64_t v250 = v91;
        uint64_t v95 = (uint64_t *)v90[1];
        if (v95)
        {
          do
          {
            uint64_t v96 = v95;
            uint64_t v95 = (uint64_t *)*v95;
          }
          while (v95);
        }
        else
        {
          do
          {
            uint64_t v96 = (uint64_t *)v90[2];
            BOOL v5 = *v96 == (void)v90;
            long long v90 = v96;
          }
          while (!v5);
        }
        long long v90 = v96;
      }
      while (v96 != (uint64_t *)&v255);
    }
    unint64_t v97 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v91 - v249) >> 3));
    if (v91 == v249) {
      uint64_t v98 = 0;
    }
    else {
      uint64_t v98 = v97;
    }
    sub_216C56EB0(v249, v91, v98, 1);
    sub_216C55B6C(v238, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v250 - v249) >> 3));
    if (v237) {
      sub_21680BC90(v237, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v250 - v249) >> 3));
    }
    uint64_t v99 = v249;
    unint64_t v100 = v250;
    if (v249 != v250)
    {
      while (1)
      {
        sub_216C56260((uint64_t)&v272);
        unint64_t v101 = v238[1];
        if (v101 >= v238[2])
        {
          uint64_t v102 = sub_216C59B40(v238, (uint64_t)&v272);
          uint64_t v103 = v238;
        }
        else
        {
          sub_216C59C48(v238[1], (uint64_t)&v272);
          uint64_t v102 = v101 + 272;
          uint64_t v103 = v238;
          v238[1] = v102;
        }
        v103[1] = v102;
        sub_216C4C23C((uint64_t)&v272);
        uint64_t v104 = v103[1];
        if (v237)
        {
          unint64_t v105 = (long long *)(v99 + 64);
          unint64_t v106 = v237[1];
          if (v106 >= v237[2])
          {
            uint64_t v107 = sub_2167E9A44(v237, v105);
          }
          else
          {
            sub_2167E99E4(v237, v105);
            uint64_t v107 = v106 + 24;
          }
          v237[1] = v107;
        }
        *(void *)(v104 - 32) = *(void *)v99;
        sub_2168CD2FC((atomic_uint **)(v104 - 24), (atomic_uint **)(v99 + 8));
        sub_2169C487C((int *)(v104 - 16), (_DWORD *)(v99 + 16));
        sub_2169C48D4((int *)(v104 - 12), (_DWORD *)(v99 + 20));
        *(void *)(v104 - 8) = *(void *)(v99 + 24);
        long long v108 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v108) {
          long long v108 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        if ((*((void *)v108 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
          long long v109 = (uint64_t *)((*((void *)v108 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          long long v109 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v108);
        }
        uint64_t v110 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)(v99 + 56), (const void **)v109);
        int v111 = v110;
        if (v110 && sub_21695C360(v110))
        {
          uint64_t v112 = *((void *)v111 + 1);
          if ((v112 & 4) != 0) {
            std::string::size_type v113 = (const std::string *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v112 & 0xFFFFFFFFFFFFFFF8) + 168))(v111);
          }
          else {
            std::string::size_type v113 = *(const std::string **)v111;
          }
          sub_216C59DD8((std::string *)(v104 - 168), v113);
        }
        std::string::size_type v114 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v114) {
          std::string::size_type v114 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        if ((*((void *)v114 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type v115 = (uint64_t *)((*((void *)v114 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          std::string::size_type v115 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v114);
        }
        long long v116 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)(v99 + 56), (const void **)v115);
        v117 = v116;
        if (v116 && sub_2169980B4(v116))
        {
          uint64_t v118 = *((void *)v117 + 1);
          if ((v118 & 4) != 0) {
            uint64_t v119 = (std::string *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v118 & 0xFFFFFFFFFFFFFFF8) + 168))(v117);
          }
          else {
            uint64_t v119 = *(std::string **)v117;
          }
          sub_216C59E44((std::string *)(v104 - 224), v119);
        }
        long long v120 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v120) {
          long long v120 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        if ((*((void *)v120 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
          long long v121 = (uint64_t *)((*((void *)v120 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          long long v121 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v120);
        }
        uint64_t v122 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)(v99 + 56), (const void **)v121);
        int v123 = v122;
        if (v122 && sub_216959490(v122))
        {
          uint64_t v124 = *((void *)v123 + 1);
          if ((v124 & 4) != 0) {
            int v123 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v124 & 0xFFFFFFFFFFFFFFF8) + 168))(v123);
          }
          *(_WORD *)(v104 - 4sub_216C01044((uint64_t *)this, 0) = *(unsigned __int8 *)v123 | 0x100;
        }
        uint64_t v125 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v125) {
          uint64_t v125 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        if ((*((void *)v125 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v126 = (uint64_t *)((*((void *)v125 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v126 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v125);
        }
        char v127 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)(v99 + 56), (const void **)v126);
        unint64_t v128 = (uint64_t *)v127;
        if (v127 && sub_216998140(v127))
        {
          uint64_t v129 = v128[1];
          if ((v129 & 4) != 0) {
            uint64_t v130 = (*(uint64_t (**)(uint64_t *))((v129 & 0xFFFFFFFFFFFFFFF8) + 168))(v128);
          }
          else {
            uint64_t v130 = *v128;
          }
          sub_216C59EA4(v104 - 272, v130);
          long long v131 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v131) {
            long long v131 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216C55C20((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), v131, v104 - 136);
          uint64_t v132 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v132) {
            uint64_t v132 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216C55C20((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), (void *)v132 + 10, v104 - 88);
          goto LABEL_272;
        }
        uint64_t v133 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v133) {
          uint64_t v133 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        char v134 = sub_216C55CBC((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), (void *)v133 + 5);
        if (!v134) {
          goto LABEL_272;
        }
        long long v135 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v135) {
          long long v135 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        unint64_t v136 = (double *)sub_216C55D4C((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), (void *)v135 + 9);
        int v137 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v137) {
          int v137 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        int v138 = (double *)sub_216C55D4C((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), (void *)v137 + 8);
        int v139 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v139) {
          int v139 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        int v140 = (double *)sub_216C55D4C((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), (void *)v139 + 7);
        int v141 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v141) {
          int v141 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        int v142 = (double *)sub_216C55D4C((pxrInternal__aapl__pxrReserved__::TfToken *)(v99 + 56), (void *)v141 + 6);
        if (!v138 || !v140 || !v142) {
          goto LABEL_272;
        }
        if (v136) {
          double v143 = *v136;
        }
        else {
          double v143 = 1.79769313e308;
        }
        double v144 = *v138;
        double v145 = *v140;
        double v146 = *v142;
        char v147 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(a1);
        uint64_t v248 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v104 - 88);
        uint64_t v148 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v104 - 136);
        if (v144 <= 0.0)
        {
          *(void *)&long long v272 = "usd/clipSetDefinition.cpp";
          *((void *)&v272 + 1) = "_DeriveClipInfo";
          v273[0] = 163;
          v273[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double, c"
                             "onst double, const double, const double, std::optional<VtVec2dArray> *, std::optional<VtVec"
                             "2dArray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerStackPtr"
                             " &, const size_t)";
          LOBYTE(v273[2]) = 0;
          long long v154 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v154) {
            long long v154 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          unint64_t v155 = *((void *)v154 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v155)
          {
            long long v156 = (const char *)(v155 + 16);
            if (*(char *)(v155 + 39) < 0) {
              long long v156 = *(const char **)v156;
            }
          }
          else
          {
            long long v156 = "";
          }
          int v170 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
          int v171 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v171) {
            int v171 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          unint64_t v172 = *((void *)v171 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (v172)
          {
            v173 = (const char *)(v172 + 16);
            if (*(char *)(v172 + 39) < 0) {
              v173 = *(const char **)v173;
            }
          }
          else
          {
            v173 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v272, (pxrInternal__aapl__pxrReserved__ *)"Invalid %s %f for prim <%s>. %s must be greater than 0.", v169, v156, *(void *)&v144, v170, v173);
          goto LABEL_271;
        }
        uint64_t v149 = *(void *)(v104 - 8);
        double v150 = fabs(v143);
        if (v143 == 1.79769313e308 || v150 <= v144) {
          break;
        }
        *(void *)&long long v272 = "usd/clipSetDefinition.cpp";
        *((void *)&v272 + 1) = "_DeriveClipInfo";
        v273[0] = 174;
        v273[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double, con"
                           "st double, const double, const double, std::optional<VtVec2dArray> *, std::optional<VtVec2dAr"
                           "ray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerStackPtr &, const size_t)";
        LOBYTE(v273[2]) = 0;
        uint64_t v151 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v151) {
          uint64_t v151 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        unint64_t v152 = *((void *)v151 + 9) & 0xFFFFFFFFFFFFFFF8;
        if (v152)
        {
          char v153 = (const char *)(v152 + 16);
          if (*(char *)(v152 + 39) < 0) {
            char v153 = *(const char **)v153;
          }
        }
        else
        {
          char v153 = "";
        }
        char v175 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
        uint64_t v176 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v176) {
          uint64_t v176 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        unint64_t v177 = *((void *)v176 + 9) & 0xFFFFFFFFFFFFFFF8;
        if (v177)
        {
          long long v178 = (const char *)(v177 + 16);
          if (*(char *)(v177 + 39) < 0) {
            long long v178 = *(const char **)v178;
          }
        }
        else
        {
          long long v178 = "";
        }
        int v179 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v179) {
          int v179 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        unint64_t v180 = *((void *)v179 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v180)
        {
          uint64_t v181 = (const char *)(v180 + 16);
          if (*(char *)(v180 + 39) < 0) {
            uint64_t v181 = *(const char **)v181;
          }
        }
        else
        {
          uint64_t v181 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v272, (pxrInternal__aapl__pxrReserved__ *)"Invalid %s %f for prim <%s>. Absolute value of %s must not exceed %s %f.", v174, v153, *(void *)&v143, v175, v178, v181, *(void *)&v144);
LABEL_271:
        uint64_t v187 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(v104 - 32));
        *(void *)&long long v272 = *(void *)(*(void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v187)
                                     + 8 * *(void *)(v104 - 8));
        sub_2168BD80C((uint64_t *)&v272);
        sub_216C55DDC((double *)(v99 + 40), v248);
        sub_216C55DDC((double *)(v99 + 40), v148);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v272);
LABEL_272:
        v99 += 88;
        if (v99 == v100) {
          goto LABEL_386;
        }
      }
      memset(&v263, 0, sizeof(v263));
      v262[0] = 0;
      v262[1] = 0;
      v261 = v262;
      pxrInternal__aapl__pxrReserved__::SdfLayer::SplitIdentifier(v134, &v263, &v261);
      pxrInternal__aapl__pxrReserved__::TfGetPathName(&v263, &v260);
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&v263, &__p);
      uint64_t v245 = (uint64_t *)(v104 - 136);
      pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)&__p, ".", &v257);
      long long v157 = v257;
      if (v257 == v258) {
        goto LABEL_233;
      }
      std::string::size_type v246 = 0;
      std::string::size_type v158 = 0;
      uint64_t v159 = 0;
      uint64_t v160 = 0;
      uint64_t v161 = -1;
      uint64_t v162 = -1;
      while (1)
      {
        std::string::size_type v163 = HIBYTE(v157->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v157->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v164 = (std::string *)v157->__r_.__value_.__r.__words[0];
          std::string::size_type v165 = v157->__r_.__value_.__l.__size_;
          if (v165)
          {
LABEL_216:
            while (v164->__r_.__value_.__s.__data_[0] == 35)
            {
              std::string::size_type v164 = (std::string *)((char *)v164 + 1);
              if (!--v165) {
                goto LABEL_218;
              }
            }
            goto LABEL_229;
          }
        }
        else
        {
          std::string::size_type v164 = v157;
          std::string::size_type v165 = HIBYTE(v157->__r_.__value_.__r.__words[2]);
          if (*((unsigned char *)&v157->__r_.__value_.__s + 23)) {
            goto LABEL_216;
          }
        }
LABEL_218:
        if (v161 == -1)
        {
          if ((v163 & 0x80) != 0) {
            std::string::size_type v163 = v157->__r_.__value_.__l.__size_;
          }
          std::string::size_type v246 = v163;
          uint64_t v161 = v160;
        }
        else
        {
          if ((v163 & 0x80) != 0) {
            std::string::size_type v158 = v157->__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type v158 = HIBYTE(v157->__r_.__value_.__r.__words[2]);
          }
          uint64_t v162 = v160;
        }
        ++v159;
LABEL_229:
        ++v160;
        if (++v157 == v258)
        {
          if ((unint64_t)(v159 - 3) < 0xFFFFFFFFFFFFFFFELL || v159 == 2 && v161 != v162 - 1)
          {
LABEL_233:
            *(void *)&long long v272 = "usd/clipSetDefinition.cpp";
            *((void *)&v272 + 1) = "_DeriveClipInfo";
            v273[0] = 221;
            v273[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double,"
                               " const double, const double, const double, std::optional<VtVec2dArray> *, std::optional<V"
                               "tVec2dArray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerSt"
                               "ackPtr &, const size_t)";
            LOBYTE(v273[2]) = 0;
            uint64_t v166 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            uint64_t v148 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v104 - 136);
            if (!v166) {
              uint64_t v166 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            unint64_t v167 = *((void *)v166 + 5) & 0xFFFFFFFFFFFFFFF8;
            if (v167)
            {
              long long v168 = (const char *)(v167 + 16);
              if (*(char *)(v167 + 39) < 0) {
                long long v168 = *(const char **)v168;
              }
            }
            else
            {
              long long v168 = "";
            }
            int v182 = *((char *)v134 + 23);
            uint64_t v183 = *(pxrInternal__aapl__pxrReserved__::VtValue **)v134;
            int v184 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
            if (v182 >= 0) {
              int64x2_t v186 = v134;
            }
            else {
              int64x2_t v186 = v183;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v272, (pxrInternal__aapl__pxrReserved__ *)"Invalid %s '%s' for prim <%s>. It must be of the form path/basename.###.usd or path/basename.###.###.usd. Note that the number of hash marks is variable in each group.", v185, v168, v186, v184);
            goto LABEL_265;
          }
          if (v145 > v146)
          {
            *(void *)&long long v272 = "usd/clipSetDefinition.cpp";
            *((void *)&v272 + 1) = "_DeriveClipInfo";
            v273[0] = 232;
            v273[1] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::_DeriveClipInfo(const std::string &, const double,"
                               " const double, const double, const double, std::optional<VtVec2dArray> *, std::optional<V"
                               "tVec2dArray> *, std::optional<VtArray<SdfAssetPath>> *, const SdfPath &, const PcpLayerSt"
                               "ackPtr &, const size_t)";
            LOBYTE(v273[2]) = 0;
            uint64_t v148 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v104 - 136);
            uint64_t v189 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
            uint64_t v190 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v190) {
              uint64_t v190 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            unint64_t v191 = *((void *)v190 + 6) & 0xFFFFFFFFFFFFFFF8;
            if (v191)
            {
              v192 = (const char *)(v191 + 16);
              if (*(char *)(v191 + 39) < 0) {
                v192 = *(const char **)v192;
              }
            }
            else
            {
              v192 = "";
            }
            int v227 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v227) {
              int v227 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            unint64_t v228 = *((void *)v227 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v228)
            {
              uint64_t v229 = (const char *)(v228 + 16);
              if (*(char *)(v228 + 39) < 0) {
                uint64_t v229 = *(const char **)v229;
              }
            }
            else
            {
              uint64_t v229 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v272, (pxrInternal__aapl__pxrReserved__ *)"Invalid time range specified for prim <%s>. %s (%f) cannot be greater than %s (%f).", v188, v189, v192, *(void *)&v146, v229, *(void *)&v145);
            goto LABEL_265;
          }
          uint64_t v239 = v162;
          long long v272 = 0u;
          memset(v273, 0, sizeof(v273));
          sub_216C562D4((uint64_t)v248, (uint64_t)&v272);
          sub_2168F83DC((uint64_t)&v272);
          long long v272 = 0u;
          memset(v273, 0, sizeof(v273));
          sub_216C562D4((uint64_t)v245, (uint64_t)&v272);
          sub_2168F83DC((uint64_t)&v272);
          long long v272 = 0u;
          memset(v273, 0, sizeof(v273));
          sub_216C56358(v104 - 272, (uint64_t)&v272);
          sub_2169B4408(&v272);
          char v193 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(v104 - 32));
          uint64_t v194 = *(void *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v193);
          std::string::size_type v195 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8((uint64_t *)(v104 - 32));
          uint64_t v196 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v195);
          pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v272, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v196 + 32));
          uint64_t v197 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v278);
          Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v197);
          double v198 = v145 * 10000.0;
          double v199 = v150 * 10000.0;
          if (v143 != 1.79769313e308)
          {
            *(double *)&long long __dst = (v198 - v199) / 10000.0;
            *((double *)&__dst + 1) = *(double *)&__dst;
            sub_216C564B4((uint64_t)v248, &__dst);
          }
          double v200 = v146 * 10000.0;
          if (v198 > v200)
          {
LABEL_357:
            uint64_t v148 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v104 - 136);
            if (v143 != 1.79769313e308)
            {
              *(double *)&long long __dst = (v199 + v200) / 10000.0;
              *((double *)&__dst + 1) = *(double *)&__dst;
              sub_216C564B4((uint64_t)v248, &__dst);
            }
            uint64_t v224 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v224) {
              uint64_t v224 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            if (sub_216C4B19C(2))
            {
              unint64_t v225 = *((void *)v224 + 1) & 0xFFFFFFFFFFFFFFF8;
              if (v225)
              {
                uint64_t v226 = (const char *)(v225 + 16);
                if (*(char *)(v225 + 39) < 0) {
                  uint64_t v226 = *(const char **)v226;
                }
              }
              else
              {
                uint64_t v226 = "";
              }
              uint64_t v230 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
              sub_216C56764((uint64_t *)(v104 - 272));
              p_dst = &__dst;
              if (__dst_16[7] < 0) {
                p_dst = (long long *)__dst;
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s for prim <%s> derived: %s\n", v231, v232, v226, v230, p_dst);
              if ((__dst_16[7] & 0x80000000) != 0) {
                operator delete((void *)__dst);
              }
            }
            uint64_t v234 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v234) {
              uint64_t v234 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            sub_216C563DC((void *)v234 + 10, (uint64_t *)v248, (pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
            uint64_t v235 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v235) {
              uint64_t v235 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            sub_216C563DC(v235, v245, (pxrInternal__aapl__pxrReserved__::SdfPath *)v147);
            pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v278);
            pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v272);
LABEL_265:
            *(void *)&long long v272 = &v257;
            sub_216782F20((void ***)&v272);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v260.__r_.__value_.__l.__data_);
            }
            sub_2167877AC((uint64_t)&v261, v262[0]);
            if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v263.__r_.__value_.__l.__data_);
            }
            goto LABEL_271;
          }
          unint64_t v243 = 0;
          uint64_t v240 = (uint64_t *)(v194 + 8 * v149);
          double v201 = v144 * 10000.0;
          while (2)
          {
            std::string::size_type v270 = v246;
            std::string::size_type v269 = v158;
            sub_216779094(&v275, "");
            sub_216779094(&__src, "");
            sub_216C5661C();
            uint64_t v202 = std::string::insert(&__str, 0, "%0");
            long long v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
            v266.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v266.__r_.__value_.__l.__data_ = v203;
            v202->__r_.__value_.__l.__size_ = 0;
            v202->__r_.__value_.__r.__words[2] = 0;
            v202->__r_.__value_.__r.__words[0] = 0;
            uint64_t v204 = std::string::append(&v266, "d");
            long long v207 = *(_OWORD *)&v204->__r_.__value_.__l.__data_;
            v267.__r_.__value_.__r.__words[2] = v204->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v267.__r_.__value_.__l.__data_ = v207;
            v204->__r_.__value_.__l.__size_ = 0;
            v204->__r_.__value_.__r.__words[2] = 0;
            v204->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v266.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if ((v267.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v208 = &v267;
            }
            else {
              v208 = (std::string *)v267.__r_.__value_.__r.__words[0];
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v208, v205, v206, (int)(v198 / 10000.0));
            if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v275.__r_.__value_.__l.__data_);
            }
            std::string v275 = v266;
            if (v269)
            {
              sub_216C5661C();
              std::string::size_type v209 = std::string::insert(&v264, 0, "%.0");
              long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v210;
              v209->__r_.__value_.__l.__size_ = 0;
              v209->__r_.__value_.__r.__words[2] = 0;
              v209->__r_.__value_.__r.__words[0] = 0;
              BOOL v211 = std::string::append(&__str, "f");
              long long v214 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
              v266.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v266.__r_.__value_.__l.__data_ = v214;
              v211->__r_.__value_.__l.__size_ = 0;
              v211->__r_.__value_.__r.__words[2] = 0;
              v211->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v264.__r_.__value_.__l.__data_);
              }
              if ((v266.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v215 = &v266;
              }
              else {
                uint64_t v215 = (std::string *)v266.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v215, v212, v213, v198 / 10000.0);
              std::string::size_type v216 = std::string::find(&__str, 46, 0);
              std::string::basic_string(&v264, &__str, v216 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v271);
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__src.__r_.__value_.__l.__data_);
              }
              std::string __src = v264;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v266.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v266.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_216778F24(&__dst, v275.__r_.__value_.__l.__data_, v275.__r_.__value_.__l.__size_);
            }
            else
            {
              long long __dst = *(_OWORD *)&v275.__r_.__value_.__l.__data_;
              *(void *)__dst_16 = *((void *)&v275.__r_.__value_.__l + 2);
            }
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
              sub_216778F24(&__dst_16[8], __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
            }
            else {
              *(std::string *)&__dst_16[8] = __src;
            }
            if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v267.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__src.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v275.__r_.__value_.__l.__data_);
            }
            std::string::operator=(&v257[v161], (const std::string *)&__dst);
            uint64_t v217 = __dst_16[31];
            if (__dst_16[31] < 0) {
              uint64_t v217 = *(void *)&__dst_16[16];
            }
            if (v217) {
              std::string::operator=(&v257[v239], (const std::string *)&__dst_16[8]);
            }
            sub_216ABBA60((uint64_t *)&v266, v240);
            pxrInternal__aapl__pxrReserved__::TfStringJoin(".", &v257, &v267);
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v218 = &v260;
            }
            else {
              unsigned int v218 = (std::string *)v260.__r_.__value_.__r.__words[0];
            }
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v219 = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v219 = v260.__r_.__value_.__l.__size_;
            }
            int v220 = std::string::insert(&v267, 0, (const std::string::value_type *)v218, v219);
            long long v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
            v275.__r_.__value_.__r.__words[2] = v220->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v275.__r_.__value_.__l.__data_ = v221;
            v220->__r_.__value_.__l.__size_ = 0;
            v220->__r_.__value_.__r.__words[2] = 0;
            v220->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&v266, (uint64_t)&v275, (uint64_t)&__src);
            if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v275.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v267.__r_.__value_.__l.__data_);
            }
            std::string::size_type v222 = v266.__r_.__value_.__l.__size_;
            if (v266.__r_.__value_.__l.__size_
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v266.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(std::string::size_type))(*(void *)v222 + 8))(v222);
            }
            pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
            if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::size_type v223 = v275.__r_.__value_.__l.__size_;
              operator delete(v275.__r_.__value_.__l.__data_);
              if (!v223) {
                goto LABEL_350;
              }
            }
            else if (!*((unsigned char *)&v275.__r_.__value_.__s + 23))
            {
              goto LABEL_350;
            }
            pxrInternal__aapl__pxrReserved__::SdfLayer::CreateIdentifier(&__src, &v261);
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v275);
            sub_216BBA8E8(v104 - 272, (long long *)&v275);
            if (v277 < 0) {
              operator delete(v276);
            }
            if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v275.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v267.__r_.__value_.__l.__data_);
            }
            *(double *)&v275.__r_.__value_.__l.__data_ = v198 / 10000.0;
            *(double *)&v275.__r_.__value_.__l.__size_ = v198 / 10000.0;
            sub_216C564B4((uint64_t)v248, &v275);
            if (v143 == 1.79769313e308)
            {
              *(double *)&v275.__r_.__value_.__l.__data_ = v198 / 10000.0;
              *(double *)&v275.__r_.__value_.__l.__size_ = (double)v243;
              sub_216C564B4((uint64_t)v245, &v275);
            }
            else
            {
              *(double *)&v275.__r_.__value_.__l.__data_ = (v143 * 10000.0 + v198) / 10000.0;
              *(double *)&v275.__r_.__value_.__l.__size_ = (double)v243;
              sub_216C564B4((uint64_t)v245, &v275);
            }
            ++v243;
LABEL_350:
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__src.__r_.__value_.__l.__data_);
            }
            if ((__dst_16[31] & 0x80000000) != 0) {
              operator delete(*(void **)&__dst_16[8]);
            }
            if ((__dst_16[7] & 0x80000000) != 0) {
              operator delete((void *)__dst);
            }
            double v198 = v201 + v198;
            if (v198 > v200) {
              goto LABEL_357;
            }
            continue;
          }
        }
      }
    }
LABEL_386:
    sub_216C55E4C((uint64_t)&v249);
  }
  sub_216C56A2C((uint64_t)&v254, v255);
}

void sub_216C55384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v72 - 184));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&STACK[0x260]);
  STACK[0x260] = (unint64_t)&a52;
  sub_216782F20((void ***)&STACK[0x260]);
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  sub_2167877AC((uint64_t)&a67, (void *)a68);
  if (a72 < 0) {
    operator delete(a70);
  }
  sub_216C55E4C((uint64_t)&a34);
  sub_216C56A2C((uint64_t)&a49, (void *)a50);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C55884(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  __int16 v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v8 = a1 + 1;
  while (1)
  {
    while (1)
    {
      uint64_t v9 = (uint64_t **)v6;
      uint64_t v10 = (const void **)(v6 + 4);
      if (!sub_21677B108((uint64_t)(a1 + 2), (const void **)a2, (const void **)v6 + 4)) {
        break;
      }
      uint64_t v6 = *v9;
      uint64_t v8 = v9;
      if (!*v9) {
        goto LABEL_10;
      }
    }
    if (!sub_21677B108((uint64_t)(a1 + 2), v10, (const void **)a2)) {
      break;
    }
    uint64_t v8 = v9 + 1;
    uint64_t v6 = v9[1];
    if (!v6) {
      goto LABEL_10;
    }
  }
  unint64_t v11 = *v8;
  if (!*v8)
  {
LABEL_10:
    uint64_t v12 = operator new(0x90uLL);
    char v13 = v12;
    v18[0] = v12;
    v18[1] = v7;
    char v19 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(v12 + 32, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *((_OWORD *)v12 + 2) = *(_OWORD *)a2;
      *((void *)v12 + 6) = *(void *)(a2 + 16);
    }
    *((void *)v13 + 7) = 0;
    *((void *)v13 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v13 + 18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v13 + 19);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v13 + 12, 0.0, 1.0);
    *((void *)v13 + 14) = 0;
    long long v14 = v13 + 120;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_216778F24(v14, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long v14 = *(_OWORD *)a3;
      *((void *)v13 + 17) = *(void *)(a3 + 16);
    }
    char v19 = 1;
    long long v15 = (uint64_t *)v18[0];
    *(void *)v18[0] = 0;
    v15[1] = 0;
    void v15[2] = (uint64_t)v9;
    *uint64_t v8 = v15;
    long long v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      long long v15 = *v8;
    }
    sub_21677B3B0(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    unint64_t v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    sub_216C56BE0((uint64_t)v18);
  }
  return v11;
}

void sub_216C55A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EBBB8(v6, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v5);
  sub_21697C414(v4);
  uint64_t v8 = *(atomic_uint **)(v2 + 64);
  if (v8 && atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  sub_216C56BE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C55AE0(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      unint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    BOOL v5 = a2;
    do
    {
      uint64_t v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      BOOL v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  __int16 v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_2167AE080(v7, a2);
  sub_216C56A94((uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t sub_216C55B6C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216C59798(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 272 * v6;
    sub_216C59720(a1, v7);
    return sub_216C59AF0((uint64_t)v7);
  }
  return result;
}

void sub_216C55C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C59AF0((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_216C55C20(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2, uint64_t a3)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t result = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)a1, (const void **)EmptyString);
  if (result)
  {
    __int16 v7 = (uint64_t *)result;
    uint64_t result = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168FC5B0(result);
    if (result)
    {
      uint64_t v8 = v7[1];
      if ((v8 & 4) != 0) {
        uint64_t v9 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      else {
        uint64_t v9 = *v7;
      }
      return (pxrInternal__aapl__pxrReserved__::VtValue *)sub_216C59F10(a3, v9);
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_216C55CBC(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t result = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)a1, (const void **)EmptyString);
  if (result)
  {
    uint64_t v5 = result;
    if (sub_21695C360(result))
    {
      uint64_t v6 = *((void *)v5 + 1);
      if ((v6 & 4) != 0)
      {
        __int16 v7 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168);
        return (pxrInternal__aapl__pxrReserved__::VtValue *)v7(v5);
      }
      else
      {
        return *(pxrInternal__aapl__pxrReserved__::VtValue **)v5;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216C55D4C(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2169F3CFC((uint64_t *)a1, (const void **)EmptyString);
  uint64_t v5 = v4;
  if (!v4) {
    return (uint64_t)v5;
  }
  if (!sub_21691CE68(v4)) {
    return 0;
  }
  uint64_t v6 = *((void *)v5 + 1);
  if ((v6 & 4) == 0) {
    return (uint64_t)v5;
  }
  __int16 v7 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168);

  return v7(v5);
}

void sub_216C55DDC(double *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)a1))
  {
    sub_2168FC460(a2, v4, v5);
    uint64_t v6 = (double *)*((void *)a2 + 4);
    sub_2168FC460(a2, v7, v8);
    uint64_t v9 = *((void *)a2 + 4) + 16 * *(void *)a2;
    while (v6 != (double *)v9)
    {
      *uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, *v6);
      v6 += 2;
    }
  }
}

uint64_t sub_216C55E4C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    for (uint64_t i = *(void *)(a1 + 8); (void *)i != v2; sub_216C56C2C(i))
      i -= 88;
    *(void *)(a1 + 8) = v2;
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216C55EAC(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t *a2, void *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_216C561E4(a4, a3);
  if (v6)
  {
    uint64_t v7 = v6;
    if (sub_2168FC5B0(v6))
    {
      uint64_t v14 = 0;
      memset(v13, 0, sizeof(v13));
      sub_2168FC4F8(v7, v13);
      sub_216ABBA60(&v10, a2);
      v12[0] = sub_216C5617C(a1, &v10);
      v12[1] = v8;
      sub_216C55DDC(v12, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13);
      uint64_t v9 = v11;
      if (v11)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      sub_2168FC4F8(v7, v13);
      sub_2168F83DC((uint64_t)v13);
    }
  }
}

void sub_216C55F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C55FFC(uint64_t a1, const void *****a2)
{
  if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (const void ****)(*(uint64_t (**)(const void *****))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                        + 168))(a2);
    else {
      uint64_t v5 = *a2;
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(*(const void *****)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_216C56080(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2168EC434(a2))
  {
    sub_216C56108((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7);
    uint64_t v4 = *(void ****)(a1 + 8);
    uint64_t v5 = v7;
    uint64_t v7 = 0;
    sub_2168EBBB8(v4, v5);
    sub_2168EBBB8(&v7, 0);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C(a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_216C56108@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  *(void *)a2 = 0;
  uint64_t v4 = (uint64_t *)sub_2168EEFE0((const void *****)a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v4, a2);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6) {
    BOOL v7 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_216C56164(_Unwind_Exception *a1)
{
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

double sub_216C5617C(pxrInternal__aapl__pxrReserved__::PcpNodeRef *a1, uint64_t *a2)
{
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(a1);
  long long v11 = *(_OWORD *)((char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v5, v6) + 40);
  LayerStacstd::string::size_type k = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(a1);
  double v8 = (void *)sub_216BBBFA8(LayerStack);
  LayerOffsetForLayer = (double *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v8, a2);
  if (LayerOffsetForLayer) {
    return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)&v11, LayerOffsetForLayer);
  }
  else {
    return *(double *)&v11;
  }
}

uint64_t sub_216C561E4(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::find((uint64_t *)a1, (const void **)EmptyString);
  uint64_t v6 = v5;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  if (v6 == v8 && (v6 ? (BOOL v9 = v4 == v7) : (BOOL v9 = 1), v9)) {
    return 0;
  }
  else {
    return v4 + 56;
  }
}

uint64_t sub_216C56260(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 256;
  *(void *)(a1 + 24sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 248) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 256));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 260));
  *(void *)(a1 + 264) = 0;
  return a1;
}

uint64_t sub_216C562D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (a1 != a2)
    {
      sub_2168F83DC(a1);
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
  }
  return a1;
}

uint64_t sub_216C56358(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (a1 != a2)
    {
      sub_2169B4408((void *)a1);
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
  }
  return a1;
}

void sub_216C563DC(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (sub_216C4B19C(2))
  {
    unint64_t v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v6)
    {
      uint64_t v7 = (const char *)(v6 + 16);
      if (*(char *)(v6 + 39) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
    }
    else
    {
      uint64_t v7 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    sub_216C568C8(a2);
    if (v13 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s for prim <%s> derived: %s\n", v9, v10, v7, Text, p_p);
    if (v13 < 0) {
      operator delete(__p);
    }
  }
}

void sub_216C56498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C564B4(uint64_t a1, _OWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    BOOL v9 = *(long long **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2168FC3C4(a1, v11);
    char v13 = v12;
    if (v4)
    {
      uint64_t v14 = 16 * v4;
      long long v15 = v12;
      do
      {
        long long v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  void v18[2] = 433;
  _OWORD v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <pxrInternal__aapl__pxrReserved__::GfVec2d>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_216C5661C()
{
  sub_21677B834((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_216C56750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C56764(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  uint64_t v6 = a1[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v3, a1, (uint64_t)&v6, (void (*)(uint64_t, void *))sub_2169B43F0);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216C568B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216C568C8(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  uint64_t v6 = a1[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v3, a1, (uint64_t)&v6, (void (*)(uint64_t, void *))sub_2168FCAD0);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216C56A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C56A2C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216C56A2C(a1, *a2);
    sub_216C56A2C(a1, a2[1]);
    sub_216C56A94((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216C56A94(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  sub_2168EBBB8((void ***)(a1 + 80), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  char v2 = *(atomic_uint **)(a1 + 32);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_216C56B4C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  sub_2168EBBB8((void ***)(a1 + 56), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  char v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_216C56BE0(uint64_t a1)
{
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C56A94((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

atomic_uint *sub_216C56C2C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  sub_2168EBBB8((void ***)(a1 + 56), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v3();
  }
  return result;
}

void *sub_216C56CD4(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_21677CA1C();
    }
    uint64_t v7 = (char *)operator new(88 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[88 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[88 * a2];
  return a1;
}

void sub_216C56D54(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 88;
    v4 -= 88;
    sub_216C56E3C(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t sub_216C56DE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3 == v2) {
      break;
    }
    *(void *)(a1 + 16) = v3 - 88;
    sub_216C56C2C(v3 - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_216C56E3C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a1 + 56) = v5;
  __n128 result = *(__n128 *)(a2 + 64);
  *(void *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(a2 + 80);
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 64) = 0;
  return result;
}

uint64_t sub_216C56EB0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v193 = result;
  while (2)
  {
    uint64_t v186 = a2 - 88;
    uint64_t v181 = a2 - 264;
    uint64_t v182 = a2 - 176;
    unint64_t v177 = (char *)(a2 - 56);
    int v179 = (char *)(a2 - 72);
    unint64_t v8 = v193;
    uint64_t v192 = a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a2 - v8;
        unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - v8) >> 3);
        uint64_t v193 = v9;
        if (v5 || !v4)
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              *(void *)&long long v203 = v186;
              *((void *)&v203 + 1) = v179;
              uint64_t v204 = (uint64_t)v177;
              *(void *)&long long v194 = v9;
              *((void *)&v194 + 1) = v9 + 16;
              std::string::size_type v195 = (char *)(v9 + 32);
              __n128 result = sub_216C592AC((uint64_t)&v210, (uint64_t *)&v203, (uint64_t *)&v194);
              if (result) {
                __n128 result = sub_216C593AC(v9, v186);
              }
              break;
            case 3uLL:
              __n128 result = sub_216C58CE0(v9, v9 + 88, v186);
              break;
            case 4uLL:
              __n128 result = sub_216C59628(v9, v9 + 88, v9 + 176, v186);
              break;
            case 5uLL:
              __n128 result = sub_216C58BA4(v9, v9 + 88, v9 + 176, v9 + 264, v186);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v10 <= 2111)
        {
          if (a4)
          {
            if (v9 != a2)
            {
              uint64_t v69 = v9 + 88;
              if (v9 + 88 != a2)
              {
                uint64_t v70 = 0;
                uint64_t v71 = v9;
                do
                {
                  uint64_t v72 = v69;
                  *(void *)&long long v203 = v69;
                  *((void *)&v203 + 1) = v71 + 104;
                  uint64_t v204 = v71 + 120;
                  *(void *)&long long v194 = v71;
                  *((void *)&v194 + 1) = v71 + 16;
                  std::string::size_type v195 = (char *)(v71 + 32);
                  __n128 result = sub_216C592AC((uint64_t)&v210, (uint64_t *)&v203, (uint64_t *)&v194);
                  if (result)
                  {
                    long long v203 = *(_OWORD *)v72;
                    *(void *)uint64_t v72 = 0;
                    *(void *)(v72 + 8) = 0;
                    LODWORD(v204) = *(_DWORD *)(v71 + 104);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v71 + 104));
                    HIDWORD(v204) = *(_DWORD *)(v71 + 108);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v71 + 108));
                    long long v73 = *(_OWORD *)(v71 + 128);
                    long long v205 = *(_OWORD *)(v71 + 112);
                    long long v206 = v73;
                    long long v74 = *(void ***)(v71 + 144);
                    long long v75 = *(_OWORD *)(v71 + 152);
                    *(void *)(v71 + 144) = 0;
                    *(void *)(v71 + 152) = 0;
                    long long v207 = v74;
                    long long v208 = v75;
                    uint64_t v209 = *(void *)(v71 + 168);
                    uint64_t v76 = v70;
                    *(void *)(v71 + 16sub_216C01044((uint64_t *)this, 0) = 0;
                    *(void *)(v71 + 168) = 0;
                    while (1)
                    {
                      uint64_t v77 = v76;
                      uint64_t v78 = v9 + v76;
                      sub_21697D0EC(v9 + v76 + 88, v9 + v76);
                      sub_21697DE94((int *)(v78 + 104), (int *)(v78 + 16));
                      sub_21697DEEC((int *)(v78 + 108), (int *)(v78 + 20));
                      long long v79 = *(_OWORD *)(v78 + 40);
                      *(_OWORD *)(v78 + 112) = *(_OWORD *)(v78 + 24);
                      *(_OWORD *)(v78 + 128) = v79;
                      uint64_t v80 = *(void ***)(v78 + 56);
                      *(void *)(v78 + 56) = 0;
                      sub_2168EBBB8((void ***)(v78 + 144), v80);
                      char v81 = (void **)(v78 + 152);
                      if (*(char *)(v78 + 175) < 0) {
                        operator delete(*v81);
                      }
                      *(_OWORD *)char v81 = *(_OWORD *)(v78 + 64);
                      *(void *)(v78 + 168) = *(void *)(v78 + 80);
                      *(unsigned char *)(v78 + 87) = 0;
                      *(unsigned char *)(v78 + 64) = 0;
                      if (!v77) {
                        break;
                      }
                      *(void *)&long long v194 = &v203;
                      *((void *)&v194 + 1) = &v204;
                      std::string::size_type v195 = (char *)&v205 + 8;
                      long long v210 = (char *)(v9 + v77 - 88);
                      BOOL v211 = (char *)(v9 + v77 - 72);
                      long long v212 = (char *)(v9 + v77 - 56);
                      BOOL v82 = sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210);
                      uint64_t v76 = v77 - 88;
                      if (!v82)
                      {
                        uint64_t v83 = v9 + v77;
                        goto LABEL_93;
                      }
                    }
                    uint64_t v83 = v9;
LABEL_93:
                    uint64_t v84 = *(atomic_uint **)(v83 + 8);
                    *(_OWORD *)uint64_t v83 = v203;
                    *((void *)&v203 + 1) = 0;
                    if (v84 && atomic_fetch_add_explicit(v84 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                      (*(void (**)(atomic_uint *))(*(void *)v84 + 8))(v84);
                    }
                    uint64_t v85 = (void **)(v9 + v77 + 64);
                    uint64_t v86 = (_OWORD *)(v9 + v77 + 24);
                    *(void *)&long long v203 = 0;
                    sub_21697DE94((int *)(v9 + v77 + 16), (int *)&v204);
                    sub_21697DEEC((int *)(v9 + v77 + 20), (int *)&v204 + 1);
                    long long v87 = v206;
                    *uint64_t v86 = v205;
                    v86[1] = v87;
                    uint64_t v88 = v207;
                    long long v207 = 0;
                    sub_2168EBBB8((void ***)(v83 + 56), v88);
                    if (*(char *)(v83 + 87) < 0) {
                      operator delete(*v85);
                    }
                    long long v89 = v208;
                    *(void *)(v9 + v77 + 8sub_216C01044((uint64_t *)this, 0) = v209;
                    *(_OWORD *)uint64_t v85 = v89;
                    HIBYTE(v209) = 0;
                    LOBYTE(v208) = 0;
                    sub_2168EBBB8(&v207, 0);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
                    sub_21697C414(&v204);
                    __n128 result = *((void *)&v203 + 1);
                    a2 = v192;
                    if (*((void *)&v203 + 1)
                      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                    {
                      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
                    }
                  }
                  uint64_t v69 = v72 + 88;
                  v70 += 88;
                  uint64_t v71 = v72;
                }
                while (v72 + 88 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            uint64_t v162 = v9 + 88;
            if (v9 + 88 != a2)
            {
              std::string::size_type v163 = (char *)(v9 + 175);
              do
              {
                uint64_t v164 = v162;
                std::string::size_type v165 = (_DWORD *)(v193 + 104);
                *(void *)&long long v203 = v162;
                *((void *)&v203 + 1) = v193 + 104;
                uint64_t v204 = v193 + 120;
                *(void *)&long long v194 = v193;
                *((void *)&v194 + 1) = v193 + 16;
                std::string::size_type v195 = (char *)(v193 + 32);
                __n128 result = sub_216C592AC((uint64_t)&v210, (uint64_t *)&v203, (uint64_t *)&v194);
                if (result)
                {
                  long long v203 = *(_OWORD *)v164;
                  *(void *)uint64_t v164 = 0;
                  *(void *)(v164 + 8) = 0;
                  LODWORD(v204) = *v165;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v165);
                  HIDWORD(v204) = *(_DWORD *)(v193 + 108);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v193 + 108));
                  long long v166 = *(_OWORD *)(v193 + 128);
                  long long v205 = *(_OWORD *)(v193 + 112);
                  long long v206 = v166;
                  unint64_t v167 = *(void ***)(v193 + 144);
                  long long v168 = *(_OWORD *)(v193 + 152);
                  *(void *)(v193 + 144) = 0;
                  *(void *)(v193 + 152) = 0;
                  long long v207 = v167;
                  long long v208 = v168;
                  uint64_t v209 = *(void *)(v193 + 168);
                  unint64_t v169 = v163;
                  *(void *)(v193 + 16sub_216C01044((uint64_t *)this, 0) = 0;
                  *(void *)(v193 + 168) = 0;
                  do
                  {
                    sub_21697D0EC((uint64_t)(v169 - 87), (uint64_t)(v169 - 175));
                    sub_21697DE94((int *)(v169 - 71), (int *)(v169 - 159));
                    sub_21697DEEC((int *)(v169 - 67), (int *)(v169 - 155));
                    *(_OWORD *)(v169 - 63) = *(_OWORD *)(v169 - 151);
                    *(_OWORD *)(v169 - 47) = *(_OWORD *)(v169 - 135);
                    int v170 = *(void ***)(v169 - 119);
                    *(void *)(v169 - 119) = 0;
                    sub_2168EBBB8((void ***)(v169 - 31), v170);
                    int v171 = (void **)(v169 - 23);
                    if (*v169 < 0) {
                      operator delete(*v171);
                    }
                    *(_OWORD *)int v171 = *(_OWORD *)(v169 - 111);
                    *(void *)(v169 - 7) = *(void *)(v169 - 95);
                    *(v169 - 88) = 0;
                    *(v169 - 111) = 0;
                    *(void *)&long long v194 = &v203;
                    *((void *)&v194 + 1) = &v204;
                    std::string::size_type v195 = (char *)&v205 + 8;
                    long long v210 = v169 - 263;
                    BOOL v211 = v169 - 247;
                    long long v212 = v169 - 231;
                    v169 -= 88;
                  }
                  while (sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
                  unint64_t v172 = *(atomic_uint **)(v169 - 79);
                  *(_OWORD *)(v169 - 87) = v203;
                  *((void *)&v203 + 1) = 0;
                  if (v172 && atomic_fetch_add_explicit(v172 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v172 + 8))(v172);
                  }
                  v173 = (void **)(v169 - 23);
                  *(void *)&long long v203 = 0;
                  sub_21697DE94((int *)(v169 - 71), (int *)&v204);
                  sub_21697DEEC((int *)(v169 - 67), (int *)&v204 + 1);
                  long long v174 = v206;
                  *(_OWORD *)(v169 - 63) = v205;
                  *(_OWORD *)(v169 - 47) = v174;
                  char v175 = v207;
                  long long v207 = 0;
                  sub_2168EBBB8((void ***)(v169 - 31), v175);
                  if (*v169 < 0) {
                    operator delete(*v173);
                  }
                  long long v176 = v208;
                  *(void *)(v169 - 7) = v209;
                  *(_OWORD *)v173 = v176;
                  HIBYTE(v209) = 0;
                  LOBYTE(v208) = 0;
                  sub_2168EBBB8(&v207, 0);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
                  a2 = v192;
                  sub_21697C414(&v204);
                  __n128 result = *((void *)&v203 + 1);
                  if (*((void *)&v203 + 1)
                    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
                  }
                }
                uint64_t v162 = v164 + 88;
                v163 += 88;
                uint64_t v193 = v164;
              }
              while (v164 + 88 != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v90 = (v11 - 2) >> 1;
            unint64_t v187 = v10;
            int64_t v91 = v90;
            do
            {
              int64_t v92 = v91;
              if (v90 >= v91)
              {
                uint64_t v93 = (2 * v91) | 1;
                uint64_t v94 = v193 + 88 * v93;
                if (2 * v91 + 2 < (uint64_t)v11)
                {
                  *(void *)&long long v203 = v193 + 88 * v93;
                  *((void *)&v203 + 1) = v94 + 16;
                  uint64_t v204 = v94 + 32;
                  *(void *)&long long v194 = v94 + 88;
                  *((void *)&v194 + 1) = v94 + 104;
                  std::string::size_type v195 = (char *)(v94 + 120);
                  if (sub_216C592AC((uint64_t)&v210, (uint64_t *)&v203, (uint64_t *)&v194))
                  {
                    v94 += 88;
                    uint64_t v93 = 2 * v92 + 2;
                  }
                }
                *(void *)&long long v203 = v94;
                *((void *)&v203 + 1) = v94 + 16;
                uint64_t v95 = v193 + 88 * v92;
                uint64_t v204 = v94 + 32;
                *(void *)&long long v194 = v95;
                *((void *)&v194 + 1) = v95 + 16;
                std::string::size_type v195 = (char *)(v95 + 32);
                if (!sub_216C592AC((uint64_t)&v210, (uint64_t *)&v203, (uint64_t *)&v194))
                {
                  long long v203 = *(_OWORD *)v95;
                  *(void *)uint64_t v95 = 0;
                  *(void *)(v95 + 8) = 0;
                  LODWORD(v204) = *(_DWORD *)(v95 + 16);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v95 + 16));
                  HIDWORD(v204) = *(_DWORD *)(v95 + 20);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v95 + 20));
                  long long v96 = *(_OWORD *)(v95 + 40);
                  long long v205 = *(_OWORD *)(v95 + 24);
                  long long v206 = v96;
                  uint64_t v97 = v193 + 88 * v92;
                  uint64_t v98 = *(void ***)(v97 + 56);
                  *(void *)(v97 + 56) = 0;
                  long long v207 = v98;
                  long long v99 = *(_OWORD *)(v97 + 64);
                  uint64_t v209 = *(void *)(v97 + 80);
                  long long v208 = v99;
                  *(void *)(v97 + 72) = 0;
                  *(void *)(v97 + 8sub_216C01044((uint64_t *)this, 0) = 0;
                  *(void *)(v97 + 64) = 0;
                  do
                  {
                    uint64_t v100 = v94;
                    sub_21697D0EC(v95, v94);
                    unint64_t v101 = (int *)(v94 + 16);
                    sub_21697DE94((int *)(v95 + 16), (int *)(v94 + 16));
                    uint64_t v102 = (int *)(v94 + 20);
                    sub_21697DEEC((int *)(v95 + 20), (int *)(v94 + 20));
                    long long v103 = *(_OWORD *)(v94 + 24);
                    *(_OWORD *)(v95 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(v94 + 40);
                    *(_OWORD *)(v95 + 24) = v103;
                    uint64_t v104 = *(void ***)(v94 + 56);
                    *(void *)(v94 + 56) = 0;
                    sub_2168EBBB8((void ***)(v95 + 56), v104);
                    unint64_t v105 = (void **)(v95 + 64);
                    if (*(char *)(v95 + 87) < 0) {
                      operator delete(*v105);
                    }
                    long long v106 = *(_OWORD *)(v94 + 64);
                    *(void *)(v95 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(v94 + 80);
                    *(_OWORD *)unint64_t v105 = v106;
                    *(unsigned char *)(v94 + 87) = 0;
                    *(unsigned char *)(v94 + 64) = 0;
                    if (v90 < v93) {
                      break;
                    }
                    uint64_t v107 = (2 * v93) | 1;
                    uint64_t v94 = v193 + 88 * v107;
                    uint64_t v93 = 2 * v93 + 2;
                    if (v93 < (uint64_t)v11)
                    {
                      *(void *)&long long v194 = v193 + 88 * v107;
                      *((void *)&v194 + 1) = v94 + 16;
                      std::string::size_type v195 = (char *)(v94 + 32);
                      long long v210 = (char *)(v94 + 88);
                      BOOL v211 = (char *)(v94 + 104);
                      long long v212 = (char *)(v94 + 120);
                      if (sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210)) {
                        v94 += 88;
                      }
                      else {
                        uint64_t v93 = v107;
                      }
                    }
                    else
                    {
                      uint64_t v93 = v107;
                    }
                    *(void *)&long long v194 = v94;
                    *((void *)&v194 + 1) = v94 + 16;
                    std::string::size_type v195 = (char *)(v94 + 32);
                    long long v210 = (char *)&v203;
                    BOOL v211 = (char *)&v204;
                    long long v212 = (char *)&v205 + 8;
                    uint64_t v95 = v100;
                  }
                  while (!sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
                  long long v108 = *(atomic_uint **)(v100 + 8);
                  *(_OWORD *)uint64_t v100 = v203;
                  *((void *)&v203 + 1) = 0;
                  if (v108 && atomic_fetch_add_explicit(v108 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v108 + 8))(v108);
                  }
                  long long v109 = (void **)(v100 + 64);
                  *(void *)&long long v203 = 0;
                  sub_21697DE94(v101, (int *)&v204);
                  sub_21697DEEC(v102, (int *)&v204 + 1);
                  long long v110 = v206;
                  *(_OWORD *)(v100 + 24) = v205;
                  *(_OWORD *)(v100 + 4sub_216C01044((uint64_t *)this, 0) = v110;
                  int v111 = v207;
                  long long v207 = 0;
                  sub_2168EBBB8((void ***)(v100 + 56), v111);
                  if (*(char *)(v100 + 87) < 0) {
                    operator delete(*v109);
                  }
                  long long v112 = v208;
                  *(void *)(v100 + 8sub_216C01044((uint64_t *)this, 0) = v209;
                  *(_OWORD *)long long v109 = v112;
                  HIBYTE(v209) = 0;
                  LOBYTE(v208) = 0;
                  sub_2168EBBB8(&v207, 0);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
                  a2 = v192;
                  sub_21697C414(&v204);
                  uint64_t v113 = *((void *)&v203 + 1);
                  if (*((void *)&v203 + 1)
                    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
                  }
                }
              }
              int64_t v91 = v92 - 1;
            }
            while (v92);
            int64_t v114 = v187 / 0x58;
            int v184 = (_DWORD *)(v193 + 20);
            uint64_t v183 = (long long *)(v193 + 64);
            do
            {
              unint64_t v115 = a2;
              long long v194 = *(_OWORD *)v193;
              *(void *)uint64_t v193 = 0;
              *(void *)(v193 + 8) = 0;
              LODWORD(v195) = *(_DWORD *)(v193 + 16);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v193 + 16));
              HIDWORD(v195) = *v184;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v184);
              uint64_t v116 = 0;
              long long v117 = *(_OWORD *)(v193 + 40);
              long long v196 = *(_OWORD *)(v193 + 24);
              long long v197 = v117;
              uint64_t v118 = v193;
              uint64_t v119 = *(void ***)(v193 + 56);
              *(void *)(v193 + 56) = 0;
              double v198 = v119;
              long long v120 = *v183;
              uint64_t v200 = *(void *)(v193 + 80);
              long long __p = v120;
              *(void *)(v193 + 72) = 0;
              *(void *)(v193 + 8sub_216C01044((uint64_t *)this, 0) = 0;
              *(void *)uint64_t v183 = 0;
              do
              {
                uint64_t v121 = v118 + 88 * v116 + 88;
                uint64_t v122 = 2 * v116;
                uint64_t v116 = (2 * v116) | 1;
                uint64_t v123 = v122 + 2;
                if (v122 + 2 < v114)
                {
                  *(void *)&long long v203 = v121;
                  *((void *)&v203 + 1) = v121 + 16;
                  uint64_t v204 = v121 + 32;
                  long long v210 = (char *)(v121 + 88);
                  BOOL v211 = (char *)(v121 + 104);
                  long long v212 = (char *)(v121 + 120);
                  if (sub_216C592AC((uint64_t)v201, (uint64_t *)&v203, (uint64_t *)&v210))
                  {
                    v121 += 88;
                    uint64_t v116 = v123;
                  }
                }
                sub_21697D0EC(v118, v121);
                sub_21697DE94((int *)(v118 + 16), (int *)(v121 + 16));
                sub_21697DEEC((int *)(v118 + 20), (int *)(v121 + 20));
                long long v124 = *(_OWORD *)(v121 + 24);
                *(_OWORD *)(v118 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(v121 + 40);
                *(_OWORD *)(v118 + 24) = v124;
                uint64_t v125 = *(void ***)(v121 + 56);
                *(void *)(v121 + 56) = 0;
                sub_2168EBBB8((void ***)(v118 + 56), v125);
                uint64_t v126 = (void **)(v118 + 64);
                if (*(char *)(v118 + 87) < 0) {
                  operator delete(*v126);
                }
                long long v127 = *(_OWORD *)(v121 + 64);
                *(void *)(v118 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(v121 + 80);
                *(_OWORD *)uint64_t v126 = v127;
                *(unsigned char *)(v121 + 87) = 0;
                *(unsigned char *)(v121 + 64) = 0;
                uint64_t v118 = v121;
              }
              while (v116 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
              unint64_t v128 = (_OWORD *)(v121 + 24);
              uint64_t v129 = (void **)(v121 + 64);
              a2 = v115 - 88;
              if (v121 == v115 - 88)
              {
                long long v157 = *(atomic_uint **)(v121 + 8);
                *(_OWORD *)uint64_t v121 = v194;
                *((void *)&v194 + 1) = 0;
                if (v157 && atomic_fetch_add_explicit(v157 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v157 + 8))(v157);
                }
                *(void *)&long long v194 = 0;
                sub_21697DE94((int *)(v121 + 16), (int *)&v195);
                sub_21697DEEC((int *)(v121 + 20), (int *)&v195 + 1);
                long long v158 = v197;
                *unint64_t v128 = v196;
                *(_OWORD *)(v121 + 4sub_216C01044((uint64_t *)this, 0) = v158;
                uint64_t v159 = v198;
                double v198 = 0;
                sub_2168EBBB8((void ***)(v121 + 56), v159);
                if (*(char *)(v121 + 87) < 0) {
                  operator delete(*v129);
                }
                long long v160 = __p;
                *(void *)(v121 + 8sub_216C01044((uint64_t *)this, 0) = v200;
                *(_OWORD *)uint64_t v129 = v160;
                HIBYTE(v20sub_216C01044((uint64_t *)this, 0) = 0;
                LOBYTE(__p) = 0;
              }
              else
              {
                sub_21697D0EC(v121, v115 - 88);
                sub_21697DE94((int *)(v121 + 16), (int *)(v115 - 72));
                sub_21697DEEC((int *)(v121 + 20), (int *)(v115 - 68));
                long long v130 = *(_OWORD *)(v115 - 48);
                *unint64_t v128 = *(_OWORD *)(v115 - 64);
                *(_OWORD *)(v121 + 4sub_216C01044((uint64_t *)this, 0) = v130;
                long long v131 = *(void ***)(v115 - 32);
                *(void *)(v115 - 32) = 0;
                sub_2168EBBB8((void ***)(v121 + 56), v131);
                if (*(char *)(v121 + 87) < 0) {
                  operator delete(*v129);
                }
                long long v178 = (void ***)(v121 + 56);
                unint64_t v180 = (long long *)(v121 + 64);
                long long v132 = *(_OWORD *)(v115 - 24);
                *(void *)(v121 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(v115 - 8);
                *(_OWORD *)uint64_t v129 = v132;
                *(unsigned char *)(v115 - 1) = 0;
                *(unsigned char *)(v115 - 24) = 0;
                uint64_t v133 = *(atomic_uint **)(v115 - 80);
                *(_OWORD *)(v115 - 88) = v194;
                *((void *)&v194 + 1) = 0;
                if (v133 && atomic_fetch_add_explicit(v133 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v133 + 8))(v133);
                }
                char v134 = (void **)(v115 - 24);
                *(void *)&long long v194 = 0;
                sub_21697DE94((int *)(v115 - 72), (int *)&v195);
                sub_21697DEEC((int *)(v115 - 68), (int *)&v195 + 1);
                long long v135 = v197;
                *(_OWORD *)(v115 - 64) = v196;
                *(_OWORD *)(v115 - 48) = v135;
                unint64_t v136 = v198;
                double v198 = 0;
                sub_2168EBBB8((void ***)(v115 - 32), v136);
                if (*(char *)(v115 - 1) < 0) {
                  operator delete(*v134);
                }
                long long v137 = __p;
                *(void *)(v115 - 8) = v200;
                *(_OWORD *)char v134 = v137;
                HIBYTE(v20sub_216C01044((uint64_t *)this, 0) = 0;
                LOBYTE(__p) = 0;
                a2 = v115 - 88;
                uint64_t v138 = v121 + 88 - v193;
                if (v138 >= 89)
                {
                  unint64_t v139 = (v138 / 0x58uLL - 2) >> 1;
                  uint64_t v140 = v193 + 88 * v139;
                  *(void *)&long long v203 = v140;
                  *((void *)&v203 + 1) = v140 + 16;
                  uint64_t v204 = v140 + 32;
                  long long v210 = (char *)v121;
                  BOOL v211 = (char *)(v121 + 16);
                  long long v212 = (char *)(v121 + 32);
                  if (sub_216C592AC((uint64_t)v201, (uint64_t *)&v203, (uint64_t *)&v210))
                  {
                    long long v203 = *(_OWORD *)v121;
                    *(void *)uint64_t v121 = 0;
                    *(void *)(v121 + 8) = 0;
                    LODWORD(v204) = *(_DWORD *)(v121 + 16);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v121 + 16));
                    HIDWORD(v204) = *(_DWORD *)(v121 + 20);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v121 + 20));
                    long long v141 = *(_OWORD *)(v121 + 40);
                    long long v205 = *(_OWORD *)(v121 + 24);
                    long long v206 = v141;
                    int v142 = *v178;
                    const char *v178 = 0;
                    long long v207 = v142;
                    long long v143 = *v180;
                    uint64_t v209 = *(void *)(v121 + 80);
                    long long v208 = v143;
                    *(void *)(v121 + 72) = 0;
                    *(void *)(v121 + 8sub_216C01044((uint64_t *)this, 0) = 0;
                    *(void *)unint64_t v180 = 0;
                    do
                    {
                      uint64_t v144 = v140;
                      sub_21697D0EC(v121, v140);
                      double v145 = (int *)(v140 + 16);
                      sub_21697DE94((int *)(v121 + 16), (int *)(v140 + 16));
                      double v146 = (int *)(v140 + 20);
                      sub_21697DEEC((int *)(v121 + 20), (int *)(v140 + 20));
                      long long v147 = *(_OWORD *)(v140 + 24);
                      *(_OWORD *)(v121 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(v140 + 40);
                      *(_OWORD *)(v121 + 24) = v147;
                      uint64_t v148 = *(void ***)(v140 + 56);
                      *(void *)(v140 + 56) = 0;
                      sub_2168EBBB8((void ***)(v121 + 56), v148);
                      uint64_t v149 = (void **)(v121 + 64);
                      if (*(char *)(v121 + 87) < 0) {
                        operator delete(*v149);
                      }
                      long long v150 = *(_OWORD *)(v144 + 64);
                      *(void *)(v121 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(v144 + 80);
                      *(_OWORD *)uint64_t v149 = v150;
                      *(unsigned char *)(v144 + 87) = 0;
                      *(unsigned char *)(v144 + 64) = 0;
                      if (!v139) {
                        break;
                      }
                      unint64_t v139 = (v139 - 1) >> 1;
                      uint64_t v140 = v193 + 88 * v139;
                      long long v210 = (char *)v140;
                      BOOL v211 = (char *)(v140 + 16);
                      long long v212 = (char *)(v140 + 32);
                      v201[0] = (uint64_t)&v203;
                      v201[1] = (uint64_t)&v204;
                      v201[2] = (uint64_t)&v205 + 8;
                      uint64_t v121 = v144;
                    }
                    while (sub_216C592AC((uint64_t)&v202, (uint64_t *)&v210, v201));
                    uint64_t v151 = *(atomic_uint **)(v144 + 8);
                    *(_OWORD *)uint64_t v144 = v203;
                    *((void *)&v203 + 1) = 0;
                    if (v151 && atomic_fetch_add_explicit(v151 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                      (*(void (**)(atomic_uint *))(*(void *)v151 + 8))(v151);
                    }
                    unint64_t v152 = (void **)(v144 + 64);
                    *(void *)&long long v203 = 0;
                    sub_21697DE94(v145, (int *)&v204);
                    sub_21697DEEC(v146, (int *)&v204 + 1);
                    long long v153 = v206;
                    *(_OWORD *)(v144 + 24) = v205;
                    *(_OWORD *)(v144 + 4sub_216C01044((uint64_t *)this, 0) = v153;
                    long long v154 = v207;
                    long long v207 = 0;
                    sub_2168EBBB8((void ***)(v144 + 56), v154);
                    if (*(char *)(v144 + 87) < 0) {
                      operator delete(*v152);
                    }
                    long long v155 = v208;
                    *(void *)(v144 + 8sub_216C01044((uint64_t *)this, 0) = v209;
                    *(_OWORD *)unint64_t v152 = v155;
                    HIBYTE(v209) = 0;
                    LOBYTE(v208) = 0;
                    sub_2168EBBB8(&v207, 0);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
                    sub_21697C414(&v204);
                    uint64_t v156 = *((void *)&v203 + 1);
                    if (*((void *)&v203 + 1)
                      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
                    {
                      (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
                    }
                  }
                  if (SHIBYTE(v200) < 0) {
                    operator delete((void *)__p);
                  }
                }
              }
              sub_2168EBBB8(&v198, 0);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v195 + 1);
              sub_21697C414(&v195);
              __n128 result = *((void *)&v194 + 1);
              if (*((void *)&v194 + 1)
                && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v194 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
              }
            }
            while (v114-- > 2);
          }
          return result;
        }
        unint64_t v12 = v11 >> 1;
        uint64_t v13 = v9 + 88 * (v11 >> 1);
        if ((unint64_t)v10 >= 0x2C01)
        {
          sub_216C58CE0(v9, v9 + 88 * (v11 >> 1), v186);
          uint64_t v14 = 88 * v12;
          uint64_t v15 = 88 * v12 + v9 - 88;
          sub_216C58CE0(v9 + 88, v15, v182);
          sub_216C58CE0(v9 + 176, v9 + 88 + v14, v181);
          sub_216C58CE0(v15, v13, v9 + 88 + v14);
          sub_216C593AC(v9, v13);
        }
        else
        {
          sub_216C58CE0(v9 + 88 * (v11 >> 1), v9, v186);
        }
        --a3;
        if (a4) {
          break;
        }
        *(void *)&long long v203 = v9 - 88;
        *((void *)&v203 + 1) = v9 - 72;
        uint64_t v204 = v9 - 56;
        *(void *)&long long v194 = v9;
        *((void *)&v194 + 1) = v9 + 16;
        std::string::size_type v195 = (char *)(v9 + 32);
        if (sub_216C592AC((uint64_t)&v210, (uint64_t *)&v203, (uint64_t *)&v194)) {
          break;
        }
        int v45 = *(_DWORD *)(v9 + 16);
        long long v203 = *(_OWORD *)v9;
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        LODWORD(v204) = v45;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v9 + 16));
        HIDWORD(v204) = *(_DWORD *)(v9 + 20);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v9 + 20));
        std::string::size_type v46 = *(void ***)(v9 + 56);
        long long v47 = *(_OWORD *)(v9 + 40);
        long long v205 = *(_OWORD *)(v9 + 24);
        long long v206 = v47;
        *(void *)(v9 + 56) = 0;
        long long v207 = v46;
        long long v48 = *(_OWORD *)(v9 + 64);
        uint64_t v209 = *(void *)(v9 + 80);
        long long v208 = v48;
        *(void *)(v9 + 72) = 0;
        *(void *)(v9 + 8sub_216C01044((uint64_t *)this, 0) = 0;
        *(void *)(v9 + 64) = 0;
        *(void *)&long long v194 = &v203;
        *((void *)&v194 + 1) = &v204;
        std::string::size_type v195 = (char *)&v205 + 8;
        long long v210 = (char *)v186;
        BOOL v211 = v179;
        long long v212 = v177;
        if (sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210))
        {
          unint64_t v49 = v9;
          do
          {
            unint64_t v8 = v49 + 88;
            *(void *)&long long v194 = &v203;
            *((void *)&v194 + 1) = &v204;
            std::string::size_type v195 = (char *)&v205 + 8;
            long long v210 = (char *)(v49 + 88);
            BOOL v211 = (char *)(v49 + 104);
            long long v212 = (char *)(v49 + 120);
            BOOL v50 = sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210);
            unint64_t v49 = v8;
          }
          while (!v50);
        }
        else
        {
          double v51 = (char *)(v9 + 120);
          do
          {
            unint64_t v8 = (unint64_t)(v51 - 32);
            if ((unint64_t)(v51 - 32) >= a2) {
              break;
            }
            *(void *)&long long v194 = &v203;
            *((void *)&v194 + 1) = &v204;
            std::string::size_type v195 = (char *)&v205 + 8;
            long long v210 = v51 - 32;
            BOOL v211 = v51 - 16;
            long long v212 = v51;
            v51 += 88;
          }
          while (!sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
        }
        unint64_t v52 = a2;
        if (v8 < a2)
        {
          unint64_t v53 = a2;
          do
          {
            unint64_t v52 = v53 - 88;
            *(void *)&long long v194 = &v203;
            *((void *)&v194 + 1) = &v204;
            std::string::size_type v195 = (char *)&v205 + 8;
            long long v210 = (char *)(v53 - 88);
            BOOL v211 = (char *)(v53 - 72);
            long long v212 = (char *)(v53 - 56);
            BOOL v54 = sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210);
            unint64_t v53 = v52;
          }
          while (v54);
        }
        while (v8 < v52)
        {
          sub_216C593AC(v8, v52);
          do
          {
            *(void *)&long long v194 = &v203;
            *((void *)&v194 + 1) = &v204;
            double v55 = (char *)(v8 + 104);
            uint64_t v56 = (char *)(v8 + 120);
            v8 += 88;
            std::string::size_type v195 = (char *)&v205 + 8;
            long long v210 = (char *)v8;
            BOOL v211 = v55;
            long long v212 = v56;
          }
          while (!sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
          do
          {
            *(void *)&long long v194 = &v203;
            *((void *)&v194 + 1) = &v204;
            uint64_t v57 = (char *)(v52 - 72);
            long long v58 = (char *)(v52 - 56);
            v52 -= 88;
            std::string::size_type v195 = (char *)&v205 + 8;
            long long v210 = (char *)v52;
            BOOL v211 = v57;
            long long v212 = v58;
          }
          while (sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
        }
        if (v8 - 88 != v9)
        {
          uint64_t v59 = (void **)(v9 + 64);
          sub_21697D0EC(v9, v8 - 88);
          sub_21697DE94((int *)(v9 + 16), (int *)(v8 - 72));
          sub_21697DEEC((int *)(v9 + 20), (int *)(v8 - 68));
          long long v60 = *(_OWORD *)(v8 - 48);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(v8 - 64);
          *(_OWORD *)(v9 + 4sub_216C01044((uint64_t *)this, 0) = v60;
          long long v61 = *(void ***)(v8 - 32);
          *(void *)(v8 - 32) = 0;
          sub_2168EBBB8((void ***)(v9 + 56), v61);
          if (*(char *)(v9 + 87) < 0) {
            operator delete(*v59);
          }
          long long v62 = *(_OWORD *)(v8 - 24);
          *(void *)(v9 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(v8 - 8);
          *(_OWORD *)uint64_t v59 = v62;
          *(unsigned char *)(v8 - 1) = 0;
          *(unsigned char *)(v8 - 24) = 0;
        }
        BOOL v63 = *(atomic_uint **)(v8 - 80);
        *(_OWORD *)(v8 - 88) = v203;
        *((void *)&v203 + 1) = 0;
        if (v63 && atomic_fetch_add_explicit(v63 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v63 + 8))(v63);
        }
        *(void *)&long long v203 = 0;
        sub_21697DE94((int *)(v8 - 72), (int *)&v204);
        sub_21697DEEC((int *)(v8 - 68), (int *)&v204 + 1);
        long long v64 = v206;
        *(_OWORD *)(v8 - 64) = v205;
        *(_OWORD *)(v8 - 48) = v64;
        uint64_t v65 = v207;
        long long v207 = 0;
        sub_2168EBBB8((void ***)(v8 - 32), v65);
        uint64_t v66 = (void **)(v8 - 24);
        if (*(char *)(v8 - 1) < 0) {
          operator delete(*v66);
        }
        long long v67 = v208;
        *(void *)(v8 - 8) = v209;
        *(_OWORD *)uint64_t v66 = v67;
        HIBYTE(v209) = 0;
        LOBYTE(v208) = 0;
        sub_2168EBBB8(&v207, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
        sub_21697C414(&v204);
        __n128 result = *((void *)&v203 + 1);
        if (*((void *)&v203 + 1))
        {
          unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFF, memory_order_release);
          BOOL v4 = add_explicit != 0;
          BOOL v5 = add_explicit == 1;
          if (add_explicit == 1) {
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
        }
LABEL_45:
        a4 = 0;
      }
      long long v203 = *(_OWORD *)v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      long long v16 = (int *)(v9 + 16);
      LODWORD(v204) = *(_DWORD *)(v9 + 16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v9 + 16));
      int v17 = (int *)(v9 + 20);
      HIDWORD(v204) = *(_DWORD *)(v9 + 20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v9 + 20));
      uint64_t v18 = 0;
      unint64_t v20 = (void ***)(v9 + 56);
      char v19 = *(void ***)(v9 + 56);
      std::string::size_type v21 = (_OWORD *)(v9 + 24);
      long long v22 = *(_OWORD *)(v9 + 40);
      long long v205 = *(_OWORD *)(v9 + 24);
      long long v206 = v22;
      *(void *)(v9 + 56) = 0;
      long long v207 = v19;
      long long v23 = *(_OWORD *)(v9 + 64);
      uint64_t v209 = *(void *)(v9 + 80);
      uint64_t v189 = v9 + 64;
      long long v208 = v23;
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 8sub_216C01044((uint64_t *)this, 0) = 0;
      *(void *)(v9 + 64) = 0;
      do
      {
        *(void *)&long long v194 = v9 + v18 + 88;
        *((void *)&v194 + 1) = v9 + v18 + 104;
        std::string::size_type v195 = (char *)(v9 + v18 + 120);
        long long v210 = (char *)&v203;
        BOOL v211 = (char *)&v204;
        long long v212 = (char *)&v205 + 8;
        v18 += 88;
      }
      while (sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
      uint64_t v190 = a3;
      unint64_t v24 = v9 + v18;
      uint64_t v25 = v192;
      if (v18 == 88)
      {
        unint64_t v28 = v192;
        while (v24 < v28)
        {
          unint64_t v26 = v28 - 88;
          *(void *)&long long v194 = v28 - 88;
          *((void *)&v194 + 1) = v28 - 72;
          std::string::size_type v195 = (char *)(v28 - 56);
          long long v210 = (char *)&v203;
          BOOL v211 = (char *)&v204;
          long long v212 = (char *)&v205 + 8;
          BOOL v29 = sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210);
          unint64_t v28 = v26;
          if (v29) {
            goto LABEL_22;
          }
        }
        unint64_t v26 = v28;
      }
      else
      {
        do
        {
          unint64_t v26 = v25 - 88;
          *(void *)&long long v194 = v25 - 88;
          *((void *)&v194 + 1) = v25 - 72;
          std::string::size_type v195 = (char *)(v25 - 56);
          long long v210 = (char *)&v203;
          BOOL v211 = (char *)&v204;
          long long v212 = (char *)&v205 + 8;
          BOOL v27 = sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210);
          uint64_t v25 = v26;
        }
        while (!v27);
      }
LABEL_22:
      v188 = v21;
      unint64_t v8 = v24;
      if (v24 < v26)
      {
        unint64_t v30 = v26;
        do
        {
          sub_216C593AC(v8, v30);
          do
          {
            unint64_t v31 = v8 + 104;
            uint64_t v32 = (char *)(v8 + 120);
            v8 += 88;
            *(void *)&long long v194 = v8;
            *((void *)&v194 + 1) = v31;
            std::string::size_type v195 = v32;
            long long v210 = (char *)&v203;
            BOOL v211 = (char *)&v204;
            long long v212 = (char *)&v205 + 8;
          }
          while (sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
          do
          {
            unint64_t v33 = v30 - 72;
            std::string::size_type v34 = (char *)(v30 - 56);
            v30 -= 88;
            *(void *)&long long v194 = v30;
            *((void *)&v194 + 1) = v33;
            std::string::size_type v195 = v34;
            long long v210 = (char *)&v203;
            BOOL v211 = (char *)&v204;
            long long v212 = (char *)&v205 + 8;
          }
          while (!sub_216C592AC((uint64_t)v201, (uint64_t *)&v194, (uint64_t *)&v210));
        }
        while (v8 < v30);
      }
      uint64_t v191 = v8 - 88;
      if (v8 - 88 != v193)
      {
        sub_21697D0EC(v193, v191);
        sub_21697DE94(v16, (int *)(v8 - 72));
        sub_21697DEEC(v17, (int *)(v8 - 68));
        long long v35 = *(_OWORD *)(v8 - 48);
        _OWORD *v188 = *(_OWORD *)(v8 - 64);
        v188[1] = v35;
        uint64_t v36 = *(void ***)(v8 - 32);
        *(void *)(v8 - 32) = 0;
        sub_2168EBBB8(v20, v36);
        if (*(char *)(v193 + 87) < 0) {
          operator delete(*(void **)v189);
        }
        long long v37 = *(_OWORD *)(v8 - 24);
        *(void *)(v189 + 16) = *(void *)(v8 - 8);
        *(_OWORD *)uint64_t v189 = v37;
        *(unsigned char *)(v8 - 1) = 0;
        *(unsigned char *)(v8 - 24) = 0;
      }
      uint64_t v38 = *(atomic_uint **)(v8 - 80);
      *(_OWORD *)(v8 - 88) = v203;
      *((void *)&v203 + 1) = 0;
      if (v38 && atomic_fetch_add_explicit(v38 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v38 + 8))(v38);
      }
      *(void *)&long long v203 = 0;
      sub_21697DE94((int *)(v8 - 72), (int *)&v204);
      sub_21697DEEC((int *)(v8 - 68), (int *)&v204 + 1);
      long long v39 = v206;
      *(_OWORD *)(v8 - 64) = v205;
      *(_OWORD *)(v8 - 48) = v39;
      uint64_t v40 = v207;
      long long v207 = 0;
      sub_2168EBBB8((void ***)(v8 - 32), v40);
      uint64_t v41 = (void **)(v8 - 24);
      a2 = v192;
      if (*(char *)(v8 - 1) < 0) {
        operator delete(*v41);
      }
      long long v42 = v208;
      *(void *)(v8 - 8) = v209;
      *(_OWORD *)uint64_t v41 = v42;
      HIBYTE(v209) = 0;
      LOBYTE(v208) = 0;
      sub_2168EBBB8(&v207, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v204 + 1);
      sub_21697C414(&v204);
      uint64_t v43 = *((void *)&v203 + 1);
      if (*((void *)&v203 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v203 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
      BOOL v4 = v24 >= v26;
      a3 = v190;
      if (!v4)
      {
LABEL_44:
        __n128 result = sub_216C56EB0(v193, v191, v190, a4 & 1);
        goto LABEL_45;
      }
      BOOL v44 = sub_216C58E34(v193, v191);
      __n128 result = sub_216C58E34(v8, v192);
      if (result) {
        break;
      }
      if (!v44) {
        goto LABEL_44;
      }
    }
    a2 = v8 - 88;
    if (!v44) {
      continue;
    }
    return result;
  }
}

void sub_216C58910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void ***a19, _DWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  sub_2168EBBB8(a19, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a20);
  sub_217324E40(v44, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216C58BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_216C59628(a1, a2, a3, a4);
  uint64_t v14 = a5;
  uint64_t v15 = a5 + 16;
  uint64_t v16 = a5 + 32;
  uint64_t v11 = a4;
  uint64_t v12 = a4 + 16;
  uint64_t v13 = a4 + 32;
  uint64_t result = sub_216C592AC((uint64_t)&v17, &v14, &v11);
  if (result)
  {
    sub_216C593AC(a4, a5);
    uint64_t v14 = a4;
    uint64_t v15 = a4 + 16;
    uint64_t v16 = a4 + 32;
    uint64_t v11 = a3;
    uint64_t v12 = a3 + 16;
    uint64_t v13 = a3 + 32;
    uint64_t result = sub_216C592AC((uint64_t)&v17, &v14, &v11);
    if (result)
    {
      sub_216C593AC(a3, a4);
      uint64_t v14 = a3;
      uint64_t v15 = a3 + 16;
      uint64_t v16 = a3 + 32;
      uint64_t v11 = a2;
      uint64_t v12 = a2 + 16;
      uint64_t v13 = a2 + 32;
      uint64_t result = sub_216C592AC((uint64_t)&v17, &v14, &v11);
      if (result)
      {
        sub_216C593AC(a2, a3);
        uint64_t v14 = a2;
        uint64_t v15 = a2 + 16;
        uint64_t v16 = a2 + 32;
        uint64_t v11 = a1;
        uint64_t v12 = a1 + 16;
        uint64_t v13 = a1 + 32;
        uint64_t result = sub_216C592AC((uint64_t)&v17, &v14, &v11);
        if (result) {
          return sub_216C593AC(a1, a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_216C58CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 16;
  uint64_t v16 = a2;
  uint64_t v17 = a2 + 16;
  uint64_t v7 = a2 + 32;
  uint64_t v18 = a2 + 32;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = a1 + 32;
  uint64_t v13 = a1;
  uint64_t v14 = a1 + 16;
  uint64_t v15 = a1 + 32;
  if (sub_216C592AC((uint64_t)&v19, &v16, &v13))
  {
    uint64_t v16 = a3;
    uint64_t v17 = a3 + 16;
    uint64_t v18 = a3 + 32;
    uint64_t v13 = a2;
    uint64_t v14 = v6;
    uint64_t v15 = v7;
    if (sub_216C592AC((uint64_t)&v19, &v16, &v13))
    {
      uint64_t v10 = a1;
    }
    else
    {
      sub_216C593AC(a1, a2);
      uint64_t v16 = a3;
      uint64_t v17 = a3 + 16;
      uint64_t v18 = a3 + 32;
      uint64_t v13 = a2;
      uint64_t v14 = v6;
      uint64_t v15 = v7;
      uint64_t result = sub_216C592AC((uint64_t)&v19, &v16, &v13);
      if (!result) {
        return result;
      }
      uint64_t v10 = a2;
    }
    uint64_t v12 = a3;
    return sub_216C593AC(v10, v12);
  }
  uint64_t v16 = a3;
  uint64_t v17 = a3 + 16;
  uint64_t v18 = a3 + 32;
  uint64_t v13 = a2;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t result = sub_216C592AC((uint64_t)&v19, &v16, &v13);
  if (result)
  {
    sub_216C593AC(a2, a3);
    uint64_t v16 = a2;
    uint64_t v17 = v6;
    uint64_t v18 = v7;
    uint64_t v13 = a1;
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    uint64_t result = sub_216C592AC((uint64_t)&v19, &v16, &v13);
    if (result)
    {
      uint64_t v10 = a1;
      uint64_t v12 = a2;
      return sub_216C593AC(v10, v12);
    }
  }
  return result;
}

BOOL sub_216C58E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x2E8BA2E8BA2E8BA3 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      *(void *)&long long v29 = a2 - 88;
      *((void *)&v29 + 1) = a2 - 72;
      uint64_t v30 = a2 - 56;
      long long v37 = (long long *)a1;
      uint64_t v38 = (uint64_t *)(a1 + 16);
      long long v39 = (char *)(a1 + 32);
      if (sub_216C592AC((uint64_t)v36, (uint64_t *)&v29, (uint64_t *)&v37)) {
        sub_216C593AC(a1, v2 - 88);
      }
      return 1;
    case 3:
      sub_216C58CE0(a1, a1 + 88, a2 - 88);
      return 1;
    case 4:
      sub_216C59628(a1, a1 + 88, a1 + 176, a2 - 88);
      return 1;
    case 5:
      sub_216C58BA4(a1, a1 + 88, a1 + 176, a1 + 264, a2 - 88);
      return 1;
    default:
      uint64_t v6 = a1 + 176;
      sub_216C58CE0(a1, a1 + 88, a1 + 176);
      uint64_t v7 = a1 + 264;
      if (a1 + 264 == v2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v27 = v2;
      break;
  }
  while (1)
  {
    *(void *)&long long v29 = v7;
    *((void *)&v29 + 1) = v7 + 16;
    uint64_t v30 = v7 + 32;
    long long v37 = (long long *)v6;
    uint64_t v38 = (uint64_t *)(v6 + 16);
    long long v39 = (char *)(v6 + 32);
    if (sub_216C592AC((uint64_t)v36, (uint64_t *)&v29, (uint64_t *)&v37))
    {
      long long v29 = *(_OWORD *)v7;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      LODWORD(v3sub_216C01044((uint64_t *)this, 0) = *(_DWORD *)(v7 + 16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v7 + 16));
      HIDWORD(v3sub_216C01044((uint64_t *)this, 0) = *(_DWORD *)(v7 + 20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v7 + 20));
      long long v10 = *(_OWORD *)(v7 + 40);
      long long v31 = *(_OWORD *)(v7 + 24);
      long long v32 = v10;
      uint64_t v11 = *(void ***)(v7 + 56);
      long long v12 = *(_OWORD *)(v7 + 64);
      *(void *)(v7 + 56) = 0;
      *(void *)(v7 + 64) = 0;
      unint64_t v33 = v11;
      long long v34 = v12;
      uint64_t v35 = *(void *)(v7 + 80);
      uint64_t v13 = v8;
      *(void *)(v7 + 72) = 0;
      *(void *)(v7 + 8sub_216C01044((uint64_t *)this, 0) = 0;
      while (1)
      {
        uint64_t v14 = v13;
        uint64_t v15 = a1 + v13;
        sub_21697D0EC(a1 + v13 + 264, a1 + v13 + 176);
        sub_21697DE94((int *)(v15 + 280), (int *)(v15 + 192));
        sub_21697DEEC((int *)(v15 + 284), (int *)(v15 + 196));
        long long v16 = *(_OWORD *)(v15 + 216);
        *(_OWORD *)(v15 + 288) = *(_OWORD *)(v15 + 200);
        *(_OWORD *)(v15 + 304) = v16;
        uint64_t v17 = *(void ***)(v15 + 232);
        *(void *)(v15 + 232) = 0;
        sub_2168EBBB8((void ***)(v15 + 320), v17);
        uint64_t v18 = (void **)(v15 + 328);
        if (*(char *)(v15 + 351) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v15 + 240);
        *(void *)(v15 + 344) = *(void *)(v15 + 256);
        *(unsigned char *)(v15 + 263) = 0;
        *(unsigned char *)(v15 + 24sub_216C01044((uint64_t *)this, 0) = 0;
        if (v14 == -176) {
          break;
        }
        long long v37 = &v29;
        uint64_t v38 = &v30;
        long long v39 = (char *)&v31 + 8;
        v36[0] = a1 + v14 + 88;
        v36[1] = a1 + v14 + 104;
        v36[2] = a1 + v14 + 120;
        BOOL v19 = sub_216C592AC((uint64_t)v40, (uint64_t *)&v37, v36);
        uint64_t v13 = v14 - 88;
        if (!v19)
        {
          uint64_t v20 = a1 + v13 + 264;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1;
LABEL_14:
      int v28 = v9;
      std::string::size_type v21 = *(atomic_uint **)(v20 + 8);
      *(_OWORD *)uint64_t v20 = v29;
      *((void *)&v29 + 1) = 0;
      if (v21 && atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
      }
      long long v22 = (void **)(a1 + v14 + 240);
      long long v23 = (_OWORD *)(a1 + v14 + 200);
      *(void *)&long long v29 = 0;
      sub_21697DE94((int *)(a1 + v14 + 192), (int *)&v30);
      sub_21697DEEC((int *)(a1 + v14 + 196), (int *)&v30 + 1);
      long long v24 = v32;
      *long long v23 = v31;
      v23[1] = v24;
      uint64_t v25 = v33;
      unint64_t v33 = 0;
      sub_2168EBBB8((void ***)(v20 + 56), v25);
      if (*(char *)(v20 + 87) < 0) {
        operator delete(*v22);
      }
      *(_OWORD *)long long v22 = v34;
      *(void *)(a1 + v14 + 256) = v35;
      HIBYTE(v35) = 0;
      LOBYTE(v34) = 0;
      sub_2168EBBB8(&v33, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
      sub_21697C414(&v30);
      uint64_t v26 = *((void *)&v29 + 1);
      uint64_t v2 = v27;
      if (*((void *)&v29 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v29 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      int v9 = v28 + 1;
      if (v28 == 7) {
        return v7 + 88 == v27;
      }
    }
    uint64_t v6 = v7;
    v8 += 88;
    v7 += 88;
    if (v7 == v2) {
      return 1;
    }
  }
}

void sub_216C59280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216C56B4C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C592AC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  unint64_t v6 = sub_216851B24(*a2);
  if (v6 < sub_216851B24(v5)) {
    return 1;
  }
  uint64_t v8 = *a2;
  unint64_t v9 = sub_216851B24(*a3);
  return v9 >= sub_216851B24(v8) && sub_216C59340((uint64_t)&v10, (uint64_t)a2, (uint64_t)a3);
}

BOOL sub_216C59340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_2169817E8(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8)))return 1; {
  if (sub_2169817E8(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8)))return 0;
  }
  return **(void **)(a2 + 16) < **(void **)(a3 + 16);
}

uint64_t sub_216C593AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v6 = (int *)(a1 + 16);
  int v19 = *(_DWORD *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 16));
  int v20 = *(_DWORD *)(a1 + 20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 20));
  long long v7 = *(_OWORD *)(a1 + 40);
  long long v21 = *(_OWORD *)(a1 + 24);
  long long v22 = v7;
  uint64_t v8 = *(void ***)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  long long v23 = v8;
  char v10 = (void **)(a1 + 64);
  long long v24 = v9;
  uint64_t v25 = *(void *)(a1 + 80);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = 0;
  sub_21697D0EC(a1, a2);
  sub_21697DE94(v6, (int *)(a2 + 16));
  sub_21697DEEC((int *)(a1 + 20), (int *)(a2 + 20));
  long long v11 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v11;
  long long v12 = *(void ***)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  sub_2168EBBB8((void ***)(a1 + 56), v12);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v10);
  }
  long long v13 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8sub_216C01044((uint64_t *)this, 0) = *(void *)(a2 + 80);
  *(_OWORD *)char v10 = v13;
  *(unsigned char *)(a2 + 87) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t v14 = *(atomic_uint **)(a2 + 8);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  if (v14 && atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = (void **)(a2 + 64);
  sub_21697DE94((int *)(a2 + 16), &v19);
  sub_21697DEEC((int *)(a2 + 20), &v20);
  long long v16 = v22;
  *(_OWORD *)(a2 + 24) = v21;
  *(_OWORD *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = v16;
  uint64_t v17 = v23;
  long long v23 = 0;
  sub_2168EBBB8((void ***)(a2 + 56), v17);
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*v15);
  }
  *(_OWORD *)uint64_t v15 = v24;
  *(void *)(a2 + 8sub_216C01044((uint64_t *)this, 0) = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24) = 0;
  sub_2168EBBB8(&v23, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  return 0;
}

uint64_t sub_216C59628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_216C58CE0(a1, a2, a3);
  uint64_t v12 = a4;
  uint64_t v13 = a4 + 16;
  uint64_t v14 = a4 + 32;
  uint64_t v9 = a3;
  uint64_t v10 = a3 + 16;
  uint64_t v11 = a3 + 32;
  uint64_t result = sub_216C592AC((uint64_t)&v15, &v12, &v9);
  if (result)
  {
    sub_216C593AC(a3, a4);
    uint64_t v12 = a3;
    uint64_t v13 = a3 + 16;
    uint64_t v14 = a3 + 32;
    uint64_t v9 = a2;
    uint64_t v10 = a2 + 16;
    uint64_t v11 = a2 + 32;
    uint64_t result = sub_216C592AC((uint64_t)&v15, &v12, &v9);
    if (result)
    {
      sub_216C593AC(a2, a3);
      uint64_t v12 = a2;
      uint64_t v13 = a2 + 16;
      uint64_t v14 = a2 + 32;
      uint64_t v9 = a1;
      uint64_t v10 = a1 + 16;
      uint64_t v11 = a1 + 32;
      uint64_t result = sub_216C592AC((uint64_t)&v15, &v12, &v9);
      if (result) {
        return sub_216C593AC(a1, a2);
      }
    }
  }
  return result;
}

uint64_t sub_216C59720(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216C597E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216C59798(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    sub_21677CA1C();
  }
  return operator new(272 * a2);
}

uint64_t sub_216C597E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 272;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 272;
    sub_216C59874(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_216C59874(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 32) = v5;
    if (v5)
    {
      uint64_t v6 = (atomic_ullong *)(v5 - 16);
      if (*(void *)(a1 + 24)) {
        uint64_t v6 = *(atomic_ullong **)(a1 + 24);
      }
      atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
  }
  sub_216C59A00((char *)(a1 + 48), a2 + 48);
  sub_2169CBF18(a1 + 104, (long long *)(a2 + 104));
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    long long v7 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v7;
    uint64_t v8 = *(void *)(a2 + 168);
    *(void *)(a1 + 168) = v8;
    if (v8)
    {
      uint64_t v9 = (atomic_ullong *)(v8 - 16);
      if (*(void *)(a1 + 160)) {
        uint64_t v9 = *(atomic_ullong **)(a1 + 160);
      }
      atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 176) = 1;
  }
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    long long v10 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 20sub_216C01044((uint64_t *)this, 0) = v10;
    uint64_t v11 = *(void *)(a2 + 216);
    *(void *)(a1 + 216) = v11;
    if (v11)
    {
      uint64_t v12 = (atomic_ullong *)(v11 - 16);
      if (*(void *)(a1 + 208)) {
        uint64_t v12 = *(atomic_ullong **)(a1 + 208);
      }
      atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  uint64_t v13 = *(void *)(a2 + 248);
  *(void *)(a1 + 24sub_216C01044((uint64_t *)this, 0) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 1u, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 256), (_DWORD *)(a2 + 256));
  sub_21698105C((_DWORD *)(a1 + 260), (_DWORD *)(a2 + 260));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  return a1;
}

void sub_216C599DC(_Unwind_Exception *a1)
{
  sub_216C4C32C(v2);
  sub_216C4C378(v1);
  _Unwind_Resume(a1);
}

char *sub_216C59A00(char *__dst, uint64_t a2)
{
  *long long __dst = 0;
  __dst[48] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    sub_216C59A58(__dst, (long long *)a2);
    __dst[48] = 1;
  }
  return __dst;
}

void sub_216C59A44(_Unwind_Exception *a1)
{
  sub_216C4C32C(v1);
  _Unwind_Resume(a1);
}

char *sub_216C59A58(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_216C59AD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216C59AF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    sub_216C4C23C(i - 272);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216C59B40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x78787878787878) {
    unint64_t v9 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_216C59798(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[272 * v4];
  long long v16 = &v10[272 * v9];
  sub_216C59C48((uint64_t)v14, a2);
  char v15 = v14 + 272;
  sub_216C59720(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216C59AF0((uint64_t)&v13);
  return v11;
}

void sub_216C59C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C59AF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C59C48(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v6;
    *(void *)(a2 + 8sub_216C01044((uint64_t *)this, 0) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    long long v7 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 12sub_216C01044((uint64_t *)this, 0) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 12sub_216C01044((uint64_t *)this, 0) = 0;
    *(void *)(a2 + 104) = 0;
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    long long v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v8;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 1;
  }
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    long long v9 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 20sub_216C01044((uint64_t *)this, 0) = v9;
    *(_OWORD *)(a2 + 20sub_216C01044((uint64_t *)this, 0) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a2 + 216) = 0;
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_OWORD *)(a1 + 24sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a2 + 240);
  *(void *)(a2 + 24sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 248) = 0;
  sub_21697D878((_DWORD *)(a1 + 256), (_DWORD *)(a2 + 256));
  sub_21697D8B4((_DWORD *)(a1 + 260), (_DWORD *)(a2 + 260));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  return a1;
}

std::string *sub_216C59DD8(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

std::string *sub_216C59E44(std::string *__dst, std::string *__str)
{
  if (__dst[2].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, __str);
    std::string::operator=(__dst + 1, __str + 1);
  }
  else
  {
    sub_216C59A58((char *)__dst, (long long *)__str);
    __dst[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

uint64_t sub_216C59EA4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_216C45344(a1, (long long *)a2);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 32) = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*(void *)(a1 + 24)) {
        long long v5 = *(atomic_ullong **)(a1 + 24);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
  }
  return a1;
}

uint64_t sub_216C59F10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_216C48340(a1, (long long *)a2);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 32) = v4;
    if (v4)
    {
      long long v5 = (atomic_ullong *)(v4 - 16);
      if (*(void *)(a1 + 24)) {
        long long v5 = *(atomic_ullong **)(a1 + 24);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Usd_CrateData *pxrInternal__aapl__pxrReserved__::Usd_CrateData::Usd_CrateData(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2)
{
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26C75E9F8;
  uint64_t v4 = operator new(0x60uLL);
  sub_216C5D1E0((uint64_t)v4, a2);
  *((void *)this + 3) = v4;
  return this;
}

void sub_216C59FEC(_Unwind_Exception *a1)
{
  operator delete(v2);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(v1, v4);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateData::~Usd_CrateData(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this)
{
  *(void *)this = &unk_26C75E9F8;
  sub_216C65830((uint64_t *)this + 3, 0);

  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(this, v2);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C75E9F8;
  sub_216C65830((uint64_t *)this + 3, 0);

  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(this, v2);
}

{
  const void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C75E9F8;
  sub_216C65830((uint64_t *)this + 3, 0);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(this, v2);

  operator delete(v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Save(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    v15[0] = "usd/crateData.cpp";
    v15[1] = "Save";
    void v15[2] = 1168;
    long long v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Save(const string &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Tried to save to empty fileName");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanPackTo(*(void *)(*(void *)(a1 + 24) + 88), a2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateData::Usd_CrateData((pxrInternal__aapl__pxrReserved__::Usd_CrateData *)v15, 0);
    sub_216C65D70(&v13, a1);
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::CopyFrom((uint64_t)v15, &v13);
    uint64_t v9 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::Usd_CrateData::Save(v15, a2);
    uint64_t v11 = (uint64_t)v16;
    v15[0] = &unk_26C75E9F8;
    long long v16 = 0;
    if (v11)
    {
      uint64_t v12 = (void *)sub_216C65870(v11);
      operator delete(v12);
    }
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData((pxrInternal__aapl__pxrReserved__::SdfAbstractData *)v15, v10);
    return v8;
  }
  uint64_t v6 = *(void *)(a1 + 24);

  return sub_216C5A304(v6, a2, v5);
}

void sub_216C5A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::Usd_CrateData::~Usd_CrateData((pxrInternal__aapl__pxrReserved__::Usd_CrateData *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5A304(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateDataImpl::Save", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  uint64_t v36 = v6;
  int v37 = v7;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Saving usd binary file @%s@", (const char *)a2, a3, v8);
  int v28 = "usd/crateData.cpp";
  long long v29 = "Save";
  unint64_t v30 = 138;
  long long v31 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Save(const string &)";
  char v32 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v35, __p, &v28);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  int v28 = 0;
  long long v29 = 0;
  unint64_t v30 = 0;
  sub_216A6E72C((uint64_t *)&v28, *(void *)(a1 + 48));
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = 0;
  if (v11)
  {
    uint64_t v13 = (__int16 *)(v10 + 4);
    while (1)
    {
      int v14 = *v13;
      v13 += 16;
      if (v14 != -1) {
        break;
      }
      if (v11 == ++v12) {
        goto LABEL_15;
      }
    }
  }
  if (v12 == v11)
  {
LABEL_15:
    char v15 = (char *)v29;
  }
  else
  {
    uint64_t v16 = v10 + 32 * v11;
    char v15 = (char *)v29;
    uint64_t v17 = v10 + 32 * v12;
    do
    {
      uint64_t v18 = (_DWORD *)(v17 + 8);
      if ((unint64_t)v15 >= v30)
      {
        char v15 = (char *)sub_216981B30((uint64_t *)&v28, v18);
      }
      else
      {
        sub_216981010(v15, v18);
        sub_21698105C((_DWORD *)v15 + 1, (_DWORD *)(v17 + 12));
        v15 += 8;
      }
      long long v29 = v15;
      uint64_t v19 = v17 + 32;
      do
      {
        uint64_t v17 = v19;
        if (*(unsigned char *)(v19 - 26)) {
          break;
        }
        v19 += 32;
      }
      while (*(__int16 *)(v17 + 4) == -1);
    }
    while (v17 != v16);
  }
  sub_216C5D678((unint64_t)v28, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15, (uint64_t)__p, v9);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::StartPacking(*(uint64_t **)(a1 + 88), a2, (uint64_t **)__p);
  if (!pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::operator BOOL((uint64_t)__p)) {
    goto LABEL_29;
  }
  int v20 = v28;
  long long v21 = (char *)v29;
  if (v28 != v29)
  {
    do
    {
      uint64_t v22 = sub_216C6095C((void *)a1, v20, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v20 + 1)+ ((*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20+ (*((unsigned int *)v20 + 1) + (unint64_t)*(unsigned int *)v20)* (*((unsigned int *)v20 + 1) + (unint64_t)*(unsigned int *)v20)) >> 1))));
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddSpec((uint64_t)__p[0], (const pxrInternal__aapl__pxrReserved__::SdfPath *)v20, *(_DWORD *)(v22 + 24), *(uint64_t ***)(v22 + 16));
      v20 += 8;
    }
    while (v20 != v21);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::Close((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)__p))
  {
    uint64_t v23 = sub_216C5D6E0((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::~Packer((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer *)__p);
  }
  else
  {
LABEL_29:
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer::~Packer((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Packer *)__p);
    uint64_t v23 = 0;
  }
  __p[0] = &v28;
  sub_216981168((void ***)__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v35);
  int v24 = v37--;
  if (v24)
  {
    uint64_t v25 = (uint64_t)v36;
    int v26 = v24 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v25);
      int v37 = v26--;
    }
    while (v26 != -2);
  }
  return v23;
}

void sub_216C5A5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  long long __p = &a11;
  sub_216981168((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  sub_21684E6B8(v22 - 64);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Open(uint64_t a1, char *a2, char a3)
{
  char v4 = a3;
  return sub_216C5A64C(*(void *)(a1 + 24), a2, &v4);
}

uint64_t sub_216C5A64C(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v6)
  {
    BOOL v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateDataImpl::Open", 0, a3);
    BOOL v8 = v7 != 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v8 = 0;
  }
  long long v21 = v7;
  int v22 = v8;
  if (a2[23] >= 0) {
    uint64_t v9 = (uint64_t *)a2;
  }
  else {
    uint64_t v9 = *(uint64_t **)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Opening usd binary asset @%s@", a2, a3, v9);
  v16[0] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"usd/crateData.cpp";
  v16[1] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"Open";
  uint64_t v16[2] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)186;
  v16[3] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"BOOL pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                                         "eDataImpl::Open(const string &, Args &&...) [Args = <BOOL &>]";
  char v17 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v20, &__p, v16);
  if (v19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open((pxrInternal__aapl__pxrReserved__ *)a2, (char *)*a3, v10, v16);
  uint64_t v11 = v16[0];
  if (v16[0])
  {
    v16[0] = 0;
    sub_216C658D4((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88), v11);
    uint64_t v12 = sub_216C5D6E0((uint64_t *)a1);
    uint64_t v13 = v16[0];
    v16[0] = 0;
    if (v13)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v13);
      operator delete(v14);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v20);
  int v22 = v8 - 1;
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v7);
    int v22 = -1;
  }
  return v12;
}

void sub_216C5A7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a11)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(a11);
    operator delete(v24);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  sub_21684E6B8(v22 - 64);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Open(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 a4)
{
  unsigned __int8 v5 = a4;
  return sub_216C5A834(*(void *)(a1 + 24), a2, a3, &v5);
}

uint64_t sub_216C5A834(uint64_t a1, uint64_t a2, char *a3, unsigned __int8 *a4)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateDataImpl::Open", 0, a3);
    BOOL v10 = v9 != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
  }
  uint64_t v22 = v9;
  int v23 = v10;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Opening usd binary asset @%s@", (const char *)a2, a3, v11);
  v17[0] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"usd/crateData.cpp";
  v17[1] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"Open";
  void v17[2] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)186;
  v17[3] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)"BOOL pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                                         "eDataImpl::Open(const string &, Args &&...) [Ar"
                                                                         "gs = <const std::shared_ptr<pxrInternal__aapl__"
                                                                         "pxrReserved__::ArAsset> &, BOOL &>]";
  char v18 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v21, &__p, v17);
  if (v20 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(a2, (long long *)a3, (char *)*a4, v17);
  uint64_t v12 = v17[0];
  if (v17[0])
  {
    v17[0] = 0;
    sub_216C658D4((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88), v12);
    uint64_t v13 = sub_216C5D6E0((uint64_t *)a1);
    int v14 = v17[0];
    v17[0] = 0;
    if (v14)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v14);
      operator delete(v15);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v21);
  int v23 = v10 - 1;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v9);
    int v23 = -1;
  }
  return v13;
}

void sub_216C5A9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a11)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(a11);
    operator delete(v24);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  sub_21684E6B8(v22 - 80);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::StreamsData(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 3) + 88);
  return v1 && *(unsigned char *)(v1 + 6504) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::HasSpec(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  long long v3 = (void *)*((void *)this + 3);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2)) {
    return v3[4] + 32 * v3[5] != sub_216C6095C(v3, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  }

  return sub_216C6282C(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::EraseSpec(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  long long v3 = (void *)*((void *)this + 3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
  if ((result & 1) == 0)
  {
    v3[10] = v3[4] + 32 * v3[5];
    uint64_t result = sub_216C62B98((uint64_t)v3, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
    if (!result)
    {
      LOBYTE(v1sub_216C01044((uint64_t *)this, 0) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      unsigned __int8 v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s", v6, v7, Text, "usd/crateData.cpp", "EraseSpec", 271, "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::EraseSpec(const SdfPath &)", v10);
      return pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "_data.erase(path)", v8);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::MoveSpec(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return sub_216C5AB9C(this[3], a2, a3);
}

uint64_t sub_216C5AB9C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, _DWORD *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this);
  if ((result & 1) == 0)
  {
    uint64_t v7 = sub_216C6095C(a1, this, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)this + 1)+ ((*((unsigned int *)this + 1)+ (unint64_t)*(unsigned int *)this+ (*((unsigned int *)this + 1) + (unint64_t)*(unsigned int *)this)* (*((unsigned int *)this + 1) + (unint64_t)*(unsigned int *)this)) >> 1))));
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    if (v8 + 32 * v9 == v7)
    {
      int v14 = "usd/crateData.cpp";
      char v15 = "MoveSpec";
      uint64_t v16 = 281;
      char v17 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::MoveSpec(const SdfPath &, const SdfPath &)";
      char v18 = 0;
      uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "oldIter != _data.end()", 0);
      if (!result) {
        return result;
      }
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
    }
    a1[10] = v8 + 32 * v9;
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 24), 1u, memory_order_relaxed);
    }
    int v13 = *(_DWORD *)(v7 + 24);
    sub_216C62D00((uint64_t)a1, v7);
    sub_216C62D64(a1, a3, (uint64_t)&v12);
    if ((v11 & 1) == 0)
    {
      int v14 = "usd/crateData.cpp";
      char v15 = "MoveSpec";
      uint64_t v16 = 288;
      char v17 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::MoveSpec(const SdfPath &, const SdfPath &)";
      char v18 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "iresult.second", 0);
    }
    return (uint64_t)sub_216C5D618(&v12);
  }
  return result;
}

void sub_216C5AD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C5D618((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfPath **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return sub_216C5AD20(this[3], a2);
}

uint64_t sub_216C5AD20(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = (uint64_t)a1;
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1)) {
    return 7;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2))
  {
    uint64_t v6 = sub_216C6095C((void *)v3, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
    if (*(void *)(v3 + 32) + 32 * *(void *)(v3 + 40) != v6) {
      return *(unsigned int *)(v6 + 24);
    }
    return 0;
  }
  if (!sub_216C6282C((void *)v3, a2)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v8);
  int v4 = sub_216C5AD20(v3, &v8);
  if (v4 == 1)
  {
    int v5 = 0;
    uint64_t v3 = 2;
  }
  else if (v4 == 8)
  {
    int v5 = 0;
    uint64_t v3 = 9;
  }
  else
  {
    int v5 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v5) {
    return 0;
  }
  return v3;
}

void sub_216C5AE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, int a3)
{
  int v5 = *(uint64_t **)(a1 + 24);
  if (a3
    || (int v9 = "usd/crateData.cpp",
        uint64_t v10 = "CreateSpec",
        uint64_t v11 = 316,
        uint64_t v12 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::CreateSpec(const SdfPath &, SdfSpecType)",
        char v13 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "specType != SdfSpecTypeUnknown", 0), (result & 1) != 0))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this);
    if ((result & 1) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v7 = (char *)operator new(0x20uLL);
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *(void *)uint64_t v7 = 0;
      int v9 = v7;
      *((_DWORD *)v7 + 6) = 0;
      atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 6, 1u, memory_order_relaxed);
      uint64_t v8 = sub_216C62D64(v5, this, (uint64_t)&v9);
      uint64_t result = (uint64_t)sub_216C5D618((uint64_t *)&v9);
      *(_DWORD *)(v8 + 24) = a3;
      v5[10] = v8;
    }
  }
  return result;
}

void sub_216C5AF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C5D618((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::_VisitSpecs(uint64_t this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2)
{
  uint64_t v3 = this;
  v12[0] = *(void *)(this + 24);
  v12[1] = this;
  double v12[2] = a2;
  uint64_t v5 = *(void *)(v12[0] + 32);
  uint64_t v4 = *(void *)(v12[0] + 40);
  uint64_t v6 = 0;
  if (v4)
  {
    uint64_t v7 = (__int16 *)(v5 + 4);
    while (1)
    {
      int v8 = *v7;
      v7 += 16;
      if (v8 != -1) {
        break;
      }
      if (v4 == ++v6) {
        return this;
      }
    }
  }
  if (v6 != v4)
  {
    uint64_t v9 = v5 + 32 * v4;
    uint64_t v10 = v5 + 32 * v6;
    do
    {
      this = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v3, v10 + 8);
      if (!this) {
        break;
      }
      this = sub_216C62E24((uint64_t)v12, v10 + 8, *(_DWORD *)(v10 + 24));
      if (!this) {
        break;
      }
      uint64_t v11 = v10 + 32;
      do
      {
        uint64_t v10 = v11;
        if (*(unsigned char *)(v11 - 26)) {
          break;
        }
        v11 += 32;
      }
      while (*(__int16 *)(v10 + 4) == -1);
    }
    while (v10 != v9);
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Has(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, uint64_t a4)
{
  return sub_216C5B038(*(void **)(a1 + 24), a2, a3, a4, 0);
}

BOOL sub_216C5B038(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, uint64_t a4, _DWORD *a5)
{
  void v26[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v10)
  {
    if (a5) {
      *a5 = 0;
    }
  }
  else
  {
    if (a5) {
      *a5 = *(_DWORD *)(v10 + 24);
    }
    uint64_t v11 = *(uint64_t **)(v10 + 16);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1] - *v11;
    if (v13)
    {
      uint64_t v14 = v13 / 24;
      char v15 = (uint64_t *)(v12 + 8);
      while ((*(v15 - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v15 += 3;
        if (!--v14) {
          goto LABEL_11;
        }
      }
      if (a4)
      {
        if (sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
        {
          uint64_t v20 = a1[11];
          uint64_t v21 = v15[1];
          if ((v21 & 4) != 0) {
            char v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
          }
          uint64_t v22 = *v15;
          v26[1] = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v20, v22, (uint64_t)v26);
        }
        else
        {
          sub_2168EE4C4(v26, v15);
        }
        int v23 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
        if (!v23) {
          int v23 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
        }
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v23 & 0xFFFFFFFFFFFFFFF8))
        {
          sub_216C631F0((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        }
        else
        {
          int v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v24) {
            int v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v24 + 30) & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_35;
          }
          sub_216C63430((pxrInternal__aapl__pxrReserved__::VtValue *)v26, v25);
        }
        sub_2168ED33C(v26, v25);
        sub_2168EE084((uint64_t)v25);
LABEL_35:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a4 + 8))(a4, v26);
        sub_2168EE084((uint64_t)v26);
        return v18;
      }
      return 1;
    }
  }
LABEL_11:
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v16) {
    uint64_t v16 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v16 & 0xFFFFFFFFFFFFFFF8))
  {
    char v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v17) {
      char v17 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v17 + 6) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
  }

  return sub_216C635A8(a1, a2, (uint64_t)a3, a4);
}

void sub_216C5B354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Has(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return sub_216C5B388(*((void **)this + 3), a2, a3, a4, 0);
}

BOOL sub_216C5B388(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, _DWORD *a5)
{
  void v24[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v10)
  {
    if (a5) {
      *a5 = 0;
    }
  }
  else
  {
    if (a5) {
      *a5 = *(_DWORD *)(v10 + 24);
    }
    uint64_t v11 = *(uint64_t **)(v10 + 16);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1] - *v11;
    if (v13)
    {
      uint64_t v14 = v13 / 24;
      char v15 = (uint64_t *)(v12 + 8);
      while ((*(v15 - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v15 += 3;
        if (!--v14) {
          goto LABEL_11;
        }
      }
      if (!a4) {
        return 1;
      }
      if (sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        uint64_t v19 = a1[11];
        uint64_t v20 = v15[1];
        if ((v20 & 4) != 0) {
          char v15 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v15);
        }
        uint64_t v21 = *v15;
        v24[1] = 0;
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v19, v21, (uint64_t)v24);
      }
      else
      {
        sub_2168EE4C4(v24, v15);
      }
      sub_2168ED33C(a4, v24);
      sub_2168EE084((uint64_t)v24);
      uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      if (!v22) {
        uint64_t v22 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v22 & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216C631F0((uint64_t)a1, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)v24);
      }
      else
      {
        int v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v23) {
          int v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 30) & 0xFFFFFFFFFFFFFFF8)) {
          return 1;
        }
        sub_216C63430(a4, v24);
      }
      sub_2168ED33C(a4, v24);
      sub_2168EE084((uint64_t)v24);
      return 1;
    }
  }
LABEL_11:
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v16) {
    uint64_t v16 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v16 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_34;
  }
  char v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v17) {
    char v17 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v17 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
LABEL_34:

  return sub_216C63A18((int)a1, a2, (uint64_t)a3, (uint64_t)a4);
}

void sub_216C5B678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::HasSpecAndField(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, uint64_t a4, _DWORD *a5)
{
  return sub_216C5B038(*(void **)(a1 + 24), a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::HasSpecAndField(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, _DWORD *a5)
{
  return sub_216C5B388(*(void **)(a1 + 24), a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateData::Get@<W0>(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v4 = (void *)*((void *)this + 3);
  *((void *)a4 + 1) = 0;
  return sub_216C5B388(v4, a2, a3, a4, 0);
}

void sub_216C5B6D8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetTypeid(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return sub_216C5B6F4(*((void **)this + 3), (unsigned int *)a2, a3);
}

void *sub_216C5B6F4(void *a1, unsigned int *a2, void *a3)
{
  uint64_t v5 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v5) {
    return (void *)MEMORY[0x263F8C288];
  }
  uint64_t v6 = *(uint64_t **)(v5 + 16);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1] - *v6;
  if (!v8) {
    return (void *)MEMORY[0x263F8C288];
  }
  uint64_t v9 = v8 / 24;
  unint64_t v10 = *a3 & 0xFFFFFFFFFFFFFFF8;
  for (uint64_t i = (uint64_t *)(v7 + 8); (*(i - 1) & 0xFFFFFFFFFFFFFFF8) != v10; i += 3)
  {
    if (!--v9) {
      return (void *)MEMORY[0x263F8C288];
    }
  }
  if (sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)i))
  {
    uint64_t v13 = a1[11];
    uint64_t v14 = i[1];
    if ((v14 & 4) != 0) {
      uint64_t i = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(i);
    }
    uint64_t v15 = *i;
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetTypeid(v13, v15);
  }
  else
  {
    return (void *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)i);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::List@<X0>(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_216C5B828(*((void **)this + 3), a2, a3);
}

uint64_t sub_216C5B828@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (a1[4] + 32 * a1[5] != result)
  {
    uint64_t v7 = *(void **)(result + 16);
    sub_216A9C5B8(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3));
    uint64_t v8 = v7[1] - *v7;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = v8 / 24;
      do
      {
        sub_2168D2318((void *)(*(void *)a3 + v9), (void *)(*v7 + v10));
        v10 += 24;
        v9 += 8;
        --v11;
      }
      while (v11);
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a2);
    if (result)
    {
      int v17 = 0;
      sub_216C62A5C((pxrInternal__aapl__pxrReserved__::VtValue *)v18, a2, a1, &v17);
      if (v17 == 1)
      {
        uint64_t v13 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v13) {
          uint64_t v13 = (uint64_t *)sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        uint64_t v14 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v14 >= *(void *)(a3 + 16))
        {
LABEL_19:
          uint64_t v16 = sub_216973984((char **)a3, v13);
LABEL_20:
          *(void *)(a3 + 8) = v16;
          return sub_2168EE084((uint64_t)v18);
        }
      }
      else
      {
        if (v17 != 8) {
          return sub_2168EE084((uint64_t)v18);
        }
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v12) {
          uint64_t v12 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        uint64_t v13 = (uint64_t *)((char *)v12 + 48);
        uint64_t v14 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v14 >= *(void *)(a3 + 16)) {
          goto LABEL_19;
        }
      }
      uint64_t v15 = *v13;
      *uint64_t v14 = *v13;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v14 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v16 = (char *)(v14 + 1);
      goto LABEL_20;
    }
  }
  return result;
}

void sub_216C5BA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateData::Set(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
}

void sub_216C5BA78(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!*((void *)a4 + 1))
  {
    sub_216C5C150(a1, (unsigned int *)this, a3);
    return;
  }
  uint64_t v7 = a4;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(this))
  {
    uint64_t v38 = "usd/crateData.cpp";
    long long v39 = "Set";
    uint64_t v40 = 533;
    uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Set(const SdfPath &, const TfToken &, const VtValue &)";
    char v42 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    unint64_t v9 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      uint64_t v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        uint64_t v10 = *(const char **)v10;
      }
    }
    else
    {
      uint64_t v10 = "";
    }
    sub_216928738((uint64_t)v7);
    if (v37 >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v38, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set fields on relationship target or attribute connection specs: <%s>:%s = %s", Text, v10, (const char *)v15);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v11 = a1[10];
  if (v11 == a1[4] + 32 * a1[5])
  {
    LODWORD(v13) = *(_DWORD *)this;
    LODWORD(v14) = *((_DWORD *)this + 1);
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    unint64_t v13 = *(void *)this;
    if (v12 == *(void *)this) {
      goto LABEL_18;
    }
    unint64_t v14 = HIDWORD(v13);
  }
  uint64_t v16 = sub_216C6095C(a1, this, bswap64(0x9E3779B97F4A7C55* (((v14+ (unint64_t)v13+ (v14 + (unint64_t)v13)* (v14 + (unint64_t)v13)) >> 1)+ v14)));
  if (a1[4] + 32 * a1[5] == v16)
  {
    uint64_t v38 = "usd/crateData.cpp";
    long long v39 = "Set";
    uint64_t v40 = 541;
    uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Set(const SdfPath &, const TfToken &, const VtValue &)";
    char v42 = 0;
    unint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    unint64_t v33 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v33)
    {
      char v34 = (const char *)(v33 + 16);
      if (*(char *)(v33 + 39) < 0) {
        char v34 = *(const char **)v34;
      }
    }
    else
    {
      char v34 = "";
    }
    uint64_t v35 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Tried to set field '%s' on nonexistent spec at <%s>", v31, v32, v30, v34);
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "i != _data.end()", v35)) {
      return;
    }
  }
  a1[10] = v16;
LABEL_18:
  int v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v17) {
    int v17 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v17 & 0xFFFFFFFFFFFFFFF8)) {
    return;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v18) {
    uint64_t v18 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    return;
  }
  long long v39 = 0;
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v19) {
    uint64_t v19 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v19 & 0xFFFFFFFFFFFFFFF8))
  {
    sub_216C63B3C(v7, (pxrInternal__aapl__pxrReserved__::VtValue *)__p);
  }
  else
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v20) {
      uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v20 + 30) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_33;
    }
    sub_216C63D98(v7, (uint64_t)__p);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v38;
  sub_2168ED33C(&v38, __p);
  sub_2168EE084((uint64_t)__p);
LABEL_33:
  uint64_t v21 = a1[10];
  uint64_t v23 = *(void *)(v21 + 16);
  uint64_t v22 = (uint64_t ***)(v21 + 16);
  unsigned int v24 = atomic_load((unsigned int *)(v23 + 24));
  if (v24 != 1) {
    sub_216C64A94(v22);
  }
  uint64_t v25 = *v22;
  int v26 = v25[1];
  if (v26 == *v25)
  {
LABEL_39:
    if (v26 >= v25[2])
    {
      uint64_t v29 = sub_216C64B28((uint64_t *)v25, a3, v7);
    }
    else
    {
      sub_216C64C38(v25[1], a3, v7);
      uint64_t v29 = (uint64_t)(v26 + 3);
      v25[1] = v26 + 3;
    }
    v25[1] = (uint64_t *)v29;
  }
  else
  {
    uint64_t v27 = ((char *)v26 - (char *)*v25) / 24;
    int v28 = *v25 + 1;
    while ((*(v28 - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      v28 += 3;
      if (!--v27) {
        goto LABEL_39;
      }
    }
    sub_2168EC6DC(v28, v7);
  }
  sub_2168EE084((uint64_t)&v38);
}

void sub_216C5BED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Set(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t (***a4)(void, unsigned char *))
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v13 = 0;
  if (((**a4)(a4, v12) & 1) == 0)
  {
    v9[0] = "usd/crateData.cpp";
    v9[1] = "Set";
    double v9[2] = 588;
    void v9[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::Set(const SdfPath &, const TfToken &, const SdfAbs"
            "tractDataConstValue &)";
    char v10 = 0;
    int v11 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v9, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "value.GetValue(&val)");
  }
  sub_216C5BA78(v6, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  return sub_2168EE084((uint64_t)v12);
}

void sub_216C5C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::Erase(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (void *)*((void *)this + 3);
  uint64_t result = sub_216C6095C(v4, a2, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1))));
  if (v4[4] + 32 * v4[5] != result)
  {
    uint64_t v7 = (uint64_t *)(result + 16);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v8 = *(void *)(v6 + 8) - *(void *)v6;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8 / 24;
      while ((*(void *)(*(void *)v6 + v9) & 0xFFFFFFFFFFFFFFF8) != (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v9 += 24;
        if (!--v10) {
          return result;
        }
      }
      unsigned int v11 = atomic_load((unsigned int *)(v6 + 24));
      if (v11 != 1) {
        sub_216C64A94((uint64_t ***)(result + 16));
      }
      uint64_t v12 = *v7;
      sub_216A94EA0((void *)(*(void *)v12 + v9 + 24), *(void **)(v12 + 8), (void *)(*(void *)v12 + v9));
      return sub_216A94584(v12, v13);
    }
  }
  return result;
}

uint64_t sub_216C5C150(void *a1, unsigned int *a2, void *a3)
{
  uint64_t result = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] != result)
  {
    uint64_t v7 = (uint64_t *)(result + 16);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v8 = *(void *)(v6 + 8) - *(void *)v6;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8 / 24;
      while ((*(void *)(*(void *)v6 + v9) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v9 += 24;
        if (!--v10) {
          return result;
        }
      }
      unsigned int v11 = atomic_load((unsigned int *)(v6 + 24));
      if (v11 != 1) {
        sub_216C64A94((uint64_t ***)(result + 16));
      }
      uint64_t v12 = *v7;
      sub_216A94EA0((void *)(*(void *)v12 + v9 + 24), *(void **)(v12 + 8), (void *)(*(void *)v12 + v9));
      return sub_216A94584(v12, v13);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateData::ListAllTimeSamples(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, uint64_t a2@<X8>)
{
  sub_216C64CB0(*((void **)this + 3), (double **)&__p);
  sub_216C6520C(a2, (double *)__p, v4);
  if (__p)
  {
    uint64_t v4 = (double *)__p;
    operator delete(__p);
  }
}

void sub_216C5C2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (double **)sub_216C64DDC(*((void **)this + 3), (unsigned int *)a2);
  return sub_216C65290(a3, *v4, v4[1]);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, double a2, double *a3, double *a4)
{
  sub_216C64CB0(*((void **)this + 3), &v19);
  uint64_t v7 = v19;
  if (v19 == v20)
  {
    uint64_t v17 = 0;
    if (!v19) {
      return v17;
    }
    goto LABEL_17;
  }
  double v8 = *v19;
  if (*v19 >= a2 || (double v8 = *(v20 - 1), v8 <= a2))
  {
    *a4 = v8;
    goto LABEL_15;
  }
  unint64_t v9 = v20 - v19;
  uint64_t v10 = v19;
  do
  {
    unint64_t v11 = v9 >> 1;
    uint64_t v12 = &v10[v9 >> 1];
    double v14 = *v12;
    uint64_t v13 = v12 + 1;
    v9 += ~(v9 >> 1);
    if (v14 < a2) {
      uint64_t v10 = v13;
    }
    else {
      unint64_t v9 = v11;
    }
  }
  while (v9);
  double v15 = *v10;
  *a4 = *v10;
  *a3 = v15;
  if ((char *)v10 - (char *)v7 >= 1 && v15 != a2)
  {
    double v8 = *(v10 - 1);
LABEL_15:
    *a3 = v8;
  }
  uint64_t v17 = 1;
  if (v7)
  {
LABEL_17:
    uint64_t v20 = v7;
    operator delete(v7);
  }
  return v17;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216C64DDC(*((void **)this + 3), (unsigned int *)a2);
  return (v2[1] - *v2) >> 3;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  double v8 = sub_216C64DDC(*((void **)this + 3), (unsigned int *)a2);
  unint64_t v9 = (double *)*v8;
  uint64_t v10 = v8[1];
  if (*v8 != v10)
  {
    double v11 = *v9;
    if (*v9 >= a3 || (double v11 = *(double *)(v10 - 8), v11 <= a3))
    {
      *a5 = v11;
    }
    else
    {
      unint64_t v12 = (v10 - (uint64_t)v9) >> 3;
      uint64_t v13 = (double *)*v8;
      do
      {
        unint64_t v14 = v12 >> 1;
        double v15 = &v13[v12 >> 1];
        double v17 = *v15;
        uint64_t v16 = v15 + 1;
        v12 += ~(v12 >> 1);
        if (v17 < a3) {
          uint64_t v13 = v16;
        }
        else {
          unint64_t v12 = v14;
        }
      }
      while (v12);
      double v18 = *v13;
      *a5 = *v13;
      *a4 = v18;
      if ((char *)v13 - (char *)v9 < 1 || v18 == a3) {
        return 1;
      }
      double v11 = *(v13 - 1);
    }
    *a4 = v11;
    return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::QueryTimeSample(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return sub_216C5C50C(*((void **)this + 3), (unsigned int *)a2, a4, a3);
}

uint64_t sub_216C5C50C(void *a1, unsigned int *a2, void *a3, double a4)
{
  v34[2] = *MEMORY[0x263EF8340];
  double v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8) {
    double v8 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t v9 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v9) {
    return 0;
  }
  uint64_t v10 = *(uint64_t **)(v9 + 16);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1] - *v10;
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12 / 24;
  unint64_t v14 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::VtValue *)(v11 + 8);
        (*((void *)i - 1) & 0xFFFFFFFFFFFFFFF8) != v14;
        uint64_t i = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)i + 24))
  {
    if (!--v13) {
      return 0;
    }
  }
  uint64_t result = sub_216C63758(i);
  if (result)
  {
    uint64_t v17 = *((void *)i + 1);
    if ((v17 & 4) != 0) {
      double v18 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(i);
    else {
      double v18 = *(void **)i;
    }
    uint64_t v19 = (double **)v18[1];
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    if (v21 == v20)
    {
      uint64_t v23 = v21;
    }
    else
    {
      unint64_t v22 = v21 - v20;
      uint64_t v23 = v20;
      do
      {
        unint64_t v24 = v22 >> 1;
        uint64_t v25 = &v23[v22 >> 1];
        double v27 = *v25;
        int v26 = v25 + 1;
        v22 += ~(v22 >> 1);
        if (v27 < a4) {
          uint64_t v23 = v26;
        }
        else {
          unint64_t v22 = v24;
        }
      }
      while (v22);
    }
    if (v21 != v23 && *v23 == a4)
    {
      if (a3)
      {
        uint64_t v28 = v23 - v20;
        if (*v18) {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetTimeSampleValueImpl(a1[11], (uint64_t)v18, v28, &v32);
        }
        else {
          sub_2168EE4C4(&v32, (void *)(v18[2] + 16 * v28));
        }
        if (sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
        {
          uint64_t v29 = a1[11];
          if ((v33 & 4) != 0) {
            unint64_t v30 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
          }
          else {
            unint64_t v30 = &v32;
          }
          uint64_t v31 = *v30;
          v34[1] = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v29, v31, (uint64_t)v34);
        }
        else
        {
          sub_2168EE4C4(v34, &v32);
        }
        sub_2168ED33C(a3, v34);
        sub_2168EE084((uint64_t)v34);
        sub_2168EE084((uint64_t)&v32);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_216C5C770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateData::QueryTimeSample(uint64_t a1, unsigned int *a2, uint64_t (***a3)(void, void *), double a4)
{
  void v8[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(a1 + 24);
  if (a3)
  {
    v8[1] = 0;
    if (sub_216C5C50C(v4, a2, v8, a4)) {
      uint64_t v6 = (**a3)(a3, v8);
    }
    else {
      uint64_t v6 = 0;
    }
    sub_2168EE084((uint64_t)v8);
    return v6;
  }
  else
  {
    return sub_216C5C50C(v4, a2, 0, a4);
  }
}

void sub_216C5C888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

atomic_uint **pxrInternal__aapl__pxrReserved__::Usd_CrateData::SetTimeSample(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return sub_216C5C8A4(*((void **)this + 3), (unsigned int *)a2, (char *)a4, a3);
}

atomic_uint **sub_216C5C8A4(void *a1, unsigned int *a2, char *a3, double a4)
{
  v50[2] = *(void ***)MEMORY[0x263EF8340];
  double v49 = a4;
  if (!*((void *)a3 + 1))
  {
    return sub_216C5CD44(a1, a2, a4);
  }
  uint64_t v47 = 0;
  uint64_t v7 = operator new(0x20uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = 0;
  *(void *)long long v48 = v7;
  *((_DWORD *)v7 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 6, 1u, memory_order_relaxed);
  memset(&v48[8], 0, 32);
  double v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8) {
    double v8 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[10];
  if (v11 == v9 + 32 * v10)
  {
    LODWORD(v12) = *a2;
    LODWORD(v13) = a2[1];
  }
  else
  {
    unint64_t v12 = *(void *)a2;
    if (*(void *)(v11 + 8) == *(void *)a2) {
      goto LABEL_12;
    }
    unint64_t v13 = HIDWORD(v12);
  }
  uint64_t v11 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (((v12+ (unint64_t)v13+ (v12 + (unint64_t)v13)* (v12 + (unint64_t)v13)) >> 1)+ v13)));
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
LABEL_12:
  if (v9 + 32 * v10 == v11
    || (uint64_t v17 = *(unsigned int **)(v11 + 16),
        uint64_t v16 = (uint64_t ***)(v11 + 16),
        double v15 = v17,
        uint64_t v18 = *(void *)v17,
        (uint64_t v19 = *((void *)v17 + 1) - *(void *)v17) == 0))
  {
LABEL_17:
    unint64_t v22 = 0;
    char v23 = 1;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = v19 / 24;
    while ((*(void *)(v18 + v20 * 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)v8 & 0xFFFFFFFFFFFFFFF8))
    {
      v20 += 3;
      if (!--v21) {
        goto LABEL_17;
      }
    }
    unsigned int v41 = atomic_load(v15 + 6);
    if (v41 != 1) {
      sub_216C64A94(v16);
    }
    unint64_t v22 = (atomic_uint **)&(**v16)[v20 + 1];
    if (sub_216C63758((pxrInternal__aapl__pxrReserved__::VtValue *)v22))
    {
      char v42 = sub_216C64A00(v22);
      char v23 = 0;
      uint64_t v43 = *(void *)v42;
      *(void *)char v42 = v47;
      long long v44 = *(_OWORD *)(v42 + 2);
      *((void *)v42 + 1) = *(void *)v48;
      *((void *)v42 + 2) = *(void *)&v48[8];
      *(_OWORD *)long long v48 = v44;
      long long v45 = *(_OWORD *)(v42 + 6);
      *(_OWORD *)(v42 + 6) = *(_OWORD *)&v48[16];
      uint64_t v46 = *((void *)v42 + 5);
      *((void *)v42 + 5) = *(void *)&v48[32];
      uint64_t v47 = v43;
      *(_OWORD *)&v48[16] = v45;
      *(void *)&v48[32] = v46;
    }
    else
    {
      char v23 = 0;
    }
  }
  uint64_t v25 = **(void **)v48;
  unint64_t v24 = *(double **)(*(void *)v48 + 8);
  if (v24 == **(double ***)v48)
  {
    double v27 = *(double **)(*(void *)v48 + 8);
  }
  else
  {
    unint64_t v26 = ((uint64_t)v24 - **(void **)v48) >> 3;
    double v27 = **(double ***)v48;
    do
    {
      unint64_t v28 = v26 >> 1;
      uint64_t v29 = &v27[v26 >> 1];
      double v31 = *v29;
      unint64_t v30 = v29 + 1;
      v26 += ~(v26 >> 1);
      if (v31 < v49) {
        double v27 = v30;
      }
      else {
        unint64_t v26 = v28;
      }
    }
    while (v26);
  }
  if (v24 != v27 && *v27 == v49)
  {
    if (v47)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(a1[11], &v47);
      uint64_t v25 = **(void **)v48;
    }
    sub_2168EC6DC((void *)(*(void *)&v48[8] + 2 * ((void)v27 - v25)), a3);
  }
  else
  {
    uint64_t v32 = a1[11];
    unsigned int v33 = atomic_load((unsigned int *)(*(void *)v48 + 24));
    if (v33 != 1) {
      sub_216C657A8((atomic_uint **)v48);
    }
    if (v47) {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(v32, &v47);
    }
    uint64_t v34 = ((uint64_t)v27 - v25) >> 3;
    sub_216C65314(*(uint64_t *)v48, (char *)(**(void **)v48 + 8 * v34), (char *)&v49);
    sub_216C65558(&v48[8], (char *)(*(void *)&v48[8] + 16 * v34), a3);
  }
  if (v23)
  {
    uint64_t v35 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    if (!v35) {
      uint64_t v35 = (uint64_t *)sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    }
    sub_216C64130(&v47, (pxrInternal__aapl__pxrReserved__::VtValue *)v50);
    sub_216C5BA78(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v35, (pxrInternal__aapl__pxrReserved__::VtValue *)v50);
    sub_2168EE084((uint64_t)v50);
  }
  else
  {
    uint64_t v36 = sub_216C64A00(v22);
    uint64_t v37 = *(void *)v36;
    *(void *)uint64_t v36 = v47;
    uint64_t v47 = v37;
    long long v38 = *(_OWORD *)(v36 + 2);
    *((void *)v36 + 1) = *(void *)v48;
    *((void *)v36 + 2) = *(void *)&v48[8];
    *(_OWORD *)long long v48 = v38;
    long long v39 = *(_OWORD *)(v36 + 6);
    *(_OWORD *)(v36 + 6) = *(_OWORD *)&v48[16];
    *(_OWORD *)&v48[16] = v39;
    uint64_t v40 = *((void *)v36 + 5);
    *((void *)v36 + 5) = *(void *)&v48[32];
    *(void *)&v48[32] = v40;
  }
  v50[0] = (void **)&v48[8];
  sub_216932118(v50);
  return sub_2169CB1D8((atomic_uint **)v48);
}

void sub_216C5CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

atomic_uint **pxrInternal__aapl__pxrReserved__::Usd_CrateData::EraseTimeSample(pxrInternal__aapl__pxrReserved__::Usd_CrateData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  return sub_216C5CD44(*((void **)this + 3), (unsigned int *)a2, a3);
}

atomic_uint **sub_216C5CD44(void *a1, unsigned int *a2, double a3)
{
  uint64_t v64 = 0;
  uint64_t v6 = operator new(0x20uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)uint64_t v65 = v6;
  *((_DWORD *)v6 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 6, 1u, memory_order_relaxed);
  memset(&v65[8], 0, 32);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v7) {
    uint64_t v7 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[10];
  if (v10 == v8 + 32 * v9)
  {
    LODWORD(v11) = *a2;
    LODWORD(v12) = a2[1];
    goto LABEL_7;
  }
  unint64_t v11 = *(void *)a2;
  if (*(void *)(v10 + 8) != *(void *)a2)
  {
    unint64_t v12 = HIDWORD(v11);
LABEL_7:
    uint64_t v10 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (((v11+ (unint64_t)v12+ (v11 + (unint64_t)v12)* (v11 + (unint64_t)v12)) >> 1)+ v12)));
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
  }
  if (v8 + 32 * v9 != v10)
  {
    double v15 = *(unsigned int **)(v10 + 16);
    unint64_t v14 = (uint64_t ***)(v10 + 16);
    unint64_t v13 = v15;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *((void *)v15 + 1) - *(void *)v15;
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v17 / 24;
      while ((*(void *)(v16 + v18 * 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)v7 & 0xFFFFFFFFFFFFFFF8))
      {
        v18 += 3;
        if (!--v19) {
          goto LABEL_49;
        }
      }
      unsigned int v20 = atomic_load(v13 + 6);
      if (v20 != 1) {
        sub_216C64A94(v14);
      }
      uint64_t v21 = (atomic_uint **)&(**v14)[v18 + 1];
      if (sub_216C63758((pxrInternal__aapl__pxrReserved__::VtValue *)v21))
      {
        unint64_t v22 = sub_216C64A00(v21);
        uint64_t v23 = *(void *)v22;
        *(void *)unint64_t v22 = v64;
        uint64_t v64 = v23;
        long long v24 = *(_OWORD *)(v22 + 2);
        *(_OWORD *)(v22 + 2) = *(_OWORD *)v65;
        long long v25 = *(_OWORD *)(v22 + 6);
        *(_OWORD *)(v22 + 6) = *(_OWORD *)&v65[16];
        *(_OWORD *)uint64_t v65 = v24;
        *(_OWORD *)&v65[16] = v25;
        uint64_t v26 = *((void *)v22 + 5);
        *((void *)v22 + 5) = *(void *)&v65[32];
        *(void *)&v65[32] = v26;
        uint64_t v28 = *(void *)v24;
        double v27 = *(double **)(v24 + 8);
        uint64_t v29 = (uint64_t)v27 - *(void *)v24;
        if (v27 == *(double **)v24)
        {
          double v31 = *(double **)(v24 + 8);
        }
        else
        {
          unint64_t v30 = v29 >> 3;
          double v31 = *(double **)v24;
          do
          {
            unint64_t v32 = v30 >> 1;
            unsigned int v33 = &v31[v30 >> 1];
            double v35 = *v33;
            uint64_t v34 = v33 + 1;
            v30 += ~(v30 >> 1);
            if (v35 < a3) {
              double v31 = v34;
            }
            else {
              unint64_t v30 = v32;
            }
          }
          while (v30);
        }
        if (v27 != v31 && *v31 == a3)
        {
          if (v29 == 8)
          {
            uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
            if (!v36) {
              uint64_t v36 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
            }
            uint64_t v37 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
            if (a1[4] + 32 * a1[5] != v37)
            {
              uint64_t v39 = v37 + 16;
              uint64_t v38 = *(void *)(v37 + 16);
              uint64_t v40 = *(void *)(v38 + 8) - *(void *)v38;
              if (v40)
              {
                uint64_t v41 = 0;
                uint64_t v42 = v40 / 24;
                while ((*(void *)(*(void *)v38 + v41) & 0xFFFFFFFFFFFFFFF8) != (*(void *)v36 & 0xFFFFFFFFFFFFFFF8))
                {
                  v41 += 24;
                  if (!--v42) {
                    goto LABEL_49;
                  }
                }
                unsigned int v61 = atomic_load((unsigned int *)(v38 + 24));
                if (v61 != 1) {
                  sub_216C64A94((uint64_t ***)(v37 + 16));
                }
                long long v62 = *(void **)v39;
                sub_216A94EA0((void *)(**(void **)v39 + v41 + 24), *(void **)(*(void *)v39 + 8), (void *)(**(void **)v39 + v41));
                sub_216A94584((uint64_t)v62, v63);
              }
            }
          }
          else
          {
            uint64_t v43 = a1[11];
            unsigned int v44 = atomic_load((unsigned int *)(v24 + 24));
            if (v44 != 1) {
              sub_216C657A8((atomic_uint **)v65);
            }
            if (v64) {
              pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(v43, &v64);
            }
            uint64_t v45 = ((uint64_t)v31 - v28) >> 3;
            uint64_t v46 = *(void *)v65;
            uint64_t v47 = *(void *)(*(void *)v65 + 8);
            uint64_t v48 = **(void **)v65 + 8 * v45;
            uint64_t v49 = v47 - (v48 + 8);
            if (v47 != v48 + 8) {
              memmove((void *)(**(void **)v65 + 8 * v45), (const void *)(v48 + 8), v47 - (v48 + 8));
            }
            *(void *)(v46 + 8) = v48 + v49;
            BOOL v50 = *(void **)&v65[16];
            uint64_t v51 = *(void *)&v65[8] + 16 * v45;
            uint64_t v52 = v51 + 16;
            if (v51 + 16 != *(void *)&v65[16])
            {
              unint64_t v53 = (void *)v51;
              do
              {
                sub_2168ED33C(v53, v53 + 2);
                v51 += 16;
                BOOL v54 = v53 + 4;
                v53 += 2;
              }
              while (v54 != v50);
              uint64_t v52 = *(void *)&v65[16];
            }
            while (v52 != v51)
              uint64_t v52 = sub_2168EE084(v52 - 16);
            *(void *)&v65[16] = v51;
            double v55 = sub_216C64A00(v21);
            uint64_t v56 = *(void *)v55;
            *(void *)double v55 = v64;
            uint64_t v64 = v56;
            long long v57 = *(_OWORD *)(v55 + 2);
            *(_OWORD *)(v55 + 2) = *(_OWORD *)v65;
            long long v58 = *(_OWORD *)(v55 + 6);
            *(_OWORD *)(v55 + 6) = *(_OWORD *)&v65[16];
            *(_OWORD *)uint64_t v65 = v57;
            *(_OWORD *)&v65[16] = v58;
            uint64_t v59 = *((void *)v55 + 5);
            *((void *)v55 + 5) = *(void *)&v65[32];
            *(void *)&v65[32] = v59;
          }
        }
      }
    }
  }
LABEL_49:
  uint64_t v66 = (void **)&v65[8];
  sub_216932118(&v66);
  return sub_2169CB1D8((atomic_uint **)v65);
}

void sub_216C5D1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C64174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5D1E0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2)
{
  uint64_t v4 = (void *)sub_216C5D260(a1, 0, 0.0, 0.5);
  v4[10] = v4[4] + 32 * v4[5];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CreateNew(a2, v4 + 11);
  return a1;
}

void sub_216C5D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  sub_216C5D48C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5D260(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216C5D404((void *)(a1 + 8), v12);
  uint64_t v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    uint64_t v7 = sub_216C5D380();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 26) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216C5D36C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_216C5D380()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C6B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C6B0))
  {
    dword_26798C690 = 0;
    word_26798C694 = -1;
    byte_26798C696 = 1;
    __cxa_atexit((void (*)(void *))sub_216C5D548, &dword_26798C690, &dword_216758000);
    __cxa_guard_release(&qword_26798C6B0);
  }
  return &dword_26798C690;
}

void *sub_216C5D404(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168C5234(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216C5D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216C5D48C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216C5D4E0(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_216C5D4E0(void *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v4 = v2 - 32;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        uint64_t result = sub_216C5D588(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      BOOL v5 = v4 == v3;
      v4 -= 32;
    }
    while (!v5);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_216C5D548(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_216C5D588(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

_DWORD *sub_216C5D588(uint64_t a1)
{
  sub_216C5D618((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));

  return sub_21697C414((_DWORD *)(a1 + 8));
}

_DWORD *sub_216C5D5D0(uint64_t a1)
{
  sub_216C5D618((uint64_t *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t *sub_216C5D618(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)v2;
    sub_216A94530(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

void sub_216C5D678(unint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, void *a4)
{
  if (a1 < (unint64_t)a2)
  {
    if ((uint64_t)((uint64_t)a2 - a1) > 3999)
    {
      sub_216C5DDF0(a1, (uint64_t)a2, a3, a4);
    }
    else
    {
      *(void *)&v8[1] = v4;
      uint64_t v9 = v5;
      unint64_t v6 = 126 - 2 * __clz((uint64_t)((uint64_t)a2 - a1) >> 3);
      if (a2 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a1) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v6;
      }
      sub_216C5DF34(a1, a2, (uint64_t)v8, v7, 1);
    }
  }
}

uint64_t sub_216C5D6E0(uint64_t *a1)
{
  v55[9] = *MEMORY[0x263EF8340];
  sub_216C5D260((uint64_t)&v52, 0, 0.0, 0.5);
  sub_21686E9D4(a1, &v52);
  *(void *)&long long v44 = &v53;
  sub_216C5D48C((void ***)&v44);
  a1[10] = a1[4] + 32 * a1[5];
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  v47[1] = 0;
  uint64_t v48 = 0;
  v47[0] = 0;
  uint64_t v2 = a1[11];
  uint64_t v3 = *(void *)(v2 + 16);
  long long v4 = *(_OWORD *)v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  uint64_t v5 = __p[0];
  *(_OWORD *)long long __p = v4;
  uint64_t v50 = v3;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v47[0];
  long long v8 = *(_OWORD *)(v2 + 48);
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(_OWORD *)uint64_t v47 = v8;
  uint64_t v48 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = *(char **)(v2 + 72);
  uint64_t v9 = *(char **)(v2 + 80);
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 8sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(v2 + 88) = 0;
  unint64_t v11 = (unsigned int *)__p[0];
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1[11];
  if (__p[0] == __p[1])
  {
LABEL_8:
    int FileVersion = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersion(v12);
    if (!(FileVersion & 0xFF00 | (FileVersion << 16) & 0xFFFF00))
    {
      unint64_t v14 = sub_216C609B8((uint64_t)__p[0], (unsigned int *)__p[1], (uint64_t)a1);
      if (__p[1] != v14) {
        __p[1] = v14;
      }
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = v54;
    double v15 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v44, 0x28uLL);
    *((unsigned char *)v15 - 11) = 1;
    void *v15 = &unk_26C75EBF0;
    v15[1] = a1;
    void v15[2] = __p;
    void v15[3] = &v41;
    void v15[4] = v55;
    (**(void (***)(void))*(v15 - 5))();
    long long v44 = 0u;
    long long v45 = 0u;
    int v46 = 1065353216;
    char v40 = 0;
    if (v10 != v9)
    {
      uint64_t v17 = v10;
      while (*(_DWORD *)v17 != -1)
      {
        v17 += 4;
        if (v17 == v9)
        {
          uint64_t v17 = v9;
          break;
        }
      }
      if (v10 != v9)
      {
        uint64_t v18 = v10;
        while (1)
        {
          unsigned __int8 v19 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
          if (v19)
          {
            unsigned int v20 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("field data", 0, v16);
            BOOL v21 = v20 != 0;
          }
          else
          {
            unsigned int v20 = 0;
            BOOL v21 = 0;
          }
          uint64_t v38 = v20;
          int v39 = v21;
          unsigned int v37 = (unint64_t)(v18 - v10) >> 2;
          unint64_t v32 = &v37;
          unint64_t v22 = sub_216C615BC((uint64_t)&v44, &v37, (uint64_t)&unk_2174BFD90, &v32);
          unint64_t v32 = 0;
          unsigned int v33 = v54;
          uint64_t v23 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v32, 0x40uLL);
          *((unsigned char *)v23 - 11) = 1;
          *uint64_t v23 = &unk_26C75EC38;
          v23[1] = a1;
          void v23[2] = v18;
          v23[3] = v17;
          v23[4] = v47;
          _DWORD v23[5] = v22 + 3;
          v23[6] = &v40;
          v23[7] = v55;
          (**(void (***)(void))*(v23 - 5))();
          if (v40) {
            break;
          }
          while (v39--)
            pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v38);
          if (v17 != v9)
          {
            uint64_t v18 = v17 + 4;
            if (v17 + 4 != v9)
            {
              v17 += 4;
              while (*(_DWORD *)v17 != -1)
              {
                v17 += 4;
                if (v17 == v9)
                {
                  uint64_t v17 = v9;
                  break;
                }
              }
              if (v18 != v9) {
                continue;
              }
            }
          }
          goto LABEL_31;
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::Cancel((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
        sub_21684E6B8((uint64_t)&v38);
      }
    }
LABEL_31:
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
    unint64_t v25 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v25) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v26 = v51;
    unint64_t v27 = atomic_load((unint64_t *)(v25 + 144));
    if (v26 >= v27
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51, (atomic_ullong *)v25))
    {
      if (!v40)
      {
        LOBYTE(v38) = 1;
        unint64_t v32 = 0;
        unsigned int v33 = v54;
        uint64_t v28 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v32, 0x38uLL);
        *((unsigned char *)v28 - 11) = 1;
        *uint64_t v28 = &unk_26C75ED48;
        v28[1] = a1;
        _OWORD v28[2] = __p;
        uint64_t v28[3] = &v41;
        v28[4] = &v44;
        v28[5] = &v38;
        v28[6] = v55;
        (**(void (***)(void))*(v28 - 5))();
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
        unsigned __int8 v29 = atomic_load((unsigned __int8 *)&v38);
        uint64_t v30 = v29 & 1;
        if (v29)
        {
          a1[10] = a1[4] + 32 * a1[5];
        }
        else
        {
          unint64_t v32 = (unsigned int *)"usd/crateData.cpp";
          unsigned int v33 = "_PopulateFromCrateFile";
          uint64_t v34 = 907;
          double v35 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_PopulateFromCrateFile()";
          char v36 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 3, (pxrInternal__aapl__pxrReserved__ *)"CrateFile specs are corrupted, contains invalid field data.");
        }
LABEL_43:
        sub_216C627AC((uint64_t)&v44);
        if (v41)
        {
          uint64_t v42 = v41;
          operator delete(v41);
        }
        goto LABEL_45;
      }
      unint64_t v32 = (unsigned int *)"usd/crateData.cpp";
      unsigned int v33 = "_PopulateFromCrateFile";
      uint64_t v34 = 878;
      double v35 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_PopulateFromCrateFile()";
      char v36 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 3, (pxrInternal__aapl__pxrReserved__ *)"CrateFile specs are corrupted, contain field data out of bounds");
    }
    uint64_t v30 = 0;
    goto LABEL_43;
  }
  while ((uint64_t)(*((void *)v12 + 13) - *((void *)v12 + 12)) >> 3 > (unint64_t)*v11)
  {
    v11 += 3;
    if (v11 == __p[1]) {
      goto LABEL_8;
    }
  }
  *(void *)&long long v44 = "usd/crateData.cpp";
  *((void *)&v44 + 1) = "_PopulateFromCrateFile";
  *(void *)&long long v45 = 771;
  *((void *)&v45 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_PopulateFromCrateFile()";
  LOBYTE(v46) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 3, (pxrInternal__aapl__pxrReserved__ *)"CrateFile specs are corrupted, contain pathIndices out of bounds");
  uint64_t v30 = 0;
LABEL_45:
  if (v10) {
    operator delete(v10);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v52);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v51);
  return v30;
}

void sub_216C5DD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  sub_216C627AC((uint64_t)&a21);
  if (__p) {
    operator delete(__p);
  }
  if (v37) {
    operator delete(v37);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&a37);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a35);
  _Unwind_Resume(a1);
}

void sub_216C5DDF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v16[0] = 1;
  uint64_t v17 = 65539;
  int v18 = 54;
  tbb::task_group_context::init((uint64_t)v16, a2, a3, a4);
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = v7 + 8;
    uint64_t v9 = a1 + v7;
    if (v7 == 72) {
      break;
    }
    char v10 = sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
    uint64_t v7 = v8;
    if (v10) {
      goto LABEL_6;
    }
  }
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = v9 + 8;
  uint64_t v15 = 1;
  uint64_t v13 = a3;
  sub_216C5F6A8(&v14, &v13, (uint64_t)&v12, (tbb::task_group_context *)v16);
  if (!tbb::task_group_context::is_group_execution_cancelled((tbb::task_group_context *)v16)) {
    goto LABEL_7;
  }
LABEL_6:
  *(void *)&long long v14 = a3;
  *((void *)&v14 + 1) = (a2 - a1) >> 3;
  uint64_t v15 = a1;
  sub_216C5FDDC(&v14, (uint64_t)&v13, (uint64_t)&v12, v11);
LABEL_7:
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v16);
}

void sub_216C5DF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5DF34(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, char a5)
{
  char v10 = (int *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    char v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (pxrInternal__aapl__pxrReserved__::SdfPath *)v11;
    unint64_t v15 = (a2 - (pxrInternal__aapl__pxrReserved__::SdfPath *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8), (pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
          if (result)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, (int *)a2 - 2);
            uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, (int *)a2 - 1);
          }
          break;
        case 3uLL:
          uint64_t result = sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, v11 + 2, (int *)a2 - 2, a3);
          break;
        case 4uLL:
          uint64_t result = (uint64_t)sub_216C5EE68(v11, v11 + 2, v11 + 4, (int *)a2 - 2, a3);
          break;
        case 5uLL:
          uint64_t result = (uint64_t)sub_216C5EF5C(v11, v11 + 2, v11 + 4, v11 + 6, (int *)a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (int *)a2)
      {
        return (uint64_t)sub_216C5F090(v11, a2, (int *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, &v11[2 * (v15 >> 1)], (int *)a2 - 2, a3);
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), v17 - 2, (int *)a2 - 4, a3);
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 4), &v11[2 * v16 + 2], (int *)a2 - 6, a3);
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 - 2), v17, &v11[2 * v16 + 2], a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, &v11[2 * v16 + 1]);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11[2 * (v15 >> 1)], v11, (int *)a2 - 2, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_216C5E874(v11, (int *)a2, a3);
      unint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    int v18 = sub_216C5EA38(v11, a2, a3);
    if ((v19 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v20 = sub_216C5EC04(v11, v18, a3);
    unint64_t v11 = v18 + 2;
    uint64_t result = sub_216C5EC04(v18 + 2, (int *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v18;
      if (v20) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_17:
      uint64_t result = sub_216C5DF34(v10, v18, a3, -v13, a5 & 1);
      unint64_t v11 = v18 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_216C5E4A8(v11, a2, a3);
  }
  else
  {
    return (uint64_t)sub_216C5E604(v11, (int *)a2, a3);
  }
}

uint64_t sub_216C5E334(int a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  IsPropertyuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
  int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3) + IsPropertyPath;
  if (v6 != 2)
  {
    if (v6 == 1) {
      return IsPropertyPath ^ 1u;
    }
    goto LABEL_37;
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
  uint64_t v10 = *((unsigned __int8 *)Name + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *((unsigned __int8 *)Name + 23);
  }
  else {
    uint64_t v11 = Name[1];
  }
  uint64_t v12 = *((unsigned __int8 *)v9 + 23);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = v9[1];
  }
  if (v11 == v12)
  {
    if (v13 >= 0) {
      uint64_t v14 = (unsigned __int8 *)v9;
    }
    else {
      uint64_t v14 = (unsigned __int8 *)*v9;
    }
    if ((v10 & 0x80) == 0)
    {
      if (*((unsigned char *)Name + 23))
      {
        while (*(unsigned __int8 *)Name == *v14)
        {
          Name = (uint64_t *)((char *)Name + 1);
          ++v14;
          if (!--v10) {
            goto LABEL_37;
          }
        }
        goto LABEL_19;
      }
LABEL_37:
      return sub_2169817E8(this, a3);
    }
    if (!memcmp((const void *)*Name, v14, Name[1])) {
      goto LABEL_37;
    }
  }
LABEL_19:
  unint64_t v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  unint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
  int v17 = *((char *)v16 + 23);
  int v18 = *((char *)v15 + 23);
  if (v18 >= 0) {
    size_t v19 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    size_t v19 = v15[1];
  }
  if (v18 >= 0) {
    BOOL v20 = v15;
  }
  else {
    BOOL v20 = (const void *)*v15;
  }
  if (v17 >= 0) {
    size_t v21 = *((unsigned __int8 *)v16 + 23);
  }
  else {
    size_t v21 = v16[1];
  }
  if (v17 >= 0) {
    unint64_t v22 = v16;
  }
  else {
    unint64_t v22 = (const void *)*v16;
  }
  if (v21 >= v19) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v21;
  }
  int v24 = memcmp(v20, v22, v23);
  if (v24) {
    return v24 < 0;
  }
  else {
    return v19 < v21;
  }
}

_DWORD *sub_216C5E4A8(_DWORD *result, _DWORD *a2, int a3)
{
  if (result != a2)
  {
    uint64_t v4 = (uint64_t)result;
    char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 2);
    if (result + 2 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)result;
      do
      {
        uint64_t v9 = v5;
        uint64_t result = (_DWORD *)sub_216C5E334(a3, v5, v8);
        if (result)
        {
          int v13 = *(_DWORD *)v9;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
          int v14 = *((_DWORD *)v8 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 3);
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = v4 + v10;
            sub_21697DE94((int *)(v4 + v10 + 8), (int *)(v4 + v10));
            sub_21697DEEC((int *)(v11 + 12), (int *)(v11 + 4));
            if (!v10) {
              break;
            }
            v10 -= 8;
            if ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 8)) & 1) == 0)
            {
              uint64_t v12 = (int *)(v4 + v10 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v12 = (int *)v4;
LABEL_10:
          sub_21697DE94(v12, &v13);
          sub_21697DEEC((int *)(v11 + 4), &v14);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
          uint64_t result = sub_21697C414(&v13);
        }
        char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
        v7 += 8;
        uint64_t v8 = v9;
      }
      while ((_DWORD *)((char *)v9 + 8) != a2);
    }
  }
  return result;
}

void sub_216C5E5F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_216C5E604(int *result, int *a2, int a3)
{
  if (result != a2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)result;
    char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 2);
    if (result + 2 != a2)
    {
      uint64_t v7 = result + 3;
      do
      {
        uint64_t v8 = v5;
        uint64_t result = (int *)sub_216C5E334(a3, v5, v4);
        if (result)
        {
          int v11 = *(_DWORD *)v8;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v8);
          int v12 = *((_DWORD *)v4 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v4 + 3);
          uint64_t v9 = v7;
          do
          {
            uint64_t v10 = v9;
            sub_21697DE94(v9 - 1, v9 - 3);
            v9 -= 2;
            sub_21697DEEC(v10, v9);
          }
          while ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 - 5)) & 1) != 0);
          sub_21697DE94(v9 - 1, &v11);
          sub_21697DEEC(v9, &v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
          uint64_t result = sub_21697C414(&v11);
        }
        char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
        v7 += 2;
        uint64_t v4 = v8;
      }
      while ((int *)((char *)v8 + 8) != a2);
    }
  }
  return result;
}

void sub_216C5E72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5E740(pxrInternal__aapl__pxrReserved__::SdfPath *a1, int *a2, int *a3, int a4)
{
  char v8 = sub_216C5E334(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a1);
  int v9 = sub_216C5E334(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((v8 & 1) == 0)
  {
    if (!v9) {
      return 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    int v11 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    if (sub_216C5E334(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a2);
      uint64_t v10 = (int *)((char *)a1 + 4);
      uint64_t v12 = 2;
      goto LABEL_9;
    }
    return 1;
  }
  uint64_t v10 = (int *)((char *)a1 + 4);
  if (!v9)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a2);
    int v13 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v10, a2 + 1);
    if (sub_216C5E334(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      int v11 = a3 + 1;
      uint64_t v12 = 2;
      uint64_t v10 = v13;
      goto LABEL_9;
    }
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a3);
  int v11 = a3 + 1;
  uint64_t v12 = 1;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v10, v11);
  return v12;
}

int *sub_216C5E874(int *a1, int *a2, int a3)
{
  int v10 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  int v11 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  if (sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2)))
  {
    int v6 = a1;
    do
      v6 += 2;
    while ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2);
    do
    {
      int v6 = (int *)v7;
      if (v7 >= (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) {
        break;
      }
      int v8 = sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, v7);
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 2);
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 2;
    while ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v6, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v6 + 1, a2 + 1);
    do
      v6 += 2;
    while (!sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6));
    do
      a2 -= 2;
    while ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    sub_21697DE94(a1, v6 - 2);
    sub_21697DEEC(a1 + 1, v6 - 1);
  }
  sub_21697DE94(v6 - 2, &v10);
  sub_21697DEEC(v6 - 1, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return v6;
}

void sub_216C5EA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_216C5EA38(int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  int v12 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  int v13 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  uint64_t v6 = 0;
  do
  {
    char v7 = sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v6 + 2], (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    v6 += 2;
  }
  while ((v7 & 1) != 0);
  int v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
    }
    while ((sub_216C5E334(a3, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12) & 1) == 0);
  }
  else
  {
    do
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
    while (!sub_216C5E334(a3, a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12));
  }
  int v9 = &a1[v6];
  if (v8 < a2)
  {
    int v10 = (int *)a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v10 + 1);
      do
        v9 += 2;
      while ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12) & 1) != 0);
      do
        v10 -= 2;
      while (!sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12));
    }
    while (v9 < v10);
  }
  if (v9 - 2 != a1)
  {
    sub_21697DE94(a1, v9 - 2);
    sub_21697DEEC(a1 + 1, v9 - 1);
  }
  sub_21697DE94(v9 - 2, &v12);
  sub_21697DEEC(v9 - 1, &v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  return v9 - 2;
}

void sub_216C5EBE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C5EC04(int *a1, int *a2, int a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2 - 2);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 1);
      }
      return 1;
    case 3:
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_216C5EE68(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_216C5EF5C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      int v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4);
      sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a1 + 2, a1 + 4, a3);
      int v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6);
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_216C5E334(a3, v9, v8))
    {
      int v15 = *(_DWORD *)v9;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
      int v16 = *((_DWORD *)v9 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v9 + 1);
      uint64_t v12 = v10;
      while (1)
      {
        int v13 = (int *)((char *)a1 + v12);
        sub_21697DE94((int *)((char *)a1 + v12 + 24), (int *)((char *)a1 + v12 + 16));
        sub_21697DEEC(v13 + 7, v13 + 5);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 2)) & 1) == 0)
        {
          int v14 = (int *)((char *)a1 + v12 + 24);
          goto LABEL_12;
        }
      }
      int v14 = a1;
LABEL_12:
      sub_21697DE94(v14, &v15);
      sub_21697DEEC(v13 + 5, &v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      ++v11;
      sub_21697C414(&v15);
      if (v11 == 8) {
        return (int *)((char *)v9 + 8) == a2;
      }
    }
    int v8 = v9;
    v10 += 8;
    int v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
    if (v9 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) {
      return 1;
    }
  }
}

void sub_216C5EE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_216C5EE68(int *a1, int *a2, int *a3, int *a4, int a5)
{
  sub_216C5E740((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a2, a3, a5);
  BOOL result = (int *)sub_216C5E334(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    BOOL result = (int *)sub_216C5E334(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      BOOL result = (int *)sub_216C5E334(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      }
    }
  }
  return result;
}

int *sub_216C5EF5C(int *a1, int *a2, int *a3, int *a4, int *a5, int a6)
{
  sub_216C5EE68(a1, a2, a3, a4, a6);
  BOOL result = (int *)sub_216C5E334(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    BOOL result = (int *)sub_216C5E334(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      BOOL result = (int *)sub_216C5E334(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        BOOL result = (int *)sub_216C5E334(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        }
      }
    }
  }
  return result;
}

int *sub_216C5F090(int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, int *a3, int a4)
{
  if (a1 != (int *)this)
  {
    uint64_t v6 = this;
    uint64_t v8 = this - (pxrInternal__aapl__pxrReserved__::SdfPath *)a1;
    uint64_t v9 = (this - (pxrInternal__aapl__pxrReserved__::SdfPath *)a1) >> 3;
    if (this - (pxrInternal__aapl__pxrReserved__::SdfPath *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        sub_216C5F1BC((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    int v13 = v6;
    if (v6 != (pxrInternal__aapl__pxrReserved__::SdfPath *)a3)
    {
      int v14 = (int *)v6;
      do
      {
        if (sub_216C5E334(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v14, a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v14 + 1, a1 + 1);
          sub_216C5F1BC((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      int v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a3;
    }
    if (v8 >= 9)
    {
      unint64_t v15 = (unint64_t)v8 >> 3;
      do
      {
        sub_216C5F378(a1, (uint64_t)v6, a4, v15);
        uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 - 8);
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

uint64_t sub_216C5F1BC(uint64_t result, int a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (int *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && sub_216C5E334(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 8 * (v10 + 1)), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 2)))
      {
        v12 += 2;
        uint64_t v11 = v13;
      }
      BOOL result = sub_216C5E334(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      if ((result & 1) == 0)
      {
        int v17 = *v5;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v5);
        int v18 = v5[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v5 + 1);
        do
        {
          int v14 = v12;
          sub_21697DE94(v5, v12);
          unint64_t v15 = v12 + 1;
          sub_21697DEEC(v5 + 1, v12 + 1);
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (int *)(v6 + 8 * v16);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v16;
          }
          else if (sub_216C5E334(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v16), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 2)))
          {
            v12 += 2;
          }
          else
          {
            uint64_t v11 = v16;
          }
          char v5 = v14;
        }
        while (!sub_216C5E334(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17));
        sub_21697DE94(v14, &v17);
        sub_21697DEEC(v15, &v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        return (uint64_t)sub_21697C414(&v17);
      }
    }
  }
  return result;
}

void sub_216C5F364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_216C5F378(int *result, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    int v13 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    int v14 = v7[1];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
    uint64_t v8 = sub_216C5F4B8(v7, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (int *)(a2 - 8);
    uint64_t v11 = v8 + 1;
    if (v8 == (int *)(a2 - 8))
    {
      sub_21697DE94(v8, &v13);
      sub_21697DEEC(v11, &v14);
    }
    else
    {
      sub_21697DE94(v8, (int *)(a2 - 8));
      uint64_t v12 = (int *)(a2 - 4);
      sub_21697DEEC(v11, v12);
      sub_21697DE94(v10, &v13);
      sub_21697DEEC(v12, &v14);
      sub_216C5F578(v7, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)v7) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return sub_21697C414(&v13);
  }
  return result;
}

void sub_216C5F4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_216C5F4B8(int *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[2 * v6 + 2];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && sub_216C5E334(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[2 * v6 + 2], (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      uint64_t v10 = v11;
    }
    sub_21697DE94(a1, v9);
    sub_21697DEEC(a1 + 1, v9 + 1);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_DWORD *sub_216C5F578(_DWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = &result[2 * (v4 >> 1)];
    uint64_t v10 = (int *)(a2 - 8);
    BOOL result = (_DWORD *)sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 8));
    if (result)
    {
      int v13 = *v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v10);
      int v14 = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        uint64_t v11 = v9;
        sub_21697DE94(v10, v9);
        uint64_t v12 = v9 + 1;
        sub_21697DEEC(v10 + 1, v9 + 1);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = &v7[2 * v8];
        uint64_t v10 = v11;
      }
      while ((sub_216C5E334(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13) & 1) != 0);
      sub_21697DE94(v11, &v13);
      sub_21697DEEC(v12, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      return sub_21697C414(&v13);
    }
  }
  return result;
}

void sub_216C5F694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_216C5F6A8(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    char v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C75EB60;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 4sub_216C01044((uint64_t *)this, 0) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_216C5F784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5F7A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216C5F818(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

uint64_t sub_216C5F818(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < (unint64_t)((uint64_t)(*(void *)a3 - *(void *)(a3 + 8)) >> 3))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216C5F8CC(a2);
          if (*(void *)(a3 + 16) >= (unint64_t)((uint64_t)(*(void *)a3 - *(void *)(a3 + 8)) >> 3)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            return sub_216C5F9A0(a1, (uint64_t)a2, (long long *)a3);
          }
        }
      }
    }
  }
  return sub_216C5F9A0(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_216C5F8CC(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  uint64_t v4 = ***(uint64_t (****)(void))(sub_216C5FB84(v3, (uint64_t)a1) - 40);

  return v4();
}

uint64_t sub_216C5F9A0(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((void *)a3 + 2) < (unint64_t)((uint64_t)(*(void *)a3 - *((void *)a3 + 1)) >> 3)
    && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)uint64_t v10 = 0x10000;
    long long v11 = *a3;
    uint64_t v12 = *((void *)a3 + 2);
    while (1)
    {
      uint64_t result = (uint64_t)sub_21692CF40(v10, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v9;
      unsigned __int8 v8 = v10[2];
      if (v10[2] < 2u)
      {
        unsigned int v7 = v10[0];
        if (v10[v10[0] + 3] < v9
          && *((void *)&v11 + 3 * v10[0] + 2) < (unint64_t)((uint64_t)(*((void *)&v11 + 3 * v10[0])
                                                                             - *((void *)&v11 + 3 * v10[0] + 1)) >> 3))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      uint64_t result = sub_216C5FC04(a2, (uint64_t)&v11 + 24 * v10[1], v10[v10[1] + 3]);
      unsigned __int8 v8 = --v10[2];
      v10[1] = (v10[1] + 1) & 7;
LABEL_11:
      if (v8)
      {
        uint64_t result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!result) {
          continue;
        }
      }
      return result;
    }
    unsigned int v7 = v10[0];
LABEL_6:
    uint64_t result = sub_216C5FD2C((tbb::task *)(a2 + 32), (pxrInternal__aapl__pxrReserved__::SdfPath **)&v11 + 3 * v7);
    unsigned __int8 v8 = --v10[2];
    v10[0] = (v10[0] - 1) & 7;
    goto LABEL_11;
  }

  return sub_216C5FD2C((tbb::task *)(a2 + 32), (pxrInternal__aapl__pxrReserved__::SdfPath **)a3);
}

uint64_t sub_216C5FB84(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_26C75EB60;
  *(void *)(result + 8) = v2;
  unint64_t v3 = *(void *)(a2 + 16)
     + 8
     * ((((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3)
       + (unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)(a2 + 16)) >> 3 < 0)) >> 1);
  *(void *)(a2 + 8) = v3;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = v4;
  *(void *)(result + 4sub_216C01044((uint64_t *)this, 0) = v4;
  *(_DWORD *)(result + 48) = 2;
  *(unsigned char *)(result + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_216C5FC04(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)char v6 = &unk_26C751420;
  __dmb(0xBu);
  unsigned char v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C75EB60;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v9;
  *(void *)(v7 + 4sub_216C01044((uint64_t *)this, 0) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v10 = ***(uint64_t (****)(void))(v7 - 40);

  return v10();
}

uint64_t sub_216C5FD2C(tbb::task *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t result = tbb::task::self(a1);
  char v6 = *a2;
  unsigned int v5 = a2[1];
  if (v5 != v6)
  {
    uint64_t v7 = result;
    char v8 = 0;
    do
    {
      if ((v8 & 0x3F) == 0)
      {
        uint64_t result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(v7 - 56));
        if (result) {
          break;
        }
      }
      uint64_t v9 = (char *)v5 - 8;
      uint64_t result = sub_216C5E334(*(void *)a1, v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 - 8));
      if (result)
      {
        uint64_t v10 = *(tbb::task_group_context **)(v7 - 56);
        return tbb::task_group_context::cancel_group_execution(v10);
      }
      ++v8;
      unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    }
    while (v9 + 16 != (char *)v6);
  }
  return result;
}

void sub_216C5FDDC(long long *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 1))
  {
    v9[0] = 1;
    uint64_t v10 = 65539;
    int v11 = 49;
    tbb::task_group_context::init((uint64_t)v9, a2, a3, a4);
    char v8 = (tbb::task_group_context *)v9;
    uint64_t v5 = tbb::internal::allocate_root_with_context_proxy::allocate(&v8, 0x38uLL);
    *(unsigned char *)(v5 - 11) = 1;
    *(void *)uint64_t v5 = &unk_26C75EBA8;
    long long v6 = *a1;
    *(void *)(v5 + 24) = *((void *)a1 + 2);
    *(_OWORD *)(v5 + 8) = v6;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v5);
    *(_DWORD *)(v5 + 48) = 0;
    *(unsigned char *)(v5 + 52) = 5;
    *(void *)(v5 + 4sub_216C01044((uint64_t *)this, 0) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v5 - 40) + 16))(*(void *)(v5 - 40), v5, v5 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v9);
  }
}

void sub_216C5FF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C5FF50(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216C5FFC0(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

uint64_t sub_216C5FFC0(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) >= 0x1F4uLL)
  {
    if (*(void *)a1 <= 1uLL)
    {
      if (!*(void *)a1 || !*(unsigned char *)(a1 + 12)) {
        return sub_216C60168(a1, (uint64_t)a2, (long long *)a3);
      }
      --*(unsigned char *)(a1 + 12);
      *(void *)a1 = 0;
    }
    sub_216C60094(a2);
    if (*(void *)(a3 + 8) >= 0x1F4uLL)
    {
      do
      {
        if (*(void *)a1 <= 1uLL)
        {
          if (!*(void *)a1 || !*(unsigned char *)(a1 + 12)) {
            return sub_216C60168(a1, (uint64_t)a2, (long long *)a3);
          }
          --*(unsigned char *)(a1 + 12);
          *(void *)a1 = 0;
        }
        sub_216C60094(a2);
      }
      while (*(void *)(a3 + 8) > 0x1F3uLL);
    }
  }
  return sub_216C60168(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_216C60094(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  uint64_t v4 = ***(uint64_t (****)(void))(sub_216C60338(v3, (uint64_t)a1) - 40);

  return v4();
}

uint64_t sub_216C60168(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a3 + 1);
  if (v3 >= 0x1F4 && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)int v18 = 0x10000;
    long long v19 = *a3;
    uint64_t v20 = *((void *)a3 + 2);
    while (1)
    {
      uint64_t result = (uint64_t)sub_216C60740(v18, *(unsigned __int8 *)(a1 + 12));
      char v7 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v7 & 1) == 0) {
        break;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v9;
      unsigned __int8 v10 = v18[2];
      if (v18[2] < 2u)
      {
        unsigned int v8 = v18[0];
        if (v18[v18[0] + 3] >= v9 || *((void *)&v19 + 3 * v18[0] + 1) <= 0x1F3uLL) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_216C6083C(a2, (long long *)((char *)&v19 + 24 * v18[1]), v18[v18[1] + 3]);
        unsigned __int8 v10 = --v18[2];
        v18[1] = (v18[1] + 1) & 7;
      }
LABEL_14:
      if (v10)
      {
        uint64_t result = tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56));
        if (!result) {
          continue;
        }
      }
      return result;
    }
    unsigned int v8 = v18[0];
LABEL_10:
    unint64_t v12 = *((void *)&v19 + 3 * v8 + 1);
    uint64_t v11 = *((void *)&v19 + 3 * v8 + 2);
    unint64_t v13 = 126 - 2 * __clz(v12);
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t result = sub_216C5DF34(v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 8 * v12), (uint64_t)&v17, v14, 1);
    unsigned __int8 v10 = --v18[2];
    v18[0] = (v18[0] - 1) & 7;
    goto LABEL_14;
  }
  unint64_t v15 = 126 - 2 * __clz(v3);
  if (v3) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  return sub_216C5DF34(*((void *)a3 + 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)(*((void *)a3 + 2) + 8 * v3), (uint64_t)v18, v16, 1);
}

uint64_t sub_216C60338(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  *(void *)a1 = &unk_26C75EBA8;
  uint64_t v3 = a2 + 8;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = sub_216C603C8((uint64_t *)(a1 + 8), a2 + 8);
  *(void *)(a1 + 24) = *(void *)(v3 + 16) + 8 * *(void *)(v3 + 8) + 8;
  uint64_t v4 = *(void *)(v3 + 32) >> 1;
  *(void *)(v3 + 32) = v4;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v4;
  *(_DWORD *)(a1 + 48) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(v3 + 44);
  return a1;
}

uint64_t sub_216C603C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(int **)(a2 + 16);
  char v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v4;
  uint64_t v5 = sub_216C60504(a1, &v17, a2);
  if (v5)
  {
    long long v6 = v17;
    char v7 = (int *)((char *)v17 + 8 * v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v17, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)v6 + 1, v7 + 1);
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(a2 + 8);
LABEL_4:
  uint64_t v10 = (8 * v9) | 4;
  do
  {
    --v9;
    char v11 = sub_216C5E334(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + v10 - 12));
    v10 -= 8;
  }
  while ((v11 & 1) != 0);
  uint64_t v12 = 8 * v8;
  while (v9 != v8)
  {
    ++v8;
    v12 += 8;
    if ((sub_216C5E334(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + v12), (pxrInternal__aapl__pxrReserved__::SdfPath *)v4) & 1) == 0)
    {
      if (v9 == v8) {
        break;
      }
      unint64_t v13 = (int *)((char *)v17 + v12);
      uint64_t v14 = (int *)((char *)v17 + v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v13, v14 - 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v13 + 1, v14);
      goto LABEL_4;
    }
  }
  unint64_t v15 = (int *)((char *)v17 + v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)((char *)v17 + v10 - 4), v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v15, v4 + 1);
  uint64_t result = ~v9 + *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  return result;
}

uint64_t sub_216C60504(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8) >> 3;
  uint64_t v7 = v6;
  int v8 = sub_216C5E334(*a1, *a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v6));
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  if (v8)
  {
    if (sub_216C5E334(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 16 * v6)))goto LABEL_9; {
    uint64_t v11 = *a1;
    }
    uint64_t v12 = *a2;
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 16 * v6);
  }
  else
  {
    if (sub_216C5E334(v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 16 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8 * v6)))goto LABEL_9; {
    uint64_t v11 = *a1;
    }
    unint64_t v13 = *a2;
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 16 * v6);
  }
  if (sub_216C5E334(v11, v12, v13)) {
    uint64_t v7 = 2 * v6;
  }
  else {
    uint64_t v7 = 0;
  }
LABEL_9:
  uint64_t v14 = 4 * v6;
  int v15 = sub_216C5E334(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 24 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 32 * v6));
  uint64_t v16 = *a1;
  char v17 = *a2;
  if (v15)
  {
    if (sub_216C5E334(v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 32 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 40 * v6)))goto LABEL_17; {
    uint64_t v18 = *a1;
    }
    long long v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 24 * v6);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 40 * v6);
  }
  else
  {
    if (sub_216C5E334(v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 40 * v6), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 32 * v6)))goto LABEL_17; {
    uint64_t v18 = *a1;
    }
    long long v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 40 * v6);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 24 * v6);
  }
  if (sub_216C5E334(v18, v19, v20)) {
    uint64_t v14 = 5 * v6;
  }
  else {
    uint64_t v14 = 3 * v6;
  }
LABEL_17:
  uint64_t v21 = 3 * v6;
  uint64_t v22 = 6 * v6;
  uint64_t v23 = 7 * v6;
  uint64_t v24 = *(void *)(a3 + 8) - 1;
  int v25 = sub_216C5E334(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 16 * v21), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v23));
  uint64_t v26 = *a1;
  unint64_t v27 = *a2;
  if (v25)
  {
    if (sub_216C5E334(v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v23), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v24)))goto LABEL_25; {
    uint64_t v28 = *a1;
    }
    unsigned __int8 v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v22);
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v24);
  }
  else
  {
    if (sub_216C5E334(v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v24), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8 * v23)))goto LABEL_25; {
    uint64_t v28 = *a1;
    }
    unsigned __int8 v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v24);
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v22);
  }
  if (sub_216C5E334(v28, v29, v30)) {
    uint64_t v23 = v24;
  }
  else {
    uint64_t v23 = v22;
  }
LABEL_25:
  int v31 = sub_216C5E334(*a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v7), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v14));
  uint64_t v32 = *a1;
  unsigned int v33 = *a2;
  if (v31)
  {
    if (sub_216C5E334(v32, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v14), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v23)))return v14; {
    uint64_t v34 = *a1;
    }
    double v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v7);
    char v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v23);
  }
  else
  {
    if (sub_216C5E334(v32, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v23), (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8 * v14)))return v14; {
    uint64_t v34 = *a1;
    }
    double v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v23);
    char v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a2 + 8 * v7);
  }
  if (sub_216C5E334(v34, v35, v36)) {
    return v23;
  }
  else {
    return v7;
  }
}

unsigned __int8 *sub_216C60740(unsigned __int8 *result, unsigned int a2)
{
  if (result[2] <= 7u)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 16;
    uint64_t v5 = *result;
    unsigned __int8 v6 = result[v5 + 3];
    do
    {
      if (a2 <= v6) {
        break;
      }
      uint64_t v7 = &v4[24 * v5];
      unint64_t v9 = *((void *)v7 + 1);
      int v8 = v7 + 8;
      if (v9 < 0x1F4) {
        break;
      }
      uint64_t v10 = &v3[v5 + 3];
      unsigned __int8 *v3 = (v5 + 1) & 7;
      uint64_t v11 = (uint64_t)&v4[24 * (((_BYTE)v5 + 1) & 7)];
      uint64_t v12 = (uint64_t *)&v4[24 * v5];
      uint64_t v13 = v12[2];
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = v13;
      uint64_t *v12 = *(void *)v11;
      uint64_t result = (unsigned __int8 *)sub_216C603C8(v12, v11);
      *int v8 = result;
      double v12[2] = *(void *)(v11 + 16) + 8 * *(void *)(v11 + 8) + 8;
      unsigned __int8 v6 = *v10 + 1;
      unsigned __int8 *v10 = v6;
      uint64_t v5 = *v3;
      v3[v5 + 3] = v6;
      unsigned int v14 = ++v3[2];
    }
    while (v14 < 8);
  }
  return result;
}

uint64_t sub_216C6083C(uint64_t a1, long long *a2, char a3)
{
  unsigned __int8 v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)unsigned __int8 v6 = &unk_26C751420;
  __dmb(0xBu);
  unsigned char v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C75EBA8;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = v9;
  *(void *)(v7 + 4sub_216C01044((uint64_t *)this, 0) = v9;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v10 = ***(uint64_t (****)(void))(v7 - 40);

  return v10();
}

uint64_t sub_216C6095C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 32 * v4 + 4) < 0)
  {
LABEL_5:
    uint64_t v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(void *)(v3 + 32 * v4 + 8) != *a2)
    {
      int v5 = (__int16)(v5 + 1);
      uint64_t v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 32 * v4 + 4)) {
        goto LABEL_5;
      }
    }
  }
  return v3 + 32 * v4;
}

unsigned int *sub_216C609B8(uint64_t IsTargetPath, unsigned int *a2, uint64_t a3)
{
  if ((unsigned int *)IsTargetPath == a2) {
    return a2;
  }
  int v5 = (unsigned int *)IsTargetPath;
  while (1)
  {
    unint64_t v6 = *v5;
    uint64_t v7 = *(void *)(*(void *)(a3 + 88) + 96);
    long long v8 = v6 >= (*(void *)(*(void *)(a3 + 88) + 104) - v7) >> 3
       ? (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsTargetPath)
       : (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 8 * v6);
    IsTargetuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(v8);
    if (IsTargetPath) {
      break;
    }
    v5 += 3;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return a2;
  }
  for (uint64_t i = v5 + 3; i != a2; i += 3)
  {
    unint64_t v10 = *i;
    uint64_t v11 = *(void *)(*(void *)(a3 + 88) + 96);
    if (v10 >= (*(void *)(*(void *)(a3 + 88) + 104) - v11) >> 3) {
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsTargetPath);
    }
    else {
      uint64_t v12 = (uint64_t *)(v11 + 8 * v10);
    }
    IsTargetuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
    if ((IsTargetPath & 1) == 0)
    {
      uint64_t v13 = *(void *)i;
      void v5[2] = i[2];
      *(void *)int v5 = v13;
      v5 += 3;
    }
  }
  return v5;
}

uint64_t sub_216C60A94(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C60B38((uint64_t *)(a1 + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C60B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C60B38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_216C60D90((uint64_t)&v22, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateDataImpl main hash table");
  float v3 = *(float *)(v2 + 68);
  unint64_t v4 = vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1[1] + 8) - *(void *)a1[1]) >> 2)) / v3);
  unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 48) / v3);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  sub_216C60E1C(v2, v6);
  sub_216C60D60(a1[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1[1] + 8) - *(void *)a1[1]) >> 2));
  uint64_t v8 = *(void *)a1[1];
  if (*(void *)(a1[1] + 8) != v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(v2 + 88);
    do
    {
      unint64_t v12 = *(unsigned int *)(v8 + v9);
      uint64_t v13 = *(void *)(v11 + 96);
      if (v12 >= (*(void *)(v11 + 104) - v13) >> 3) {
        unsigned int v14 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
      }
      else {
        unsigned int v14 = (uint64_t *)(v13 + 8 * v12);
      }
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C61178((uint64_t *)v2, v14);
      ++v10;
      uint64_t v8 = *(void *)a1[1];
      uint64_t v15 = *(void *)(a1[1] + 8);
      v9 += 12;
    }
    while (v10 != 0xAAAAAAAAAAAAAAABLL * ((v15 - v8) >> 2));
    if (v15 != v8)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        unint64_t v18 = *(unsigned int *)(v8 + v16);
        uint64_t v19 = *(void *)(v11 + 96);
        if (v18 >= (*(void *)(v11 + 104) - v19) >> 3) {
          uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v7);
        }
        else {
          uint64_t v20 = (uint64_t *)(v19 + 8 * v18);
        }
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C6095C((void *)v2, v20, bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v20 + 1)+ ((*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20+ (*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20)* (*((unsigned int *)v20 + 1)+ (unint64_t)*(unsigned int *)v20)) >> 1))));
        *(void *)(*(void *)a1[2] + 8 * v17++) = (char *)v7 + 16;
        uint64_t v8 = *(void *)a1[1];
        v16 += 12;
      }
      while (v17 != 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1[1] + 8) - v8) >> 2));
    }
  }
  while (v23--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v22);
}

void sub_216C60D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216C60D60(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_216C61064((void **)a1, a2 - v2);
  }
}

uint64_t sub_216C60D90(uint64_t a1, char *a2, char *a3, char *a4)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v9;
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v9, v10);
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a4, *(_DWORD **)a1, v11);
      int v6 = 3;
    }
    else
    {
      int v6 = 0;
    }
  }
  else
  {
    int v6 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  return a1;
}

void sub_216C60E1C(uint64_t a1, unint64_t a2)
{
  sub_216C5D260((uint64_t)&v9, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(unsigned int **)(a1 + 8);
  unint64_t v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    unsigned __int8 v5 = v3 + 2;
    unint64_t v6 = (unint64_t)(v10[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6) {
          unint64_t v7 = bswap64(0x9E3779B97F4A7C55* (v5[1]+ ((v5[1] + (unint64_t)*v5 + (v5[1] + (unint64_t)*v5) * (v5[1] + (unint64_t)*v5)) >> 1)));
        }
        else {
          unint64_t v7 = *(v5 - 2);
        }
        sub_216C60F38(&v9, v9 & v7, 0, v7, (uint64_t)v5);
      }
      uint64_t v8 = v5 + 6;
      v5 += 8;
    }
    while (v8 != v4);
  }
  v10[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v9, (uint64_t *)a1);
  uint64_t v11 = (void **)v10;
  sub_216C5D48C(&v11);
}

void sub_216C60F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_216C5D48C((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_216C60F38(void *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  while (1)
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = (int *)(v10 + 32 * a2);
    uint64_t v13 = (__int16 *)(v11 + 1);
    int v12 = *((__int16 *)v11 + 2);
    if (v12 >= a3) {
      goto LABEL_4;
    }
    if (v12 == -1) {
      break;
    }
    sub_216C61010(a5, (uint64_t)(v11 + 2));
    __int16 v14 = *v13;
    __int16 *v13 = a3;
    int v15 = *v11;
    int *v11 = a4;
    a3 = v14;
    a4 = v15;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  sub_21697D878(v11 + 2, (_DWORD *)a5);
  uint64_t v16 = v10 + 32 * a2;
  uint64_t result = sub_21697D8B4((_DWORD *)(v16 + 12), (_DWORD *)(a5 + 4));
  *(void *)(v16 + 16) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(a5 + 16);
  int *v11 = a4;
  __int16 *v13 = a3;
  return result;
}

int *sub_216C61010(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
  int v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v6;
  return result;
}

void sub_216C61064(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_21677CB28(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    __int16 v14 = &v13[8 * v10];
    int v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    unint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t sub_216C61178(uint64_t *a1, _DWORD *a2)
{
  sub_216981010(&v6, a2);
  sub_21698105C(&v7, a2 + 1);
  uint64_t v8 = 0;
  uint64_t v4 = sub_216C6121C(a1, &v6, (uint64_t)&v6);
  sub_216C5D618(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  return v4;
}

void sub_216C61208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C5D5D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C6121C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[4];
  uint64_t v8 = v5 & *a1;
  if (*(__int16 *)(v7 + 32 * v8 + 4) < 0)
  {
    LOWORD(v9) = 0;
LABEL_7:
    char v11 = sub_216C613B0((uint64_t)a1);
    uint64_t v12 = a1[4];
    if (v11)
    {
      uint64_t v8 = v5 & *a1;
      int v13 = *(__int16 *)(v12 + 32 * v8 + 4);
      if (v13 < 0)
      {
        LOWORD(v9) = 0;
      }
      else
      {
        LOWORD(v9) = 0;
        do
        {
          int v9 = (__int16)(v9 + 1);
          uint64_t v8 = (v8 + 1) & *a1;
          int v13 = *(__int16 *)(v12 + 32 * v8 + 4);
        }
        while (v9 <= v13);
      }
      int v14 = (unsigned __int16)v13;
    }
    else
    {
      int v14 = *(unsigned __int16 *)(v12 + 32 * v8 + 4);
    }
    if (v14 == 0xFFFF)
    {
      uint64_t v15 = v12 + 32 * v8;
      sub_21697D878((_DWORD *)(v15 + 8), (_DWORD *)a3);
      sub_21697D8B4((_DWORD *)(v15 + 12), (_DWORD *)(a3 + 4));
      *(void *)(v15 + 16) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)uint64_t v15 = v5;
      *(_WORD *)(v15 + 4) = v9;
    }
    else
    {
      sub_216C61478(a1, v8, v9, v5, a3);
    }
    ++a1[6];
    return a1[4] + 32 * v8;
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      uint64_t result = v7 + 32 * v8;
      if (*(void *)(result + 8) == *(void *)a2) {
        break;
      }
      int v9 = (__int16)(v9 + 1);
      uint64_t v8 = (v8 + 1) & v6;
      if (v9 > *(__int16 *)(v7 + 32 * v8 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_216C613B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216C60E1C(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216C60E1C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *sub_216C61478(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10 = a1[4] + 32 * a2;
  sub_216C61010(a5, v10 + 8);
  __int16 v11 = *(_WORD *)(v10 + 4);
  *(_WORD *)(v10 + 4) = a3;
  int v12 = *(_DWORD *)v10;
  *(_DWORD *)uint64_t v10 = a4;
  uint64_t v13 = *a1;
  uint64_t v14 = *a1 & (a2 + 1);
  __int16 v15 = v11 + 1;
  uint64_t v16 = a1[4];
  uint64_t v17 = (int *)(v16 + 32 * v14);
  uint64_t v19 = (__int16 *)(v17 + 1);
  for (unsigned __int16 i = *((_WORD *)v17 + 2); i != 0xFFFF; unsigned __int16 i = *((_WORD *)v17 + 2))
  {
    if (v15 > (__int16)i)
    {
      if (v15 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      sub_216C61010(a5, v16 + 32 * v14 + 8);
      __int16 v20 = *v19;
      *uint64_t v19 = v15;
      int v21 = *v17;
      int *v17 = v12;
      uint64_t v13 = *a1;
      uint64_t v16 = a1[4];
      __int16 v15 = v20;
      int v12 = v21;
    }
    uint64_t v14 = v13 & (v14 + 1);
    ++v15;
    uint64_t v17 = (int *)(v16 + 32 * v14);
    uint64_t v19 = (__int16 *)(v17 + 1);
  }
  uint64_t v22 = v16 + 32 * v14;
  sub_21697D878((_DWORD *)(v22 + 8), (_DWORD *)a5);
  uint64_t result = sub_21697D8B4((_DWORD *)(v22 + 12), (_DWORD *)(a5 + 4));
  *(void *)(v22 + 16) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(v22 + 24) = *(_DWORD *)(a5 + 16);
  int *v17 = v12;
  *uint64_t v19 = v15;
  return result;
}

uint64_t *sub_216C615BC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = *a2;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unsigned __int16 i = *v10; i; unsigned __int16 i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216C6181C(a1, v7, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *uint64_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2sub_216C01044((uint64_t *)this, 0) = v22[0];
    }
  }
  unsigned __int16 i = (uint64_t *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216C618BC((uint64_t)v22, 0);
  return i;
}

void sub_216C61804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C618BC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216C6181C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = **a3;
  uint64_t result = operator new(0x20uLL);
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *((_DWORD *)result + 6) = 0;
  void v8[3] = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216C618A4(_Unwind_Exception *a1)
{
  sub_216C618BC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216C618BC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C5D618(v2 + 3);
    }
    operator delete(v2);
  }
}

uint64_t sub_216C6191C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C619C0((uint64_t *)(a1 + 8));
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C619AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C619C0(uint64_t *a1)
{
  void v21[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  sub_216C60D90((uint64_t)&v17, "Usd", "Usd_CrateDataImpl::Open", "field data");
  unint64_t v3 = *(uint64_t **)a1[4];
  uint64_t result = (uint64_t)sub_216C61BB8(v3, (a1[2] - a1[1]) >> 2);
  float v5 = (unsigned int *)a1[1];
  if (v5 != (unsigned int *)a1[2])
  {
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *v5;
      uint64_t v8 = *(void *)a1[3];
      if (v7 >= (*(void *)(a1[3] + 8) - v8) >> 4) {
        break;
      }
      uint64_t v9 = *(void *)(v2 + 88);
      uint64_t v10 = v8 + 16 * v7;
      unint64_t v11 = *(unsigned int *)(v10 + 4);
      uint64_t v12 = *(void *)(v9 + 120);
      if (v11 >= (*(void *)(v9 + 128) - v12) >> 3) {
        break;
      }
      sub_2168D2318((void *)(*v3 + v6), (void *)(v12 + 8 * v11));
      uint64_t v13 = *(void *)(v10 + 8);
      unint64_t v20 = 0;
      if ((v13 & 0x4000000000000000) != 0 || BYTE6(v13) == 46 || BYTE6(v13) == 41)
      {
        uint64_t v14 = *(void *)(v2 + 88);
        v21[1] = 0;
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v14, v13, (uint64_t)v21);
        sub_2168ED33C(&v19, v21);
        sub_2168EE084((uint64_t)v21);
      }
      else
      {
        uint64_t v19 = v13;
        unint64_t v20 = (char *)&off_26C75EC70 + 3;
      }
      sub_2168ED33C((void *)(*v3 + v6 + 8), &v19);
      uint64_t result = sub_2168EE084((uint64_t)&v19);
      BOOL v15 = (unsigned int *)a1[2];
      float v5 = (unsigned int *)(a1[1] + 4);
      a1[1] = (uint64_t)v5;
      v6 += 24;
      if (v5 == v15) {
        goto LABEL_13;
      }
    }
    *(unsigned char *)a1[5] = 1;
  }
LABEL_13:
  while (v18--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  return result;
}

void sub_216C61B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C61BB8(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3) {
    return (uint64_t *)sub_216C61BF4(result, v4);
  }
  if (!v3) {
    return (uint64_t *)sub_216A94584((uint64_t)result, *result + 24 * a2);
  }
  return result;
}

uint64_t sub_216C61BF4(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      do
      {
        void *v7 = 0;
        uint64_t v7[2] = 0;
        v7 += 3;
      }
      while (v7 != v13);
      unint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    void v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)sub_216782ED8(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[24 * v11];
    BOOL v15 = &v14[24 * a2];
    do
    {
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 2) = 0;
      v14 += 24;
    }
    while (v14 != v15);
    uint64_t v16[2] = v15;
    sub_216A94BDC(a1, v16);
    return sub_216A94DA0((uint64_t)v16);
  }
  return result;
}

void sub_216C61D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A94DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216C61D38(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_216C61D48(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216C61D54()
{
  return 1;
}

unint64_t sub_216C61D5C(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216C61D7C(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_216C61D90(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216C61DA8()
{
  return 0;
}

uint64_t sub_216C61DB4(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(a2, *a1);
}

void *sub_216C61DC4()
{
  return &unk_26C75ED28;
}

uint64_t sub_216C61DD0()
{
  return 0;
}

uint64_t sub_216C61DD8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216C61DE4()
{
  return 0;
}

uint64_t sub_216C61DEC()
{
  return 0;
}

BOOL sub_216C61DF4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217481CD3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216C61E30(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75ED28, a2, a3);
}

void *sub_216C61E54()
{
  return &unk_26C75ED28;
}

void *sub_216C61E64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C75EC70 + 3;
  return result;
}

uint64_t sub_216C61E84(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  unint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[1] - *v2) >> 2);
  v9[0] = *(void *)(a1 + 8);
  v9[1] = v2;
  long long v10 = *(_OWORD *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 40);
  sub_216C61F64(0, v3, 1uLL, v9, (uint64_t)&v12);
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = v8;
  unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
  if (v5 < v6
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8, (atomic_ullong *)v4))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v8, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  return 0;
}

void sub_216C61F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C61F64(unint64_t a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  if (a3)
  {
    if (a1 < a2)
    {
      uint64_t v10 = v5;
      uint64_t v11 = v6;
      uint64_t v7[2] = a3;
      uint64_t v8 = (~a1 + a2) / a3 + 1;
      long long v9 = xmmword_217411D30;
      v7[0] = a4;
      v7[1] = a1;
      sub_216C61FD8((long long *)&v8, (uint64_t)v7, a5, a4);
    }
  }
  else
  {
    tbb::internal::throw_exception_v4(3);
  }
}

void sub_216C61FD8(long long *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 1) < *(void *)a1)
  {
    v11[0] = 1;
    uint64_t v12 = 65539;
    int v13 = 49;
    tbb::task_group_context::init((uint64_t)v11, a2, a3, a4);
    uint64_t v10 = (tbb::task_group_context *)v11;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v10, 0x48uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C75ED90;
    long long v7 = *a1;
    *(void *)(v6 + 24) = *((void *)a1 + 2);
    *(_OWORD *)(v6 + 8) = v7;
    long long v8 = *(_OWORD *)a2;
    *(void *)(v6 + 48) = *(void *)(a2 + 16);
    *(_OWORD *)(v6 + 32) = v8;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 64) = 0;
    *(unsigned char *)(v6 + 68) = 5;
    *(void *)(v6 + 56) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v11);
  }
}

void sub_216C62118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C62164(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = a1 + 56;
  if (!v3)
  {
    *(void *)(a1 + 56) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 68);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 68) = v5 + 1;
      }
    }
  }
  sub_216C621D4(v2, a1, (void *)(a1 + 8));
  return 0;
}

void sub_216C621D4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3[2] < *a3 - a3[1])
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216C62288(a2);
          if (a3[2] >= *a3 - a3[1]) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_216C623B0(a1, a2, a3);
}

uint64_t sub_216C62288(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *(void *)(a1 - 32) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x48uLL);
  *(unsigned char *)(v3 - 11) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)uint64_t v3 = &unk_26C75ED90;
  *(void *)(v3 + 8) = v4;
  uint64_t v6 = v5 + ((unint64_t)(*(void *)(a1 + 8) - v5) >> 1);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(v3 + 16) = v6;
  *(void *)(v3 + 24) = v7;
  long long v8 = *(_OWORD *)(a1 + 32);
  *(void *)(v3 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = v8;
  uint64_t v9 = *(void *)(a1 + 56) >> 1;
  *(void *)(a1 + 56) = v9;
  *(void *)(v3 + 56) = v9;
  *(_DWORD *)(v3 + 64) = 2;
  *(unsigned char *)(v3 + 68) = *(unsigned char *)(a1 + 68);
  uint64_t v10 = ***(uint64_t (****)(void))(v3 - 40);

  return v10();
}

void sub_216C623B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a3[2] < *a3 - a3[1] && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)uint64_t v9 = 0x10000;
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = a3[2];
    while (1)
    {
      sub_216B17510(v9, *(unsigned __int8 *)(a1 + 12));
      char v5 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v5 & 1) == 0) {
        break;
      }
      unsigned __int8 v8 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v8;
      unsigned __int8 v7 = v9[2];
      if (v9[2] < 2u)
      {
        unsigned int v6 = v9[0];
        if (v9[v9[0] + 3] < v8
          && *((void *)&v10 + 3 * v9[0] + 2) < *((void *)&v10 + 3 * v9[0]) - *((void *)&v10 + 3 * v9[0] + 1))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      sub_216C62594(a2, (uint64_t)&v10 + 24 * v9[1], v9[v9[1] + 3]);
      unsigned __int8 v7 = --v9[2];
      v9[1] = (v9[1] + 1) & 7;
LABEL_11:
      if (!v7 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v6 = v9[0];
LABEL_6:
    sub_216C626C4((uint64_t *)(a2 + 32), (void *)&v10 + 3 * v6);
    unsigned __int8 v7 = --v9[2];
    v9[0] = (v9[0] - 1) & 7;
    goto LABEL_11;
  }

  sub_216C626C4((uint64_t *)(a2 + 32), a3);
}

uint64_t sub_216C62594(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)unsigned int v6 = &unk_26C751420;
  __dmb(0xBu);
  unsigned char v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x48uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C75ED90;
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
  *(void *)(v7 + 24) = v8;
  long long v9 = *(_OWORD *)(a1 + 32);
  *(void *)(v7 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(v7 + 32) = v9;
  uint64_t v10 = *(void *)(a1 + 56) >> 1;
  *(void *)(a1 + 56) = v10;
  *(void *)(v7 + 56) = v10;
  *(_DWORD *)(v7 + 64) = 2;
  *(unsigned char *)(v7 + 68) = *(unsigned char *)(a1 + 68) - a3;
  uint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

uint64_t *sub_216C626C4(uint64_t *result, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result[2];
    uint64_t v6 = result[1] + v5 * v2;
    uint64_t v7 = 8 * v6;
    uint64_t v8 = 8 * v5;
    uint64_t v9 = 12 * v6 + 8;
    uint64_t v10 = 12 * v5;
    do
    {
      uint64_t v11 = *v4;
      uint64_t v12 = *(void *)(**(void **)(*v4 + 16) + v7);
      int v13 = (_DWORD *)(**(void **)(*v4 + 8) + v9);
      *(_DWORD *)(v12 + 8) = *v13;
      uint64_t result = sub_216ADFDC0(*(void **)(v11 + 24), v13 - 1);
      if (result)
      {
        uint64_t v14 = result[3];
        if (v14) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 24), 1u, memory_order_relaxed);
        }
        uint64_t v15 = *(void *)v12;
        *(void *)uint64_t v12 = v14;
        uint64_t result = sub_216C5D618(&v15);
      }
      else
      {
        atomic_store(0, *(unsigned __int8 **)(v11 + 32));
      }
      v9 += v10;
      v7 += v8;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_216C627AC(uint64_t a1)
{
  sub_216C627E8(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216C627E8(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_216C5D618(v2 + 3);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

BOOL sub_216C6282C(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v15);
  Targetuint64_t Path = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(this);
  sub_216981010(&v14, TargetPath);
  sub_21698105C((_DWORD *)&v14 + 1, (_DWORD *)TargetPath + 1);
  sub_216C62A5C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, a1, 0);
  if (v18)
  {
    if ((v18 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    }
    else {
      uint64_t v5 = v17;
    }
    if (*(unsigned char *)v5)
    {
      uint64_t v7 = *(void **)(v5 + 8);
      uint64_t v6 = *(void **)(v5 + 16);
      if (v7 != v6)
      {
        while (*v7 != v14)
        {
          if (++v7 == v6) {
            goto LABEL_8;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = *(void **)(v5 + 32);
      uint64_t v9 = *(void **)(v5 + 40);
      if (v10 != v9)
      {
        while (*v10 != v14)
        {
          if (++v10 == v9)
          {
            uint64_t v10 = *(void **)(v5 + 40);
            break;
          }
        }
      }
      if (v10 != v9) {
        goto LABEL_21;
      }
      uint64_t v12 = *(void **)(v5 + 56);
      uint64_t v11 = *(void **)(v5 + 64);
      if (v12 != v11)
      {
        while (*v12 != v14)
        {
          if (++v12 == v11)
          {
            uint64_t v12 = *(void **)(v5 + 64);
            break;
          }
        }
      }
      if (v12 != v11)
      {
LABEL_21:
        BOOL v8 = 1;
        goto LABEL_22;
      }
      uint64_t v7 = *(void **)(v5 + 80);
      uint64_t v6 = *(void **)(v5 + 88);
      if (v7 != v6)
      {
        while (*v7 != v14)
        {
          if (++v7 == v6)
          {
LABEL_8:
            uint64_t v7 = v6;
            break;
          }
        }
      }
    }
    BOOL v8 = v7 != v6;
  }
  else
  {
    BOOL v8 = 0;
  }
LABEL_22:
  sub_2168EE084((uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_21697C414(&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  return v8;
}

void sub_216C62A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_2168EE084((uint64_t)va2);
  sub_21697B754((uint64_t *)va);
  sub_21697B754((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C62A5C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *__return_ptr a1@<X8>, pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, void *a3@<X0>, int *a4@<X2>)
{
  double v12[2] = *MEMORY[0x263EF8340];
  *((void *)a1 + 1) = 0;
  uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this);
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (sub_216C5B388(a3, this, (void *)v9 + 53, a1, 0))
  {
    int v10 = 8;
  }
  else
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v11) {
      uint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    int v10 = sub_216C5B388(a3, this, (void *)v11 + 7, a1, 0);
  }
  uint64_t result = (uint64_t *)sub_216980CE8(a1);
  if ((result & 1) == 0)
  {
    v12[1] = 0;
    sub_2168ED33C(a1, v12);
    uint64_t result = (uint64_t *)sub_2168EE084((uint64_t)v12);
LABEL_11:
    int v10 = 0;
  }
  if (a4) {
    *a4 = v10;
  }
  return result;
}

void sub_216C62B84(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C62B98(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_216C6095C((void *)a1, a2, a3);
  if (*(void *)(a1 + 32) + 32 * *(void *)(a1 + 40) == v4) {
    return 0;
  }
  sub_216C62BE8((_DWORD *)a1, v4);
  uint64_t result = 1;
  *(unsigned char *)(a1 + 73) = 1;
  return result;
}

_DWORD *sub_216C62BE8(_DWORD *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(__int16 *)(a2 + 4) != -1)
  {
    uint64_t result = sub_216C5D588(a2);
    *(_WORD *)(a2 + 4) = -1;
  }
  --v3[6];
  uint64_t v4 = v3[4];
  uint64_t v5 = (a2 - v4) >> 5;
  uint64_t v6 = (v5 + 1) & *v3;
  int v7 = *(__int16 *)(v4 + 32 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      BOOL v8 = (int *)(v4 + 32 * v6);
      __int16 v9 = v7 - 1;
      uint64_t v10 = v4 + 32 * v5;
      int v11 = *v8;
      sub_21697D878((_DWORD *)(v10 + 8), v8 + 2);
      sub_21697D8B4((_DWORD *)(v10 + 12), v8 + 3);
      *(void *)(v10 + 16) = *((void *)v8 + 2);
      *((void *)v8 + 2) = 0;
      *(_DWORD *)(v10 + 24) = v8[6];
      *(_DWORD *)uint64_t v10 = v11;
      *(_WORD *)(v10 + 4) = v9;
      uint64_t v4 = v3[4];
      uint64_t result = (_DWORD *)(v4 + 32 * v6);
      uint64_t v12 = result + 1;
      if (*((__int16 *)result + 2) != -1)
      {
        uint64_t result = sub_216C5D588((uint64_t)result);
        _WORD *v12 = -1;
        uint64_t v4 = v3[4];
      }
      uint64_t v5 = v6;
      uint64_t v6 = *v3 & (v6 + 1);
      int v7 = *(__int16 *)(v4 + 32 * v6 + 4);
    }
    while (v7 > 0);
  }
  return result;
}

uint64_t sub_216C62D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_216C62BE8((_DWORD *)a1, a2);
  if (*(__int16 *)(v2 + 4) == -1)
  {
    uint64_t v4 = (__int16 *)(v2 + 36);
    uint64_t v5 = v2 + 32;
    do
    {
      uint64_t v2 = v5;
      if (*((unsigned char *)v4 - 30)) {
        break;
      }
      int v6 = *v4;
      v4 += 16;
      v5 += 32;
    }
    while (v6 == -1);
  }
  *(unsigned char *)(a1 + 73) = 1;
  return v2;
}

uint64_t sub_216C62D64(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  sub_216981010(&v8, a2);
  sub_21698105C(&v9, a2 + 1);
  uint64_t v10 = *(void *)a3;
  *(void *)a3 = 0;
  int v11 = *(_DWORD *)(a3 + 8);
  uint64_t v6 = sub_216C6121C(a1, &v8, (uint64_t)&v8);
  sub_216C5D618(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  return v6;
}

void sub_216C62E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C5D5D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C62E24(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (a3 == 8 || a3 == 1) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
  }
  return 1;
}

void sub_216C630DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2168EE084(v2 - 88);
  *(void *)(v2 - 88) = va;
  sub_216981168((void ***)(v2 - 88));
  sub_216980BCC((void **)va1);
  _Unwind_Resume(a1);
}

int *sub_216C63148(int *a1, int *a2)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 2;
    do
    {
      if (v5 == a2) {
        return a2;
      }
      uint64_t v6 = *((void *)v5 - 1);
      uint64_t v7 = *(void *)v5;
      v5 += 2;
    }
    while (v6 != v7);
    unsigned int v8 = v5 - 4;
    while (v5 != a2)
    {
      if (*(void *)v8 != *(void *)v5)
      {
        sub_21697DE94(v8 + 2, v5);
        sub_21697DEEC(v8 + 3, v5 + 1);
        v8 += 2;
      }
      v5 += 2;
    }
    return v8 + 2;
  }
  return result;
}

void sub_216C631F0(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  void v21[2] = *MEMORY[0x263EF8340];
  if (sub_216C63758(a2))
  {
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v17 = (uint64_t *)v18;
    uint64_t v6 = *((void *)a2 + 1);
    if ((v6 & 4) != 0) {
      uint64_t v7 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v7 = *(void **)a2;
    }
    unsigned int v8 = (uint64_t *)v7[1];
    uint64_t v9 = *v8;
    if (v8[1] != *v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        if (*v7) {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetTimeSampleValueImpl(*(void *)(a1 + 88), (uint64_t)v7, v12, &v19);
        }
        else {
          sub_2168EE4C4(&v19, (void *)(v7[2] + v10));
        }
        if (sub_216C636CC((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
        {
          uint64_t v13 = *(void *)(a1 + 88);
          if ((v20 & 4) != 0) {
            uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
          }
          else {
            uint64_t v14 = &v19;
          }
          uint64_t v15 = *v14;
          v21[1] = 0;
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v13, v15, (uint64_t)v21);
        }
        else
        {
          sub_2168EE4C4(v21, &v19);
        }
        sub_216C637E4(&v17, (double *)(v9 + v11), (uint64_t *)(v9 + v11), v21);
        sub_2168EE084((uint64_t)v21);
        sub_2168EE084((uint64_t)&v19);
        ++v12;
        int v16 = (uint64_t *)v7[1];
        uint64_t v9 = *v16;
        v11 += 8;
        v10 += 16;
      }
      while (v12 != (v16[1] - *v16) >> 3);
    }
    sub_216A9D28C((uint64_t)&v17, a3);
    sub_216997EC4((uint64_t)&v17, v18[0]);
  }
  else
  {
    sub_2168EE4C4(a3, a2);
  }
}

void sub_216C633F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *sub_216C63430@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, void *a2@<X8>)
{
  if (sub_216B6E1CC(a1))
  {
    uint64_t v4 = *((void *)a1 + 1);
    if ((v4 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
  }

  return sub_2168EE4C4(a2, a1);
}

void sub_216C6357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 24) = v5;
  sub_2169CC78C((void ***)(v6 - 24));
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_216C635A8(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_216C62A5C((pxrInternal__aapl__pxrReserved__::VtValue *)&v7, a2, a1, 0);
  uint64_t v5 = v8;
  if (a4 && v8)
  {
    if ((v8 & 4) != 0) {
      (*(void (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations();
  }
  sub_2168EE084((uint64_t)&v7);
  return v5 != 0;
}

void sub_216C63688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C636CC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217481CD3 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C75ED28);
}

uint64_t sub_216C63758(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217481E6ALL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C75EDC8);
}

uint64_t *sub_216C637E4(uint64_t **a1, double *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1 + 1;
  uint64_t v10 = a1 + 1;
  if (v7)
  {
    double v11 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        double v12 = *((double *)v7 + 4);
        if (v11 >= v12) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        uint64_t v9 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      if (v12 >= v11) {
        break;
      }
      uint64_t v7 = (uint64_t *)v7[1];
      if (!v7)
      {
        uint64_t v9 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v13 = (uint64_t *)operator new(0x38uLL);
    v15[1] = v8;
    void v13[4] = *a3;
    sub_2168EDFA8(v13 + 5, a4);
    char v16 = 1;
    sub_21677B358(a1, (uint64_t)v10, v9, v13);
    v15[0] = 0;
    sub_216997E6C((uint64_t)v15, 0);
    return v13;
  }
  return (uint64_t *)v10;
}

void *sub_216C638DC(void *a1, unint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    sub_2169D8290(a1, a2);
    uint64_t v7 = (__n128 *)a1[1];
    uint64_t v8 = 3 * a2;
    uint64_t v9 = &v7[3 * a2];
    uint64_t v10 = 16 * v8;
    do
    {
      sub_2169D8390(v4, v7, a3);
      v7 += 3;
      v10 -= 48;
    }
    while (v10);
    a1[1] = v9;
  }
  return a1;
}

void sub_216C63970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL sub_216C63990(uint64_t a1, _DWORD **a2)
{
  int v4 = strcmp((const char *)(0x800000021746952ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if ((_DWORD **)v5 != a2) {
      sub_216A98D9C(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
    }
  }
  return v4 == 0;
}

BOOL sub_216C63A18(int a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  sub_216C62A5C(&v7, a1, a2);
  uint64_t v5 = v8;
  if (a4 && v8)
  {
    if ((v8 & 4) != 0) {
      (*(void (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ApplyOperations();
  }
  sub_2168EE084((uint64_t)&v7);
  return v5 != 0;
}

void sub_216C63AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

atomic_uint **sub_216C63B3C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  if (sub_216995B54(a1))
  {
    uint64_t v26 = 0;
    int v4 = (atomic_uint *)operator new(0x20uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)int v4 = 0;
    v4[6] = 0;
    unint64_t v27 = v4;
    atomic_fetch_add_explicit(v4 + 6, 1u, memory_order_relaxed);
    memset(v28, 0, sizeof(v28));
    uint64_t v5 = *((void *)a1 + 1);
    if ((v5 & 4) != 0)
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a1);
      int v4 = v27;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
    }
    sub_2168042E8((void **)v4, v6[2]);
    sub_216C63F88(v28, v6[2]);
    uint64_t v9 = (void *)*v6;
    uint64_t v7 = v6 + 1;
    uint64_t v8 = v9;
    if (v9 != v7)
    {
      do
      {
        uint64_t v10 = v27;
        double v11 = (void *)*((void *)v27 + 1);
        unint64_t v12 = *((void *)v27 + 2);
        if ((unint64_t)v11 >= v12)
        {
          uint64_t v14 = *(void **)v27;
          uint64_t v15 = ((uint64_t)v11 - *(void *)v27) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v17 = v12 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)sub_21677CB28((uint64_t)(v27 + 4), v18);
            uint64_t v14 = *(void **)v27;
            double v11 = (void *)*((void *)v27 + 1);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = &v19[8 * v15];
          *(void *)uint64_t v20 = v8[4];
          uint64_t v13 = v20 + 8;
          while (v11 != v14)
          {
            uint64_t v21 = *--v11;
            *((void *)v20 - 1) = v21;
            v20 -= 8;
          }
          *(void *)uint64_t v10 = v20;
          *((void *)v10 + 1) = v13;
          *((void *)v10 + 2) = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          void *v11 = v8[4];
          uint64_t v13 = v11 + 1;
        }
        *((void *)v10 + 1) = v13;
        sub_216C6401C(v28, v8 + 5);
        uint64_t v22 = (void *)v8[1];
        if (v22)
        {
          do
          {
            int v23 = v22;
            uint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            int v23 = (void *)v8[2];
            BOOL v24 = *v23 == (void)v8;
            uint64_t v8 = v23;
          }
          while (!v24);
        }
        uint64_t v8 = v23;
      }
      while (v23 != v7);
    }
    sub_216C64130(&v26, a2);
    unsigned __int8 v29 = (void **)v28;
    sub_216932118(&v29);
    return sub_2169CB1D8(&v27);
  }
  else
  {
    return (atomic_uint **)sub_2168EE4C4(a2, a1);
  }
}

void sub_216C63D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C64174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216C63D98(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (!sub_21698E94C(a1)) {
    goto LABEL_18;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = (v4 & 4) != 0
     ? (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1)
     : *(void *)a1;
  if (!*(unsigned char *)v5) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v5 + 16) - v6) >> 4);
  if (v7 != 1)
  {
    if (!v7)
    {
      v10[0] = 0;
      v10[1] = 0;
      uint64_t v11 = 0;
      uint64_t v9 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v9 + 1);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v8, 0.0, 1.0);
      pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, v10, &v9, v8);
      *(void *)(a2 + 8) = &off_26C75A798;
      sub_216B550D8((atomic_uint **)a2, (long long *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
      sub_21697C414(&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
      sub_21697C414(&v9);
      if (SHIBYTE(v11) < 0) {
        operator delete(v10[0]);
      }
      return;
    }
    goto LABEL_18;
  }
  if (*(char *)(v6 + 23) < 0)
  {
    if (*(void *)(v6 + 8)) {
      goto LABEL_14;
    }
LABEL_18:
    sub_2168EE4C4((void *)a2, a1);
    return;
  }
  if (!*(unsigned char *)(v6 + 23)) {
    goto LABEL_18;
  }
LABEL_14:
  *(void *)(a2 + 8) = &off_26C75A798;

  sub_216B550D8((atomic_uint **)a2, (long long *)v6);
}

void sub_216C63F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216C63F88(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216787EE0(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    sub_21696CA88(a1, v7);
    return sub_21696CB10((uint64_t)v7);
  }
  return result;
}

void sub_216C64008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21696CB10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C6401C(void *a1, void *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)sub_216787EE0(v4, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    unint64_t v16 = &v14[16 * v10];
    unint64_t v18 = &v14[16 * v13];
    sub_2168EE4C4(v16, a2);
    uint64_t v17 = v16 + 16;
    sub_21696CA88(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = sub_21696CB10((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)sub_2168EE4C4(*(void **)(v4 - 8), a2);
    unint64_t v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_216C64110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

atomic_uint *sub_216C64130@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_216C641B8(a2, a1);
}

void sub_216C64160(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C64174(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216932118(&v3);
  sub_2169CB1D8((atomic_uint **)(a1 + 8));
  return a1;
}

atomic_uint *sub_216C641B8(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  if ((sub_216C63758(a1) & 1) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v4 = operator new(0x20uLL);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = 0;
    *((_DWORD *)v4 + 6) = 0;
    unint64_t v7 = (atomic_uint *)v4;
    atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
    memset(v8, 0, sizeof(v8));
    sub_216C64274((uint64_t)a1, &v6);
    unint64_t v9 = (void **)v8;
    sub_216932118(&v9);
    sub_2169CB1D8(&v7);
  }
  return sub_216C64340((atomic_uint **)a1, a2);
}

void sub_216C64260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216C64174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216C64274(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C75EDD8;
  sub_216C6499C((atomic_uint **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216C64308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

atomic_uint *sub_216C64340(atomic_uint **a1, void *a2)
{
  uint64_t result = sub_216C64A00(a1);
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *((void *)result + 1);
  uint64_t v6 = a2[1];
  *(void *)uint64_t result = *a2;
  *((void *)result + 1) = v6;
  *a2 = v4;
  a2[1] = v5;
  uint64_t v7 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v7;
  uint64_t v8 = *((void *)result + 3);
  *((void *)result + 3) = a2[3];
  a2[3] = v8;
  uint64_t v9 = *((void *)result + 4);
  uint64_t v10 = *((void *)result + 5);
  uint64_t v11 = a2[5];
  *((void *)result + 4) = a2[4];
  *((void *)result + 5) = v11;
  a2[4] = v9;
  a2[5] = v10;
  return result;
}

uint64_t *sub_216C643A4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216C643C4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216C6452C(a1);
}

uint64_t sub_216C643D4()
{
  return 1;
}

unint64_t sub_216C643DC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  uint64_t v4 = *a1 + 5;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_216C64598((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t sub_216C6443C(uint64_t *a1, uint64_t *a2)
{
  return sub_216C64744(*a1, *a2);
}

uint64_t sub_216C64448(uint64_t *a1, uint64_t a2)
{
  return sub_216C64744(*a1, a2);
}

uint64_t sub_216C64454()
{
  return 0;
}

void *sub_216C64460(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(a2);
}

void *sub_216C64470()
{
  return &unk_26C75EDC8;
}

uint64_t sub_216C6447C()
{
  return 0;
}

uint64_t sub_216C64484()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216C64490()
{
  return 0;
}

uint64_t sub_216C64498()
{
  return 0;
}

BOOL sub_216C644A0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217481E6ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216C644DC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75EDC8, a2, a3);
}

void *sub_216C64500()
{
  return &unk_26C75EDC8;
}

uint64_t sub_216C6450C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216C64514@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C75EDD8;
  return sub_216C6499C((atomic_uint **)a2, v2);
}

uint64_t *sub_216C6452C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 16);
    sub_216932118(&v4);
    sub_2169CB1D8((atomic_uint **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_216C64598(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_216C645D4(a1, a3, a4, a5);
}

uint64_t sub_216C645D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7 = sub_216C646D8((uint64_t)&v9, *a2);
  if (*(unsigned char *)(a1 + 8)) {
    v7 += (*(void *)a1 + v7 + (*(void *)a1 + v7) * (*(void *)a1 + v7)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return sub_216C64650(a1, a3, a4);
}

uint64_t sub_216C64650(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    uint64_t v8 = v7 >> 4;
    do
    {
      --v8;
      char v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
      uint64_t result = sub_2168EEDCC(v5, v6);
      uint64_t v6 = v9;
    }
    while (v8);
  }
  uint64_t v10 = *a3;
  if (*(unsigned char *)(v5 + 8)) {
    v10 += (unint64_t)(*(void *)v5 + v10 + (*(void *)v5 + v10) * (*(void *)v5 + v10)) >> 1;
  }
  else {
    *(unsigned char *)(v5 + 8) = 1;
  }
  *(void *)uint64_t v5 = v10;
  return result;
}

unint64_t sub_216C646D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(double **)a2;
  double v3 = 0.0;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = v4 >> 3;
    do
    {
      double v7 = *v2++;
      double v8 = v7;
      if (v7 == 0.0) {
        double v8 = 0.0;
      }
      if (v5)
      {
        *(void *)&double v3 = *(void *)&v8
                       + ((*(void *)&v3
                         + *(void *)&v8
                         + (*(void *)&v3 + *(void *)&v8) * (*(void *)&v3 + *(void *)&v8)) >> 1);
      }
      else
      {
        int v5 = 1;
        double v3 = v8;
      }
      --v6;
    }
    while (v6);
  }
  return bswap64(0x9E3779B97F4A7C55 * *(void *)&v3);
}

uint64_t sub_216C64744(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t result = sub_216C647EC((double ***)(a1 + 8), (double ***)(a2 + 8));
  if (!result) {
    return result;
  }
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 16);
  double v7 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 24);
  double v8 = *(std::type_info **)(a2 + 16);
  if (v7 - v6 != *(void *)(a2 + 24) - (void)v8) {
    return 0;
  }
  while (v6 != v7)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v6, v8, v5);
    if (!result) {
      return result;
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
    ++v8;
  }
  return *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

BOOL sub_216C647EC(double ***a1, double ***a2)
{
  if (*a1 == *a2) {
    return 1;
  }
  double v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = **a2;
  if ((char *)v2 - (char *)v3 != (char *)(*a2)[1] - (char *)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  int v5 = v3 + 1;
  do
  {
    double v6 = *v4++;
    BOOL result = *(v5 - 1) == v6;
    BOOL v8 = *(v5 - 1) != v6 || v5 == v2;
    ++v5;
  }
  while (!v8);
  return result;
}

atomic_uint *sub_216C64850(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    double v3 = (atomic_uint *)operator new(0x38uLL);
    sub_216C648D8((uint64_t)v3, *a1);
    atomic_fetch_add_explicit(v3 + 12, 1u, memory_order_relaxed);
    int v5 = *a1;
    *a1 = v3;
    sub_216C6452C((uint64_t *)&v5);
  }
  return *a1;
}

void sub_216C648C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C648D8(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 24), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_21696C2C8((void *)(a1 + 16), a2[2], a2[3], (uint64_t)(a2[3] - a2[2]) >> 4);
  *(void *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = a2[5];
  atomic_store(0, (unsigned int *)(a1 + 48));
  return a1;
}

void sub_216C64954(_Unwind_Exception *a1)
{
  sub_2169CB1D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C64968(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216C6499C(atomic_uint **a1, void *a2)
{
  uint64_t v4 = (atomic_uint *)operator new(0x38uLL);
  uint64_t result = sub_216C648D8((uint64_t)v4, a2);
  *a1 = v4;
  atomic_fetch_add_explicit(v4 + 12, 1u, memory_order_relaxed);
  return result;
}

void sub_216C649EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

atomic_uint *sub_216C64A00(atomic_uint **a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  unsigned int v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, atomic_uint **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216C64850(a1);
}

uint64_t *sub_216C64A94(uint64_t ***a1)
{
  unsigned int v2 = operator new(0x20uLL);
  double v3 = *a1;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unsigned int v2 = 0;
  sub_216A9D554((uint64_t *)v2, *v3, v3[1], 0xAAAAAAAAAAAAAAABLL * (v3[1] - *v3));
  *((_DWORD *)v2 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v2 + 6, 1u, memory_order_relaxed);
  int v5 = *a1;
  *a1 = (uint64_t **)v2;
  return sub_216C5D618((uint64_t *)&v5);
}

void sub_216C64B14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216C64B28(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216782ED8(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  unint64_t v16 = (uint64_t *)&v12[24 * v5];
  unint64_t v18 = &v12[24 * v11];
  sub_216C64C38(v16, a2, a3);
  uint64_t v17 = v16 + 3;
  sub_216A94BDC(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216A94DA0((uint64_t)&v15);
  return v13;
}

void sub_216C64C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216A94DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216C64C38(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4(a1 + 1, a3);
  return a1;
}

void sub_216C64CB0(void *a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = 0;
  if (v4)
  {
    double v7 = (__int16 *)(v5 + 4);
    while (1)
    {
      int v8 = *v7;
      v7 += 16;
      if (v8 != -1) {
        break;
      }
      if (v4 == ++v6) {
        return;
      }
    }
  }
  if (v6 != v4)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v5 + 32 * v4;
    uint64_t v12 = v5 + 32 * v6;
    do
    {
      uint64_t v13 = v10;
      int v14 = v9;
      uint64_t v9 = *a2;
      uint64_t v15 = a2[1];
      unint64_t v10 = a2[2];
      a2[1] = v14;
      a2[2] = v13;
      *a2 = v14;
      unint64_t v16 = (double **)sub_216C64DDC(a1, (unsigned int *)(v12 + 8));
      sub_216C64FD8(v9, v15, *v16, v16[1], (uint64_t)a2, &v18);
      uint64_t v17 = v12 + 32;
      do
      {
        uint64_t v12 = v17;
        if (*(unsigned char *)(v17 - 26)) {
          break;
        }
        v17 += 32;
      }
      while (*(__int16 *)(v12 + 4) == -1);
    }
    while (v12 != v11);
    if (v9) {
      operator delete(v9);
    }
  }
}

void sub_216C64DB4(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216C64DDC(void *a1, unsigned int *a2)
{
  uint64_t v4 = a1[11];
  uint64_t v5 = (void *)(v4 + 6512);
  if (*(char *)(v4 + 6535) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  v17[0] = "usd/crateData.cpp";
  v17[1] = "_ListTimeSamplesForPath";
  void v17[2] = 931;
  v17[3] = "const std::vector<double> &pxrInternal__aapl__pxrReserved__::Usd_CrateDataImpl::_ListTimeSamplesForPath(const"
           " SdfPath &) const";
  char v18 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v19, v5, v17);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v6) {
    uint64_t v6 = sub_216A9E57C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  }
  uint64_t v7 = sub_216C6095C(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 32 * a1[5] == v7) {
    goto LABEL_15;
  }
  int v8 = *(uint64_t **)(v7 + 16);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1] - *v8;
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v11 = v10 / 24;
  uint64_t v12 = (uint64_t *)(v9 + 8);
  while ((*(v12 - 1) & 0xFFFFFFFFFFFFFFF8) != (*(void *)v6 & 0xFFFFFFFFFFFFFFF8))
  {
    v12 += 3;
    if (!--v11) {
      goto LABEL_15;
    }
  }
  if (sub_216C63758((pxrInternal__aapl__pxrReserved__::VtValue *)v12))
  {
    uint64_t v13 = v12[1];
    if ((v13 & 4) != 0) {
      uint64_t v14 = (*(uint64_t (**)(uint64_t *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v12);
    }
    else {
      uint64_t v14 = *v12;
    }
    uint64_t v15 = *(uint64_t **)(v14 + 8);
  }
  else
  {
LABEL_15:
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_26798C6D0, memory_order_acquire))
    {
      uint64_t v15 = &qword_26798C6B8;
    }
    else
    {
      uint64_t v15 = &qword_26798C6B8;
      if (__cxa_guard_acquire(&qword_26798C6D0))
      {
        qword_26798C6B8 = 0;
        unk_26798C6C0 = 0;
        qword_26798C6C8 = 0;
        __cxa_atexit((void (*)(void *))sub_216C64968, &qword_26798C6B8, &dword_216758000);
        __cxa_guard_release(&qword_26798C6D0);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v19);
  return v15;
}

void sub_216C64FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)va);
  _Unwind_Resume(a1);
}

double *sub_216C64FD8@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t a5@<X4>, double **a6@<X8>)
{
  int v8 = a1;
  uint64_t v13 = a5;
  if (a1 == a2)
  {
LABEL_8:
    uint64_t result = (double *)sub_216C651A8(a3, a4, a5);
    a4 = result;
  }
  else
  {
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        a3 += *v8 >= *a3;
        sub_216C650B8(&v13, v8++);
      }
      else
      {
        sub_216C650B8(&v13, a3++);
      }
      if (v8 == a2)
      {
        a5 = v13;
        int v8 = a2;
        goto LABEL_8;
      }
    }
    uint64_t result = (double *)sub_216C651A8(v8, a2, v13);
    int v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t *sub_216C650B8(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    int v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_21677CB28((uint64_t)v6, v12);
      int v8 = *(void **)v4;
      uint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *sub_216C651A8(void *a1, void *a2, uint64_t a3)
{
  double v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    sub_216C650B8(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t sub_216C6520C(uint64_t a1, double *a2, double *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216A9E4F4((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216C65278(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216C65290(uint64_t a1, double *a2, double *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216A9E4F4((uint64_t **)a1, v4, v6, (uint64_t *)v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216C652FC(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_216C65314(uint64_t a1, char *__src, char *a3)
{
  double v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_21677CB28(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    long long __p = v19;
    unint64_t v27 = v20;
    uint64_t v28 = v20;
    unsigned __int8 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_21677CB28(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        unint64_t v27 = v20;
        unsigned __int8 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        unint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_216C50DD0((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)std::string __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    unint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_216C65520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216C65558(void *a1, char *a2, char *a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v7 = a1[2];
  if (v6 >= v7)
  {
    uint64_t v9 = (char *)*a1;
    unint64_t v10 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v10 >> 60) {
      sub_21677CB10();
    }
    uint64_t v11 = a2 - v9;
    uint64_t v12 = (a2 - v9) >> 4;
    uint64_t v13 = v7 - (void)v9;
    if (v13 >> 3 > v10) {
      unint64_t v10 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v10;
    }
    int v39 = a1 + 2;
    if (v14) {
      uint64_t v15 = (char *)sub_216787EE0((uint64_t)(a1 + 2), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[16 * v12];
    double v35 = v15;
    char v36 = v16;
    unsigned int v37 = v16;
    uint64_t v38 = &v15[16 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if (v9 == v4) {
          unint64_t v18 = 1;
        }
        else {
          unint64_t v18 = v11 >> 3;
        }
        v40[4] = v8;
        uint64_t v19 = (char *)sub_216787EE0(v8, v18);
        unint64_t v21 = v19;
        unint64_t v22 = &v19[16 * (v18 >> 2)];
        int v23 = &v19[16 * v20];
        uint64_t v24 = v36;
        int v25 = v36;
        uint64_t v26 = v22;
        uint64_t v27 = v37 - v36;
        if (v37 != v36)
        {
          uint64_t v34 = &v19[16 * v20];
          uint64_t v26 = &v22[v27 & 0xFFFFFFFFFFFFFFF0];
          uint64_t v28 = 16 * (v27 >> 4);
          unsigned __int8 v29 = &v19[16 * (v18 >> 2)];
          uint64_t v30 = v36;
          do
          {
            unsigned __int8 v29 = (char *)(sub_2168EDFA8(v29, v30) + 2);
            v30 += 16;
            v28 -= 16;
          }
          while (v28);
          int v25 = v37;
          int v23 = v34;
        }
        int v31 = v35;
        uint64_t v32 = v38;
        double v35 = v21;
        char v36 = v22;
        v40[0] = v31;
        v40[1] = v24;
        unsigned int v37 = v26;
        uint64_t v38 = v23;
        void v40[2] = v25;
        void v40[3] = v32;
        sub_21696CB10((uint64_t)v40);
        uint64_t v16 = v26;
      }
      else
      {
        unint64_t v17 = v12 + 2;
        if (v12 >= -1) {
          unint64_t v17 = v12 + 1;
        }
        v16 -= 16 * (v17 >> 1);
        char v36 = v16;
        unsigned int v37 = v16;
      }
    }
    sub_2168EE4C4(v16, a3);
    v37 += 16;
    uint64_t v4 = (char *)sub_216AE3AB8(a1, &v35, v4);
    sub_21696CB10((uint64_t)&v35);
  }
  else if (a2 == (char *)v6)
  {
    sub_2168EE4C4(a2, a3);
    a1[1] = v4 + 16;
  }
  else
  {
    sub_216AE3A08((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 16));
    if (v4 <= a3) {
      a3 += 16 * (a1[1] > (unint64_t)a3);
    }
    sub_2168EC6DC(v4, a3);
  }
  return v4;
}

void sub_216C65788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

atomic_uint **sub_216C657A8(atomic_uint **a1)
{
  unsigned int v2 = operator new(0x20uLL);
  double v3 = *a1;
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = 0;
  sub_21677CA50(v2, *(const void **)v3, *((void *)v3 + 1), (uint64_t)(*((void *)v3 + 1) - *(void *)v3) >> 3);
  *((_DWORD *)v2 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v2 + 6, 1u, memory_order_relaxed);
  uint64_t v5 = *a1;
  *a1 = (atomic_uint *)v2;
  return sub_2169CB1D8(&v5);
}

void sub_216C6581C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216C65830(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216C65870(v3);
    operator delete(v4);
  }
}

uint64_t sub_216C65870(uint64_t a1)
{
  unsigned int v2 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88);
  sub_216C658D4((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 88), 0);
  sub_216C65914(a1);
  sub_216C658D4(v2, 0);
  uint64_t v4 = (void **)(a1 + 8);
  sub_216C5D48C(&v4);
  return a1;
}

void sub_216C658D4(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v3);
    operator delete(v4);
  }
}

void sub_216C65914(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)sub_216C65A40((uint64_t)v2, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0) {
    sub_216C65988((uint64_t)v2);
  }
  uint64_t v4 = (void **)&v3;
  sub_216C5D48C(&v4);
}

void sub_216C65968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 24) = &a11;
  sub_216C5D48C((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

void sub_216C65988(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)sub_216C65A40((uint64_t)v6, a1);
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v4 = sub_216C65B94(DetachedDispatcher, (uint64_t)v6);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_216C65AF4();
  }
  uint64_t v8 = (void **)&v7;
  sub_216C5D48C(&v8);
}

void sub_216C65A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 24) = &a11;
  sub_216C5D48C((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_216C65A40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (void *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v5 = *(int **)(a1 + 8);
  if (v5 == *(int **)(a1 + 16)) {
    uint64_t v5 = sub_216C5D380();
  }
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 4sub_216C01044((uint64_t *)this, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(void *)a2 = 0;
  sub_216C5D4E0(v4);
  unint64_t v6 = sub_216C5D380();
  *(_WORD *)(a2 + 72) = 0;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 4sub_216C01044((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return a1;
}

void sub_216C65AF4()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  unsigned int v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_216C65B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216C65B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x60uLL);
  *((unsigned char *)v5 - 11) = 1;
  *uint64_t v5 = &unk_26C75EEA0;
  sub_216C65A40((uint64_t)(v5 + 1), a2);
  v5[11] = a1 + 264;
  return v5;
}

uint64_t sub_216C65C18(uint64_t a1)
{
  *(void *)a1 = &unk_26C75EEA0;
  unint64_t v3 = (void **)(a1 + 16);
  sub_216C5D48C(&v3);
  return a1;
}

void sub_216C65C70(char *a1)
{
  *(void *)a1 = &unk_26C75EEA0;
  unsigned int v2 = (void **)(a1 + 16);
  sub_216C5D48C(&v2);
  operator delete(a1);
}

uint64_t sub_216C65CCC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_216C65AF4();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 88));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_216C65D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void *sub_216C65D70(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    unint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216C65E3C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216C65E58()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

void sub_216C65EA0()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

void sub_216C65EE8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_216C65F30()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void pxrInternal__aapl__pxrReserved__::UsdReadOutOfBoundsError::~UsdReadOutOfBoundsError(std::exception *this)
{
  pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::FromString(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *this, const char *a2)
{
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  int v2 = sscanf((const char *)this, "%u.%u.%u", (char *)&v8 + 4, &v8, &v7);
  if (v7 <= 0xFF && v8 <= 0xFF && HIDWORD(v8) <= 0xFF && v2 == 3) {
    return (v8 << 8) | (v7 << 16) | BYTE4(v8);
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::AsString(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *this, const char *a2, char *a3)
{
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileRange::~_FileRange(FILE **this)
{
  int v2 = *this;
  if (v2)
  {
    if (*((unsigned char *)this + 24)) {
      fclose(v2);
    }
  }
}

{
  FILE *v2;

  int v2 = *this;
  if (v2)
  {
    if (*((unsigned char *)this + 24)) {
      fclose(v2);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_AddRangeReference(atomic_ullong *this, const void *a2, uint64_t a3)
{
  uint64_t v6 = (char *)(this + 5);
  uint64_t v7 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached;
  *(void *)(v7 + 24) = this;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 4sub_216C01044((uint64_t *)this, 0) = a3;
  sub_216C7FCE4((uint64_t)v6, v7 + 8, (atomic_ullong **)v7, (uint64_t)v9);
  uint64_t result = v9[0] + 8;
  if (!atomic_fetch_add_explicit((atomic_ullong *volatile)(v9[0] + 8), 1uLL, memory_order_relaxed)) {
    atomic_fetch_add_explicit(this, 1uLL, memory_order_relaxed);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_DetachReferencedRanges(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl *this)
{
  uint64_t v1 = (unint64_t *)*((void *)this + 9);
  if (v1)
  {
    while ((v1[6] & 1) == 0)
    {
      uint64_t v1 = (unint64_t *)*v1;
      if (!v1) {
        return;
      }
    }
LABEL_5:
    if (atomic_load(v1 + 1))
    {
      unint64_t v3 = v1[4];
      unsigned int v4 = sub_216C6628C();
      unint64_t v5 = v3 + v1[5] - 1;
      unint64_t v6 = v3 / v4;
      unint64_t v7 = v5 / sub_216C6628C();
      uint64_t v8 = v6 * sub_216C6628C();
      uint64_t v9 = v7 - v6 + 1;
      unsigned int v10 = sub_216C6628C();
      if (pxrInternal__aapl__pxrReserved__::ArchSetMemoryProtection(v8, v9 * v10, 3))
      {
        unsigned int v12 = sub_216C6628C();
        if (v9)
        {
          unint64_t v13 = v6 * v12;
          do
          {
            --v9;
            *(unsigned char *)unint64_t v13 = *(unsigned char *)v13;
            v13 += sub_216C6628C();
          }
          while (v9);
        }
      }
      else
      {
        v14[0] = "usd/crateFile.cpp";
        v14[1] = "_DetachReferencedRanges";
        void v14[2] = 550;
        _OWORD v14[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_DetachReferencedRanges()";
        char v15 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"could not set address range permissions to copy-on-write", v11);
      }
    }
    while (1)
    {
      uint64_t v1 = (unint64_t *)*v1;
      if (!v1) {
        break;
      }
      if (v1[6]) {
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_216C6628C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91670, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B91670);
    if (v1)
    {
      dword_267B91668 = pxrInternal__aapl__pxrReserved__::ArchGetPageSize(v1);
      __cxa_guard_release(&qword_267B91670);
    }
  }
  return dword_267B91668;
}

void sub_216C662E8(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::ZeroCopySource(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = 0;
  result[1] = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached;
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

{
  *uint64_t result = 0;
  result[1] = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached;
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::_Detached(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 16);
  if (atomic_fetch_add_explicit((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
  {
    __dmb(9u);
    if (v2)
    {
      sub_216C76F20((uint64_t)v2 + 40, a2);
      sub_2168351F0((uint64_t)v2 + 8, 0);
      operator delete(v2);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::ZeroCopySource::operator==(void *a1, void *a2)
{
  return a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4];
}

const char *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection(const char **a1, char *__s1)
{
  unint64_t v3 = *a1;
  unsigned int v4 = a1[1];
  while (v3 != v4)
  {
    if (!strcmp(__s1, v3)) {
      return v3;
    }
    v3 += 32;
  }
  v6[0] = "usd/crateFile.cpp";
  v6[1] = "GetSection";
  v6[2] = 810;
  void v6[3] = "const CrateFile::_Section *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSe"
          "ction(_SectionName) const";
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file missing %s section", __s1);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetMinimumSectionStart(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)this + 32;
  if (*(void *)this != v2 && v3 != v2)
  {
    do
    {
      if (*(void *)(v3 + 16) < *(void *)(v1 + 16)) {
        uint64_t v1 = v3;
      }
      v3 += 32;
    }
    while (v3 != v2);
  }
  if (v1 == v2) {
    return 88;
  }
  else {
    return *(void *)(v1 + 16);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanRead(uint64_t a1)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v7 = *(void *)(a1 + 16);
  }
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    BOOL CanRead = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanRead(v3, &v8);
  }
  else {
    BOOL CanRead = 0;
  }
  if (v9) {
    sub_216784EC4(v9);
  }
  return CanRead;
}

void sub_216C66568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CanRead(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a2 + 40))();
  uint64_t v5 = v4;
  if (v3)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
    pxrInternal__aapl__pxrReserved__::ArchFileAdvise(v3, v5, v6, 3);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  uint64_t v16 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = *a2;
  }
  uint64_t v17 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  sub_216C667C0(&v15, v9, (uint64_t)v19);
  if (v16) {
    sub_216784EC4(v16);
  }
  unsigned int v10 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v11 = sub_216862604(&v18, 0);
  v19[0] = 0;
  unsigned int v12 = (void *)sub_2168520EC(v10 + 19, v19);
  if (v12 != v11) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v10, v11, v12);
  }
  if (v3)
  {
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))(*a2);
    pxrInternal__aapl__pxrReserved__::ArchFileAdvise(v3, v5, v13, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return v12 == v11;
}

void sub_216C66784(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    sub_216784EC4(a3);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216C667C0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 4sub_216C01044((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = 0x434453552D525850;
  *(unsigned char *)(a3 + 9) = 10;
  if (a2 > 87)
  {
    a1[2] = 0;
    sub_216C804FC(a1, a3, 0x58uLL);
    if (*(void *)a3 == 0x434453552D525850)
    {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 8);
      uint64_t v8 = *(unsigned __int8 *)(a3 + 9);
      if (*(unsigned char *)(a3 + 8) || v8 >= 0xB)
      {
        uint64_t v17 = "usd/crateFile.cpp";
        unint64_t v18 = "_ReadBootStrap";
        uint64_t v19 = 3617;
        uint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStrealong long m = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
        char v21 = 0;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v5, v6, v7, v8, *(unsigned __int8 *)(a3 + 10));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v9, v10, 0, 10, 0);
        if (v16 >= 0) {
          uint64_t v11 = (const char *)&v15;
        }
        else {
          uint64_t v11 = (const char *)v15;
        }
        if (v14 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file version mismatch -- file is %s, software supports %s", v11, p_p);
        if (v14 < 0) {
          operator delete(__p);
        }
        if (v16 < 0) {
          operator delete(v15);
        }
      }
      else if (*(void *)(a3 + 16) >= a2)
      {
        uint64_t v17 = "usd/crateFile.cpp";
        unint64_t v18 = "_ReadBootStrap";
        uint64_t v19 = 3625;
        uint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStrealong long m = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
        char v21 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, possibly truncated: table of contents at offset %lld but file size is %lld");
      }
    }
    else
    {
      uint64_t v17 = "usd/crateFile.cpp";
      unint64_t v18 = "_ReadBootStrap";
      uint64_t v19 = 3610;
      uint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(Byte"
            "Stream, int64_t) [ByteStrealong long m = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
      char v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate bootstrap section corrupt");
    }
  }
  else
  {
    uint64_t v17 = "usd/crateFile.cpp";
    unint64_t v18 = "_ReadBootStrap";
    uint64_t v19 = 3603;
    uint64_t v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(ByteSt"
          "ream, int64_t) [ByteStrealong long m = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream]";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"File too small to contain bootstrap structure");
  }
}

void sub_216C669E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CreateNew@<X0>(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this@<X0>, void *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v4 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_USE_ASSET);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v4)
  {
    int v5 = 0;
  }
  else
  {
    sub_216779094(__p, "USDC_USE_PREAD");
    int v5 = !pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v2) {
    int v5 = 2;
  }
  uint64_t v6 = operator new(0x19B0uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::CrateFile((uint64_t)v6, v5);
  *a2 = v6;
  return result;
}

void sub_216C66AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapAsset(const char *a1@<X0>, uint64_t a2@<X1>, atomic_ullong **a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a2 + 40))();
  uint64_t v8 = v7;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(v12, v6, &v14);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 16))();
  sub_216C76FAC(a3, v12, v8, v9);
  sub_2168351F0((uint64_t)v12, 0);
  if (!(*a3)[3])
  {
    v12[0] = (uint64_t)"usd/crateFile.cpp";
    v12[1] = (uint64_t)"_MmapAsset";
    double v12[2] = 2422;
    void v12[3] = (uint64_t)"static CrateFile::_FileMapping pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapAs"
                      "set(const char *, const ArAssetSharedPtr &)";
    char v13 = 0;
    if (SHIBYTE(v16) < 0)
    {
      unsigned int v10 = ": ";
      uint64_t v11 = v14;
      if (!v15) {
        unsigned int v10 = "";
      }
    }
    else
    {
      if (HIBYTE(v16)) {
        unsigned int v10 = ": ";
      }
      else {
        unsigned int v10 = "";
      }
      uint64_t v11 = (const char *)&v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Couldn't map asset '%s'%s%s", a1, v10, v11);
    sub_216C66CB4((void ***)a3);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
}

void sub_216C66C70(_Unwind_Exception *a1)
{
  sub_216C77240(v1);
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

void **sub_216C66CB4(void ***a1)
{
  uint64_t result = *a1;
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_DetachReferencedRanges((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl *)result);
    uint64_t v4 = *a1;
    *a1 = 0;
    return sub_216C771E4((void **)&v4, v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapFile(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this@<X0>, const char *a2@<X1>, atomic_ullong **a3@<X8>)
{
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(v8, a2, &v10);
  sub_216C76FAC(a3, v8, 0, -1);
  sub_2168351F0((uint64_t)v8, 0);
  if (!(*a3)[3])
  {
    v8[0] = (uint64_t)"usd/crateFile.cpp";
    v8[1] = (uint64_t)"_MmapFile";
    _OWORD v8[2] = 2437;
    void v8[3] = (uint64_t)"static CrateFile::_FileMapping pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MmapFil"
                     "e(const char *, FILE *)";
    char v9 = 0;
    if (SHIBYTE(v12) < 0)
    {
      uint64_t v6 = ": ";
      uint64_t v7 = v10;
      if (!v11) {
        uint64_t v6 = "";
      }
    }
    else
    {
      if (HIBYTE(v12)) {
        uint64_t v6 = ": ";
      }
      else {
        uint64_t v6 = "";
      }
      uint64_t v7 = (const char *)&v10;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Couldn't map file '%s'%s%s", (const char *)this, v6, v7);
    sub_216C66CB4((void ***)a3);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v10);
  }
}

void sub_216C66E10(_Unwind_Exception *a1)
{
  sub_216C77240(v1);
  if (*(char *)(v2 - 17) < 0) {
    operator delete(*(void **)(v2 - 40));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(pxrInternal__aapl__pxrReserved__ *a1@<X0>, char *a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a4@<X8>)
{
  uint64_t v5 = (uint64_t)a1;
  unsigned __int8 v7 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v7)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Usd_CrateFile::CrateFile::Open", 0, a3);
    uint64_t v8 = (uint64_t)a1;
    BOOL v9 = a1 != 0;
  }
  else
  {
    uint64_t v8 = 0;
    BOOL v9 = 0;
  }
  uint64_t v14 = v8;
  int v15 = v9;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(v5 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v5, *(void *)(v5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v5;
    uint64_t v12 = *(void *)(v5 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(v5, &v13, a2, a4);
  if (*((void *)&v13 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  int v15 = v9 - 1;
  if (v9) {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  }
}