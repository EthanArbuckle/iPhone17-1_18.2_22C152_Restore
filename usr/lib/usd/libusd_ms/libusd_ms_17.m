void sub_217030FFC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  void *v28;
  float v29;
  float v30;
  float v31;
  double v32;
  float v33;
  float v34;
  uint64_t v35;
  void v36[4];
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (a2 < a3)
  {
    v40 = v10;
    v41 = v9;
    v42 = v8;
    v43 = v7;
    v44 = v6;
    v45 = v5;
    v46 = v3;
    v47 = v4;
    v12 = a2;
    while (1)
    {
      v39 = 0;
      v38 = 0;
      LODWORD(v38) = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(void **)a1 + 12 * v12), *(void *)(a1 + 8)).u32[0];
      HIDWORD(v38) = v14;
      v39 = v15;
      v17 = sub_217031218(*(void *)(a1 + 16), v12, v16);
      v19 = **(_DWORD **)(a1 + 24);
      if (v19 >= 1) {
        break;
      }
      v24 = 0.0;
      v23 = 0.0;
      v22 = 0.0;
LABEL_12:
      v32 = 1.0 / fmaxf(sqrtf((float)(v24 * v24) + (float)((float)(v23 * v23) + (float)(v22 * v22))), 1.0e-10);
      v33 = v32 * v22;
      v34 = v32 * v23;
      *(float *)&v32 = v32 * v24;
      v35 = **(void **)a1 + 12 * v12;
      *(float *)v35 = v33;
      *(float *)(v35 + 4) = v34;
      *(_DWORD *)(v35 + 8) = LODWORD(v32);
      if (++v12 == a3) {
        return;
      }
    }
    v20 = v17;
    v21 = 0;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    while (1)
    {
      v25 = v21 + v20 * v19;
      v26 = *(void **)(a1 + 32);
      v27 = *(unsigned int *)(*v26 + 4 * v25);
      if ((v27 & 0x80000000) != 0) {
        break;
      }
      v28 = *(void **)(a1 + 40);
      if (v28[1] <= v27) {
        break;
      }
      v29 = *(float *)(v26[2] + 4 * v25);
      if (v29 != 0.0)
      {
        v22 = v22
            + (float)(v29
                    * pxrInternal__aapl__pxrReserved__::operator*((float *)&v38, *v28 + 72 * v27).f32[0]);
        v23 = v23 + (float)(v29 * v30);
        v24 = v24 + (float)(v29 * v31);
        v19 = **(_DWORD **)(a1 + 24);
      }
      if (++v21 >= v19) {
        goto LABEL_12;
      }
    }
    v36[0] = "usdSkel/utils.cpp";
    v36[1] = "operator()";
    v36[2] = 1945;
    v36[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceV"
             "aryingPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    v37 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v36, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v18, v27, v21 + v20 * v19, *(void *)(*(void *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_217031218(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = *(unsigned int *)(*(void *)a1 + 4 * a2);
  if ((result & 0x80000000) != 0 || (int)result >= *(_DWORD *)(a1 + 16))
  {
    v5[0] = "usdSkel/utils.cpp";
    v5[1] = "GetPointIndex";
    v5[2] = 1262;
    v5[3] = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceVaryingPointIndexFn::GetPointIndex(size_t) const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v5, (pxrInternal__aapl__pxrReserved__ *)"faceVertexIndices is out of range [%d] at index [%zu]", a3, result, a2);
    return 0;
  }
  return result;
}

uint64_t sub_217031298(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C7701D8;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)v21 = &unk_26C751420;
      __dmb(0xBu);
      v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C7701D8;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_217030FFC(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217030FFC(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_2170316CC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v73 = v12;
    uint64_t v74 = v11;
    uint64_t v75 = v10;
    uint64_t v76 = v9;
    uint64_t v77 = v8;
    uint64_t v78 = v7;
    uint64_t v79 = v6;
    uint64_t v80 = v5;
    uint64_t v81 = v3;
    uint64_t v82 = v4;
    uint64_t v14 = a2;
    while (1)
    {
      float v72 = 0.0;
      int8x8_t v71 = 0;
      v71.i32[0] = pxrInternal__aapl__pxrReserved__::operator*((float *)(**(void **)a1 + 12 * v14), *(void *)(a1 + 8)).u32[0];
      v71.i32[1] = v16;
      float v72 = v17;
      uint64_t v19 = sub_217031218(*(void *)(a1 + 16), v14, v18);
      unsigned __int8 v20 = *(uint64_t **)(a1 + 24);
      uint64_t v21 = *v20;
      uint64_t v22 = *(int **)(a1 + 40);
      unsigned int v23 = sub_21702A52C(v19, (v20[1] - *v20) >> 5, *(void **)(a1 + 32), *v22);
      if ((v23 & 0x80000000) != 0)
      {
        double v29 = 0.0;
        double v30 = 0.0;
        double v27 = 0.0;
        double v28 = 0.0;
      }
      else
      {
        v26 = (double *)(v21 + 32 * v23);
        double v28 = *v26;
        double v27 = v26[1];
        double v30 = v26[2];
        double v29 = v26[3];
      }
      long long v69 = 0u;
      long long v70 = 0u;
      int v31 = *v22;
      if (*v22 >= 1) {
        break;
      }
      float32x2_t v33 = 0;
      float v34 = 0.0;
LABEL_20:
      if (**(unsigned char **)(a1 + 48)) {
        float v51 = v34;
      }
      else {
        float v51 = v72;
      }
      float32x2_t v52 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(**(unsigned char **)(a1 + 48) == 0), 0x1FuLL)), v71, (int8x8_t)v33);
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize((double *)&v69, 1.0e-10);
      float64x2_t v65 = vcvtq_f64_f32(v52);
      *(double *)&uint64_t v66 = v51;
      double v53 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform((double *)&v69, v65.f64);
      double v56 = sqrt(v55 * v55 + v53 * v53 + v54 * v54);
      double v57 = 1.0 / v56;
      BOOL v58 = v56 <= 1.0e-10;
      double v59 = 1.0e10;
      if (!v58) {
        double v59 = v57;
      }
      float v60 = v53 * v59;
      float v61 = v54 * v59;
      float v62 = v55 * v59;
      v63 = (float *)(**(void **)a1 + 12 * v14);
      float *v63 = v60;
      v63[1] = v61;
      v63[2] = v62;
      if (++v14 == a3) {
        return;
      }
    }
    uint64_t v32 = 0;
    float32x2_t v33 = 0;
    float v34 = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    double v37 = 0.0;
    double v38 = 0.0;
    while (1)
    {
      uint64_t v39 = v32 + v19 * v31;
      v40 = *(void **)(a1 + 32);
      unint64_t v41 = *(unsigned int *)(*v40 + 4 * v39);
      if ((v41 & 0x80000000) != 0 || v41 >= (v20[1] - *v20) >> 5) {
        break;
      }
      LODWORD(v25) = *(_DWORD *)(v40[2] + 4 * v39);
      if (*(float *)&v25 != 0.0)
      {
        if (**(unsigned char **)(a1 + 48))
        {
          long long v64 = v25;
          v42.i32[0] = pxrInternal__aapl__pxrReserved__::operator*((float *)&v71, **(void **)(a1 + 56) + 72 * v41).u32[0];
          long long v25 = v64;
          v42.i32[1] = v43;
          float32x2_t v33 = vadd_f32(v33, vmul_n_f32(v42, *(float *)&v64));
          float v34 = v34 + (float)(*(float *)&v64 * v44);
          unsigned __int8 v20 = *(uint64_t **)(a1 + 24);
          double v36 = *((double *)&v69 + 1);
          double v37 = *(double *)&v69;
          double v38 = *((double *)&v70 + 1);
          double v35 = *(double *)&v70;
          int v31 = **(_DWORD **)(a1 + 40);
        }
        v45 = (double *)(*v20 + 32 * v41);
        double v46 = v45[1];
        double v47 = v45[2];
        double v48 = v45[3];
        if (v28 * *v45 + v27 * v46 + v30 * v47 + v29 * v48 >= 0.0) {
          float v49 = *(float *)&v25;
        }
        else {
          float v49 = -*(float *)&v25;
        }
        double v50 = v49;
        double v38 = v38 + v48 * v50;
        double v37 = *v45 * v50 + v37;
        double v36 = v46 * v50 + v36;
        *(double *)&long long v69 = v37;
        *((double *)&v69 + 1) = v36;
        double v35 = v47 * v50 + v35;
        *(double *)&long long v70 = v35;
        *((double *)&v70 + 1) = v38;
      }
      if (++v32 >= v31) {
        goto LABEL_20;
      }
    }
    *(void *)&v65.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v65.f64[1] = "operator()";
    uint64_t v66 = 2046;
    v67 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3d &, TfSpan<const GfMatrix3d>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceVaryingPoi"
          "ntIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v68 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v65, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v24, v35, v36, v37, v38, v41, v32 + v19 * v31, (v20[1] - *v20) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_217031A2C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C770220;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      uint64_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      unsigned int v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C770220;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_2170316CC(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_2170316CC(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_217031E60(uint64_t a1, unint64_t a2, char *a3, double a4)
{
  if (a2 < (unint64_t)a3)
  {
    uint64_t v47 = v13;
    uint64_t v48 = v12;
    uint64_t v49 = v11;
    uint64_t v50 = v10;
    uint64_t v51 = v9;
    uint64_t v52 = v8;
    uint64_t v53 = v7;
    uint64_t v54 = v6;
    uint64_t v55 = v4;
    uint64_t v56 = v5;
    uint64_t v15 = a2;
    while (1)
    {
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = **(void **)a1 + 12 * v15;
      float v43 = *(float *)v18;
      float v42 = *(float *)(v18 + 4);
      LODWORD(a4) = *(_DWORD *)(v18 + 8);
      double v44 = a4;
      float32x2_t v19 = *(float32x2_t *)v17;
      float32x2_t v20 = *(float32x2_t *)(v17 + 12);
      float32x2_t v21 = *(float32x2_t *)(v17 + 24);
      float v22 = *(float *)(v17 + 8);
      float v23 = *(float *)(v17 + 20);
      float v24 = *(float *)(v17 + 32);
      uint64_t v25 = sub_217031218(*(void *)(a1 + 16), v15, a3);
      uint64_t v26 = **(unsigned int **)(a1 + 24);
      if ((int)v26 >= 1) {
        break;
      }
      float32x2_t v31 = 0;
      LODWORD(v32) = 0;
LABEL_12:
      float32x2_t v38 = vmul_f32((float32x2_t)__PAIR64__(v31.u32[1], LODWORD(v32)), (float32x2_t)__PAIR64__(v31.u32[1], LODWORD(v32)));
      double v39 = 1.0
          / fmaxf(sqrtf(vadd_f32(v38, vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v38, 1), vmul_f32(v31, v31))).f32[0]), 1.0e-10);
      float v40 = v39 * *(float *)&v32;
      uint64_t v41 = **(void **)a1 + 12 * v15;
      a4 = COERCE_DOUBLE(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v31), v39)));
      *(double *)uint64_t v41 = a4;
      *(float *)(v41 + 8) = v40;
      if ((char *)++v15 == a3) {
        return;
      }
    }
    HIDWORD(v28) = HIDWORD(v44);
    float32x2_t v27 = vadd_f32(vadd_f32(vmul_n_f32(v19, v43), vmul_n_f32(v20, v42)), vmul_n_f32(v21, *(float *)&v44));
    *(float *)&double v28 = (float)((float)(v43 * v22) + (float)(v42 * v23)) + (float)(*(float *)&v44 * v24);
    uint64_t v29 = v25 * v26;
    uint64_t v30 = *(void **)(a1 + 32);
    float32x2_t v31 = 0;
    double v32 = 0.0;
    while (1)
    {
      unint64_t v33 = *(unsigned int *)(*v30 + 4 * v29);
      if ((v33 & 0x80000000) != 0) {
        break;
      }
      float v34 = *(void **)(a1 + 40);
      if (v34[1] <= v33) {
        break;
      }
      float v35 = *(float *)(v30[2] + 4 * v29);
      if (v35 != 0.0)
      {
        uint64_t v36 = *v34 + 36 * v33;
        v37.i32[0] = *(_DWORD *)(v36 + 8);
        v37.i32[1] = *(_DWORD *)(v36 + 20);
        float32x2_t v31 = vadd_f32(v31, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v36, v27.f32[0]), vmul_lane_f32(*(float32x2_t *)(v36 + 12), v27, 1)), vmul_n_f32(*(float32x2_t *)(v36 + 24), *(float *)&v28)), v35));
        *(float *)&double v32 = *(float *)&v32
                       + (float)(v35
                               * (float)(vaddv_f32(vmul_f32(v27, v37)) + (float)(*(float *)&v28 * *(float *)(v36 + 32))));
      }
      ++v29;
      if (!--v26) {
        goto LABEL_12;
      }
    }
    v45[0] = "usdSkel/utils.cpp";
    v45[1] = "operator()";
    v45[2] = 1945;
    v45[3] = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsLBS(const pxrInternal__aapl__pxrR"
             "eserved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous names"
             "pace)::_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceV"
             "aryingPointIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v46 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v45, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", a3, *(double *)&v31, v32, *(double *)&v27, v28, v33, v29, *(void *)(*(void *)(a1 + 40) + 8));
    atomic_store(1u, *(unsigned __int8 **)(a1 + 48));
  }
}

uint64_t sub_2170320D8(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v3 = *((void *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v3 + 8) = 1;
        unsigned int v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1) {
          LOBYTE(v4) = 1;
        }
        *((unsigned char *)this + 52) = v4 + 1;
      }
    }
  }
  uint64_t v6 = (long long *)((char *)this + 8);
  uint64_t v5 = (char *)*((void *)this + 1);
  unint64_t v7 = *((void *)this + 2);
  unint64_t v8 = *((void *)this + 3);
  uint64_t v9 = &v5[-v7];
  if (v8 < (unint64_t)&v5[-v7])
  {
    unint64_t v10 = *((void *)this + 5);
    if (v10 > 1) {
      goto LABEL_12;
    }
    if (v10 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v11 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C751420;
        __dmb(0xBu);
        v11[8] = 0;
        *((void *)this - 4) = v11;
        *((void *)v11 - 3) = 2;
        uint64_t v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C770268;
        *(void *)(v12 + 8) = *((void *)this + 1);
        uint64_t v13 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v13;
        *(void *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v14 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v14;
        *(void *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(unsigned char *)(v12 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v12 - 40))();
        unint64_t v7 = *((void *)this + 2);
        unint64_t v8 = *((void *)this + 3);
        uint64_t v5 = (char *)*((void *)this + 1);
        uint64_t v9 = &v5[-v7];
        if (v8 >= (unint64_t)&v5[-v7]) {
          break;
        }
        unint64_t v15 = *((void *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < (unint64_t)v9 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v29 = 0x10000;
    long long v30 = *v6;
    uint64_t v31 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v16 = sub_216B17510(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v17 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0) {
        break;
      }
      unsigned __int8 v20 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v20;
      unsigned __int8 v19 = v29[2];
      if (v29[2] < 2u)
      {
        unsigned int v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((void *)&v30 + 3 * v29[0] + 2) < *((void *)&v30 + 3 * v29[0]) - *((void *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v21 = v29[1];
      unsigned __int8 v22 = v29[v29[1] + 3];
      float v23 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(void *)float v23 = &unk_26C751420;
      __dmb(0xBu);
      v23[8] = 0;
      *((void *)this - 4) = v23;
      *((void *)v23 - 3) = 2;
      uint64_t v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      uint64_t v25 = (char *)&v30 + 24 * v21;
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C770268;
      long long v26 = *(_OWORD *)v25;
      *(void *)(v24 + 24) = *((void *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(void *)(v24 + 32) = *((void *)this + 4);
      uint64_t v27 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v27;
      *(void *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(unsigned char *)(v24 + 52) = *((unsigned char *)this + 52) - v22;
      (***(void (****)(void))(v24 - 40))();
      unsigned __int8 v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v18 = v29[0];
LABEL_22:
    sub_217031E60(*((void *)this + 4), *((void *)&v30 + 3 * v18 + 1), *((char **)&v30 + 3 * v18), v16);
    unsigned __int8 v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_217031E60(*((void *)this + 4), v7, v5, a2);
  return 0;
}

void sub_21703250C(uint64_t a1, unint64_t a2, char *a3, double a4)
{
  if (a2 < (unint64_t)a3)
  {
    uint64_t v75 = v13;
    uint64_t v76 = v12;
    uint64_t v77 = v11;
    uint64_t v78 = v10;
    uint64_t v79 = v9;
    uint64_t v80 = v8;
    uint64_t v81 = v7;
    uint64_t v82 = v6;
    uint64_t v83 = v4;
    uint64_t v84 = v5;
    uint64_t v15 = a2;
    while (1)
    {
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = **(void **)a1 + 12 * v15;
      float v66 = *(float *)v18;
      float v65 = *(float *)(v18 + 4);
      LODWORD(a4) = *(_DWORD *)(v18 + 8);
      double v67 = a4;
      float32x2_t v19 = *(float32x2_t *)v17;
      float32x2_t v20 = *(float32x2_t *)(v17 + 12);
      float32x2_t v21 = *(float32x2_t *)(v17 + 24);
      float v22 = *(float *)(v17 + 8);
      float v23 = *(float *)(v17 + 20);
      float v24 = *(float *)(v17 + 32);
      uint64_t v25 = sub_217031218(*(void *)(a1 + 16), v15, a3);
      uint64_t v27 = *(uint64_t **)(a1 + 24);
      long long v26 = *(uint64_t **)(a1 + 32);
      uint64_t v28 = *v27;
      uint64_t v29 = *(int **)(a1 + 40);
      unsigned int v30 = sub_21702A52C(v25, (v27[1] - *v27) >> 5, v26, *v29);
      float64x2_t v32 = 0uLL;
      float64x2_t v33 = 0uLL;
      if ((v30 & 0x80000000) == 0)
      {
        float v34 = (float64x2_t *)(v28 + 32 * v30);
        float64x2_t v33 = *v34;
        float64x2_t v32 = v34[1];
      }
      float32x2_t v37 = vadd_f32(vmul_n_f32(v19, v66), vmul_n_f32(v20, v65));
      HIDWORD(v35) = HIDWORD(v67);
      float32x2_t v36 = vadd_f32(v37, vmul_n_f32(v21, *(float *)&v67));
      v37.f32[0] = (float)((float)(v66 * v22) + (float)(v65 * v23)) + (float)(*(float *)&v67 * v24);
      float64x2_t v73 = 0u;
      float64x2_t v74 = 0u;
      uint64_t v38 = *v29;
      if ((int)v38 >= 1) {
        break;
      }
      float32x2_t v42 = 0;
      LODWORD(v43) = 0;
LABEL_18:
      unsigned int v53 = **(unsigned char **)(a1 + 48) == 0;
      if (**(unsigned char **)(a1 + 48)) {
        float v54 = *(float *)&v43;
      }
      else {
        float v54 = v37.f32[0];
      }
      int8x8_t v68 = (int8x8_t)v36;
      pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v73.f64, 1.0e-10);
      float64x2_t v69 = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v53), 0x1FuLL)), v68, (int8x8_t)v42));
      *(double *)&uint64_t v70 = v54;
      double v55 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(v73.f64, v69.f64);
      double v58 = sqrt(v57 * v57 + v55 * v55 + v56 * v56);
      double v59 = 1.0 / v58;
      BOOL v60 = v58 <= 1.0e-10;
      double v61 = 1.0e10;
      if (!v60) {
        double v61 = v59;
      }
      a4 = v55 * v61;
      *(float *)&a4 = a4;
      float v62 = v56 * v61;
      float v63 = v57 * v61;
      uint64_t v64 = **(void **)a1 + 12 * v15;
      *(_DWORD *)uint64_t v64 = LODWORD(a4);
      *(float *)(v64 + 4) = v62;
      *(float *)(v64 + 8) = v63;
      if ((char *)++v15 == a3) {
        return;
      }
    }
    uint64_t v39 = v25 * v38;
    uint64_t v40 = *v26;
    LODWORD(v35) = v36.i32[1];
    float64x2_t v41 = 0uLL;
    float32x2_t v42 = 0;
    double v43 = 0.0;
    float64x2_t v44 = 0uLL;
    while (1)
    {
      unint64_t v45 = *(unsigned int *)(v40 + 4 * v39);
      if ((v45 & 0x80000000) != 0 || v45 >= (v27[1] - *v27) >> 5) {
        break;
      }
      float v46 = *(float *)(v26[2] + 4 * v39);
      if (v46 != 0.0)
      {
        if (**(unsigned char **)(a1 + 48))
        {
          uint64_t v47 = **(void **)(a1 + 56) + 36 * v45;
          float32x2_t v42 = vadd_f32(v42, vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v47, v36.f32[0]), vmul_lane_f32(*(float32x2_t *)(v47 + 12), v36, 1)), vmul_n_f32(*(float32x2_t *)(v47 + 24), v37.f32[0])), v46));
          *(float *)&double v43 = *(float *)&v43
                         + (float)(v46
                                 * (float)((float)((float)(v36.f32[0] * *(float *)(v47 + 8))
                                                 + (float)(v36.f32[1] * *(float *)(v47 + 20)))
                                         + (float)(v37.f32[0] * *(float *)(v47 + 32))));
        }
        uint64_t v48 = *v27 + 32 * v45;
        float64x2_t v49 = *(float64x2_t *)(v48 + 16);
        float64x2_t v50 = vmulq_f64(v33, *(float64x2_t *)v48);
        float64x2_t v51 = vmulq_f64(v32, v49);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v50, (float64x2_t)vdupq_laneq_s64((int64x2_t)v50, 1)), v51), (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1)).f64[0] < 0.0)float v46 = -v46; {
        double v52 = v46;
        }
        float64x2_t v41 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)v48, v52), v41);
        float64x2_t v44 = vaddq_f64(vmulq_n_f64(v49, v52), v44);
        float64x2_t v73 = v41;
        float64x2_t v74 = v44;
      }
      ++v39;
      if (!--v38) {
        goto LABEL_18;
      }
    }
    *(void *)&v69.f64[0] = "usdSkel/utils.cpp";
    *(void *)&v69.f64[1] = "operator()";
    uint64_t v70 = 2046;
    int8x8_t v71 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_SkinNormalsDQS(const pxrInternal__aapl__pxrRese"
          "rved__::GfMatrix3f &, TfSpan<const GfMatrix3f>, const pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
          ":_NonInterleavedInfluencesFn &, const pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_FaceVaryingPoi"
          "ntIndexFn &, const int, TfSpan<GfVec3f>, const BOOL)::(anonymous class)::operator()(size_t, size_t) const";
    char v72 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Out of range joint index %d at index %zu (num joints = %zu).", v31, v32.f64[0], v33.f64[0], *(double *)&v37, v43, v35, v41.f64[0], v44.f64[0], v45, v39, (v27[1] - *v27) >> 5);
    atomic_store(1u, *(unsigned __int8 **)(a1 + 64));
  }
}

uint64_t sub_21703288C(tbb::internal::allocate_continuation_proxy *this, double a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v3 = *((void *)this - 4);
      if (*(int *)(v3 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v3 + 8) = 1;
        unsigned int v4 = *((unsigned __int8 *)this + 52);
        if (v4 <= 1) {
          LOBYTE(v4) = 1;
        }
        *((unsigned char *)this + 52) = v4 + 1;
      }
    }
  }
  uint64_t v6 = (long long *)((char *)this + 8);
  uint64_t v5 = (char *)*((void *)this + 1);
  unint64_t v7 = *((void *)this + 2);
  unint64_t v8 = *((void *)this + 3);
  uint64_t v9 = &v5[-v7];
  if (v8 < (unint64_t)&v5[-v7])
  {
    unint64_t v10 = *((void *)this + 5);
    if (v10 > 1) {
      goto LABEL_12;
    }
    if (v10 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v11 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C751420;
        __dmb(0xBu);
        v11[8] = 0;
        *((void *)this - 4) = v11;
        *((void *)v11 - 3) = 2;
        uint64_t v12 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v11, 0x38uLL);
        *(unsigned char *)(v12 - 11) = 1;
        *(void *)uint64_t v12 = &unk_26C7702B0;
        *(void *)(v12 + 8) = *((void *)this + 1);
        uint64_t v13 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v13;
        *(void *)(v12 + 16) = v13;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v14 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v14;
        *(void *)(v12 + 40) = v14;
        *(_DWORD *)(v12 + 48) = 2;
        *(unsigned char *)(v12 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v12 - 40))();
        unint64_t v7 = *((void *)this + 2);
        unint64_t v8 = *((void *)this + 3);
        uint64_t v5 = (char *)*((void *)this + 1);
        uint64_t v9 = &v5[-v7];
        if (v8 >= (unint64_t)&v5[-v7]) {
          break;
        }
        unint64_t v15 = *((void *)this + 5);
        if (v15 <= 1)
        {
          if (!v15 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v8 < (unint64_t)v9 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v29 = 0x10000;
    long long v30 = *v6;
    uint64_t v31 = *((void *)this + 3);
    while (1)
    {
      *(void *)&double v16 = sub_216B17510(v29, *((unsigned __int8 *)this + 52)).n128_u64[0];
      char v17 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v17 & 1) == 0) {
        break;
      }
      unsigned __int8 v20 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v20;
      unsigned __int8 v19 = v29[2];
      if (v29[2] < 2u)
      {
        unsigned int v18 = v29[0];
        if (v29[v29[0] + 3] < v20
          && *((void *)&v30 + 3 * v29[0] + 2) < *((void *)&v30 + 3 * v29[0]) - *((void *)&v30 + 3 * v29[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v21 = v29[1];
      unsigned __int8 v22 = v29[v29[1] + 3];
      float v23 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v23 - 11) = 1;
      *(void *)float v23 = &unk_26C751420;
      __dmb(0xBu);
      v23[8] = 0;
      *((void *)this - 4) = v23;
      *((void *)v23 - 3) = 2;
      uint64_t v24 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v23, 0x38uLL);
      uint64_t v25 = (char *)&v30 + 24 * v21;
      *(unsigned char *)(v24 - 11) = 1;
      *(void *)uint64_t v24 = &unk_26C7702B0;
      long long v26 = *(_OWORD *)v25;
      *(void *)(v24 + 24) = *((void *)v25 + 2);
      *(_OWORD *)(v24 + 8) = v26;
      *(void *)(v24 + 32) = *((void *)this + 4);
      uint64_t v27 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v27;
      *(void *)(v24 + 40) = v27;
      *(_DWORD *)(v24 + 48) = 2;
      *(unsigned char *)(v24 + 52) = *((unsigned char *)this + 52) - v22;
      (***(void (****)(void))(v24 - 40))();
      unsigned __int8 v19 = --v29[2];
      v29[1] = (v29[1] + 1) & 7;
LABEL_27:
      if (!v19 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v18 = v29[0];
LABEL_22:
    sub_21703250C(*((void *)this + 4), *((void *)&v30 + 3 * v18 + 1), *((char **)&v30 + 3 * v18), v16);
    unsigned __int8 v19 = --v29[2];
    v29[0] = (v29[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21703250C(*((void *)this + 4), v7, v5, a2);
  return 0;
}

void *sub_217032CC0(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216BD0794(a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = v6 + 12 * a2;
    uint64_t v8 = 12 * a2;
    do
    {
      uint64_t v9 = *a3;
      *(_DWORD *)(v6 + 8) = *((_DWORD *)a3 + 2);
      *(void *)uint64_t v6 = v9;
      v6 += 12;
      v8 -= 12;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_217032D34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_217032D50()
{
  sub_2170336D0();
  sub_216779094(__p, "Backdrop");
  sub_2170337FC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_217032DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::~UsdUIBackdrop(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7702F8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdUI/backdrop.cpp";
    unint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdUIBackdrop pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7702F8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217032F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94F48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94F48))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94F40, "Backdrop");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94F40, &dword_216758000);
    __cxa_guard_release(&qword_267B94F48);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94F40, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7702F8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdUI/backdrop.cpp";
    unint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdUIBackdrop pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7702F8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217033178(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94F58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94F58))
  {
    __cxa_guard_release(&qword_267B94F58);
  }
  return &qword_267B94F50;
}

void sub_217033220(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94F68, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *)__cxa_guard_acquire(&qword_267B94F68);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetStaticTfType(v2);
      byte_267B94F60 = sub_216D16508((char *)&qword_267B94F50, v3, v4);
      __cxa_guard_release(&qword_267B94F68);
    }
  }
  return byte_267B94F60;
}

void sub_2170332A0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  return &qword_267B94F50;
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::GetDescriptionAttr(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 24), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217033378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::CreateDescriptionAttr(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUIBackdrop::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdUIBackdrop *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94F88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94F88))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v3) {
      uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v4 = *((void *)v3 + 3);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B94F70, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94F70, &dword_216758000);
    __cxa_guard_release(&qword_267B94F88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94FA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94FA8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_217033618((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94F90, &dword_216758000);
    __cxa_guard_release(&qword_267B94FA8);
  }
  if (v1) {
    return &qword_267B94F90;
  }
  else {
    return &qword_267B94F70;
  }
}

void sub_2170335D0(_Unwind_Exception *a1)
{
}

void *sub_217033618(uint64_t **a1)
{
  qword_267B94F98 = 0;
  unk_267B94FA0 = 0;
  qword_267B94F90 = 0;
  sub_216973388((char **)&qword_267B94F90, ((unk_267B94F78 - qword_267B94F70) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94F90, (void *)qword_267B94F98, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94F90, (void *)qword_267B94F98, (uint64_t *)qword_267B94F70, unk_267B94F78, (unk_267B94F78 - qword_267B94F70) >> 3);
}

void sub_2170336B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170336D0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170337B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170337FC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_217033890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdUITokensType *sub_2170338B4(atomic_ullong *a1)
{
  uint64_t result = sub_2170338FC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_217033940((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdUITokensType *sub_2170338FC()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)operator new(0x90uLL);
  pxrInternal__aapl__pxrReserved__::UsdUITokensType::UsdUITokensType(v0);
  return v0;
}

void sub_21703392C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217033940(uint64_t a1)
{
  char v17 = (void **)(a1 + 120);
  sub_216889A04(&v17);
  uint64_t v2 = *(void *)(a1 + 112);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 88);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 80);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 72);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 8);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::~UsdUINodeGraphNodeAPI(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C770350;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdUI/nodeGraphNodeAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdUINodeGraphNodeAPI pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C770350;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217033CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  return 5;
}

uint64_t sub_217033CC8(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94FB0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdUINodeGraphNodeAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_217033EB0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C770350;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C770350;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_217033E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217033EB0(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94FB0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdUINodeGraphNodeAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94FB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94FB8))
  {
    __cxa_guard_release(&qword_267B94FB8);
  }
  return &qword_267B94FB0;
}

void sub_217033FE4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94FC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)__cxa_guard_acquire(&qword_267B94FC8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetStaticTfType(v2);
      byte_267B94FC0 = sub_216D16508((char *)&qword_267B94FB0, v3, v4);
      __cxa_guard_release(&qword_267B94FC8);
    }
  }
  return byte_267B94FC0;
}

void sub_217034064(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  return &qword_267B94FB0;
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetPosAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21703413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 152), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetStackingOrderAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 88), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170342A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateStackingOrderAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21703440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateDisplayColorAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetIconAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217034574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateIconAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetExpansionStateAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170346DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateExpansionStateAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetSizeAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217034844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreateSizeAttr(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 152), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *this)
{
  int v1 = (int)this;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94FE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94FE8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v3) {
      uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v4 = *((void *)v3 + 9);
    uint64_t v18 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v5) {
      int v5 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v6 = *((void *)v5 + 11);
    uint64_t v19 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v7) {
      int v7 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v8 = *((void *)v7 + 6);
    uint64_t v20 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v9) {
      uint64_t v9 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v10 = *((void *)v9 + 8);
    uint64_t v21 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v11) {
      char v11 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v12 = *((void *)v11 + 7);
    uint64_t v22 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v13) {
      char v13 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v14 = *((void *)v13 + 10);
    uint64_t v23 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94FD0, &v18, 6uLL);
    for (uint64_t i = 40; i != -8; i -= 8)
    {
      uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94FD0, &dword_216758000);
    __cxa_guard_release(&qword_267B94FE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95008))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_217034CC0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94FF0, &dword_216758000);
    __cxa_guard_release(&qword_267B95008);
  }
  if (v1) {
    return &qword_267B94FF0;
  }
  else {
    return &qword_267B94FD0;
  }
}

void sub_217034C3C(_Unwind_Exception *a1)
{
}

void *sub_217034CC0(uint64_t **a1)
{
  qword_267B94FF8 = 0;
  unk_267B95000 = 0;
  qword_267B94FF0 = 0;
  sub_216973388((char **)&qword_267B94FF0, ((unk_267B94FD8 - qword_267B94FD0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94FF0, (void *)qword_267B94FF8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94FF0, (void *)qword_267B94FF8, (uint64_t *)qword_267B94FD0, unk_267B94FD8, (unk_267B94FD8 - qword_267B94FD0) >> 3);
}

void sub_217034D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_217034D78()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_217034E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::~UsdUISceneGraphPrimAPI(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7703A8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdUI/sceneGraphPrimAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdUISceneGraphPrimAPI pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7703A8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217035064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  return 5;
}

uint64_t sub_21703508C(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95010, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdUISceneGraphPrimAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_217035274(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7703A8;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7703A8;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_217035260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217035274(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95010, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdUISceneGraphPrimAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95018))
  {
    __cxa_guard_release(&qword_267B95018);
  }
  return &qword_267B95010;
}

void sub_2170353A8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95028, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *)__cxa_guard_acquire(&qword_267B95028);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetStaticTfType(v2);
      byte_267B95020 = sub_216D16508((char *)&qword_267B95010, v3, v4);
      __cxa_guard_release(&qword_267B95028);
    }
  }
  return byte_267B95020;
}

void sub_217035428(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  return &qword_267B95010;
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::GetDisplayNameAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 40), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217035500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::CreateDisplayNameAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::GetDisplayGroupAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v3) {
    uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v3 + 32), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217035668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::CreateDisplayGroupAttr(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  if (!v8) {
    uint64_t v8 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)((char *)v8 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdUISceneGraphPrimAPI *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95048))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v3) {
      uint64_t v3 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    uint64_t v4 = *((void *)v3 + 5);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdUITokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    if (!v6) {
      int v6 = sub_2170338B4(&pxrInternal__aapl__pxrReserved__::UsdUITokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 4);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B95030, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95030, &dword_216758000);
    __cxa_guard_release(&qword_267B95048);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95068))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_217035988((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95050, &dword_216758000);
    __cxa_guard_release(&qword_267B95068);
  }
  if (v1) {
    return &qword_267B95050;
  }
  else {
    return &qword_267B95030;
  }
}

void sub_217035910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B95048);
  _Unwind_Resume(a1);
}

void *sub_217035988(uint64_t **a1)
{
  qword_267B95058 = 0;
  unk_267B95060 = 0;
  qword_267B95050 = 0;
  sub_216973388((char **)&qword_267B95050, ((unk_267B95038 - qword_267B95030) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95050, (void *)qword_267B95058, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95050, (void *)qword_267B95058, (uint64_t *)qword_267B95030, unk_267B95038, (unk_267B95038 - qword_267B95030) >> 3);
}

void sub_217035A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_217035A40()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_217035B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUITokensType *pxrInternal__aapl__pxrReserved__::UsdUITokensType::UsdUITokensType(pxrInternal__aapl__pxrReserved__::UsdUITokensType *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v23 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "closed", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v23, "minimized", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "open", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "ui:description", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "ui:displayGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "ui:displayName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "ui:nodegraph:node:displayColor", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "ui:nodegraph:node:expansionState", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "ui:nodegraph:node:icon", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "ui:nodegraph:node:pos", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "ui:nodegraph:node:size", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "ui:nodegraph:node:stackingOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "Backdrop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "NodeGraphNodeAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "SceneGraphPrimAPI", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v24 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v23;
  uint64_t v25 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v26 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v27 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v28 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v29 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v30 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v31 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v32 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v33 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v34 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v35 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v36 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v37 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v38 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  char v17 = (char *)operator new(0x78uLL);
  uint64_t v18 = 0;
  *((void *)this + 15) = v17;
  *((void *)this + 16) = v17;
  *((void *)this + 17) = v17 + 120;
  do
  {
    uint64_t v19 = *(uint64_t *)((char *)&v24 + v18);
    *(void *)&v17[v18] = v19;
    if ((v19 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v17[v18] &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 += 8;
  }
  while (v18 != 120);
  *((void *)this + 16) = v17 + 120;
  for (uint64_t i = 112; i != -8; i -= 8)
  {
    uint64_t v21 = *(uint64_t *)((char *)&v24 + i);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_21703608C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void **a16, uint64_t a17, char a18)
{
  sub_216889A04(&a16);
  uint64_t v28 = 112;
  while (1)
  {
    uint64_t v29 = *(void *)(&a18 + v28);
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v28 -= 8;
    if (v28 == -8)
    {
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_217036288()
{
}

void sub_217036290()
{
}

void sub_217036298()
{
}

void sub_2170362A0()
{
}

void sub_2170362A8()
{
}

void sub_2170362B0()
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
    *(void *)(a1 + 8) = v2;
    sub_2168BD80C(a2);
    sub_2168BD378((int)v4, v5);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4);
    Identifier = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
    sub_216A38350(a1 + 64, Identifier, (uint64_t)Identifier);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessLayer((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1, v4);
    for (uint64_t i = *(void *)(a1 + 48); *(void *)(a1 + 40) != i; uint64_t i = *(void *)(a1 + 48))
    {
      if (*(char *)(i - 1) < 0)
      {
        sub_216778F24(__p, *(void **)(i - 24), *(void *)(i - 16));
        uint64_t i = *(void *)(a1 + 48);
      }
      else
      {
        long long v9 = *(_OWORD *)(i - 24);
        uint64_t v16 = *(void *)(i - 8);
        *(_OWORD *)__p = v9;
      }
      uint64_t v10 = (void **)(i - 24);
      if (*(char *)(i - 1) < 0) {
        operator delete(*v10);
      }
      *(void *)(a1 + 48) = v10;
      if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile((uint64_t)__p))
      {
        v13[0] = 0;
        v13[1] = 0;
        uint64_t v12 = v13;
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)__p, &v12, &v14);
        sub_2167877AC((uint64_t)&v12, v13[0]);
        if (v14) {
          pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessLayer((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1, (uint64_t *)&v14);
        }
        sub_216ABB798(&v14);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    __p[0] = "usdUtils/assetLocalization.cpp";
    __p[1] = "Process";
    uint64_t v16 = 61;
    char v17 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process(const SdfLayerRefPtr &)";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to process null layer");
  }
  return v2 != 0;
}

void sub_21703644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessLayer(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessSublayers(a1, a2);
  long long v15 = 0u;
  memset(v14, 0, sizeof(v14));
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v4, v12);
  sub_2170397E8(v14, v12);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v12);
  if (*((void *)&v15 + 1))
  {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)(v14[1]
                                                                        + (((unint64_t)(*((void *)&v15 + 1)
                                                                                             + v15
                                                                                             - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * ((*((void *)&v15 + 1) + v15 - 1) & 0x1FF));
    uint64_t v13 = v6;
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)v6, 1u);
    }
    sub_217039B98(v14);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessMetadata(a1, a2, &v13);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v7, v12);
    BOOL v8 = pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(&v13, v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v12);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessPayloads((uint64_t)a1, (uint64_t)a2, &v13);
    }
    uint64_t v10 = (uint64_t **)sub_216A663FC(&v13);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v10);
  }
  return sub_217039290(v14);
}

void sub_21703677C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a22);
  sub_217039290((void *)(v37 - 160));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, uint64_t *a3, char a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    uint64_t v8 = (uint64_t)result;
    do
    {
      long long v9 = *a2;
      sub_2168BD80C((uint64_t *)&v9);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency(v8, (uint64_t *)&v9, v4, a4);
      uint64_t result = sub_216ABB798(&v9);
      v4 += 24;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_2170368F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a1 + 108))
  {
    uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a3 + 8);
    }
    if (v5)
    {
      sub_216ABBA60((uint64_t *)&v21, a2);
      pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&v21, a3, (uint64_t)&v29);
      long long v9 = v22;
      if (v22 && atomic_fetch_add_explicit((atomic_uint *volatile)v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v9 + 8))(v9);
      }
      if (!sub_2170396E4((void *)(a1 + 64), (unsigned __int8 *)&v29)
        && !sub_2170396E4((void *)(a1 + 112), (unsigned __int8 *)&v29))
      {
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(0);
        pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
        if (a4) {
          goto LABEL_14;
        }
        uint64_t v11 = v28;
        if ((v28 & 0x80u) != 0) {
          uint64_t v11 = v27;
        }
        if (v11)
        {
LABEL_14:
          sub_216A38350(a1 + 64, (unsigned __int8 *)&v29, (uint64_t)&v29);
          uint64_t v12 = (uint64_t *)(a1 + 40);
          unint64_t v13 = *(void *)(a1 + 48);
          if (v13 >= *(void *)(a1 + 56))
          {
            uint64_t v14 = sub_2168DF188(v12, &v29);
          }
          else
          {
            sub_2167E99E4(v12, &v29);
            uint64_t v14 = v13 + 24;
          }
          *(void *)(a1 + 48) = v14;
        }
        else
        {
          uint64_t v21 = "usdUtils/assetLocalization.cpp";
          uint64_t v22 = "_EnqueueDependency";
          uint64_t v23 = 122;
          uint64_t v24 = "void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency(const SdfLayerRe"
                "fPtr, const std::string &, const BOOL)";
          char v25 = 0;
          if (*(char *)(a3 + 23) >= 0) {
            uint64_t v15 = a3;
          }
          else {
            uint64_t v15 = *(void *)a3;
          }
          if (v30 >= 0) {
            uint64_t v16 = &v29;
          }
          else {
            uint64_t v16 = (long long *)v29;
          }
          char v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
          uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v17);
          if (*(char *)(RealPath + 23) >= 0) {
            uint64_t v20 = RealPath;
          }
          else {
            uint64_t v20 = *(void *)RealPath;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Failed to resolve reference @%s@ with computed asset path @%s@ found in layer @%s@.", v19, v15, v16, v20);
        }
        if ((char)v28 < 0) {
          operator delete(__p);
        }
      }
      if (v30 < 0) {
        operator delete((void *)v29);
      }
    }
  }
}

void sub_217036AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessSublayers(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v4, (uint64_t)v16);
  if (sub_21697B6DC((uint64_t)v16))
  {
    if (sub_216ABBF20((uint64_t)v16)) {
      uint64_t v5 = (uint64_t *)v16;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v14 = v5;
    uint64_t v15 = 0;
    sub_216AB3AB4((uint64_t)v16, (uint64_t)v12);
    while (!sub_216ABD870((uint64_t)&v13, (uint64_t)v12))
    {
      uint64_t v6 = v14;
      uint64_t v7 = v15;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_2168BD80C((uint64_t *)&v11);
      sub_21697E720(v6, v7, __p);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v11, (uint64_t)__p, 0);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      sub_216ABB798(&v11);
      ++v15;
    }
    (**(void (***)(uint64_t *__return_ptr))*a1)(&v13);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    sub_2168BD80C((uint64_t *)&v8);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v8, &v13, 0);
    sub_216ABB798(&v8);
    v12[0] = (void **)&v13;
    sub_216782F20(v12);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
}

void sub_217036CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a9);
  a17 = &a20;
  sub_216782F20((void ***)&a17);
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 48);
  if (v22) {
    sub_216784EC4(v22);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessMetadata(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a1 + 26) == 1)
  {
    uint64_t v6 = sub_216A663FC(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetMetaDataInfoKeys(v6, &__p);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)__p.__r_.__value_.__r.__words[0];
          i != (const pxrInternal__aapl__pxrReserved__::TfToken *)size;
          uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
    {
      long long v9 = sub_216A663FC(a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v9, i, &v59);
      if (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)&v59, v10))
      {
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, std::string *))(*(void *)*a1 + 24))(*a1, a2, &v59);
        if ((*(void *)i & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*(void *)i & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        }
        pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(a1, a2, (uint64_t)EmptyString, (uint64_t *)&v59, 1);
        uint64_t v13 = *a1;
        uint64_t v14 = sub_216A663FC(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, long long **, const pxrInternal__aapl__pxrReserved__::TfToken *, std::string *))(*(void *)v13 + 64))(v13, a2, &v55, i, &v59);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
        sub_21697C414(&v55);
      }
      sub_2168EE084((uint64_t)&v59);
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_216889A04((void ***)&v59);
  }
  double v55 = 0;
  double v56 = 0;
  unint64_t v57 = 0;
  uint64_t v15 = sub_216A663FC(a3);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v16) {
    uint64_t v16 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v15, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v16 + 8), &__p);
  if (__p.__r_.__value_.__l.__size_ && (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&__p) & 1) != 0)
  {
    if ((__p.__r_.__value_.__s.__data_[8] & 4) != 0) {
      char v17 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(std::string *))((__p.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 168))(&__p);
    }
    else {
      char v17 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)__p.__r_.__value_.__r.__words[0];
    }
    v59.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v17);
    v59.__r_.__value_.__l.__size_ = v18;
    uint64_t v19 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v17);
    uint64_t v21 = v20;
    while (1)
    {
      std::string::size_type v22 = v59.__r_.__value_.__r.__words[0];
      BOOL v23 = !v21 || v59.__r_.__value_.__r.__words[0] == v19;
      BOOL v24 = v23;
      if (v59.__r_.__value_.__l.__size_ == v21 && v24) {
        break;
      }
      if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(v59.__r_.__value_.__r.__words[0]
                                                                                   + 56)))
      {
        uint64_t v26 = (long long *)(v22 + 32);
        unsigned __int8 v28 = v56;
        if ((unint64_t)v56 >= v57)
        {
          char v30 = (long long *)sub_2168DF188((uint64_t *)&v55, v26);
        }
        else
        {
          if (*(char *)(v22 + 55) < 0)
          {
            sub_216778F24(v56, *(void **)(v22 + 32), *(void *)(v22 + 40));
          }
          else
          {
            long long v29 = *v26;
            *((void *)v56 + 2) = *(void *)(v22 + 48);
            *unsigned __int8 v28 = v29;
          }
          char v30 = (long long *)((char *)v28 + 24);
        }
        double v56 = v30;
      }
      sub_2168EF104(&v59, (uint64_t)v26, v27);
    }
  }
  sub_2168EE084((uint64_t)&__p);
  uint64_t v31 = (uint64_t)v55;
  for (j = v56; (long long *)v31 != j; v31 += 24)
  {
    uint64_t v33 = sub_216A663FC(a3);
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v34) {
      uint64_t v34 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v33, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v34 + 8), &__p);
    sub_216C56108((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v58);
    sub_2168EE084((uint64_t)&__p);
    if (*(char *)(v31 + 23) >= 0) {
      size_t v35 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      size_t v35 = *(void *)(v31 + 8);
    }
    sub_2167940B4((uint64_t)&v59, v35 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v59;
    }
    else {
      uint64_t v36 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if (v35)
    {
      if (*(char *)(v31 + 23) >= 0) {
        uint64_t v37 = (const void *)v31;
      }
      else {
        uint64_t v37 = *(const void **)v31;
      }
      memmove(v36, v37, v35);
    }
    *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 58;
    uint64_t v38 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v38) {
      uint64_t v38 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    }
    if ((*((void *)v38 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v39 = (uint64_t *)((*((void *)v38 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
    }
    int v40 = *((char *)v39 + 23);
    if (v40 >= 0) {
      float64x2_t v41 = (const std::string::value_type *)v39;
    }
    else {
      float64x2_t v41 = (const std::string::value_type *)*v39;
    }
    if (v40 >= 0) {
      std::string::size_type v42 = *((unsigned __int8 *)v39 + 23);
    }
    else {
      std::string::size_type v42 = v39[1];
    }
    double v43 = std::string::append(&v59, v41, v42);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    ValueAtPath = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath((uint64_t *)&v58, &__p, ":");
    if (ValueAtPath)
    {
      uint64_t v46 = ValueAtPath[1];
      if ((v46 & 4) != 0) {
        uint64_t v47 = (*(uint64_t (**)(void))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))();
      }
      else {
        uint64_t v47 = *ValueAtPath;
      }
      if (*(char *)(v47 + 23) < 0)
      {
        sub_216778F24(&__dst, *(void **)v47, *(void *)(v47 + 8));
      }
      else
      {
        long long v48 = *(_OWORD *)v47;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v47 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v48;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_2168EBBB8((void ***)&v58, 0);
    std::string::size_type v49 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    char v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = __dst.__r_.__value_.__l.__size_;
    }
    if (v49)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedClips(&__dst, a2, (uint64_t *)&__p);
      float64x2_t v51 = *a1;
      memset(v53, 0, sizeof(v53));
      sub_216812BD8((char *)v53, (long long *)__p.__r_.__value_.__l.__data_, (long long *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      (*(void (**)(std::string *__return_ptr, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, pxrInternal__aapl__pxrReserved__::Sdf_Identity **, uint64_t, std::string *, void *))(*(void *)v51 + 72))(&v59, v51, a2, a3, v31, &__dst, v53);
      double v58 = (std::string *)v53;
      sub_216782F20((void ***)&v58);
      double v52 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_2168BD80C((uint64_t *)&v52);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v52, (uint64_t *)&v59, 0);
      sub_216ABB798(&v52);
      double v58 = &v59;
      sub_216782F20((void ***)&v58);
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_216782F20((void ***)&v59);
      char v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    if (v50 < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  sub_216782F20((void ***)&__p);
}

void sub_2170372C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a31 = &a20;
  sub_216782F20((void ***)&a31);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessPayloads(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  uint64_t v3 = (atomic_uint **)sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v3);
}

void sub_21703758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void **a16)
{
  a16 = (void **)&a11;
  sub_216782F20(&a16);
  if (a15) {
    sub_216784EC4(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessProperties(uint64_t result, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(result + 104))
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)result;
    uint64_t v6 = sub_216A663FC(a3);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(v6, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v7 + 40), (pxrInternal__aapl__pxrReserved__::VtValue *)&v47);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v47))
    {
      uint64_t v8 = (v48 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(&v47) : v47;
      long long v9 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v8;
      char v10 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v8 + 8);
      if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v8 != v10)
      {
        do
        {
          uint64_t v11 = sub_216A663FC(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11, &v39);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39, v9, &v41);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
          sub_21697C414(&v39);
          uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_216AA5ECC(a2);
          pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (uint64_t)&v39);
          uint64_t v14 = v39;
          uint64_t v13 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v40[0];
          while (v14 != v13)
          {
            uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v15) {
              uint64_t v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v15 + 11) & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v16) {
                uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v16 + 54) & 0xFFFFFFFFFFFFFFF8))
              {
                char v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
                pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, v14, (pxrInternal__aapl__pxrReserved__::VtValue *)&v45);
                if (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)&v45, v18))
                {
                  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, const pxrInternal__aapl__pxrReserved__::TfToken ***))(*(void *)*v5 + 24))(*v5, a2, &v45);
                  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(v5, a2, (uint64_t *)&v45, 0);
                  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, int *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken ***))(*(void *)*v5 + 64))(*v5, a2, &v41, v14, &v45);
                }
                sub_2168EE084((uint64_t)&v45);
              }
            }
            uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v14 + 8);
          }
          unint64_t v45 = &v39;
          sub_216889A04((void ***)&v45);
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v20) {
            uint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v20 + 448), (pxrInternal__aapl__pxrReserved__::VtValue *)&v45);
          if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v45))
          {
            if ((v46 & 4) != 0) {
              uint64_t v21 = (uint64_t *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::TfToken ***))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(&v45);
            }
            else {
              uint64_t v21 = (uint64_t *)&v45;
            }
            uint64_t v22 = *v21;
            uint64_t v38 = v22;
            if ((v22 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v38 &= 0xFFFFFFFFFFFFFFF8;
            }
            BOOL v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v23) {
              BOOL v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((uint64_t **)v23 + 12, &v38)) {
              goto LABEL_34;
            }
            BOOL v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v24) {
              BOOL v24 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((uint64_t **)v24 + 69, &v38))
            {
LABEL_34:
              char v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
              uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v26) {
                uint64_t v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v26 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)v44);
              if (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)v44, v27))
              {
                (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t *))(*(void *)*v5 + 24))(*v5, a2, v44);
                pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(v5, a2, v44, 0);
                unsigned __int8 v28 = *v5;
                long long v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v29) {
                  long long v29 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                }
                (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, int *, uint64_t, uint64_t *))(*(void *)v28 + 64))(v28, a2, &v41, (uint64_t)v29 + 88, v44);
              }
              char v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
              pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath((uint64_t *)&v39, v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
              uint64_t v31 = (double *)v39;
              if (v39 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v40)
              {
                do
                {
                  double v32 = v31[4];
                  v43[1] = 0;
                  uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
                  if pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, v32, (pxrInternal__aapl__pxrReserved__::VtValue *)v43)&& (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant((pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *)v43, v34))
                  {
                    (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t *))(*(void *)*v5 + 24))(*v5, a2, v43);
                    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(v5, a2, v43, 0);
                    (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, int *, uint64_t *, double))(*(void *)*v5 + 56))(*v5, a2, &v41, v43, v32);
                  }
                  sub_2168EE084((uint64_t)v43);
                  size_t v35 = (double *)*((void *)v31 + 1);
                  if (v35)
                  {
                    do
                    {
                      uint64_t v36 = v35;
                      size_t v35 = *(double **)v35;
                    }
                    while (v35);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v36 = (double *)*((void *)v31 + 2);
                      BOOL v37 = *(void *)v36 == (void)v31;
                      uint64_t v31 = v36;
                    }
                    while (!v37);
                  }
                  uint64_t v31 = v36;
                }
                while (v36 != (double *)v40);
              }
              sub_2167FB780((uint64_t)&v39, v40[0]);
              sub_2168EE084((uint64_t)v44);
            }
            if ((v38 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          sub_2168EE084((uint64_t)&v45);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
          sub_21697C414(&v41);
          long long v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
        }
        while (v9 != v10);
      }
    }
    return sub_2168EE084((uint64_t)&v47);
  }
  return result;
}

void sub_217037BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessReferences(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  uint64_t v3 = (atomic_uint **)sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v3);
}

void sub_217037DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void **a16)
{
  a16 = (void **)&a11;
  sub_216782F20(&a16);
  if (a15) {
    sub_216784EC4(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ValueTypeIsRelevant(pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_2169980B4(this) & 1) != 0 || (sub_216998140(this)) {
    return 1;
  }

  return sub_2168EC434(this);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ShouldFilterAssetPath((uint64_t)a1, (uint64_t *)a3, a5))
  {
    return;
  }
  if (sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)a4))
  {
    uint64_t v10 = a4[1];
    if ((v10 & 4) != 0) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    }
    else {
      uint64_t v11 = *a4;
    }
    if (*(char *)(v11 + 23) < 0)
    {
      sub_216778F24(&__dst, *(void **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      __dst.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v12;
    }
    if (*(char *)(v11 + 47) < 0)
    {
      sub_216778F24(&__p, *(void **)(v11 + 24), *(void *)(v11 + 32));
    }
    else
    {
      long long v28 = *(_OWORD *)(v11 + 24);
      uint64_t v49 = *(void *)(v11 + 40);
      long long __p = v28;
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetUdimTiles(a2, &__dst, (uint64_t *)&v46);
      (*(void (**)(std::string **__return_ptr))(*(void *)*a1 + 32))(&v44);
      char v30 = pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&__dst, 0);
      double v43 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_2168BD80C((uint64_t *)&v43);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v43, (uint64_t)&__dst, v30);
      sub_216ABB798(&v43);
      int v42 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      sub_2168BD80C((uint64_t *)&v42);
      pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v42, (uint64_t *)&v44, v30);
      sub_216ABB798(&v42);
      char v50 = &v44;
      sub_216782F20((void ***)&v50);
      long long v44 = &v46;
      sub_216782F20((void ***)&v44);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)a4))
  {
    uint64_t v13 = a4[1];
    if ((v13 & 4) != 0) {
      uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    }
    else {
      uint64_t v14 = (void *)*a4;
    }
    if (!*v14) {
      return;
    }
    uint64_t v15 = v14[4];
    uint64_t v16 = 48 * *v14;
    while (*(char *)(v15 + 23) < 0)
    {
      if (*(void *)(v15 + 8)) {
        goto LABEL_16;
      }
LABEL_17:
      v15 += 48;
      v16 -= 48;
      if (!v16)
      {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t *, uint64_t))(*(void *)*a1 + 48))(*a1, a2, a3);
        return;
      }
    }
    if (!*(unsigned char *)(v15 + 23)) {
      goto LABEL_17;
    }
LABEL_16:
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetUdimTiles(a2, (const std::string *)v15, (uint64_t *)&__dst);
    (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 40))(&v46);
    int v41 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    sub_2168BD80C((uint64_t *)&v41);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependency((uint64_t)a1, (uint64_t *)&v41, v15, 0);
    sub_216ABB798(&v41);
    int v40 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    sub_2168BD80C((uint64_t *)&v40);
    pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_EnqueueDependencies(a1, &v40, (uint64_t *)&v46, 0);
    sub_216ABB798(&v40);
    long long v44 = &v46;
    sub_216782F20((void ***)&v44);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    sub_216782F20((void ***)&v46);
    goto LABEL_17;
  }
  if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)a4))
  {
    uint64_t v17 = a4[1];
    std::string::size_type v18 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)((v17 & 4) != 0
                                                           ? (*(uint64_t (**)(uint64_t *))((v17 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 168))(a4)
                                                           : *a4);
    if (!pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v18))
    {
      uint64_t v19 = (std::string *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v18);
      uint64_t v21 = v20;
      long long v44 = v19;
      uint64_t v45 = v20;
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v18);
      BOOL v24 = (void **)v22;
      uint64_t v25 = v23;
      if (v23) {
        BOOL v26 = v19 == (std::string *)v22;
      }
      else {
        BOOL v26 = 1;
      }
      char v27 = v26;
      if (v21 == v23) {
        goto LABEL_47;
      }
      do
      {
        do
        {
          uint64_t v31 = *(unsigned __int8 *)(a3 + 23);
          if ((v31 & 0x80u) != 0) {
            uint64_t v31 = *(void *)(a3 + 8);
          }
          if (v31)
          {
            sub_216B9C180((const void **)a3, 58, (uint64_t)&v46);
            int v32 = v19[2].__r_.__value_.__s.__data_[7];
            if (v32 >= 0) {
              uint64_t v33 = &v19[1].__r_.__value_.__s.__data_[8];
            }
            else {
              uint64_t v33 = (const std::string::value_type *)v19[1].__r_.__value_.__l.__size_;
            }
            if (v32 >= 0) {
              std::string::size_type v34 = v19[2].__r_.__value_.__s.__data_[7];
            }
            else {
              std::string::size_type v34 = v19[1].__r_.__value_.__r.__words[2];
            }
            size_t v35 = std::string::append(&v46, v33, v34);
            long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v36;
            v35->__r_.__value_.__l.__size_ = 0;
            v35->__r_.__value_.__r.__words[2] = 0;
            v35->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v46.__r_.__value_.__l.__data_);
            }
          }
          else if (v19[2].__r_.__value_.__s.__data_[7] < 0)
          {
            sub_216778F24(&__dst, (void *)v19[1].__r_.__value_.__l.__size_, v19[1].__r_.__value_.__r.__words[2]);
          }
          else
          {
            std::string __dst = *(std::string *)((char *)v19 + 32);
          }
          pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(a1, a2, &__dst, &v19[2].__r_.__value_.__r.__words[1], a5);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          sub_2168EF104(&v44, v37, v38);
          uint64_t v19 = v44;
          if (v25) {
            BOOL v39 = v44 == (std::string *)v24;
          }
          else {
            BOOL v39 = 1;
          }
          char v27 = v39;
        }
        while (v45 != v25);
LABEL_47:
        ;
      }
      while ((v27 & 1) == 0);
    }
  }
}

void sub_217038444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x217038330);
  }
  JUMPOUT(0x217038318);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedClips(std::string *__str@<X1>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfGetPathName(__str, &v30);
  std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalization.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetTemplatedClips";
    __p.__r_.__value_.__r.__words[2] = 293;
    long long v28 = "static std::vector<std::string> pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedC"
          "lips(const SdfLayerRefPtr &, const std::string &)";
    char v29 = 0;
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = __str;
    }
    else {
      uint64_t v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Invalid template asset path '%s'.", v6, v17);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_51;
  }
  sub_216ABBA60((uint64_t *)&__p, a2);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&__p, (uint64_t)&v30, (uint64_t)v25);
  std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)v8 + 8))(v8);
  }
  if ((pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)v25, 0) & 1) == 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalization.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetTemplatedClips";
    __p.__r_.__value_.__r.__words[2] = 302;
    long long v28 = "static std::vector<std::string> pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetTemplatedC"
          "lips(const SdfLayerRefPtr &, const std::string &)";
    char v29 = 0;
    std::string::size_type v18 = v25;
    if (v26 < 0) {
      std::string::size_type v18 = (void **)v25[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Clips directory '%s' is not a valid directory on the filesystem.", v9, v18);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_49;
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(__str, &v24);
  sub_216779094(&v31, "#");
  sub_216779094(v20, "*");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v24.__r_.__value_.__l.__data_, (unsigned __int8 *)&v31, (unsigned __int8 *)v20, &__p);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)v25, (uint64_t)&__p, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::TfGlob((uint64_t)v22, 24, a3);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  if (v11 - *a3 == 24)
  {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (void *)*(unsigned __int8 *)(v10 + 23);
    }
    else {
      uint64_t v13 = *(void **)(v10 + 8);
    }
    unint64_t v14 = v23;
    if ((v23 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)v22[1];
    }
    if (v13 == (void *)v14)
    {
      if ((v23 & 0x80u) == 0) {
        uint64_t v15 = v22;
      }
      else {
        uint64_t v15 = (void **)v22[0];
      }
      if ((v12 & 0x80) == 0)
      {
        if (*(unsigned char *)(v10 + 23))
        {
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v10 + v16) == *((unsigned __int8 *)v15 + v16))
          {
            if (v12 == ++v16) {
              goto LABEL_38;
            }
          }
          goto LABEL_44;
        }
        goto LABEL_38;
      }
      if (!memcmp(*(const void **)v10, v15, *(void *)(v10 + 8)))
      {
LABEL_38:
        sub_216782F74(a3);
        uint64_t v10 = *a3;
        uint64_t v11 = a3[1];
      }
    }
  }
LABEL_44:
  while (v10 != v11)
  {
    sub_216B9C180((const void **)v25, 47, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)v10, (unsigned __int8 *)&__p, (unsigned __int8 *)&v30, &v31);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    long long v19 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    *(void *)(v10 + 16) = *((void *)&v31.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v10 = v19;
    v10 += 24;
  }
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
LABEL_49:
  if (v26 < 0) {
    operator delete(v25[0]);
  }
LABEL_51:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_2170387A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ProcessAssetValue(a1, a2, (uint64_t)__p, a3, a4);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_217038914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_ShouldFilterAssetPath(uint64_t a1, uint64_t *a2, int a3)
{
  if (!a3 || !*(unsigned char *)(a1 + 109)) {
    return 0;
  }
  int v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 20) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v3 != 20)
  {
    return 0;
  }
  return *a2 == 0x666E497465737361 && a2[1] == 0x69746E6564693A6FLL && *((_DWORD *)a2 + 4) == 1919248742;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::_GetUdimTiles(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::IsUdimIdentifier(a2))
  {
    sub_216ABBA60((uint64_t *)&v29, a1);
    pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimPath(a2, (uint64_t *)&v29, &v28);
    uint64_t v6 = v30;
    if (v30 && atomic_fetch_add_explicit((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*((void (**)(void **))*v6 + 1))(v6);
    }
    std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    char v8 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      char v29 = 0;
      std::string v30 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimTilePaths(&v28, (uint64_t *)&v29, &v26);
      long long v9 = v30;
      if (v30 && atomic_fetch_add_explicit((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*((void (**)(void **))*v9 + 1))(v9);
      }
      uint64_t v10 = v26;
      for (uint64_t i = v27; v10 != i; v10 += 48)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ReplaceUdimPattern((uint64_t)a2, (const void **)(v10 + 24), (uint64_t)__p);
        unint64_t v13 = a3[1];
        unint64_t v12 = a3[2];
        if (v13 >= v12)
        {
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a3) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *a3) >> 3);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x555555555555555) {
            unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v18 = v16;
          }
          uint64_t v33 = a3 + 2;
          if (v18) {
            long long v19 = (void **)sub_216782ED8((uint64_t)(a3 + 2), v18);
          }
          else {
            long long v19 = 0;
          }
          uint64_t v20 = &v19[3 * v15];
          char v29 = v19;
          std::string v30 = v20;
          int v32 = &v19[3 * v18];
          long long v21 = *(_OWORD *)__p;
          v20[2] = v25;
          *(_OWORD *)uint64_t v20 = v21;
          __p[1] = 0;
          uint64_t v25 = 0;
          __p[0] = 0;
          std::string v31 = v20 + 3;
          sub_216790CCC(a3, &v29);
          uint64_t v22 = a3[1];
          sub_216790E64((uint64_t)&v29);
          int v23 = SHIBYTE(v25);
          a3[1] = v22;
          if (v23 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v25;
          *(_OWORD *)unint64_t v13 = v14;
          a3[1] = v13 + 24;
        }
      }
      char v29 = (void **)&v26;
      sub_21682E488(&v29);
      char v8 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    if (v8 < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
}

void sub_217038C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  if (a25) {
    sub_217324208(a25);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ExtractExternalReferences(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  long long v24 = 0u;
  memset(v23, 0, sizeof(v23));
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = &unk_26C770400;
  v10[1] = sub_217038FE0;
  v10[2] = 0;
  v10[3] = v23;
  v26[3] = v10;
  uint64_t v27 = &unk_26C770530;
  sub_217039490((uint64_t)v28, (uint64_t)v26);
  sub_217039660(v26);
  long long v14 = &v27;
  memset(v15, 0, sizeof(v15));
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  int v18 = 1065353216;
  int v19 = a2;
  __int16 v20 = 0;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = (void **)v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v11, &v13);
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&v14, (uint64_t *)&v13);
  sub_216ABB798(&v13);
  sub_2167877AC((uint64_t)&v11, v12[0]);
  sub_217039060((uint64_t)v23);
  if (a3)
  {
    sub_21680F80C(a3);
    *(_OWORD *)a3 = v23[0];
    a3[2] = *(void *)&v23[1];
    memset(v23, 0, 24);
  }
  if (a4)
  {
    sub_21680F80C(a4);
    *(_OWORD *)a4 = *(_OWORD *)((char *)&v23[1] + 8);
    a4[2] = *((void *)&v23[2] + 1);
    memset((char *)&v23[1] + 8, 0, 24);
  }
  if (a5)
  {
    sub_21680F80C(a5);
    *(_OWORD *)a5 = v24;
    a5[2] = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
  }
  sub_216850298((uint64_t)v21);
  sub_216850298((uint64_t)&v16[1] + 8);
  uint64_t v11 = (void **)v16;
  sub_216782F20(&v11);
  uint64_t v11 = (void **)v15 + 1;
  sub_216782F20(&v11);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v15);
  uint64_t v27 = &unk_26C770530;
  sub_217039660(v29);
  sub_217039578((uint64_t)v28);
  long long v14 = (void **)&v24;
  sub_216782F20(&v14);
  long long v14 = (void **)&v23[1] + 1;
  sub_216782F20(&v14);
  long long v14 = (void **)v23;
  sub_216782F20(&v14);
}

void sub_217038F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_217039184((uint64_t)&a14);
  sub_2170391E8((void *)(v33 - 168));
  sub_217039238(&a33);
  _Unwind_Resume(a1);
}

double sub_217038FE0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  uint64_t v7 = *(long long **)(a2 + 24);
  char v8 = *(long long **)(a2 + 32);
  if (v7 == v8)
  {
    sub_2170393BC(a1, (long long *)a2, a3);
  }
  else
  {
    do
    {
      sub_2170393BC(a1, v7, a3);
      uint64_t v7 = (long long *)((char *)v7 + 24);
    }
    while (v7 != v8);
  }
  double result = 0.0;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  return result;
}

uint64_t sub_217039060(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  int v3 = *(long long **)(a1 + 8);
  unint64_t v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 3));
  if (v3 == (long long *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_216878D58((uint64_t)v2, v3, (uint64_t)&v19, v5, 1);
  uint64_t v6 = sub_216ABCE20(*(unsigned __int8 **)a1, *(unsigned __int8 **)(a1 + 8), (uint64_t)&v20);
  sub_216AB1AAC(a1, (uint64_t)v6, *(long long **)(a1 + 8));
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(long long **)(a1 + 32);
  unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
  if (v8 == (long long *)v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  sub_216878D58(v7, v8, (uint64_t)&v21, v10, 1);
  uint64_t v11 = sub_216ABCE20(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), (uint64_t)&v22);
  sub_216AB1AAC(a1 + 24, (uint64_t)v11, *(long long **)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(long long **)(a1 + 56);
  long long v14 = (unsigned __int8 **)(a1 + 48);
  unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v12) >> 3));
  if (v13 == (long long *)v12) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  sub_216878D58(v12, v13, (uint64_t)&v23, v16, 1);
  uint64_t v17 = sub_216ABCE20(*v14, v14[1], (uint64_t)&v24);
  return sub_216AB1AAC((uint64_t)v14, (uint64_t)v17, (long long *)v14[1]);
}

uint64_t sub_217039184(uint64_t a1)
{
  sub_216850298(a1 + 112);
  sub_216850298(a1 + 64);
  int v3 = (void **)(a1 + 40);
  sub_216782F20(&v3);
  int v3 = (void **)(a1 + 16);
  sub_216782F20(&v3);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

void *sub_2170391E8(void *a1)
{
  *a1 = &unk_26C770530;
  sub_217039660(a1 + 6);
  sub_217039578((uint64_t)(a1 + 1));
  return a1;
}

void **sub_217039238(void **a1)
{
  int v3 = a1 + 6;
  sub_216782F20(&v3);
  int v3 = a1 + 3;
  sub_216782F20(&v3);
  int v3 = a1;
  sub_216782F20(&v3);
  return a1;
}

uint64_t sub_217039290(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 9];
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)*v6 + 8 * (v5 & 0x1FF));
    unint64_t v8 = a1[5] + v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
    int64_t v10 = v8 & 0x1FF;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v9 + 8 * v10);
    if (v7 != v11)
    {
      do
      {
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v10, v7)+ 8);
        int64_t v10 = v7 - (pxrInternal__aapl__pxrReserved__::SdfSpec *)*v6;
        if (v10 == 4096)
        {
          uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)v6[1];
          ++v6;
          uint64_t v7 = v12;
        }
      }
      while (v7 != v11);
      uint64_t v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v14 = v13 >> 3;
  if (v14 == 1)
  {
    uint64_t v15 = 256;
  }
  else
  {
    if (v14 != 2) {
      goto LABEL_16;
    }
    uint64_t v15 = 512;
  }
  a1[4] = v15;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v16 = *v2++;
    operator delete(v16);
  }

  return sub_21683347C((uint64_t)a1);
}

uint64_t *sub_2170393BC(uint64_t *result, long long *a2, int a3)
{
  int v3 = result;
  switch(a3)
  {
    case 0:
    case 3:
      unint64_t v4 = result + 3;
      unint64_t v5 = v3[4];
      if (v5 >= v3[5])
      {
        double result = (uint64_t *)sub_2168DF188(v4, a2);
      }
      else
      {
        sub_2167E99E4(v4, a2);
        double result = (uint64_t *)(v5 + 24);
      }
      v3[4] = (uint64_t)result;
      break;
    case 1:
      unint64_t v6 = result[1];
      if (v6 >= result[2])
      {
        double result = (uint64_t *)sub_2168DF188(result, a2);
      }
      else
      {
        sub_2167E99E4(result, a2);
        double result = (uint64_t *)(v6 + 24);
      }
      v3[1] = (uint64_t)result;
      break;
    case 2:
      uint64_t v7 = result + 6;
      unint64_t v8 = v3[7];
      if (v8 >= v3[8])
      {
        double result = (uint64_t *)sub_2168DF188(v7, a2);
      }
      else
      {
        sub_2167E99E4(v7, a2);
        double result = (uint64_t *)(v8 + 24);
      }
      v3[7] = (uint64_t)result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_217039490(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_2170394E0(a1 + 40, a2);
  return a1;
}

void sub_2170394CC(_Unwind_Exception *a1)
{
  sub_217039578(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170394E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_217039578(uint64_t a1)
{
  sub_2170395B4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2170395B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2170395F8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2170395F8(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_217039660(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned __int8 *sub_2170396E4(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_216891D24((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_2168513F8(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_2170397E8(void *a1, atomic_uint **a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_217039880(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  uint64_t v9 = *(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  int64_t v10 = *a2;
  *(void *)(v9 + 8 * (v8 & 0x1FF)) = *a2;
  if (v10)
  {
    atomic_fetch_add(v10, 1u);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_217039880(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string::size_type v34 = (char *)sub_21677CB28(v5, v33);
      size_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string::size_type v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      size_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float64x2_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float64x2_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  sub_216832D5C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_217039B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217039B98(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)(v2 & 0x1FF), (pxrInternal__aapl__pxrReserved__::SdfSpec *)(*(void *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v2 & 0x1FF)));
  --a1[5];

  return sub_217039C04(a1, 1);
}

uint64_t sub_217039C04(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_217039C74(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v2 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v2;
  }
  sub_2169913E4();
}

void sub_217039CD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_217039CF8(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26C770400;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_217039D4C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C770400;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_217039D84(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = (uint64_t (*)(void *, uint64_t, uint64_t, void))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    unint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v6 + v5);
  }
  return v5(v6, a2, a3, *a4);
}

uint64_t sub_217039DB0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C770480)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217039DF0()
{
  return &unk_26C770480;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(void *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t RealPath = (long long *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v10);
  sub_21703CA50((char *)__dst, RealPath, a3);
  uint64_t v12 = sub_21703CCD8(a1, (pxrInternal__aapl__pxrReserved__ *)__dst);
  if (v12)
  {
    if (*((char *)v12 + 87) < 0)
    {
      sub_216778F24((unsigned char *)a5, (void *)v12[8], v12[9]);
    }
    else
    {
      long long v13 = *((_OWORD *)v12 + 4);
      *(void *)(a5 + 16) = v12[10];
      *(_OWORD *)a5 = v13;
    }
    *(void *)(a5 + 24) = 0;
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + 40) = 0;
  }
  else
  {
    sub_217039F64((uint64_t)(a1 + 5), (uint64_t)a2, (uint64_t)a3, a4);
    sub_21703CAE8((char *)v14, (long long *)__dst, (long long *)a5);
    sub_21703CECC((uint64_t)a1, (pxrInternal__aapl__pxrReserved__ *)v14, (uint64_t)v14);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_217039F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_216812650((uint64_t)va);
  sub_217039FB8(v2);
  sub_21682E578((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_217039F64(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

uint64_t sub_217039FB8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_216782F20(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessSublayers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v6, (uint64_t)v33);
  long long v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (sub_216ABBF20((uint64_t)v33)) {
    uint64_t v7 = (uint64_t *)v33;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v28 = v7;
  uint64_t v29 = 0;
  sub_216AB3AB4((uint64_t)v33, (uint64_t)v26);
  while (!sub_216ABD870((uint64_t)v27, (uint64_t)v26))
  {
    sub_21697E720(v28, v29, v24);
    if (SHIBYTE(v25) < 0)
    {
      sub_216778F24(__dst, v24[0], (unint64_t)v24[1]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)v24;
      uint64_t v22 = v25;
    }
    memset(v23, 0, sizeof(v23));
    pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((void *)(a1 + 8), a2, (long long *)__dst, 1, (uint64_t)__p);
    uint64_t v8 = (void *)HIBYTE(v18);
    if (v18 < 0) {
      uint64_t v8 = __p[1];
    }
    if (v8)
    {
      unint64_t v9 = sub_2169CAFD0((uint64_t)v30, v31, (unsigned __int8 **)__p);
      if (v9 == v31)
      {
        unint64_t v10 = v9;
        if (v9 >= v32)
        {
          uint64_t v12 = sub_2168DF188((uint64_t *)&v30, (long long *)__p);
        }
        else
        {
          if (SHIBYTE(v18) < 0)
          {
            sub_216778F24((unsigned char *)v9, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v11 = *(_OWORD *)__p;
            *(void *)(v9 + 16) = v18;
            *(_OWORD *)unint64_t v9 = v11;
          }
          uint64_t v12 = v10 + 24;
        }
        uint64_t v31 = v12;
        unint64_t v13 = a3[1];
        if (v13 >= a3[2])
        {
          char v15 = (std::string *)sub_2168DF188(a3, (long long *)__p);
        }
        else
        {
          if (SHIBYTE(v18) < 0)
          {
            sub_216778F24((unsigned char *)a3[1], __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v14 = *(_OWORD *)__p;
            *(void *)(v13 + 16) = v18;
            *(_OWORD *)unint64_t v13 = v14;
          }
          char v15 = (std::string *)(v13 + 24);
          a3[1] = v13 + 24;
        }
        a3[1] = (uint64_t)v15;
        sub_21695F4FC(a3, v15, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
      }
    }
    size_t v35 = &v19;
    sub_216782F20((void ***)&v35);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v23;
    sub_216782F20((void ***)__p);
    if (SHIBYTE(v22) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(v24[0]);
    }
    ++v29;
  }
  if ((sub_21703D200((uint64_t)v33, &v30) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(a1, a2, (uint64_t *)__dst);
    if (__dst[0])
    {
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)__dst);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths(v16, &v30);
    }
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__dst);
  }
  __dst[0] = &v30;
  sub_216782F20((void ***)__dst);
  if (v34) {
    sub_216784EC4(v34);
  }
}

void sub_21703A2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_216782F20((void ***)&a15);
  a15 = v26 - 136;
  sub_216782F20((void ***)&a15);
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 104);
  if (v28) {
    sub_216784EC4(v28);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*a2)
  {
LABEL_8:
    *a3 = 0;
    return;
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v6);
  uint64_t v8 = sub_216979288(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8) & 1) != 0
    || (unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2),
        uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v10)))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationDelegate.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetOrCreateWritableLayer";
    __p.__r_.__value_.__r.__words[2] = 448;
    uint64_t v26 = "SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLa"
          "yer(const SdfLayerRefPtr &)";
    char v27 = 0;
    long long v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
    if (*(char *)(Identifier + 23) >= 0) {
      unint64_t v13 = (const char *)Identifier;
    }
    else {
      unint64_t v13 = *(const char **)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to edit asset path in package layer: %s", v13);
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 216))
  {
    *a3 = *a2;
    sub_2168BD80C(a3);
  }
  else
  {
    sub_21703CC80((uint64_t *)&__p, a2, a2);
    long long v14 = sub_21703DAA8((uint64_t **)(a1 + 224), (unint64_t *)&__p, (uint64_t)&__p);
    char v16 = v15;
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p.__r_.__value_.__l.__size_);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
    if (v16)
    {
      char v17 = (const std::string **)sub_216AA5ECC(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(v17, &__p);
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
      char v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v18);
      int64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(v20);
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous((uint64_t)&__p, v19, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
      sub_216ABBA60((uint64_t *)&__p, a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(v21, (uint64_t *)&__p);
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
      }
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v14[5];
      char v23 = (uint64_t *)(v14 + 5);
      uint64_t *v23 = *a3;
      sub_2168BD80C(a3);
      sub_2168BD378((int)v23, v24);
    }
    else
    {
      *a3 = (uint64_t)v14[5];
      sub_2168BD80C(a3);
    }
  }
}

void sub_21703A5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, atomic_uint *a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  sub_216ABB798(v15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessPayloads(void *a1@<X8>)
{
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  sub_21703A6D4(a1);
}

void sub_21703A6D4(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
}

void sub_21703A930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessReferences(void *a1@<X8>)
{
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  sub_21703AA2C(a1);
}

void sub_21703AA2C(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
}

void sub_21703AC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void ****pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::BeginProcessValue(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  __n128 result = (const void ****)sub_2168EC434(a3);
  if (result)
  {
    uint64_t v6 = *((void *)a3 + 1);
    if ((v6 & 4) != 0) {
      uint64_t v7 = (const void ****)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
    }
    else {
      uint64_t v7 = *(const void *****)a3;
    }
    return pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)(a1 + 168), v7);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessValuePath(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, long long **a5@<X4>, void *a6@<X8>)
{
  v27[2] = *MEMORY[0x263EF8340];
  sub_21703CBE8(&__dst, a4, a5);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((void *)(a1 + 8), a2, &__dst, 0, (uint64_t)v21);
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetRelativeKeyPath(a3, &v20);
  std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unint64_t v11 = v22;
    if ((v22 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)v21[1];
    }
    uint64_t v12 = (uint64_t *)(a1 + 168);
    if (!v11)
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(v12, &v20, ":");
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      goto LABEL_19;
    }
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v16);
    v27[1] = &off_26C755A30;
    sub_2169B3DA8(v27, (long long *)v16);
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)v12, &v20, v27, ":");
    sub_2168EE084((uint64_t)v27);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17) < 0) {
      goto LABEL_17;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v16);
    unint64_t v13 = (void **)(a1 + 80);
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*v13);
    }
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v16;
    *(void *)(a1 + 96) = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    long long v14 = (void **)(a1 + 104);
    if (*(char *)(a1 + 127) < 0)
    {
      operator delete(*v14);
      int v15 = SHIBYTE(v17);
      *(_OWORD *)long long v14 = *(_OWORD *)__p;
      *(void *)(a1 + 120) = v19;
      HIBYTE(v19) = 0;
      LOBYTE(__p[0]) = 0;
      if (v15 < 0) {
LABEL_17:
      }
        operator delete(v16[0]);
    }
    else
    {
      *(_OWORD *)long long v14 = *(_OWORD *)__p;
      *(void *)(a1 + 120) = v19;
    }
  }
  sub_21703B0C4((uint64_t)v21, (uint64_t)a6);
LABEL_19:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  v16[0] = &v23;
  sub_216782F20((void ***)v16);
  if ((char)v22 < 0) {
    operator delete(v21[0]);
  }
  v21[0] = &v26;
  sub_216782F20((void ***)v21);
  if (v25 < 0) {
    operator delete((void *)__dst);
  }
}

void sub_21703AFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_217039FB8((uint64_t)&a21);
  sub_217039FB8(v21 - 104);
  _Unwind_Resume(a1);
}

void sub_21703B020()
{
}

std::string *pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetRelativeKeyPath@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __n128 result = (std::string *)std::string::find((const std::string *)a1, 58, 0);
  if (result != (std::string *)-1) {
    return std::string::basic_string(a2, (const std::string *)a1, (std::string::size_type)result->__r_.__value_.__r.__words + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    return (std::string *)sub_216778F24(a2, v5, v6);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return result;
}

uint64_t sub_21703B0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_21680BC90((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) + 1);
  sub_21695F4FC((uint64_t *)a2, *(std::string **)(a2 + 8), *(std::string **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a2 + 16))
  {
    uint64_t result = sub_2168DF188((uint64_t *)a2, (long long *)a1);
  }
  else
  {
    sub_2167E99E4((void *)a2, (long long *)a1);
    uint64_t result = v4 + 24;
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void sub_21703B170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessValuePathArrayElement(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X3>, long long **a4@<X4>, void *a5@<X8>)
{
  sub_21703CBE8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((void *)(a1 + 8), a2, (long long *)__dst, 0, (uint64_t)__p);
  unint64_t v8 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v8 = (unint64_t)__p[1];
  }
  if (v8)
  {
    sub_21703B294(a1 + 176);
    sub_21703B0C4((uint64_t)__p, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  int v15 = (void **)&v11;
  sub_216782F20(&v15);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = &v14;
  sub_216782F20((void ***)__p);
  if (v13 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21703B270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_217039FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21703B294(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v3) {
      goto LABEL_10;
    }
    unint64_t v4 = atomic_load((unint64_t *)(v3 - 16));
    if (v4 != 1) {
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v5 = (uint64_t *)a1;
      }
      else {
        unint64_t v5 = (uint64_t *)(v3 - 8);
      }
      uint64_t v6 = *v5;
    }
    else
    {
LABEL_10:
      uint64_t v6 = 0;
    }
    if (v2 != v6)
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v3 + 48 * v2);
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_15:
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = 1;
    do
    {
      unint64_t v9 = v8;
      v8 *= 2;
    }
    while (v9 < v2 + 1);
    unsigned __int8 v10 = sub_2169B4728(a1, v9);
    uint64_t v11 = 3 * v2;
    sub_2169B48DC(v7, v7 + 16 * v11, (uint64_t)v10);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v10[2 * v11]);
    sub_2169B4408((void *)a1);
    *(void *)(a1 + 32) = v10;
    goto LABEL_13;
  }
  v13[0] = "vt/array.h";
  v13[1] = "emplace_back";
  v13[2] = 433;
  v13[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::emplace_back("
           "Args &&...) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath, Args = <const std::string &>]";
  char v14 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v12 = 4;
    }
    else {
      int v12 = 3;
    }
  }
  else
  {
    int v12 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v12);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::EndProcessingValuePathArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetRelativeKeyPath(a3, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (*(void *)(a1 + 176))
    {
      sub_216BBA7DC((__n128 *)(a1 + 176), (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
      pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 168), &__p, v7, ":");
      sub_2168EE084((uint64_t)v7);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath((uint64_t *)(a1 + 168), &__p, ":");
    }
  }
  else
  {
    sub_2169B4408((void *)(a1 + 128));
    long long v5 = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 144) = v5;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(void *)(a1 + 160) = *(void *)(a1 + 208);
    *(void *)(a1 + 208) = 0;
  }
  sub_2169B44D8((void *)(a1 + 176));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21703B508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetUpdatedValue(pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  a3[1] = 0;
  if (!sub_2169980B4(a2))
  {
    if (sub_216998140(a2))
    {
      uint64_t v9 = *((void *)a2 + 1);
      if ((v9 & 4) != 0) {
        unsigned __int8 v10 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
      }
      else {
        unsigned __int8 v10 = *(void **)a2;
      }
      uint64_t v12 = *((void *)this + 16);
      uint64_t v11 = (__n128 *)((char *)this + 128);
      if (!v12 && *v10)
      {
LABEL_35:
        __dst[1] = 0;
        goto LABEL_36;
      }
      sub_216BBA7DC(v11, (pxrInternal__aapl__pxrReserved__::VtValue *)__dst);
    }
    else
    {
      if (!sub_2168EC434(a2)) {
        return;
      }
      uint64_t v13 = *((void *)a2 + 1);
      if ((v13 & 4) != 0) {
        char v14 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
      }
      else {
        char v14 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)a2;
      }
      int v15 = (pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *)((char *)this + 168);
      if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v15)
        && !pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v14))
      {
        goto LABEL_35;
      }
      sub_21703B804((const void ****)v15, (pxrInternal__aapl__pxrReserved__::VtValue *)__dst);
    }
LABEL_36:
    sub_2168ED33C(a3, __dst);
    sub_2168EE084((uint64_t)__dst);
    return;
  }
  uint64_t v6 = *((void *)a2 + 1);
  if ((v6 & 4) != 0) {
    uint64_t v7 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (*(char *)(v7 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    uint64_t v20 = *(void *)(v7 + 16);
    *(_OWORD *)long long __dst = v8;
  }
  if (*(char *)(v7 + 47) < 0)
  {
    sub_216778F24(&__p, *(void **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    long long v16 = *(_OWORD *)(v7 + 24);
    uint64_t v22 = *(void *)(v7 + 40);
    long long __p = v16;
  }
  if (*((char *)this + 103) < 0)
  {
    if (!*((void *)this + 11)) {
      goto LABEL_25;
    }
LABEL_29:
    sub_21703B7C0((uint64_t)this + 80, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    goto LABEL_30;
  }
  if (*((unsigned char *)this + 103)) {
    goto LABEL_29;
  }
LABEL_25:
  uint64_t v17 = (void *)HIBYTE(v20);
  if (v20 < 0) {
    uint64_t v17 = __dst[1];
  }
  if (!v17) {
    goto LABEL_29;
  }
  v18[1] = 0;
LABEL_30:
  sub_2168ED33C(a3, v18);
  sub_2168EE084((uint64_t)v18);
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21703B770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_2168EE084(v16);
  _Unwind_Resume(a1);
}

double sub_21703B7C0@<D0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B8E324(a2, a1).n128_u64[0];
  return result;
}

void sub_21703B7F0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

const void ****sub_21703B804@<X0>(const void ****a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_2168EC844(a2, a1);
}

void sub_21703B834(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::EndProcessValue(pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetUpdatedValue(a1, a5, &v16);
  if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v16, (std::type_info *)a5, v10) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer((uint64_t)a1, a2, (uint64_t *)&v15);
    if (v15)
    {
      if (v16.__type_name)
      {
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a5, &v16, v11) & 1) == 0)
        {
          uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v15);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v12, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v16);
        }
      }
      else
      {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v15);
        pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v13, a3, a4);
      }
    }
    sub_216ABB798(&v15);
  }
  return sub_2168EE084((uint64_t)&v16);
}

void sub_21703B948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::EndProcessTimeSampleValue(pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, double a5)
{
  _OWORD v15[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetUpdatedValue(a1, a4, v15);
  if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v15, (std::type_info *)a4, v10) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer((uint64_t)a1, a2, (uint64_t *)&v14);
    if (v14)
    {
      if (v15[1])
      {
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v14);
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v11, a3, a5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      }
      else
      {
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v14);
        pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(v12, a3, a5);
      }
    }
    sub_216ABB798(&v14);
  }
  return sub_2168EE084((uint64_t)v15);
}

void sub_21703BA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ProcessClipTemplateAssetPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3@<X2>, const void **a4@<X3>, long long *a5@<X4>, long long **a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  sub_21703CBE8(__dst, a5, a6);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((void *)(a1 + 8), a2, (long long *)__dst, 0, (uint64_t)&__s1);
  uint64_t v13 = v43;
  if ((v43 & 0x80u) == 0) {
    size_t v14 = v43;
  }
  else {
    size_t v14 = __n;
  }
  uint64_t v15 = *((unsigned __int8 *)a5 + 23);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *((void *)a5 + 1);
  }
  if (v14 == v15)
  {
    if (v16 >= 0) {
      uint64_t v17 = (unsigned __int8 *)a5;
    }
    else {
      uint64_t v17 = *(unsigned __int8 **)a5;
    }
    if ((v43 & 0x80) == 0)
    {
      if (v43)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *v17)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v17;
          if (!--v13) {
            goto LABEL_36;
          }
        }
        goto LABEL_17;
      }
LABEL_36:
      sub_21703B0C4((uint64_t)&__s1, a7);
      goto LABEL_53;
    }
    if (!memcmp(__s1, v17, __n)) {
      goto LABEL_36;
    }
  }
LABEL_17:
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::_GetOrCreateWritableLayer(a1, a2, (uint64_t *)&v40);
  if (v40)
  {
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v40);
    uint64_t v20 = sub_216A663FC(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
    sub_21697C414(&__p);
    uint64_t v21 = sub_216A663FC(&v39);
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v22) {
      uint64_t v22 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v21, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v22 + 8), &v49);
    if ((v50 & 4) != 0) {
      uint64_t v23 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(&v49);
    }
    else {
      uint64_t v23 = v49;
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v38, v23);
    if (*((char *)a4 + 23) >= 0) {
      size_t v24 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v24 = (size_t)a4[1];
    }
    char v25 = &v48;
    sub_2167940B4((uint64_t)&v48, v24 + 1);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v25 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if (v24)
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v26 = a4;
      }
      else {
        uint64_t v26 = *a4;
      }
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 58;
    char v27 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    if (!v27) {
      char v27 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
    }
    if ((*((void *)v27 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v27 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
    }
    int v29 = *((char *)EmptyString + 23);
    if (v29 >= 0) {
      long long v30 = (const std::string::value_type *)EmptyString;
    }
    else {
      long long v30 = (const std::string::value_type *)*EmptyString;
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *((unsigned __int8 *)EmptyString + 23);
    }
    else {
      std::string::size_type v31 = EmptyString[1];
    }
    unint64_t v32 = std::string::append(&v48, v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    v48.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26C750BB8;
    sub_21691B31C((unsigned int **)&v48, (uint64_t)&__s1);
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v38, &__p, &v48, ":");
    sub_2168EE084((uint64_t)&v48);
    std::string::size_type v34 = sub_216A663FC(&v39);
    size_t v35 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v35) {
      size_t v35 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    v48.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26C74DD80;
    sub_2168EEEA8((unsigned int **)&v48, (const void ****)&v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v34, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v35 + 8), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v48);
    sub_2168EE084((uint64_t)&v48);
    sub_21703B0C4((uint64_t)&__s1, a7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_2168EBBB8(&v38, 0);
    sub_2168EE084((uint64_t)&v49);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v36, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v39);
  }
  else
  {
    sub_21703B0C4((uint64_t)&__s1, a7);
  }
  sub_216ABB798(&v40);
LABEL_53:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  sub_216782F20((void ***)&__p);
  if ((char)v43 < 0) {
    operator delete(__s1);
  }
  __s1 = &v47;
  sub_216782F20((void ***)&__s1);
  if (v46 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21703BE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_21703BF64()
{
}

void sub_21703BF6C()
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::GetLayerUsedForWriting@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 216))
  {
    unint64_t v6 = *a2;
    if (*a2)
    {
      uint64_t v9 = *(void **)(a1 + 232);
      uint64_t v7 = (void *)(a1 + 232);
      long long v8 = v9;
      if (v9)
      {
        unsigned __int8 v10 = v7;
        do
        {
          unint64_t v11 = v8[4];
          BOOL v12 = v11 >= v6;
          if (v11 >= v6) {
            uint64_t v13 = v8;
          }
          else {
            uint64_t v13 = v8 + 1;
          }
          if (v12) {
            unsigned __int8 v10 = v8;
          }
          long long v8 = (void *)*v13;
        }
        while (*v13);
        if (v10 != v7)
        {
          unint64_t v14 = v10[4];
          uint64_t v15 = v10 + 5;
          if (v6 >= v14) {
            a2 = v15;
          }
        }
      }
    }
  }
  return sub_21703DB68(a3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ClearLayerUsedForWriting(uint64_t a1, unint64_t *a2)
{
  return sub_21703DC50(a1 + 224, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessSublayers(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v29 = 0;
  long long v30 = 0;
  unint64_t v31 = 0;
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v6, (uint64_t)v27);
  if (sub_216ABBF20((uint64_t)v27)) {
    uint64_t v7 = (uint64_t *)v27;
  }
  else {
    uint64_t v7 = 0;
  }
  char v25 = v7;
  uint64_t v26 = 0;
  sub_216AB3AB4((uint64_t)v27, (uint64_t)v23);
  long long v8 = (void *)(a1 + 8);
  while (!sub_216ABD870((uint64_t)v24, (uint64_t)v23))
  {
    sub_21697E720(v25, v26, v14);
    memset(v13, 0, sizeof(v13));
    sub_21703CBE8(__p, (long long *)v14, v13);
    pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v8, a2, (long long *)__p, 1, (uint64_t)__src);
    unint64_t v32 = (long long **)&v18;
    sub_216782F20((void ***)&v32);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v32 = v13;
    sub_216782F20((void ***)&v32);
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    uint64_t v9 = (void *)HIBYTE(v20);
    if (v20 < 0) {
      uint64_t v9 = __src[1];
    }
    if (v9)
    {
      unsigned __int8 v10 = v30;
      if ((unint64_t)v30 >= v31)
      {
        BOOL v12 = (std::string *)sub_2168DF188(&v29, (long long *)__src);
      }
      else
      {
        if (SHIBYTE(v20) < 0)
        {
          sub_216778F24(v30, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          long long v11 = *(_OWORD *)__src;
          v30->__r_.__value_.__r.__words[2] = v20;
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        }
        BOOL v12 = v10 + 1;
      }
      long long v30 = v12;
      sub_21695F4FC(&v29, v12, v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
    }
    __p[0] = &v21;
    sub_216782F20((void ***)__p);
    if (SHIBYTE(v20) < 0) {
      operator delete(__src[0]);
    }
    ++v26;
  }
  if (v28) {
    sub_216784EC4(v28);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __src[0] = &v29;
  sub_216782F20((void ***)__src);
}

void sub_21703C1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char v27 = *(std::__shared_weak_count **)(v25 - 128);
  if (v27) {
    sub_216784EC4(v27);
  }
  a25 = v25 - 112;
  sub_216782F20((void ***)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessPayloads(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  uint64_t v3 = (atomic_uint **)sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v3);
}

void sub_21703C2F4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169CC78C((void ***)va);
  if (a3) {
    sub_216784EC4(a3);
  }
  _Unwind_Resume(a1);
}

void sub_21703C320(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    long long v8 = (void *)(a1 + 8);
    do
    {
      if (*(char *)(v4 + 23) < 0)
      {
        if (*(void *)(v4 + 8))
        {
LABEL_7:
          memset(v13, 0, sizeof(v13));
          sub_21703CBE8(__p, (long long *)v4, v13);
          pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v8, a2, (long long *)__p, 2, (uint64_t)__src);
          uint64_t v21 = (long long **)&v16;
          sub_216782F20((void ***)&v21);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v21 = v13;
          sub_216782F20((void ***)&v21);
          uint64_t v9 = (void *)HIBYTE(v18);
          if (v18 < 0) {
            uint64_t v9 = __src[1];
          }
          if (v9)
          {
            unint64_t v10 = a4[1];
            if (v10 >= a4[2])
            {
              BOOL v12 = (std::string *)sub_2168DF188(a4, (long long *)__src);
            }
            else
            {
              if (SHIBYTE(v18) < 0)
              {
                sub_216778F24((unsigned char *)a4[1], __src[0], (unint64_t)__src[1]);
              }
              else
              {
                long long v11 = *(_OWORD *)__src;
                *(void *)(v10 + 16) = v18;
                *(_OWORD *)unint64_t v10 = v11;
              }
              BOOL v12 = (std::string *)(v10 + 24);
              a4[1] = v10 + 24;
            }
            a4[1] = (uint64_t)v12;
            sub_21695F4FC(a4, v12, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
          }
          __p[0] = &v19;
          sub_216782F20((void ***)__p);
          if (SHIBYTE(v18) < 0) {
            operator delete(__src[0]);
          }
        }
      }
      else if (*(unsigned char *)(v4 + 23))
      {
        goto LABEL_7;
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

void sub_21703C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  *(void *)(v18 + 8) = v19;
  sub_217039FB8((uint64_t)&a18);
  a18 = (void **)v18;
  sub_216782F20(&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessReferences(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3)
{
  uint64_t v3 = (atomic_uint **)sub_216A663FC(a3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v3);
}

void sub_21703C598(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169CC68C((void ***)va);
  if (a3) {
    sub_216784EC4(a3);
  }
  _Unwind_Resume(a1);
}

void sub_21703C5C4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    long long v8 = (void *)(a1 + 8);
    do
    {
      if (*(char *)(v4 + 23) < 0)
      {
        if (*(void *)(v4 + 8))
        {
LABEL_7:
          memset(v13, 0, sizeof(v13));
          sub_21703CBE8(__p, (long long *)v4, v13);
          pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v8, a2, (long long *)__p, 0, (uint64_t)__src);
          uint64_t v21 = (long long **)&v16;
          sub_216782F20((void ***)&v21);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v21 = v13;
          sub_216782F20((void ***)&v21);
          uint64_t v9 = (void *)HIBYTE(v18);
          if (v18 < 0) {
            uint64_t v9 = __src[1];
          }
          if (v9)
          {
            unint64_t v10 = a4[1];
            if (v10 >= a4[2])
            {
              BOOL v12 = (std::string *)sub_2168DF188(a4, (long long *)__src);
            }
            else
            {
              if (SHIBYTE(v18) < 0)
              {
                sub_216778F24((unsigned char *)a4[1], __src[0], (unint64_t)__src[1]);
              }
              else
              {
                long long v11 = *(_OWORD *)__src;
                *(void *)(v10 + 16) = v18;
                *(_OWORD *)unint64_t v10 = v11;
              }
              BOOL v12 = (std::string *)(v10 + 24);
              a4[1] = v10 + 24;
            }
            a4[1] = (uint64_t)v12;
            sub_21695F4FC(a4, v12, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
          }
          __p[0] = &v19;
          sub_216782F20((void ***)__p);
          if (SHIBYTE(v18) < 0) {
            operator delete(__src[0]);
          }
        }
      }
      else if (*(unsigned char *)(v4 + 23))
      {
        goto LABEL_7;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
}

void sub_21703C760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  *(void *)(v18 + 8) = v19;
  sub_217039FB8((uint64_t)&a18);
  a18 = (void **)v18;
  sub_216782F20(&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessValuePath(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X3>, long long **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7 = (void *)(a1 + 8);
  sub_21703CBE8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v7, a2, (long long *)__dst, 0, (uint64_t)__p);
  sub_21703B0C4((uint64_t)__p, a5);
  unint64_t v14 = (void **)&v13;
  sub_216782F20(&v14);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v14 = (void **)&v10;
  sub_216782F20(&v14);
  if (v9 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21703C86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217039FB8((uint64_t)va1);
  sub_217039FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessValuePathArrayElement(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X3>, long long **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7 = (void *)(a1 + 8);
  sub_21703CBE8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v7, a2, (long long *)__dst, 0, (uint64_t)__p);
  sub_21703B0C4((uint64_t)__p, a5);
  unint64_t v14 = (void **)&v13;
  sub_216782F20(&v14);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v14 = (void **)&v10;
  sub_216782F20(&v14);
  if (v9 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21703C944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217039FB8((uint64_t)va1);
  sub_217039FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_ReadOnlyLocalizationDelegate::ProcessClipTemplateAssetPath(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X4>, long long **a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v7 = (void *)(a1 + 8);
  sub_21703CBE8(__dst, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo(v7, a2, (long long *)__dst, 3, (uint64_t)__p);
  sub_21703B0C4((uint64_t)__p, a5);
  unint64_t v14 = (void **)&v13;
  sub_216782F20(&v14);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v14 = (void **)&v10;
  sub_216782F20(&v14);
  if (v9 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21703CA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217039FB8((uint64_t)va1);
  sub_217039FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_21703CA50(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_21703CACC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21703CAE8(char *a1, long long *a2, long long *a3)
{
  long long v5 = sub_21703CB50(a1, a2) + 48;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *((void *)v5 + 2) = *((void *)a3 + 2);
    *(_OWORD *)long long v5 = v6;
  }
  return a1;
}

void sub_21703CB3C(_Unwind_Exception *a1)
{
  sub_21682E578(v1);
  _Unwind_Resume(a1);
}

char *sub_21703CB50(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  long long v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)long long v5 = v6;
  }
  return __dst;
}

void sub_21703CBCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21703CBE8(unsigned char *__dst, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  sub_216812BD8(__dst + 24, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_21703CC64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21703CC80(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = *a2;
  sub_2168BD80C(a1);
  a1[1] = *a3;
  sub_2168BD80C(a1 + 1);
  return a1;
}

void sub_21703CCC4(_Unwind_Exception *a1)
{
  sub_216ABB798(v1);
  _Unwind_Resume(a1);
}

void *sub_21703CCD8(void *a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  uint64_t v13 = 0;
  char v14 = 0;
  sub_2169B3AE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, a2, (uint64_t)a2 + 24);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v13);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v8 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v4 - 1) & v5;
  }
  uint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (void *)*v9;
  if (*v9)
  {
    do
    {
      unint64_t v11 = v10[1];
      if (v11 == v5)
      {
        if (sub_21703CE04((uint64_t)&v13, (uint64_t)(v10 + 2), (uint64_t)a2)) {
          return v10;
        }
      }
      else
      {
        if (v7 > 1)
        {
          if (v11 >= *(void *)&v4) {
            v11 %= *(void *)&v4;
          }
        }
        else
        {
          v11 &= *(void *)&v4 - 1;
        }
        if (v11 != v8) {
          return 0;
        }
      }
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t sub_21703CE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2168513F8((uint64_t)&v22, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  if (result)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 47);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 32);
    }
    uint64_t v8 = *(unsigned __int8 *)(a3 + 47);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a3 + 32);
    }
    if (v7 == v8)
    {
      uint64_t v10 = (const void **)(a2 + 24);
      uint64_t v13 = *(unsigned __int8 **)(a3 + 24);
      char v12 = (unsigned __int8 *)(a3 + 24);
      unint64_t v11 = v13;
      if (v9 >= 0) {
        char v14 = v12;
      }
      else {
        char v14 = v11;
      }
      if ((v6 & 0x80) != 0)
      {
        return memcmp(*v10, v14, *(void *)(a2 + 32)) == 0;
      }
      else if (*(unsigned char *)(a2 + 47))
      {
        uint64_t v15 = v6 - 1;
        do
        {
          int v17 = *(unsigned __int8 *)v10;
          uint64_t v10 = (const void **)((char *)v10 + 1);
          int v16 = v17;
          int v19 = *v14++;
          int v18 = v19;
          BOOL v21 = v15-- != 0;
          uint64_t result = v16 == v18;
        }
        while (v16 == v18 && v21);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *sub_21703CECC(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3)
{
  uint64_t v25 = 0;
  LOBYTE(v26) = 0;
  sub_2169B3AE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, a2, (uint64_t)a2 + 24);
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      char v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v7)
          {
            if (sub_21703CE04((uint64_t)&v25, (uint64_t)(v12 + 2), (uint64_t)a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }
            else
            {
              v13 &= v8 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          char v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  char v14 = (char *)operator new(0x58uLL);
  uint64_t v25 = v14;
  uint64_t v26 = a1 + 16;
  *(void *)char v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((void *)v14 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v14 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  long long v15 = *(_OWORD *)(a3 + 48);
  *((void *)v14 + 10) = *(void *)(a3 + 64);
  *((_OWORD *)v14 + 4) = v15;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  char v27 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v25 = *v22;
    *char v22 = v25;
  }
  else
  {
    *uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      unint64_t v23 = *(void *)(*v25 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  char v12 = v25;
  uint64_t v25 = 0;
  ++*(void *)(a1 + 24);
  sub_21703D1A8((uint64_t)&v25, 0);
  return v12;
}

void sub_21703D190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21703D1A8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_21703D1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2170395F8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_21703D200(uint64_t a1, unsigned __int8 **a2)
{
  sub_216C081DC(a1, (uint64_t)&v9);
  unint64_t v3 = v9;
  int8x8_t v4 = v10;
  uint64_t v6 = a2;
  unint64_t v5 = *a2;
  if (v10 - v9 == v6[1] - v5)
  {
    if (v9 == v10)
    {
      uint64_t v7 = 1;
    }
    else
    {
      do
      {
        uint64_t v7 = sub_2168513F8((uint64_t)&v11, v3, v5);
        if (!v7) {
          break;
        }
        v3 += 24;
        v5 += 24;
      }
      while (v3 != v4);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v11 = &v9;
  sub_216782F20((void ***)&v11);
  return v7;
}

BOOL sub_21703D2AC(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C756A98;
  sub_2169DABAC(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_21703D33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_21703D360(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7705A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21703D3B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7705A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21703D3EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_21703D400(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C770608)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21703D440()
{
  return &unk_26C770608;
}

void sub_21703D44C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v10 = *(void *)(a3 + 8);
    if (v10)
    {
      sub_216778F24(__dst, *(void **)a3, v10);
      goto LABEL_6;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v25 = *(void *)(a3 + 16);
LABEL_6:
    memset(v26, 0, sizeof(v26));
    pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((void *)(a1 + 8), a2, (long long *)__dst, 2, (uint64_t)v20);
    unint64_t v11 = (void *)HIBYTE(v21);
    if (v21 < 0) {
      unint64_t v11 = v20[1];
    }
    if (v11)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        sub_216778F24(__p, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a3;
        uint64_t v16 = *(void *)(a3 + 16);
      }
      sub_216981010(&v17, (_DWORD *)(a3 + 24));
      sub_21698105C(&v18, (_DWORD *)(a3 + 28));
      long long v19 = *(_OWORD *)(a3 + 32);
      sub_216ABE2D8((uint64_t)__p);
      unint64_t v12 = a4[1];
      if (v12 >= a4[2])
      {
        char v14 = (std::string *)sub_2167E9A44(a4, (long long *)v20);
      }
      else
      {
        if (SHIBYTE(v21) < 0)
        {
          sub_216778F24((unsigned char *)a4[1], v20[0], (unint64_t)v20[1]);
        }
        else
        {
          long long v13 = *(_OWORD *)v20;
          *(void *)(v12 + 16) = v21;
          *(_OWORD *)unint64_t v12 = v13;
        }
        char v14 = (std::string *)(v12 + 24);
        a4[1] = v12 + 24;
      }
      a4[1] = (uint64_t)v14;
      sub_21695F4FC(a4, v14, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
      sub_216ABE38C((void *)a5, (long long *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
      sub_21697C414(&v17);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 48) = 0;
    }
    __p[0] = &v22;
    sub_216782F20((void ***)__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    v20[0] = v26;
    sub_216782F20((void ***)v20);
    if (SHIBYTE(v25) < 0) {
      operator delete(__dst[0]);
    }
    return;
  }

  sub_216ABE38C((void *)a5, (long long *)a3);
}

void sub_21703D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  *(void *)(v21 + 8) = v22;
  sub_2169D8488((uint64_t)&a9);
  sub_217039FB8((uint64_t)&a15);
  sub_217039FB8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

BOOL sub_21703D6CC(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C7569E0;
  sub_2169D7F48(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_21703D75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_21703D780(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C770628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21703D7D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C770628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21703D80C(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
}

uint64_t sub_21703D820(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C770688)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21703D860()
{
  return &unk_26C770688;
}

void sub_21703D86C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char *a5@<X8>)
{
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v10 = *(void *)(a3 + 8);
    if (v10)
    {
      sub_216778F24(&__dst, *(void **)a3, v10);
      goto LABEL_6;
    }
LABEL_12:
    sub_2169D5338(a5, (long long *)a3);
    a5[56] = 1;
    return;
  }
  if (!*(unsigned char *)(a3 + 23)) {
    goto LABEL_12;
  }
  long long __dst = *(_OWORD *)a3;
  uint64_t v25 = *(void *)(a3 + 16);
LABEL_6:
  memset(v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::UsdUtils_ProcessedPathCache::GetProcessedInfo((void *)(a1 + 8), a2, &__dst, 0, (uint64_t)v20);
  unint64_t v11 = (void *)HIBYTE(v21);
  if (v21 < 0) {
    unint64_t v11 = v20[1];
  }
  if (v11)
  {
    sub_2169D5338((char *)__p, (long long *)a3);
    sub_216ABDCAC((uint64_t)__p);
    unint64_t v12 = a4[1];
    if (v12 >= a4[2])
    {
      char v14 = (std::string *)sub_2167E9A44(a4, (long long *)v20);
    }
    else
    {
      if (SHIBYTE(v21) < 0)
      {
        sub_216778F24((unsigned char *)a4[1], v20[0], (unint64_t)v20[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)v20;
        *(void *)(v12 + 16) = v21;
        *(_OWORD *)unint64_t v12 = v13;
      }
      char v14 = (std::string *)(v12 + 24);
      a4[1] = v12 + 24;
    }
    a4[1] = (uint64_t)v14;
    sub_21695F4FC(a4, v14, v22, v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
    sub_2169D5338(a5, (long long *)__p);
    a5[56] = 1;
    sub_2168EBBB8(&v19, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
    sub_21697C414(&v17);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *a5 = 0;
    a5[56] = 0;
  }
  __p[0] = &v22;
  sub_216782F20((void ***)__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  __p[0] = v26;
  sub_216782F20((void ***)__p);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_21703DA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  *(void *)(v2 + 8) = v3;
  sub_2169D5474((uint64_t)va);
  sub_217039FB8((uint64_t)va1);
  sub_217039FB8(v4 - 96);
  _Unwind_Resume(a1);
}

uint64_t **sub_21703DAA8(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_21703DB68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    uint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_21703DC38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21703DC50(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = (uint64_t)v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(void *)(v4 + 32)) {
    return 0;
  }
  sub_21703DCB8((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_21703DCB8(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_2167AE00C(a1, (uint64_t *)a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 40));
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap(void *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)__dst);
    pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap(&__p, a1, __dst);
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&__p, (uint64_t)&v18, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v17) < 0)
    {
      BOOL v6 = __dst[0];
LABEL_26:
      operator delete(v6);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)a2, &__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a2, &v14);
      sub_217040480(__dst, (long long *)&__p, "");
      uint64_t v10 = sub_217040578((uint64_t)(a1 + 1), (unsigned __int8 *)__dst, (uint64_t)__dst);
      char v11 = (char)v8;
      if (v19 < 0) {
        operator delete(v18);
      }
      if (SHIBYTE(v17) < 0) {
        operator delete(__dst[0]);
      }
      if (v11)
      {
        uint64_t v12 = (*a1)++;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%zu", v8, v9, v12);
        uint64_t v13 = (void **)(v10 + 40);
        if ((char)v10[63] < 0) {
          operator delete(*v13);
        }
        *(_OWORD *)uint64_t v13 = *(_OWORD *)__dst;
        *((void *)v10 + 7) = v17;
      }
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)v10 + 5, (uint64_t)&v14, a3);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
    else if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(a3, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v6 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_26;
    }
  }
}

void sub_21703DED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build(pxrInternal__aapl__pxrReserved__ *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__ *)sub_216778F24(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v26 = *((void *)a2 + 2);
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  std::string::operator=((std::string *)v4 + 2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((*((char *)v4 + 71) & 0x80000000) == 0)
  {
    if (*((unsigned char *)v4 + 71)) {
      goto LABEL_8;
    }
LABEL_13:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationPackage.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 80;
    *(void *)&long long v17 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build(const SdfA"
                      "ssetPath &, const std::string &)";
    BYTE8(v17) = 0;
    p_dst = &__dst;
    if (v26 < 0) {
      p_dst = (long long *)__dst;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Failed to resolve asset path: %s", v6, p_dst);
    goto LABEL_19;
  }
  if (!*((void *)v4 + 7)) {
    goto LABEL_13;
  }
LABEL_8:
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)&__dst, &__str, v27);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)v4 + 1);
  *((void ***)v4 + 1) = v27[0];
  v27[0] = 0;
  sub_2168BD378(v4 + 8, v7);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v27);
  sub_2167877AC((uint64_t)&__str, (void *)__str.__r_.__value_.__l.__size_);
  if (!*((void *)v4 + 1))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationPackage.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 87;
    *(void *)&long long v17 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build(const SdfA"
                      "ssetPath &, const std::string &)";
    BYTE8(v17) = 0;
    uint64_t v10 = &__dst;
    if (v26 < 0) {
      uint64_t v10 = (long long *)__dst;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__str, (pxrInternal__aapl__pxrReserved__ *)"Failed to find or open root asset layer: %s", v8, v10);
LABEL_19:
    BOOL v11 = 0;
    goto LABEL_26;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v12 = *(void *)(a3 + 8);
    if (v12)
    {
      sub_216778F24(&__str, *(void **)a3, v12);
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)v4 + 1);
    uint64_t RealPath = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v13);
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(RealPath, &__str);
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a3 + 23)) {
    goto LABEL_22;
  }
  std::string __str = *(std::string *)a3;
LABEL_23:
  std::string::operator=((std::string *)((char *)v4 + 368), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v4 + 96;
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0u;
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0;
  int v20 = 1065353216;
  int v21 = 1;
  __int16 v22 = 257;
  memset(v23, 0, sizeof(v23));
  int v24 = 1065353216;
  sub_2170404FC((uint64_t)v27, *((unsigned __int8 **)v4 + 49), *((unsigned __int8 **)v4 + 50));
  sub_216C014A0((uint64_t)v23, (uint64_t *)v27);
  sub_216850298((uint64_t)v27);
  BOOL v11 = pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&__str, (uint64_t *)v4 + 1);
  sub_216850298((uint64_t)v23);
  sub_216850298((uint64_t)&v18[1] + 8);
  v27[0] = (void **)v18;
  sub_216782F20(v27);
  v27[0] = (void **)&__str.__r_.__value_.__r.__words[2];
  sub_216782F20(v27);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__str.__r_.__value_.__l.__size_);
LABEL_26:
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)__dst);
  }
  return v11;
}

void sub_21703E230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 - 89) < 0) {
    operator delete(*(void **)(v16 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 344), a2);
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  sub_216A38350((uint64_t)v33, (unsigned __int8 *)(a1 + 368), a1 + 368);
  unint64_t v32 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8);
  sub_2168BD80C((uint64_t *)&v32);
  pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage((char *)a1, (uint64_t *)&v32, a1 + 368);
  sub_216ABB798(&v32);
  unint64_t v3 = *(void **)(a1 + 416);
  if (v3 == (void *)(a1 + 424))
  {
    int v4 = 1;
  }
  else
  {
    int v4 = 1;
    do
    {
      unint64_t v5 = v3 + 7;
      sub_216A38350((uint64_t)v33, (unsigned __int8 *)v3 + 56, (uint64_t)(v3 + 7));
      uint64_t v7 = v3 + 4;
      if (v8)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        std::string __p = &v28;
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)(v3 + 4), &__p, &v26);
        sub_2167877AC((uint64_t)&__p, v28);
        if (v26)
        {
          uint64_t v25 = v26;
          sub_2168BD80C((uint64_t *)&v25);
          v4 &= pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage((char *)a1, (uint64_t *)&v25, (uint64_t)(v3 + 7));
          sub_216ABB798(&v25);
        }
        else
        {
          std::string __p = "usdUtils/assetLocalizationPackage.cpp";
          uint64_t v28 = "Write";
          uint64_t v29 = 128;
          long long v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
          char v31 = 0;
          if (*((char *)v3 + 55) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          if (*((char *)v3 + 79) < 0) {
            unint64_t v5 = (void *)*v5;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Unable to open layer at path \"%s\" while writing package. Skipping export of dependency @%s@.", v9, v7, v5);
        }
        sub_216ABB798(&v26);
      }
      else
      {
        std::string __p = "usdUtils/assetLocalizationPackage.cpp";
        uint64_t v28 = "Write";
        uint64_t v29 = 120;
        long long v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
        char v31 = 0;
        if (*((char *)v3 + 79) < 0) {
          unint64_t v5 = (void *)*v5;
        }
        if (*((char *)v3 + 55) < 0) {
          uint64_t v7 = (void *)*v7;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"A file already exists at path \"%s\" in the package. Skipping export of dependency @%s@.", v6, v5, v7);
      }
      uint64_t v10 = (void *)v3[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (void *)v3[2];
          BOOL v12 = *v11 == (void)v3;
          unint64_t v3 = v11;
        }
        while (!v12);
      }
      unint64_t v3 = v11;
    }
    while (v11 != (void *)(a1 + 424));
  }
  uint64_t v13 = *(void *)(a1 + 440);
  for (uint64_t i = *(void *)(a1 + 448); v13 != i; v13 += 48)
  {
    long long v15 = (void *)(v13 + 24);
    sub_216A38350((uint64_t)v33, (unsigned __int8 *)(v13 + 24), v13 + 24);
    if (v17)
    {
      uint64_t v19 = (char *)v13;
      if (*(char *)(v13 + 23) < 0) {
        uint64_t v19 = *(char **)v13;
      }
      sub_216779094(&__p, v19);
      char IsFile = pxrInternal__aapl__pxrReserved__::TfIsFile((const char *)&__p, 1);
      char v22 = IsFile;
      if (SHIBYTE(v29) < 0)
      {
        operator delete(__p);
        if ((v22 & 1) == 0)
        {
LABEL_38:
          std::string __p = "usdUtils/assetLocalizationPackage.cpp";
          uint64_t v28 = "Write";
          uint64_t v29 = 146;
          long long v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
          char v31 = 0;
          unint64_t v23 = (char *)v13;
          if (*(char *)(v13 + 23) < 0) {
            unint64_t v23 = *(char **)v13;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"File not found. Skipping export of dependency @%s@.", v21, v23);
          continue;
        }
      }
      else if ((IsFile & 1) == 0)
      {
        goto LABEL_38;
      }
      v4 &= pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddAssetToPackage((char *)a1, v13, v13 + 24);
    }
    else
    {
      std::string __p = "usdUtils/assetLocalizationPackage.cpp";
      uint64_t v28 = "Write";
      uint64_t v29 = 139;
      long long v30 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(const std::string &)";
      char v31 = 0;
      if (*(char *)(v13 + 47) < 0) {
        long long v15 = (void *)*v15;
      }
      int v18 = (char *)v13;
      if (*(char *)(v13 + 23) < 0) {
        int v18 = *(char **)v13;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"A file already exists at path \"%s\" in the package. Skipping export of dependency @%s@.", v16, v15, v18);
    }
  }
  sub_216850298((uint64_t)v33);
  return v4 & 1;
}

void sub_21703E5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a24,__int16 a25,char a26,char a27)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage(char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 96);
  pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::GetLayerUsedForWriting((uint64_t)(a1 + 96), a2, (uint64_t *)&v69);
  if (sub_2170402E0(0))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v7);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v11 = Identifier;
    }
    else {
      uint64_t v11 = *(void *)Identifier;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = *(void *)a3;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)".. adding layer @%s@ to package at path '%s'.\n", v9, v10, v11, v12);
  }
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v13);
  uint64_t v15 = sub_216979288(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15) & 1) != 0
    || (uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69),
        uint64_t v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v17)))
  {
    int v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69);
    uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v18);
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(RealPath, (uint64_t)&__s1);
    std::string v71 = __s1;
    memset(&__s1, 0, sizeof(__s1));
    if (v68 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
    }
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)&__s1);
    std::string v64 = __s1;
    memset(&__s1, 0, sizeof(__s1));
    if (v68 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    if (!size
      || ((*(uint64_t (**)(char *, std::string *, std::string *))(*(void *)a1 + 24))(a1, &v71, &v64) & 1) != 0)
    {
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      goto LABEL_98;
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    goto LABEL_55;
  }
  int v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v21)) {
    goto LABEL_58;
  }
  char v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69);
  unint64_t v23 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v23);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v26 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  int v27 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = v71.__r_.__value_.__l.__size_;
  }
  if (v25 == v26)
  {
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v71;
    }
    else {
      uint64_t v28 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v37 = memcmp(__s1.__r_.__value_.__l.__data_, v28, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v29 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v32 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v31 = v32;
        int v34 = v28->__r_.__value_.__s.__data_[0];
        uint64_t v28 = (std::string *)((char *)v28 + 1);
        int v33 = v34;
        BOOL v36 = v29-- != 0;
        BOOL v37 = v31 == v33;
      }
      while (v31 == v33 && v36);
    }
    else
    {
      BOOL v37 = 1;
    }
  }
  else
  {
    BOOL v37 = 0;
  }
  if (v27 < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_53:
      if (v37) {
        goto LABEL_54;
      }
LABEL_58:
      *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = 0uLL;
      v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__l.__size_;
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a3, (uint64_t)&__s1);
      memset(&v64, 0, sizeof(v64));
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__s1, (uint64_t)&v64, &v62);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      sub_217040340((uint64_t)&v62, &__s1);
      int v41 = sub_2170403E8(&__s1);
      unint64_t v43 = v42 & 1 | (unint64_t)v41;
      uint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)__s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(__s1.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        uint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(void *)v44 + 8))(v44);
      }
      if (v43)
      {
        if (*(unsigned char *)(sub_216850B68(&v70) + 14)) {
          uint64_t v45 = v69;
        }
        else {
          uint64_t v45 = 0;
        }
        UnderlyingFormatForLayer = pxrInternal__aapl__pxrReserved__::UsdUsdFileFormat::GetUnderlyingFormatForLayer(v45, &v64);
        if ((v64.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (const std::string *)((v64.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(UnderlyingFormatForLayer);
        }
        std::string v48 = (pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
        if (!v48) {
          std::string v48 = sub_216E11CD8(&pxrInternal__aapl__pxrReserved__::UsdUsdFileFormatTokens);
        }
        if ((*((void *)v48 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v49 = (uint64_t *)((*((void *)v48 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
        }
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        uint64_t v50 = sub_21677B174((uint64_t **)&v71, (const void **)v49, (uint64_t)&unk_2174BFD90, (long long **)&__s1);
        uint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)std::string::operator=((std::string *)(v50 + 7), EmptyString);
        if ((v64.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v64.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      TmpDir = (char *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(v44);
      sub_216779094(&v64, TmpDir);
      pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a3, &__s1);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&v64.__r_.__value_.__l.__data_, (uint64_t)&__s1, v60);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      uint64_t v52 = sub_216E08B08((uint64_t *)&v69);
      sub_216779094(&__s1, "");
      pxrInternal__aapl__pxrReserved__::SdfLayer::Export(v52, (const char *)v60, (char *)&__s1, (uint64_t)&v71);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      char v54 = (*(uint64_t (**)(char *, void **, uint64_t))(*(void *)a1 + 24))(a1, v60, a3);
      if (v54)
      {
        pxrInternal__aapl__pxrReserved__::UsdUtils_WritableLocalizationDelegate::ClearLayerUsedForWriting(v6, (unint64_t *)a2);
        pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)v60);
      }
      else
      {
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/assetLocalizationPackage.cpp";
        __s1.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddLayerToPackage";
        __s1.__r_.__value_.__r.__words[2] = 455;
        std::string __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddLayerToPackage(SdfLayerRefPt"
              "r, const std::string &)";
        char v67 = 0;
        long long v55 = v60;
        if (v61 < 0) {
          long long v55 = (void **)v60[0];
        }
        double v56 = a1 + 344;
        if (a1[367] < 0) {
          double v56 = (void *)*v56;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__s1, (pxrInternal__aapl__pxrReserved__ *)"Failed to add temporary layer at '%s' to the package at path '%s'.", v53, v55, v56);
      }
      if (v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      uint64_t v57 = v63;
      if (v63 && atomic_fetch_add_explicit((atomic_uint *volatile)(v63 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
      }
      sub_2167877AC((uint64_t)&v71, (void *)v71.__r_.__value_.__l.__size_);
      if (v54) {
        goto LABEL_98;
      }
      goto LABEL_55;
    }
  }
  else if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v37) {
    goto LABEL_58;
  }
LABEL_54:
  uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v69);
  uint64_t v39 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v38);
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v39, a3))
  {
LABEL_98:
    uint64_t v40 = 1;
    goto LABEL_99;
  }
LABEL_55:
  uint64_t v40 = 0;
LABEL_99:
  uint64_t v58 = v70;
  if (v70 && atomic_fetch_add_explicit((atomic_uint *volatile)(v70 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  return v40;
}

void sub_21703ED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, atomic_uint *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 && atomic_fetch_add_explicit(a19 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a19 + 8))(a19);
  }
  sub_2167877AC(v32 - 96, *(void **)(v32 - 88));
  int v34 = *(atomic_uint **)(v32 - 104);
  if (v34)
  {
    if (atomic_fetch_add_explicit(v34 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v34 + 8))(v34);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddAssetToPackage(char *a1, uint64_t a2, uint64_t a3)
{
  if (sub_2170402E0(0))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = *(void *)a3;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)".. adding file '%s' to package at path '%s'.\n", v6, v7, v8, v9);
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a3))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a2, (uint64_t)v18);
    long long v23 = *(_OWORD *)v18;
    uint64_t v24 = v19;
    v18[1] = 0;
    uint64_t v19 = 0;
    v18[0] = 0;
    if (v22 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter(a3, (uint64_t)v18);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
    uint64_t v17 = v19;
    v18[1] = 0;
    uint64_t v19 = 0;
    v18[0] = 0;
    if (v22 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[0]);
      }
    }
    uint64_t v10 = HIBYTE(v24);
    if (v24 < 0) {
      uint64_t v10 = *((void *)&v23 + 1);
    }
    BOOL v11 = !v10
       || ((*(uint64_t (**)(char *, long long *, void **))(*(void *)a1 + 24))(a1, &v23, v16) & 1) != 0;
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(v24) < 0)
    {
      operator delete((void *)v23);
      if (v11) {
        return 1;
      }
    }
    else if (v11)
    {
      return 1;
    }
  }
  else
  {
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, a3)) {
      return 1;
    }
    v18[0] = "usdUtils/assetLocalizationPackage.cpp";
    v18[1] = "_AddAssetToPackage";
    uint64_t v19 = 498;
    std::string __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddAssetToPackage(const std::string"
          " &, const std::string &)";
    char v21 = 0;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = *(void *)a2;
    }
    std::string v14 = a1 + 344;
    if (a1[367] < 0) {
      std::string v14 = (void *)*v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v18, (pxrInternal__aapl__pxrReserved__ *)"Failed to add file '%s' to the package at path '%s'.", v12, v13, v14);
  }
  return 0;
}

void sub_21703F12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessDependency(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*((void *)a1 + 5))
  {
    sub_216ABBA60((uint64_t *)&v10, a2);
    uint64_t v7 = *((void *)a1 + 5);
    if (!v7) {
      sub_21683A7CC();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 48))(__p);
    uint64_t v8 = v11;
    if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    unint64_t v9 = v13;
    if ((v13 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependenciesToPackage(a1, a2, (uint64_t)__p, (uint64_t)a4);
    }
    else
    {
      a4[1] = 0u;
      a4[2] = 0u;
      *a4 = 0u;
    }
    uint64_t v10 = (void **)&v14;
    sub_216782F20(&v10);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependenciesToPackage(a1, a2, a3, (uint64_t)a4);
  }
}

void sub_21703F2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217039FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependenciesToPackage(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8))
    {
      sub_216778F24((unsigned char *)a4, *(void **)a3, 0);
      goto LABEL_10;
    }
  }
  else if (!*(unsigned char *)(a3 + 23))
  {
    *(_OWORD *)a4 = *(_OWORD *)a3;
    *(void *)(a4 + 16) = *(void *)(a3 + 16);
LABEL_10:
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    sub_216812BD8((char *)(a4 + 24), *(long long **)(a3 + 24), *(long long **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
    return;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v8);
  uint64_t v10 = sub_216979288(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) & 1) != 0
    || (uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2),
        uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v11),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(RealPath)))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a4, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a3;
      *(void *)(a4 + 16) = *(void *)(a3 + 16);
    }
    goto LABEL_10;
  }
  char v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessAssetPath(a1, a2, a3, &v24, &v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    sub_216778F24(&__p, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v23;
  }
  if (v24)
  {
    unsigned __int8 v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t Identifier = (const void **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
    uint64_t v15 = sub_21678C2D8((uint64_t)a1 + 416, Identifier);
    if ((pxrInternal__aapl__pxrReserved__ *)((char *)a1 + 424) != (pxrInternal__aapl__pxrReserved__ *)v15)
    {
      pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)(v15 + 56), &v18);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&v18.__r_.__value_.__l.__data_, a3, v19);
      pxrInternal__aapl__pxrReserved__::TfNormPath(&v21, v19, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v21;
      *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (v20 < 0) {
        operator delete(v19[0]);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v21);
  uint64_t v16 = *(std::string **)(a3 + 24);
  uint64_t v17 = *(std::string **)(a3 + 32);
  if (v16 == v17)
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependencyToPackage((uint64_t)a1, a2, (std::string *)a3, (const void **)&v21.__r_.__value_.__l.__data_);
  }
  else
  {
    do
      pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependencyToPackage((uint64_t)a1, a2, v16++, (const void **)&v21.__r_.__value_.__l.__data_);
    while (v16 != v17);
  }
  sub_21703CBE8((unsigned char *)a4, (long long *)&v23, (long long **)(a3 + 24));
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_21703F5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessAssetPath(pxrInternal__aapl__pxrReserved__ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v8 = (std::string *)a1;
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  int IsContextDependentPath = pxrInternal__aapl__pxrReserved__::ArResolver::IsContextDependentPath((uint64_t)Resolver);
  float64x2_t v73 = a5;
  if (IsContextDependentPath) {
    goto LABEL_64;
  }
  std::string::size_type v12 = std::string::find((const std::string *)a3, 58, 0);
  if (v12 != -1)
  {
    unsigned __int8 v13 = std::string::basic_string(&__dst, (const std::string *)a3, 0, v12, (std::allocator<char> *)&__s1);
    RegisteredURISchemes = pxrInternal__aapl__pxrReserved__::ArGetRegisteredURISchemes((pxrInternal__aapl__pxrReserved__ *)v13);
    uint64_t v15 = (const void **)*RegisteredURISchemes;
    uint64_t v16 = (const void **)RegisteredURISchemes[1];
    LOBYTE(__s1) = 0;
    uint64_t v17 = sub_216BCDB44(v15, v16, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&__p);
    BOOL v18 = v16 != v17 && !sub_21677B108((uint64_t)&__p, (const void **)&__dst.__r_.__value_.__l.__data_, v17);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v18) {
        goto LABEL_64;
      }
    }
    else if (v18)
    {
      goto LABEL_64;
    }
  }
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(v19);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  size_t v22 = v82;
  unsigned __int8 v23 = v82;
  if ((v82 & 0x80u) != 0) {
    size_t v22 = __n;
  }
  if (size == v22)
  {
    if ((v82 & 0x80u) == 0) {
      p_s1 = (unsigned __int8 *)&__s1;
    }
    else {
      p_s1 = (unsigned __int8 *)__s1;
    }
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__dst.__r_.__value_.__l.__data_, p_s1, __dst.__r_.__value_.__l.__size_)) {
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
    {
      p_dst = &__dst;
      while (p_dst->__r_.__value_.__s.__data_[0] == *p_s1)
      {
        p_dst = (std::string *)((char *)p_dst + 1);
        ++p_s1;
        if (!--v20) {
          goto LABEL_60;
        }
      }
      goto LABEL_28;
    }
LABEL_60:
    if ((v23 & 0x80) != 0) {
      operator delete(__s1);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
LABEL_64:
    if (a4) {
      *a4 = 0;
    }
    if (*(char *)(a3 + 23) < 0)
    {
      sub_216778F24(&__dst, *(void **)a3, *(void *)(a3 + 8));
      if (!IsContextDependentPath) {
        goto LABEL_86;
      }
    }
    else
    {
      std::string __dst = *(std::string *)a3;
      if (!IsContextDependentPath) {
        goto LABEL_86;
      }
    }
    sub_216ABBA60((uint64_t *)&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)&__p, a3, (uint64_t)&__s1);
    std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)v35 + 8))(v35);
    }
    pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(&__p, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string __p = v78;
    }
    std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
    }
    if (v36) {
      p_p = &__p;
    }
    else {
      p_p = (const std::string *)&__s1;
    }
    std::string::operator=(&__dst, p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((char)v82 < 0) {
      operator delete(__s1);
    }
LABEL_86:
    uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v38);
    pxrInternal__aapl__pxrReserved__::TfNormPath(&__s1, RealPath, 0);
    pxrInternal__aapl__pxrReserved__::TfNormPath(&__p, &__dst, 0);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string __dst = __p;
    pxrInternal__aapl__pxrReserved__::TfNormPath(&__p, &v8[2], 0);
    pxrInternal__aapl__pxrReserved__::TfNormPath(&v78, &v8[3], 0);
    uint64_t v40 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v41 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
    }
    int v43 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
    }
    if (v42 == v44)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v45 = &__p;
      }
      else {
        uint64_t v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__dst.__r_.__value_.__l.__data_, v45, __dst.__r_.__value_.__l.__size_)) {
          goto LABEL_120;
        }
      }
      else
      {
        if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
          goto LABEL_120;
        }
        char v46 = &__dst;
        uint64_t v47 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        while (v46->__r_.__value_.__s.__data_[0] == v45->__r_.__value_.__s.__data_[0])
        {
          char v46 = (std::string *)((char *)v46 + 1);
          uint64_t v45 = (std::string *)((char *)v45 + 1);
          if (!--v47) {
            goto LABEL_120;
          }
        }
      }
    }
    std::string::size_type v48 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v48 = v78.__r_.__value_.__l.__size_;
    }
    if (v42 != v48)
    {
      BOOL v58 = 0;
      goto LABEL_123;
    }
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &v78;
    }
    else {
      uint64_t v49 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v40 & 0x80) != 0)
    {
      BOOL v58 = memcmp(__dst.__r_.__value_.__l.__data_, v49, v41) == 0;
      goto LABEL_123;
    }
    if (v40)
    {
      uint64_t v50 = v40 - 1;
      uint64_t v51 = &__dst;
      do
      {
        int v53 = v51->__r_.__value_.__s.__data_[0];
        uint64_t v51 = (std::string *)((char *)v51 + 1);
        int v52 = v53;
        int v55 = v49->__r_.__value_.__s.__data_[0];
        uint64_t v49 = (std::string *)((char *)v49 + 1);
        int v54 = v55;
        BOOL v57 = v50-- != 0;
        BOOL v58 = v52 == v54;
      }
      while (v52 == v54 && v57);
LABEL_123:
      std::string v59 = v8;
      uint64_t v60 = v82;
      size_t v61 = __n;
      if ((v82 & 0x80u) == 0) {
        size_t v62 = v82;
      }
      else {
        size_t v62 = __n;
      }
      if (v42 == v62)
      {
        if ((v82 & 0x80u) == 0) {
          uint64_t v63 = (unsigned __int8 *)&__s1;
        }
        else {
          uint64_t v63 = (unsigned __int8 *)__s1;
        }
        if ((v40 & 0x80) == 0)
        {
          if (v40)
          {
            std::string v64 = &__dst;
            uint64_t v65 = v40;
            while (v64->__r_.__value_.__s.__data_[0] == *v63)
            {
              std::string v64 = (std::string *)((char *)v64 + 1);
              ++v63;
              if (!--v65) {
                goto LABEL_149;
              }
            }
            goto LABEL_137;
          }
LABEL_149:
          if (!v58) {
            goto LABEL_167;
          }
          goto LABEL_155;
        }
        if (!memcmp(__dst.__r_.__value_.__l.__data_, v63, v41)) {
          goto LABEL_149;
        }
      }
LABEL_137:
      char v66 = !v58;
      if (v62 != v44) {
        char v66 = 1;
      }
      if (v66) {
        goto LABEL_152;
      }
      if (v43 >= 0) {
        char v67 = &__p;
      }
      else {
        char v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v60 & 0x80) != 0)
      {
        if (memcmp(__s1, v67, v61)) {
          goto LABEL_152;
        }
      }
      else if (v60)
      {
        char v68 = &__s1;
        while (*(unsigned __int8 *)v68 == v67->__r_.__value_.__s.__data_[0])
        {
          char v68 = (void **)((char *)v68 + 1);
          char v67 = (std::string *)((char *)v67 + 1);
          if (!--v60) {
            goto LABEL_155;
          }
        }
LABEL_152:
        if ((v40 & 0x80) != 0)
        {
          if (v41 > 1)
          {
            float64x2_t v69 = (std::string::value_type *)(__dst.__r_.__value_.__r.__words[0] + 1);
LABEL_160:
            if (*v69 == 58) {
              std::string::erase(&__dst, 0, 2uLL);
            }
          }
        }
        else if (v40 > 1)
        {
          float64x2_t v69 = &__dst.__r_.__value_.__s.__data_[1];
          goto LABEL_160;
        }
        pxrInternal__aapl__pxrReserved__::TfStringTrimLeft("/", &__dst, &v77);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        std::string __dst = v77;
        pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap(&v59[19].__r_.__value_.__l.__size_, (uint64_t)&__dst, v73);
        goto LABEL_168;
      }
LABEL_155:
      p_std::string::size_type size = (void **)&v59[15].__r_.__value_.__l.__size_;
      if (v59[16].__r_.__value_.__s.__data_[7] < 0)
      {
        unint64_t v71 = v59[15].__r_.__value_.__r.__words[2];
        if (v71)
        {
          sub_216778F24(v73, *p_size, v71);
          goto LABEL_168;
        }
      }
      else if (v59[16].__r_.__value_.__s.__data_[7])
      {
        *(_OWORD *)&v73->__r_.__value_.__l.__data_ = *(_OWORD *)p_size;
        v73->__r_.__value_.__r.__words[2] = v59[16].__r_.__value_.__r.__words[0];
        goto LABEL_168;
      }
LABEL_167:
      pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__dst, v73);
LABEL_168:
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      goto LABEL_170;
    }
LABEL_120:
    BOOL v58 = 1;
    goto LABEL_123;
  }
LABEL_28:
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
  }
  if (!v26) {
    goto LABEL_51;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v77);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v78, &v77, 0);
  pxrInternal__aapl__pxrReserved__::TfGetPathName(v8 + 2, &v74);
  char v72 = v8;
  pxrInternal__aapl__pxrReserved__::TfNormPath(v75, &v74, 0);
  int v27 = v76;
  uint64_t v28 = (void *)v75[0];
  if (v76 >= 0) {
    uint64_t v29 = (const char *)v75;
  }
  else {
    uint64_t v29 = (const char *)v75[0];
  }
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v78.__r_.__value_.__l.__size_;
  }
  size_t v31 = strlen(v29);
  if (v30 >= v31)
  {
    size_t v33 = v31;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v34 = &v78;
    }
    else {
      int v34 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    BOOL v32 = strncmp((const char *)v34, v29, v33) == 0;
  }
  else
  {
    BOOL v32 = 0;
  }
  uint64_t v8 = v72;
  a5 = v73;
  if (v27 < 0) {
    operator delete(v28);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v77.__r_.__value_.__l.__data_);
    if (v32) {
      goto LABEL_51;
    }
    goto LABEL_57;
  }
  if (!v32)
  {
LABEL_57:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v23 = v82;
    goto LABEL_60;
  }
LABEL_51:
  if (a4) {
    *a4 = 1;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(a5, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a5->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
LABEL_170:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v82 < 0) {
    operator delete(__s1);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21703FE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v43 - 89) < 0) {
    operator delete(*(void **)(v43 - 112));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_AddDependencyToPackage(uint64_t a1, uint64_t *a2, std::string *a3, const void **a4)
{
  sub_216ABBA60((uint64_t *)__p, a2);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)__p, (uint64_t)a3, (uint64_t)&v15);
  uint64_t v7 = __p[1];
  if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*(void *)v7 + 8))(v7);
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(a3, &v13);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a4, (uint64_t)&v13, __p);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&__str, __p, 0);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile((uint64_t)&v15))
  {
    __p[0] = &v15;
    uint64_t v8 = sub_21677B174((uint64_t **)(a1 + 416), (const void **)&v15, (uint64_t)&unk_2174BFD90, (long long **)__p);
    std::string::operator=((std::string *)(v8 + 7), &__str);
  }
  else
  {
    sub_216D46128((char *)__p, &v15, (long long *)&__str);
    sub_217040170((uint64_t *)(a1 + 440), (long long *)__p);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete((void *)v15);
  }
}

void sub_2170400E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_21682E578((uint64_t)&a10);
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217040170(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  int v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v20[4] = v4;
    if (v14) {
      long long v15 = (char *)sub_2168073F4((uint64_t)v4, v14);
    }
    else {
      long long v15 = 0;
    }
    char v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v20[2] = v16 + 48;
    sub_2168301F4(a1, v20);
    uint64_t v10 = a1[1];
    sub_2168303B0(v20);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

void sub_2170402CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168303B0((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_2170402E0(int a1)
{
  uint64_t v2 = sub_2170408AC();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_2170408AC();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), "USDUTILS_CREATE_PACKAGE");
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void *sub_217040340@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v4 = (uint64_t *)(a1 + 8);
  if (!v5
    || ((int v6 = *(unsigned __int8 *)(sub_216850B68(v4) + 14), v7 = *(const void **)a1, v6) ? (v8 = v7 == 0) : (v8 = 1),
        v8))
  {
    long long v9 = 0;
  }
  else
  {
  }

  return sub_217040928(a2, (uint64_t)v9);
}

uint64_t (*sub_2170403E8(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_217040A0C;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_RemapAssetPath(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, std::string *a4@<X8>)
{
  if (a3)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(a4, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdUtils_DirectoryRemapper::Remap((void *)(a1 + 464), a2, a4);
  }
}

void *sub_217040480(void *__dst, long long *a2, char *__s)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  sub_216779094(__dst + 3, __s);
  return __dst;
}

void sub_2170404E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170404FC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    long long v5 = a2;
    do
    {
      sub_216A38350(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_217040564(_Unwind_Exception *a1)
{
  sub_216850298(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_217040578(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_216891D24(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168513F8(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_2170407FC(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_216892558((uint64_t)v25, 0);
  return i;
}

void sub_2170407E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216892558((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_2170407FC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v8 + 40) = result;
  *((void *)v8 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_217040894(_Unwind_Exception *a1)
{
  sub_216892558(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2170408AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798D090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798D090))
  {
    uint64_t v1 = operator new(4uLL);
    *uint64_t v1 = 0;
    qword_26798D088 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798D090);
  }
  return qword_26798D088;
}

void sub_217040910(_Unwind_Exception *a1)
{
}

void *sub_217040928(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    unint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2170409F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217040A0C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCopyLayerMetadata(uint64_t *a1, uint64_t *a2, int a3, char a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v8 = sub_21697CF14(a1);
  if (v9 & 1 | (unint64_t)v8 && (unint64_t v10 = sub_21697CF14(a2), v11 & 1 | (unint64_t)v10)
    || (v56.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/authoring.cpp",
        v56.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCopyLayerMetadata",
        v56.__r_.__value_.__r.__words[2] = 48,
        std::string __p = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCopyLayerMetadata(const SdfLayerHandle &, const SdfLayerHan"
              "dle &, BOOL, BOOL)",
        char v58 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v56, "source && destination", 0),
        result))
  {
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v12, &v53);
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v13, &v52);
    unint64_t v14 = sub_216A663FC(&v53);
    pxrInternal__aapl__pxrReserved__::SdfSpec::ListInfoKeys(v14, (uint64_t)&v50);
    unint64_t v15 = v51;
    if (!a3 || (float v16 = v50, v50 == v51))
    {
LABEL_19:
      float v16 = v15;
    }
    else
    {
      while (1)
      {
        uint64_t v17 = *(void *)v16;
        if ((*(void *)v16 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v17 &= 0xFFFFFFFFFFFFFFF8;
        }
        BOOL v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v18) {
          BOOL v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v19 = (atomic_uint *)(v17 & 0xFFFFFFFFFFFFFFF8);
        if ((v17 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 45) & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v21 = 1;
        }
        else
        {
          unint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v20) {
            unint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          BOOL v21 = v19 == (atomic_uint *)(*((void *)v20 + 46) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
        }
        if (v21) {
          break;
        }
        float v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
        if (v16 == v15) {
          goto LABEL_19;
        }
      }
      if (v16 != v15)
      {
        for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
              i != v15;
              uint64_t i = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)i + 8))
        {
          uint64_t v44 = *(void *)i;
          if ((*(void *)i & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v44 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v45) {
            uint64_t v45 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          char v46 = (atomic_uint *)(v44 & 0xFFFFFFFFFFFFFFF8);
          if ((v44 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v45 + 45) & 0xFFFFFFFFFFFFFFF8))
          {
            BOOL v48 = 1;
          }
          else
          {
            uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v47) {
              uint64_t v47 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            BOOL v48 = v46 == (atomic_uint *)(*((void *)v47 + 46) & 0xFFFFFFFFFFFFFFF8);
          }
          if ((v44 & 7) != 0) {
            atomic_fetch_add_explicit(v46, 0xFFFFFFFE, memory_order_release);
          }
          if (!v48)
          {
            if (i != v16)
            {
              if ((*(void *)v16 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              *(void *)float v16 = *(void *)i;
              *(void *)uint64_t i = 0;
            }
            float v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v16 + 8);
          }
        }
      }
    }
    for (j = v50; j != v16; j = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)j + 8))
    {
      unint64_t v23 = sub_216A663FC(&v52);
      char v24 = sub_216A663FC(&v53);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v24, j, &v56);
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v23, j, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
      sub_2168EE084((uint64_t)&v56);
    }
    if (a4)
    {
      std::string::size_type v25 = v50;
      std::string::size_type v26 = v51;
      int v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27) {
        int v27 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if (v25 != v26)
      {
        while ((*(void *)v25 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v27 + 3) & 0xFFFFFFFFFFFFFFF8))
        {
          std::string::size_type v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v25 + 8);
          if (v25 == v26)
          {
            std::string::size_type v25 = v26;
            break;
          }
        }
      }
      uint64_t v29 = v50;
      uint64_t v28 = v51;
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v30) {
        uint64_t v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if (v29 == v28)
      {
LABEL_35:
        uint64_t v29 = v28;
      }
      else
      {
        while ((*(void *)v29 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v30 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v29 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v29 + 8);
          if (v29 == v28) {
            goto LABEL_35;
          }
        }
      }
      size_t v31 = v51;
      if (v25 == v28 || v29 == v51)
      {
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v56);
        unint64_t v49 = 0;
        pxrInternal__aapl__pxrReserved__::UsdStage::GetColorConfigFallbacks(&v56, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v49, v32);
        if (v25 == v28)
        {
          std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v56.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            int v34 = sub_216A663FC(&v52);
            std::string::size_type v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v35) {
              std::string::size_type v35 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            int v55 = &off_26C755A30;
            sub_2169B3DA8(&v54, (long long *)&v56);
            pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v34, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v35 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v54);
            sub_2168EE084((uint64_t)&v54);
          }
        }
        unint64_t v36 = v49;
        if (v29 == v31 && v49)
        {
          BOOL v37 = sub_216A663FC(&v52);
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v38) {
            uint64_t v38 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          unint64_t v54 = v49;
          int v55 = (std::type_info **)((char *)&off_26C750C70 + 1);
          if ((v49 & 7) != 0)
          {
            unint64_t v39 = v49 & 0xFFFFFFFFFFFFFFF8;
            if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)unint64_t v54 = v39; {
          }
            }
          pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v37, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v38 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v54);
          sub_2168EE084((uint64_t)&v54);
          unint64_t v36 = v49;
        }
        if ((v36 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v59 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
      }
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    sub_216889A04((void ***)&v56);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v40, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v52);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v41, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v53);
    return 1;
  }
  return result;
}

void sub_217040F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a11;
  sub_216889A04(&a19);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a14);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(unsigned int **a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, void *a7, double a8)
{
  uint64_t v16 = *(void *)a3;
  uint64_t v17 = *(_DWORD **)(a3 + 8);
  if (v17 != *(_DWORD **)a3)
  {
    do
    {
      v17 -= 2;
      sub_216981128(a3 + 16, v17);
    }
    while (v17 != (_DWORD *)v16);
  }
  *(void *)(a3 + 8) = v16;
  uint64_t v18 = *(void *)a4;
  unint64_t v19 = *(_DWORD **)(a4 + 8);
  if (v19 != *(_DWORD **)a4)
  {
    do
    {
      v19 -= 2;
      sub_216981128(a4 + 16, v19);
    }
    while (v19 != (_DWORD *)v18);
  }
  *(void *)(a4 + 8) = v18;
  if (a8 <= 0.0 || a8 > 1.0)
  {
    v93 = (void **)"usdUtils/authoring.cpp";
    v94 = "UsdUtilsComputeCollectionIncludesAndExcludes";
    uint64_t v95 = 260;
    v96 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(const SdfPathSet &, const "
          "UsdStageWeakPtr &, SdfPathVector *, SdfPathVector *, double, const unsigned int, const unsigned int, const Usd"
          "UtilsPathHashSet &)";
    char v97 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v93, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid minInclusionRatio value: %f. Clamping value to range (0, 1).", a8);
    if (a8 <= 1.0) {
      double v21 = a8;
    }
    else {
      double v21 = 1.0;
    }
    if (a8 >= 0.0) {
      a8 = v21;
    }
    else {
      a8 = 0.0;
    }
  }
  unint64_t v22 = (unint64_t)a1[2];
  if (!v22) {
    return 1;
  }
  if (v22 < a6)
  {
    sub_217041DAC((uint64_t *)a3, *(int **)(a3 + 8), *a1, a1 + 1);
    return 1;
  }
  char v24 = *a1;
  sub_216981010(&v76, *a1 + 7);
  sub_21698105C(&v77, v24 + 8);
  std::string::size_type v26 = (unsigned int *)(a1 + 1);
  std::string::size_type v25 = *a1;
  if (*a1 != (unsigned int *)(a1 + 1))
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v25 + 7), (int *)&v93);
      sub_21697DE94(&v76, (int *)&v93);
      sub_21697DEEC(&v77, (int *)&v93 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
      sub_21697C414(&v93);
      int v27 = (unsigned int *)*((void *)v25 + 1);
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          int v27 = *(unsigned int **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (unsigned int *)*((void *)v25 + 2);
          BOOL v29 = *(void *)v28 == (void)v25;
          std::string::size_type v25 = v28;
        }
        while (!v29);
      }
      std::string::size_type v25 = v28;
    }
    while (v28 != v26);
  }
  uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v76, (uint64_t)v71);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v71, v31);
  unsigned int v66 = IsDefined;
  if ((IsDefined & 1) == 0)
  {
    v93 = (void **)"usdUtils/authoring.cpp";
    v94 = "UsdUtilsComputeCollectionIncludesAndExcludes";
    uint64_t v95 = 311;
    v96 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(const SdfPathSet &, const "
          "UsdStageWeakPtr &, SdfPathVector *, SdfPathVector *, double, const unsigned int, const unsigned int, const Usd"
          "UtilsPathHashSet &)";
    char v97 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v93, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not get the prim at common-prefix path <%s>.", Text);
    goto LABEL_97;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  int v70 = 1065353216;
  size_t v33 = *a1;
  if (*a1 != v26)
  {
    do
    {
      uint64_t IsDefined = (uint64_t)sub_216BE0D70((uint64_t)&v68, v33 + 7, v33 + 7);
      int v34 = (unsigned int *)*((void *)v33 + 1);
      if (v34)
      {
        do
        {
          std::string::size_type v35 = v34;
          int v34 = *(unsigned int **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          std::string::size_type v35 = (unsigned int *)*((void *)v33 + 2);
          BOOL v29 = *(void *)v35 == (void)v33;
          size_t v33 = v35;
        }
        while (!v29);
      }
      size_t v33 = v35;
    }
    while (v35 != v26);
  }
  v99 = 0;
  uint64_t v100 = 0;
  v98 = (uint64_t *)&v99;
  UsdPrimAllPrimsPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate((pxrInternal__aapl__pxrReserved__ *)IsDefined);
  uint64_t v37 = UsdPrimAllPrimsPredicate[1].i64[0];
  v38.i64[0] = -8193;
  v38.i64[0] = vandq_s8(*UsdPrimAllPrimsPredicate, v38).u64[0];
  v38.i64[1] = vorrq_s8(*UsdPrimAllPrimsPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  int8x16_t v88 = v38;
  uint64_t v89 = v37;
  unint64_t v39 = (uint64_t *)sub_216D3B730((uint64_t)&v93, (uint64_t)v71, &v88);
  unsigned int v67 = a5;
  sub_216D3ADBC(v39, (uint64_t)&v88);
  while (1)
  {
    *(void *)&long long v85 = v94;
    *((void *)&v85 + 1) = &v93;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v86);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v86 + 1);
    LODWORD(v87) = 0;
    WORD2(v87) = 0;
    if (*(_OWORD *)&v88 == v85)
    {
      BOOL v40 = 1;
      if (v89 == v86 && !v90 && !v91) {
        BOOL v40 = v92 != 0;
      }
    }
    else
    {
      BOOL v40 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
    if (!v40) {
      break;
    }
    sub_216D3B00C((uint64_t)&v88, (uint64_t)&v85);
    sub_216D0162C((uint64_t)&v85, (int *)&v80);
    if ((v87 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
    if (*((void *)&v85 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v85 + 1));
    }
    if (!sub_216A9DB14(a7, (unsigned int *)&v80))
    {
      if (sub_216A9DB14(&v68, (unsigned int *)&v80))
      {
        sub_216981010(&v85, &v80);
        sub_21698105C((_DWORD *)&v85 + 1, (_DWORD *)&v80 + 1);
        while (1)
        {
          sub_216D0162C((uint64_t)v71, (int *)v101);
          std::string::size_type v41 = (_DWORD *)v85;
          std::string::size_type v42 = *(_DWORD **)v101;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101[1]);
          sub_21697C414(v101);
          if (v41 == v42) {
            break;
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85, v101);
          sub_21697DE94((int *)&v85, (int *)v101);
          sub_21697DEEC((int *)&v85 + 1, (int *)&v101[1]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101[1]);
          sub_21697C414(v101);
          sub_216AF1BE4(&v98, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v88);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
        sub_21697C414(&v85);
      }
      else
      {
        sub_216A5CF30(&v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v80, &v80);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
    sub_21697C414(&v80);
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v88);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
  sub_21697C414(&v89);
  sub_217042540(&v83, v98, &v99);
  pxrInternal__aapl__pxrReserved__::SdfPath::RemoveDescendentPaths((uint64_t)&v83);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
  sub_21697C414(&v95);
  sub_216981EE8((uint64_t)&v98, v99);
  sub_216D0162C((uint64_t)v71, (int *)&v93);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v82);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
  uint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)sub_21697C414(&v93);
  v99 = 0;
  uint64_t v100 = 0;
  v98 = (uint64_t *)&v99;
  char v46 = v83;
  for (uint64_t i = v84; v46 != i; v46 += 2)
  {
    sub_216981010(&v93, v46);
    sub_21698105C((_DWORD *)&v93 + 1, v46 + 1);
    while (v93 != v82)
    {
      v88.i64[0] = (uint64_t)&v93;
      uint64_t v47 = (uint64_t *)sub_216CF7158(&v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, (uint64_t)&unk_2174BFD90, &v88);
      BOOL v48 = v47;
      unint64_t v49 = v47[6];
      if (v49 >= v47[7])
      {
        uint64_t v50 = sub_216981B30(v47 + 5, v46);
      }
      else
      {
        sub_216981010((_DWORD *)v47[6], v46);
        sub_21698105C((_DWORD *)(v49 + 4), v46 + 1);
        uint64_t v50 = v49 + 8;
      }
      v48[6] = v50;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v88);
      sub_21697DE94((int *)&v93, v88.i32);
      sub_21697DEEC((int *)&v93 + 1, &v88.i32[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v88.i32[1]);
      sub_21697C414(&v88);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    uint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)sub_21697C414(&v93);
  }
  v81[0] = 0;
  v81[1] = 0;
  uint64_t v80 = (uint64_t *)v81;
  for (j = (uint64_t *)v69; j; j = (uint64_t *)*j)
  {
    sub_216981010(&v93, (_DWORD *)j + 4);
    sub_21698105C((_DWORD *)&v93 + 1, (_DWORD *)j + 5);
    while (v93 != v82)
    {
      v88.i64[0] = (uint64_t)&v93;
      int v52 = sub_217042718(&v80, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, (uint64_t)&unk_2174BFD90, &v88);
      ++*((void *)v52 + 5);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v88);
      sub_21697DE94((int *)&v93, v88.i32);
      sub_21697DEEC((int *)&v93 + 1, &v88.i32[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v88.i32[1]);
      sub_21697C414(&v88);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    uint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)sub_21697C414(&v93);
  }
  int v53 = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v44);
  uint64_t v54 = v53[1].i64[0];
  v55.i64[0] = -8193;
  v55.i64[0] = vandq_s8(*v53, v55).u64[0];
  v55.i64[1] = vorrq_s8(*v53, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
  int8x16_t v88 = v55;
  uint64_t v89 = v54;
  std::string v56 = (uint64_t *)sub_216D3B730((uint64_t)&v93, (uint64_t)v71, &v88);
  sub_216D3ADBC(v56, (uint64_t)&v88);
  while (1)
  {
    *(void *)&long long v85 = v94;
    *((void *)&v85 + 1) = &v93;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v86);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v86 + 1);
    LODWORD(v87) = 0;
    WORD2(v87) = 0;
    if (*(_OWORD *)&v88 == v85)
    {
      BOOL v57 = 1;
      if (v89 == v86 && !v90 && !v91) {
        BOOL v57 = v92 != 0;
      }
    }
    else
    {
      BOOL v57 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
    if (!v57) {
      break;
    }
    sub_216D3AE90((uint64_t)&v88, (uint64_t)&v85);
    sub_216D0162C((uint64_t)&v85, (int *)v101);
    char v58 = sub_216A9DB14(a7, v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101[1]);
    sub_21697C414(v101);
    if (v58) {
      goto LABEL_91;
    }
    sub_216D0162C((uint64_t)&v85, (int *)v101);
    char v59 = sub_216CF7EAC((uint64_t)&v80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101[1]);
    sub_21697C414(v101);
    if (v81 == v59) {
      goto LABEL_90;
    }
    unint64_t v60 = v59[5];
    if (!v60) {
      goto LABEL_90;
    }
    sub_216D0162C((uint64_t)&v85, (int *)v101);
    size_t v61 = sub_216CF7EAC((uint64_t)&v98, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v101);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101[1]);
    sub_21697C414(v101);
    if (&v99 == v61) {
      unint64_t v62 = 0;
    }
    else {
      unint64_t v62 = (uint64_t)(v61[6] - v61[5]) >> 3;
    }
    if (v62 <= v67 && (double)v60 / (double)(v62 + v60) >= a8)
    {
      sub_216D0162C((uint64_t)&v85, (int *)v101);
      unint64_t v63 = *(void *)(a3 + 8);
      if (v63 >= *(void *)(a3 + 16))
      {
        uint64_t v64 = sub_216AE5CE4((uint64_t *)a3, v101);
      }
      else
      {
        sub_21697D878(*(_DWORD **)(a3 + 8), v101);
        sub_21697D8B4((_DWORD *)(v63 + 4), &v101[1]);
        uint64_t v64 = v63 + 8;
      }
      *(void *)(a3 + 8) = v64;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v101[1]);
      sub_21697C414(v101);
      if (v62)
      {
        sub_216D0162C((uint64_t)&v85, &v78);
        *(void *)v101 = &v78;
        uint64_t v65 = sub_217042834(&v98, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v78, (uint64_t)&unk_2174BFD90, (_DWORD **)v101);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v79);
        sub_21697C414(&v78);
        sub_2169DC954((uint64_t *)a4, *(int **)(a4 + 8), *((_DWORD **)v65 + 5), *((_DWORD **)v65 + 6), (uint64_t)(*((void *)v65 + 6) - *((void *)v65 + 5)) >> 3);
      }
LABEL_90:
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v88);
    }
LABEL_91:
    if ((v87 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
    if (*((void *)&v85 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v85 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v88);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
  sub_21697C414(&v89);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
  sub_21697C414(&v95);
  sub_2170428FC((uint64_t)&v80, v81[0]);
  sub_216E0BCC0((uint64_t)&v98, v99);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
  sub_21697C414(&v82);
  v93 = (void **)&v83;
  sub_216981168(&v93);
  sub_216BE0588((uint64_t)&v68);
LABEL_97:
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
  sub_21697C414(&v73);
  if (v72) {
    sub_216D16E0C(v72);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v77);
  sub_21697C414(&v76);
  return v66;
}

void sub_217041B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,char a30,void *a31,uint64_t a32,int a33,int a34,char a35)
{
  sub_216D3AF04(v35 - 200);
  sub_2170428FC((uint64_t)&a30, a31);
  sub_216E0BCC0(v35 - 144, *(void **)(v35 - 136));
  sub_21697B754(&a33);
  *(void *)(v35 - 200) = &a35;
  sub_216981168((void ***)(v35 - 200));
  sub_216BE0588((uint64_t)&a19);
  sub_216D16AD8((uint64_t)&a24);
  sub_21697B754(&a28);
  _Unwind_Resume(a1);
}

int *sub_217041DAC(uint64_t *a1, int *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    long long v5 = a3;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      long long v5 = v7;
    }
    while (v7 != a4);
  }
  return sub_217042958(a1, a2, a3, a4, v4);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsAuthorCollection(pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X2>, uint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply(this, a1, a5);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(a5, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13, a3);
  if (*(void *)a4 != *(void *)(a4 + 8))
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(a5, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v8);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v8, (pxrInternal__aapl__pxrReserved__::SdfPath **)a4);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
}

void sub_217041EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_216D33F64((uint64_t)&a9);
  sub_216D33F64((uint64_t)&a13);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI(v13);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsCreateCollections@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, void *result@<X0>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  double v46 = a6;
  int v44 = a4;
  int v45 = a3;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  if (*result != result[1])
  {
    uint64_t v8 = result;
    if (a6 <= 0.0 || a6 > 1.0)
    {
      *(void *)&long long v48 = "usdUtils/authoring.cpp";
      *((void *)&v48 + 1) = "UsdUtilsCreateCollections";
      *(void *)&long long v49 = 367;
      *((void *)&v49 + 1) = "std::vector<UsdCollectionAPI> pxrInternal__aapl__pxrReserved__::UsdUtilsCreateCollections("
                              "const std::vector<std::pair<TfToken, SdfPathSet>> &, const UsdPrim &, double, const unsign"
                              "ed int, const unsigned int)";
      LOBYTE(v50) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid minInclusionRatio value: %f. Clamping value to range (0, 1).", a6);
      double v9 = 1.0;
      if (v46 <= 1.0) {
        double v9 = v46;
      }
      double v10 = 0.0;
      if (v46 >= 0.0) {
        double v10 = v9;
      }
      double v46 = v10;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, this, &v42);
    unint64_t v11 = (uint64_t)(v8[1] - *v8) >> 5;
    long long v48 = 0uLL;
    long long v49 = 0uLL;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    int v34 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    memset(v40, 0, sizeof(v40));
    sub_217042C40(v41, v11, (_DWORD **)&v48);
    uint64_t v47 = (tbb::task_group_context **)&v49 + 1;
    sub_216981168((void ***)&v47);
    uint64_t v47 = (tbb::task_group_context **)&v48;
    sub_216981168((void ***)&v47);
    uint64_t v47 = v40;
    sub_216981168((void ***)&v47);
    v40[0] = (tbb::task_group_context *)&v34;
    sub_216981168((void ***)v40);
    uint64_t v14 = *v8;
    uint64_t v13 = v8[1];
    int v34 = v8;
    uint64_t v35 = v41;
    unint64_t v36 = &v42;
    uint64_t v37 = &v46;
    int8x16_t v38 = (unsigned int *)&v45;
    unint64_t v39 = (unsigned int *)&v44;
    if (v13 != v14)
    {
      uint64_t v18 = (v13 - v14) >> 5;
      if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v12))
      {
        LODWORD(v48) = 0;
        uint64_t v52 = 65539;
        int v53 = 55;
        tbb::task_group_context::init((uint64_t)&v48, v15, v16, v17);
        v40[0] = (tbb::task_group_context *)&v48;
        uint64_t v19 = tbb::internal::allocate_root_with_context_proxy::allocate(v40, 0x38uLL);
        *(unsigned char *)(v19 - 11) = 1;
        *(void *)uint64_t v19 = &unk_26C7706E8;
        *(void *)(v19 + 8) = v18;
        *(_OWORD *)(v19 + 16) = xmmword_217411D30;
        *(void *)(v19 + 32) = &v34;
        unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v19);
        *(_DWORD *)(v19 + 48) = 0;
        *(unsigned char *)(v19 + 52) = 5;
        *(void *)(v19 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v19 - 40) + 16))(*(void *)(v19 - 40), v19, v19 - 8);
        tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v48);
      }
      else
      {
        uint64_t v21 = 24;
        uint64_t v22 = 8;
        do
        {
          unint64_t v23 = (unsigned int **)(*v34 + v22);
          uint64_t v24 = *v35 + v21;
          double v25 = *v37;
          unsigned int v26 = *v38;
          unsigned int v27 = *v39;
          long long v48 = 0u;
          long long v49 = 0u;
          LODWORD(v50) = 1065353216;
          pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(v23, v36, v24 - 24, v24, v26, v27, &v48, v25);
          sub_216BE0588((uint64_t)&v48);
          v21 += 48;
          v22 += 32;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t v28 = *v8;
    if (v8[1] != *v8)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::UsdUtilsAuthorCollection((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v28 + v30), this, (pxrInternal__aapl__pxrReserved__::SdfPath **)(v41[0] + v29), v41[0] + v29 + 24, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v48);
        unint64_t v32 = a5[1];
        if (v32 >= a5[2])
        {
          uint64_t v33 = sub_217043330(a5, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v48);
        }
        else
        {
          sub_216D377FC(a5 + 16, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a5[1], (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v48);
          uint64_t v33 = v32 + 32;
          a5[1] = v32 + 32;
        }
        a5[1] = v33;
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v48);
        ++v31;
        uint64_t v28 = *v8;
        v30 += 32;
        v29 += 48;
      }
      while (v31 < (uint64_t)(v8[1] - *v8) >> 5);
    }
    *(void *)&long long v48 = v41;
    sub_217042D6C((void ***)&v48);
    uint64_t result = v43;
    if (v43)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v43 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
  }
  return result;
}

void sub_217042310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a16, v27);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a27);
  a10 = &a19;
  sub_217042D6C((void ***)&a10);
  uint64_t v29 = a23;
  if (a23)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  sub_216D37524((void ***)&a10);
  _Unwind_Resume(a1);
}

void **sub_217042418(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_216981168(&v3);
  uint64_t v3 = a1;
  sub_216981168(&v3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetDirtyLayers@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  long long v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v5, a2, v6, a3);
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    while (1)
    {
      double v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v7);
      if (!pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v9)) {
        break;
      }
      v7 += 2;
      if (v7 == v8)
      {
        uint64_t v7 = v8;
        return sub_216DF7F40((uint64_t)a3, (uint64_t)v7, (uint64_t)a3[1]);
      }
    }
    if (v7 != v8)
    {
      for (uint64_t i = v7 + 2; i != v8; i += 2)
      {
        unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(i);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v11))
        {
          sub_21697D0EC((uint64_t)v7, (uint64_t)i);
          v7 += 2;
        }
      }
    }
  }
  return sub_216DF7F40((uint64_t)a3, (uint64_t)v7, (uint64_t)a3[1]);
}

void sub_217042520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216850BF4((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_217042540(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    long long v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          long long v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      long long v5 = v7;
    }
    while (v7 != a3);
  }
  sub_2170425C8(a1, a2, a3, v4);
  return a1;
}

void *sub_2170425C8(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = sub_217042650((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217042630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_217042650(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  unint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216981010(v4, (_DWORD *)v6 + 7);
      sub_21698105C(v4 + 1, (_DWORD *)v6 + 8);
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v14 + 2;
      v14 += 2;
      uint64_t v6 = v8;
    }
    while (v8 != a3);
  }
  char v12 = 1;
  sub_21698109C((uint64_t)v11);
  return v4;
}

_DWORD *sub_217042718(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)sub_216AF190C((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x30uLL);
    v11[1] = a1 + 1;
    BOOL v9 = *a4;
    sub_216981010(v7 + 8, v9);
    sub_21698105C(v7 + 9, v9 + 1);
    *((void *)v7 + 5) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_2170427DC((uint64_t)v11, 0);
  }
  return v7;
}

void sub_2170427DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21697C7B8(v2 + 8);
    }
    operator delete(v2);
  }
}

_DWORD *sub_217042834(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)sub_216AF190C((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    BOOL v9 = *a4;
    sub_21697D878(v7 + 8, v9);
    sub_21697D8B4(v7 + 9, v9 + 1);
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_216CF7220((uint64_t)v11, 0);
  }
  return v7;
}

void sub_2170428FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2170428FC(a1, *a2);
    sub_2170428FC(a1, a2[1]);
    sub_21697C7B8((_DWORD *)a2 + 8);
    operator delete(a2);
  }
}

int *sub_217042958(uint64_t *a1, int *a2, void *a3, void *a4, uint64_t a5)
{
  long long v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[1];
    if (a5 <= (uint64_t)(v9 - v11) >> 3)
    {
      uint64_t v21 = a3;
      sub_21680F304(&v21, a5);
      uint64_t v19 = a1[1] - (void)v5;
      if (v19 >> 3 >= a5
        || (uint64_t v21 = a3,
            sub_21680F304(&v21, v19 >> 3),
            a1[1] = (uint64_t)sub_217042650(v10, v21, a4, (_DWORD *)a1[1]),
            v19 >= 1))
      {
        sub_2169DCAD8((uint64_t)a1, (uint64_t)v5, v11, (uint64_t)&v5[2 * a5]);
        sub_217042BA8((uint64_t)&v26, a3, v21, v5);
      }
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 + ((uint64_t)(v11 - *a1) >> 3);
      if (v13 >> 61) {
        sub_21677CB10();
      }
      uint64_t v14 = ((uint64_t)a2 - v12) >> 3;
      uint64_t v15 = v9 - v12;
      if (v15 >> 2 > v13) {
        unint64_t v13 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      double v25 = a1 + 2;
      if (v16) {
        uint64_t v17 = sub_21677CB28((uint64_t)(a1 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v21 = v17;
      uint64_t v22 = (char *)&v17[v14];
      unint64_t v23 = v22;
      uint64_t v24 = (char *)&v17[v16];
      sub_217042B14(&v21, a3, a5);
      long long v5 = (int *)sub_2169DCBF4((uint64_t)a1, &v21, v5);
      sub_216981DDC((void **)&v21);
    }
  }
  return v5;
}

void sub_217042AF4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_217042B14(_DWORD *result, void *a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v4 = (_DWORD *)*((void *)result + 2);
  if (a3)
  {
    uint64_t v6 = &v4[2 * a3];
    do
    {
      sub_216981010(v4, (_DWORD *)a2 + 7);
      uint64_t result = sub_21698105C(v4 + 1, (_DWORD *)a2 + 8);
      uint64_t v7 = (void *)a2[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)a2[2];
          BOOL v9 = *v8 == (void)a2;
          a2 = v8;
        }
        while (!v9);
      }
      v4 += 2;
      a2 = v8;
    }
    while (v4 != v6);
    unint64_t v4 = v6;
  }
  *((void *)v3 + 2) = v4;
  return result;
}

void *sub_217042BA8(uint64_t a1, void *a2, void *a3, int *a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_2169C487C(a4, (_DWORD *)v5 + 7);
      sub_2169C48D4(a4 + 1, (_DWORD *)v5 + 8);
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          long long v5 = v8;
        }
        while (!v9);
      }
      a4 += 2;
      long long v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

void *sub_217042C40(void *a1, unint64_t a2, _DWORD **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169D8290(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    BOOL v8 = &v6[6 * a2];
    uint64_t v9 = 16 * v7;
    do
    {
      sub_217042CEC(v6, a3);
      v6 += 6;
      v9 -= 48;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_217042CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_217042CEC(void *a1, _DWORD **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_216980EEC(a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_216980EEC(a1 + 3, a2[3], a2[4], ((char *)a2[4] - (char *)a2[3]) >> 3);
  return a1;
}

void sub_217042D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void sub_217042D6C(void ***a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*v2)
  {
    sub_217042DC0((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_217042DC0(uint64_t a1, void **a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      long long v5 = v4 - 6;
      uint64_t v6 = v4 - 3;
      sub_216981168(&v6);
      uint64_t v6 = v5;
      sub_216981168(&v6);
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_217042E38(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  unint64_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        BOOL v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)BOOL v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C7706E8;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      uint64_t v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)uint64_t v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      uint64_t v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C7706E8;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_21704326C((uint64_t)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21704326C((uint64_t)this, (void *)this + 1);
  return 0;
}

uint64_t sub_21704326C(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  unint64_t v3 = *a2 - v2;
  if (*a2 > v2)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = 48 * v2;
    uint64_t v6 = (32 * v2) | 8;
    do
    {
      unint64_t v7 = (unsigned int **)(**(void **)v4 + v6);
      uint64_t v8 = **(void **)(v4 + 8) + v5;
      uint64_t v9 = *(uint64_t **)(v4 + 16);
      double v10 = **(double **)(v4 + 24);
      unsigned int v11 = **(_DWORD **)(v4 + 32);
      unsigned int v12 = **(_DWORD **)(v4 + 40);
      memset(v13, 0, sizeof(v13));
      int v14 = 1065353216;
      pxrInternal__aapl__pxrReserved__::UsdUtilsComputeCollectionIncludesAndExcludes(v7, v9, v8, v8 + 24, v11, v12, v13, v10);
      uint64_t result = sub_216BE0588((uint64_t)v13);
      v5 += 48;
      v6 += 32;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_21704331C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217043330(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unsigned __int8 v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v11 = v8;
  unsigned int v12 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v8[32 * v3];
  int v14 = &v8[32 * v7];
  sub_216D377FC(a1 + 16, v12, a2);
  char v13 = (char *)v12 + 32;
  sub_216D376F0(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216D3788C((uint64_t)&v11);
  return v9;
}

void sub_21704340C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3788C((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::UsdUtilsCoalescingDiagnosticDelegate(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)this = &unk_26C770730;
  *((void *)this + 1) = &unk_26C770808;
  uint64_t v5 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, a4);
  *((void *)this + 2) = v5;
  bzero(v5, 0x2C0uLL);
  *(_OWORD *)(*((void *)this + 2) + 256) = xmmword_21749C150;
  *((void *)this + 1) = &unk_26C770798;
  uint64_t v6 = (void *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate(v6, this);
  return this;
}

void sub_2170434EC(_Unwind_Exception *a1)
{
  sub_217044CAC(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this)
{
  *(void *)this = &unk_26C770730;
  unint64_t v2 = (void *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate(v2, this);
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics(this, v3);
  unint64_t v4 = (void **)v3;
  sub_217044DCC(&v4);
  sub_217044CAC((void *)this + 1);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (uint64_t)(a2 + 2);
  uint64_t v24 = 0;
  uint64_t v5 = (char *)this + 8;
  while (1)
  {
    uint64_t v6 = (uint64_t *)*((void *)this + 2);
    uint64_t v7 = v6[16];
    __dmb(0xBu);
    uint64_t v8 = *v6;
    __dmb(0xBu);
    uint64_t v9 = v6[16];
    __dmb(0xBu);
    if (v7 == v9)
    {
      uint64_t v10 = v6[34];
      __dmb(0xBu);
      if (v7 == v10 + v8) {
        break;
      }
    }
    if (sub_217044F80((uint64_t)v5, &v24))
    {
      uint64_t v11 = v24;
      uint64_t v22 = v24;
      char v13 = (uint64_t *)a2[1];
      unint64_t v12 = a2[2];
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v15 = ((uint64_t)v13 - *a2) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v16 = v12 - *a2;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        v23[4] = v4;
        if (v18)
        {
          uint64_t v19 = (char *)sub_21677CB28(v4, v18);
          uint64_t v11 = v22;
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[8 * v15];
        v23[0] = v19;
        v23[1] = v20;
        _OWORD v23[3] = &v19[8 * v18];
        uint64_t v22 = 0;
        *(void *)uint64_t v20 = v11;
        _OWORD v23[2] = v20 + 8;
        sub_217045E14(a2, v23);
        int v14 = (void *)a2[1];
        sub_217045FA8((uint64_t)v23);
      }
      else
      {
        uint64_t v22 = 0;
        *char v13 = v24;
        int v14 = v13 + 1;
        a2[1] = (uint64_t)v14;
      }
      a2[1] = (uint64_t)v14;
      uint64_t v21 = v22;
      uint64_t v22 = 0;
      if (v21) {
        sub_217045148((uint64_t)&v22, v21);
      }
    }
  }
}

void sub_217043710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  if (v3) {
    sub_217045148((uint64_t)va, v3);
  }
  sub_217044DCC((void ***)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::IssueFatalError(uint64_t a1, void *a2, uint64_t *a3)
{
  sub_216779094(&v8, "FATAL ERROR");
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v8, a3, (uint64_t)&__p, a2);
  std::string::~string(&__p);
  std::string::~string(&v8);
  uint64_t v6 = (_Unwind_Exception *)pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  _Unwind_Resume(v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::IssueStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x98uLL);
  BOOL v5 = v4;
  long long v6 = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = *(_OWORD *)a2;
  v4[1] = v6;
  *((void *)v4 + 4) = *(void *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_216778F24((unsigned char *)v4 + 40, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
    *((void *)v4 + 7) = *(void *)(a2 + 56);
  }
  void v5[4] = *(_OWORD *)(a2 + 64);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_216778F24((unsigned char *)v5 + 80, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    v5[5] = *(_OWORD *)(a2 + 80);
    *((void *)v5 + 12) = *(void *)(a2 + 96);
  }
  *((void *)v5 + 13) = 0;
  *((void *)v5 + 14) = 0;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, char *, void, void))(a2 + 104);
  if (v7) {
    v7(1, a2 + 104, (char *)v5 + 104, 0, 0);
  }
  *((void *)v5 + 17) = *(void *)(a2 + 136);
  *((unsigned char *)v5 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v11 = v5;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v8 + 128), 1uLL);
  return sub_216D6F71C((void *)(v8 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)&v11, add, (uint64_t *)(a1 + 8), (uint64_t (*)(void *, uint64_t))sub_217044E84);
}

void sub_217043950(_Unwind_Exception *a1)
{
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::IssueWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x98uLL);
  BOOL v5 = v4;
  long long v6 = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = *(_OWORD *)a2;
  v4[1] = v6;
  *((void *)v4 + 4) = *(void *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_216778F24((unsigned char *)v4 + 40, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
    *((void *)v4 + 7) = *(void *)(a2 + 56);
  }
  void v5[4] = *(_OWORD *)(a2 + 64);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_216778F24((unsigned char *)v5 + 80, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    v5[5] = *(_OWORD *)(a2 + 80);
    *((void *)v5 + 12) = *(void *)(a2 + 96);
  }
  *((void *)v5 + 13) = 0;
  *((void *)v5 + 14) = 0;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, char *, void, void))(a2 + 104);
  if (v7) {
    v7(1, a2 + 104, (char *)v5 + 104, 0, 0);
  }
  *((void *)v5 + 17) = *(void *)(a2 + 136);
  *((unsigned char *)v5 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v11 = v5;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v8 + 128), 1uLL);
  return sub_216D6F71C((void *)(v8 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)&v11, add, (uint64_t *)(a1 + 8), (uint64_t (*)(void *, uint64_t))sub_217044E84);
}

void sub_217043ACC(_Unwind_Exception *a1)
{
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeCoalescedDiagnostics@<X0>(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = this;
  uint64_t v92 = *MEMORY[0x263EF8340];
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v4 = (char *)this + 8;
  float v84 = 1.0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  unint64_t v60 = (char *)this + 8;
  while (1)
  {
    BOOL v5 = (uint64_t *)*((void *)v3 + 2);
    uint64_t v6 = v5[16];
    __dmb(0xBu);
    uint64_t v7 = *v5;
    __dmb(0xBu);
    uint64_t v8 = v5[16];
    __dmb(0xBu);
    if (v6 == v8)
    {
      uint64_t v9 = v5[34];
      __dmb(0xBu);
      if (v6 == v9 + v7) {
        return sub_2170446C8((uint64_t)&v82);
      }
    }
    if (sub_217044F80((uint64_t)v4, &v80))
    {
      uint64_t v79 = v80;
      std::string::size_type v75 = *(void *)(v80 + 16);
      sub_2170445C4(v80, &v76);
      sub_216779094(&v77, *(char **)v79);
      char v10 = *(unsigned char *)(v79 + 32);
      long long v11 = *(_OWORD *)(v79 + 16);
      long long v70 = *(_OWORD *)v79;
      long long v71 = v11;
      LOBYTE(v72) = v10;
      if (*(char *)(v79 + 63) < 0)
      {
        sub_216778F24(&v73, *(void **)(v79 + 40), *(void *)(v79 + 48));
      }
      else
      {
        long long v12 = *(_OWORD *)(v79 + 40);
        uint64_t v74 = *(void *)(v79 + 56);
        long long v73 = v12;
      }
      std::string::size_type v63 = 0;
      v64.__r_.__value_.__s.__data_[0] = 0;
      sub_216BACBBC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v63, (uint64_t *)&v75, (pxrInternal__aapl__pxrReserved__ *)&v76, (uint64_t)&v77);
      unint64_t v13 = *((void *)&v82 + 1);
      if (*((void *)&v82 + 1))
      {
        unint64_t v14 = bswap64(0x9E3779B97F4A7C55 * v63);
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
        v15.i16[0] = vaddlv_u8(v15);
        unint64_t v2 = v15.u32[0];
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v16 = v14;
          if (v14 >= *((void *)&v82 + 1)) {
            unint64_t v16 = v14 % *((void *)&v82 + 1);
          }
        }
        else
        {
          unint64_t v16 = (*((void *)&v82 + 1) - 1) & v14;
        }
        uint64_t v17 = *(void **)(v82 + 8 * v16);
        if (v17)
        {
          unint64_t v18 = (void *)*v17;
          if (*v17)
          {
            do
            {
              unint64_t v19 = v18[1];
              if (v19 == v14)
              {
                if (sub_2170451AC((uint64_t)(v18 + 2), (uint64_t)&v75))
                {
                  uint64_t v52 = *a2 + 80 * v18[9];
                  unint64_t v55 = *(void *)(v52 + 64);
                  int v53 = (uint64_t *)(v52 + 64);
                  unint64_t v54 = v55;
                  std::string v56 = v53 - 1;
                  if (v55 >= v53[1])
                  {
                    uint64_t v57 = sub_217045AC4(v56, &v70);
                    uint64_t v4 = v60;
                    uint64_t v3 = this;
                  }
                  else
                  {
                    sub_217045A50((uint64_t)v56, &v70);
                    uint64_t v4 = v60;
                    uint64_t v3 = this;
                    uint64_t v57 = v54 + 64;
                  }
                  *int v53 = v57;
                  goto LABEL_123;
                }
              }
              else
              {
                if (v2 > 1)
                {
                  if (v19 >= v13) {
                    v19 %= v13;
                  }
                }
                else
                {
                  v19 &= v13 - 1;
                }
                if (v19 != v16) {
                  break;
                }
              }
              unint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
        }
      }
      sub_217044A7C((uint64_t)&v63, (uint64_t)&v75, &v81);
      *(void *)&long long v87 = 0;
      BYTE8(v87) = 0;
      sub_216BACBBC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v87, (uint64_t *)&v63, (pxrInternal__aapl__pxrReserved__ *)&v64, (uint64_t)&__p);
      unint64_t v20 = bswap64(0x9E3779B97F4A7C55 * v87);
      unint64_t v21 = *((void *)&v82 + 1);
      if (*((void *)&v82 + 1))
      {
        uint8x8_t v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v82 + 8));
        v22.i16[0] = vaddlv_u8(v22);
        unint64_t v23 = v22.u32[0];
        if (v22.u32[0] > 1uLL)
        {
          unint64_t v2 = v20;
          if (v20 >= *((void *)&v82 + 1)) {
            unint64_t v2 = v20 % *((void *)&v82 + 1);
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&v82 + 1) - 1) & v20;
        }
        uint64_t v24 = *(void **)(v82 + 8 * v2);
        if (v24)
        {
          double v25 = (void *)*v24;
          if (*v24)
          {
            do
            {
              unint64_t v26 = v25[1];
              if (v26 == v20)
              {
                if (sub_2170451AC((uint64_t)(v25 + 2), (uint64_t)&v63)) {
                  goto LABEL_95;
                }
              }
              else
              {
                if (v23 > 1)
                {
                  if (v26 >= v21) {
                    v26 %= v21;
                  }
                }
                else
                {
                  v26 &= v21 - 1;
                }
                if (v26 != v2) {
                  break;
                }
              }
              double v25 = (void *)*v25;
            }
            while (v25);
          }
        }
      }
      uint64_t v27 = (std::string *)operator new(0x50uLL);
      *(void *)&long long v87 = v27;
      *((void *)&v87 + 1) = &v83;
      v27->__r_.__value_.__r.__words[0] = 0;
      v27->__r_.__value_.__l.__size_ = v20;
      std::string::size_type v28 = (std::string::size_type)v67;
      v27->__r_.__value_.__r.__words[2] = v63;
      v27[1] = v64;
      memset(&v64, 0, sizeof(v64));
      *(_OWORD *)&v27[2].__r_.__value_.__l.__data_ = __p;
      std::string::size_type v29 = v66;
      long long __p = 0uLL;
      std::string::size_type v66 = 0;
      v27[2].__r_.__value_.__r.__words[2] = v29;
      v27[3].__r_.__value_.__r.__words[0] = v28;
      LOBYTE(v88) = 1;
      float v30 = (float)(unint64_t)(*((void *)&v83 + 1) + 1);
      if (!v21 || (float)(v84 * (float)v21) < v30)
      {
        BOOL v31 = (v21 & (v21 - 1)) == 0;
        if (v21 < 3) {
          BOOL v31 = 0;
        }
        unint64_t v32 = (2 * v21) | !v31;
        unint64_t v33 = vcvtps_u32_f32(v30 / v84);
        if (v32 <= v33) {
          int8x8_t prime = (int8x8_t)v33;
        }
        else {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v21 = *((void *)&v82 + 1);
        }
        if (*(void *)&prime <= v21)
        {
          if (*(void *)&prime < v21)
          {
            unint64_t v41 = vcvtps_u32_f32((float)*((unint64_t *)&v83 + 1) / v84);
            if (v21 < 3 || (uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
            {
              unint64_t v41 = std::__next_prime(v41);
            }
            else
            {
              uint64_t v43 = 1 << -(char)__clz(v41 - 1);
              if (v41 >= 2) {
                unint64_t v41 = v43;
              }
            }
            if (*(void *)&prime <= v41) {
              int8x8_t prime = (int8x8_t)v41;
            }
            if (*(void *)&prime >= v21)
            {
              unint64_t v21 = *((void *)&v82 + 1);
            }
            else
            {
              if (prime) {
                goto LABEL_52;
              }
              char v58 = (void *)v82;
              *(void *)&long long v82 = 0;
              if (v58) {
                operator delete(v58);
              }
              unint64_t v21 = 0;
              *((void *)&v82 + 1) = 0;
            }
          }
        }
        else
        {
LABEL_52:
          if (*(void *)&prime >> 61) {
            sub_21677CA1C();
          }
          uint64_t v35 = operator new(8 * *(void *)&prime);
          unint64_t v36 = (void *)v82;
          *(void *)&long long v82 = v35;
          if (v36) {
            operator delete(v36);
          }
          uint64_t v37 = 0;
          *((int8x8_t *)&v82 + 1) = prime;
          do
            *(void *)(v82 + 8 * v37++) = 0;
          while (*(void *)&prime != v37);
          int8x16_t v38 = (void **)v83;
          if ((void)v83)
          {
            unint64_t v39 = *(void *)(v83 + 8);
            uint8x8_t v40 = (uint8x8_t)vcnt_s8(prime);
            v40.i16[0] = vaddlv_u8(v40);
            if (v40.u32[0] > 1uLL)
            {
              if (v39 >= *(void *)&prime) {
                v39 %= *(void *)&prime;
              }
            }
            else
            {
              v39 &= *(void *)&prime - 1;
            }
            *(void *)(v82 + 8 * v39) = &v83;
            for (i = *v38; i; unint64_t v39 = v45)
            {
              unint64_t v45 = i[1];
              if (v40.u32[0] > 1uLL)
              {
                if (v45 >= *(void *)&prime) {
                  v45 %= *(void *)&prime;
                }
              }
              else
              {
                v45 &= *(void *)&prime - 1;
              }
              if (v45 != v39)
              {
                if (!*(void *)(v82 + 8 * v45))
                {
                  *(void *)(v82 + 8 * v45) = v38;
                  goto LABEL_77;
                }
                *int8x16_t v38 = (void *)*i;
                *uint64_t i = **(void **)(v82 + 8 * v45);
                **(void **)(v82 + 8 * v45) = i;
                uint64_t i = v38;
              }
              unint64_t v45 = v39;
LABEL_77:
              int8x16_t v38 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }
          unint64_t v21 = (unint64_t)prime;
        }
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21) {
            unint64_t v2 = v20 % v21;
          }
          else {
            unint64_t v2 = v20;
          }
        }
        else
        {
          unint64_t v2 = (v21 - 1) & v20;
        }
      }
      double v46 = *(void **)(v82 + 8 * v2);
      if (v46)
      {
        *(void *)long long v87 = *v46;
        *double v46 = v87;
      }
      else
      {
        *(void *)long long v87 = v83;
        *(void *)&long long v83 = v87;
        *(void *)(v82 + 8 * v2) = &v83;
        if (*(void *)v87)
        {
          unint64_t v47 = *(void *)(*(void *)v87 + 8);
          if ((v21 & (v21 - 1)) != 0)
          {
            if (v47 >= v21) {
              v47 %= v21;
            }
          }
          else
          {
            v47 &= v21 - 1;
          }
          *(void *)(v82 + 8 * v47) = v87;
        }
      }
      *(void *)&long long v87 = 0;
      ++*((void *)&v83 + 1);
      sub_2170452EC((uint64_t)&v87, 0);
LABEL_95:
      if (SHIBYTE(v66) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      std::string::size_type v63 = v75;
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        sub_216778F24(&v64, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      }
      else {
        std::string v64 = v76;
      }
      if (SHIBYTE(v78) < 0)
      {
        sub_216778F24(&__p, (void *)v77, *((unint64_t *)&v77 + 1));
      }
      else
      {
        long long __p = v77;
        std::string::size_type v66 = v78;
      }
      long long v87 = v70;
      long long v88 = v71;
      uint64_t v89 = v72;
      if (SHIBYTE(v74) < 0)
      {
        sub_216778F24(&v90, (void *)v73, *((unint64_t *)&v73 + 1));
      }
      else
      {
        long long v90 = v73;
        uint64_t v91 = v74;
      }
      unsigned int v67 = 0;
      long long v68 = 0;
      long long v69 = 0;
      long long v85 = (void **)&v67;
      char v86 = 0;
      unsigned int v67 = (char *)operator new(0x40uLL);
      long long v68 = v67;
      long long v69 = v67 + 64;
      long long v68 = (unsigned char *)sub_217045344((uint64_t)&v69, (uint64_t)&v87, (uint64_t)&v92, (uint64_t)v67);
      if (SHIBYTE(v91) < 0) {
        operator delete((void *)v90);
      }
      unint64_t v2 = a2[1];
      if (v2 >= a2[2])
      {
        uint64_t v49 = sub_2170454A0(a2, (uint64_t)&v63);
      }
      else
      {
        *(void *)unint64_t v2 = v63;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_216778F24((unsigned char *)(v2 + 8), v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v48 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
          *(void *)(v2 + 24) = *((void *)&v64.__r_.__value_.__l + 2);
          *(_OWORD *)(v2 + 8) = v48;
        }
        if (SHIBYTE(v66) < 0)
        {
          sub_216778F24((unsigned char *)(v2 + 32), (void *)__p, *((unint64_t *)&__p + 1));
        }
        else
        {
          long long v50 = __p;
          *(void *)(v2 + 48) = v66;
          *(_OWORD *)(v2 + 32) = v50;
        }
        *(void *)(v2 + 56) = 0;
        *(void *)(v2 + 64) = 0;
        *(void *)(v2 + 72) = 0;
        sub_217045690((void *)(v2 + 56), (uint64_t)v67, (uint64_t)v68, (v68 - v67) >> 6);
        uint64_t v49 = v2 + 80;
        a2[1] = v2 + 80;
      }
      uint64_t v4 = v60;
      uint64_t v3 = this;
      a2[1] = v49;
      ++v81;
      *(void *)&long long v87 = &v67;
      sub_217044B38((void ***)&v87);
      if (SHIBYTE(v66) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
LABEL_123:
      if (SHIBYTE(v74) < 0) {
        operator delete((void *)v73);
      }
      if (SHIBYTE(v78) < 0) {
        operator delete((void *)v77);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      uint64_t v51 = v79;
      uint64_t v79 = 0;
      if (v51) {
        sub_217045148((uint64_t)&v79, v51);
      }
    }
  }
}

void sub_217044464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v50 + 31) < 0) {
    operator delete(*v49);
  }
  *(void *)(a15 + 8) = v50;
  sub_21704466C((uint64_t)&a19);
  if (a42 < 0) {
    operator delete(__p);
  }
  sub_216AB4594((uint64_t)&a43);
  uint64_t v53 = *(void *)(v51 - 248);
  *(void *)(v51 - 248) = 0;
  if (v53) {
    sub_217045148(v51 - 248, v53);
  }
  a32 = a15;
  sub_217044E90((void ***)&a32);
  sub_2170446C8(v51 - 224);
  _Unwind_Resume(a1);
}

void sub_2170445C4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_216779094(v5, *(char **)(a1 + 8));
  sub_216779094(&__p, *(char **)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v5, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_217044638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21704466C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  sub_217044B38(&v3);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_2170446C8(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216ABE084((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::DumpCoalescedDiagnostics(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeCoalescedDiagnostics(a1, &v14);
  uint64_t v3 = v15;
  if (v14 != v15)
  {
    uint64_t v4 = v14 + 32;
    do
    {
      BOOL v5 = (void *)std::ostream::operator<<();
      sub_216779180(v5, (uint64_t)" ", 1);
      sub_216779180(a2, (uint64_t)"Diagnostic Notification(s) in ", 30);
      int v6 = *(char *)(v4 - 1);
      if (v6 >= 0) {
        uint64_t v7 = v4 - 24;
      }
      else {
        uint64_t v7 = *(void *)(v4 - 24);
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v4 - 1);
      }
      else {
        uint64_t v8 = *(void *)(v4 - 16);
      }
      sub_216779180(a2, v7, v8);
      sub_216779180(a2, (uint64_t)" at line ", 9);
      std::ostream::operator<<();
      uint64_t v9 = sub_216779180(a2, (uint64_t)" of ", 4);
      int v10 = *(char *)(v4 + 23);
      if (v10 >= 0) {
        uint64_t v11 = v4;
      }
      else {
        uint64_t v11 = *(void *)v4;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v4 + 8);
      }
      sub_216779180(v9, v11, v12);
      sub_216779180(a2, (uint64_t)"\n", 1);
      uint64_t v13 = v4 + 48;
      v4 += 80;
    }
    while (v13 != v3);
  }
  unint64_t v16 = (void **)&v14;
  sub_217044E90(&v16);
}

void sub_21704487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_217044E90(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::DumpUncoalescedDiagnostics(pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics(a1, (uint64_t *)&v15);
  uint64_t v3 = v15;
  for (uint64_t i = v16; v3 != i; ++v3)
  {
    sub_216779180(a2, (uint64_t)"Diagnostic Notification in ", 27);
    sub_2170445C4(*v3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_216779180(a2, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_216779180(a2, (uint64_t)" at line ", 9);
    std::ostream::operator<<();
    uint64_t v7 = sub_216779180(a2, (uint64_t)" of ", 4);
    sub_216779094(&__p, *(char **)*v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    sub_216779180(v7, (uint64_t)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v10 = sub_216779180(a2, (uint64_t)":\n   ", 5);
    int v11 = *(char *)(*v3 + 63);
    if (v11 >= 0) {
      uint64_t v12 = *v3 + 40;
    }
    else {
      uint64_t v12 = *(void *)(*v3 + 40);
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(*v3 + 63);
    }
    else {
      uint64_t v13 = *(void *)(*v3 + 48);
    }
    sub_216779180(v10, v12, v13);
    sub_216779180(a2, (uint64_t)"\n", 1);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  sub_217044DCC((void ***)&__p);
}

void sub_217044A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  sub_217044DCC((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_217044A7C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v6;
  }
  uint64_t v7 = (unsigned char *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(void *)(a1 + 56) = *a3;
  return a1;
}

void sub_217044B1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_217044B38(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_217044B8C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_217044B8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_217044BDC(void *a1)
{
  uint64_t v1 = (void *)sub_217044CAC(a1);

  operator delete(v1);
}

uint64_t sub_217044C04(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 8 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_217044C34(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 8 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_217044C64(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_217044CA4(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_217044CAC(void *a1)
{
  *a1 = &unk_26C770798;
  sub_217044D0C((BOOL)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_217044D80((uint64_t)a1, v2);
}

BOOL sub_217044D0C(BOOL result)
{
  uint64_t v1 = result;
  for (i = 0; ; uint64_t result = sub_217044F80(v1, &i))
  {
    uint64_t v2 = *(uint64_t **)(v1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
  }
  return result;
}

uint64_t sub_217044D80(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C770808;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

void sub_217044DCC(void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    sub_217044E20((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_217044E20(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      if (v6) {
        sub_217045148((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void *sub_217044E84(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void sub_217044E90(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_217044F28((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_217044F28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 56);
  sub_217044B38(&v3);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

BOOL sub_217044F80(uint64_t a1, void *a2)
{
  uint64_t v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_217045040(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_217045040(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v21[0] = v8 + 8;
  v21[1] = (uint64_t)a1;
  _OWORD v21[2] = v17;
  v21[3] = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    *a2 = *(void *)(v13 + 8 * v16 + 16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  BOOL v19 = v18 != 0;
  sub_2168DAB04(v21);
  return v19;
}

void sub_217045148(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2168579F4((uint64_t (**)(void, void, void, void, void))(a2 + 104));
    if (*(char *)(a2 + 103) < 0) {
      operator delete(*(void **)(a2 + 80));
    }
    if (*(char *)(a2 + 63) < 0) {
      operator delete(*(void **)(a2 + 40));
    }
    operator delete((void *)a2);
  }
}

uint64_t sub_2170451AC(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  unint64_t v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      unint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v10 = *(unsigned __int8 *)(a1 + 55);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 40);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 55);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 40);
  }
  if (v11 != v12) {
    return 0;
  }
  uint64_t v14 = (const void **)(a1 + 32);
  uint64_t v17 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v16 = (unsigned __int8 *)(a2 + 32);
  uint64_t v15 = v17;
  if (v13 >= 0) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v15;
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*v14, v18, *(void *)(a1 + 40)) == 0;
  }
  if (!*(unsigned char *)(a1 + 55)) {
    return 1;
  }
  uint64_t v19 = v10 - 1;
  do
  {
    int v21 = *(unsigned __int8 *)v14;
    uint64_t v14 = (const void **)((char *)v14 + 1);
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

void sub_2170452EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ABE084((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_217045344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 40);
    do
    {
      long long v7 = *(long long *)((char *)v6 - 40);
      long long v8 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 32) = *((void *)v6 - 1);
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      uint64_t v9 = (unsigned char *)(v4 + 40);
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24(v9, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v16;
      }
      else
      {
        long long v10 = *v6;
        *(void *)(v4 + 56) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v9 = v10;
      }
      uint64_t v11 = (uint64_t)v6 - 40;
      v4 += 64;
      uint64_t v16 = v4;
      v6 += 4;
    }
    while (v11 + 64 != a3);
  }
  char v14 = 1;
  sub_217045420((uint64_t)v13);
  return v4;
}

void sub_21704540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217045420(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217045458(a1);
  }
  return a1;
}

void sub_217045458(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 64;
  }
}

uint64_t sub_2170454A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_216814BD8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  int v13 = v10;
  char v14 = &v10[80 * v4];
  uint64_t v16 = &v10[80 * v9];
  sub_2170455A8((uint64_t)v14, a2);
  uint64_t v15 = v14 + 80;
  sub_2170457F4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_2170459D4(&v13);
  return v11;
}

void sub_217045594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2170459D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170455A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_217045690((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 6);
  return a1;
}

void sub_21704565C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217045690(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2169B75D8(result, a4);
    uint64_t result = (void *)sub_217045718((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2170456F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_217044B38(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_217045718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v16 = a4;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 40);
    do
    {
      long long v7 = *(long long *)((char *)v6 - 40);
      long long v8 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 32) = *((void *)v6 - 1);
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      uint64_t v9 = (unsigned char *)(v4 + 40);
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24(v9, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v16;
      }
      else
      {
        long long v10 = *v6;
        *(void *)(v4 + 56) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v9 = v10;
      }
      uint64_t v11 = (uint64_t)v6 - 40;
      v4 += 64;
      uint64_t v16 = v4;
      v6 += 4;
    }
    while (v11 + 64 != a3);
  }
  char v14 = 1;
  sub_217045420((uint64_t)v13);
  return v4;
}

void sub_2170457E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170457F4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21704586C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21704586C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 80);
      a3 -= 80;
      *(void *)(v7 - 80) = v8;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 56) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 72) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 32) = *(void *)(a3 + 48);
      *(_OWORD *)(v7 - 48) = v10;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 56);
      *(void *)(v7 - 8) = *(void *)(a3 + 72);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 80;
      *((void *)&v16 + 1) -= 80;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_217045948((uint64_t)v13);
  return v11;
}

uint64_t sub_217045948(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217045980((uint64_t *)a1);
  }
  return a1;
}

void sub_217045980(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_217044F28(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_2170459D4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_217045A08(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_217044F28(v4, i - 80);
  }
}

unsigned char *sub_217045A50(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  uint64_t result = (unsigned char *)(v3 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    uint64_t result = sub_216778F24(result, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 40);
    *(void *)(v3 + 56) = *((void *)a2 + 7);
    *(_OWORD *)uint64_t result = v7;
  }
  *(void *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_217045ABC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_217045AC4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v21 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_2169B761C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = &v10[64 * v4];
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v19 = v11;
  int v20 = &v10[64 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  char v14 = v11 + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_216778F24(v14, *((void **)a2 + 5), *((void *)a2 + 6));
    uint64_t v11 = v19;
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 40);
    *((void *)v11 + 7) = *((void *)a2 + 7);
    *(_OWORD *)char v14 = v15;
  }
  uint64_t v19 = v11 + 64;
  sub_217045BDC(a1, v18);
  uint64_t v16 = a1[1];
  sub_217045D84((uint64_t)v18);
  return v16;
}

void sub_217045BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217045D84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217045BDC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217045C54((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217045C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 64);
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 64) = v10;
      *(_OWORD *)(v9 - 48) = v11;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 64;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 64;
      a3 -= 64;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  sub_217045D04((uint64_t)v14);
  return a6;
}

uint64_t sub_217045D04(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217045D3C(a1);
  }
  return a1;
}

void sub_217045D3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    v1 += 64;
  }
}

uint64_t sub_217045D84(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_217045DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 64;
      *(void *)(a1 + 16) = v2 - 64;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_217045E14(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217045E8C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217045E8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_217045F24((uint64_t)v13);
  return v11;
}

uint64_t sub_217045F24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217045F5C(a1);
  }
  return a1;
}

void sub_217045F5C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      sub_217045148((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t sub_217045FA8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_217045FE0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      sub_217045148(i - 8, v5);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::RecursiveCartesian(uint64_t *a1, uint64_t *a2, long long ***a3, int a4)
{
  uint64_t v8 = &(*a3)[3 * a4];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v17 = 0;
  sub_216812BD8((char *)&v17, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)*v8) >> 3));
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  if (v17 != v18)
  {
    uint64_t v11 = (void **)a2[1];
    do
    {
      if ((unint64_t)v11 >= a2[2])
      {
        uint64_t v12 = sub_2168DF188(a2, v9);
      }
      else
      {
        sub_2167E99E4(a2, v9);
        uint64_t v12 = (uint64_t)(v11 + 3);
      }
      a2[1] = v12;
      if (a4)
      {
        memset(v16, 0, sizeof(v16));
        sub_2168E1840(v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
        pxrInternal__aapl__pxrReserved__::RecursiveCartesian(a1, a2, v16, (a4 - 1));
        int v20 = (long long **)v16;
        sub_2168DEE10((void ***)&v20);
      }
      else
      {
        unint64_t v13 = a1[1];
        if (v13 >= a1[2])
        {
          uint64_t v14 = sub_2170517C0(a1, (long long **)a2);
        }
        else
        {
          sub_217051760((uint64_t)a1, (long long **)a2);
          uint64_t v14 = v13 + 24;
        }
        a1[1] = v14;
      }
      uint64_t v15 = a2[1];
      uint64_t v11 = (void **)(v15 - 24);
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*v11);
      }
      a2[1] = (uint64_t)v11;
      uint64_t v9 = (long long *)((char *)v9 + 24);
    }
    while (v9 != v10);
  }
  int v20 = &v17;
  sub_216782F20((void ***)&v20);
}

void sub_2170461B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a10;
  sub_2168DEE10(&a16);
  a16 = (void **)&a13;
  sub_216782F20(&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::CartesianProduct(long long ***a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v2 != v3)
  {
    memset(v19, 0, 24);
    memset(v18, 0, sizeof(v18));
    sub_2168E1840(v18, v2, v3, 0xAAAAAAAAAAAAAAABLL * (v3 - v2));
    pxrInternal__aapl__pxrReserved__::RecursiveCartesian(a2, v19, v18, -1431655765 * ((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) - 1);
    uint64_t v15 = (std::string *)v18;
    sub_2168DEE10((void ***)&v15);
    uint64_t v6 = (long long **)*a2;
    uint64_t v7 = (long long **)a2[1];
    if ((long long **)*a2 != v7)
    {
      do
      {
        uint64_t v15 = 0;
        long long v16 = 0;
        uint64_t v17 = 0;
        sub_216812BD8((char *)&v15, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
        uint64_t v8 = (char *)v16 - 24;
        if (v15 != (std::string *)v16 && v8 > (char *)v15)
        {
          p_data = (void **)&v15[1].__r_.__value_.__l.__data_;
          do
          {
            uint64_t v11 = (uint64_t)*(p_data - 1);
            long long v12 = *(_OWORD *)(p_data - 3);
            unint64_t v13 = (void *)*((void *)v8 + 2);
            *(_OWORD *)(p_data - 3) = *(_OWORD *)v8;
            *(p_data - 1) = v13;
            *(_OWORD *)uint64_t v8 = v12;
            *((void *)v8 + 2) = v11;
            v8 -= 24;
            BOOL v14 = p_data >= (void **)v8;
            p_data += 3;
          }
          while (!v14);
        }
        if (v6 != (long long **)&v15) {
          sub_21680F694((uint64_t)v6, v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3));
        }
        int v20 = (void ***)&v15;
        sub_216782F20((void ***)&v20);
        v6 += 3;
      }
      while (v6 != v7);
    }
    uint64_t v15 = (std::string *)v19;
    sub_216782F20((void ***)&v15);
  }
}

void sub_21704636C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_2168DEE10((void ***)va);
  va_copy((va_list)v3, va1);
  sub_216782F20((void ***)va);
  sub_2168DEE10((void ***)va1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::UsdUtilsBaseRuleChecker(pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker *this, char a2, char a3, char a4)
{
  *(void *)this = &unk_26C770848;
  *((unsigned char *)this + 8) = a2;
  *((unsigned char *)this + 9) = a3;
  *((unsigned char *)this + 10) = a4;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    if (*(char *)(a2 + 23) >= 0)
    {
      uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    }
    else
    {
      a2 = *(void *)a2;
      uint64_t v3 = v2;
    }
    uint64_t v4 = sub_216779180(MEMORY[0x263F8C100], a2, v3);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v5 = std::locale::use_facet(&v6, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v6);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_2170464CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsByteAlignmentChecker::CheckZipFile(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdZipFile *this, uint64_t **a3)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::begin(this, &v30);
  uint64_t v5 = a1 + 2;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(v31);
    BOOL v6 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((void **)&v30, (void **)v31);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(v31);
    if (!v6) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFileInfo((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v30, (uint64_t)v29);
    uint64_t v7 = v29[0];
    if ((v29[0] & 0x3F) != 0)
    {
      double v10 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator->((uint64_t)&v30, (uint64_t)v25);
      uint64_t v11 = (void **)v25[0];
      if (v26 >= 0) {
        uint64_t v11 = v25;
      }
      long long v12 = *a3;
      if (*((char *)a3 + 23) >= 0) {
        long long v12 = (uint64_t *)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"File '%s' in package '%s' has an invalid offset %zu.", v8, v9, v10, v11, v12, v7);
      unint64_t v13 = a1[3];
      unint64_t v14 = a1[4];
      if (v13 >= v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v5) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v5) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v17;
        }
        v31[4] = a1 + 4;
        if (v19) {
          int v20 = (char *)sub_216782ED8((uint64_t)(a1 + 4), v19);
        }
        else {
          int v20 = 0;
        }
        int v21 = &v20[24 * v16];
        v31[0] = v20;
        v31[1] = v21;
        v31[3] = &v20[24 * v19];
        long long v22 = *(_OWORD *)__p;
        *((void *)v21 + 2) = v28;
        *(_OWORD *)int v21 = v22;
        __p[1] = 0;
        uint64_t v28 = 0;
        __p[0] = 0;
        v31[2] = v21 + 24;
        sub_216790CCC(a1 + 2, v31);
        uint64_t v23 = a1[3];
        sub_216790E64((uint64_t)v31);
        int v24 = SHIBYTE(v28);
        a1[3] = v23;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)__p;
        *(void *)(v13 + 16) = v28;
        *(_OWORD *)unint64_t v13 = v15;
        __p[1] = 0;
        uint64_t v28 = 0;
        __p[0] = 0;
        a1[3] = v13 + 24;
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator++((uint64_t)&v30);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v30);
}

void sub_2170466F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,__int16 a31,char a32,char a33)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_217046768(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = v4;
    if (v13) {
      unint64_t v14 = (char *)sub_216782ED8(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    long long v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    _OWORD v18[3] = &v14[24 * v13];
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v15 = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    void v18[2] = v15 + 24;
    sub_216790CCC(a1, v18);
    uint64_t v9 = a1[1];
    sub_216790E64((uint64_t)v18);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return v9 - 24;
}

void sub_217046894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsCompressionChecker::CheckZipFile(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdZipFile *this, uint64_t **a3)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::begin(this, &v32);
  unint64_t v5 = a1 + 2;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(v33);
    BOOL v6 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((void **)&v32, (void **)v33);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(v33);
    if (!v6) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFileInfo((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v32, (uint64_t)v28);
    if (v31)
    {
      double v9 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator->((uint64_t)&v32, (uint64_t)v24);
      unint64_t v10 = (void **)v24[0];
      if (v25 >= 0) {
        unint64_t v10 = v24;
      }
      unint64_t v11 = *a3;
      if (*((char *)a3 + 23) >= 0) {
        unint64_t v11 = (uint64_t *)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"File '%s' in package '%s has compression. Compression method is '%hu', actual size is %zu. Uncompressed size is %zu.", v7, v8, v9, v10, v11, v31, v29, v30);
      unint64_t v12 = a1[3];
      unint64_t v13 = a1[4];
      if (v12 >= v13)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *v5) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v5) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        v33[4] = a1 + 4;
        if (v18) {
          unint64_t v19 = (char *)sub_216782ED8((uint64_t)(a1 + 4), v18);
        }
        else {
          unint64_t v19 = 0;
        }
        int v20 = &v19[24 * v15];
        v33[0] = v19;
        v33[1] = v20;
        v33[3] = &v19[24 * v18];
        long long v21 = *(_OWORD *)__p;
        *((void *)v20 + 2) = v27;
        *(_OWORD *)int v20 = v21;
        __p[1] = 0;
        uint64_t v27 = 0;
        __p[0] = 0;
        _OWORD v33[2] = v20 + 24;
        sub_216790CCC(a1 + 2, v33);
        uint64_t v22 = a1[3];
        sub_216790E64((uint64_t)v33);
        int v23 = SHIBYTE(v27);
        a1[3] = v22;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v27;
        *(_OWORD *)unint64_t v12 = v14;
        __p[1] = 0;
        uint64_t v27 = 0;
        __p[0] = 0;
        a1[3] = v12 + 24;
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator++((uint64_t)&v32);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v32);
}

void sub_217046AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&a32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsMissingReferenceChecker::CheckDiagnostics(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    unint64_t v5 = a1 + 2;
    do
    {
      sub_2170445C4(*v2, &__p);
      int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        p_p = &__p;
      }
      else
      {
        int64_t size = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size < 13)
      {
LABEL_14:
        BOOL v13 = 0;
      }
      else
      {
        double v9 = (char *)p_p + size;
        unint64_t v10 = p_p;
        while (1)
        {
          unint64_t v11 = (char *)memchr(v10, 95, size - 12);
          if (!v11) {
            goto LABEL_14;
          }
          if (*(void *)v11 == 0x4574726F7065525FLL && *(void *)(v11 + 5) == 0x73726F7272457472) {
            break;
          }
          unint64_t v10 = (std::string *)(v11 + 1);
          int64_t size = v9 - (char *)v10;
          if (v9 - (char *)v10 < 13) {
            goto LABEL_14;
          }
        }
        BOOL v13 = 0;
        if (v11 != v9 && v11 - (char *)p_p != -1)
        {
          sub_216779094(v26, *(char **)*v2);
          uint64_t v17 = v27;
          int v18 = (char)v27;
          unint64_t v19 = (void *)v26[0];
          if ((v27 & 0x80u) == 0)
          {
            int v20 = v26;
          }
          else
          {
            uint64_t v17 = v26[1];
            int v20 = (void *)v26[0];
          }
          if (v17 >= 13)
          {
            long long v21 = (char *)v20 + v17;
            uint64_t v22 = v20;
            do
            {
              int v23 = (char *)memchr(v22, 117, v17 - 12);
              if (!v23) {
                break;
              }
              if (*(void *)v23 == 0x676174732F647375 && *(void *)(v23 + 5) == 0x7070632E65676174) {
                goto LABEL_41;
              }
              uint64_t v22 = v23 + 1;
              uint64_t v17 = v21 - (unsigned char *)v22;
            }
            while (v21 - (unsigned char *)v22 > 12);
            int v23 = v21;
LABEL_41:
            BOOL v13 = v23 != v21 && v23 - (char *)v20 != -1;
            if (v18 < 0) {
LABEL_48:
            }
              operator delete(v19);
          }
          else
          {
            BOOL v13 = 0;
            if ((char)v27 < 0) {
              goto LABEL_48;
            }
          }
          char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
      }
      if (v7 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v13)
        {
LABEL_19:
          long long v14 = (long long *)(*v2 + 40);
          unint64_t v15 = a1[3];
          if (v15 >= a1[4])
          {
            uint64_t v16 = sub_2168DF188(v5, v14);
          }
          else
          {
            sub_2167E99E4(v5, v14);
            uint64_t v16 = v15 + 24;
          }
          a1[3] = v16;
        }
      }
      else if (v13)
      {
        goto LABEL_19;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_217046D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsMissingReferenceChecker::CheckUnresolvedPaths(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t v3 = *(uint64_t **)a2;
  uint64_t v4 = (uint64_t *)*((void *)a2 + 1);
  if (*(uint64_t **)a2 != v4)
  {
    BOOL v6 = a1 + 2;
    uint64_t v7 = (uint64_t)(a1 + 4);
    do
    {
      long long v8 = v3;
      if (*((char *)v3 + 23) < 0) {
        long long v8 = (uint64_t *)*v3;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found unresolvable external dependency '%s'.", a2, a3, v8);
      unint64_t v10 = a1[3];
      unint64_t v9 = a1[4];
      if (v10 >= v9)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v6) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v6) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        v20[4] = v7;
        if (v14) {
          unint64_t v15 = (char *)sub_216782ED8(v7, v14);
        }
        else {
          unint64_t v15 = 0;
        }
        uint64_t v16 = &v15[24 * v11];
        v20[0] = v15;
        v20[1] = v16;
        v20[3] = &v15[24 * v14];
        *((void *)v16 + 2) = v19;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)__p;
        uint64_t v19 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        v20[2] = v16 + 24;
        sub_216790CCC(v6, v20);
        uint64_t v17 = a1[3];
        sub_216790E64((uint64_t)v20);
        a1[3] = v17;
      }
      else
      {
        *(void *)(v10 + 16) = v19;
        *(_OWORD *)unint64_t v10 = *(_OWORD *)__p;
        a1[3] = v10 + 24;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_217046EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsStageMetadataChecker::CheckStage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5) {
    unint64_t v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v5 + 1184)))
  {
    if (*(unsigned char *)(a1 + 9))
    {
      sub_2170519EC((uint64_t *)&v39, a2);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis((uint64_t *)&v39, (atomic_uint **)&v38);
      long long v8 = v40;
      if (v40 && atomic_fetch_add_explicit(v40 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
      }
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v9) {
        unint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v10 = v38;
      unint64_t v11 = v38 & 0xFFFFFFFFFFFFFFF8;
      if ((v38 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v9 + 168) & 0xFFFFFFFFFFFFFFF8))
      {
        if (v11)
        {
          unint64_t v12 = (const char *)(v11 + 16);
          if (*(char *)(v11 + 39) < 0) {
            unint64_t v12 = *(const char **)v12;
          }
        }
        else
        {
          unint64_t v12 = "";
        }
        unint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v15) {
          unint64_t v15 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        unint64_t v16 = *((void *)v15 + 168) & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          uint64_t v17 = (const char *)(v16 + 16);
          if (*(char *)(v16 + 39) < 0) {
            uint64_t v17 = *(const char **)v17;
          }
        }
        else
        {
          uint64_t v17 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Stage specifies upAxis '%s'. upAxis should be '%s'", v6, v7, v12, v17);
        unint64_t v18 = *(void *)(a1 + 32);
        unint64_t v19 = *(void *)(a1 + 24);
        if (v19 >= v18)
        {
          uint64_t v20 = *(void *)(a1 + 16);
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v20) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v22;
          }
          uint64_t v43 = a1 + 32;
          if (v24) {
            char v25 = (char *)sub_216782ED8(a1 + 32, v24);
          }
          else {
            char v25 = 0;
          }
          char v26 = (atomic_ullong *)&v25[24 * v21];
          unint64_t v39 = v25;
          uint8x8_t v40 = (atomic_uint *)v26;
          unint64_t v42 = (unint64_t)&v25[24 * v24];
          void v26[2] = v37;
          *(_OWORD *)char v26 = *(_OWORD *)__p;
          unint64_t v41 = v26 + 3;
          sub_216790CCC((uint64_t *)(a1 + 16), &v39);
          uint64_t v27 = *(void *)(a1 + 24);
          sub_216790E64((uint64_t)&v39);
          *(void *)(a1 + 24) = v27;
        }
        else
        {
          *(void *)(v19 + 16) = v37;
          *(_OWORD *)unint64_t v19 = *(_OWORD *)__p;
          *(void *)(a1 + 24) = v19 + 24;
        }
        unint64_t v10 = v38;
      }
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + 24);
    if (v13 >= *(void *)(a1 + 32))
    {
      uint64_t v14 = sub_2170518E4((uint64_t *)(a1 + 16), "Stage does not specify an upAxis.");
    }
    else
    {
      sub_216779094(*(void **)(a1 + 24), "Stage does not specify an upAxis.");
      uint64_t v14 = v13 + 24;
      *(void *)(a1 + 24) = v13 + 24;
    }
    *(void *)(a1 + 24) = v14;
  }
  uint64_t v28 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
  uint64_t v29 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v29) {
    uint64_t v29 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v28, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v29 + 560)) & 1) == 0)
  {
    unint64_t v30 = *(void *)(a1 + 24);
    if (v30 >= *(void *)(a1 + 32))
    {
      uint64_t v31 = sub_217051AD4((uint64_t *)(a1 + 16), "Stage does not specify its linear scale in metersPerUnit.");
    }
    else
    {
      sub_216779094(*(void **)(a1 + 24), "Stage does not specify its linear scale in metersPerUnit.");
      uint64_t v31 = v30 + 24;
      *(void *)(a1 + 24) = v30 + 24;
    }
    *(void *)(a1 + 24) = v31;
  }
  if (*(unsigned char *)(a1 + 10))
  {
    unint64_t v32 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(v32, (uint64_t)&v39);
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v39, v33) & 1) == 0)
    {
      unint64_t v34 = *(void *)(a1 + 24);
      if (v34 >= *(void *)(a1 + 32))
      {
        uint64_t v35 = sub_217051BDC((uint64_t *)(a1 + 16), "Stage has missing or invalid defaultPrim.");
      }
      else
      {
        sub_216779094(*(void **)(a1 + 24), "Stage has missing or invalid defaultPrim.");
        uint64_t v35 = v34 + 24;
        *(void *)(a1 + 24) = v34 + 24;
      }
      *(void *)(a1 + 24) = v35;
    }
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
    sub_21697C414(&v41);
    if (v40) {
      sub_216D16E0C((atomic_ullong *)v40);
    }
  }
}

void sub_217047310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckStage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v3, &v10);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v10);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v4);
  uint64_t v6 = sub_216979288(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) & 1) != 0 || *(unsigned char *)(a1 + 9))
  {
    *(unsigned char *)(a1 + 88) = 1;
  }
  else
  {
    sub_216779094(__p, "Not performing texture format checks for general USD asset.");
    pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg(a1, (uint64_t)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = v11;
  if (v11)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_217047494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, atomic_uint *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17)
  {
    if (atomic_fetch_add_explicit(a17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a17 + 8))(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (*((unsigned char *)this + 88))
  {
    uint64_t v3 = *((void *)a2 + 1);
    if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), a2);
    }
    if (**(void **)(v3 + 24))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v15, a2);
      uint64_t v17 = 0;
      unint64_t v15 = off_26C76D8C8;
      if (v16
        && (*(unsigned char *)(v16 + 57) & 8) == 0
        && off_26C76D8E8((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v15))
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v15, 1, (uint64_t *)&v13);
        uint64_t v4 = v13;
        for (i = v14; v4 != i; uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v4 + 32))
        {
          sub_216D0162C((uint64_t)v4, &v11);
          v8[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v4);
          uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v6) {
            uint64_t v6 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)v8, (void **)v6 + 12))
          {
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v8);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
          }
          v8[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v4);
          uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v7) {
            uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)v8, (void **)v7 + 69))
          {
            uint64_t v10 = 0;
            *(_OWORD *)long long v8 = 0u;
            long long v9 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>();
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
          sub_21697C414(&v11);
        }
        v8[0] = &v13;
        sub_216F75620((void ***)v8);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v15);
    }
  }
}

void sub_2170477D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTextureChecker::CheckTexture(uint64_t a1, const char *a2, char *a3)
{
  if (a2[23] >= 0) {
    uint64_t v6 = (uint64_t *)a2;
  }
  else {
    uint64_t v6 = *(uint64_t **)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking texture <%s>", a2, a3, v6);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v7);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::TfStringToLower((uint64_t *)&v36, &__p);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::string v36 = __p;
  if (!*(unsigned char *)(a1 + 9) || a1 + 128 == sub_21678C2D8(a1 + 120, (const void **)&v36.__r_.__value_.__l.__data_))
  {
    if (a1 + 104 != sub_21678C2D8(a1 + 96, (const void **)&v36.__r_.__value_.__l.__data_)) {
      goto LABEL_45;
    }
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if (*((char *)String + 23) >= 0) {
      uint64_t v25 = (uint64_t)String;
    }
    else {
      uint64_t v25 = *String;
    }
    if (a2[23] >= 0) {
      char v26 = (uint64_t *)a2;
    }
    else {
      char v26 = *(uint64_t **)a2;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Texture <%s> with asset @%s@ has an unknown/unsupported file format.", v23, v24, v25, v26);
    uint64_t v14 = a1 + 32;
    unint64_t v27 = *(void *)(a1 + 32);
    unint64_t v16 = *(void *)(a1 + 24);
    if (v16 >= v27)
    {
      uint64_t v28 = *(void *)(a1 + 16);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v28) >> 3);
      unint64_t v29 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v28) >> 3);
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v29;
      }
      uint64_t v39 = a1 + 32;
      if (!v21)
      {
        uint64_t v31 = 0;
        goto LABEL_44;
      }
      goto LABEL_41;
    }
LABEL_33:
    *(void *)(v16 + 16) = v35;
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v34;
    *(void *)(a1 + 24) = v16 + 24;
    goto LABEL_45;
  }
  long long v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if (*((char *)v9 + 23) >= 0) {
    uint64_t v12 = (uint64_t)v9;
  }
  else {
    uint64_t v12 = *v9;
  }
  if (a2[23] >= 0) {
    unint64_t v13 = (uint64_t *)a2;
  }
  else {
    unint64_t v13 = *(uint64_t **)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Texture <%s> with asset @%s@ has non-portable file format.", v10, v11, v12, v13);
  uint64_t v14 = a1 + 32;
  unint64_t v15 = *(void *)(a1 + 32);
  unint64_t v16 = *(void *)(a1 + 24);
  if (v16 < v15) {
    goto LABEL_33;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v17) >> 3);
  unint64_t v19 = v18 + 1;
  if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v17) >> 3);
  if (2 * v20 > v19) {
    unint64_t v19 = 2 * v20;
  }
  if (v20 >= 0x555555555555555) {
    unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v21 = v19;
  }
  uint64_t v39 = a1 + 32;
  if (!v21)
  {
    uint64_t v31 = 0;
    goto LABEL_44;
  }
LABEL_41:
  uint64_t v31 = (char *)sub_216782ED8(v14, v21);
LABEL_44:
  std::string::size_type v32 = (std::string::size_type)&v31[24 * v18];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  __p.__r_.__value_.__l.__size_ = v32;
  unint64_t v38 = &v31[24 * v21];
  *(void *)(v32 + 16) = v35;
  *(_OWORD *)std::string::size_type v32 = *(_OWORD *)v34;
  __p.__r_.__value_.__r.__words[2] = v32 + 24;
  sub_216790CCC((uint64_t *)(a1 + 16), &__p);
  uint64_t v33 = *(void *)(a1 + 24);
  sub_216790E64((uint64_t)&__p);
  *(void *)(a1 + 24) = v33;
LABEL_45:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_217047BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_217047C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x217047C10);
  }
  JUMPOUT(0x217047C14);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::ResetCaches(pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (void *)((char *)this + 96);
  sub_2170516C4((uint64_t)this + 88, *((void **)this + 12));
  *((void *)v1 + 11) = v2;
  *uint64_t v2 = 0;
  uint64_t v3 = (void *)*((void *)v1 + 15);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *)((char *)v1 + 120);
  *((void *)v1 - 2) = 0;
  sub_2170515F0((uint64_t)v1 - 8, v3);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *this, pxrInternal__aapl__pxrReserved__ **a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)sub_216D6B1F8((uint64_t)a2, (uint64_t)&v90);
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(v4);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v6);
  IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v8);
  if (IsA)
  {
    IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v90, v10);
    if (IsA)
    {
      IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::HasGprimAncestor((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v90);
      if (IsA)
      {
        sub_216D0162C((uint64_t)a2, (int *)&v83);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
        if (*((char *)String + 23) >= 0) {
          uint64_t v14 = (uint64_t)String;
        }
        else {
          uint64_t v14 = *String;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Gprim <%s> has an ancestor prim that is also a Gprim, which is not allowed.", v12, v13, v14);
        unint64_t v15 = *((void *)this + 4);
        unint64_t v16 = *((void *)this + 3);
        if (v16 >= v15)
        {
          uint64_t v18 = *((void *)this + 2);
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v18) >> 3);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v18) >> 3);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v20;
          }
          v99 = (char *)this + 32;
          if (v22) {
            unint64_t v23 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden))sub_216782ED8((uint64_t)this + 32, v22);
          }
          else {
            unint64_t v23 = 0;
          }
          unint64_t v24 = &v23[3 * v19];
          uint64_t v95 = v23;
          v96 = v24;
          v98 = &v23[3 * v22];
          long long v25 = *(_OWORD *)__p;
          v24[2] = v88;
          *(_OWORD *)unint64_t v24 = v25;
          __p[1] = 0;
          long long v88 = 0;
          __p[0] = 0;
          char v97 = (char *)(v24 + 3);
          sub_216790CCC((uint64_t *)this + 2, &v95);
          uint64_t v26 = *((void *)this + 3);
          sub_216790E64((uint64_t)&v95);
          int v27 = SHIBYTE(v88);
          *((void *)this + 3) = v26;
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v17 = *(_OWORD *)__p;
          *(void *)(v16 + 16) = v88;
          *(_OWORD *)unint64_t v16 = v17;
          __p[1] = 0;
          long long v88 = 0;
          __p[0] = 0;
          *((void *)this + 3) = v16 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
        IsA = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)sub_21697C414(&v83);
      }
    }
  }
  uint64_t v28 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(IsA);
  unint64_t v30 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v28, v29);
  uint64_t v32 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, v30, v31);
  if ((v32 & 1) == 0)
  {
    uint64_t v33 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v32);
    uint64_t v35 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v33, v34);
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, v35, v36);
    if ((v37 & 1) != 0
      || (unint64_t v38 = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v37),
          uint8x8_t v40 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v38, v39), pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, v40, v41)))
    {
      unint64_t v42 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v95, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a2);
      v98 = 0;
      uint64_t v95 = off_26C76D8C8;
      if (v96)
      {
        if ((*((unsigned char *)v96 + 57) & 8) == 0)
        {
          uint64_t v43 = off_26C76D8E8;
          if (off_26C76D8E8(v42))
          {
            if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v90, v44))
            {
              double v46 = a2[1];
              if (!v46 || (*((unsigned char *)v46 + 57) & 8) != 0) {
                pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v45);
              }
              if (**((void **)v46 + 3))
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v90);
                uint64_t v89 = 0;
                __p[0] = off_26C76D8C8;
                if (!__p[1]
                  || (*((unsigned char *)__p[1] + 57) & 8) != 0
                  || !v43((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p)
                  || (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p) & 1) != 0)
                {
                  goto LABEL_48;
                }
                long long v48 = v91;
                if (!v91 || (*((unsigned char *)v91 + 57) & 8) != 0) {
                  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v91, v47);
                }
                if (**((void **)v48 + 3))
                {
                  uint64_t v49 = a2[1];
                  if (!v49 || (*((unsigned char *)v49 + 57) & 8) != 0) {
                    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v47);
                  }
                  unint64_t v50 = **((void **)v49 + 3) & 0xFFFFFFFFFFFFFFF8;
                  if (v50)
                  {
                    uint64_t v51 = (const char *)(v50 + 16);
                    if (*(char *)(v50 + 39) < 0) {
                      uint64_t v51 = *(const char **)v51;
                    }
                  }
                  else
                  {
                    uint64_t v51 = "";
                  }
                  sub_216D0162C((uint64_t)a2, (int *)v81);
                  uint64_t v72 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
                  if (*((char *)v72 + 23) >= 0) {
                    uint64_t v75 = (uint64_t)v72;
                  }
                  else {
                    uint64_t v75 = *v72;
                  }
                  std::string v76 = v91;
                  if (!v91 || (*((unsigned char *)v91 + 57) & 8) != 0) {
                    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v91, v73);
                  }
                  unint64_t v77 = **((void **)v76 + 3) & 0xFFFFFFFFFFFFFFF8;
                  if (v77)
                  {
                    std::string::size_type v78 = (const char *)(v77 + 16);
                    if (*(char *)(v77 + 39) < 0) {
                      std::string::size_type v78 = *(const char **)v78;
                    }
                  }
                  else
                  {
                    std::string::size_type v78 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connectable %s <%s> cannot reside under a non-Container Connectable %s", (const char *)v73, v74, v51, v75, v78);
                  sub_217046768((uint64_t *)this + 2, &v83);
                  if (SHIBYTE(v85) < 0) {
                    operator delete((void *)v83);
                  }
                  sub_21697B754(v81);
                }
                else
                {
LABEL_48:
                  if (!v96
                    || (*((unsigned char *)v96 + 57) & 8) != 0
                    || (((uint64_t (*)(void))v95[4])(&v95) & 1) == 0)
                  {
                    pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::FindConnectableAncestor((uint64_t **)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v90, (uint64_t)&v83);
                    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v83, v52))
                    {
                      unint64_t v54 = a2[1];
                      if (!v54 || (*((unsigned char *)v54 + 57) & 8) != 0) {
                        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v53);
                      }
                      unint64_t v55 = **((void **)v54 + 3) & 0xFFFFFFFFFFFFFFF8;
                      if (v55)
                      {
                        std::string v56 = (const char *)(v55 + 16);
                        if (*(char *)(v55 + 39) < 0) {
                          std::string v56 = *(const char **)v56;
                        }
                      }
                      else
                      {
                        std::string v56 = "";
                      }
                      sub_216D0162C((uint64_t)a2, &v80);
                      uint64_t v57 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v80);
                      if (*((char *)v57 + 23) >= 0) {
                        uint64_t v59 = (uint64_t)v57;
                      }
                      else {
                        uint64_t v59 = *v57;
                      }
                      uint64_t v60 = *((void *)&v83 + 1);
                      if (!*((void *)&v83 + 1) || (*(unsigned char *)(*((void *)&v83 + 1) + 57) & 8) != 0) {
                        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v83 + 1), v58);
                      }
                      unint64_t v61 = **(void **)(v60 + 24) & 0xFFFFFFFFFFFFFFF8;
                      if (v61)
                      {
                        unint64_t v62 = (const char *)(v61 + 16);
                        if (*(char *)(v61 + 39) < 0) {
                          unint64_t v62 = *(const char **)v62;
                        }
                      }
                      else
                      {
                        unint64_t v62 = "";
                      }
                      sub_216D0162C((uint64_t)&v83, &v79);
                      std::string::size_type v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v79);
                      if (*((char *)v63 + 23) >= 0) {
                        uint64_t v64 = (uint64_t)v63;
                      }
                      else {
                        uint64_t v64 = *v63;
                      }
                      unint64_t v67 = *(void *)sub_216D563F8(&v90) & 0xFFFFFFFFFFFFFFF8;
                      if (v67)
                      {
                        long long v68 = (const char *)(v67 + 16);
                        if (*(char *)(v67 + 39) < 0) {
                          long long v68 = *(const char **)v68;
                        }
                      }
                      else
                      {
                        long long v68 = "";
                      }
                      long long v69 = v91;
                      if (!v91 || (*((unsigned char *)v91 + 57) & 8) != 0) {
                        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v91, v65);
                      }
                      unint64_t v70 = **((void **)v69 + 3) & 0xFFFFFFFFFFFFFFF8;
                      if (v70)
                      {
                        long long v71 = (const char *)(v70 + 16);
                        if (*(char *)(v70 + 39) < 0) {
                          long long v71 = *(const char **)v71;
                        }
                      }
                      else
                      {
                        long long v71 = "";
                      }
                      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connectabe %s <%s> can only have Connectable Container ancestors up to %s ancestor <%s>, but parent %s is a %s", (const char *)v65, v66, v56, v59, v62, v64, v68, v71);
                      sub_217046768((uint64_t *)this + 2, (long long *)v81);
                      if (v82 < 0) {
                        operator delete(v81[0]);
                      }
                      sub_21697B754(&v79);
                      sub_21697B754(&v80);
                    }
                    if ((v86 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85);
                    sub_21697C414(&v84);
                    if (*((void *)&v83 + 1)) {
                      sub_216D16E0C(*((atomic_ullong **)&v83 + 1));
                    }
                  }
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__p);
              }
            }
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v95);
    }
  }
  if ((v94 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v93);
  sub_21697C414(&v92);
  if (v91) {
    sub_216D16E0C((atomic_ullong *)v91);
  }
}

void sub_217048314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a33);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v38 - 104));
  sub_216D16AD8(v38 - 136);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::HasGprimAncestor(uint64_t **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216D0162C((uint64_t)a2, v18);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698EFF0((uint64_t)(this + 11), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
  if (this + 12 == (uint64_t **)v4)
  {
    uint64_t v6 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
    if (*(void *)v18 == *v6)
    {
      unint64_t v13 = v18;
      uint64_t IsA = 0;
      *((unsigned char *)sub_217051CE4(this + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v18, (uint64_t)&unk_2174BFD90, &v13)+ 36) = 0;
    }
    else
    {
      sub_216D6B1F8((uint64_t)a2, (uint64_t)&v13);
      HasGprimAncestor = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::HasGprimAncestor((pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
      if (HasGprimAncestor)
      {
        uint64_t IsA = 1;
      }
      else
      {
        StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::_GetStaticTfType(HasGprimAncestor);
        SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v9);
        uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v11);
      }
      unint64_t v19 = v18;
      *((unsigned char *)sub_217051CE4(this + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v18, (uint64_t)&unk_2174BFD90, &v19)+ 36) = IsA;
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
    }
  }
  else
  {
    unint64_t v13 = v18;
    uint64_t IsA = *((unsigned char *)sub_217051CE4(this + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v18, (uint64_t)&unk_2174BFD90, &v13)+ 36) != 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18[1]);
  sub_21697C414(v18);
  return IsA;
}

void sub_2170485AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::FindConnectableAncestor@<X0>(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D0162C((uint64_t)a2, (int *)&v34);
  uint64_t v6 = this + 14;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216CF7EAC((uint64_t)(this + 14), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
  if (this + 15 == (uint64_t **)v7)
  {
    int v11 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    if (v34 == *v11)
    {
      LODWORD(v29) = 1;
      unint64_t v30 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v32);
      uint64_t v33 = 0;
      uint64_t v26 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden))&v34;
      uint64_t v12 = sub_217051E00(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (uint64_t)&unk_2174BFD90, (_DWORD **)&v26);
      *((_DWORD *)v12 + 10) = v29;
      unint64_t v13 = v30;
      unint64_t v30 = 0;
      uint64_t v14 = (atomic_ullong *)v12[6];
      v12[6] = (uint64_t)v13;
      if (v14) {
        sub_216D16E0C(v14);
      }
      sub_21697DE94((int *)v12 + 14, &v31);
      sub_21697DEEC((int *)v12 + 15, &v32);
      if (&v29 == (uint64_t **)(v12 + 5))
      {
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        uint64_t v15 = v12[8];
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v12[8] = v33;
        uint64_t v33 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_21697C414(&v31);
      if (v30) {
        sub_216D16E0C(v30);
      }
      *(_DWORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
      *(void *)(a3 + 24) = 0;
    }
    else
    {
      sub_216D6B1F8((uint64_t)a2, (uint64_t)&v29);
      pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker::FindConnectableAncestor((pxrInternal__aapl__pxrReserved__::UsdUtilsPrimEncapsulationChecker *)this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v29);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v16) & 1) == 0)
      {
        uint64_t v18 = *((void *)a2 + 1);
        if (!v18 || (*(unsigned char *)(v18 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v17);
        }
        if (**(void **)(v18 + 24))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v26, a2);
          uint64_t v28 = 0;
          uint64_t v26 = off_26C76D8C8;
          if (v27
            && (*(unsigned char *)(v27 + 57) & 8) == 0
            && off_26C76D8E8((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v26))
          {
            *(_DWORD *)a3 = *(_DWORD *)a2;
            uint64_t v19 = *((void *)a2 + 1);
            if (v19) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 48), 1uLL, memory_order_relaxed);
            }
            unint64_t v20 = *(atomic_ullong **)(a3 + 8);
            *(void *)(a3 + 8) = v19;
            if (v20) {
              sub_216D16E0C(v20);
            }
            sub_2169C487C((int *)(a3 + 16), (_DWORD *)a2 + 4);
            sub_2169C48D4((int *)(a3 + 20), (_DWORD *)a2 + 5);
            sub_2168D2318((void *)(a3 + 24), (void *)a2 + 3);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v26);
        }
      }
      uint64_t v26 = (void (**)(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *__hidden))&v34;
      unint64_t v21 = sub_217051E00(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (uint64_t)&unk_2174BFD90, (_DWORD **)&v26);
      unint64_t v22 = v21;
      *((_DWORD *)v21 + 10) = *(_DWORD *)a3;
      uint64_t v23 = *(void *)(a3 + 8);
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 48), 1uLL, memory_order_relaxed);
      }
      unint64_t v24 = (atomic_ullong *)v21[6];
      v22[6] = v23;
      if (v24) {
        sub_216D16E0C(v24);
      }
      sub_2169C487C((int *)v22 + 14, (_DWORD *)(a3 + 16));
      sub_2169C48D4((int *)v22 + 15, (_DWORD *)(a3 + 20));
      sub_2168D2318(v22 + 8, (void *)(a3 + 24));
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
      sub_21697C414(&v31);
      if (v30) {
        sub_216D16E0C(v30);
      }
    }
  }
  else
  {
    unint64_t v29 = &v34;
    long long v8 = sub_217051E00(this + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (uint64_t)&unk_2174BFD90, (_DWORD **)&v29);
    *(_DWORD *)a3 = *((_DWORD *)v8 + 10);
    uint64_t v9 = v8[6];
    *(void *)(a3 + 8) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 48), 1uLL, memory_order_relaxed);
    }
    sub_216981010((_DWORD *)(a3 + 16), (_DWORD *)v8 + 14);
    sub_21698105C((_DWORD *)(a3 + 20), (_DWORD *)v8 + 15);
    uint64_t v10 = v8[8];
    *(void *)(a3 + 24) = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  return sub_21697C414(&v34);
}

void sub_2170489DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a9);
  sub_216D16AD8(v17);
  sub_216D16AD8((uint64_t)&a13);
  sub_21697B754(&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v5);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v7))
  {
    long long v8 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v30, a2);
    unint64_t v30 = &unk_26C76DDF0;
    if (v31 && (*(unsigned char *)(v31 + 57) & 8) == 0 && (off_26C76DE10(v8) & 1) != 0)
    {
      uint64_t v29 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v30, (pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    }
    sub_216D0162C((uint64_t)a2, &v27);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
    if (*((char *)String + 23) >= 0) {
      uint64_t v12 = (uint64_t)String;
    }
    else {
      uint64_t v12 = *String;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid shader prim <%s>", v10, v11, v12);
    unint64_t v13 = *((void *)this + 7);
    unint64_t v14 = *((void *)this + 6);
    if (v14 >= v13)
    {
      uint64_t v16 = *((void *)this + 5);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v18;
      }
      __p[4] = (char *)this + 56;
      if (v20) {
        unint64_t v21 = (char *)sub_216782ED8((uint64_t)this + 56, v20);
      }
      else {
        unint64_t v21 = 0;
      }
      unint64_t v22 = &v21[24 * v17];
      __p[0] = v21;
      __p[1] = v22;
      __p[3] = &v21[24 * v20];
      long long v23 = v32;
      *((void *)v22 + 2) = v33;
      *(_OWORD *)unint64_t v22 = v23;
      uint64_t v33 = 0;
      long long v32 = 0uLL;
      __p[2] = v22 + 24;
      sub_216790CCC((uint64_t *)this + 5, __p);
      uint64_t v24 = *((void *)this + 6);
      sub_216790E64((uint64_t)__p);
      int v25 = SHIBYTE(v33);
      *((void *)this + 6) = v24;
      if (v25 < 0) {
        operator delete((void *)v32);
      }
    }
    else
    {
      long long v15 = v32;
      *(void *)(v14 + 16) = v33;
      *(_OWORD *)unint64_t v14 = v15;
      uint64_t v33 = 0;
      long long v32 = 0uLL;
      *((void *)this + 6) = v14 + 24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v30);
  }
}

void sub_2170495C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a15);
  sub_216F74530((uint64_t)&a22);
  sub_216F74530((uint64_t)&a28);
  if ((a37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F74530((uint64_t)&a38);
  sub_21682E578((uint64_t)&a45);
  sub_216F74530((uint64_t)&a54);
  uint64_t v56 = *(void *)(v54 - 248);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v54 - 240));
  sub_216D16AD8(v54 - 216);
  sub_216F80A24(v54 - 112);
  sub_216F74530(v54 - 184);
  uint64_t v57 = *(void *)(v54 - 152);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v58 = *(void *)(v54 - 144);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v54 - 136));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker::TextureIs8Bit(pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(this);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *)sub_21678C2D8((uint64_t)this + 88, (const void **)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdUtilsNormalMapTextureChecker *)((char *)this + 96) != v4;
}

void sub_21704990C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsMaterialBindingAPIAppliedChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsMaterialBindingAPIAppliedChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(a2, (uint64_t *)&v34);
  uint64_t v4 = v34;
  unint64_t v5 = v35;
  if (v34 == v35)
  {
    __p[0] = &v34;
    sub_216D6D428((void ***)__p);
  }
  else
  {
    int v6 = 0;
    do
    {
      char v7 = sub_216D563F8(v4);
      long long v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8) {
        long long v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 13) & 0xFFFFFFFFFFFFFFF8)) {
        ++v6;
      }
      v4 += 32;
    }
    while (v4 != v5);
    __p[0] = &v34;
    sub_216D6D428((void ***)__p);
    if (v6)
    {
      StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(v9);
      SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v11);
      if ((pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a2, SchemaInfo) & 1) == 0)
      {
        sub_216D0162C((uint64_t)a2, &v30);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
        if (*((char *)String + 23) >= 0) {
          uint64_t v16 = (uint64_t)String;
        }
        else {
          uint64_t v16 = *String;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found material bindings but no MaterialBindingAPI applied on the prim <%s>.", v14, v15, v16);
        unint64_t v17 = *((void *)this + 4);
        unint64_t v18 = *((void *)this + 3);
        if (v18 >= v17)
        {
          uint64_t v20 = *((void *)this + 2);
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v22;
          }
          uint64_t v38 = (char *)this + 32;
          if (v24) {
            int v25 = (char *)sub_216782ED8((uint64_t)this + 32, v24);
          }
          else {
            int v25 = 0;
          }
          uint64_t v26 = &v25[24 * v21];
          uint64_t v34 = v25;
          uint64_t v35 = v26;
          uint64_t v37 = &v25[24 * v24];
          long long v27 = *(_OWORD *)__p;
          *((void *)v26 + 2) = v33;
          *(_OWORD *)uint64_t v26 = v27;
          __p[1] = 0;
          uint64_t v33 = 0;
          __p[0] = 0;
          std::string v36 = v26 + 24;
          sub_216790CCC((uint64_t *)this + 2, &v34);
          uint64_t v28 = *((void *)this + 3);
          sub_216790E64((uint64_t)&v34);
          int v29 = SHIBYTE(v33);
          *((void *)this + 3) = v28;
          if (v29 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v19 = *(_OWORD *)__p;
          *(void *)(v18 + 16) = v33;
          *(_OWORD *)unint64_t v18 = v19;
          __p[1] = 0;
          uint64_t v33 = 0;
          __p[0] = 0;
          *((void *)this + 3) = v18 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
        sub_21697C414(&v30);
      }
    }
  }
}

void sub_217049B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsSkelBindingAPIAppliedChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsSkelBindingAPIAppliedChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t **)((char *)this + 88);
  if (*((void *)this + 11) == *((void *)this + 12))
  {
    uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "SkelBindingAPI");
    long long v71 = 0;
    uint64_t v72 = 0;
    long long v73 = 0;
    unint64_t v62 = (uint64_t **)&v71;
    LOBYTE(v63) = 0;
    int v6 = (char *)operator new(8uLL);
    long long v71 = (char **)v6;
    uint64_t v72 = (atomic_ullong *)v6;
    unint64_t v7 = (unint64_t)__p[0];
    *(void **)int v6 = __p[0];
    long long v73 = (atomic_ullong *)(v6 + 8);
    if ((v7 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v72 = (atomic_ullong *)(v6 + 8);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __p[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::BuildComposedPrimDefinition(v5, __p, (uint64_t)&v71, (char **)&v62);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    long long v8 = (char *)v62;
    if (v4 != v62 + 10)
    {
      sub_216ABF1B0(v4, v62[10], v62[11], v62[11] - v62[10]);
      long long v8 = (char *)v62;
    }
    unint64_t v62 = 0;
    if (v8)
    {
      uint64_t v9 = (void *)sub_216D12D7C((uint64_t)v8);
      operator delete(v9);
    }
    unint64_t v62 = (uint64_t **)&v71;
    sub_216889A04((void ***)&v62);
  }
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v11);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a2, SchemaInfo))
  {
    uint64_t v14 = *((void *)a2 + 1);
    if (!v14 || (*(unsigned char *)(v14 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v13);
    }
    long long v15 = *(void **)(v14 + 24);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    if (!v16) {
      uint64_t v16 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
    }
    if ((*v15 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v16 + 28) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_216D6B1F8((uint64_t)a2, (uint64_t)&v62);
      while (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62))
      {
        unint64_t v18 = v63;
        if (!v63 || (*((unsigned char *)v63 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v63, v17);
        }
        long long v19 = (void *)*((void *)v18 + 3);
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdSkelTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
        if (!v20) {
          uint64_t v20 = sub_216FE38F4(&pxrInternal__aapl__pxrReserved__::UsdSkelTokens);
        }
        if ((*v19 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 28) & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_86;
        }
        sub_216D6B1F8((uint64_t)&v62, (uint64_t)&v71);
        LODWORD(v62) = v71;
        unint64_t v21 = (pxrInternal__aapl__pxrReserved__ *)v72;
        uint64_t v72 = 0;
        unint64_t v22 = v63;
        std::string::size_type v63 = v21;
        if (v22) {
          sub_216D16E0C((atomic_ullong *)v22);
        }
        sub_21697DE94(&v64, (int *)&v73);
        sub_21697DEEC(&v65, (int *)&v73 + 1);
        if ((v66 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::string::size_type v66 = v74;
        uint64_t v74 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
        sub_21697C414(&v73);
        if (v72) {
          sub_216D16E0C(v72);
        }
      }
      sub_216D0162C((uint64_t)a2, &v67);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
      if (*((char *)String + 23) >= 0) {
        uint64_t v31 = (uint64_t)String;
      }
      else {
        uint64_t v31 = *String;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"UsdSkelBindingAPI applied on a prim <%s>, which is not of type SkelRoot or is not rooted at a prim of type SkelRoot, as required by the UsdSkel schema.", v29, v30, v31);
      unint64_t v32 = *((void *)this + 4);
      unint64_t v33 = *((void *)this + 3);
      if (v33 >= v32)
      {
        uint64_t v35 = *((void *)this + 2);
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - v35) >> 3);
        unint64_t v37 = v36 + 1;
        if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v35) >> 3);
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x555555555555555) {
          unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v39 = v37;
        }
        uint64_t v75 = (char *)this + 32;
        if (v39) {
          uint8x8_t v40 = (void **)sub_216782ED8((uint64_t)this + 32, v39);
        }
        else {
          uint8x8_t v40 = 0;
        }
        uint64_t v58 = (atomic_ullong *)&v40[3 * v36];
        long long v71 = (char **)v40;
        uint64_t v72 = v58;
        uint64_t v74 = &v40[3 * v39];
        long long v59 = *(_OWORD *)__p;
        v58[2] = v70;
        *(_OWORD *)uint64_t v58 = v59;
        __p[1] = 0;
        atomic_ullong v70 = 0;
        __p[0] = 0;
        long long v73 = v58 + 3;
        sub_216790CCC((uint64_t *)this + 2, &v71);
        uint64_t v60 = *((void *)this + 3);
        sub_216790E64((uint64_t)&v71);
        int v61 = SHIBYTE(v70);
        *((void *)this + 3) = v60;
        if (v61 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v34 = *(_OWORD *)__p;
        *(void *)(v33 + 16) = v70;
        *(_OWORD *)unint64_t v33 = v34;
        __p[1] = 0;
        atomic_ullong v70 = 0;
        __p[0] = 0;
        *((void *)this + 3) = v33 + 24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
      sub_21697C414(&v67);
LABEL_86:
      if ((v66 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v65);
      sub_21697C414(&v64);
      if (v63) {
        sub_216D16E0C((atomic_ullong *)v63);
      }
    }
  }
  else
  {
    uint64_t v74 = 0;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames((uint64_t)a2, (uint64_t)&v71, &v62);
    sub_216D3BB5C(&v71);
    unint64_t v23 = (void *)*((void *)this + 11);
    unint64_t v24 = (void *)*((void *)this + 12);
    if (v23 != v24)
    {
      while (1)
      {
        if (v62 == (uint64_t **)v63)
        {
          int v25 = (pxrInternal__aapl__pxrReserved__ *)v62;
        }
        else
        {
          int v25 = (pxrInternal__aapl__pxrReserved__ *)v62;
          while ((*(void *)v25 & 0xFFFFFFFFFFFFFFF8) != (*v23 & 0xFFFFFFFFFFFFFFF8))
          {
            int v25 = (pxrInternal__aapl__pxrReserved__ *)((char *)v25 + 8);
            if (v25 == v63)
            {
              int v25 = v63;
              break;
            }
          }
        }
        if (v25 != v63) {
          break;
        }
        if (++v23 == v24) {
          goto LABEL_81;
        }
      }
      unint64_t v26 = *v23 & 0xFFFFFFFFFFFFFFF8;
      if (v26)
      {
        long long v27 = (const char *)(v26 + 16);
        if (*(char *)(v26 + 39) < 0) {
          long long v27 = *(const char **)v27;
        }
      }
      else
      {
        long long v27 = "";
      }
      sub_216D0162C((uint64_t)a2, &v67);
      unint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
      if (*((char *)v41 + 23) >= 0) {
        uint64_t v44 = (uint64_t)v41;
      }
      else {
        uint64_t v44 = *v41;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found a UsdSkelBinding property (%s), but no SkelBindingAPI applied on the prim <%s>", v42, v43, v27, v44);
      unint64_t v45 = *((void *)this + 4);
      unint64_t v46 = *((void *)this + 3);
      if (v46 >= v45)
      {
        uint64_t v48 = *((void *)this + 2);
        unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v48) >> 3);
        unint64_t v50 = v49 + 1;
        if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v48) >> 3);
        if (2 * v51 > v50) {
          unint64_t v50 = 2 * v51;
        }
        if (v51 >= 0x555555555555555) {
          unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v52 = v50;
        }
        uint64_t v75 = (char *)this + 32;
        if (v52) {
          uint64_t v53 = (void **)sub_216782ED8((uint64_t)this + 32, v52);
        }
        else {
          uint64_t v53 = 0;
        }
        uint64_t v54 = (atomic_ullong *)&v53[3 * v49];
        long long v71 = (char **)v53;
        uint64_t v72 = v54;
        uint64_t v74 = &v53[3 * v52];
        long long v55 = *(_OWORD *)__p;
        v54[2] = v70;
        *(_OWORD *)uint64_t v54 = v55;
        __p[1] = 0;
        atomic_ullong v70 = 0;
        __p[0] = 0;
        long long v73 = v54 + 3;
        sub_216790CCC((uint64_t *)this + 2, &v71);
        uint64_t v56 = *((void *)this + 3);
        sub_216790E64((uint64_t)&v71);
        int v57 = SHIBYTE(v70);
        *((void *)this + 3) = v56;
        if (v57 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v47 = *(_OWORD *)__p;
        *(void *)(v46 + 16) = v70;
        *(_OWORD *)unint64_t v46 = v47;
        __p[1] = 0;
        atomic_ullong v70 = 0;
        __p[0] = 0;
        *((void *)this + 3) = v46 + 24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
      sub_21697C414(&v67);
    }
LABEL_81:
    long long v71 = (char **)&v62;
    sub_216889A04((void ***)&v71);
  }
}

void sub_21704A280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a15);
  sub_216D16AD8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPackageEncapsulationChecker::CheckDependencies(uint64_t *a1, uint64_t *a2, uint64_t **a3, const char **a4)
{
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v7, &v83);
  long long v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v83);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v8);
  uint64_t v10 = sub_216979288(FileFormat);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) & 1) != 0
    || (int v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v83),
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11),
        pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v12)))
  {
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v13, (uint64_t *)v76);
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)v76);
    uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v14);
    if (*(char *)(RealPath + 23) < 0)
    {
      sub_216778F24(__p, *(void **)RealPath, *(void *)(RealPath + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)RealPath;
      char v82 = *(void **)(RealPath + 16);
      *(_OWORD *)std::string __p = v16;
    }
    unint64_t v17 = v76[1];
    if (v76[1] && atomic_fetch_add_explicit((atomic_uint *volatile)v76[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v17 + 8))(v17);
    }
    unint64_t v18 = (void *)HIBYTE(v82);
    if (SHIBYTE(v82) < 0) {
      unint64_t v18 = __p[1];
    }
    if (v18)
    {
      if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)__p))
      {
        pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)__p, (uint64_t)v76);
        if (SHIBYTE(v82) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)v76;
        char v82 = v77;
        HIBYTE(v77) = 0;
        LOBYTE(v76[0]) = 0;
        if (v80 < 0)
        {
          operator delete(v78);
          if (SHIBYTE(v77) < 0) {
            operator delete(v76[0]);
          }
        }
      }
      long long v19 = *a3;
      uint64_t v20 = a3[1];
      if (*a3 != v20)
      {
        unint64_t v21 = a1 + 2;
        do
        {
          unint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v19);
          uint64_t v23 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
          if (*(char *)(v23 + 23) < 0)
          {
            sub_216778F24(__dst, *(void **)v23, *(void *)(v23 + 8));
          }
          else
          {
            long long v24 = *(_OWORD *)v23;
            uint64_t v75 = *(void *)(v23 + 16);
            *(_OWORD *)std::string __dst = v24;
          }
          char v25 = HIBYTE(v75);
          if (v75 >= 0) {
            unint64_t v26 = (void *)HIBYTE(v75);
          }
          else {
            unint64_t v26 = __dst[1];
          }
          if (v26)
          {
            long long v27 = SHIBYTE(v82) >= 0 ? (const char *)__p : (const char *)__p[0];
            size_t v28 = strlen(v27);
            if ((unint64_t)v26 < v28
              || ((size_t v29 = v28, v75 >= 0) ? (v30 = __dst) : (v30 = (void **)__dst[0]), strncmp((const char *)v30, v27, v29)))
            {
              uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v19);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v31);
              if (*(char *)(Identifier + 23) >= 0) {
                uint64_t v35 = Identifier;
              }
              else {
                uint64_t v35 = *(void *)Identifier;
              }
              if (SHIBYTE(v82) >= 0) {
                unint64_t v36 = __p;
              }
              else {
                unint64_t v36 = (void **)__p[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found loaded layer '%s' that does not belong to the package '%s'.", v33, v34, v35, v36);
              unint64_t v38 = a1[3];
              unint64_t v37 = a1[4];
              if (v38 >= v37)
              {
                unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v21) >> 3);
                unint64_t v40 = v39 + 1;
                if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v21) >> 3);
                if (2 * v41 > v40) {
                  unint64_t v40 = 2 * v41;
                }
                if (v41 >= 0x555555555555555) {
                  unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v42 = v40;
                }
                int v79 = a1 + 4;
                if (v42) {
                  uint64_t v43 = (char *)sub_216782ED8((uint64_t)(a1 + 4), v42);
                }
                else {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = &v43[24 * v39];
                v76[0] = v43;
                v76[1] = v44;
                std::string::size_type v78 = &v43[24 * v42];
                *((void *)v44 + 2) = v73;
                *(_OWORD *)uint64_t v44 = *(_OWORD *)v72;
                uint64_t v73 = 0;
                *(_OWORD *)uint64_t v72 = 0uLL;
                unint64_t v77 = v44 + 24;
                sub_216790CCC(a1 + 2, v76);
                uint64_t v45 = a1[3];
                sub_216790E64((uint64_t)v76);
                a1[3] = v45;
              }
              else
              {
                *(void *)(v38 + 16) = v73;
                *(_OWORD *)unint64_t v38 = *(_OWORD *)v72;
                a1[3] = v38 + 24;
              }
              char v25 = HIBYTE(v75);
            }
          }
          if (v25 < 0) {
            operator delete(__dst[0]);
          }
          ++v19;
        }
        while (v19 != v20);
      }
      unint64_t v46 = *a4;
      long long v47 = (uint64_t *)a4[1];
      if (*a4 != (const char *)v47)
      {
        uint64_t v48 = a1 + 2;
        do
        {
          if (SHIBYTE(v82) >= 0) {
            unint64_t v49 = __p;
          }
          else {
            unint64_t v49 = (void **)__p[0];
          }
          int v50 = v46[23];
          if (v50 >= 0) {
            size_t v51 = *((unsigned __int8 *)v46 + 23);
          }
          else {
            size_t v51 = *((void *)v46 + 1);
          }
          size_t v52 = strlen((const char *)v49);
          if (v51 < v52
            || ((size_t v55 = v52, v50 >= 0) ? (v56 = v46) : (v56 = *(const char **)v46), strncmp(v56, (const char *)v49, v55)))
          {
            int v57 = (uint64_t *)v46;
            if (v50 < 0) {
              int v57 = *(uint64_t **)v46;
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found asset reference '%s' that does not belong to the package '%s'.", v53, v54, v57, v49);
            unint64_t v59 = a1[3];
            unint64_t v58 = a1[4];
            if (v59 >= v58)
            {
              unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - *v48) >> 3);
              unint64_t v62 = v61 + 1;
              if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v48) >> 3);
              if (2 * v63 > v62) {
                unint64_t v62 = 2 * v63;
              }
              if (v63 >= 0x555555555555555) {
                unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v64 = v62;
              }
              int v79 = a1 + 4;
              if (v64) {
                int v65 = (char *)sub_216782ED8((uint64_t)(a1 + 4), v64);
              }
              else {
                int v65 = 0;
              }
              std::string::size_type v66 = &v65[24 * v61];
              v76[0] = v65;
              v76[1] = v66;
              std::string::size_type v78 = &v65[24 * v64];
              long long v67 = *(_OWORD *)__dst;
              *((void *)v66 + 2) = v75;
              *(_OWORD *)std::string::size_type v66 = v67;
              __dst[1] = 0;
              uint64_t v75 = 0;
              __dst[0] = 0;
              unint64_t v77 = v66 + 24;
              sub_216790CCC(a1 + 2, v76);
              uint64_t v68 = a1[3];
              sub_216790E64((uint64_t)v76);
              int v69 = SHIBYTE(v75);
              a1[3] = v68;
              if (v69 < 0) {
                operator delete(__dst[0]);
              }
            }
            else
            {
              long long v60 = *(_OWORD *)__dst;
              *(void *)(v59 + 16) = v75;
              *(_OWORD *)unint64_t v59 = v60;
              a1[3] = v59 + 24;
            }
          }
          v46 += 24;
        }
        while (v46 != (const char *)v47);
      }
    }
    if (SHIBYTE(v82) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = v84;
  if (v84)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v84 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_21704A960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  unint64_t v38 = *(atomic_uint **)(v36 - 96);
  if (v38)
  {
    if (atomic_fetch_add_explicit(v38 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v38 + 8))(v38);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitLayerChecker::CheckLayer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
  if (*(char *)(Identifier + 23) >= 0) {
    uint64_t v8 = Identifier;
  }
  else {
    uint64_t v8 = *(void *)Identifier;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking layer <%s>.", v6, v7, v8);
  pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg((uint64_t)a1, (uint64_t)__p);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v9);
  int v11 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(FileFormat);
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v11);
  if ((*(void *)FormatId & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)FormatId & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(FormatId);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v14 = *(_OWORD *)EmptyString;
    uint64_t v34 = EmptyString[2];
    *(_OWORD *)std::string __dst = v14;
  }
  if (a1 + 12 == (uint64_t *)sub_21678C2D8((uint64_t)(a1 + 11), (const void **)__dst))
  {
    long long v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
    if (*(char *)(v16 + 23) >= 0) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = *(void *)v16;
    }
    uint64_t v20 = __dst;
    if (v34 < 0) {
      uint64_t v20 = (void **)__dst[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Layer '%s' has unsupported formatId '%s'.", v17, v18, v19, v20);
    unint64_t v21 = a1[4];
    unint64_t v22 = a1[3];
    if (v22 >= v21)
    {
      uint64_t v23 = a1[2];
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v23) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v23) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      unint64_t v38 = a1 + 4;
      if (v27) {
        size_t v28 = (char *)sub_216782ED8((uint64_t)(a1 + 4), v27);
      }
      else {
        size_t v28 = 0;
      }
      size_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v37 = &v28[24 * v27];
      *((void *)v29 + 2) = v32;
      *(_OWORD *)size_t v29 = *(_OWORD *)v31;
      uint64_t v36 = v29 + 24;
      sub_216790CCC(a1 + 2, __p);
      uint64_t v30 = a1[3];
      sub_216790E64((uint64_t)__p);
      a1[3] = v30;
    }
    else
    {
      *(void *)(v22 + 16) = v32;
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v31;
      a1[3] = v22 + 24;
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21704ACC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  sub_216D0162C((uint64_t)a2, (int *)__dst);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__dst);
  if (*((char *)String + 23) >= 0) {
    uint64_t v7 = (uint64_t)String;
  }
  else {
    uint64_t v7 = *String;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking prim <%s>.", v5, v6, v7);
  pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg((uint64_t)this, (uint64_t)__p);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst + 1);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21697C414(__dst);
  uint64_t v10 = *((void *)a2 + 1);
  if (!v10 || (*(unsigned char *)(v10 + 57) & 8) != 0) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)a2 + 1), v9);
  }
  if ((**(void **)(v10 + 24) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((**(void **)(v10 + 24) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v12 = *(_OWORD *)EmptyString;
    uint64_t v38 = EmptyString[2];
    *(_OWORD *)std::string __dst = v12;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker *)((char *)this + 96) == (pxrInternal__aapl__pxrReserved__::UsdUtilsARKitPrimTypeChecker *)sub_21678C2D8((uint64_t)this + 88, (const void **)__dst))
  {
    unint64_t v13 = HIBYTE(v38);
    if (v38 < 0) {
      unint64_t v13 = (unint64_t)__dst[1];
    }
    if (v13 < 0xA
      || (v38 >= 0 ? (long long v14 = __dst) : (long long v14 = (void **)__dst[0]), strncmp((const char *)v14, "RealityKit", 0xAuLL)))
    {
      sub_216D0162C((uint64_t)a2, &v33);
      long long v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
      if (*((char *)v15 + 23) >= 0) {
        uint64_t v18 = (uint64_t)v15;
      }
      else {
        uint64_t v18 = *v15;
      }
      uint64_t v19 = __dst;
      if (v38 < 0) {
        uint64_t v19 = (void **)__dst[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Prim <%s> has unsupported type '%s'.", v16, v17, v18, v19);
      unint64_t v20 = *((void *)this + 4);
      unint64_t v21 = *((void *)this + 3);
      if (v21 >= v20)
      {
        uint64_t v23 = *((void *)this + 2);
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v23) >> 3);
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v23) >> 3);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v25;
        }
        unint64_t v42 = (char *)this + 32;
        if (v27) {
          size_t v28 = (char *)sub_216782ED8((uint64_t)this + 32, v27);
        }
        else {
          size_t v28 = 0;
        }
        size_t v29 = &v28[24 * v24];
        __p[0] = v28;
        __p[1] = v29;
        unint64_t v41 = &v28[24 * v27];
        long long v30 = *(_OWORD *)v35;
        *((void *)v29 + 2) = v36;
        *(_OWORD *)size_t v29 = v30;
        v35[1] = 0;
        uint64_t v36 = 0;
        v35[0] = 0;
        unint64_t v40 = v29 + 24;
        sub_216790CCC((uint64_t *)this + 2, __p);
        uint64_t v31 = *((void *)this + 3);
        sub_216790E64((uint64_t)__p);
        int v32 = SHIBYTE(v36);
        *((void *)this + 3) = v31;
        if (v32 < 0) {
          operator delete(v35[0]);
        }
      }
      else
      {
        long long v22 = *(_OWORD *)v35;
        *(void *)(v21 + 16) = v36;
        *(_OWORD *)unint64_t v21 = v22;
        v35[1] = 0;
        uint64_t v36 = 0;
        v35[0] = 0;
        *((void *)this + 3) = v21 + 24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_21697C414(&v33);
    }
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21704AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a11);
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitShaderChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsARKitShaderChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v5);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)a2, SchemaInfo, v7))
  {
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v14, a2);
    long long v14 = &unk_26C76DDF0;
    if (v15 && (*(unsigned char *)(v15 + 57) & 8) == 0 && (off_26C76DE10(v8) & 1) != 0)
    {
      sub_216D0162C((uint64_t)a2, (int *)__p);
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      if (*((char *)String + 23) >= 0) {
        uint64_t v12 = (uint64_t)String;
      }
      else {
        uint64_t v12 = *String;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking shader <%s>.", v10, v11, v12);
      pxrInternal__aapl__pxrReserved__::UsdUtilsBaseRuleChecker::Msg((uint64_t)this, (uint64_t)&v16);
      if (v17 < 0) {
        operator delete(v16);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_21697C414(__p);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSource((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v14);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v14);
  }
}

void sub_21704BC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41)
{
  uint64_t v43 = *(void *)(v41 - 160);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)(v41 - 152));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitMaterialBindingChecker::CheckPrim(pxrInternal__aapl__pxrReserved__::UsdUtilsARKitMaterialBindingChecker *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships(a2, (uint64_t *)&v95);
  uint64_t v3 = v95;
  uint64_t v4 = v96;
  if (v95 != v96)
  {
    uint64_t v5 = (void *)((char *)this + 16);
    char v80 = (char *)this + 32;
    while (1)
    {
      int v6 = sub_216D563F8(v3);
      if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8) {
        uint64_t v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*((void *)v8 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v9 = (uint64_t *)((*((void *)v8 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      if (*((char *)v9 + 23) >= 0) {
        uint64_t v10 = (const char *)v9;
      }
      else {
        uint64_t v10 = (const char *)*v9;
      }
      int v11 = *((char *)EmptyString + 23);
      if (v11 >= 0) {
        size_t v12 = *((unsigned __int8 *)EmptyString + 23);
      }
      else {
        size_t v12 = EmptyString[1];
      }
      size_t v13 = strlen(v10);
      if (v12 < v13) {
        goto LABEL_108;
      }
      size_t v14 = v13;
      uint64_t v15 = v11 >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
      if (strncmp(v15, v10, v14)) {
        goto LABEL_108;
      }
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v3, &v92);
      uint64_t v16 = (v93 - v92) >> 3;
      if (v16 == 2) {
        break;
      }
      if (v16 == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)&v85, v3);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::GetMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)&v85, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v97);
        if (!v98 || (v98[57] & 8) != 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v97);
        }
        else
        {
          char v17 = v97[4]((char **)&v97);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v97);
          if (v17)
          {
LABEL_70:
            if ((v91 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v90 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v89);
            sub_21697C414(&v88);
            if (v87) {
              sub_216D16E0C(v87);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v85 + 1);
            sub_21697C414(&v85);
            goto LABEL_107;
          }
        }
        sub_216D0162C((uint64_t)v3, &v81);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
        int v20 = *((char *)String + 23);
        uint64_t v21 = *String;
        long long v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v85);
        if (v20 >= 0) {
          unint64_t v25 = String;
        }
        else {
          unint64_t v25 = (uint64_t *)v21;
        }
        if (*((char *)v22 + 23) >= 0) {
          uint64_t v26 = (uint64_t)v22;
        }
        else {
          uint64_t v26 = *v22;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Direct material binding <%s> targets an invalid material <%s>.", v23, v24, v25, v26);
        unint64_t v27 = *((void *)this + 3);
        unint64_t v28 = *((void *)this + 4);
        if (v27 >= v28)
        {
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v5) >> 3);
          unint64_t v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v5) >> 3);
          if (2 * v43 > v42) {
            unint64_t v42 = 2 * v43;
          }
          if (v43 >= 0x555555555555555) {
            unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v44 = v42;
          }
          v101 = (char *)this + 32;
          if (v44) {
            uint64_t v45 = (uint64_t (**)(char **))sub_216782ED8((uint64_t)v80, v44);
          }
          else {
            uint64_t v45 = 0;
          }
          size_t v51 = (char *)&v45[3 * v41];
          char v97 = v45;
          v98 = v51;
          uint64_t v100 = (char *)&v45[3 * v44];
          long long v52 = *(_OWORD *)__p;
          *((void *)v51 + 2) = v84;
          *(_OWORD *)size_t v51 = v52;
          __p[1] = 0;
          uint64_t v84 = 0;
          __p[0] = 0;
          v99 = v51 + 24;
          sub_216790CCC((uint64_t *)this + 2, &v97);
          uint64_t v53 = *((void *)this + 3);
          sub_216790E64((uint64_t)&v97);
          int v54 = SHIBYTE(v84);
          *((void *)this + 3) = v53;
          if (v54 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v29 = *(_OWORD *)__p;
          *(void *)(v27 + 16) = v84;
          *(_OWORD *)unint64_t v27 = v29;
          __p[1] = 0;
          uint64_t v84 = 0;
          __p[0] = 0;
          *((void *)this + 3) = v27 + 24;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
        sub_21697C414(&v81);
        goto LABEL_70;
      }
LABEL_107:
      int v85 = (const pxrInternal__aapl__pxrReserved__::UsdRelationship **)&v92;
      sub_216981168((void ***)&v85);
LABEL_108:
      uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)((char *)v3 + 32);
      if (v3 == v4) {
        goto LABEL_109;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v85, v3);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v85, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v97);
    if (!v98 || (v98[57] & 8) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v97);
    }
    else
    {
      char v18 = v97[4]((char **)&v97);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v97);
      if (v18) {
        goto LABEL_81;
      }
    }
    sub_216D0162C((uint64_t)v3, &v81);
    long long v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
    int v31 = *((char *)v30 + 23);
    uint64_t v32 = *v30;
    int v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v86);
    if (v31 >= 0) {
      uint64_t v36 = v30;
    }
    else {
      uint64_t v36 = (uint64_t *)v32;
    }
    if (*((char *)v33 + 23) >= 0) {
      uint64_t v37 = (uint64_t)v33;
    }
    else {
      uint64_t v37 = *v33;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Collection-based material binding <%s> targets an invalid material <%s>.", v34, v35, v36, v37);
    unint64_t v38 = *((void *)this + 3);
    unint64_t v39 = *((void *)this + 4);
    if (v38 >= v39)
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v5) >> 3);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v5) >> 3);
      if (2 * v48 > v47) {
        unint64_t v47 = 2 * v48;
      }
      if (v48 >= 0x555555555555555) {
        unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v49 = v47;
      }
      v101 = (char *)this + 32;
      if (v49) {
        int v50 = (uint64_t (**)(char **))sub_216782ED8((uint64_t)v80, v49);
      }
      else {
        int v50 = 0;
      }
      size_t v55 = (char *)&v50[3 * v46];
      char v97 = v50;
      v98 = v55;
      uint64_t v100 = (char *)&v50[3 * v49];
      long long v56 = *(_OWORD *)__p;
      *((void *)v55 + 2) = v84;
      *(_OWORD *)size_t v55 = v56;
      __p[1] = 0;
      uint64_t v84 = 0;
      __p[0] = 0;
      v99 = v55 + 24;
      sub_216790CCC((uint64_t *)this + 2, &v97);
      uint64_t v57 = *((void *)this + 3);
      sub_216790E64((uint64_t)&v97);
      int v58 = SHIBYTE(v84);
      *((void *)this + 3) = v57;
      if (v58 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v40 = *(_OWORD *)__p;
      *(void *)(v38 + 16) = v84;
      *(_OWORD *)unint64_t v38 = v40;
      __p[1] = 0;
      uint64_t v84 = 0;
      __p[0] = 0;
      *((void *)this + 3) = v38 + 24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_21697C414(&v81);
LABEL_81:
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v85, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v97);
    if (!v98 || (v98[57] & 8) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v97);
    }
    else
    {
      char v59 = v97[4]((char **)&v97);
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v97);
      if (v59)
      {
LABEL_106:
        sub_216F8BE28((uint64_t)&v85);
        goto LABEL_107;
      }
    }
    sub_216D0162C((uint64_t)v3, &v81);
    long long v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
    int v61 = *((char *)v60 + 23);
    uint64_t v62 = *v60;
    unint64_t v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v86);
    if (v61 >= 0) {
      std::string::size_type v66 = v60;
    }
    else {
      std::string::size_type v66 = (uint64_t *)v62;
    }
    if (*((char *)v63 + 23) >= 0) {
      uint64_t v67 = (uint64_t)v63;
    }
    else {
      uint64_t v67 = *v63;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Collection-based material binding <%s> targets an invalid collection <%s>.", v64, v65, v66, v67);
    unint64_t v68 = *((void *)this + 3);
    unint64_t v69 = *((void *)this + 4);
    if (v68 >= v69)
    {
      unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v5) >> 3);
      unint64_t v72 = v71 + 1;
      if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v5) >> 3);
      if (2 * v73 > v72) {
        unint64_t v72 = 2 * v73;
      }
      if (v73 >= 0x555555555555555) {
        unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v74 = v72;
      }
      v101 = (char *)this + 32;
      if (v74) {
        uint64_t v75 = (uint64_t (**)(char **))sub_216782ED8((uint64_t)v80, v74);
      }
      else {
        uint64_t v75 = 0;
      }
      uint64_t v76 = (char *)&v75[3 * v71];
      char v97 = v75;
      v98 = v76;
      uint64_t v100 = (char *)&v75[3 * v74];
      long long v77 = *(_OWORD *)__p;
      *((void *)v76 + 2) = v84;
      *(_OWORD *)uint64_t v76 = v77;
      __p[1] = 0;
      uint64_t v84 = 0;
      __p[0] = 0;
      v99 = v76 + 24;
      sub_216790CCC((uint64_t *)this + 2, &v97);
      uint64_t v78 = *((void *)this + 3);
      sub_216790E64((uint64_t)&v97);
      int v79 = SHIBYTE(v84);
      *((void *)this + 3) = v78;
      if (v79 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v70 = *(_OWORD *)__p;
      *(void *)(v68 + 16) = v84;
      *(_OWORD *)unint64_t v68 = v70;
      __p[1] = 0;
      uint64_t v84 = 0;
      __p[0] = 0;
      *((void *)this + 3) = v68 + 24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_21697C414(&v81);
    goto LABEL_106;
  }
LABEL_109:
  int v85 = &v95;
  sub_216D6D428((void ***)&v85);
}

void sub_21704C608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a16);
  sub_216F8BE28((uint64_t)&a23);
  a23 = &a30;
  sub_216981168((void ***)&a23);
  a23 = (char *)(v30 - 152);
  sub_216D6D428((void ***)&a23);
  _Unwind_Resume(a1);
}

_DWORD *sub_21704C740(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v4 = *(atomic_ullong **)(a1 + 16);
  if (v4) {
    sub_216D16E0C(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsARKitFileExtensionChecker::CheckZipFile(uint64_t *a1, pxrInternal__aapl__pxrReserved__::UsdZipFile *this, uint64_t **a3)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::begin(this, &v33);
  uint64_t v5 = a1 + 2;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(__p);
    BOOL v6 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((void **)&v33, (void **)__p);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(__p);
    if (!v6) {
      break;
    }
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v7);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator*(&v33, __p);
    pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p[0]);
    }
    if (a1 + 12 == (uint64_t *)sub_21678C2D8((uint64_t)(a1 + 11), (const void **)v31))
    {
      double v11 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator->((uint64_t)&v33, (uint64_t)v27);
      size_t v12 = (void **)v27[0];
      if (v28 >= 0) {
        size_t v12 = v27;
      }
      size_t v13 = *a3;
      if (*((char *)a3 + 23) >= 0) {
        size_t v13 = (uint64_t *)a3;
      }
      size_t v14 = v31;
      if (v32 < 0) {
        size_t v14 = (void **)v31[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"File '%s' in package '%s' has an unknown or unsupported extension '%s'.", v9, v10, v11, v12, v13, v14);
      unint64_t v15 = a1[3];
      unint64_t v16 = a1[4];
      if (v15 >= v16)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *v5) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v5) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        uint64_t v37 = a1 + 4;
        if (v21) {
          long long v22 = (char *)sub_216782ED8((uint64_t)(a1 + 4), v21);
        }
        else {
          long long v22 = 0;
        }
        uint64_t v23 = &v22[24 * v18];
        __p[0] = v22;
        __p[1] = v23;
        uint64_t v36 = &v22[24 * v21];
        long long v24 = *(_OWORD *)v29;
        *((void *)v23 + 2) = v30;
        *(_OWORD *)uint64_t v23 = v24;
        v29[1] = 0;
        uint64_t v30 = 0;
        v29[0] = 0;
        uint64_t v35 = v23 + 24;
        sub_216790CCC(a1 + 2, __p);
        uint64_t v25 = a1[3];
        sub_216790E64((uint64_t)__p);
        int v26 = SHIBYTE(v30);
        a1[3] = v25;
        if (v26 < 0) {
          operator delete(v29[0]);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)v29;
        *(void *)(v15 + 16) = v30;
        *(_OWORD *)unint64_t v15 = v17;
        v29[1] = 0;
        uint64_t v30 = 0;
        v29[0] = 0;
        a1[3] = v15 + 24;
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator++((uint64_t)&v33);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v33);
}

void sub_21704CA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&a30);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::UsdUtilsComplianceChecker(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this, int a2, char a3, char a4, char a5, char a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *((void *)this + 14) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((unsigned char *)this + 120) = a2;
  *((unsigned char *)this + 121) = a3;
  *((unsigned char *)this + 122) = a4;
  *((unsigned char *)this + 123) = a5;
  *((unsigned char *)this + 124) = a6;
  uint64_t v10 = operator new(0x58uLL);
  v10[8] = a5;
  v10[9] = a2;
  v10[10] = a6;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((void *)v10 + 10) = 0;
  *(void *)uint64_t v10 = &unk_26C7708B8;
  int v34 = v10;
  double v11 = operator new(0x58uLL);
  v11[8] = a5;
  v11[9] = a2;
  v11[10] = a6;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((void *)v11 + 10) = 0;
  *(void *)double v11 = &unk_26C770950;
  uint64_t v35 = v11;
  size_t v12 = operator new(0x58uLL);
  v12[8] = a5;
  v12[9] = a2;
  v12[10] = a6;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((void *)v12 + 10) = 0;
  *(void *)size_t v12 = &unk_26C7709D8;
  uint64_t v36 = v12;
  size_t v13 = operator new(0x58uLL);
  unsigned char v13[8] = a5;
  v13[9] = a2;
  v13[10] = a6;
  *((_OWORD *)v13 + 1) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((void *)v13 + 10) = 0;
  *(void *)size_t v13 = &unk_26C770A60;
  uint64_t v37 = v13;
  size_t v14 = operator new(0x90uLL);
  sub_2170507E4((uint64_t)v14, a5, a2, a6);
  unint64_t v38 = v14;
  unint64_t v15 = operator new(0x88uLL);
  int v16 = *((unsigned __int8 *)this + 123);
  LODWORD(v14) = *((unsigned __int8 *)this + 120);
  int v17 = *((unsigned __int8 *)this + 124);
  v15[8] = v16;
  v15[9] = (_BYTE)v14;
  v15[10] = v17;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *(void *)unint64_t v15 = &unk_26C770B70;
  *((void *)v15 + 12) = 0;
  *((void *)v15 + 10) = 0;
  *((void *)v15 + 11) = v15 + 96;
  *((void *)v15 + 16) = 0;
  *((void *)v15 + 15) = 0;
  *((void *)v15 + 13) = 0;
  *((void *)v15 + 14) = v15 + 120;
  unint64_t v39 = v15;
  unint64_t v18 = operator new(0x80uLL);
  sub_217050BA4((uint64_t)v18, v16 != 0, v14 != 0, v17 != 0);
  v40[0] = v18;
  unint64_t v19 = operator new(0x58uLL);
  LOBYTE(v18) = *((unsigned char *)this + 123);
  LOBYTE(v16) = *((unsigned char *)this + 120);
  LOBYTE(v14) = *((unsigned char *)this + 124);
  v19[8] = (_BYTE)v18;
  v19[9] = v16;
  v19[10] = (_BYTE)v14;
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *((_OWORD *)v19 + 4) = 0u;
  *((void *)v19 + 10) = 0;
  *(void *)unint64_t v19 = &unk_26C770C80;
  v40[1] = v19;
  unint64_t v20 = operator new(0x70uLL);
  v20[8] = (_BYTE)v18;
  v20[9] = v16;
  v20[10] = (_BYTE)v14;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *((void *)v20 + 10) = 0;
  *((void *)v20 + 11) = 0;
  *(void *)unint64_t v20 = &unk_26C770D08;
  *((void *)v20 + 12) = 0;
  *((void *)v20 + 13) = 0;
  v40[2] = v20;
  sub_21677CC7C((char *)this, (char *)&v34, (uint64_t)&v41, 9uLL);
  if (a2)
  {
    uint64_t v21 = *((void *)this + 1);
    long long v22 = operator new(0x70uLL);
    sub_217050DC0((uint64_t)v22, *((unsigned char *)this + 123), *((unsigned char *)this + 120), *((unsigned char *)this + 124));
    int v34 = v22;
    uint64_t v23 = operator new(0x70uLL);
    sub_217050F50((uint64_t)v23, *((unsigned char *)this + 123), *((unsigned char *)this + 120), *((unsigned char *)this + 124));
    uint64_t v35 = v23;
    long long v24 = operator new(0x70uLL);
    sub_217051284((uint64_t)v24, *((unsigned char *)this + 123), *((unsigned char *)this + 120), *((unsigned char *)this + 124));
    uint64_t v36 = v24;
    uint64_t v25 = operator new(0x58uLL);
    int v26 = *((unsigned __int8 *)this + 123);
    int v27 = *((unsigned __int8 *)this + 120);
    int v28 = *((unsigned __int8 *)this + 124);
    v25[8] = v26;
    v25[9] = v27;
    v25[10] = v28;
    *((_OWORD *)v25 + 1) = 0u;
    *((_OWORD *)v25 + 2) = 0u;
    *((_OWORD *)v25 + 3) = 0u;
    *((_OWORD *)v25 + 4) = 0u;
    *((void *)v25 + 10) = 0;
    *(void *)uint64_t v25 = &unk_26C770FB0;
    uint64_t v37 = v25;
    long long v29 = operator new(0x70uLL);
    sub_217051400((uint64_t)v29, v26 != 0, v27 != 0, v28 != 0);
    unint64_t v38 = v29;
    uint64_t v30 = operator new(0x58uLL);
    char v31 = *((unsigned char *)this + 120);
    char v32 = *((unsigned char *)this + 124);
    v30[8] = *((unsigned char *)this + 123);
    v30[9] = v31;
    v30[10] = v32;
    *((_OWORD *)v30 + 1) = 0u;
    *((_OWORD *)v30 + 2) = 0u;
    *((_OWORD *)v30 + 3) = 0u;
    *((_OWORD *)v30 + 4) = 0u;
    *((void *)v30 + 10) = 0;
    *(void *)uint64_t v30 = &unk_26C770D90;
    unint64_t v39 = v30;
    sub_216891650((uint64_t)this, v21, (char *)&v34, (char *)v40, 6);
  }
  return this;
}

void sub_21704CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  operator delete(v11);
  sub_21678A498(v10, *(char **)(v9 + 104));
  a9 = v9 + 72;
  sub_216782F20((void ***)&a9);
  sub_216782F20((void ***)&a9);
  a9 = v9 + 24;
  sub_216782F20((void ***)&a9);
  size_t v13 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::~UsdUtilsComplianceChecker(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = (void *)*((void *)this + 1);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  sub_21678A498((uint64_t)this + 96, *((char **)this + 13));
  uint64_t v5 = (void **)((char *)this + 72);
  sub_216782F20(&v5);
  uint64_t v5 = (void **)((char *)this + 48);
  sub_216782F20(&v5);
  uint64_t v5 = (void **)((char *)this + 24);
  sub_216782F20(&v5);
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::Msg(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 123))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    if (*(char *)(a2 + 23) >= 0)
    {
      uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    }
    else
    {
      a2 = *(void *)a2;
      uint64_t v3 = v2;
    }
    uint64_t v4 = sub_216779180(MEMORY[0x263F8C100], a2, v3);
    std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
    uint64_t v5 = std::locale::use_facet(&v6, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
    std::locale::~locale(&v6);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_21704D17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::DumpRules(uint64_t **this)
{
  uint64_t v2 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)"Checking rules: ", 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v3 = std::locale::use_facet(v25, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(v25);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v4 = *this;
  uint64_t v5 = this[1];
  if (*this != v5)
  {
    std::locale v6 = (void *)MEMORY[0x263F8C100];
    uint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v8 = *v4;
      char v26 = 10;
      strcpy((char *)v25, "----------");
      uint64_t v9 = sub_216779180(v6, (uint64_t)v25, 10);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      uint64_t v10 = std::locale::use_facet(&v22, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v22);
      std::ostream::put();
      std::ostream::flush();
      if (v26 < 0) {
        operator delete(v25[0].__locale_);
      }
      double v11 = sub_216779180(v6, (uint64_t)"[", 1);
      (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v8 + 16))(v25, v8);
      if (v26 >= 0) {
        locale = v25;
      }
      else {
        locale = v25[0].__locale_;
      }
      if (v26 >= 0) {
        uint64_t v13 = v26;
      }
      else {
        uint64_t v13 = (uint64_t)v25[1].__locale_;
      }
      size_t v14 = sub_216779180(v11, (uint64_t)locale, v13);
      unint64_t v15 = sub_216779180(v14, (uint64_t)"]:\n ", 4);
      (*(void (**)(std::locale *__return_ptr, uint64_t))(*(void *)v8 + 24))(&v22, v8);
      if ((v24 & 0x80u) == 0) {
        int v16 = &v22;
      }
      else {
        int v16 = v22.__locale_;
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v17 = v24;
      }
      else {
        uint64_t v17 = v23;
      }
      unint64_t v18 = sub_216779180(v15, (uint64_t)v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
      unint64_t v19 = std::locale::use_facet(&v27, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v24 < 0) {
        operator delete(v22.__locale_);
      }
      if (v26 < 0) {
        operator delete(v25[0].__locale_);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  char v26 = 10;
  strcpy((char *)v25, "----------");
  unint64_t v20 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)v25, 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  uint64_t v21 = std::locale::use_facet(&v22, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (v26 < 0) {
    operator delete(v25[0].__locale_);
  }
}

void sub_21704D584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::GetWarnings(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_21680BC90((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3));
  uint64_t v4 = (long long *)*((void *)this + 3);
  uint64_t v5 = (long long *)*((void *)this + 4);
  if (v4 != v5)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (v6 >= *(void *)(a2 + 16))
      {
        unint64_t v6 = sub_2168DF188((uint64_t *)a2, v4);
      }
      else
      {
        sub_2167E99E4((void *)a2, v4);
        v6 += 24;
      }
      *(void *)(a2 + 8) = v6;
      uint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  uint64_t v7 = *(void **)this;
  unsigned __int8 v24 = (void *)*((void *)this + 1);
  if (*(void **)this != v24)
  {
    do
    {
      uint64_t v8 = *v7;
      (*(void (**)(void **__return_ptr, void))(*(void *)*v7 + 16))(v31, *v7);
      uint64_t v25 = v7;
      int v28 = 0;
      long long v29 = 0;
      uint64_t v30 = 0;
      sub_216812BD8((char *)&v28, *(long long **)(v8 + 64), *(long long **)(v8 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 72) - *(void *)(v8 + 64)) >> 3));
      double v11 = v28;
      size_t v12 = v29;
      while (v11 != v12)
      {
        uint64_t v13 = v11;
        if (*((char *)v11 + 23) < 0) {
          uint64_t v13 = (uint64_t *)*v11;
        }
        if (v32 >= 0) {
          size_t v14 = v31;
        }
        else {
          size_t v14 = (void **)v31[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (may violate '%s')", v9, v10, v13, v14);
        unint64_t v16 = *(void *)(a2 + 8);
        unint64_t v15 = *(void *)(a2 + 16);
        if (v16 >= v15)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a2) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a2) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          v33[4] = (void **)(a2 + 16);
          if (v20) {
            uint64_t v21 = (void **)sub_216782ED8(a2 + 16, v20);
          }
          else {
            uint64_t v21 = 0;
          }
          std::locale v22 = &v21[3 * v17];
          v33[0] = v21;
          v33[1] = v22;
          v33[3] = &v21[3 * v20];
          v22[2] = v27;
          *(_OWORD *)std::locale v22 = *(_OWORD *)__p;
          std::locale v27 = 0;
          *(_OWORD *)std::string __p = 0uLL;
          _OWORD v33[2] = v22 + 3;
          sub_216790CCC((uint64_t *)a2, v33);
          uint64_t v23 = *(void *)(a2 + 8);
          sub_216790E64((uint64_t)v33);
          *(void *)(a2 + 8) = v23;
        }
        else
        {
          *(void *)(v16 + 16) = v27;
          *(_OWORD *)unint64_t v16 = *(_OWORD *)__p;
          *(void *)(a2 + 8) = v16 + 24;
        }
        v11 += 3;
      }
      v33[0] = (void **)&v28;
      sub_216782F20(v33);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v7 = v25 + 1;
    }
    while (v25 + 1 != v24);
  }
}

void sub_21704D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::GetErrors(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_21680BC90((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3));
  uint64_t v4 = (long long *)*((void *)this + 6);
  uint64_t v5 = (long long *)*((void *)this + 7);
  if (v4 != v5)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (v6 >= *(void *)(a2 + 16))
      {
        unint64_t v6 = sub_2168DF188((uint64_t *)a2, v4);
      }
      else
      {
        sub_2167E99E4((void *)a2, v4);
        v6 += 24;
      }
      *(void *)(a2 + 8) = v6;
      uint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  uint64_t v7 = *(void **)this;
  unsigned __int8 v24 = (void *)*((void *)this + 1);
  if (*(void **)this != v24)
  {
    do
    {
      uint64_t v8 = *v7;
      (*(void (**)(void **__return_ptr, void))(*(void *)*v7 + 16))(v31, *v7);
      uint64_t v25 = v7;
      int v28 = 0;
      long long v29 = 0;
      uint64_t v30 = 0;
      sub_216812BD8((char *)&v28, *(long long **)(v8 + 40), *(long long **)(v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 3));
      double v11 = v28;
      size_t v12 = v29;
      while (v11 != v12)
      {
        if (v32 >= 0) {
          uint64_t v13 = v31;
        }
        else {
          uint64_t v13 = (void **)v31[0];
        }
        size_t v14 = v11;
        if (*((char *)v11 + 23) < 0) {
          size_t v14 = (uint64_t *)*v11;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error checking rule '%s': %s", v9, v10, v13, v14);
        unint64_t v16 = *(void *)(a2 + 8);
        unint64_t v15 = *(void *)(a2 + 16);
        if (v16 >= v15)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a2) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a2) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          v33[4] = (void **)(a2 + 16);
          if (v20) {
            uint64_t v21 = (void **)sub_216782ED8(a2 + 16, v20);
          }
          else {
            uint64_t v21 = 0;
          }
          std::locale v22 = &v21[3 * v17];
          v33[0] = v21;
          v33[1] = v22;
          v33[3] = &v21[3 * v20];
          v22[2] = v27;
          *(_OWORD *)std::locale v22 = *(_OWORD *)__p;
          std::locale v27 = 0;
          *(_OWORD *)std::string __p = 0uLL;
          _OWORD v33[2] = v22 + 3;
          sub_216790CCC((uint64_t *)a2, v33);
          uint64_t v23 = *(void *)(a2 + 8);
          sub_216790E64((uint64_t)v33);
          *(void *)(a2 + 8) = v23;
        }
        else
        {
          *(void *)(v16 + 16) = v27;
          *(_OWORD *)unint64_t v16 = *(_OWORD *)__p;
          *(void *)(a2 + 8) = v16 + 24;
        }
        v11 += 3;
      }
      v33[0] = (void **)&v28;
      sub_216782F20(v33);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v7 = v25 + 1;
    }
    while (v25 + 1 != v24);
  }
}

void sub_21704DBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::GetFailedChecks(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_21680BC90((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 3));
  uint64_t v4 = (long long *)*((void *)this + 9);
  uint64_t v5 = (long long *)*((void *)this + 10);
  if (v4 != v5)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    do
    {
      if (v6 >= *(void *)(a2 + 16))
      {
        unint64_t v6 = sub_2168DF188((uint64_t *)a2, v4);
      }
      else
      {
        sub_2167E99E4((void *)a2, v4);
        v6 += 24;
      }
      *(void *)(a2 + 8) = v6;
      uint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  uint64_t v7 = *(void **)this;
  unsigned __int8 v24 = (void *)*((void *)this + 1);
  if (*(void **)this != v24)
  {
    do
    {
      uint64_t v8 = *v7;
      (*(void (**)(void **__return_ptr, void))(*(void *)*v7 + 16))(v31, *v7);
      uint64_t v25 = v7;
      int v28 = 0;
      long long v29 = 0;
      uint64_t v30 = 0;
      sub_216812BD8((char *)&v28, *(long long **)(v8 + 16), *(long long **)(v8 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 3));
      double v11 = v28;
      size_t v12 = v29;
      while (v11 != v12)
      {
        uint64_t v13 = v11;
        if (*((char *)v11 + 23) < 0) {
          uint64_t v13 = (uint64_t *)*v11;
        }
        if (v32 >= 0) {
          size_t v14 = v31;
        }
        else {
          size_t v14 = (void **)v31[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s (fails '%s')", v9, v10, v13, v14);
        unint64_t v16 = *(void *)(a2 + 8);
        unint64_t v15 = *(void *)(a2 + 16);
        if (v16 >= v15)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a2) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a2) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          v33[4] = (void **)(a2 + 16);
          if (v20) {
            uint64_t v21 = (void **)sub_216782ED8(a2 + 16, v20);
          }
          else {
            uint64_t v21 = 0;
          }
          std::locale v22 = &v21[3 * v17];
          v33[0] = v21;
          v33[1] = v22;
          v33[3] = &v21[3 * v20];
          v22[2] = v27;
          *(_OWORD *)std::locale v22 = *(_OWORD *)__p;
          std::locale v27 = 0;
          *(_OWORD *)std::string __p = 0uLL;
          _OWORD v33[2] = v22 + 3;
          sub_216790CCC((uint64_t *)a2, v33);
          uint64_t v23 = *(void *)(a2 + 8);
          sub_216790E64((uint64_t)v33);
          *(void *)(a2 + 8) = v23;
        }
        else
        {
          *(void *)(v16 + 16) = v27;
          *(_OWORD *)unint64_t v16 = *(_OWORD *)__p;
          *(void *)(a2 + 8) = v16 + 24;
        }
        v11 += 3;
      }
      v33[0] = (void **)&v28;
      sub_216782F20(v33);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v7 = v25 + 1;
    }
    while (v25 + 1 != v24);
  }
}

void sub_21704DEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckCompliance(uint64_t a1, uint64_t a2)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile(a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::UsdUtilsCoalescingDiagnosticDelegate((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)v117);
    if (*(unsigned char *)(a1 + 123))
    {
      uint64_t v9 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)"Opening ", 8);
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *(void *)a2;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v12 = *(void *)(a2 + 8);
      }
      uint64_t v13 = sub_216779180(v9, v11, v12);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      size_t v14 = std::locale::use_facet((const std::locale *)&v118, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale((std::locale *)&v118);
      std::ostream::put();
      std::ostream::flush();
    }
    pxrInternal__aapl__pxrReserved__::UsdStage::Open(a2, 0, &v116);
    pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::TakeUncoalescedDiagnostics((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)v117, v115);
    unint64_t v16 = *(uint64_t **)a1;
    unint64_t v17 = *(uint64_t **)(a1 + 8);
    while (v16 != v17)
    {
      uint64_t v18 = *v16;
      (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__ **))(*(void *)*v16 + 40))(*v16, &v116);
      unint64_t v15 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v18 + 56))(v18, v115);
      ++v16;
    }
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v15);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContext(v114, (pxrInternal__aapl__pxrReserved__::ArResolver *)Resolver);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v126, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)v114);
    v111 = 0;
    v112 = 0;
    uint64_t v113 = 0;
    memset(v110, 0, sizeof(v110));
    memset(v109, 0, sizeof(v109));
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v118);
    uint64_t v125 = 0;
    BOOL v24 = pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies((uint64_t)&v118, (uint64_t)&v111, v110, v109, (uint64_t)&v123);
    sub_217051FD0(&v123);
    if (v122 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v119) < 0)
    {
      operator delete((void *)v118);
      if (v24) {
        goto LABEL_25;
      }
    }
    else if (v24)
    {
LABEL_25:
      std::locale v27 = *(uint64_t **)a1;
      int v28 = *(uint64_t **)(a1 + 8);
      while (v27 != v28)
      {
        uint64_t v29 = *v27;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)*v27 + 64))(*v27, v109);
        (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__ **, uint64_t **, uint64_t *))(*(void *)v29 + 72))(v29, &v116, &v111, v110);
        ++v27;
      }
      if (!*(unsigned char *)(a1 + 121))
      {
        *((void *)&v123 + 1) = 0;
        v124 = 0;
        *(void *)&long long v123 = (char *)&v123 + 8;
        int v58 = v111;
        char v59 = v112;
        if (v111 != v112)
        {
          do
          {
            long long v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v58);
            FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v60);
            uint64_t v62 = sub_216979288(FileFormat);
            if (((*(uint64_t (**)(uint64_t))(*(void *)v62 + 16))(v62) & 1) != 0
              || (unint64_t v63 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v58),
                  uint64_t v64 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v63),
                  pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(v64)))
            {
              std::string::size_type v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v58);
              uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v66);
              pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(Identifier, (uint64_t)&v118);
              *(_OWORD *)v105 = v118;
              uint64_t v106 = (uint64_t)v119;
              v119 = 0;
              long long v118 = 0uLL;
              if (v122 < 0)
              {
                operator delete(__p);
                if (SHIBYTE(v119) < 0) {
                  operator delete((void *)v118);
                }
              }
              sub_21680EE0C((uint64_t **)&v123, (const void **)v105, (uint64_t)v105);
              if (SHIBYTE(v106) < 0) {
                operator delete(v105[0]);
              }
            }
            unint64_t v68 = *(uint64_t **)a1;
            unint64_t v69 = *(uint64_t **)(a1 + 8);
            while (v68 != v69)
            {
              (*(void (**)(uint64_t, uint64_t *))(*(void *)*v68 + 88))(*v68, v58);
              ++v68;
            }
            ++v58;
          }
          while (v58 != v59);
          long long v70 = (_OWORD *)v123;
          if ((long long *)v123 != (long long *)((char *)&v123 + 8))
          {
            do
            {
              pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(a1, (uint64_t)(v70 + 2), v65);
              unint64_t v71 = (void *)*((void *)v70 + 1);
              if (v71)
              {
                do
                {
                  unint64_t v72 = v71;
                  unint64_t v71 = (void *)*v71;
                }
                while (v71);
              }
              else
              {
                do
                {
                  unint64_t v72 = (_OWORD *)*((void *)v70 + 2);
                  BOOL v73 = *(void *)v72 == (void)v70;
                  long long v70 = v72;
                }
                while (!v73);
              }
              long long v70 = v72;
            }
            while (v72 != (long long *)((char *)&v123 + 8));
          }
        }
        unint64_t v74 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v116);
        uint64_t v75 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v116);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v75, (uint64_t *)v105);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v104, 0.0, 1.0);
        pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(&v118, v105, v104[0], v104[1]);
        pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v74, (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)&v118);
        sub_216BBED8C((uint64_t)&v119);
        uint64_t v76 = *((void *)&v118 + 1);
        if (*((void *)&v118 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
        }
        long long v77 = v105[1];
        if (v105[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)v105[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v77 + 8))(v77);
        }
        uint64_t v78 = sub_2170519EC(&v107, (uint64_t *)&v116);
        UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate((pxrInternal__aapl__pxrReserved__ *)v78);
        uint64_t v80 = UsdPrimDefaultPredicate[1].i64[0];
        v81.i64[0] = -8193;
        v81.i64[0] = vandq_s8(*UsdPrimDefaultPredicate, v81).u64[0];
        v81.i64[1] = vorrq_s8(*UsdPrimDefaultPredicate, (int8x16_t)vdupq_n_s64(0x2000uLL)).i64[1];
        *(int8x16_t *)v105 = v81;
        uint64_t v106 = v80;
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::Stage(&v107, v105, (uint64_t)&v118);
        uint64_t v82 = v108;
        if (v108 && atomic_fetch_add_explicit((atomic_uint *volatile)(v108 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
        }
        pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseRange(a1, (uint64_t *)&v118, 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v119 + 1);
        sub_21697C414(&v119);
        sub_21678A498((uint64_t)&v123, *((char **)&v123 + 1));
        goto LABEL_114;
      }
      uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v116);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(v36, &v107);
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v107);
      unint64_t v38 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v37);
      uint64_t v39 = sub_216979288(v38);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 16))(v39))
      {
        long long v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v107);
        uint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v40);
        pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(v41, (uint64_t)&v118);
        long long v123 = v118;
        v124 = v119;
        v119 = 0;
        long long v118 = 0uLL;
        if (v122 < 0)
        {
          operator delete(__p);
          if (SHIBYTE(v119) < 0) {
            operator delete((void *)v118);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(a1, (uint64_t)&v123, v42);
        if ((SHIBYTE(v124) & 0x80000000) == 0) {
          goto LABEL_111;
        }
        unint64_t v43 = (void *)v123;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdDescribe(&v116, v105);
        if (v106 >= 0) {
          int v85 = v105;
        }
        else {
          int v85 = (void **)v105[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Root layer of the USD stage (%s) doesn't belong to a package, but 'rootPackageOnly' is True!", v83, v84, v85);
        unint64_t v86 = *(void *)(a1 + 64);
        unint64_t v87 = *(void *)(a1 + 56);
        if (v87 >= v86)
        {
          uint64_t v93 = *(void *)(a1 + 48);
          unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - v93) >> 3);
          unint64_t v95 = v94 + 1;
          if (v94 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - v93) >> 3);
          if (2 * v96 > v95) {
            unint64_t v95 = 2 * v96;
          }
          if (v96 >= 0x555555555555555) {
            unint64_t v97 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v97 = v95;
          }
          uint64_t v121 = a1 + 64;
          if (v97) {
            v98 = (char *)sub_216782ED8(a1 + 64, v97);
          }
          else {
            v98 = 0;
          }
          v99 = &v98[24 * v94];
          *(void *)&long long v118 = v98;
          *((void *)&v118 + 1) = v99;
          std::string __p = &v98[24 * v97];
          long long v100 = v123;
          *((void *)v99 + 2) = v124;
          *(_OWORD *)v99 = v100;
          v124 = 0;
          long long v123 = 0uLL;
          v119 = v99 + 24;
          sub_216790CCC((uint64_t *)(a1 + 48), &v118);
          uint64_t v101 = *(void *)(a1 + 56);
          sub_216790E64((uint64_t)&v118);
          int v102 = SHIBYTE(v124);
          *(void *)(a1 + 56) = v101;
          if (v102 < 0) {
            operator delete((void *)v123);
          }
        }
        else
        {
          long long v88 = v123;
          *(void *)(v87 + 16) = v124;
          *(_OWORD *)unint64_t v87 = v88;
          v124 = 0;
          long long v123 = 0uLL;
          *(void *)(a1 + 56) = v87 + 24;
        }
        if ((SHIBYTE(v106) & 0x80000000) == 0) {
          goto LABEL_111;
        }
        unint64_t v43 = v105[0];
      }
      operator delete(v43);
LABEL_111:
      uint64_t v103 = v108;
      if (v108)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v108 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
        }
      }
LABEL_114:
      *(void *)&long long v118 = v109;
      sub_216782F20((void ***)&v118);
      *(void *)&long long v118 = v110;
      sub_216782F20((void ***)&v118);
      *(void *)&long long v118 = &v111;
      sub_216C0ACA8((void ***)&v118);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)&v126);
      *(void *)&long long v118 = v114;
      sub_216787968((void ***)&v118);
      *(void *)&long long v118 = v115;
      sub_217044DCC((void ***)&v118);
      sub_216E10FB8(&v116);
      pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)v117);
      return;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v44 = a2;
    }
    else {
      uint64_t v44 = *(void *)a2;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to get dependencies of %s.", v25, v26, v44);
    unint64_t v45 = *(void *)(a1 + 64);
    unint64_t v46 = *(void *)(a1 + 56);
    if (v46 >= v45)
    {
      uint64_t v48 = *(void *)(a1 + 48);
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v48) >> 3);
      unint64_t v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v48) >> 3);
      if (2 * v51 > v50) {
        unint64_t v50 = 2 * v51;
      }
      if (v51 >= 0x555555555555555) {
        unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v52 = v50;
      }
      uint64_t v121 = a1 + 64;
      if (v52) {
        uint64_t v53 = (char *)sub_216782ED8(a1 + 64, v52);
      }
      else {
        uint64_t v53 = 0;
      }
      int v89 = &v53[24 * v49];
      *(void *)&long long v118 = v53;
      *((void *)&v118 + 1) = v89;
      std::string __p = &v53[24 * v52];
      long long v90 = v123;
      *((void *)v89 + 2) = v124;
      *(_OWORD *)int v89 = v90;
      v124 = 0;
      long long v123 = 0uLL;
      v119 = v89 + 24;
      sub_216790CCC((uint64_t *)(a1 + 48), &v118);
      uint64_t v91 = *(void *)(a1 + 56);
      sub_216790E64((uint64_t)&v118);
      int v92 = SHIBYTE(v124);
      *(void *)(a1 + 56) = v91;
      if (v92 < 0) {
        operator delete((void *)v123);
      }
    }
    else
    {
      long long v47 = v123;
      *(void *)(v46 + 16) = v124;
      *(_OWORD *)unint64_t v46 = v47;
      *(void *)(a1 + 56) = v46 + 24;
    }
    goto LABEL_114;
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = *(void *)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot open file '%s' on a USD stage.", v7, v8, v19);
  unint64_t v20 = *(void *)(a1 + 64);
  unint64_t v21 = *(void *)(a1 + 56);
  if (v21 >= v20)
  {
    uint64_t v30 = *(void *)(a1 + 48);
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v30) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v30) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    uint64_t v121 = a1 + 64;
    if (v34) {
      uint64_t v35 = (char *)sub_216782ED8(a1 + 64, v34);
    }
    else {
      uint64_t v35 = 0;
    }
    int v54 = &v35[24 * v31];
    *(void *)&long long v118 = v35;
    *((void *)&v118 + 1) = v54;
    std::string __p = &v35[24 * v34];
    long long v55 = v126;
    *((void *)v54 + 2) = v127;
    *(_OWORD *)int v54 = v55;
    uint64_t v127 = 0;
    long long v126 = 0uLL;
    v119 = v54 + 24;
    sub_216790CCC((uint64_t *)(a1 + 48), &v118);
    uint64_t v56 = *(void *)(a1 + 56);
    sub_216790E64((uint64_t)&v118);
    int v57 = SHIBYTE(v127);
    *(void *)(a1 + 56) = v56;
    if (v57 < 0) {
      operator delete((void *)v126);
    }
  }
  else
  {
    long long v22 = v126;
    *(void *)(v21 + 16) = v127;
    *(_OWORD *)unint64_t v21 = v22;
    *(void *)(a1 + 56) = v21 + 24;
  }
}

void sub_21704EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, atomic_uint *a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  sub_216790E64((uint64_t)&a43);
  if (*(char *)(v43 - 137) < 0) {
    operator delete(*(void **)(v43 - 160));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20)
  {
    if (atomic_fetch_add_explicit(a20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a20 + 8))(a20);
    }
  }
  *(void *)(v43 - 160) = &a21;
  sub_216782F20((void ***)(v43 - 160));
  *(void *)(v43 - 160) = &a24;
  sub_216782F20((void ***)(v43 - 160));
  *(void *)(v43 - 160) = &a27;
  sub_216C0ACA8((void ***)(v43 - 160));
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v43 - 120));
  *(void *)(v43 - 120) = &a30;
  sub_216787968((void ***)(v43 - 120));
  *(void *)(v43 - 120) = &a33;
  sub_217044DCC((void ***)(v43 - 120));
  sub_216E10FB8(&a36);
  pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate::~UsdUtilsCoalescingDiagnosticDelegate((pxrInternal__aapl__pxrReserved__::UsdUtilsCoalescingDiagnosticDelegate *)&a37);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Checking package <%s>", (const char *)a2, a3, v5);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::Msg(a1, (uint64_t)__p);
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v6);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  if (v72 < 0)
  {
    if (v71[1] != (void *)4) {
      goto LABEL_12;
    }
    int v10 = (void **)v71[0];
  }
  else
  {
    if (v72 != 4) {
      goto LABEL_12;
    }
    int v10 = v71;
  }
  if (*(_DWORD *)v10 != 2053403509)
  {
LABEL_12:
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Package at path %s has an invalid extension", v8, v9, v11);
    unint64_t v12 = *(void *)(a1 + 64);
    unint64_t v13 = *(void *)(a1 + 56);
    if (v13 < v12)
    {
      long long v14 = v69;
      *(void *)(v13 + 16) = v70;
      *(_OWORD *)unint64_t v13 = v14;
      *(void *)(a1 + 56) = v13 + 24;
      goto LABEL_42;
    }
    uint64_t v15 = *(void *)(a1 + 48);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v15) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v67 = a1 + 64;
    if (v19) {
      unint64_t v20 = (char *)sub_216782ED8(a1 + 64, v19);
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v30 = &v20[24 * v16];
    __p[0] = v20;
    __p[1] = v30;
    std::string::size_type v66 = &v20[24 * v19];
    long long v31 = v69;
    *((void *)v30 + 2) = v70;
    *(_OWORD *)uint64_t v30 = v31;
    long long v70 = 0;
    long long v69 = 0uLL;
    int v65 = v30 + 24;
    sub_216790CCC((uint64_t *)(a1 + 48), __p);
    uint64_t v32 = *(void *)(a1 + 56);
    sub_216790E64((uint64_t)__p);
    int v33 = SHIBYTE(v70);
    *(void *)(a1 + 56) = v32;
    if (v33 < 0) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner(a2, (uint64_t)__p);
    long long v69 = *(_OWORD *)__p;
    long long v70 = v65;
    __p[1] = 0;
    int v65 = 0;
    __p[0] = 0;
    if (v68 < 0)
    {
      operator delete(v66);
      if (SHIBYTE(v65) < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPackage(a1, &v69);
    if (SHIBYTE(v70) < 0) {
      operator delete((void *)v69);
    }
  }
  if (a1 + 104 == sub_21678C2D8(a1 + 96, (const void **)a2))
  {
    unint64_t v21 = sub_21680EE0C((uint64_t **)(a1 + 96), (const void **)a2, a2);
    long long v22 = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v21);
    pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)v22);
    uint64_t v25 = HIBYTE(v70);
    if (SHIBYTE(v70) < 0) {
      uint64_t v25 = *((void *)&v69 + 1);
    }
    if (v25)
    {
      pxrInternal__aapl__pxrReserved__::UsdZipFile::Open(a2, v61);
      if (v61[0])
      {
        uint64_t v29 = *(void **)a1;
        int v28 = *(void **)(a1 + 8);
        while (v29 != v28)
        {
          (*(void (**)(void, void *, uint64_t))(*(void *)*v29 + 80))(*v29, v61, a2);
          ++v29;
        }
      }
      else
      {
        unint64_t v38 = &v69;
        if (SHIBYTE(v70) < 0) {
          unint64_t v38 = (long long *)v69;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Could not open package at path '%s'", v26, v27, v38);
        unint64_t v39 = *(void *)(a1 + 64);
        unint64_t v40 = *(void *)(a1 + 56);
        if (v40 >= v39)
        {
          uint64_t v48 = *(void *)(a1 + 48);
          unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v48) >> 3);
          unint64_t v50 = v49 + 1;
          if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v48) >> 3);
          if (2 * v51 > v50) {
            unint64_t v50 = 2 * v51;
          }
          if (v51 >= 0x555555555555555) {
            unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v52 = v50;
          }
          uint64_t v67 = a1 + 64;
          if (v52) {
            uint64_t v53 = (char *)sub_216782ED8(a1 + 64, v52);
          }
          else {
            uint64_t v53 = 0;
          }
          int v57 = &v53[24 * v49];
          __p[0] = v53;
          __p[1] = v57;
          std::string::size_type v66 = &v53[24 * v52];
          long long v58 = *(_OWORD *)v62;
          *((void *)v57 + 2) = v63;
          *(_OWORD *)int v57 = v58;
          v62[1] = 0;
          uint64_t v63 = 0;
          v62[0] = 0;
          int v65 = v57 + 24;
          sub_216790CCC((uint64_t *)(a1 + 48), __p);
          uint64_t v59 = *(void *)(a1 + 56);
          sub_216790E64((uint64_t)__p);
          int v60 = SHIBYTE(v63);
          *(void *)(a1 + 56) = v59;
          if (v60 < 0) {
            operator delete(v62[0]);
          }
        }
        else
        {
          long long v41 = *(_OWORD *)v62;
          *(void *)(v40 + 16) = v63;
          *(_OWORD *)unint64_t v40 = v41;
          *(void *)(a1 + 56) = v40 + 24;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v61);
    }
    else
    {
      uint64_t v34 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to resolve package path '%s'", v23, v24, v34);
      unint64_t v35 = *(void *)(a1 + 64);
      unint64_t v36 = *(void *)(a1 + 56);
      if (v36 >= v35)
      {
        uint64_t v42 = *(void *)(a1 + 48);
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v42) >> 3);
        unint64_t v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - v42) >> 3);
        if (2 * v45 > v44) {
          unint64_t v44 = 2 * v45;
        }
        unint64_t v46 = v45 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v44;
        uint64_t v67 = a1 + 64;
        long long v47 = v46 ? (char *)sub_216782ED8(a1 + 64, v46) : 0;
        int v54 = &v47[24 * v43];
        __p[0] = v47;
        __p[1] = v54;
        std::string::size_type v66 = &v47[24 * v46];
        long long v55 = *(_OWORD *)v62;
        *((void *)v54 + 2) = v63;
        *(_OWORD *)int v54 = v55;
        v62[1] = 0;
        uint64_t v63 = 0;
        v62[0] = 0;
        int v65 = v54 + 24;
        sub_216790CCC((uint64_t *)(a1 + 48), __p);
        uint64_t v56 = *(void *)(a1 + 56);
        sub_216790E64((uint64_t)__p);
        *(void *)(a1 + 56) = v56;
      }
      else
      {
        long long v37 = *(_OWORD *)v62;
        *(void *)(v36 + 16) = v63;
        *(_OWORD *)unint64_t v36 = v37;
        *(void *)(a1 + 56) = v36 + 24;
      }
    }
    if (SHIBYTE(v70) < 0) {
LABEL_41:
    }
      operator delete((void *)v69);
  }
LABEL_42:
  if (v72 < 0) {
    operator delete(v71[0]);
  }
}

void sub_21704F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_216790E64((uint64_t)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&a10);
  if (*(char *)(v23 - 57) < 0) {
    operator delete(*(void **)(v23 - 80));
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckLayer(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)result;
  uint64_t v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      uint64_t v5 = *v2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a2);
    }
    while (v2 != v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseRange(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  unint64_t v38 = 0;
  sub_216D3ADBC(a2, (uint64_t)&v24);
  sub_216D3B00C((uint64_t)&v24, (uint64_t)&v28);
  sub_216D16CFC((uint64_t)&v32, (uint64_t *)&v29, &v30);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  sub_216D3ADBC(a2, (uint64_t)&v28);
  while (1)
  {
    uint64_t v24 = a2[1];
    uint64_t v25 = a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v26);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v26 + 1);
    LODWORD(v27) = 0;
    WORD2(v27) = 0;
    if (v29 == v25 && v28 == v24)
    {
      BOOL v5 = 1;
      if (v30 == v26 && !v31 && !BYTE4(v31)) {
        BOOL v5 = BYTE5(v31) != 0;
      }
    }
    else
    {
      BOOL v5 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
    sub_21697C414(&v26);
    if (!v5) {
      break;
    }
    sub_216D3B00C((uint64_t)&v28, (uint64_t)v19);
    sub_216D16CFC((uint64_t)&v24, (uint64_t *)&v20, &v21);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    if (v20) {
      sub_216D16E0C(v20);
    }
    if (*(unsigned char *)(a1 + 122)
      || (a3 & 1) == 0
      && v24 == v32
      && v25 == v33
      && v26 == v34
      && (v27 & 0xFFFFFFFFFFFFFFF8) == (v35 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v7 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
      while (v7 != v6)
      {
        (*(void (**)(void, uint64_t *))(*(void *)*v7 + 48))(*v7, &v24);
        ++v7;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24, (uint64_t)v19);
      pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)v19, v18);
      if (v18[0] == v18[1])
      {
        uint64_t v11 = *(void **)a1;
        int v10 = *(void **)(a1 + 8);
        while (v11 != v10)
        {
          (*(void (**)(void, uint64_t *))(*(void *)*v11 + 48))(*v11, &v24);
          ++v11;
        }
      }
      else
      {
        unint64_t v8 = v37;
        if (v37 >= v38)
        {
          uint64_t v9 = sub_217052054(&v36, (uint64_t)&v24);
        }
        else
        {
          sub_216D3B3EC((uint64_t)&v38, v37, (uint64_t)&v24);
          uint64_t v9 = v8 + 32;
        }
        unint64_t v37 = v9;
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v28);
      }
      unint64_t v39 = (void **)v18;
      sub_216782F20(&v39);
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_21697C414(&v21);
      if (v20) {
        sub_216D16E0C(v20);
      }
    }
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
    sub_21697C414(&v26);
    if (v25) {
      sub_216D16E0C(v25);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v28);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  unint64_t v12 = v37;
  if (v36 != v37)
  {
    uint64_t v13 = v36 + 16;
    do
    {
      uint64_t v14 = v13 - 16;
      LODWORD(v28) = *(_DWORD *)(v13 - 16);
      uint64_t v15 = *(atomic_ullong **)(v13 - 8);
      uint64_t v29 = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 6, 1uLL, memory_order_relaxed);
      }
      sub_216981010(&v30, (_DWORD *)v13);
      sub_21698105C((_DWORD *)&v30 + 1, (_DWORD *)(v13 + 4));
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v31 = v16;
      if ((v16 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseVariants((pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *)a1, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v28);
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
      sub_21697C414(&v30);
      if (v29) {
        sub_216D16E0C(v29);
      }
      v13 += 32;
    }
    while (v14 + 32 != v12);
  }
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_21697C414(&v34);
  if (v33) {
    sub_216D16E0C(v33);
  }
  uint64_t v32 = (void **)&v36;
  sub_216E1B384(&v32);
}

void sub_21704F8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  sub_216D16AD8((uint64_t)&a28);
  a28 = (void **)(v28 - 120);
  sub_216E1B384(&a28);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::CheckPrim(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)result;
  uint64_t v3 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v3)
  {
    do
    {
      uint64_t v5 = *v2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a2);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_21704FA2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseVariants(pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker *this, pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a2 + 4))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(a2, (uint64_t)v43);
    pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames((pxrInternal__aapl__pxrReserved__::UsdVariantSets *)v43, (uint64_t *)&v41);
    unint64_t v38 = 0;
    unint64_t v39 = 0;
    unint64_t v40 = 0;
    uint64_t v4 = v41;
    for (i = v42; v4 != i; uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v4 + 24))
    {
      pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet((pxrInternal__aapl__pxrReserved__::UsdProperty *)v43, v4, (uint64_t)&v31);
      pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v31, v6, &v29);
      uint64_t v7 = v39;
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v8 = sub_2168DF30C((uint64_t *)&v38, &v29);
      }
      else
      {
        *(void *)unint64_t v39 = 0;
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = 0;
        sub_216812BD8(v7, v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
        uint64_t v8 = (uint64_t)(v7 + 24);
      }
      unint64_t v39 = (char *)v8;
      uint64_t v26 = (void **)&v29;
      sub_216782F20(&v26);
      if (v37 < 0) {
        operator delete(__p);
      }
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
      sub_21697C414(&v33);
      if (v32) {
        sub_216D16E0C(v32);
      }
    }
    pxrInternal__aapl__pxrReserved__::CartesianProduct(&v38, (uint64_t *)&v29);
    int v10 = (long long **)v29;
    uint64_t v11 = v30;
    if (v29 != v30)
    {
      v9.i64[0] = -8193;
      int8x16_t v23 = v9;
      int8x16_t v22 = (int8x16_t)vdupq_n_s64(0x2000uLL);
      do
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unint64_t v12 = (pxrInternal__aapl__pxrReserved__ *)sub_216812BD8((char *)&v26, *v10, v10[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v10[1] - (char *)*v10) >> 3));
        uint64_t v13 = v26;
        if (v27 != v26)
        {
          uint64_t v14 = 0;
          unsigned int v15 = 1;
          do
          {
            unint64_t v12 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdVariantSets::SetSelection((uint64_t)v43, (long long *)((char *)v41 + 24 * v14), (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v13[3 * v14]);
            uint64_t v14 = v15;
            uint64_t v13 = v26;
          }
          while (0xAAAAAAAAAAAAAAABLL * (v27 - v26) > v15++);
        }
        uint64_t v17 = *(void *)this;
        uint64_t v18 = *((void *)this + 1);
        while (v17 != v18)
        {
          unint64_t v12 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(void))(**(void **)v17 + 32))();
          v17 += 8;
        }
        UsdPrimDefaultPredicate = (int8x16_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v12);
        uint64_t v20 = UsdPrimDefaultPredicate[1].i64[0];
        *(void *)&long long v21 = vandq_s8(*UsdPrimDefaultPredicate, v23).u64[0];
        *((void *)&v21 + 1) = vorrq_s8(*UsdPrimDefaultPredicate, v22).i64[1];
        long long v24 = v21;
        uint64_t v25 = v20;
        sub_216D3B730((uint64_t)&v31, (uint64_t)a2, &v24);
        pxrInternal__aapl__pxrReserved__::UsdUtilsComplianceChecker::TraverseRange(this, &v31, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
        sub_21697C414(&v33);
        uint64_t v31 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v26;
        sub_216782F20((void ***)&v31);
        v10 += 3;
      }
      while (v10 != (long long **)v11);
    }
    uint64_t v31 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v29;
    sub_2168DEE10((void ***)&v31);
    uint64_t v31 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v38;
    sub_2168DEE10((void ***)&v31);
    uint64_t v31 = &v41;
    sub_216782F20((void ***)&v31);
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
    sub_21697C414(&v45);
    if (v44) {
      sub_216D16E0C(v44);
    }
  }
}

void sub_21704FDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  a23 = (void **)&a30;
  sub_2168DEE10(&a23);
  a23 = (void **)(v30 - 144);
  sub_216782F20(&a23);
  sub_21704FA2C(v30 - 120);
  _Unwind_Resume(a1);
}

void sub_21704FE74(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_21704FE9C@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ByteAlignmentChecker");
}

void *sub_21704FEAC@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "Files within a usdz package must be laid out properly, i.e. they should be aligned to 64 bytes.");
}

void sub_21704FEDC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_21704FF04@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "CompressionChecker");
}

void *sub_21704FF14@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "Files within a usdz package should not be compressed or encrypted.");
}

void sub_21704FF28(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_21704FF50@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "MissingReferenceChecker");
}

void *sub_21704FF60@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "The composed USD stage should not contain any unresolvable asset dependencies (in every possible variation of the asset), when using the default asset resolver. ");
}

void sub_21704FF78(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_21704FFA0@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "StageMetadataChecker");
}

void *sub_21704FFB0@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "All stages should declare their 'upAxis' and 'metersPerUnit'. Stages that can be consumed as referencable assets should furthermore havea valid 'defaultPrim' declared, and stages meant for consumer-level packagingshould always have upAxis set to 'Y' ");
}

uint64_t sub_21704FFC0(uint64_t a1)
{
  *(void *)a1 = &unk_26C770AE8;
  sub_21678A498(a1 + 120, *(char **)(a1 + 128));
  sub_21678A498(a1 + 96, *(char **)(a1 + 104));

  return sub_217050AA8(a1);
}

void sub_217050024(uint64_t a1)
{
  *(void *)a1 = &unk_26C770AE8;
  sub_21678A498(a1 + 120, *(char **)(a1 + 128));
  sub_21678A498(a1 + 96, *(char **)(a1 + 104));
  uint64_t v2 = (void *)sub_217050AA8(a1);

  operator delete(v2);
}

void *sub_21705008C@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "TextureChecker");
}

void *sub_21705009C@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "Texture files should be readable by intended client (only .jpg, .jpeg or .png for consumer-level USDZ).");
}

uint64_t sub_2170500AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C770B70;
  sub_2170515F0(a1 + 112, *(void **)(a1 + 120));
  sub_2170516C4(a1 + 88, *(void **)(a1 + 96));

  return sub_217050AA8(a1);
}

void sub_217050110(uint64_t a1)
{
  *(void *)a1 = &unk_26C770B70;
  sub_2170515F0(a1 + 112, *(void **)(a1 + 120));
  sub_2170516C4(a1 + 88, *(void **)(a1 + 96));
  uint64_t v2 = (void *)sub_217050AA8(a1);

  operator delete(v2);
}

void *sub_217050178@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "PrimEncapsulationChecker");
}

void *sub_217050188@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "Check for basic prim encapsulation rules:- Boundables may not be nested under Gprims- Connectable prims (e.g. Shader, Material, etc) can only be nestedinside other Container-like Connectable prims. Container-like primsinclude Material, NodeGraph, Light, LightFilter, and *exclude Shader*");
}

uint64_t sub_217050198(uint64_t a1)
{
  *(void *)a1 = &unk_26C770BF8;
  uint64_t v2 = *(void *)(a1 + 120);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));

  return sub_217050AA8(a1);
}

void sub_217050224(uint64_t a1)
{
  *(void *)a1 = &unk_26C770BF8;
  uint64_t v2 = *(void *)(a1 + 120);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));
  uint64_t v4 = (void *)sub_217050AA8(a1);

  operator delete(v4);
}

void *sub_2170502B4@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "NormalMapTextureChecker");
}

void *sub_2170502C4@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "UsdUVTexture nodes that feed the _inputs:normals_ of aUsdPreviewSurface must ensure that the data is encoded and scaled properly.Specifically:- Since normals are expected to be in the range [(-1,-1,-1), (1,1,1)],the Texture node must transform 8-bit textures from their [0..1] range bysetting its _inputs:scale_ to (2, 2, 2, 1) and_inputs:bias_ to (-1, -1, -1, 0)- Normal map data is commonly expected to be linearly encoded.  However, manyimage-writing tools automatically set the profile of three-channel, 8-bitimages to SRGB.  To prevent an unwanted transformation, the UsdUVTexture's _inputs:sourceColorSpace_ must be set to 'raw'");
}

void sub_2170502D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_217050300@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "MaterialBindingAPIAppliedChecker");
}

void *sub_217050310@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "A prim providing a material binding, must have MaterialBindingAPI applied on the prim.");
}

uint64_t sub_217050320(uint64_t a1)
{
  *(void *)a1 = &unk_26C770D08;
  uint64_t v3 = (void **)(a1 + 88);
  sub_216889A04(&v3);
  return sub_217050AA8(a1);
}

void sub_21705037C(uint64_t a1)
{
  *(void *)a1 = &unk_26C770D08;
  uint64_t v3 = (void **)(a1 + 88);
  sub_216889A04(&v3);
  uint64_t v2 = (void *)sub_217050AA8(a1);
  operator delete(v2);
}

void *sub_2170503DC@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "SkelBindingAPIAppliedChecker");
}

void *sub_2170503EC@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "A prim providing skelBinding properties, must have SkelBindingAPI applied on the prim.");
}

void sub_217050400(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_217050428@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ARKitPackageEncapsulationChecker");
}

void *sub_217050438@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "If the root layer is a package, then the composed stage should not contain references to files outside the package. In other words, the package should be entirely self-contained.");
}

uint64_t sub_217050448(uint64_t a1)
{
  *(void *)a1 = &unk_26C770E18;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));

  return sub_217050AA8(a1);
}

void sub_2170504A0(uint64_t a1)
{
  *(void *)a1 = &unk_26C770E18;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));
  uint64_t v2 = (void *)sub_217050AA8(a1);

  operator delete(v2);
}

void *sub_2170504FC@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ARKitLayerChecker");
}

void *sub_21705050C@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "All included layers that participate in composition should have one of the core supported file formats.");
}

uint64_t sub_21705051C(uint64_t a1)
{
  *(void *)a1 = &unk_26C770EA0;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));

  return sub_217050AA8(a1);
}

void sub_217050574(uint64_t a1)
{
  *(void *)a1 = &unk_26C770EA0;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));
  uint64_t v2 = (void *)sub_217050AA8(a1);

  operator delete(v2);
}

void *sub_2170505D0@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ARKitPrimTypeChecker");
}

void *sub_2170505E0@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "UsdGeomPointInstancers and custom schemas not provided by core USD are not allowed.");
}

uint64_t sub_2170505F0(uint64_t a1)
{
  *(void *)a1 = &unk_26C770F28;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));

  return sub_217050AA8(a1);
}

void sub_217050648(uint64_t a1)
{
  *(void *)a1 = &unk_26C770F28;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));
  uint64_t v2 = (void *)sub_217050AA8(a1);

  operator delete(v2);
}

void *sub_2170506A4@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ARKitShaderChecker");
}

void *sub_2170506B4@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "Shader nodes must have \"id\" as the implementationSource, with id values that begin with \"Usd*\". Also, shader inputs with connections must each have a single, valid connection source.");
}

void sub_2170506C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_217050AA8(a1);

  operator delete(v1);
}

void *sub_2170506F0@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ARKitMaterialBindingChecker");
}

void *sub_217050700@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "All material binding relationships must have valid targets.");
}

uint64_t sub_217050710(uint64_t a1)
{
  *(void *)a1 = &unk_26C771038;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));

  return sub_217050AA8(a1);
}

void sub_217050768(uint64_t a1)
{
  *(void *)a1 = &unk_26C771038;
  sub_21678A498(a1 + 88, *(char **)(a1 + 96));
  uint64_t v2 = (void *)sub_217050AA8(a1);

  operator delete(v2);
}

void *sub_2170507C4@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "ARKitFileExtensionChecker");
}

void *sub_2170507D4@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "Only layer files and textures are allowed in a package.");
}

uint64_t sub_2170507E4(uint64_t a1, char a2, char a3, char a4)
{
  void v13[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26C770AE8;
  *(unsigned char *)(a1 + 88) = 0;
  sub_216779094(v8, "exr");
  sub_216779094(v9, "jpg");
  sub_216779094(v10, "jpeg");
  sub_216779094(v11, "png");
  sub_217050B20(a1 + 96, v8, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_216779094(v8, "bmp");
  sub_216779094(v9, "tga");
  sub_216779094(v10, "hdr");
  sub_216779094(v11, "tif");
  sub_216779094(v12, "tx");
  sub_216779094(v13, "zfile");
  sub_217050B20(a1 + 120, v8, 6);
  for (uint64_t j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v13[j + 2]) < 0) {
      operator delete((void *)v13[j]);
    }
  }
  return a1;
}

void sub_2170509D8(_Unwind_Exception *a1)
{
  uint64_t v5 = 0;
  while (1)
  {
    if (*(char *)(v3 + v5 + 143) < 0) {
      operator delete(*(void **)(v3 + v5 + 120));
    }
    v5 -= 24;
    if (v5 == -144)
    {
      sub_21678A498(v2, *(char **)(v1 + 104));
      sub_217050AA8(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_217050AA8(uint64_t a1)
{
  *(void *)a1 = &unk_26C770848;
  uint64_t v2 = (void **)(a1 + 16);
  uint64_t v4 = (void **)(a1 + 64);
  sub_216782F20(&v4);
  uint64_t v4 = (void **)(a1 + 40);
  sub_216782F20(&v4);
  uint64_t v4 = v2;
  sub_216782F20(&v4);
  return a1;
}

uint64_t sub_217050B20(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_216814A8C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_217050B8C(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_217050BA4(uint64_t a1, char a2, char a3, char a4)
{
  void v12[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26C770BF8;
  sub_216779094(v7, "bmp");
  sub_216779094(v8, "tga");
  sub_216779094(v9, "jpg");
  sub_216779094(v10, "jpeg");
  sub_216779094(v11, "png");
  sub_216779094(v12, "tif");
  sub_217050B20(a1 + 88, v7, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v12[i + 2]) < 0) {
      operator delete((void *)v12[i]);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 112), "UsdPreviewSurface");
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 120), "UsdUVTexture");
  return a1;
}

void sub_217050D20(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v4;
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21678A498(v3, *(char **)(v1 + 96));
  sub_217050AA8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217050DC0(uint64_t a1, char a2, char a3, char a4)
{
  void v10[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26C770E18;
  sub_216779094(v7, "usd");
  sub_216779094(v8, "usda");
  sub_216779094(v9, "usdc");
  sub_216779094(v10, "usdz");
  sub_217050B20(a1 + 88, v7, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0) {
      operator delete((void *)v10[i]);
    }
  }
  return a1;
}

void sub_217050EE8(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 95) < 0) {
      operator delete(*(void **)(v2 + v4 + 72));
    }
    v4 -= 24;
    if (v4 == -96)
    {
      sub_217050AA8(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_217050F50(uint64_t a1, char a2, char a3, char a4)
{
  v29[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26C770EA0;
  sub_216779094(v7, "");
  sub_216779094(v8, "Scope");
  sub_216779094(v9, "Xform");
  sub_216779094(v10, "Camera");
  sub_216779094(v11, "Shader");
  sub_216779094(v12, "Material");
  sub_216779094(v13, "Mesh");
  sub_216779094(v14, "Sphere");
  sub_216779094(v15, "Cube");
  sub_216779094(v16, "Cylinder");
  sub_216779094(v17, "Cone");
  sub_216779094(v18, "Capsule");
  sub_216779094(v19, "GeomSubset");
  sub_216779094(v20, "Points");
  sub_216779094(v21, "SkelRoot");
  sub_216779094(v22, "Skeleton");
  sub_216779094(v23, "SkelAnimation");
  sub_216779094(v24, "BlendShape");
  sub_216779094(v25, "SpatialAudio");
  sub_216779094(v26, "PhysicsScene");
  sub_216779094(v27, "Preliminary_ReferenceImage");
  sub_216779094(v28, "Preliminary_Text");
  sub_216779094(v29, "Preliminary_Trigger");
  sub_217050B20(a1 + 88, v7, 23);
  uint64_t v5 = 69;
  do
  {
    if (SHIBYTE(v7[v5 - 1]) < 0) {
      operator delete((void *)v7[v5 - 3]);
    }
    v5 -= 3;
  }
  while (v5 * 8);
  return a1;
}

void sub_217051220(_Unwind_Exception *a1)
{
  uint64_t v4 = 552;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0) {
      operator delete(*(void **)(v2 + v4 - 24));
    }
    v4 -= 24;
    if (!v4)
    {
      sub_217050AA8(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_217051284(uint64_t a1, char a2, char a3, char a4)
{
  void v9[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26C770F28;
  sub_216779094(v7, "UsdPreviewSurface");
  sub_216779094(v8, "UsdUVTexture");
  sub_216779094(v9, "UsdTransform2d");
  sub_217050B20(a1 + 88, v7, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v9[i + 2]) < 0) {
      operator delete((void *)v9[i]);
    }
  }
  return a1;
}

void sub_217051398(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 71) < 0) {
      operator delete(*(void **)(v2 + v4 + 48));
    }
    v4 -= 24;
    if (v4 == -72)
    {
      sub_217050AA8(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_217051400(uint64_t a1, char a2, char a3, char a4)
{
  void v14[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 9) = a3;
  *(unsigned char *)(a1 + 10) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26C771038;
  sub_216779094(v7, "exr");
  sub_216779094(v8, "jpg");
  sub_216779094(v9, "jpeg");
  sub_216779094(v10, "png");
  sub_216779094(v11, "usd");
  sub_216779094(v12, "usda");
  sub_216779094(v13, "usdc");
  sub_216779094(v14, "usdz");
  sub_217050B20(a1 + 88, v7, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0) {
      operator delete((void *)v14[i]);
    }
  }
  return a1;
}

void sub_217051588(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 191) < 0) {
      operator delete(*(void **)(v2 + v4 + 168));
    }
    v4 -= 24;
    if (v4 == -192)
    {
      sub_217050AA8(v1);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2170515F0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2170515F0(a1, *a2);
    sub_2170515F0(a1, a2[1]);
    sub_21705164C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *sub_21705164C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void sub_2170516C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2170516C4(a1, *a2);
    sub_2170516C4(a1, a2[1]);
    sub_217051720((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

_DWORD *sub_217051720(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

char *sub_217051760(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_216812BD8((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_2170517B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2170517C0(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unsigned int v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216812BD8(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_2168DF430(a1, v14);
  uint64_t v12 = a1[1];
  sub_2168DF5D0(v14);
  return v12;
}

void sub_2170518D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168DF5D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170518E4(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sub_216779094(v14, a2);
  unsigned int v15 = v14 + 24;
  sub_216790CCC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216790E64((uint64_t)&v13);
  return v11;
}

void sub_2170519D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170519EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    unint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_217051ABC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217051AD4(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sub_216779094(v14, a2);
  unsigned int v15 = v14 + 24;
  sub_216790CCC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216790E64((uint64_t)&v13);
  return v11;
}

void sub_217051BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217051BDC(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sub_216779094(v14, a2);
  unsigned int v15 = v14 + 24;
  sub_216790CCC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216790E64((uint64_t)&v13);
  return v11;
}

void sub_217051CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_217051CE4(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)sub_216981754((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x28uLL);
    v11[1] = a1 + 1;
    unint64_t v9 = *a4;
    sub_216981010(v7 + 7, v9);
    sub_21698105C(v7 + 8, v9 + 1);
    *((unsigned char *)v7 + 36) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_217051DA8((uint64_t)v11, 0);
  }
  return v7;
}

void sub_217051DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_217051720(v2 + 7);
    }
    operator delete(v2);
  }
}

uint64_t *sub_217051E00(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_217051EAC((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_217051F78((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_217051EAC@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_217051F18((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217051F00(_Unwind_Exception *a1)
{
  sub_217051F78(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_217051F18(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 28));
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_217051F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21705164C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_217051FD0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_217052054(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unsigned int v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  char v12 = &v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_216E1B57C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216E1B738(&v11);
  return v9;
}

void sub_217052130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216E1B738((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::constructPatternFilters(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_217052308(a2, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfPatternMatcher::TfPatternMatcher(&v12, v4, 1, 1);
      unint64_t v6 = a2[1];
      if (v6 >= a2[2])
      {
        uint64_t v9 = sub_217052E70(a2, (uint64_t)&v12);
      }
      else
      {
        *(_WORD *)unint64_t v6 = (_WORD)v12;
        long long v7 = v13;
        *(void *)(v6 + 24) = v14;
        *(_OWORD *)(v6 + 8) = v7;
        uint64_t v14 = 0;
        long long v13 = 0uLL;
        *(unsigned char *)(v6 + 32) = v15;
        *(_DWORD *)(v6 + 40) = v16;
        uint64_t v8 = v18;
        *(_OWORD *)(v6 + 48) = v17;
        *(void *)(v6 + 64) = v8;
        uint64_t v18 = 0;
        long long v17 = 0uLL;
        *(_OWORD *)(v6 + 72) = v19;
        long long v19 = 0uLL;
        uint64_t v9 = v6 + 88;
      }
      a2[1] = v9;
      pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)&v12);
      if (!pxrInternal__aapl__pxrReserved__::TfPatternMatcher::IsValid((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)(a2[1] - 88)))
      {
        char v12 = "usdUtils/conditionalAbortDiagnosticDelegate.cpp";
        *(void *)&long long v13 = "constructPatternFilters";
        *((void *)&v13 + 1) = 46;
        uint64_t v14 = "std::vector<TfPatternMatcher> pxrInternal__aapl__pxrReserved__::constructPatternFilters(const std::vector<std::string> &)";
        char v15 = 0;
        uint64_t v11 = v4;
        if (*((char *)v4 + 23) < 0) {
          uint64_t v11 = (uint64_t *)*v4;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v12, (pxrInternal__aapl__pxrReserved__ *)"Invalid pattern string: %s", v10, v11);
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_2170522D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217052C9C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217052308(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2168C32AC(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 88 * v6;
    sub_217052D20(a1, v7);
    return sub_217052E20((uint64_t)v7);
  }
  return result;
}

void sub_2170523B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217052E20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters(uint64_t a1, long long **a2, long long **a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_216812BD8((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216812BD8((char *)(a1 + 24), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return a1;
}

void sub_217052448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters::SetStringFilters(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    sub_21680F694(a1, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegateErrorFilters::SetCodePathFilters(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 24;
  if (v2 != a2) {
    sub_21680F694(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::UsdUtilsConditionalAbortDiagnosticDelegate(uint64_t *a1, uint64_t **a2, uint64_t **a3)
{
  *a1 = (uint64_t)&unk_26C7710C0;
  uint64_t v6 = a1 + 4;
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a2, a1 + 1);
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a2 + 3, v6);
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a3, a1 + 7);
  pxrInternal__aapl__pxrReserved__::constructPatternFilters(a3 + 3, a1 + 10);
  long long v7 = (void *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate(v7, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *)a1);
  return a1;
}

void sub_217052584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217052C9C((void ***)va);
  sub_217052C9C((void ***)va);
  sub_217052C9C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::~UsdUtilsConditionalAbortDiagnosticDelegate(pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate *this)
{
  *(void *)this = &unk_26C7710C0;
  uint64_t v2 = (void *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate(v2, this);
  uint64_t v3 = (void **)((char *)this + 80);
  sub_217052C9C(&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  sub_217052C9C(&v3);
  uint64_t v3 = (void **)((char *)this + 32);
  sub_217052C9C(&v3);
  uint64_t v3 = (void **)((char *)this + 8);
  sub_217052C9C(&v3);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::~UsdUtilsConditionalAbortDiagnosticDelegate(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::_RuleMatcher(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::TfPatternMatcher **a3, pxrInternal__aapl__pxrReserved__::TfPatternMatcher **a4)
{
  sub_216779094(__p, *(char **)a2);
  unint64_t v7 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__p[1];
  }
  if (v7)
  {
    uint64_t v8 = *a4;
    uint64_t v9 = a4[1];
    while (v8 != v9)
    {
      if (pxrInternal__aapl__pxrReserved__::TfPatternMatcher::Match(v8, (const char *)__p, 0))
      {
        uint64_t v15 = 1;
        goto LABEL_20;
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)((char *)v8 + 88);
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 63);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 48);
  }
  if (!v10 || (uint64_t v11 = *a3, v12 = a3[1], *a3 == v12))
  {
    uint64_t v15 = 0;
  }
  else
  {
    long long v13 = (const char *)(a2 + 40);
    do
    {
      uint64_t v14 = pxrInternal__aapl__pxrReserved__::TfPatternMatcher::Match(v11, v13, 0);
      uint64_t v15 = (uint64_t)v14;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)((char *)v11 + 88);
      if (v11 == v12) {
        int v16 = 1;
      }
      else {
        int v16 = (int)v14;
      }
    }
    while (v16 != 1);
  }
LABEL_20:
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_2170527B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueError(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a1 + 8, a1 + 32);
  if (result
    && (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a1 + 56, a1 + 80), (result & 1) == 0))
  {
    sub_216779094(&v7, "Aborted by UsdUtilsConditionalAbortDiagnosticDelegate On Error");
    memset(&v6, 0, sizeof(v6));
    pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v7, (uint64_t *)(a2 + 40), (uint64_t)&v6, (void *)a2);
    std::string::~string(&v6);
    std::string::~string(&v7);
    uint64_t result = pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
    __break(1u);
  }
  else if (!*(unsigned char *)(a2 + 144))
  {
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_217053014;
    v7.__r_.__value_.__l.__size_ = (std::string::size_type)sub_217052FC8((uint64_t (**)(uint64_t, void, void, void *, void *))(a2 + 104));
    pxrInternal__aapl__pxrReserved__::_PrintDiagnostic((pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)&v6, a2, (uint64_t *)(a2 + 40));
    return (uint64_t)sub_2168579F4(&v7);
  }
  return result;
}

void sub_217052924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::_PrintDiagnostic(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (FILE *)*MEMORY[0x263EF8348];
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic(a1, a2, a3, (uint64_t)__p);
  if (v6 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  fputs((const char *)v4, v3);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueFatalError(uint64_t a1, void *a2, uint64_t *a3)
{
  sub_216779094(&v8, "FATAL ERROR");
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v8, a3, (uint64_t)&__p, a2);
  std::string::~string(&__p);
  std::string::~string(&v8);
  char v6 = (_Unwind_Exception *)pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  _Unwind_Resume(v6);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueStatus(uint64_t a1, uint64_t a2))(void, void, void, void, void)
{
  v6[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 64);
  uint64_t v3 = (uint64_t *)(a2 + 40);
  v6[0] = (uint64_t (*)(void, void, void, void, void))sub_217053138;
  v6[1] = (uint64_t (*)(void, void, void, void, void))sub_2170530EC((uint64_t (**)(uint64_t, void, void, void *, void *))(a2 + 104));
  pxrInternal__aapl__pxrReserved__::_PrintDiagnostic((pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)&v5, a2, v3);
  return sub_2168579F4(v6);
}

void sub_217052AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsConditionalAbortDiagnosticDelegate::IssueWarning(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a1 + 8, a1 + 32);
  if (result
    && (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a1 + 56, a1 + 80), (result & 1) == 0))
  {
    sub_216779094(&v7, "Aborted by UsdUtilsConditionalAbortDiagnosticDelegate On Warning");
    memset(&v6, 0, sizeof(v6));
    pxrInternal__aapl__pxrReserved__::TfLogCrash((char *)&v7, (uint64_t *)(a2 + 40), (uint64_t)&v6, (void *)a2);
    std::string::~string(&v6);
    std::string::~string(&v7);
    uint64_t result = pxrInternal__aapl__pxrReserved__::ArchAbort(0, v5);
    __break(1u);
  }
  else if (!*(unsigned char *)(a2 + 144))
  {
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_21705325C;
    v7.__r_.__value_.__l.__size_ = (std::string::size_type)sub_217053210((uint64_t (**)(uint64_t, void, void, void *, void *))(a2 + 104));
    pxrInternal__aapl__pxrReserved__::_PrintDiagnostic((pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)&v6, a2, (uint64_t *)(a2 + 40));
    return (uint64_t)sub_2168579F4(&v7);
  }
  return result;
}

void sub_217052C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_217052C9C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    BOOL v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)(v4 - 88));
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_217052D20(uint64_t *a1, void *a2)
{
  sub_217052D98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_217052D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(_WORD *)(v8 - 88) = *(_WORD *)(a3 + v7 - 88);
      long long v10 = *(_OWORD *)(a3 + v7 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(void *)(v9 - 72) = 0;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 80) = 0;
      *(unsigned char *)(v8 - 56) = *(unsigned char *)(a3 + v7 - 56);
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(a3 + v7 - 48);
      long long v11 = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v11;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 40) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 16);
      *(__n128 *)(v8 - 16) = result;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_217052E20(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher((pxrInternal__aapl__pxrReserved__::TfPatternMatcher *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_217052E70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  long long v10 = (char *)sub_2168C32AC(v7, v9);
  long long v11 = &v10[88 * v4];
  v17[0] = v10;
  v17[1] = v11;
  void v17[3] = &v10[88 * v12];
  *(_WORD *)long long v11 = *(_WORD *)a2;
  long long v13 = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v13;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  v11[32] = *(unsigned char *)(a2 + 32);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = v14;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  v17[2] = v11 + 88;
  sub_217052D20(a1, v17);
  uint64_t v15 = a1[1];
  sub_217052E20((uint64_t)v17);
  return v15;
}

void sub_217052FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217052E20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (**sub_217052FC8(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_26C771120, &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfError>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_217053014(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_26C771138;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      uint64_t v8 = a2[1];
      *a3 = sub_217053014;
      a3[1] = v8;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_217053014;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_21677EC50(a4, (uint64_t)&unk_26C771138);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfError const*>::__id;
      }
      if (v10) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t (**sub_2170530EC(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_26C771158, &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfStatus>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_217053138(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_26C771170;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      uint64_t v8 = a2[1];
      *a3 = sub_217053138;
      a3[1] = v8;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_217053138;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_21677EC50(a4, (uint64_t)&unk_26C771170);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfStatus const*>::__id;
      }
      if (v10) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t (**sub_217053210(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_26C771190, &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfWarning>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_21705325C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_26C7711A8;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      uint64_t v8 = a2[1];
      *a3 = sub_21705325C;
      a3[1] = v8;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_21705325C;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_21677EC50(a4, (uint64_t)&unk_26C7711A8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<pxrInternal__aapl__pxrReserved__::TfWarning const*>::__id;
      }
      if (v10) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_217053334()
{
  sub_216779094(v3, "USDUTILS_CREATE_PACKAGE");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7711C8, 0, (uint64_t)v3, (uint64_t)__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  uint64_t v0 = sub_2170408AC();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USDUTILS_CREATE_PACKAGE", "UsdUtils asset localization details");
}

void sub_2170533C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsExtractExternalReferences(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v51[4] = *MEMORY[0x263EF8340];
  int v45 = 0;
  int v46 = 0;
  unint64_t v44 = &v45;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v44, &v37);
  sub_2167877AC((uint64_t)&v44, v45);
  if (v37)
  {
    sub_217053D24((uint64_t)&v44, a5);
    unint64_t v40 = 0;
    uint64_t v9 = operator new(0x20uLL);
    *uint64_t v9 = &unk_26C7711E8;
    v9[1] = sub_2170537C8;
    v9[2] = 0;
    void v9[3] = &v44;
    unint64_t v40 = v9;
    long long v41 = &unk_26C770530;
    sub_217039490((uint64_t)v42, (uint64_t)v39);
    sub_217039660(v39);
    uint64_t v28 = &v41;
    memset(v29, 0, sizeof(v29));
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    int v32 = 1065353216;
    int v33 = 1;
    __int16 v34 = 257;
    memset(v35, 0, sizeof(v35));
    int v36 = 1065353216;
    BOOL v10 = pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&v28, (uint64_t *)&v37);
    if (v10)
    {
      if (a2)
      {
        sub_217053A18((uint64_t *)a2, (uint64_t *)&v37);
        if (v46)
        {
          uint64_t v11 = 0;
          uint64_t v12 = v46;
          do
          {
            ++v11;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          uint64_t v11 = 0;
        }
        sub_2170547EC((uint64_t *)a2, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a2 + 8), v46, 0, v11);
        long long v13 = *(uint64_t **)(a2 + 8);
        uint64_t v14 = *(void *)a2 + 8;
        unint64_t v15 = 126 - 2 * __clz(((uint64_t)v13 - v14) >> 3);
        if (v13 == (uint64_t *)v14) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = v15;
        }
        sub_217054C18(v14, v13, v16, 1);
      }
      if (a3)
      {
        if (v48)
        {
          unint64_t v17 = 0;
          uint64_t v18 = v48;
          do
          {
            ++v17;
            uint64_t v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
        else
        {
          unint64_t v17 = 0;
        }
        sub_217056860((uint64_t)a3, v48, 0, v17);
        unsigned __int8 v19 = (long long *)a3[1];
        unint64_t v20 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *a3) >> 3));
        if (v19 == (long long *)*a3) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v20;
        }
        sub_216878D58(*a3, v19, (uint64_t)&v38, v21, 1);
      }
      if (a4)
      {
        if (v50)
        {
          unint64_t v22 = 0;
          int8x16_t v23 = v50;
          do
          {
            ++v22;
            int8x16_t v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          unint64_t v22 = 0;
        }
        sub_217056860((uint64_t)a4, v50, 0, v22);
        long long v24 = (long long *)a4[1];
        unint64_t v25 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *a4) >> 3));
        if (v24 == (long long *)*a4) {
          uint64_t v26 = 0;
        }
        else {
          uint64_t v26 = v25;
        }
        sub_216878D58(*a4, v24, (uint64_t)&v38, v26, 1);
      }
    }
    sub_216850298((uint64_t)v35);
    sub_216850298((uint64_t)&v30[1] + 8);
    unint64_t v38 = (void **)v30;
    sub_216782F20(&v38);
    unint64_t v38 = (void **)v29 + 1;
    sub_216782F20(&v38);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v29);
    long long v41 = &unk_26C770530;
    sub_217039660(v43);
    sub_217039578((uint64_t)v42);
    sub_217051FD0(v51);
    sub_216850298((uint64_t)&v49);
    sub_216850298((uint64_t)&v47);
    sub_217053E44((uint64_t)&v44);
  }
  else
  {
    BOOL v10 = 0;
  }
  sub_216ABB798(&v37);
  return v10;
}

void sub_217053760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_217039184((uint64_t)&a10);
  sub_2170391E8(&a35);
  sub_217053B34(v35 - 224);
  sub_216ABB798(&a29);
  _Unwind_Resume(a1);
}

double sub_2170537C8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(void *)(a1 + 144))
  {
    sub_216ABBA60((uint64_t *)&v24, a2);
    uint64_t v10 = *(void *)(a1 + 144);
    if (!v10) {
      sub_21683A7CC();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v10 + 48))(__p);
    uint64_t v11 = v25;
    if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = (void *)HIBYTE(v27);
    if (v27 < 0) {
      uint64_t v12 = __p[1];
    }
    if (v12)
    {
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t v14 = *(void *)(a3 + 32);
      char v15 = sub_2170540E4((unsigned __int8 *)__p, (unsigned __int8 *)a3);
      if (v13 == v14) {
        char v16 = 0;
      }
      else {
        char v16 = v15;
      }
      if ((v16 & 1) == 0) {
        sub_217053EC4(a1, a2, (uint64_t)__p, a4);
      }
      uint64_t v18 = *((void *)&v28 + 1);
      uint64_t v17 = v28;
      if ((void)v28 == *((void *)&v28 + 1))
      {
        int64x2_t v19 = vdupq_n_s64(v28);
      }
      else
      {
        do
        {
          sub_217053EC4(a1, a2, v17, a4);
          v17 += 24;
        }
        while (v17 != v18);
        int64x2_t v19 = (int64x2_t)v28;
      }
      uint64_t v22 = v29;
      *(void *)(a5 + 16) = v27;
      *(_OWORD *)a5 = *(_OWORD *)__p;
      __p[1] = 0;
      uint64_t v27 = 0;
      __p[0] = 0;
      *(int64x2_t *)(a5 + 24) = v19;
      *(void *)(a5 + 40) = v22;
      uint64_t v29 = 0;
      long long v28 = 0uLL;
    }
    else
    {
      *(_OWORD *)(a5 + 16) = 0u;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)a5 = 0u;
    }
    long long v24 = (void **)&v28;
    sub_216782F20(&v24);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a3 + 24);
    uint64_t v21 = *(void *)(a3 + 32);
    if (v20 == v21)
    {
      sub_217053EC4(a1, a2, a3, a4);
    }
    else
    {
      do
      {
        sub_217053EC4(a1, a2, v20, a4);
        v20 += 24;
      }
      while (v20 != v21);
    }
    double result = 0.0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

void sub_2170539EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217039FB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217053A18(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (uint64_t *)sub_21677CB28(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = v14;
    char v16 = &v14[v10];
    uint64_t v17 = v16;
    uint64_t v18 = &v14[v13];
    *char v16 = *a2;
    sub_2168BD80C(&v14[v10]);
    ++v17;
    sub_216C0B4DC(a1, &v15);
    uint64_t v9 = (uint64_t *)a1[1];
    uint64_t result = sub_216C0B5EC((uint64_t)&v15);
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t result = sub_2168BD80C(v7);
    uint64_t v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_217053B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_217053B34(uint64_t a1)
{
  sub_217051FD0((void *)(a1 + 120));
  sub_216850298(a1 + 80);
  sub_216850298(a1 + 40);

  return sub_217053E44(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsModifyAssetPaths(void ***a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v15[0] = &unk_26C771280;
  v15[1] = a2;
  void v15[3] = v15;
  sub_217054538((uint64_t)v16, (uint64_t)v15);
  sub_217039660(v15);
  unint64_t v5 = v16;
  memset(v6, 0, sizeof(v6));
  memset(v7, 0, sizeof(v7));
  uint64_t v8 = 0;
  int v9 = 1065353216;
  int v10 = 1;
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  v16[216] = 1;
  __int16 v11 = 0;
  uint64_t v3 = a1[1];
  if (v3)
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)a1 + 1) + 14)) {
      uint64_t v3 = *a1;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v14 = v3;
  sub_2168BD80C((uint64_t *)&v14);
  pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizationContext::Process((uint64_t)&v5, (uint64_t *)&v14);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v14);
  sub_216850298((uint64_t)v12);
  sub_216850298((uint64_t)&v7[1] + 8);
  uint64_t v14 = (void **)v7;
  sub_216782F20(&v14);
  uint64_t v14 = (void **)v6 + 1;
  sub_216782F20(&v14);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6);
  return sub_2170545D8((uint64_t)v16);
}

void sub_217053CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_217053D24(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  sub_217053DAC(a1 + 120, a2);
  return a1;
}

void sub_217053D88(_Unwind_Exception *a1)
{
  sub_216850298(v3);
  sub_216850298(v2);
  sub_217053E44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217053DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_217053E44(uint64_t a1)
{
  sub_217053E80(a1, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_217053E80(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      sub_216ABB798(v2 + 2);
      operator delete(v2);
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v3;
    }
    while (v3);
  }
}

void sub_217053EC4(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  sub_216ABBA60((uint64_t *)__dst, a2);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)__dst, a3, (uint64_t)v18);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)__dst[1];
  if (__dst[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__dst[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))(*(void *)v8 + 8))(v8);
  }
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(v15) < 0)
  {
    sub_216778F24(__dst, __p[0], (unint64_t)__p[1]);
    operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)__p;
    uint64_t v17 = v15;
  }
  int v10 = (void *)HIBYTE(v17);
  if (v17 < 0) {
    int v10 = __dst[1];
  }
  if (v10)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile((uint64_t)v18))
    {
      __p[1] = 0;
      uint64_t v15 = 0;
      __p[0] = &__p[1];
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v18, __p, &v13);
      sub_21705426C(a1, &v13, &v13);
      sub_216ABB798(&v13);
      sub_2167877AC((uint64_t)__p, (void *)__p[1]);
      goto LABEL_16;
    }
    uint64_t v11 = a1 + 40;
    uint64_t v12 = (unsigned __int8 *)__dst;
  }
  else
  {
    if (!sub_2170541E4(a1, a2, (uint64_t)__dst, a4)) {
      goto LABEL_16;
    }
    uint64_t v11 = a1 + 80;
    uint64_t v12 = (unsigned __int8 *)v18;
  }
  sub_216A38350(v11, v12, (uint64_t)v12);
LABEL_16:
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
}

void sub_217054064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170540E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v11 = a1 + 24;
  int v9 = (unsigned __int8 *)*((void *)a1 + 3);
  int v10 = (unsigned __int8 *)*((void *)v11 + 1);
  int v13 = v6 + 24;
  uint64_t v12 = (unsigned __int8 *)*((void *)v6 + 3);
  if (v10 - v9 != *((void *)v13 + 1) - (void)v12) {
    return 0;
  }
  if (v9 == v10) {
    return 1;
  }
  do
  {
    uint64_t result = sub_2168513F8((uint64_t)&v15, v9, v12);
    if (!result) {
      break;
    }
    v9 += 24;
    v12 += 24;
  }
  while (v9 != v10);
  return result;
}

uint64_t sub_2170541E4(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (a4 != 3) {
    return 1;
  }
  int v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v5);
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(RealPath)) {
    return 0;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v8);
  uint64_t v10 = sub_216979288(FileFormat);
  return (*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10) ^ 1;
}

void *sub_21705426C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    int v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  int v13 = operator new(0x18uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *int v13 = 0;
  v13[1] = v6;
  _OWORD v13[2] = *a3;
  *a3 = 0;
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *uint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2170544E0((uint64_t)v23, 0);
  return v10;
}

void sub_2170544C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2170544E0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2170544E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216ABB798(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_217054538(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C7704A8;
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(a1 + 80);
  sub_217039490(a1 + 8, a2);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v3);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(void *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_2170545BC(_Unwind_Exception *a1)
{
  sub_217039660((void *)(v1 + 48));
  sub_217039578(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2170545D8(uint64_t a1)
{
  *(void *)a1 = &unk_26C7704A8;
  sub_217054678(a1 + 224, *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(a1 + 232));
  sub_2169B4408((void *)(a1 + 176));
  sub_2168EBBB8((void ***)(a1 + 168), 0);
  sub_2169B4408((void *)(a1 + 128));
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_217039660((void *)(a1 + 48));
  sub_217039578(a1 + 8);
  return a1;
}

void sub_217054678(uint64_t a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2)
{
  if (a2)
  {
    sub_217054678(a1, *a2);
    sub_217054678(a1, a2[1]);
    sub_216ABB798(a2 + 5);
    sub_216ABB798(a2 + 4);
    operator delete(a2);
  }
}

__n128 sub_2170546E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7711E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21705473C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7711E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_217054774(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = a1[2];
  int v5 = (uint64_t (*)(void *, uint64_t, uint64_t, void))a1[1];
  unint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    int v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v6 + v5);
  }
  return v5(v6, a2, a3, *a4);
}

uint64_t sub_2170547A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170547E0()
{
  return &unk_26C771258;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2170547EC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, void *a3, void *a4, uint64_t a5)
{
  int v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      unint64_t v19 = a5 + 1;
      uint64_t v20 = a3;
      do
      {
        uint64_t v20 = (void *)*v20;
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)a2) >> 3;
      uint64_t v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) < 1)
        {
          uint64_t v20 = a3;
        }
        else
        {
          unint64_t v23 = v21 + 1;
          uint64_t v20 = a3;
          do
          {
            uint64_t v20 = (void *)*v20;
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = sub_217054A88(v9, v20, a4, *(void *)(v9 - 8));
        uint64_t v22 = (uint64_t)(v12 - (void)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_216BADA80((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
        sub_217054B10((uint64_t)v28, v7, v20, v5);
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v31 = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      char v24 = (uint64_t *)&v18[8 * v15];
      v28[0] = v18;
      v28[1] = v24;
      uint64_t v29 = v24;
      uint64_t v30 = &v18[8 * v17];
      uint64_t v25 = 8 * a5;
      uint64_t v26 = &v24[a5];
      do
      {
        *char v24 = v7[2];
        sub_2168BD80C(v24++);
        unint64_t v7 = (void *)*v7;
        v25 -= 8;
      }
      while (v25);
      uint64_t v29 = v26;
      int v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_2170549D4(a1, v28, (uint64_t)v5);
      sub_216C0B5EC((uint64_t)v28);
    }
  }
  return v5;
}

void sub_2170549A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170549D4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216C0B554((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_217054B90(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_217054A88(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = v6[2];
      sub_2168BD80C((uint64_t *)(a4 + v7));
      uint64_t v6 = (void *)*v6;
      v7 += 8;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_217054AEC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217054B10(uint64_t a1, void *a2, void *a3, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4)
{
  uint64_t v4 = a4;
  int v5 = a2;
  if (a2 != a3)
  {
    uint64_t v7 = a4;
    do
    {
      uint64_t v8 = *v4;
      *v7++ = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v5[2];
      sub_2168BD80C(v5 + 2);
      sub_2168BD378((int)v4, v8);
      int v5 = (void *)*v5;
      uint64_t v4 = v7;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_217054B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      sub_2168BD80C((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_217054BF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217054C18(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8 = (uint64_t *)result;
  while (2)
  {
    uint64_t v9 = a2 - 1;
    uint64_t v10 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                v188 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v9);
                uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v188);
                v190 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v8);
                uint64_t v191 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v190);
                int v192 = *(char *)(v191 + 23);
                int v193 = *(char *)(RealPath + 23);
                if (v193 >= 0) {
                  size_t v194 = *(unsigned __int8 *)(RealPath + 23);
                }
                else {
                  size_t v194 = *(void *)(RealPath + 8);
                }
                if (v193 >= 0) {
                  v195 = (const void *)RealPath;
                }
                else {
                  v195 = *(const void **)RealPath;
                }
                if (v192 >= 0) {
                  size_t v196 = *(unsigned __int8 *)(v191 + 23);
                }
                else {
                  size_t v196 = *(void *)(v191 + 8);
                }
                if (v192 >= 0) {
                  v197 = (const void *)v191;
                }
                else {
                  v197 = *(const void **)v191;
                }
                if (v196 >= v194) {
                  size_t v198 = v194;
                }
                else {
                  size_t v198 = v196;
                }
                __n128 result = memcmp(v195, v197, v198);
                BOOL v199 = v194 < v196;
                if (result) {
                  BOOL v199 = (int)result < 0;
                }
                if (v199)
                {
                  uint64_t v200 = *v8;
                  *uint64_t v8 = *v9;
                  *uint64_t v9 = v200;
                }
                break;
              case 3uLL:
                __n128 result = sub_2170560EC(v8, v8 + 1, v9);
                break;
              case 4uLL:
                __n128 result = sub_217056688(v8, v8 + 1, v8 + 2, v9);
                break;
              case 5uLL:
                __n128 result = sub_217055E80(v8, v8 + 1, v8 + 2, v8 + 3, v9);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            v201 = v8 + 1;
            BOOL v203 = v8 == a2 || v201 == a2;
            if (a4)
            {
              if (!v203)
              {
                uint64_t v204 = 0;
                v205 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8;
                do
                {
                  v206 = (uint64_t *)v205;
                  v205 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v201;
                  v207 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v201);
                  uint64_t v208 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v207);
                  v209 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v206);
                  uint64_t v210 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v209);
                  int v211 = *(char *)(v210 + 23);
                  int v212 = *(char *)(v208 + 23);
                  if (v212 >= 0) {
                    size_t v213 = *(unsigned __int8 *)(v208 + 23);
                  }
                  else {
                    size_t v213 = *(void *)(v208 + 8);
                  }
                  if (v212 >= 0) {
                    v214 = (const void *)v208;
                  }
                  else {
                    v214 = *(const void **)v208;
                  }
                  if (v211 >= 0) {
                    size_t v215 = *(unsigned __int8 *)(v210 + 23);
                  }
                  else {
                    size_t v215 = *(void *)(v210 + 8);
                  }
                  if (v211 >= 0) {
                    v216 = (const void *)v210;
                  }
                  else {
                    v216 = *(const void **)v210;
                  }
                  if (v215 >= v213) {
                    size_t v217 = v213;
                  }
                  else {
                    size_t v217 = v215;
                  }
                  __n128 result = memcmp(v214, v216, v217);
                  BOOL v218 = v213 < v215;
                  if (result) {
                    BOOL v218 = (int)result < 0;
                  }
                  if (v218)
                  {
                    v391 = *v205;
                    *v205 = 0;
                    uint64_t v219 = v204;
                    while (1)
                    {
                      v220 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v8 + v219 + 8);
                      v221 = *v220;
                      *v220 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v8 + v219);
                      *(uint64_t *)((char *)v8 + v219) = 0;
                      sub_2168BD378((int)v220, v221);
                      if (!v219) {
                        break;
                      }
                      v222 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
                      uint64_t v223 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v222);
                      v224 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)((char *)v8 + v219 - 8));
                      uint64_t v225 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v224);
                      int v226 = *(char *)(v225 + 23);
                      int v227 = *(char *)(v223 + 23);
                      if (v227 >= 0) {
                        size_t v228 = *(unsigned __int8 *)(v223 + 23);
                      }
                      else {
                        size_t v228 = *(void *)(v223 + 8);
                      }
                      if (v227 >= 0) {
                        v229 = (const void *)v223;
                      }
                      else {
                        v229 = *(const void **)v223;
                      }
                      if (v226 >= 0) {
                        size_t v230 = *(unsigned __int8 *)(v225 + 23);
                      }
                      else {
                        size_t v230 = *(void *)(v225 + 8);
                      }
                      if (v226 >= 0) {
                        v231 = (const void *)v225;
                      }
                      else {
                        v231 = *(const void **)v225;
                      }
                      if (v230 >= v228) {
                        size_t v232 = v228;
                      }
                      else {
                        size_t v232 = v230;
                      }
                      int v233 = memcmp(v229, v231, v232);
                      BOOL v234 = v228 < v230;
                      if (v233) {
                        BOOL v234 = v233 < 0;
                      }
                      v219 -= 8;
                      if (!v234)
                      {
                        v235 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)v8 + v219 + 8);
                        goto LABEL_330;
                      }
                    }
                    v235 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8;
LABEL_330:
                    v236 = *v235;
                    *v235 = v391;
                    v391 = 0;
                    sub_2168BD378((int)v235, v236);
                    __n128 result = (uint64_t)sub_216ABB798(&v391);
                  }
                  v201 = (uint64_t *)(v205 + 1);
                  v204 += 8;
                }
                while (v205 + 1 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a2);
              }
            }
            else if (!v203)
            {
              do
              {
                v357 = v8;
                uint64_t v8 = v201;
                v358 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v201);
                uint64_t v359 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v358);
                v360 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v357);
                uint64_t v361 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v360);
                int v362 = *(char *)(v361 + 23);
                int v363 = *(char *)(v359 + 23);
                if (v363 >= 0) {
                  size_t v364 = *(unsigned __int8 *)(v359 + 23);
                }
                else {
                  size_t v364 = *(void *)(v359 + 8);
                }
                if (v363 >= 0) {
                  v365 = (const void *)v359;
                }
                else {
                  v365 = *(const void **)v359;
                }
                if (v362 >= 0) {
                  size_t v366 = *(unsigned __int8 *)(v361 + 23);
                }
                else {
                  size_t v366 = *(void *)(v361 + 8);
                }
                if (v362 >= 0) {
                  v367 = (const void *)v361;
                }
                else {
                  v367 = *(const void **)v361;
                }
                if (v366 >= v364) {
                  size_t v368 = v364;
                }
                else {
                  size_t v368 = v366;
                }
                __n128 result = memcmp(v365, v367, v368);
                BOOL v369 = v364 < v366;
                if (result) {
                  BOOL v369 = (int)result < 0;
                }
                if (v369)
                {
                  v391 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
                  *uint64_t v8 = 0;
                  v370 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8;
                  do
                  {
                    v372 = *(v370 - 1);
                    v371 = *v370;
                    *(v370 - 1) = 0;
                    *v370 = v372;
                    sub_2168BD378((int)v370, v371);
                    v373 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
                    uint64_t v374 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v373);
                    v375 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)v370 - 2);
                    uint64_t v376 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v375);
                    int v377 = *(char *)(v376 + 23);
                    int v378 = *(char *)(v374 + 23);
                    if (v378 >= 0) {
                      size_t v379 = *(unsigned __int8 *)(v374 + 23);
                    }
                    else {
                      size_t v379 = *(void *)(v374 + 8);
                    }
                    if (v378 >= 0) {
                      v380 = (const void *)v374;
                    }
                    else {
                      v380 = *(const void **)v374;
                    }
                    if (v377 >= 0) {
                      size_t v381 = *(unsigned __int8 *)(v376 + 23);
                    }
                    else {
                      size_t v381 = *(void *)(v376 + 8);
                    }
                    if (v377 >= 0) {
                      v382 = (const void *)v376;
                    }
                    else {
                      v382 = *(const void **)v376;
                    }
                    if (v381 >= v379) {
                      size_t v383 = v379;
                    }
                    else {
                      size_t v383 = v381;
                    }
                    int v384 = memcmp(v380, v382, v383);
                    BOOL v385 = v379 < v381;
                    if (v384) {
                      BOOL v385 = v384 < 0;
                    }
                    --v370;
                  }
                  while (v385);
                  v386 = *v370;
                  *v370 = v391;
                  v391 = 0;
                  sub_2168BD378((int)v370, v386);
                  __n128 result = (uint64_t)sub_216ABB798(&v391);
                }
                v201 = v8 + 1;
              }
              while (v8 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != a2)
            {
              unint64_t v387 = v11;
              int64_t v237 = (v12 - 2) >> 1;
              int64_t v238 = v237;
              do
              {
                int64_t v239 = v238;
                if (v237 >= v238)
                {
                  uint64_t v240 = (2 * v238) | 1;
                  v241 = &v8[v240];
                  if (2 * v238 + 2 < (uint64_t)v12)
                  {
                    v242 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(&v8[v240]);
                    uint64_t v243 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v242);
                    v244 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v241 + 1);
                    uint64_t v245 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v244);
                    int v246 = *(char *)(v245 + 23);
                    int v247 = *(char *)(v243 + 23);
                    if (v247 >= 0) {
                      size_t v248 = *(unsigned __int8 *)(v243 + 23);
                    }
                    else {
                      size_t v248 = *(void *)(v243 + 8);
                    }
                    if (v247 >= 0) {
                      v249 = (const void *)v243;
                    }
                    else {
                      v249 = *(const void **)v243;
                    }
                    if (v246 >= 0) {
                      size_t v250 = *(unsigned __int8 *)(v245 + 23);
                    }
                    else {
                      size_t v250 = *(void *)(v245 + 8);
                    }
                    if (v246 >= 0) {
                      v251 = (const void *)v245;
                    }
                    else {
                      v251 = *(const void **)v245;
                    }
                    if (v250 >= v248) {
                      size_t v252 = v248;
                    }
                    else {
                      size_t v252 = v250;
                    }
                    int v253 = memcmp(v249, v251, v252);
                    BOOL v254 = v248 < v250;
                    if (v253) {
                      BOOL v254 = v253 < 0;
                    }
                    if (v254)
                    {
                      ++v241;
                      uint64_t v240 = 2 * v239 + 2;
                    }
                  }
                  int64_t v388 = v239;
                  v255 = &v8[v239];
                  v256 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v241);
                  uint64_t v257 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v256);
                  v258 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v255);
                  uint64_t v259 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v258);
                  int v260 = *(char *)(v259 + 23);
                  int v261 = *(char *)(v257 + 23);
                  if (v261 >= 0) {
                    size_t v262 = *(unsigned __int8 *)(v257 + 23);
                  }
                  else {
                    size_t v262 = *(void *)(v257 + 8);
                  }
                  if (v261 >= 0) {
                    v263 = (const void *)v257;
                  }
                  else {
                    v263 = *(const void **)v257;
                  }
                  if (v260 >= 0) {
                    size_t v264 = *(unsigned __int8 *)(v259 + 23);
                  }
                  else {
                    size_t v264 = *(void *)(v259 + 8);
                  }
                  if (v260 >= 0) {
                    v265 = (const void *)v259;
                  }
                  else {
                    v265 = *(const void **)v259;
                  }
                  if (v264 >= v262) {
                    size_t v266 = v262;
                  }
                  else {
                    size_t v266 = v264;
                  }
                  int v267 = memcmp(v263, v265, v266);
                  BOOL v268 = v262 < v264;
                  if (v267) {
                    BOOL v268 = v267 < 0;
                  }
                  if (!v268)
                  {
                    v391 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v255;
                    uint64_t *v255 = 0;
                    do
                    {
                      v269 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v241;
                      v270 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v255;
                      uint64_t *v255 = *v241;
                      uint64_t *v241 = 0;
                      sub_2168BD378((int)v255, v270);
                      if (v237 < v240) {
                        break;
                      }
                      uint64_t v271 = (2 * v240) | 1;
                      v241 = &v8[v271];
                      uint64_t v272 = 2 * v240 + 2;
                      if (v272 < (uint64_t)v12)
                      {
                        v273 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(&v8[v271]);
                        uint64_t v274 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v273);
                        v275 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v241 + 1);
                        uint64_t v276 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v275);
                        int v277 = *(char *)(v276 + 23);
                        int v278 = *(char *)(v274 + 23);
                        int64_t v279 = v237;
                        if (v278 >= 0) {
                          size_t v280 = *(unsigned __int8 *)(v274 + 23);
                        }
                        else {
                          size_t v280 = *(void *)(v274 + 8);
                        }
                        if (v278 >= 0) {
                          v281 = (const void *)v274;
                        }
                        else {
                          v281 = *(const void **)v274;
                        }
                        if (v277 >= 0) {
                          size_t v282 = *(unsigned __int8 *)(v276 + 23);
                        }
                        else {
                          size_t v282 = *(void *)(v276 + 8);
                        }
                        if (v277 >= 0) {
                          v283 = (const void *)v276;
                        }
                        else {
                          v283 = *(const void **)v276;
                        }
                        if (v282 >= v280) {
                          size_t v284 = v280;
                        }
                        else {
                          size_t v284 = v282;
                        }
                        int v285 = memcmp(v281, v283, v284);
                        BOOL v4 = v280 >= v282;
                        int64_t v237 = v279;
                        BOOL v286 = !v4;
                        if (v285) {
                          BOOL v286 = v285 < 0;
                        }
                        if (v286)
                        {
                          ++v241;
                          uint64_t v240 = v272;
                        }
                        else
                        {
                          uint64_t v240 = v271;
                        }
                      }
                      else
                      {
                        uint64_t v240 = (2 * v240) | 1;
                      }
                      v287 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v241);
                      uint64_t v288 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v287);
                      v289 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
                      uint64_t v290 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v289);
                      int v291 = *(char *)(v290 + 23);
                      int v292 = *(char *)(v288 + 23);
                      if (v292 >= 0) {
                        size_t v293 = *(unsigned __int8 *)(v288 + 23);
                      }
                      else {
                        size_t v293 = *(void *)(v288 + 8);
                      }
                      if (v292 >= 0) {
                        v294 = (const void *)v288;
                      }
                      else {
                        v294 = *(const void **)v288;
                      }
                      if (v291 >= 0) {
                        size_t v295 = *(unsigned __int8 *)(v290 + 23);
                      }
                      else {
                        size_t v295 = *(void *)(v290 + 8);
                      }
                      if (v291 >= 0) {
                        v296 = (const void *)v290;
                      }
                      else {
                        v296 = *(const void **)v290;
                      }
                      if (v295 >= v293) {
                        size_t v297 = v293;
                      }
                      else {
                        size_t v297 = v295;
                      }
                      int v298 = memcmp(v294, v296, v297);
                      BOOL v299 = v293 < v295;
                      if (v298) {
                        BOOL v299 = v298 < 0;
                      }
                      v255 = (uint64_t *)v269;
                    }
                    while (!v299);
                    v300 = *v269;
                    *v269 = v391;
                    v391 = 0;
                    sub_2168BD378((int)v269, v300);
                    sub_216ABB798(&v391);
                    int64_t v239 = v388;
                  }
                }
                int64_t v238 = v239 - 1;
              }
              while (v239);
              uint64_t v301 = v387 >> 3;
              do
              {
                uint64_t v302 = 0;
                v390 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
                *uint64_t v8 = 0;
                v303 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8;
                do
                {
                  v304 = (uint64_t *)&v303[v302 + 1];
                  uint64_t v305 = 2 * v302;
                  uint64_t v302 = (2 * v302) | 1;
                  uint64_t v306 = v305 + 2;
                  if (v305 + 2 < v301)
                  {
                    v307 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v304);
                    uint64_t v308 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v307);
                    v309 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v304 + 1);
                    uint64_t v310 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v309);
                    int v311 = *(char *)(v310 + 23);
                    int v312 = *(char *)(v308 + 23);
                    if (v312 >= 0) {
                      size_t v313 = *(unsigned __int8 *)(v308 + 23);
                    }
                    else {
                      size_t v313 = *(void *)(v308 + 8);
                    }
                    if (v312 >= 0) {
                      v314 = (const void *)v308;
                    }
                    else {
                      v314 = *(const void **)v308;
                    }
                    if (v311 >= 0) {
                      size_t v315 = *(unsigned __int8 *)(v310 + 23);
                    }
                    else {
                      size_t v315 = *(void *)(v310 + 8);
                    }
                    if (v311 >= 0) {
                      v316 = (const void *)v310;
                    }
                    else {
                      v316 = *(const void **)v310;
                    }
                    if (v315 >= v313) {
                      size_t v317 = v313;
                    }
                    else {
                      size_t v317 = v315;
                    }
                    int v318 = memcmp(v314, v316, v317);
                    BOOL v319 = v313 < v315;
                    if (v318) {
                      BOOL v319 = v318 < 0;
                    }
                    if (v319)
                    {
                      ++v304;
                      uint64_t v302 = v306;
                    }
                  }
                  v320 = *v303;
                  *v303 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v304;
                  uint64_t *v304 = 0;
                  sub_2168BD378((int)v303, v320);
                  v303 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v304;
                }
                while (v302 <= (uint64_t)((unint64_t)(v301 - 2) >> 1));
                v321 = a2 - 1;
                v322 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v304;
                if (v304 == a2 - 1)
                {
                  uint64_t *v304 = (uint64_t)v390;
                  v390 = 0;
                  sub_2168BD378((int)v304, v322);
                }
                else
                {
                  uint64_t *v304 = *v321;
                  uint64_t *v321 = 0;
                  sub_2168BD378((int)v304, v322);
                  v323 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v321;
                  uint64_t *v321 = (uint64_t)v390;
                  v390 = 0;
                  sub_2168BD378((int)v321, v323);
                  uint64_t v324 = (char *)v304 - (char *)v8 + 8;
                  if (v324 >= 9)
                  {
                    unint64_t v325 = (((unint64_t)v324 >> 3) - 2) >> 1;
                    v326 = &v8[v325];
                    v327 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v326);
                    uint64_t v328 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v327);
                    v329 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v304);
                    uint64_t v330 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v329);
                    int v331 = *(char *)(v330 + 23);
                    int v332 = *(char *)(v328 + 23);
                    if (v332 >= 0) {
                      size_t v333 = *(unsigned __int8 *)(v328 + 23);
                    }
                    else {
                      size_t v333 = *(void *)(v328 + 8);
                    }
                    if (v332 >= 0) {
                      v334 = (const void *)v328;
                    }
                    else {
                      v334 = *(const void **)v328;
                    }
                    if (v331 >= 0) {
                      size_t v335 = *(unsigned __int8 *)(v330 + 23);
                    }
                    else {
                      size_t v335 = *(void *)(v330 + 8);
                    }
                    if (v331 >= 0) {
                      v336 = (const void *)v330;
                    }
                    else {
                      v336 = *(const void **)v330;
                    }
                    if (v335 >= v333) {
                      size_t v337 = v333;
                    }
                    else {
                      size_t v337 = v335;
                    }
                    int v338 = memcmp(v334, v336, v337);
                    BOOL v339 = v333 < v335;
                    if (v338) {
                      BOOL v339 = v338 < 0;
                    }
                    if (v339)
                    {
                      v391 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v304;
                      uint64_t *v304 = 0;
                      do
                      {
                        v340 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v326;
                        v341 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v304;
                        uint64_t *v304 = *v326;
                        uint64_t *v326 = 0;
                        sub_2168BD378((int)v304, v341);
                        if (!v325) {
                          break;
                        }
                        unint64_t v325 = (v325 - 1) >> 1;
                        v326 = &v8[v325];
                        v342 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v326);
                        uint64_t v343 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v342);
                        v344 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
                        uint64_t v345 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v344);
                        int v346 = *(char *)(v345 + 23);
                        int v347 = *(char *)(v343 + 23);
                        if (v347 >= 0) {
                          size_t v348 = *(unsigned __int8 *)(v343 + 23);
                        }
                        else {
                          size_t v348 = *(void *)(v343 + 8);
                        }
                        if (v347 >= 0) {
                          v349 = (const void *)v343;
                        }
                        else {
                          v349 = *(const void **)v343;
                        }
                        if (v346 >= 0) {
                          size_t v350 = *(unsigned __int8 *)(v345 + 23);
                        }
                        else {
                          size_t v350 = *(void *)(v345 + 8);
                        }
                        if (v346 >= 0) {
                          v351 = (const void *)v345;
                        }
                        else {
                          v351 = *(const void **)v345;
                        }
                        if (v350 >= v348) {
                          size_t v352 = v348;
                        }
                        else {
                          size_t v352 = v350;
                        }
                        int v353 = memcmp(v349, v351, v352);
                        BOOL v354 = v348 < v350;
                        if (v353) {
                          BOOL v354 = v353 < 0;
                        }
                        v304 = (uint64_t *)v340;
                      }
                      while (v354);
                      v355 = *v340;
                      *v340 = v391;
                      v391 = 0;
                      sub_2168BD378((int)v340, v355);
                      sub_216ABB798(&v391);
                    }
                  }
                }
                --a2;
                __n128 result = (uint64_t)sub_216ABB798(&v390);
              }
              while (v301-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v8[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_2170560EC(v8, &v8[v12 >> 1], v9);
            sub_2170560EC(v8 + 1, v14 - 1, a2 - 2);
            sub_2170560EC(v8 + 2, &v8[v13 + 1], a2 - 3);
            sub_2170560EC(v14 - 1, v14, &v8[v13 + 1]);
            uint64_t v15 = *v8;
            *uint64_t v8 = *v14;
            *unint64_t v14 = v15;
          }
          else
          {
            sub_2170560EC(&v8[v12 >> 1], v8, v9);
          }
          uint64_t v16 = a2;
          --a3;
          if (a4) {
            break;
          }
          unint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v8 - 1);
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v17);
          unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v8);
          uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v19);
          int v21 = *(char *)(v20 + 23);
          int v22 = *(char *)(v18 + 23);
          if (v22 >= 0) {
            size_t v23 = *(unsigned __int8 *)(v18 + 23);
          }
          else {
            size_t v23 = *(void *)(v18 + 8);
          }
          if (v22 >= 0) {
            char v24 = (const void *)v18;
          }
          else {
            char v24 = *(const void **)v18;
          }
          if (v21 >= 0) {
            size_t v25 = *(unsigned __int8 *)(v20 + 23);
          }
          else {
            size_t v25 = *(void *)(v20 + 8);
          }
          if (v21 >= 0) {
            uint64_t v26 = (const void *)v20;
          }
          else {
            uint64_t v26 = *(const void **)v20;
          }
          if (v25 >= v23) {
            size_t v27 = v23;
          }
          else {
            size_t v27 = v25;
          }
          int v28 = memcmp(v24, v26, v27);
          BOOL v29 = v23 < v25;
          if (v28) {
            BOOL v29 = v28 < 0;
          }
          if (v29) {
            break;
          }
          v391 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
          *uint64_t v8 = 0;
          v104 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
          uint64_t v105 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v104);
          uint64_t v106 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v9);
          uint64_t v107 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v106);
          int v108 = *(char *)(v107 + 23);
          int v109 = *(char *)(v105 + 23);
          if (v109 >= 0) {
            size_t v110 = *(unsigned __int8 *)(v105 + 23);
          }
          else {
            size_t v110 = *(void *)(v105 + 8);
          }
          if (v109 >= 0) {
            v111 = (const void *)v105;
          }
          else {
            v111 = *(const void **)v105;
          }
          if (v108 >= 0) {
            size_t v112 = *(unsigned __int8 *)(v107 + 23);
          }
          else {
            size_t v112 = *(void *)(v107 + 8);
          }
          if (v108 >= 0) {
            uint64_t v113 = (const void *)v107;
          }
          else {
            uint64_t v113 = *(const void **)v107;
          }
          if (v112 >= v110) {
            size_t v114 = v110;
          }
          else {
            size_t v114 = v112;
          }
          int v115 = memcmp(v111, v113, v114);
          BOOL v116 = v110 < v112;
          if (v115) {
            BOOL v116 = v115 < 0;
          }
          if (v116)
          {
            uint64_t v10 = v8;
            do
            {
              v117 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v118 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v117);
              v119 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(++v10);
              uint64_t v120 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v119);
              int v121 = *(char *)(v120 + 23);
              int v122 = *(char *)(v118 + 23);
              if (v122 >= 0) {
                size_t v123 = *(unsigned __int8 *)(v118 + 23);
              }
              else {
                size_t v123 = *(void *)(v118 + 8);
              }
              if (v122 >= 0) {
                v124 = (const void *)v118;
              }
              else {
                v124 = *(const void **)v118;
              }
              if (v121 >= 0) {
                size_t v125 = *(unsigned __int8 *)(v120 + 23);
              }
              else {
                size_t v125 = *(void *)(v120 + 8);
              }
              if (v121 >= 0) {
                long long v126 = (const void *)v120;
              }
              else {
                long long v126 = *(const void **)v120;
              }
              if (v125 >= v123) {
                size_t v127 = v123;
              }
              else {
                size_t v127 = v125;
              }
              int v128 = memcmp(v124, v126, v127);
              BOOL v129 = v123 < v125;
              if (v128) {
                BOOL v129 = v128 < 0;
              }
            }
            while (!v129);
          }
          else
          {
            v130 = v8 + 1;
            do
            {
              uint64_t v10 = v130;
              if (v130 >= a2) {
                break;
              }
              v131 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v132 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v131);
              v133 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v10);
              uint64_t v134 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v133);
              int v135 = *(char *)(v134 + 23);
              int v136 = *(char *)(v132 + 23);
              if (v136 >= 0) {
                size_t v137 = *(unsigned __int8 *)(v132 + 23);
              }
              else {
                size_t v137 = *(void *)(v132 + 8);
              }
              if (v136 >= 0) {
                v138 = (const void *)v132;
              }
              else {
                v138 = *(const void **)v132;
              }
              if (v135 >= 0) {
                size_t v139 = *(unsigned __int8 *)(v134 + 23);
              }
              else {
                size_t v139 = *(void *)(v134 + 8);
              }
              if (v135 >= 0) {
                v140 = (const void *)v134;
              }
              else {
                v140 = *(const void **)v134;
              }
              if (v139 >= v137) {
                size_t v141 = v137;
              }
              else {
                size_t v141 = v139;
              }
              int v142 = memcmp(v138, v140, v141);
              BOOL v143 = v142 < 0;
              if (!v142) {
                BOOL v143 = v137 < v139;
              }
              v130 = v10 + 1;
            }
            while (!v143);
          }
          v144 = a2;
          if (v10 < a2)
          {
            v144 = a2;
            do
            {
              v145 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v146 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v145);
              v147 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(--v144);
              uint64_t v148 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v147);
              int v149 = *(char *)(v148 + 23);
              int v150 = *(char *)(v146 + 23);
              if (v150 >= 0) {
                size_t v151 = *(unsigned __int8 *)(v146 + 23);
              }
              else {
                size_t v151 = *(void *)(v146 + 8);
              }
              if (v150 >= 0) {
                v152 = (const void *)v146;
              }
              else {
                v152 = *(const void **)v146;
              }
              if (v149 >= 0) {
                size_t v153 = *(unsigned __int8 *)(v148 + 23);
              }
              else {
                size_t v153 = *(void *)(v148 + 8);
              }
              if (v149 >= 0) {
                v154 = (const void *)v148;
              }
              else {
                v154 = *(const void **)v148;
              }
              if (v153 >= v151) {
                size_t v155 = v151;
              }
              else {
                size_t v155 = v153;
              }
              int v156 = memcmp(v152, v154, v155);
              BOOL v157 = v151 < v153;
              if (v156) {
                BOOL v157 = v156 < 0;
              }
            }
            while (v157);
          }
          while (v10 < v144)
          {
            uint64_t v158 = *v10;
            uint64_t *v10 = *v144;
            uint64_t *v144 = v158;
            do
            {
              v159 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v160 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v159);
              v161 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(++v10);
              uint64_t v162 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v161);
              int v163 = *(char *)(v162 + 23);
              int v164 = *(char *)(v160 + 23);
              if (v164 >= 0) {
                size_t v165 = *(unsigned __int8 *)(v160 + 23);
              }
              else {
                size_t v165 = *(void *)(v160 + 8);
              }
              if (v164 >= 0) {
                v166 = (const void *)v160;
              }
              else {
                v166 = *(const void **)v160;
              }
              if (v163 >= 0) {
                size_t v167 = *(unsigned __int8 *)(v162 + 23);
              }
              else {
                size_t v167 = *(void *)(v162 + 8);
              }
              if (v163 >= 0) {
                v168 = (const void *)v162;
              }
              else {
                v168 = *(const void **)v162;
              }
              if (v167 >= v165) {
                size_t v169 = v165;
              }
              else {
                size_t v169 = v167;
              }
              int v170 = memcmp(v166, v168, v169);
              BOOL v171 = v165 < v167;
              if (v170) {
                BOOL v171 = v170 < 0;
              }
            }
            while (!v171);
            do
            {
              v172 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v173 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v172);
              v174 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(--v144);
              uint64_t v175 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v174);
              int v176 = *(char *)(v175 + 23);
              int v177 = *(char *)(v173 + 23);
              if (v177 >= 0) {
                size_t v178 = *(unsigned __int8 *)(v173 + 23);
              }
              else {
                size_t v178 = *(void *)(v173 + 8);
              }
              if (v177 >= 0) {
                v179 = (const void *)v173;
              }
              else {
                v179 = *(const void **)v173;
              }
              if (v176 >= 0) {
                size_t v180 = *(unsigned __int8 *)(v175 + 23);
              }
              else {
                size_t v180 = *(void *)(v175 + 8);
              }
              if (v176 >= 0) {
                v181 = (const void *)v175;
              }
              else {
                v181 = *(const void **)v175;
              }
              if (v180 >= v178) {
                size_t v182 = v178;
              }
              else {
                size_t v182 = v180;
              }
              int v183 = memcmp(v179, v181, v182);
              BOOL v184 = v178 < v180;
              if (v183) {
                BOOL v184 = v183 < 0;
              }
            }
            while (v184);
          }
          v185 = v10 - 1;
          if (v10 - 1 != v8)
          {
            v186 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
            *uint64_t v8 = *v185;
            uint64_t *v185 = 0;
            sub_2168BD378((int)v8, v186);
          }
          v187 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v185;
          uint64_t *v185 = (uint64_t)v391;
          v391 = 0;
          sub_2168BD378(v10 - 8, v187);
          __n128 result = (uint64_t)sub_216ABB798(&v391);
          a4 = 0;
        }
        uint64_t v30 = 0;
        v391 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
        *uint64_t v8 = 0;
        do
        {
          uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(&v8[v30 + 1]);
          uint64_t v32 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v31);
          int v33 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
          uint64_t v34 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v33);
          int v35 = *(char *)(v34 + 23);
          int v36 = *(char *)(v32 + 23);
          if (v36 >= 0) {
            size_t v37 = *(unsigned __int8 *)(v32 + 23);
          }
          else {
            size_t v37 = *(void *)(v32 + 8);
          }
          if (v36 >= 0) {
            unint64_t v38 = (const void *)v32;
          }
          else {
            unint64_t v38 = *(const void **)v32;
          }
          if (v35 >= 0) {
            size_t v39 = *(unsigned __int8 *)(v34 + 23);
          }
          else {
            size_t v39 = *(void *)(v34 + 8);
          }
          if (v35 >= 0) {
            unint64_t v40 = (const void *)v34;
          }
          else {
            unint64_t v40 = *(const void **)v34;
          }
          if (v39 >= v37) {
            size_t v41 = v37;
          }
          else {
            size_t v41 = v39;
          }
          int v42 = memcmp(v38, v40, v41);
          BOOL v43 = v37 < v39;
          if (v42) {
            BOOL v43 = v42 < 0;
          }
          ++v30;
        }
        while (v43);
        unint64_t v44 = &v8[v30];
        if (v30 == 1)
        {
          uint64_t v16 = a2;
          do
          {
            if (v44 >= v16) {
              break;
            }
            long long v58 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(--v16);
            uint64_t v59 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v58);
            int v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
            uint64_t v61 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v60);
            int v62 = *(char *)(v61 + 23);
            int v63 = *(char *)(v59 + 23);
            if (v63 >= 0) {
              size_t v64 = *(unsigned __int8 *)(v59 + 23);
            }
            else {
              size_t v64 = *(void *)(v59 + 8);
            }
            if (v63 >= 0) {
              int v65 = (const void *)v59;
            }
            else {
              int v65 = *(const void **)v59;
            }
            if (v62 >= 0) {
              size_t v66 = *(unsigned __int8 *)(v61 + 23);
            }
            else {
              size_t v66 = *(void *)(v61 + 8);
            }
            if (v62 >= 0) {
              uint64_t v67 = (const void *)v61;
            }
            else {
              uint64_t v67 = *(const void **)v61;
            }
            if (v66 >= v64) {
              size_t v68 = v64;
            }
            else {
              size_t v68 = v66;
            }
            int v69 = memcmp(v65, v67, v68);
            BOOL v70 = v64 < v66;
            if (v69) {
              BOOL v70 = v69 < 0;
            }
          }
          while (!v70);
        }
        else
        {
          do
          {
            int v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(--v16);
            uint64_t v46 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v45);
            uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
            uint64_t v48 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v47);
            int v49 = *(char *)(v48 + 23);
            int v50 = *(char *)(v46 + 23);
            if (v50 >= 0) {
              size_t v51 = *(unsigned __int8 *)(v46 + 23);
            }
            else {
              size_t v51 = *(void *)(v46 + 8);
            }
            if (v50 >= 0) {
              unint64_t v52 = (const void *)v46;
            }
            else {
              unint64_t v52 = *(const void **)v46;
            }
            if (v49 >= 0) {
              size_t v53 = *(unsigned __int8 *)(v48 + 23);
            }
            else {
              size_t v53 = *(void *)(v48 + 8);
            }
            if (v49 >= 0) {
              int v54 = (const void *)v48;
            }
            else {
              int v54 = *(const void **)v48;
            }
            if (v53 >= v51) {
              size_t v55 = v51;
            }
            else {
              size_t v55 = v53;
            }
            int v56 = memcmp(v52, v54, v55);
            BOOL v57 = v51 < v53;
            if (v56) {
              BOOL v57 = v56 < 0;
            }
          }
          while (!v57);
        }
        if (v44 >= v16)
        {
          long long v100 = v44 - 1;
        }
        else
        {
          unint64_t v71 = v44;
          char v72 = v16;
          do
          {
            uint64_t v73 = *v71;
            *unint64_t v71 = *v72;
            *char v72 = v73;
            do
            {
              unint64_t v74 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(++v71);
              uint64_t v75 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v74);
              uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v77 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v76);
              int v78 = *(char *)(v77 + 23);
              int v79 = *(char *)(v75 + 23);
              if (v79 >= 0) {
                size_t v80 = *(unsigned __int8 *)(v75 + 23);
              }
              else {
                size_t v80 = *(void *)(v75 + 8);
              }
              if (v79 >= 0) {
                int8x16_t v81 = (const void *)v75;
              }
              else {
                int8x16_t v81 = *(const void **)v75;
              }
              if (v78 >= 0) {
                size_t v82 = *(unsigned __int8 *)(v77 + 23);
              }
              else {
                size_t v82 = *(void *)(v77 + 8);
              }
              if (v78 >= 0) {
                uint64_t v83 = (const void *)v77;
              }
              else {
                uint64_t v83 = *(const void **)v77;
              }
              if (v82 >= v80) {
                size_t v84 = v80;
              }
              else {
                size_t v84 = v82;
              }
              int v85 = memcmp(v81, v83, v84);
              BOOL v86 = v80 < v82;
              if (v85) {
                BOOL v86 = v85 < 0;
              }
            }
            while (v86);
            do
            {
              unint64_t v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(--v72);
              uint64_t v88 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v87);
              int v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v391);
              uint64_t v90 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v89);
              int v91 = *(char *)(v90 + 23);
              int v92 = *(char *)(v88 + 23);
              if (v92 >= 0) {
                size_t v93 = *(unsigned __int8 *)(v88 + 23);
              }
              else {
                size_t v93 = *(void *)(v88 + 8);
              }
              if (v92 >= 0) {
                unint64_t v94 = (const void *)v88;
              }
              else {
                unint64_t v94 = *(const void **)v88;
              }
              if (v91 >= 0) {
                size_t v95 = *(unsigned __int8 *)(v90 + 23);
              }
              else {
                size_t v95 = *(void *)(v90 + 8);
              }
              if (v91 >= 0) {
                unint64_t v96 = (const void *)v90;
              }
              else {
                unint64_t v96 = *(const void **)v90;
              }
              if (v95 >= v93) {
                size_t v97 = v93;
              }
              else {
                size_t v97 = v95;
              }
              int v98 = memcmp(v94, v96, v97);
              BOOL v99 = v93 < v95;
              if (v98) {
                BOOL v99 = v98 < 0;
              }
            }
            while (!v99);
          }
          while (v71 < v72);
          long long v100 = v71 - 1;
        }
        if (v100 != v8)
        {
          uint64_t v101 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v8;
          *uint64_t v8 = *v100;
          *long long v100 = 0;
          sub_2168BD378((int)v8, v101);
        }
        int v102 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v100;
        *long long v100 = (uint64_t)v391;
        v391 = 0;
        sub_2168BD378((int)v100, v102);
        sub_216ABB798(&v391);
        if (v44 >= v16) {
          break;
        }
LABEL_135:
        __n128 result = sub_217054C18(v8, v100, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v100 + 1;
      }
      char v103 = sub_217056350(v8, v100);
      uint64_t v10 = v100 + 1;
      __n128 result = sub_217056350(v100 + 1, a2);
      if (result) {
        break;
      }
      if ((v103 & 1) == 0) {
        goto LABEL_135;
      }
    }
    a2 = v100;
    if ((v103 & 1) == 0) {
      continue;
    }
    return result;
  }
}

void sub_217055DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217055E80(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_217056688(a1, a2, a3, a4);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a5);
  uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v10);
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a4);
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v12);
  int v14 = *(char *)(v13 + 23);
  int v15 = *(char *)(RealPath + 23);
  if (v15 >= 0) {
    size_t v16 = *(unsigned __int8 *)(RealPath + 23);
  }
  else {
    size_t v16 = *(void *)(RealPath + 8);
  }
  if (v15 >= 0) {
    unint64_t v17 = (const void *)RealPath;
  }
  else {
    unint64_t v17 = *(const void **)RealPath;
  }
  if (v14 >= 0) {
    size_t v18 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    size_t v18 = *(void *)(v13 + 8);
  }
  if (v14 >= 0) {
    unint64_t v19 = (const void *)v13;
  }
  else {
    unint64_t v19 = *(const void **)v13;
  }
  if (v18 >= v16) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v18;
  }
  uint64_t result = memcmp(v17, v19, v20);
  BOOL v22 = v16 < v18;
  if (result) {
    BOOL v22 = (int)result < 0;
  }
  if (v22)
  {
    uint64_t v23 = *a4;
    *a4 = *a5;
    *a5 = v23;
    char v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a4);
    uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v24);
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
    uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v26);
    int v28 = *(char *)(v27 + 23);
    int v29 = *(char *)(v25 + 23);
    if (v29 >= 0) {
      size_t v30 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      size_t v30 = *(void *)(v25 + 8);
    }
    if (v29 >= 0) {
      uint64_t v31 = (const void *)v25;
    }
    else {
      uint64_t v31 = *(const void **)v25;
    }
    if (v28 >= 0) {
      size_t v32 = *(unsigned __int8 *)(v27 + 23);
    }
    else {
      size_t v32 = *(void *)(v27 + 8);
    }
    if (v28 >= 0) {
      int v33 = (const void *)v27;
    }
    else {
      int v33 = *(const void **)v27;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    uint64_t result = memcmp(v31, v33, v34);
    BOOL v35 = v30 < v32;
    if (result) {
      BOOL v35 = (int)result < 0;
    }
    if (v35)
    {
      uint64_t v36 = *a3;
      *a3 = *a4;
      *a4 = v36;
      size_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
      uint64_t v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v37);
      size_t v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
      uint64_t v40 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v39);
      int v41 = *(char *)(v40 + 23);
      int v42 = *(char *)(v38 + 23);
      if (v42 >= 0) {
        size_t v43 = *(unsigned __int8 *)(v38 + 23);
      }
      else {
        size_t v43 = *(void *)(v38 + 8);
      }
      if (v42 >= 0) {
        unint64_t v44 = (const void *)v38;
      }
      else {
        unint64_t v44 = *(const void **)v38;
      }
      if (v41 >= 0) {
        size_t v45 = *(unsigned __int8 *)(v40 + 23);
      }
      else {
        size_t v45 = *(void *)(v40 + 8);
      }
      if (v41 >= 0) {
        uint64_t v46 = (const void *)v40;
      }
      else {
        uint64_t v46 = *(const void **)v40;
      }
      if (v45 >= v43) {
        size_t v47 = v43;
      }
      else {
        size_t v47 = v45;
      }
      uint64_t result = memcmp(v44, v46, v47);
      BOOL v48 = v43 < v45;
      if (result) {
        BOOL v48 = (int)result < 0;
      }
      if (v48)
      {
        uint64_t v49 = *a2;
        *a2 = *a3;
        *a3 = v49;
        int v50 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
        uint64_t v51 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v50);
        unint64_t v52 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
        uint64_t v53 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v52);
        int v54 = *(char *)(v53 + 23);
        int v55 = *(char *)(v51 + 23);
        if (v55 >= 0) {
          size_t v56 = *(unsigned __int8 *)(v51 + 23);
        }
        else {
          size_t v56 = *(void *)(v51 + 8);
        }
        if (v55 >= 0) {
          BOOL v57 = (const void *)v51;
        }
        else {
          BOOL v57 = *(const void **)v51;
        }
        if (v54 >= 0) {
          size_t v58 = *(unsigned __int8 *)(v53 + 23);
        }
        else {
          size_t v58 = *(void *)(v53 + 8);
        }
        if (v54 >= 0) {
          uint64_t v59 = (const void *)v53;
        }
        else {
          uint64_t v59 = *(const void **)v53;
        }
        if (v58 >= v56) {
          size_t v60 = v56;
        }
        else {
          size_t v60 = v58;
        }
        uint64_t result = memcmp(v57, v59, v60);
        BOOL v61 = v56 < v58;
        if (result) {
          BOOL v61 = (int)result < 0;
        }
        if (v61)
        {
          uint64_t v62 = *a1;
          *a1 = *a2;
          *a2 = v62;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2170560EC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v6);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v8);
  int v10 = *(char *)(v9 + 23);
  int v11 = *(char *)(RealPath + 23);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(RealPath + 23);
  }
  else {
    size_t v12 = *(void *)(RealPath + 8);
  }
  if (v11 >= 0) {
    uint64_t v13 = (const void *)RealPath;
  }
  else {
    uint64_t v13 = *(const void **)RealPath;
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v14 = *(void *)(v9 + 8);
  }
  if (v10 >= 0) {
    int v15 = (const void *)v9;
  }
  else {
    int v15 = *(const void **)v9;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  else {
    BOOL v18 = v12 < v14;
  }
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
  uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v19);
  int v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v21);
  int v23 = *(char *)(v22 + 23);
  int v24 = *(char *)(v20 + 23);
  if (v24 >= 0) {
    size_t v25 = *(unsigned __int8 *)(v20 + 23);
  }
  else {
    size_t v25 = *(void *)(v20 + 8);
  }
  if (v24 >= 0) {
    uint64_t v26 = (const void *)v20;
  }
  else {
    uint64_t v26 = *(const void **)v20;
  }
  if (v23 >= 0) {
    size_t v27 = *(unsigned __int8 *)(v22 + 23);
  }
  else {
    size_t v27 = *(void *)(v22 + 8);
  }
  if (v23 >= 0) {
    int v28 = (const void *)v22;
  }
  else {
    int v28 = *(const void **)v22;
  }
  if (v27 >= v25) {
    size_t v29 = v25;
  }
  else {
    size_t v29 = v27;
  }
  uint64_t result = memcmp(v26, v28, v29);
  BOOL v31 = (int)result < 0;
  if (!result) {
    BOOL v31 = v25 < v27;
  }
  if (v18)
  {
    uint64_t v32 = *a1;
    if (v31)
    {
      *a1 = *a3;
LABEL_78:
      *a3 = v32;
      return result;
    }
    *a1 = *a2;
    *a2 = v32;
    size_t v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
    uint64_t v48 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v47);
    uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t v50 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v49);
    int v51 = *(char *)(v50 + 23);
    int v52 = *(char *)(v48 + 23);
    if (v52 >= 0) {
      size_t v53 = *(unsigned __int8 *)(v48 + 23);
    }
    else {
      size_t v53 = *(void *)(v48 + 8);
    }
    if (v52 >= 0) {
      int v54 = (const void *)v48;
    }
    else {
      int v54 = *(const void **)v48;
    }
    if (v51 >= 0) {
      size_t v55 = *(unsigned __int8 *)(v50 + 23);
    }
    else {
      size_t v55 = *(void *)(v50 + 8);
    }
    if (v51 >= 0) {
      size_t v56 = (const void *)v50;
    }
    else {
      size_t v56 = *(const void **)v50;
    }
    if (v55 >= v53) {
      size_t v57 = v53;
    }
    else {
      size_t v57 = v55;
    }
    uint64_t result = memcmp(v54, v56, v57);
    BOOL v58 = v53 < v55;
    if (result) {
      BOOL v58 = (int)result < 0;
    }
    if (v58)
    {
      uint64_t v32 = *a2;
      *a2 = *a3;
      goto LABEL_78;
    }
  }
  else if (v31)
  {
    uint64_t v33 = *a2;
    *a2 = *a3;
    *a3 = v33;
    size_t v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t v35 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v34);
    uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v36);
    int v38 = *(char *)(v37 + 23);
    int v39 = *(char *)(v35 + 23);
    if (v39 >= 0) {
      size_t v40 = *(unsigned __int8 *)(v35 + 23);
    }
    else {
      size_t v40 = *(void *)(v35 + 8);
    }
    if (v39 >= 0) {
      int v41 = (const void *)v35;
    }
    else {
      int v41 = *(const void **)v35;
    }
    if (v38 >= 0) {
      size_t v42 = *(unsigned __int8 *)(v37 + 23);
    }
    else {
      size_t v42 = *(void *)(v37 + 8);
    }
    if (v38 >= 0) {
      size_t v43 = (const void *)v37;
    }
    else {
      size_t v43 = *(const void **)v37;
    }
    if (v42 >= v40) {
      size_t v44 = v40;
    }
    else {
      size_t v44 = v42;
    }
    uint64_t result = memcmp(v41, v43, v44);
    BOOL v45 = v40 < v42;
    if (result) {
      BOOL v45 = (int)result < 0;
    }
    if (v45)
    {
      uint64_t v46 = *a1;
      *a1 = *a2;
      *a2 = v46;
    }
  }
  return result;
}

uint64_t sub_217056350(uint64_t *a1, uint64_t *a2)
{
  BOOL v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      char v5 = a2 - 1;
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2 - 1);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v6);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v8);
      int v10 = *(char *)(v9 + 23);
      int v11 = *(char *)(RealPath + 23);
      if (v11 >= 0) {
        size_t v12 = *(unsigned __int8 *)(RealPath + 23);
      }
      else {
        size_t v12 = *(void *)(RealPath + 8);
      }
      if (v11 >= 0) {
        uint64_t v13 = (const void *)RealPath;
      }
      else {
        uint64_t v13 = *(const void **)RealPath;
      }
      if (v10 >= 0) {
        size_t v14 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        size_t v14 = *(void *)(v9 + 8);
      }
      if (v10 >= 0) {
        int v15 = (const void *)v9;
      }
      else {
        int v15 = *(const void **)v9;
      }
      if (v14 >= v12) {
        size_t v16 = v12;
      }
      else {
        size_t v16 = v14;
      }
      int v17 = memcmp(v13, v15, v16);
      BOOL v18 = v12 < v14;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      if (v18)
      {
        uint64_t v19 = *a1;
        *a1 = *v5;
        uint64_t *v5 = v19;
      }
      return 1;
    case 3:
      sub_2170560EC(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_217056688(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_217055E80(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      uint64_t v20 = a1 + 2;
      sub_2170560EC(a1, a1 + 1, a1 + 2);
      int v21 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      break;
  }
  while (1)
  {
    int v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v21);
    uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v24);
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v20);
    uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v26);
    int v28 = *(char *)(v27 + 23);
    int v29 = *(char *)(v25 + 23);
    if (v29 >= 0) {
      size_t v30 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      size_t v30 = *(void *)(v25 + 8);
    }
    if (v29 >= 0) {
      BOOL v31 = (const void *)v25;
    }
    else {
      BOOL v31 = *(const void **)v25;
    }
    if (v28 >= 0) {
      size_t v32 = *(unsigned __int8 *)(v27 + 23);
    }
    else {
      size_t v32 = *(void *)(v27 + 8);
    }
    if (v28 >= 0) {
      uint64_t v33 = (const void *)v27;
    }
    else {
      uint64_t v33 = *(const void **)v27;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    int v35 = memcmp(v31, v33, v34);
    BOOL v36 = v30 < v32;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (!v36) {
      goto LABEL_65;
    }
    size_t v57 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v21;
    uint64_t *v21 = 0;
    uint64_t v37 = v22;
    while (1)
    {
      int v38 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)a1 + v37 + 24);
      int v39 = *v38;
      size_t v40 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)a1 + v37 + 16);
      *(v38 - 1) = 0;
      *int v38 = v40;
      sub_2168BD378((int)v38, v39);
      if (v37 == -16) {
        break;
      }
      int v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v57);
      uint64_t v42 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v41);
      size_t v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)((char *)a1 + v37 + 8));
      uint64_t v44 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v43);
      int v45 = *(char *)(v44 + 23);
      int v46 = *(char *)(v42 + 23);
      if (v46 >= 0) {
        size_t v47 = *(unsigned __int8 *)(v42 + 23);
      }
      else {
        size_t v47 = *(void *)(v42 + 8);
      }
      if (v46 >= 0) {
        uint64_t v48 = (const void *)v42;
      }
      else {
        uint64_t v48 = *(const void **)v42;
      }
      if (v45 >= 0) {
        size_t v49 = *(unsigned __int8 *)(v44 + 23);
      }
      else {
        size_t v49 = *(void *)(v44 + 8);
      }
      if (v45 >= 0) {
        uint64_t v50 = (const void *)v44;
      }
      else {
        uint64_t v50 = *(const void **)v44;
      }
      if (v49 >= v47) {
        size_t v51 = v47;
      }
      else {
        size_t v51 = v49;
      }
      int v52 = memcmp(v48, v50, v51);
      BOOL v53 = v47 < v49;
      if (v52) {
        BOOL v53 = v52 < 0;
      }
      v37 -= 8;
      if (!v53)
      {
        int v54 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)a1 + v37 + 24);
        goto LABEL_63;
      }
    }
    int v54 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1;
LABEL_63:
    size_t v55 = *v54;
    *int v54 = v57;
    size_t v57 = 0;
    sub_2168BD378((int)v54, v55);
    if (++v23 == 8) {
      break;
    }
    sub_216ABB798(&v57);
LABEL_65:
    uint64_t v20 = v21;
    v22 += 8;
    if (++v21 == a2) {
      return 1;
    }
  }
  BOOL v4 = v21 + 1 == a2;
  sub_216ABB798(&v57);
  return v4;
}

void sub_217056658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217056688(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  sub_2170560EC(a1, a2, a3);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a4);
  uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v8);
  int v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v10);
  int v12 = *(char *)(v11 + 23);
  int v13 = *(char *)(RealPath + 23);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(RealPath + 23);
  }
  else {
    size_t v14 = *(void *)(RealPath + 8);
  }
  if (v13 >= 0) {
    int v15 = (const void *)RealPath;
  }
  else {
    int v15 = *(const void **)RealPath;
  }
  if (v12 >= 0) {
    size_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    size_t v16 = *(void *)(v11 + 8);
  }
  if (v12 >= 0) {
    int v17 = (const void *)v11;
  }
  else {
    int v17 = *(const void **)v11;
  }
  if (v16 >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v16;
  }
  uint64_t result = memcmp(v15, v17, v18);
  BOOL v20 = v14 < v16;
  if (result) {
    BOOL v20 = (int)result < 0;
  }
  if (v20)
  {
    uint64_t v21 = *a3;
    *a3 = *a4;
    *a4 = v21;
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a3);
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v22);
    int v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v24);
    int v26 = *(char *)(v25 + 23);
    int v27 = *(char *)(v23 + 23);
    if (v27 >= 0) {
      size_t v28 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v28 = *(void *)(v23 + 8);
    }
    if (v27 >= 0) {
      int v29 = (const void *)v23;
    }
    else {
      int v29 = *(const void **)v23;
    }
    if (v26 >= 0) {
      size_t v30 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      size_t v30 = *(void *)(v25 + 8);
    }
    if (v26 >= 0) {
      BOOL v31 = (const void *)v25;
    }
    else {
      BOOL v31 = *(const void **)v25;
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    uint64_t result = memcmp(v29, v31, v32);
    BOOL v33 = v28 < v30;
    if (result) {
      BOOL v33 = (int)result < 0;
    }
    if (v33)
    {
      uint64_t v34 = *a2;
      *a2 = *a3;
      *a3 = v34;
      int v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
      uint64_t v36 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v35);
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
      uint64_t v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v37);
      int v39 = *(char *)(v38 + 23);
      int v40 = *(char *)(v36 + 23);
      if (v40 >= 0) {
        size_t v41 = *(unsigned __int8 *)(v36 + 23);
      }
      else {
        size_t v41 = *(void *)(v36 + 8);
      }
      if (v40 >= 0) {
        uint64_t v42 = (const void *)v36;
      }
      else {
        uint64_t v42 = *(const void **)v36;
      }
      if (v39 >= 0) {
        size_t v43 = *(unsigned __int8 *)(v38 + 23);
      }
      else {
        size_t v43 = *(void *)(v38 + 8);
      }
      if (v39 >= 0) {
        uint64_t v44 = (const void *)v38;
      }
      else {
        uint64_t v44 = *(const void **)v38;
      }
      if (v43 >= v41) {
        size_t v45 = v41;
      }
      else {
        size_t v45 = v43;
      }
      uint64_t result = memcmp(v42, v44, v45);
      BOOL v46 = v41 < v43;
      if (result) {
        BOOL v46 = (int)result < 0;
      }
      if (v46)
      {
        uint64_t v47 = *a1;
        *a1 = *a2;
        *a2 = v47;
      }
    }
  }
  return result;
}

void sub_217056860(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = (uint64_t)a2;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_21680F80C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216782E84((void *)a1, v11);
    int v12 = sub_217056A30(v8, (uint64_t *)v6, a3, *(char **)(a1 + 8));
LABEL_18:
    *(void *)(a1 + 8) = v12;
    return;
  }
  int v13 = *(char **)(a1 + 8);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v9) >> 3);
  if (v14 < a4)
  {
    if (v13 - (char *)v9 >= 1)
    {
      unint64_t v15 = v14 + 1;
      size_t v16 = a2;
      do
      {
        size_t v16 = (uint64_t *)*v16;
        --v15;
      }
      while (v15 > 1);
      if (v16 != a2)
      {
        do
        {
          std::string::operator=(v9, (const std::string *)(v6 + 16));
          uint64_t v6 = *(void *)v6;
          ++v9;
        }
        while ((uint64_t *)v6 != v16);
        int v13 = *(char **)(a1 + 8);
      }
      uint64_t v6 = (uint64_t)v16;
    }
    int v12 = sub_217056A30(v8, (uint64_t *)v6, a3, v13);
    goto LABEL_18;
  }
  if (a2 == a3)
  {
    uint64_t v17 = *(void *)a1;
  }
  else
  {
    uint64_t v17 = *(void *)a1;
    do
    {
      std::string::operator=(v9, (const std::string *)(v6 + 16));
      uint64_t v6 = *(void *)v6;
      ++v9;
      v17 += 24;
    }
    while ((uint64_t *)v6 != a3);
    int v13 = *(char **)(a1 + 8);
  }
  while (v13 != (char *)v17)
  {
    if (*(v13 - 1) < 0) {
      operator delete(*((void **)v13 - 3));
    }
    v13 -= 24;
  }
  *(void *)(a1 + 8) = v17;
}

void sub_217056A24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_217056A30(uint64_t a1, uint64_t *a2, uint64_t *a3, char *__dst)
{
  BOOL v4 = __dst;
  unint64_t v11 = __dst;
  int v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 39) < 0)
      {
        sub_216778F24(v4, (void *)v6[2], v6[3]);
        BOOL v4 = v12;
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 1);
        *((void *)v4 + 2) = v6[4];
        *(_OWORD *)BOOL v4 = v7;
      }
      uint64_t v6 = (uint64_t *)*v6;
      v4 += 24;
      int v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21680F480((uint64_t)v9);
  return v4;
}

void sub_217056AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_217056AFC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C771280;
  result[1] = v3;
  return result;
}

uint64_t sub_217056B44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C771280;
  a2[1] = v2;
  return result;
}

void sub_217056B70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 48))(__p);
  if (SHIBYTE(v6) < 0)
  {
    sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    int v4 = SHIBYTE(v6);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
}

void sub_217056C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217056C34(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7712E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217056C74()
{
  return &unk_26C7712E0;
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26C771300;
  v4[1] = pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStackResolveAssetPath;
  v4[3] = v4;
  pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStack(a1, (uint64_t)v4, a2, a3);
  return sub_216D52D98(v4);
}

void sub_217056D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D52D98((uint64_t *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdUtilsFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v7, (uint64_t)&v14);
  uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)&v14, v8);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::PcpPrimIndex((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v19, v9);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v19);
  uint64_t v14 = v10;
  unint64_t v15 = v11;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v14);
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(LayerStack, a2, a3, a4);
  sub_2168BBAAC(&v22, 0);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  return sub_216BDCEE8(&v19);
}

void sub_217056E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_217056E3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C771300;
  result[1] = v3;
  return result;
}

uint64_t sub_217056E84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C771300;
  a2[1] = v2;
  return result;
}

uint64_t sub_217056EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_217056EC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771370)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217056F00()
{
  return &unk_26C771370;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::~UsdUtilsUsdStageStatsKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *this)
{
  uint64_t v18 = (void **)((char *)this + 136);
  sub_216889A04(&v18);
  uint64_t v2 = *((void *)this + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 15);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 14);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 13);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 12);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 11);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 10);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 8);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 7);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 6);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 5);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 4);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 3);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 2);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 1);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::UsdUtilsUsdStageStatsKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v25 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "approxMemoryInMb", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v25, "totalPrimCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "modelCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "instancedModelCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "assetCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "prototypeCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "totalInstanceCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "usedLayerCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "primary", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "prototypes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "primCounts", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "activePrimCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "inactivePrimCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "pureOverCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "instanceCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "primCountsByType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "untyped", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v26 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v25;
  uint64_t v27 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v28 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v29 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v30 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v31 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v32 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v33 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v34 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v35 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v36 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v37 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v38 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v39 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v40 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v41 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v42 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  uint64_t v19 = (char *)operator new(0x88uLL);
  uint64_t v20 = 0;
  *((void *)this + 17) = v19;
  *((void *)this + 18) = v19;
  *((void *)this + 19) = v19 + 136;
  do
  {
    uint64_t v21 = *(uint64_t *)((char *)&v26 + v20);
    *(void *)&v19[v20] = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v19[v20] &= 0xFFFFFFFFFFFFFFF8;
    }
    v20 += 8;
  }
  while (v20 != 136);
  *((void *)this + 18) = v19 + 136;
  for (uint64_t i = 128; i != -8; i -= 8)
  {
    uint64_t v23 = *(uint64_t *)((char *)&v26 + i);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_217057690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void **a18, uint64_t a19, char a20)
{
  sub_216889A04(&a18);
  uint64_t v30 = 128;
  while (1)
  {
    uint64_t v31 = *(void *)(&a20 + v30);
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v30 -= 8;
    if (v30 == -8)
    {
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2170578C4()
{
}

void sub_2170578CC()
{
}

void sub_2170578D4()
{
}

void sub_2170578DC()
{
}

void sub_2170578E4()
{
}

void sub_2170578EC()
{
}

void sub_2170578F4()
{
}

void sub_2170578FC()
{
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdUtilsComputeUsdStageStats@<X0>(pxrInternal__aapl__pxrReserved__::TfMallocTag *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  double v7 = 0.0;
  if (v6) {
    double v7 = (double)pxrInternal__aapl__pxrReserved__::TfMallocTag::GetTotalBytes(a1) * 0.000000953674316;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfMallocTag *)pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)a1, 0, &v21);
  if (v21)
  {
    unsigned __int8 v9 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if (v9)
    {
      unint64_t TotalBytes = pxrInternal__aapl__pxrReserved__::TfMallocTag::GetTotalBytes(v8);
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      if (!v11) {
        uint64_t v11 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      }
      if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      }
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)EmptyString);
      uint64_t v14 = v13;
      uint64_t v15 = v13[1];
      if (v15) {
        BOOL v16 = (v13[1] & 3) == 3;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16) {
        (*(void (**)(uint64_t *))((v15 & 0xFFFFFFFFFFFFFFF8) + 32))(v13);
      }
      v14[1] = (uint64_t)&unk_26C750B03;
      *(double *)uint64_t v14 = (double)TotalBytes * 0.000000953674316 - v7;
    }
    sub_2170519EC(&v19, (uint64_t *)&v21);
    pxrInternal__aapl__pxrReserved__::UsdUtilsComputeUsdStageStats(&v19, a2);
    uint64_t v17 = v20;
    if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    *a3 = v21;
    uint64_t v21 = 0;
  }
  else
  {
    *a3 = 0;
  }
  return sub_216E10FB8(&v21);
}

void sub_217057AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, atomic_uint *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (atomic_fetch_add_explicit(a4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a4 + 8))(a4);
    }
  }
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsComputeUsdStageStats(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetUsedLayers(v4, 1, v5, &v182);
  double v7 = v182;
  uint64_t v6 = v183;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetSessionLayer(v8, (uint64_t *)&v188);
  unsigned __int8 v9 = sub_21697CF14(&v188);
  BOOL v11 = (v10 & 1 | (unint64_t)v9) != 0;
  uint64_t v12 = *((void *)&v188 + 1);
  if (*((void *)&v188 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v188 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v6 - (void)v7;
  *(void *)&long long v188 = &v182;
  sub_216850BF4((void ***)&v188);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v14) {
    uint64_t v14 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  uint64_t v15 = v13 >> 4;
  if ((*((void *)v14 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
  }
  uint64_t v17 = v15 - v11;
  uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)EmptyString);
  uint64_t v19 = v18;
  uint64_t v20 = v18[1];
  if (v20) {
    BOOL v21 = (v18[1] & 3) == 3;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21) {
    (*(void (**)(uint64_t *))((v20 & 0xFFFFFFFFFFFFFFF8) + 32))(v18);
  }
  *uint64_t v19 = v17;
  v19[1] = (uint64_t)&unk_26C75076B;
  uint64_t v198 = 0;
  v199[0] = 0;
  uint64_t v196 = 0;
  uint64_t v197 = 0;
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 0;
  uint64_t v191 = 0;
  long long v188 = 0u;
  long long v189 = 0u;
  int v190 = 1065353216;
  v187[0] = 0;
  v187[1] = 0;
  v186 = v187;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::TraverseAll(v22, (uint64_t)&v182);
  uint64_t v158 = a2;
  sub_216D3ADBC((uint64_t *)&v182, (uint64_t)&v165);
  *(void *)&long long v178 = v183;
  *((void *)&v178 + 1) = &v182;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v179);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v179 + 1);
  int v180 = 0;
  __int16 v181 = 0;
  while (v165 != v178
       || (void)v166 != v179
       || DWORD2(v166) != v180
       || BYTE12(v166) != v181
       || BYTE13(v166) != HIBYTE(v181))
  {
    sub_216D3AE90((uint64_t)&v165, (uint64_t)&v175);
    sub_217058CB8((pxrInternal__aapl__pxrReserved__ **)&v175, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v186, v199, &v195, &v198, &v197, &v196, &v194, &v193, &v192, &v191, &v188);
    if ((v177 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v176 + 1);
    sub_21697C414(&v176);
    if (*((void *)&v175 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v175 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v165);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v179 + 1);
  sub_21697C414(&v179);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v166 + 1);
  sub_21697C414(&v166);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v185);
  sub_21697C414(&v184);
  uint64_t v23 = v191;
  int v24 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrototypes(v24, &v173);
  uint64_t v25 = v173;
  uint64_t v159 = v174;
  uint64_t v26 = v174 - v173;
  if (v174 != v173)
  {
    uint64_t v157 = v174 - v173;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    uint64_t v169 = 0;
    uint64_t v170 = 0;
    uint64_t v168 = 0;
    long long v165 = 0u;
    long long v166 = 0u;
    int v167 = 1065353216;
    do
    {
      sub_216F00438((uint64_t)&v182, v25);
      sub_216D3ADBC((uint64_t *)&v182, (uint64_t)&v178);
      *(void *)&long long v175 = v183;
      *((void *)&v175 + 1) = &v182;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v176);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v176 + 1);
      LODWORD(v177) = 0;
      WORD2(v177) = 0;
      while (v178 != v175
           || v179 != v176
           || v180 != v177
           || v181 != BYTE4(v177)
           || HIBYTE(v181) != BYTE5(v177))
      {
        sub_216D3AE90((uint64_t)&v178, (uint64_t)&v160);
        sub_217058CB8(&v160, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v186, v199, &v172, &v198, &v197, &v196, &v171, &v170, &v169, &v168, &v165);
        if ((v164 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v163);
        sub_21697C414(&v162);
        if (v161) {
          sub_216D16E0C(v161);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v178);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v176 + 1);
      sub_21697C414(&v176);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v179 + 1);
      sub_21697C414(&v179);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v185);
      sub_21697C414(&v184);
      v25 += 32;
    }
    while (v25 != v159);
    uint64_t v27 = v168;
    size_t v182 = 0;
    *(void *)&long long v178 = 0;
    uint64_t v28 = v172;
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    uint64_t v26 = v157;
    if (!v29) {
      uint64_t v29 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v29 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v30 = (uint64_t *)((*((void *)v29 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
    }
    uint64_t v31 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v178, (long long *)v30);
    uint64_t v32 = v31;
    uint64_t v33 = v31[1];
    if (v33) {
      BOOL v34 = (v31[1] & 3) == 3;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34) {
      (*(void (**)(uint64_t *))((v33 & 0xFFFFFFFFFFFFFFF8) + 32))(v31);
    }
    *uint64_t v32 = v28;
    v32[1] = (uint64_t)&unk_26C75076B;
    uint64_t v35 = v171;
    uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v36) {
      uint64_t v36 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v36 + 11) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v37 = (uint64_t *)((*((void *)v36 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
    }
    uint64_t v38 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v178, (long long *)v37);
    uint64_t v39 = v38;
    uint64_t v40 = v38[1];
    if (v40 && (v38[1] & 3) != 3) {
      (*(void (**)(uint64_t *))((v40 & 0xFFFFFFFFFFFFFFF8) + 32))(v38);
    }
    *uint64_t v39 = v35;
    v39[1] = (uint64_t)&unk_26C75076B;
    uint64_t v41 = v170;
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v42) {
      uint64_t v42 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v42 + 12) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v43 = (uint64_t *)((*((void *)v42 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
    }
    uint64_t v44 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v178, (long long *)v43);
    size_t v45 = v44;
    uint64_t v46 = v44[1];
    if (v46 && (v44[1] & 3) != 3) {
      (*(void (**)(uint64_t *))((v46 & 0xFFFFFFFFFFFFFFF8) + 32))(v44);
    }
    uint64_t *v45 = v41;
    v45[1] = (uint64_t)&unk_26C75076B;
    uint64_t v47 = v169;
    uint64_t v48 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v48) {
      uint64_t v48 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v48 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
      size_t v49 = (uint64_t *)((*((void *)v48 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      size_t v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
    }
    uint64_t v50 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v178, (long long *)v49);
    size_t v51 = v50;
    uint64_t v52 = v50[1];
    if (v52 && (v50[1] & 3) != 3) {
      (*(void (**)(uint64_t *))((v52 & 0xFFFFFFFFFFFFFFF8) + 32))(v50);
    }
    *size_t v51 = v47;
    v51[1] = (uint64_t)&unk_26C75076B;
    uint64_t v53 = v168;
    int v54 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v54) {
      int v54 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v54 + 14) & 0xFFFFFFFFFFFFFFF8) != 0) {
      size_t v55 = (uint64_t *)((*((void *)v54 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      size_t v55 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v54);
    }
    size_t v56 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v178, (long long *)v55);
    size_t v57 = v56;
    uint64_t v58 = v56[1];
    if (v58 && (v56[1] & 3) != 3) {
      (*(void (**)(uint64_t *))((v58 & 0xFFFFFFFFFFFFFFF8) + 32))(v56);
    }
    *size_t v57 = v53;
    v57[1] = (uint64_t)&unk_26C75076B;
    uint64_t v59 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v59) {
      uint64_t v59 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v59 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
      size_t v60 = (uint64_t *)((*((void *)v59 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      size_t v60 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v59);
    }
    BOOL v61 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v182, (long long *)v60);
    uint64_t v62 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168EEF10((uint64_t)v61, (const void ****)&v178);
    *(void *)&long long v175 = 0;
    for (uint64_t i = (void *)v166; i; uint64_t i = (void *)*i)
    {
      uint64_t v64 = i[3];
      if ((i[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
        int v65 = (uint64_t *)((i[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        int v65 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v62);
      }
      uint64_t v62 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v175, (long long *)v65);
      size_t v66 = v62;
      uint64_t v67 = *((void *)v62 + 1);
      if (v67) {
        BOOL v68 = (*((void *)v62 + 1) & 3) == 3;
      }
      else {
        BOOL v68 = 1;
      }
      if (!v68) {
        uint64_t v62 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v67 & 0xFFFFFFFFFFFFFFF8) + 32))(v62);
      }
      *(void *)size_t v66 = v64;
      *((void *)v66 + 1) = &unk_26C75076B;
    }
    int v69 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    a2 = v158;
    if (!v69) {
      int v69 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v69 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
      BOOL v70 = (uint64_t *)((*((void *)v69 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      BOOL v70 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v69);
    }
    unint64_t v71 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v182, (long long *)v70);
    sub_2168EEF10((uint64_t)v71, (const void ****)&v175);
    char v72 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    if (!v72) {
      char v72 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
    }
    if ((*((void *)v72 + 9) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v73 = (uint64_t *)((*((void *)v72 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v73 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v72);
    }
    unint64_t v74 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v158, (long long *)v73);
    sub_2168EEF10((uint64_t)v74, (const void ****)&v182);
    v23 += v27;
    sub_2168EBBB8((void ***)&v175, 0);
    sub_2168EBBB8((void ***)&v178, 0);
    sub_2168EBBB8((void ***)&v182, 0);
    sub_2168C08A0((uint64_t)&v165);
  }
  uint64_t v75 = v199[0];
  uint64_t v76 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v76) {
    uint64_t v76 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v76 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v77 = (uint64_t *)((*((void *)v76 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v77 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v76);
  }
  int v78 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v77);
  int v79 = v78;
  uint64_t v80 = v78[1];
  if (v80 && (v78[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v80 & 0xFFFFFFFFFFFFFFF8) + 32))(v78);
  }
  *int v79 = v75;
  v79[1] = (uint64_t)&unk_26C75076B;
  uint64_t v81 = v198;
  size_t v82 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v82) {
    size_t v82 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v82 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v83 = (uint64_t *)((*((void *)v82 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v83 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v82);
  }
  size_t v84 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v83);
  int v85 = v84;
  uint64_t v86 = v84[1];
  if (v86 && (v84[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v86 & 0xFFFFFFFFFFFFFFF8) + 32))(v84);
  }
  *int v85 = v81;
  v85[1] = (uint64_t)&unk_26C75076B;
  uint64_t v87 = v197;
  uint64_t v88 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v88) {
    uint64_t v88 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v88 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v89 = (uint64_t *)((*((void *)v88 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v89 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v88);
  }
  uint64_t v90 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v89);
  int v91 = v90;
  uint64_t v92 = v90[1];
  if (v92 && (v90[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v92 & 0xFFFFFFFFFFFFFFF8) + 32))(v90);
  }
  *int v91 = v87;
  v91[1] = (uint64_t)&unk_26C75076B;
  uint64_t v93 = v196;
  unint64_t v94 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v94) {
    unint64_t v94 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v94 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
    size_t v95 = (uint64_t *)((*((void *)v94 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    size_t v95 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v94);
  }
  unint64_t v96 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v95);
  size_t v97 = v96;
  uint64_t v98 = v96[1];
  if (v98 && (v96[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v98 & 0xFFFFFFFFFFFFFFF8) + 32))(v96);
  }
  *size_t v97 = v93;
  v97[1] = (uint64_t)&unk_26C75076B;
  BOOL v99 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v99) {
    BOOL v99 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v99 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
    long long v100 = (uint64_t *)((*((void *)v99 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    long long v100 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v99);
  }
  uint64_t v101 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v100);
  int v102 = v101;
  uint64_t v103 = v101[1];
  if (v103 && (v101[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v103 & 0xFFFFFFFFFFFFFFF8) + 32))(v101);
  }
  *int v102 = v26 >> 5;
  v102[1] = (uint64_t)&unk_26C75076B;
  v104 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v104) {
    v104 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v104 + 6) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v105 = (uint64_t *)((*((void *)v104 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v105 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v104);
  }
  uint64_t v106 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v105);
  uint64_t v107 = v106;
  uint64_t v108 = v106[1];
  if (v108 && (v106[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v108 & 0xFFFFFFFFFFFFFFF8) + 32))(v106);
  }
  *uint64_t v107 = v23;
  v107[1] = (uint64_t)&unk_26C75076B;
  size_t v182 = 0;
  *(void *)&long long v165 = 0;
  uint64_t v109 = v195;
  size_t v110 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v110) {
    size_t v110 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v110 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    v111 = (uint64_t *)((*((void *)v110 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    v111 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v110);
  }
  size_t v112 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v165, (long long *)v111);
  uint64_t v113 = v112;
  uint64_t v114 = v112[1];
  if (v114 && (v112[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v114 & 0xFFFFFFFFFFFFFFF8) + 32))(v112);
  }
  *uint64_t v113 = v109;
  v113[1] = (uint64_t)&unk_26C75076B;
  uint64_t v115 = v194;
  BOOL v116 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v116) {
    BOOL v116 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v116 + 11) & 0xFFFFFFFFFFFFFFF8) != 0) {
    v117 = (uint64_t *)((*((void *)v116 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    v117 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v116);
  }
  uint64_t v118 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v165, (long long *)v117);
  v119 = v118;
  uint64_t v120 = v118[1];
  if (v120 && (v118[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v120 & 0xFFFFFFFFFFFFFFF8) + 32))(v118);
  }
  uint64_t *v119 = v115;
  v119[1] = (uint64_t)&unk_26C75076B;
  uint64_t v121 = v193;
  int v122 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v122) {
    int v122 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v122 + 12) & 0xFFFFFFFFFFFFFFF8) != 0) {
    size_t v123 = (uint64_t *)((*((void *)v122 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    size_t v123 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v122);
  }
  v124 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v165, (long long *)v123);
  size_t v125 = v124;
  uint64_t v126 = v124[1];
  if (v126 && (v124[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v126 & 0xFFFFFFFFFFFFFFF8) + 32))(v124);
  }
  *size_t v125 = v121;
  v125[1] = (uint64_t)&unk_26C75076B;
  uint64_t v127 = v192;
  int v128 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v128) {
    int v128 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v128 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
    BOOL v129 = (uint64_t *)((*((void *)v128 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    BOOL v129 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v128);
  }
  v130 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v165, (long long *)v129);
  v131 = v130;
  uint64_t v132 = v130[1];
  if (v132 && (v130[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v132 & 0xFFFFFFFFFFFFFFF8) + 32))(v130);
  }
  uint64_t *v131 = v127;
  v131[1] = (uint64_t)&unk_26C75076B;
  uint64_t v133 = v191;
  uint64_t v134 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v134) {
    uint64_t v134 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v134 + 14) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v135 = (uint64_t *)((*((void *)v134 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v135 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v134);
  }
  int v136 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v165, (long long *)v135);
  size_t v137 = v136;
  uint64_t v138 = v136[1];
  if (v138 && (v136[1] & 3) != 3) {
    (*(void (**)(uint64_t *))((v138 & 0xFFFFFFFFFFFFFFF8) + 32))(v136);
  }
  *size_t v137 = v133;
  v137[1] = (uint64_t)&unk_26C75076B;
  size_t v139 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v139) {
    size_t v139 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v139 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    v140 = (uint64_t *)((*((void *)v139 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    v140 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v139);
  }
  size_t v141 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v182, (long long *)v140);
  int v142 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168EEF10((uint64_t)v141, (const void ****)&v165);
  *(void *)&long long v178 = 0;
  for (uint64_t j = (void *)v189; j; uint64_t j = (void *)*j)
  {
    uint64_t v144 = j[3];
    if ((j[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
      v145 = (uint64_t *)((j[2] & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      v145 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v142);
    }
    int v142 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v178, (long long *)v145);
    uint64_t v146 = v142;
    uint64_t v147 = *((void *)v142 + 1);
    if (v147) {
      BOOL v148 = (*((void *)v142 + 1) & 3) == 3;
    }
    else {
      BOOL v148 = 1;
    }
    if (!v148) {
      int v142 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v147 & 0xFFFFFFFFFFFFFFF8) + 32))(v142);
    }
    *(void *)uint64_t v146 = v144;
    *((void *)v146 + 1) = &unk_26C75076B;
  }
  int v149 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v149) {
    int v149 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v149 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v150 = (uint64_t *)((*((void *)v149 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v150 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v149);
  }
  size_t v151 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v182, (long long *)v150);
  sub_2168EEF10((uint64_t)v151, (const void ****)&v178);
  v152 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  if (!v152) {
    v152 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
  }
  if ((*((void *)v152 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
    size_t v153 = (uint64_t *)((*((void *)v152 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    size_t v153 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v152);
  }
  v154 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)v153);
  sub_2168EEF10((uint64_t)v154, (const void ****)&v182);
  uint64_t v155 = v199[0];
  sub_2168EBBB8((void ***)&v178, 0);
  sub_2168EBBB8((void ***)&v165, 0);
  sub_2168EBBB8((void ***)&v182, 0);
  size_t v182 = (void **)&v173;
  sub_216E1B384(&v182);
  sub_21678A498((uint64_t)&v186, v187[0]);
  sub_2168C08A0((uint64_t)&v188);
  return v155;
}

void sub_217058B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_216D3AF04((uint64_t)&a47);
  sub_21678A498(v47 - 232, *(char **)(v47 - 224));
  sub_2168C08A0(v47 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_217058CB8(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, a2);
  if (result)
  {
    ++*a3;
    ++*a4;
    if (sub_216EFB408((uint64_t)a1, v21))
    {
      uint64_t v40 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v38, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
      uint64_t v39 = 0;
      v38[0] = (uint64_t *)&unk_26C768810;
      if (pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetKind((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v38, (pxrInternal__aapl__pxrReserved__::TfToken *)&v40))
      {
        int v24 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
        if (!v24) {
          int v24 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
        }
        BOOL IsA = pxrInternal__aapl__pxrReserved__::KindRegistry::IsA((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v40, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v24 + 1), v23);
        pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v38);
        if (IsA)
        {
          ++*a5;
          if (sub_216E0D4E4((uint64_t)a1, v22)) {
            ++*a6;
          }
          memset(&__p, 0, sizeof(__p));
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v38, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
          uint64_t v39 = 0;
          v38[0] = (uint64_t *)&unk_26C768810;
          int AssetName = pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetName((uint64_t)v38, &__p);
          pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v38);
          if (AssetName)
          {
            sub_21680EE0C((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if (v22) {
              ++*a7;
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI((pxrInternal__aapl__pxrReserved__::UsdModelAPI *)v38);
      }
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    *a11 += sub_216E0D4E4((uint64_t)a1, v22);
    *a8 += sub_216DF1588((uint64_t)a1, v27);
    *a9 += sub_216DF1588((uint64_t)a1, v28) ^ 1;
    *a10 += sub_217059070((uint64_t)a1, v29) ^ 1;
    uint64_t v31 = a1[1];
    if (!v31 || (*((unsigned char *)v31 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], v30);
    }
    if (**((void **)v31 + 3))
    {
      uint64_t v32 = a1[1];
      if (!v32 || (*((unsigned char *)v32 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v32, v30);
      }
      uint64_t v33 = (std::string::size_type *)*((void *)v32 + 3);
    }
    else
    {
      BOOL v34 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      if (!v34) {
        BOOL v34 = sub_2170590AC(&pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys);
      }
      uint64_t v33 = (std::string::size_type *)((char *)v34 + 128);
    }
    std::string::size_type v35 = *v33;
    __p.__r_.__value_.__r.__words[0] = v35;
    if ((v35 & 7) != 0)
    {
      uint64_t v36 = (atomic_uint *)(v35 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v36, 2u, memory_order_relaxed) & 1) == 0) {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      }
    }
    if (!sub_2168CB1F4(a12, &__p))
    {
      v38[0] = (uint64_t *)&__p;
      sub_2168CB2C8((uint64_t)a12, &__p, (uint64_t)&unk_2174BFD90, v38)[3] = 0;
    }
    v38[0] = (uint64_t *)&__p;
    uint64_t result = (uint64_t)sub_2168CB2C8((uint64_t)a12, &__p, (uint64_t)&unk_2174BFD90, v38);
    ++*(void *)(result + 24);
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_217058FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217059070(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (unint64_t v3 = *(void *)(v2 + 56), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
    unint64_t v3 = *(void *)(v2 + 56);
  }
  return (v3 >> 7) & 1;
}

pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *sub_2170590AC(atomic_ullong *a1)
{
  uint64_t result = sub_2170590F4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::~UsdUtilsUsdStageStatsKeys_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *sub_2170590F4()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType *)operator new(0xA0uLL);
  pxrInternal__aapl__pxrReserved__::UsdUtilsUsdStageStatsKeys_StaticTokenType::UsdUtilsUsdStageStatsKeys_StaticTokenType(v0);
  return v0;
}

void sub_217059124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsLocalizeAsset(long long *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)a2, 0)
    && (pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)a2, 0) & 1) == 0)
  {
    v16[0] = "usdUtils/localizeAsset.cpp";
    v16[1] = "UsdUtilsLocalizeAsset";
    v17[0] = 130;
    v17[1] = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsLocalizeAsset(const SdfAssetPath &, const std::string &, boo"
             "l, std::function<UsdUtilsProcessingFunc>)";
    char v18 = 0;
    if (*(char *)(a2 + 23) >= 0) {
      BOOL v11 = (const char *)a2;
    }
    else {
      BOOL v11 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to localize to non directory path: %s", v11);
    return 0;
  }
  sub_2170593EC((uint64_t)v16);
  v16[0] = &unk_26C7713A0;
  memset(&v20, 0, sizeof(v20));
  char v19 = a3;
  sub_217053DAC((uint64_t)v15, a4);
  sub_217059A7C(v17, (uint64_t)v15);
  sub_217051FD0(v15);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  BOOL v8 = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build((pxrInternal__aapl__pxrReserved__ *)v16, a1, (uint64_t)__p);
  BOOL v9 = v8;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  if (!v8) {
    goto LABEL_7;
  }
LABEL_5:
  std::string::operator=(&v20, (const std::string *)a2);
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write((uint64_t)v16, &v20);
LABEL_8:
  v16[0] = &unk_26C7713A0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  sub_217059D5C((uint64_t)v16);
  return v10;
}

void sub_217059304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21705938C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_217059348(uint64_t a1, const std::string *a2)
{
  uint64_t v3 = (const std::string *)(a1 + 512);
  std::string::operator=((std::string *)(a1 + 512), a2);

  return pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(a1, v3);
}

uint64_t sub_21705938C(uint64_t a1)
{
  *(void *)a1 = &unk_26C7713A0;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }

  return sub_217059D5C(a1);
}

uint64_t sub_2170593EC(uint64_t a1)
{
  v4[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C7706A8;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26C7713E8;
  v2[1] = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::_ProcessDependency;
  v2[2] = 0;
  v2[3] = a1;
  v4[3] = v2;
  sub_217054538(a1 + 96, (uint64_t)v4);
  sub_217039660(v4);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 1065353216;
  return a1;
}

void sub_217059510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217039660((uint64_t *)va);
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*(void **)(v2 + 72));
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*(void **)(v2 + 48));
  }
  sub_217051FD0((void *)(v2 + 16));
  sub_216ABB798(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_21705955C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  BOOL v8 = v3;
  uint64_t v38 = *MEMORY[0x263EF8340];
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v3);
  pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)v8 + 64, v5, &v31);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset((uint64_t)Resolver);
  uint64_t v11 = v30;
  if ((v30 & 0x80u) != 0) {
    uint64_t v11 = v29;
  }
  if (!v11)
  {
    uint64_t v33 = "usdUtils/localizeAsset.cpp";
    BOOL v34 = "_WriteToPackage";
    uint64_t v35 = 75;
    uint64_t v36 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    char v37 = 0;
    if (*(char *)(v7 + 23) >= 0) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = *(void *)v7;
    }
    goto LABEL_21;
  }
  uint64_t v12 = v27;
  if ((v27 & 0x80u) != 0) {
    uint64_t v12 = v26;
  }
  if (!v12)
  {
    uint64_t v33 = "usdUtils/localizeAsset.cpp";
    BOOL v34 = "_WriteToPackage";
    uint64_t v35 = 81;
    uint64_t v36 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    char v37 = 0;
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = *(void *)v5;
    }
LABEL_21:
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Failed to resolve source path: %s", v10, v17);
    uint64_t v16 = 0;
    goto LABEL_35;
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAssetForWrite((uint64_t)Resolver);
  if (v23)
  {
    if (v21)
    {
      for (unint64_t i = (*(uint64_t (**)(void))(*(void *)v23 + 16))(); i; i -= v15)
      {
        if (i >= 0x1000) {
          uint64_t v15 = 4096;
        }
        else {
          uint64_t v15 = i;
        }
        (*(void (**)(uint64_t, char **, uint64_t, void))(*(void *)v23 + 32))(v23, &v33, v15, 0);
        (*(void (**)(uint64_t, char **, uint64_t, void))(*(void *)v21 + 24))(v21, &v33, v15, 0);
      }
      uint64_t v16 = 1;
      goto LABEL_31;
    }
    uint64_t v33 = "usdUtils/localizeAsset.cpp";
    BOOL v34 = "_WriteToPackage";
    uint64_t v35 = 96;
    uint64_t v36 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    char v37 = 0;
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v19 = v5;
    }
    else {
      uint64_t v19 = *(void *)v5;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Failed to open destination asset: %s", v13, v19);
  }
  else
  {
    uint64_t v33 = "usdUtils/localizeAsset.cpp";
    BOOL v34 = "_WriteToPackage";
    uint64_t v35 = 91;
    uint64_t v36 = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdUtils_LocalizedAssetBuilder::_WriteToPackage(const std::stri"
          "ng &, const std::string &)";
    char v37 = 0;
    if (*(char *)(v7 + 23) >= 0) {
      uint64_t v18 = v7;
    }
    else {
      uint64_t v18 = *(void *)v7;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v33, (pxrInternal__aapl__pxrReserved__ *)"Failed to open source asset: %s", v13, v18);
  }
  uint64_t v16 = 0;
LABEL_31:
  if (v22) {
    sub_216784EC4(v22);
  }
  if (v24) {
    sub_216784EC4(v24);
  }
LABEL_35:
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  if ((char)v30 < 0) {
    operator delete(v28);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  return v16;
}

void sub_2170598C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_217059958(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7713E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2170599AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7713E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2170599E4(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t (*)(void *, uint64_t, uint64_t, void))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, void))(*v6 + v5);
  }
  return v5(v6, a2, a3, *a4);
}

uint64_t sub_217059A30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217059A70()
{
  return &unk_26C771458;
}

void *sub_217059A7C(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  sub_217053DAC((uint64_t)v4, a2);
  sub_217059AF0(v4, a1);
  sub_217051FD0(v4);
  return a1;
}

void *sub_217059AF0(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        uint64_t v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        uint64_t v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        uint64_t v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      uint64_t v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_217059D50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t sub_217059D5C(uint64_t a1)
{
  *(void *)a1 = &unk_26C7706A8;
  sub_217059E30(a1 + 472);
  uint64_t v3 = (void **)(a1 + 440);
  sub_21682E488(&v3);
  sub_2167877AC(a1 + 416, *(void **)(a1 + 424));
  uint64_t v3 = (void **)(a1 + 392);
  sub_216782F20(&v3);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  sub_2170545D8(a1 + 96);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_217051FD0((void *)(a1 + 16));
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

uint64_t sub_217059E30(uint64_t a1)
{
  sub_216C7BB5C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_217059E6C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGetAlphaAttributeNameForColor(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t a2@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  sub_216779094(&v10, "_A");
  int v5 = *((char *)EmptyString + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)EmptyString;
  }
  else {
    uint64_t v6 = (const std::string::value_type *)*EmptyString;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    std::string::size_type v7 = EmptyString[1];
  }
  BOOL v8 = std::string::insert(&v10, 0, v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_217059F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGetModelNameFromRootLayer(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v4, (atomic_uint **)&v19);
  if (v19)
  {
    *a2 = v19;
    return;
  }
  int v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t RealPath = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v5);
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(RealPath, &__str);
  std::string::size_type v7 = std::string::find(&__str, 46, 0);
  std::string::basic_string(&v17, &__str, 0, v7, (std::allocator<char> *)&v20);
  BOOL v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v16);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v9 = v16[0];
  unint64_t v19 = v16[0];
  v16[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    unint64_t v9 = v19;
    if (!v19) {
      goto LABEL_14;
    }
  }
  else if (!v9)
  {
    goto LABEL_14;
  }
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  if (v10) {
    EmptyString = (uint64_t *)(v10 + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)EmptyString)) {
    goto LABEL_14;
  }
  uint64_t v12 = sub_2169791E0(a1);
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19, v16);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath((pxrInternal__aapl__pxrReserved__::SdfLayer *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v16, &v17);
  LOBYTE(v12) = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v17);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v16 + 1);
  sub_21697C414(v16);
  if (v12)
  {
LABEL_14:
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(v15);
  }
  *a2 = v19;
  unint64_t v19 = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21705A1C8(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  sub_21697B754(&a4);
  if (*(char *)(v19 - 49) < 0) {
    operator delete(*(void **)(v19 - 72));
  }
  uint64_t v21 = *(void *)(v19 - 48);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetRegisteredVariantSets(pxrInternal__aapl__pxrReserved__ *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_267B95070, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&qword_267B95070, &v3, (void (__cdecl *)(void *))sub_21705B848);
  }
  unint64_t result = atomic_load((unint64_t *)&qword_267B95078);
  if (!result) {
    return sub_21705C028();
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdUtilsRegisterVariantSet(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t **)atomic_load((unint64_t *)&qword_267B95078);
  if (!v4) {
    uint64_t v4 = (uint64_t **)sub_21705C028();
  }

  return sub_21705C098(v4, a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimAtPathWithForwarding(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, a2, (uint64_t)&v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v9, v6)&& pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v11))
  {
    sub_216F83748((uint64_t)&v9, a3);
  }
  else
  {
    *(_DWORD *)a3 = v9;
    std::string::size_type v7 = v10;
    *(void *)(a3 + 8) = v10;
    if (v7) {
      atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216981010((_DWORD *)(a3 + 16), &v11);
    sub_21698105C((_DWORD *)(a3 + 20), &v12);
    uint64_t v8 = v13;
    *(void *)(a3 + 24) = v13;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21705A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsUninstancePrimAtPath(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v6, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v7)&& pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 16)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(a2, (uint64_t *)&v25);
    if (v25 != v26)
    {
      uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v26 - 8);
      sub_216981128((uint64_t)&v27, (_DWORD *)v26 - 2);
      uint64_t v26 = v8;
      int v9 = v25;
      if (v25 != v8)
      {
        while (1)
        {
          unint64_t v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, v9, (uint64_t)&v20);
          if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v20, v11) & 1) == 0)break; {
          uint64_t v13 = v21;
          }
          if (!v21 || (uint64_t v14 = *((void *)v21 + 7), (v14 & 0x800) != 0))
          {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v21, v12);
            uint64_t v14 = *((void *)v13 + 7);
          }
          if ((v14 & 0x100) != 0) {
            sub_21705A784((uint64_t)&v20);
          }
          if ((v23 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
          sub_21697C414(&v22);
          if (v21) {
            sub_216D16E0C((atomic_ullong *)v21);
          }
          int v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
          if (v9 == v8) {
            goto LABEL_21;
          }
        }
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
        sub_21697C414(&v22);
        if (v21) {
          sub_216D16E0C((atomic_ullong *)v21);
        }
      }
    }
LABEL_21:
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v15, a2, (uint64_t)&v20);
    *(_DWORD *)a3 = v20;
    uint64_t v16 = v21;
    uint64_t v21 = 0;
    std::string v17 = *(atomic_ullong **)(a3 + 8);
    *(void *)(a3 + 8) = v16;
    if (v17) {
      sub_216D16E0C(v17);
    }
    sub_21697DE94((int *)(a3 + 16), (int *)&v22);
    sub_21697DEEC((int *)(a3 + 20), (int *)&v22 + 1);
    if (&v20 == (const pxrInternal__aapl__pxrReserved__::SdfPath ***)a3)
    {
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a3 + 24);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(a3 + 24) = v23;
      unint64_t v23 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
    sub_21697C414(&v22);
    if (v21) {
      sub_216D16E0C((atomic_ullong *)v21);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v19))
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 16)))
      {
        char v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath **)"usdUtils/pipeline.cpp";
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__ *)"UsdUtilsUninstancePrimAtPath";
        uint64_t v22 = 288;
        unint64_t v23 = (unint64_t)"UsdPrim pxrInternal__aapl__pxrReserved__::UsdUtilsUninstancePrimAtPath(const UsdStagePtr"
                                " &, const SdfPath &)";
        char v24 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v20, "!p || !p.IsInstanceProxy()", 0);
      }
    }
    char v20 = &v25;
    sub_216981168((void ***)&v20);
  }
}

void sub_21705A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a15;
  sub_216981168(&a18);
  sub_216D16AD8(v18);
  _Unwind_Resume(a1);
}

void sub_21705A784(uint64_t a1)
{
  char v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    char v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D2483C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200));
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimaryUVSetName(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_21705A838() + 72;
}

unint64_t sub_21705A838()
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v0 = (unint64_t *)atomic_load((unint64_t *)&qword_267B95080);
  if (!v0)
  {
    uint64_t v0 = (unint64_t *)operator new(0x68uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "UsdUtilsPipeline", 0);
    uint64_t v26 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "MaterialsScopeName", 0);
    uint64_t v25 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "PrimaryCameraName", 0);
    char v2 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "ProvidesRegisteredVariantSetsFromPlugin", 0);
    uint64_t v3 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "RegisteredVariantSets", 0);
    uint64_t v4 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "selectionExportPolicy", 0);
    int v5 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "Looks", 0);
    uint64_t v6 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "main_cam", 0);
    std::string::size_type v7 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "pref", 0);
    uint64_t v8 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "st", 0);
    unint64_t v9 = *v0;
    unint64_t v27 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *v26;
    uint64_t v28 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v25;
    uint64_t v29 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v2;
    uint64_t v30 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v3;
    uint64_t v31 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v4;
    uint64_t v32 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v5;
    uint64_t v33 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v6;
    uint64_t v34 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = *v7;
    uint64_t v35 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v18 = *v8;
    uint64_t v36 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[10] = 0;
    v0[11] = 0;
    v0[12] = 0;
    uint64_t v19 = (char *)operator new(0x50uLL);
    uint64_t v20 = 0;
    v0[10] = (unint64_t)v19;
    v0[11] = (unint64_t)v19;
    v0[12] = (unint64_t)(v19 + 80);
    do
    {
      unint64_t v21 = *(unint64_t *)((char *)&v27 + v20);
      *(void *)&v19[v20] = v21;
      if ((v21 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v19[v20] &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 += 8;
    }
    while (v20 != 80);
    v0[11] = (unint64_t)(v19 + 80);
    for (uint64_t i = 72; i != -8; i -= 8)
    {
      unint64_t v23 = *(unint64_t *)((char *)&v27 + i);
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v24 = 0;
    atomic_compare_exchange_strong(&qword_267B95080, (unint64_t *)&v24, (unint64_t)v0);
    if (v24)
    {
      unint64_t v27 = (unint64_t)(v0 + 10);
      sub_216889A04((void ***)&v27);
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95080);
    }
  }
  return (unint64_t)v0;
}

void sub_21705AD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void **a12, uint64_t a13, char a14)
{
  sub_216889A04(&a12);
  uint64_t v23 = 72;
  while (1)
  {
    uint64_t v24 = *(void *)(&a14 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void sub_21705AEB0()
{
}

void sub_21705AEB8()
{
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrefName(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_21705A838() + 64;
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsGetMaterialsScopeName@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v3 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_FORCE_DEFAULT_MATERIALS_SCOPE_NAME);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v3) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = this == 0;
  }
  if (v4)
  {
    uint64_t v8 = (void *)sub_21705B008();
    unint64_t v9 = (void *)(sub_21705A838() + 8);
    uint64_t v10 = (atomic_uint **)(sub_21705A838() + 48);
    return sub_21705AFB0(v8, v9, v10, a2);
  }
  else
  {
    unint64_t result = (void *)sub_21705A838();
    uint64_t v6 = (atomic_uint *)result[6];
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      std::string::size_type v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
  return result;
}

void *sub_21705AFB0@<X0>(void *a1@<X0>, void *a2@<X1>, atomic_uint **a3@<X2>, atomic_uint **a4@<X8>)
{
  unint64_t result = sub_2168CB120(a1, a2);
  if (result) {
    std::string::size_type v7 = (atomic_uint *)result[3];
  }
  else {
    std::string::size_type v7 = *a3;
  }
  *a4 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      *a4 = v8;
    }
  }
  return result;
}

unint64_t sub_21705B008()
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v0 = (_OWORD *)atomic_load((unint64_t *)&qword_267B95088);
  if (v0) {
    return (unint64_t)v0;
  }
  uint64_t v0 = operator new(0x28uLL);
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + 8) = 1065353216;
  uint64_t v2 = *(void *)(sub_21705A838() + 8);
  *(void *)&long long v61 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)&long long v61 = v61 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *(void *)(sub_21705A838() + 16);
  *((void *)&v61 + 1) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)&v61 + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v50 = (unint64_t)&v41;
  LOBYTE(v51) = 0;
  BOOL v4 = (char *)operator new(0x10uLL);
  uint64_t v5 = 0;
  uint64_t v41 = (unint64_t *)v4;
  uint64_t v42 = (unint64_t *)v4;
  uint64_t v43 = v4 + 16;
  do
  {
    uint64_t v6 = *(void *)((char *)&v61 + v5);
    *(void *)&v4[v5] = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v4[v5] &= 0xFFFFFFFFFFFFFFF8;
    }
    v5 += 8;
  }
  while (v5 != 16);
  uint64_t v42 = (unint64_t *)(v4 + 16);
  for (uint64_t i = 8; i != -8; i -= 8)
  {
    uint64_t v8 = *(void *)((char *)&v61 + i);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_21705A838();
  uint64_t v60 = *(void *)v9;
  if ((v60 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v61 = 0u;
  long long v62 = 0u;
  int v63 = 1065353216;
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v9);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v58, Instance);
  uint64_t v11 = v58;
  uint64_t v12 = v59;
  if (v58 != v59)
  {
    while (1)
    {
      uint64_t v13 = (const void ***)sub_2168E5D78(v11);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v13, v57);
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v55);
      if (sub_216F1F5A0((pxrInternal__aapl__pxrReserved__::TfToken *)v57, &v60, &v55))
      {
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v55))
        {
          JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v55);
          sub_2168BB7AC(v49, JsObject);
          uint64_t v16 = v41;
          uint64_t v15 = v42;
          uint64_t v17 = v41;
          if (v41 != v42)
          {
            do
            {
              pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v47);
              if (sub_216F1F5A0((pxrInternal__aapl__pxrReserved__::TfToken *)v49, v16, &v47))
              {
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v47))
                {
                  unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v47);
                  if (*(char *)(String + 23) < 0)
                  {
                    sub_216778F24(__p, *(void **)String, *(void *)(String + 8));
                  }
                  else
                  {
                    long long v19 = *(_OWORD *)String;
                    uint64_t v46 = *(void *)(String + 16);
                    *(_OWORD *)std::string __p = v19;
                  }
                  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)__p))
                  {
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v44);
                    unint64_t v24 = *v16;
                    unint64_t v50 = v24;
                    if ((v24 & 7) != 0
                      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                    {
                      v50 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    unint64_t v51 = v44;
                    unint64_t v44 = 0;
                    sub_216D12EB8((uint64_t)&v61, &v50, (uint64_t *)&v50);
                    if ((v51 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    if ((v50 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    if ((v44 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                  }
                  else
                  {
                    unint64_t v50 = (unint64_t)"usdUtils/pipeline.cpp";
                    unint64_t v51 = (unint64_t)"_GetPipelineIdentifierTokens";
                    uint64_t v52 = 362;
                    uint64_t v53 = "_TokenToTokenMap pxrInternal__aapl__pxrReserved__::_GetPipelineIdentifierTokens(const TfTokenVector &)";
                    char v54 = 0;
                    uint64_t v25 = sub_2168E5D78(v11);
                    uint64_t v26 = (const char *)(v25 + 8);
                    if (*(char *)(v25 + 31) < 0) {
                      uint64_t v26 = *(const char **)v26;
                    }
                    unint64_t v27 = v60 & 0xFFFFFFFFFFFFFFF8;
                    if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
                    {
                      uint64_t v28 = (const char *)(v27 + 16);
                      if (*(char *)(v27 + 39) < 0) {
                        uint64_t v28 = *(const char **)v28;
                      }
                    }
                    else
                    {
                      uint64_t v28 = "";
                    }
                    unint64_t v31 = *v16 & 0xFFFFFFFFFFFFFFF8;
                    if (v31)
                    {
                      uint64_t v32 = (const char *)(v31 + 16);
                      if (*(char *)(v31 + 39) < 0) {
                        uint64_t v32 = *(const char **)v32;
                      }
                    }
                    else
                    {
                      uint64_t v32 = "";
                    }
                    uint64_t v33 = __p;
                    if (v46 < 0) {
                      uint64_t v33 = (void **)__p[0];
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[%s][%s] was not a valid identifier: \"%s\".", v26, v28, v32, (const char *)v33);
                  }
                  if (SHIBYTE(v46) < 0) {
                    operator delete(__p[0]);
                  }
                }
                else
                {
                  unint64_t v50 = (unint64_t)"usdUtils/pipeline.cpp";
                  unint64_t v51 = (unint64_t)"_GetPipelineIdentifierTokens";
                  uint64_t v52 = 351;
                  uint64_t v53 = "_TokenToTokenMap pxrInternal__aapl__pxrReserved__::_GetPipelineIdentifierTokens(const TfTokenVector &)";
                  char v54 = 0;
                  uint64_t v20 = sub_2168E5D78(v11);
                  unint64_t v21 = (const char *)(v20 + 8);
                  if (*(char *)(v20 + 31) < 0) {
                    unint64_t v21 = *(const char **)v21;
                  }
                  unint64_t v22 = v60 & 0xFFFFFFFFFFFFFFF8;
                  if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    uint64_t v23 = (const char *)(v22 + 16);
                    if (*(char *)(v22 + 39) < 0) {
                      uint64_t v23 = *(const char **)v23;
                    }
                  }
                  else
                  {
                    uint64_t v23 = "";
                  }
                  unint64_t v29 = *v16 & 0xFFFFFFFFFFFFFFF8;
                  if (v29)
                  {
                    uint64_t v30 = (const char *)(v29 + 16);
                    if (*(char *)(v29 + 39) < 0) {
                      uint64_t v30 = *(const char **)v30;
                    }
                  }
                  else
                  {
                    uint64_t v30 = "";
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[%s][%s] was not a string.", v21, v23, v30);
                }
              }
              if (v48) {
                sub_216784EC4(v48);
              }
              ++v16;
            }
            while (v16 != v15);
            uint64_t v16 = v41;
            uint64_t v17 = v42;
          }
          int v34 = 2 * (*((void *)&v62 + 1) == v17 - v16);
          sub_216812ED4((uint64_t)v49, (void *)v49[1]);
          goto LABEL_79;
        }
        unint64_t v50 = (unint64_t)"usdUtils/pipeline.cpp";
        unint64_t v51 = (unint64_t)"_GetPipelineIdentifierTokens";
        uint64_t v52 = 334;
        uint64_t v53 = "_TokenToTokenMap pxrInternal__aapl__pxrReserved__::_GetPipelineIdentifierTokens(const TfTokenVector &)";
        char v54 = 0;
        uint64_t v35 = sub_2168E5D78(v11);
        uint64_t v36 = (const char *)(v35 + 8);
        if (*(char *)(v35 + 31) < 0) {
          uint64_t v36 = *(const char **)v36;
        }
        unint64_t v37 = v60 & 0xFFFFFFFFFFFFFFF8;
        if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v38 = (const char *)(v37 + 16);
          if (*(char *)(v37 + 39) < 0) {
            uint64_t v38 = *(const char **)v38;
          }
        }
        else
        {
          uint64_t v38 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[%s] was not a dictionary.", v36, v38);
      }
      int v34 = 3;
LABEL_79:
      if (v56) {
        sub_216784EC4(v56);
      }
      sub_216812ED4((uint64_t)v57, (void *)v57[1]);
      if (v34 == 3 || !v34)
      {
        v11 += 2;
        if (v11 != v12) {
          continue;
        }
      }
      break;
    }
  }
  unint64_t v50 = (unint64_t)&v58;
  sub_216850BF4((void ***)&v50);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *((_DWORD *)v0 + 8) = v63;
  sub_21705C2F0(v0, (void *)v62, 0);
  sub_2169735B4((uint64_t)&v61);
  unint64_t v50 = (unint64_t)&v41;
  sub_216889A04((void ***)&v50);
  uint64_t v39 = 0;
  atomic_compare_exchange_strong(&qword_267B95088, (unint64_t *)&v39, (unint64_t)v0);
  if (v39)
  {
    uint64_t v40 = (void *)sub_2169735B4((uint64_t)v0);
    operator delete(v40);
    return atomic_load((unint64_t *)&qword_267B95088);
  }
  return (unint64_t)v0;
}

void sub_21705B610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36)
{
  sub_2169735B4(v36 - 144);
  a28 = &a13;
  sub_216889A04((void ***)&a28);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsGetPrimaryCameraName@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, atomic_uint **a2@<X8>)
{
  if (this)
  {
    unint64_t result = (void *)sub_21705A838();
    BOOL v4 = (atomic_uint *)result[7];
    *a2 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v5;
      }
    }
  }
  else
  {
    uint64_t v6 = (void *)sub_21705B008();
    std::string::size_type v7 = (void *)(sub_21705A838() + 16);
    uint64_t v8 = (atomic_uint **)(sub_21705A838() + 56);
    return sub_21705AFB0(v6, v7, v8, a2);
  }
  return result;
}

void sub_21705B848(pxrInternal__aapl__pxrReserved__::PlugRegistry *a1)
{
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v68, Instance);
  uint64_t v2 = v68;
  for (uint64_t i = v69; v2 != i; v2 += 2)
  {
    uint64_t v4 = v2[1];
    uint64_t v57 = *v2;
    uint64_t v58 = (std::__shared_weak_count *)v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v5 = (const void ***)sub_2168E5D78(&v57);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v5, &v66);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v54);
    uint64_t v6 = (void *)sub_21705A838();
    if (sub_216F1F5A0((pxrInternal__aapl__pxrReserved__::TfToken *)&v66, v6, &v54))
    {
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v54))
      {
        JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v54);
        sub_2168BB7AC(&v59, JsObject);
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v52);
        unint64_t v8 = sub_21705A838();
        if (sub_216F1F5A0((pxrInternal__aapl__pxrReserved__::TfToken *)&v59, (void *)(v8 + 32), &v52))
        {
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v52))
          {
            unint64_t v9 = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v52);
            uint64_t v10 = v9 + 1;
            uint64_t v11 = (void *)*v9;
            if ((void *)*v9 != v9 + 1)
            {
              do
              {
                uint64_t v12 = (const char *)(v11 + 4);
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v11 + 7)))
                {
                  uint64_t v13 = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)v11 + 7);
                  sub_2168BB7AC((uint64_t *)&v50, v13);
                  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21705A838();
                  if ((*((void *)v14 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
                    Emptyunint64_t String = (uint64_t *)((*((void *)v14 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
                  }
                  size_t v56 = (long long *)EmptyString;
                  uint64_t v18 = sub_2170A3AA4(&v50, (const void **)EmptyString, (uint64_t)&unk_2174BFD90, &v56);
                  unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v18 + 7));
                  if (*(char *)(String + 23) < 0)
                  {
                    sub_216778F24(__p, *(void **)String, *(void *)(String + 8));
                  }
                  else
                  {
                    long long v20 = *(_OWORD *)String;
                    uint64_t v49 = *(void *)(String + 16);
                    *(_OWORD *)std::string __p = v20;
                  }
                  LODWORD(v56) = 0;
                  if (pxrInternal__aapl__pxrReserved__::UsdUtilsRegisteredVariantSet::GetSelectionExportPolicyFromString((unsigned __int8 *)__p, (int *)&v56))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdUtilsRegisterVariantSet((uint64_t)(v11 + 4), &v56);
                  }
                  else
                  {
                    long long v61 = (void **)"usdUtils/pipeline.cpp";
                    long long v62 = "_RegisterVariantSetsFromPlugInfos";
                    uint64_t v63 = 170;
                    uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
                    char v65 = 0;
                    uint64_t v21 = sub_2168E5D78(&v57);
                    unint64_t v22 = (const char *)(v21 + 8);
                    if (*(char *)(v21 + 31) < 0) {
                      unint64_t v22 = *(const char **)v22;
                    }
                    if (*((char *)v11 + 55) < 0) {
                      uint64_t v12 = *(const char **)v12;
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][RegisteredVariantSets][%s] was not valid.", v22, v12);
                  }
                  if (SHIBYTE(v49) < 0) {
                    operator delete(__p[0]);
                  }
                  sub_216812ED4((uint64_t)&v50, v51);
                }
                else
                {
                  long long v61 = (void **)"usdUtils/pipeline.cpp";
                  long long v62 = "_RegisterVariantSetsFromPlugInfos";
                  uint64_t v63 = 157;
                  uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
                  char v65 = 0;
                  uint64_t v16 = sub_2168E5D78(&v57);
                  uint64_t v17 = (const char *)(v16 + 8);
                  if (*(char *)(v16 + 31) < 0) {
                    uint64_t v17 = *(const char **)v17;
                  }
                  if (*((char *)v11 + 55) < 0) {
                    uint64_t v12 = *(const char **)v12;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][RegisteredVariantSets][%s] was not a dictionary.", v17, v12);
                }
                uint64_t v23 = (void *)v11[1];
                if (v23)
                {
                  do
                  {
                    unint64_t v24 = v23;
                    uint64_t v23 = (void *)*v23;
                  }
                  while (v23);
                }
                else
                {
                  do
                  {
                    unint64_t v24 = (void *)v11[2];
                    BOOL v25 = *v24 == (void)v11;
                    uint64_t v11 = v24;
                  }
                  while (!v25);
                }
                uint64_t v11 = v24;
              }
              while (v24 != v10);
            }
          }
          else
          {
            long long v61 = (void **)"usdUtils/pipeline.cpp";
            long long v62 = "_RegisterVariantSetsFromPlugInfos";
            uint64_t v63 = 144;
            uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
            char v65 = 0;
            uint64_t v28 = sub_2168E5D78(&v57);
            unint64_t v29 = (const char *)(v28 + 8);
            if (*(char *)(v28 + 31) < 0) {
              unint64_t v29 = *(const char **)v29;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][RegisteredVariantSets] was not a dictionary.", v29);
          }
        }
        if (v53) {
          sub_216784EC4(v53);
        }
        sub_216812ED4((uint64_t)&v59, v60);
      }
      else
      {
        long long v61 = (void **)"usdUtils/pipeline.cpp";
        long long v62 = "_RegisterVariantSetsFromPlugInfos";
        uint64_t v63 = 130;
        uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::_RegisterVariantSetsFromPlugInfos()";
        char v65 = 0;
        uint64_t v26 = sub_2168E5D78(&v57);
        unint64_t v27 = (const char *)(v26 + 8);
        if (*(char *)(v26 + 31) < 0) {
          unint64_t v27 = *(const char **)v27;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline] was not a dictionary.", v27);
      }
    }
    if (v55) {
      sub_216784EC4(v55);
    }
    sub_216812ED4((uint64_t)&v66, v67);
    uint64_t v30 = v58;
    if (v58
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v58->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v30->~__shared_weak_count_0)(v30);
    }
  }
  long long v61 = (void **)&v68;
  sub_216850BF4(&v61);
  uint64_t v32 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v31);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)&v68, v32);
  uint64_t v33 = (uint64_t)v68;
  for (uint64_t j = v69; (uint64_t *)v33 != j; v33 += 16)
  {
    unint64_t v50 = *(uint64_t **)v33;
    uint64_t v35 = *(atomic_uint **)(v33 + 8);
    unint64_t v51 = v35;
    if (v35) {
      atomic_fetch_add_explicit(v35 + 2, 1u, memory_order_relaxed);
    }
    uint64_t v36 = (const void ***)sub_2168E5D78((uint64_t *)&v50);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v36, &v66);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)__p);
    unint64_t v37 = (void *)sub_21705A838();
    if (sub_216F1F5A0((pxrInternal__aapl__pxrReserved__::TfToken *)&v66, v37, __p))
    {
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)__p))
      {
        uint64_t v38 = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)__p);
        sub_2168BB7AC(&v59, v38);
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v57);
        unint64_t v39 = sub_21705A838();
        if (sub_216F1F5A0((pxrInternal__aapl__pxrReserved__::TfToken *)&v59, (void *)(v39 + 24), &v57))
        {
          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v57))
          {
            long long v61 = (void **)"usdUtils/pipeline.cpp";
            long long v62 = "_LoadPluginsThatRegisterVariantSets";
            uint64_t v63 = 203;
            uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::_LoadPluginsThatRegisterVariantSets()";
            char v65 = 0;
            uint64_t v40 = sub_2168E5D78((uint64_t *)&v50);
            uint64_t v41 = (const char *)(v40 + 8);
            if (*(char *)(v40 + 31) < 0) {
              uint64_t v41 = *(const char **)v41;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline][ProvidesRegisteredVariantSetsFromPlugin] was not a BOOL.", v41);
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v57))
          {
            uint64_t v42 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78((uint64_t *)&v50);
            pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v42);
          }
        }
        if (v58) {
          sub_216784EC4(v58);
        }
        sub_216812ED4((uint64_t)&v59, v60);
      }
      else
      {
        long long v61 = (void **)"usdUtils/pipeline.cpp";
        long long v62 = "_LoadPluginsThatRegisterVariantSets";
        uint64_t v63 = 190;
        uint64_t v64 = "void pxrInternal__aapl__pxrReserved__::_LoadPluginsThatRegisterVariantSets()";
        char v65 = 0;
        uint64_t v43 = sub_2168E5D78((uint64_t *)&v50);
        unint64_t v44 = (const char *)(v43 + 8);
        if (*(char *)(v43 + 31) < 0) {
          unint64_t v44 = *(const char **)v44;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v61, 1, (pxrInternal__aapl__pxrReserved__ *)"%s[UsdUtilsPipeline] was not a dictionary.", v44);
      }
    }
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    sub_216812ED4((uint64_t)&v66, v67);
    size_t v45 = v51;
    if (v51 && atomic_fetch_add_explicit(v51 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v45 + 8))(v45);
    }
  }
  long long v61 = (void **)&v68;
  sub_216850BF4(&v61);
  uint64_t v47 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v46);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(v47, &stru_26C771470);
}

void sub_21705BE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,atomic_uint *a28,char a29,void *a30,uint64_t a31,uint64_t a32)
{
  if (a22) {
    sub_216784EC4(a22);
  }
  sub_216812ED4((uint64_t)&a29, a30);
  if (a24) {
    sub_216784EC4(a24);
  }
  sub_216812ED4(v32 - 136, *(void **)(v32 - 128));
  if (a28)
  {
    if (atomic_fetch_add_explicit(a28 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a28 + 8))(a28);
    }
  }
  a32 = v32 - 112;
  sub_216850BF4((void ***)&a32);
  _Unwind_Resume(a1);
}

char *sub_21705BFB4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)(__dst + 24));
  return __dst;
}

void sub_21705C00C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_21705C028()
{
  uint64_t v0 = (char **)operator new(0x18uLL);
  uint64_t v1 = v0;
  uint64_t v2 = 0;
  v0[1] = 0;
  v0[2] = 0;
  _OWORD *v0 = (char *)(v0 + 1);
  atomic_compare_exchange_strong(&qword_267B95078, (unint64_t *)&v2, (unint64_t)v0);
  if (v2)
  {
    sub_21678A498((uint64_t)v0, v0[1]);
    operator delete(v1);
    return atomic_load((unint64_t *)&qword_267B95078);
  }
  return (unint64_t)v1;
}

uint64_t *sub_21705C098(uint64_t **a1, uint64_t a2, _DWORD *a3)
{
  sub_21705C144((uint64_t)a1, a2, a3, (uint64_t)&__p);
  uint64_t v4 = (uint64_t **)sub_21705C1F0((uint64_t)a1, &v8, (void *)__p + 4);
  uint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = (void **)__p;
    std::string __p = 0;
    if (v6) {
      sub_21678C278((uint64_t)&v10, v6);
    }
  }
  else
  {
    sub_21677B358(a1, v8, v4, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v5;
}

void sub_21705C120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_21678C278((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21705C144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t result = v8 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t result = sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v8 + 14) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21705C1D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_21705C1F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_21705C284(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_21705C284(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_21705C284(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void sub_21705C2F0(void *a1, void *a2, void *a3)
{
  size_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        sub_2168D2318(v8 + 2, v4 + 2);
        sub_2168D2318(v8 + 3, v4 + 3);
        uint64_t v10 = (void *)*v8;
        sub_2168D22B4(a1, v8);
        size_t v4 = (void *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    sub_2169735F0((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_21705C3F8(a1, v4 + 2);
    size_t v4 = (void *)*v4;
  }
}

void sub_21705C3CC(void *a1)
{
  __cxa_begin_catch(a1);
  sub_2169735F0(v1, v2);
  __cxa_rethrow();
}

void sub_21705C3E4(_Unwind_Exception *a1)
{
}

void *sub_21705C3F8(void *a1, uint64_t *a2)
{
  size_t v4 = operator new(0x20uLL);
  *size_t v4 = 0;
  v4[1] = 0;
  sub_216B15074(v4 + 2, a2);
  v4[1] = bswap64(0x9E3779B97F4A7C55 * (v4[2] & 0xFFFFFFFFFFFFFFF8));
  return sub_2168D22B4(a1, v4);
}

void sub_21705C490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169738AC(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsRegisteredVariantSet::GetSelectionExportPolicyFromString(unsigned __int8 *a1, int *a2)
{
  size_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21705C530();
  if (pxrInternal__aapl__pxrReserved__::TfToken::operator==(v4, a1))
  {
    int v5 = 0;
    if (!a2) {
      return 1;
    }
    goto LABEL_6;
  }
  unint64_t v6 = sub_21705C530();
  if (pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 8), a1))
  {
    int v5 = 1;
    if (!a2) {
      return 1;
    }
LABEL_6:
    *a2 = v5;
    return 1;
  }
  unint64_t v8 = sub_21705C530();
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 16), a1);
  if (result)
  {
    int v5 = 2;
    if (!a2) {
      return 1;
    }
    goto LABEL_6;
  }
  return result;
}

unint64_t sub_21705C530()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B95090);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "never", 0);
    int v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "ifAuthored", 0);
    int v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "always", 0);
    size_t v4 = *(void ***)v0;
    uint64_t v16 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (void **)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v5;
      }
    }
    unint64_t v6 = (atomic_uint *)*v2;
    uint64_t v17 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v17 = v7;
      }
    }
    unint64_t v8 = (atomic_uint *)*v3;
    uint64_t v18 = v8;
    if ((v8 & 7) != 0)
    {
      BOOL v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v18 = v9;
      }
    }
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    uint64_t v10 = (char *)operator new(0x18uLL);
    uint64_t v11 = 0;
    *((void *)v0 + 3) = v10;
    *((void *)v0 + 4) = v10;
    *((void *)v0 + 5) = v10 + 24;
    do
    {
      unint64_t v12 = (unint64_t)(&v16)[v11];
      *(void *)&v10[v11 * 8] = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v10[v11 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != 3);
    *((void *)v0 + 4) = v10 + 24;
    for (uint64_t i = 2; i != -1; --i)
    {
      unint64_t v14 = (unint64_t)(&v16)[i];
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v15 = 0;
    atomic_compare_exchange_strong(&qword_267B95090, (unint64_t *)&v15, (unint64_t)v0);
    if (v15)
    {
      uint64_t v16 = (void **)(v0 + 24);
      sub_216889A04(&v16);
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95090);
    }
  }
  return (unint64_t)v0;
}

void sub_21705C76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::_IsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3) {
    return v3 & 1;
  }
  size_t v4 = a2;
  uint64_t v3 = *((void *)a2 + 1);
  if (!v3) {
    return v3 & 1;
  }
  int v5 = this;
  if (sub_21691CE68(this) && sub_21691CE68(v4))
  {
    uint64_t v6 = *((void *)v5 + 1);
    if ((v6 & 4) != 0) {
      int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    uint64_t v7 = *((void *)v4 + 1);
    if ((v7 & 4) != 0) {
      size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    double v8 = vabdd_f64(*(double *)v5, *(double *)v4);
    double v9 = 1.0e-12;
LABEL_17:
    LOBYTE(v3) = v8 < v9;
    return v3 & 1;
  }
  if (sub_21691FA2C(v5) && sub_21691FA2C(v4))
  {
    uint64_t v10 = *((void *)v5 + 1);
    if ((v10 & 4) != 0) {
      int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    uint64_t v11 = *((void *)v4 + 1);
    if ((v11 & 4) != 0) {
      size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    double v8 = vabdd_f64(*(float *)v5, *(float *)v4);
    double v9 = 0.000001;
    goto LABEL_17;
  }
  if (sub_21695529C(v5) && sub_21695529C(v4))
  {
    uint64_t v12 = *((void *)v5 + 1);
    if ((v12 & 4) != 0) {
      double v13 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v12 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                        + 168))(v5));
    else {
      double v13 = *(double *)v5;
    }
    uint64_t v14 = *((void *)v4 + 1);
    if ((v14 & 4) != 0) {
      double v15 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
    }
    else {
      double v15 = *(double *)v4;
    }
    BOOL v16 = 0;
    unint64_t v17 = 0;
LABEL_25:
    uint64_t v18 = 0;
    while (vabdd_f64(*(double *)(*(void *)&v13 + v18), *(double *)(*(void *)&v15 + v18)) < 1.0e-12)
    {
      v18 += 8;
      if (v18 == 32)
      {
        BOOL v16 = v17 > 2;
        *(void *)&v15 += 32;
        *(void *)&v13 += 32;
        LOBYTE(v3) = 1;
        if (++v17 != 4) {
          goto LABEL_25;
        }
        return v3 & 1;
      }
    }
LABEL_190:
    LOBYTE(v3) = v16;
    return v3 & 1;
  }
  if (sub_216947714(v5) && sub_216947714(v4))
  {
    uint64_t v19 = *((void *)v5 + 1);
    if ((v19 & 4) != 0) {
      long long v20 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      long long v20 = *(double **)v5;
    }
    uint64_t v21 = *((void *)v4 + 1);
    if ((v21 & 4) != 0) {
      unint64_t v22 = (double *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      unint64_t v22 = *(double **)v4;
    }
    if (vabdd_f64(*v20, *v22) < 1.0e-12)
    {
      unint64_t v23 = 0;
      do
      {
        unint64_t v24 = v23;
        if (v23 == 2) {
          break;
        }
        double v25 = vabdd_f64(v20[v23 + 1], v22[v23 + 1]);
        ++v23;
      }
      while (v25 < 1.0e-12);
LABEL_72:
      BOOL v46 = v24 > 1;
      goto LABEL_84;
    }
    goto LABEL_296;
  }
  if (sub_21694B764(v5) && sub_21694B764(v4))
  {
    uint64_t v26 = *((void *)v5 + 1);
    if ((v26 & 4) != 0) {
      unint64_t v27 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      unint64_t v27 = *(double **)v5;
    }
    uint64_t v28 = *((void *)v4 + 1);
    if ((v28 & 4) != 0) {
      unint64_t v29 = (double *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      unint64_t v29 = *(double **)v4;
    }
    if (vabdd_f64(*v27, *v29) >= 1.0e-12) {
      goto LABEL_296;
    }
    unint64_t v30 = 0;
    do
    {
      unint64_t v31 = v30;
      if (v30 == 3) {
        break;
      }
      double v32 = vabdd_f64(v27[v30 + 1], v29[v30 + 1]);
      ++v30;
    }
    while (v32 < 1.0e-12);
LABEL_83:
    BOOL v46 = v31 > 2;
LABEL_84:
    LOBYTE(v3) = v46;
    return v3 & 1;
  }
  if (sub_216943B00(v5) && sub_216943B00(v4))
  {
    uint64_t v33 = *((void *)v5 + 1);
    if ((v33 & 4) != 0) {
      double v34 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v33 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                        + 168))(v5));
    else {
      double v34 = *(double *)v5;
    }
    uint64_t v35 = *((void *)v4 + 1);
    if ((v35 & 4) != 0) {
      double v36 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
    }
    else {
      double v36 = *(double *)v4;
    }
    uint64_t v37 = 0;
    char v38 = 1;
    do
    {
      double v39 = vabdd_f64(*(double *)(*(void *)&v34 + 8 * v37), *(double *)(*(void *)&v36 + 8 * v37));
      LOBYTE(v3) = v39 < 1.0e-12;
      if ((v38 & 1) == 0) {
        break;
      }
      char v38 = 0;
      uint64_t v37 = 1;
    }
    while (v39 < 1.0e-12);
    return v3 & 1;
  }
  if (sub_216949788(v5) && sub_216949788(v4))
  {
    uint64_t v40 = *((void *)v5 + 1);
    if ((v40 & 4) != 0) {
      uint64_t v41 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      uint64_t v41 = *(float **)v5;
    }
    uint64_t v42 = *((void *)v4 + 1);
    if ((v42 & 4) != 0) {
      uint64_t v43 = (float *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v42 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                                  + 168))(v4);
    else {
      uint64_t v43 = *(float **)v4;
    }
    if (vabdd_f64(*v41, *v43) < 0.000001)
    {
      unint64_t v44 = 0;
      do
      {
        unint64_t v24 = v44;
        if (v44 == 2) {
          break;
        }
        double v45 = vabdd_f64(v41[v44 + 1], v43[v44 + 1]);
        ++v44;
      }
      while (v45 < 0.000001);
      goto LABEL_72;
    }
LABEL_296:
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  if (sub_21694D72C(v5) && sub_21694D72C(v4))
  {
    uint64_t v47 = *((void *)v5 + 1);
    if ((v47 & 4) != 0) {
      uint64_t v48 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      uint64_t v48 = *(float **)v5;
    }
    uint64_t v49 = *((void *)v4 + 1);
    if ((v49 & 4) != 0) {
      unint64_t v50 = (float *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v49 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                                  + 168))(v4);
    else {
      unint64_t v50 = *(float **)v4;
    }
    if (vabdd_f64(*v48, *v50) >= 0.000001) {
      goto LABEL_296;
    }
    unint64_t v51 = 0;
    do
    {
      unint64_t v31 = v51;
      if (v51 == 3) {
        break;
      }
      double v52 = vabdd_f64(v48[v51 + 1], v50[v51 + 1]);
      ++v51;
    }
    while (v52 < 0.000001);
    goto LABEL_83;
  }
  if (sub_2169456CC(v5) && sub_2169456CC(v4))
  {
    uint64_t v53 = *((void *)v5 + 1);
    if ((v53 & 4) != 0) {
      int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    uint64_t v54 = *((void *)v4 + 1);
    if ((v54 & 4) != 0) {
      size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    uint64_t v55 = 0;
    char v56 = 1;
    do
    {
      double v57 = vabdd_f64(*((float *)v5 + v55), *((float *)v4 + v55));
      LOBYTE(v3) = v57 < 0.000001;
      if ((v56 & 1) == 0) {
        break;
      }
      char v56 = 0;
      uint64_t v55 = 1;
    }
    while (v57 < 0.000001);
    return v3 & 1;
  }
  if (sub_2168F8860(v5) && sub_2168F8860(v4))
  {
    uint64_t v58 = *((void *)v5 + 1);
    if ((v58 & 4) != 0) {
      uint64_t v59 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v58 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      uint64_t v59 = *(unint64_t **)v5;
    }
    uint64_t v60 = *((void *)v4 + 1);
    if ((v60 & 4) != 0) {
      long long v61 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      long long v61 = *(void **)v4;
    }
    return sub_21705DCF8(v59, v61);
  }
  else if (sub_2168F9F4C(v5) && sub_2168F9F4C(v4))
  {
    uint64_t v63 = *((void *)v5 + 1);
    if ((v63 & 4) != 0) {
      uint64_t v64 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v63 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      uint64_t v64 = *(unint64_t **)v5;
    }
    uint64_t v65 = *((void *)v4 + 1);
    if ((v65 & 4) != 0) {
      uint64_t v66 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v66 = *(void **)v4;
    }
    return sub_21705DD84(v64, v66);
  }
  else if (sub_2169026B0(v5) && sub_2169026B0(v4))
  {
    uint64_t v67 = *((void *)v5 + 1);
    if ((v67 & 4) != 0) {
      BOOL v68 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v67 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      BOOL v68 = *(unint64_t **)v5;
    }
    uint64_t v69 = *((void *)v4 + 1);
    if ((v69 & 4) != 0) {
      BOOL v70 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      BOOL v70 = *(void **)v4;
    }
    return sub_21705DE00(v68, v70);
  }
  else if (sub_2168FD6AC(v5) && sub_2168FD6AC(v4))
  {
    uint64_t v71 = *((void *)v5 + 1);
    if ((v71 & 4) != 0) {
      char v72 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v71 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      char v72 = *(unint64_t **)v5;
    }
    uint64_t v73 = *((void *)v4 + 1);
    if ((v73 & 4) != 0) {
      unint64_t v74 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      unint64_t v74 = *(void **)v4;
    }
    return sub_21705DEB8(v72, v74);
  }
  else if (sub_2168FEEE8(v5) && sub_2168FEEE8(v4))
  {
    uint64_t v75 = *((void *)v5 + 1);
    if ((v75 & 4) != 0) {
      uint64_t v76 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v75 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      uint64_t v76 = *(unint64_t **)v5;
    }
    uint64_t v77 = *((void *)v4 + 1);
    if ((v77 & 4) != 0) {
      int v78 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      int v78 = *(void **)v4;
    }
    return sub_21705DF94(v76, v78);
  }
  else if (sub_2168FFE70(v5) && sub_2168FFE70(v4))
  {
    uint64_t v79 = *((void *)v5 + 1);
    if ((v79 & 4) != 0) {
      uint64_t v80 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v79 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      uint64_t v80 = *(unint64_t **)v5;
    }
    uint64_t v81 = *((void *)v4 + 1);
    if ((v81 & 4) != 0) {
      size_t v82 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      size_t v82 = *(void **)v4;
    }
    return sub_21705E058(v80, v82);
  }
  else if (sub_2169015F0(v5) && sub_2169015F0(v4))
  {
    uint64_t v83 = *((void *)v5 + 1);
    if ((v83 & 4) != 0) {
      size_t v84 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v83 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      size_t v84 = *(unint64_t **)v5;
    }
    uint64_t v85 = *((void *)v4 + 1);
    if ((v85 & 4) != 0) {
      uint64_t v86 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v86 = *(void **)v4;
    }
    return sub_21705E134(v84, v86);
  }
  else if (sub_2168FAEA0(v5) && sub_2168FAEA0(v4))
  {
    uint64_t v87 = *((void *)v5 + 1);
    if ((v87 & 4) != 0) {
      uint64_t v88 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v87 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      uint64_t v88 = *(unint64_t **)v5;
    }
    uint64_t v89 = *((void *)v4 + 1);
    if ((v89 & 4) != 0) {
      uint64_t v90 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      uint64_t v90 = *(void **)v4;
    }
    return sub_21705E1F8(v88, v90);
  }
  else if (sub_2168FC5B0(v5) && sub_2168FC5B0(v4))
  {
    uint64_t v91 = *((void *)v5 + 1);
    if ((v91 & 4) != 0) {
      uint64_t v92 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v91 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v5);
    else {
      uint64_t v92 = *(unint64_t **)v5;
    }
    uint64_t v93 = *((void *)v4 + 1);
    if ((v93 & 4) != 0) {
      unint64_t v94 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      unint64_t v94 = *(void **)v4;
    }
    return sub_21705E28C(v92, v94);
  }
  else
  {
    if (sub_21695273C(v5) && sub_21695273C(v4))
    {
      uint64_t v95 = *((void *)v5 + 1);
      if ((v95 & 4) != 0) {
        double v96 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v95 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                          + 168))(v5));
      else {
        double v96 = *(double *)v5;
      }
      uint64_t v97 = *((void *)v4 + 1);
      if ((v97 & 4) != 0) {
        double v98 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
      }
      else {
        double v98 = *(double *)v4;
      }
      BOOL v16 = 0;
      unint64_t v99 = 0;
LABEL_185:
      uint64_t v100 = 0;
      while (vabdd_f64(*(double *)(*(void *)&v96 + v100), *(double *)(*(void *)&v98 + v100)) < 1.0e-12)
      {
        v100 += 8;
        if (v100 == 24)
        {
          BOOL v16 = v99 > 1;
          *(void *)&v98 += 24;
          *(void *)&v96 += 24;
          LOBYTE(v3) = 1;
          if (++v99 != 3) {
            goto LABEL_185;
          }
          return v3 & 1;
        }
      }
      goto LABEL_190;
    }
    if (sub_21694FB20(v5) && sub_21694FB20(v4))
    {
      uint64_t v101 = *((void *)v5 + 1);
      if ((v101 & 4) != 0) {
        double v102 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v101 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                           + 168))(v5));
      else {
        double v102 = *(double *)v5;
      }
      uint64_t v103 = *((void *)v4 + 1);
      if ((v103 & 4) != 0) {
        double v104 = COERCE_DOUBLE((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v103 & 0xFFFFFFFFFFFFFFF8) + 168))(v4));
      }
      else {
        double v104 = *(double *)v4;
      }
      uint64_t v105 = 0;
      char v106 = 1;
LABEL_198:
      uint64_t v107 = 0;
      char v108 = v106;
      char v109 = 1;
      uint64_t v110 = *(void *)&v102 + 8 * v105;
      uint64_t v111 = *(void *)&v104 + 8 * v105;
      while (vabdd_f64(*(double *)(v110 + 8 * v107), *(double *)(v111 + 8 * v107)) < 1.0e-12)
      {
        char v112 = v109;
        char v109 = 0;
        uint64_t v107 = 1;
        if ((v112 & 1) == 0)
        {
          char v106 = 0;
          LOBYTE(v3) = 1;
          uint64_t v105 = 2;
          if (v108) {
            goto LABEL_198;
          }
          return v3 & 1;
        }
      }
      goto LABEL_296;
    }
    if (sub_216B8F888(v5) && sub_216B8F888(v4))
    {
      uint64_t v113 = *((void *)v5 + 1);
      if ((v113 & 4) != 0) {
        uint64_t v114 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v113 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                                 + 168))(v5);
      else {
        uint64_t v114 = *(unint64_t **)v5;
      }
      uint64_t v115 = *((void *)v4 + 1);
      if ((v115 & 4) != 0) {
        BOOL v116 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v115 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      }
      else {
        BOOL v116 = *(void **)v4;
      }
      return sub_21705E318(v114, v116);
    }
    else if (sub_216B8F40C(v5) && sub_216B8F40C(v4))
    {
      uint64_t v117 = *((void *)v5 + 1);
      if ((v117 & 4) != 0) {
        uint64_t v118 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v117 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                                 + 168))(v5);
      else {
        uint64_t v118 = *(unint64_t **)v5;
      }
      uint64_t v119 = *((void *)v4 + 1);
      if ((v119 & 4) != 0) {
        uint64_t v120 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      }
      else {
        uint64_t v120 = *(void **)v4;
      }
      return sub_21705E3D0(v118, v120);
    }
    else if (sub_216956AEC(v5) && sub_216956AEC(v4))
    {
      uint64_t v121 = *((void *)v5 + 1);
      if ((v121 & 4) != 0) {
        int v122 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v121 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                       + 168))(v5);
      else {
        int v122 = *(double **)v5;
      }
      uint64_t v123 = *((void *)v4 + 1);
      if ((v123 & 4) != 0) {
        v124 = (double *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v123 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      }
      else {
        v124 = *(double **)v4;
      }
      return sub_21705E484(v122, v124);
    }
    else if (sub_21695810C(v5) && sub_21695810C(v4))
    {
      uint64_t v125 = *((void *)v5 + 1);
      if ((v125 & 4) != 0) {
        uint64_t v126 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v125 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                      + 168))(v5);
      else {
        uint64_t v126 = *(float **)v5;
      }
      uint64_t v127 = *((void *)v4 + 1);
      if ((v127 & 4) != 0) {
        int v128 = (float *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v127 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      }
      else {
        int v128 = *(float **)v4;
      }
      return sub_21705E4F8(v126, v128);
    }
    else if (sub_21690577C(v5) && sub_21690577C(v4))
    {
      uint64_t v129 = *((void *)v5 + 1);
      if ((v129 & 4) != 0) {
        v130 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v129 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                                 + 168))(v5);
      else {
        v130 = *(unint64_t **)v5;
      }
      uint64_t v131 = *((void *)v4 + 1);
      if ((v131 & 4) != 0) {
        uint64_t v132 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      }
      else {
        uint64_t v132 = *(void **)v4;
      }
      return sub_21705E584(v130, v132);
    }
    else if (sub_216904004(v5) && sub_216904004(v4))
    {
      uint64_t v133 = *((void *)v5 + 1);
      if ((v133 & 4) != 0) {
        uint64_t v134 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v133 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                                 + 168))(v5);
      else {
        uint64_t v134 = *(unint64_t **)v5;
      }
      uint64_t v135 = *((void *)v4 + 1);
      if ((v135 & 4) != 0) {
        int v136 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v135 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
      }
      else {
        int v136 = *(void **)v4;
      }
      return sub_21705E620(v134, v136);
    }
    else
    {
      if (sub_216B8D444(v5) && sub_216B8D444(v4))
      {
        uint64_t v137 = *((void *)v5 + 1);
        if ((v137 & 4) != 0) {
          int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v137 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        uint64_t v138 = *((void *)v4 + 1);
        if ((v138 & 4) != 0) {
          size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v138 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        double v8 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v5], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v4]);
        double v9 = 0.01;
        goto LABEL_17;
      }
      if (sub_216B908FC(v5) && sub_216B908FC(v4))
      {
        uint64_t v139 = *((void *)v5 + 1);
        if ((v139 & 4) != 0) {
          int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v139 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        uint64_t v140 = *((void *)v4 + 1);
        if ((v140 & 4) != 0) {
          size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v140 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        uint64_t v141 = 0;
        char v142 = 1;
        do
        {
          double v143 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v5 + v141)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v4 + v141)]);
          LOBYTE(v3) = v143 < 0.01;
          if ((v142 & 1) == 0) {
            break;
          }
          char v142 = 0;
          uint64_t v141 = 1;
        }
        while (v143 < 0.01);
        return v3 & 1;
      }
      if (sub_216B91330(v5) && sub_216B91330(v4))
      {
        uint64_t v144 = *((void *)v5 + 1);
        if ((v144 & 4) != 0) {
          int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v144 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        uint64_t v145 = *((void *)v4 + 1);
        if ((v145 & 4) != 0) {
          size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v145 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v5], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v4]) < 0.01)
        {
          unint64_t v146 = 0;
          do
          {
            unint64_t v147 = v146;
            if (v146 == 2) {
              break;
            }
            double v148 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v5 + v146 + 1)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v4 + v146 + 1)]);
            ++v146;
          }
          while (v148 < 0.01);
          BOOL v46 = v147 > 1;
          goto LABEL_84;
        }
        goto LABEL_296;
      }
      if (sub_216B91E5C(v5) && sub_216B91E5C(v4))
      {
        uint64_t v149 = *((void *)v5 + 1);
        if ((v149 & 4) != 0) {
          int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v149 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        uint64_t v150 = *((void *)v4 + 1);
        if ((v150 & 4) != 0) {
          size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v150 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v5], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)v4]) < 0.01)
        {
          unint64_t v151 = 0;
          do
          {
            unint64_t v152 = v151;
            if (v151 == 3) {
              break;
            }
            double v153 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v5 + v151 + 1)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)v4 + v151 + 1)]);
            ++v151;
          }
          while (v153 < 0.01);
          BOOL v46 = v152 > 2;
          goto LABEL_84;
        }
        goto LABEL_296;
      }
      if (sub_2168F8308(v5) && sub_2168F8308(v4))
      {
        uint64_t v154 = *((void *)v5 + 1);
        if ((v154 & 4) != 0) {
          uint64_t v155 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v154 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        else {
          uint64_t v155 = *(unint64_t **)v5;
        }
        uint64_t v156 = *((void *)v4 + 1);
        if ((v156 & 4) != 0) {
          uint64_t v157 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v156 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        else {
          uint64_t v157 = *(void **)v4;
        }
        return sub_21705E6BC(v155, v157);
      }
      else if (sub_2168FAA14(v5) && sub_2168FAA14(v4))
      {
        uint64_t v158 = *((void *)v5 + 1);
        if ((v158 & 4) != 0) {
          uint64_t v159 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v158 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        else {
          uint64_t v159 = *(unint64_t **)v5;
        }
        uint64_t v160 = *((void *)v4 + 1);
        if ((v160 & 4) != 0) {
          v161 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v160 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        else {
          v161 = *(void **)v4;
        }
        return sub_21705E760(v159, v161);
      }
      else if (sub_2168FD1A4(v5) && sub_2168FD1A4(v4))
      {
        uint64_t v162 = *((void *)v5 + 1);
        if ((v162 & 4) != 0) {
          int v163 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v162 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        else {
          int v163 = *(unint64_t **)v5;
        }
        uint64_t v164 = *((void *)v4 + 1);
        if ((v164 & 4) != 0) {
          long long v165 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v164 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        else {
          long long v165 = *(void **)v4;
        }
        return sub_21705E804(v163, v165);
      }
      else if (sub_2168FF9E8(v5) && sub_2168FF9E8(v4))
      {
        uint64_t v166 = *((void *)v5 + 1);
        if ((v166 & 4) != 0) {
          int v167 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        else {
          int v167 = *(unint64_t **)v5;
        }
        uint64_t v168 = *((void *)v4 + 1);
        if ((v168 & 4) != 0) {
          uint64_t v169 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v168 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        else {
          uint64_t v169 = *(void **)v4;
        }
        return sub_21705E900(v167, v169);
      }
      else if (sub_216B8FDA4(v5) && sub_216B8FDA4(v4))
      {
        uint64_t v170 = *((void *)v5 + 1);
        if ((v170 & 4) != 0) {
          int v5 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v170 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        uint64_t v171 = *((void *)v4 + 1);
        if ((v171 & 4) != 0) {
          size_t v4 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v171 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        return sub_21705E9FC((unsigned __int16 *)v5, (unsigned __int16 *)v4);
      }
      else if (sub_216903B7C(v5) && sub_216903B7C(v4))
      {
        uint64_t v173 = *((void *)v5 + 1);
        if ((v173 & 4) != 0) {
          uint64_t v174 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v173 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        else {
          uint64_t v174 = *(unint64_t **)v5;
        }
        uint64_t v175 = *((void *)v4 + 1);
        if ((v175 & 4) != 0) {
          uint64_t v176 = (void *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v175 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
        }
        else {
          uint64_t v176 = *(void **)v4;
        }
        return sub_21705EAA8(v174, v176);
      }
      else
      {
        return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v5, (std::type_info *)v4, v172);
      }
    }
  }
}

BOOL sub_21705DCF8(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = (float *)a1[4];
  size_t v4 = (float *)a2[4];
  if (vabdd_f64(*v3, *v4) >= 0.000001) {
    return 0;
  }
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v2 == v5) {
      break;
    }
    double v7 = vabdd_f64(v3[v5], v4[v5]);
    ++v5;
  }
  while (v7 < 0.000001);
  return v6 >= v2;
}

BOOL sub_21705DD84(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = (double *)a1[4];
  size_t v4 = (double *)a2[4];
  if (vabdd_f64(*v3, *v4) >= 1.0e-12) {
    return 0;
  }
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v2 == v5) {
      break;
    }
    double v7 = vabdd_f64(v3[v5], v4[v5]);
    ++v5;
  }
  while (v7 < 1.0e-12);
  return v6 >= v2;
}

BOOL sub_21705DE00(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      BOOL v3 = 0;
      unint64_t v4 = 0;
      unint64_t v5 = a1[4];
      uint64_t v6 = a2[4];
      do
      {
        BOOL v7 = 0;
        unint64_t v8 = 0;
        unint64_t v9 = v5;
        uint64_t v10 = v6;
LABEL_5:
        uint64_t v11 = 0;
        while (vabdd_f64(*(double *)(v9 + v11), *(double *)(v10 + v11)) < 1.0e-12)
        {
          v11 += 8;
          if (v11 == 32)
          {
            BOOL v7 = v8 > 2;
            v10 += 32;
            v9 += 32;
            if (++v8 != 4) {
              goto LABEL_5;
            }
            goto LABEL_11;
          }
        }
        if (!v7) {
          return v3;
        }
LABEL_11:
        ++v4;
        v6 += 128;
        v5 += 128;
        BOOL v3 = v4 >= v2;
      }
      while (v4 != v2);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_21705DEB8(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  BOOL v3 = (float *)a1[4];
  unint64_t v4 = (float *)a2[4];
  if (vabdd_f64(*v3, *v4) < 0.000001)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a2[4];
    unint64_t v8 = a1[4];
    do
    {
      uint64_t v9 = 1;
      do
      {
        uint64_t v10 = v9;
        if (v9 == 3) {
          break;
        }
        double v11 = vabdd_f64(*(float *)(v8 + 4 * v9), *(float *)(v7 + 4 * v9));
        ++v9;
      }
      while (v11 < 0.000001);
      if ((unint64_t)(v10 - 1) <= 1) {
        break;
      }
      BOOL v6 = ++v5 >= v2;
      if (v5 == v2) {
        break;
      }
      v8 += 12;
      v7 += 12;
    }
    while (vabdd_f64(v3[3 * v5], v4[3 * v5]) < 0.000001);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_21705DF94(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  BOOL v3 = (double *)a1[4];
  unint64_t v4 = (double *)a2[4];
  if (vabdd_f64(*v3, *v4) < 1.0e-12)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a2[4];
    unint64_t v8 = a1[4];
    do
    {
      uint64_t v9 = 1;
      do
      {
        uint64_t v10 = v9;
        if (v9 == 3) {
          break;
        }
        double v11 = vabdd_f64(*(double *)(v8 + 8 * v9), *(double *)(v7 + 8 * v9));
        ++v9;
      }
      while (v11 < 1.0e-12);
      if ((unint64_t)(v10 - 1) <= 1) {
        break;
      }
      BOOL v6 = ++v5 >= v2;
      if (v5 == v2) {
        break;
      }
      v8 += 24;
      v7 += 24;
    }
    while (vabdd_f64(v3[3 * v5], v4[3 * v5]) < 1.0e-12);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_21705E058(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  BOOL v3 = (float *)a1[4];
  unint64_t v4 = (float *)a2[4];
  if (vabdd_f64(*v3, *v4) < 0.000001)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a2[4];
    unint64_t v8 = a1[4];
    do
    {
      uint64_t v9 = 1;
      do
      {
        uint64_t v10 = v9;
        if (v9 == 4) {
          break;
        }
        double v11 = vabdd_f64(*(float *)(v8 + 4 * v9), *(float *)(v7 + 4 * v9));
        ++v9;
      }
      while (v11 < 0.000001);
      if ((unint64_t)(v10 - 1) <= 2) {
        break;
      }
      BOOL v6 = ++v5 >= v2;
      if (v5 == v2) {
        break;
      }
      v8 += 16;
      v7 += 16;
    }
    while (vabdd_f64(v3[4 * v5], v4[4 * v5]) < 0.000001);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_21705E134(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  BOOL v3 = (double *)a1[4];
  unint64_t v4 = (double *)a2[4];
  if (vabdd_f64(*v3, *v4) < 1.0e-12)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a2[4];
    unint64_t v8 = a1[4];
    do
    {
      uint64_t v9 = 1;
      do
      {
        uint64_t v10 = v9;
        if (v9 == 4) {
          break;
        }
        double v11 = vabdd_f64(*(double *)(v8 + 8 * v9), *(double *)(v7 + 8 * v9));
        ++v9;
      }
      while (v11 < 1.0e-12);
      if ((unint64_t)(v10 - 1) <= 2) {
        break;
      }
      BOOL v6 = ++v5 >= v2;
      if (v5 == v2) {
        break;
      }
      v8 += 32;
      v7 += 32;
    }
    while (vabdd_f64(v3[4 * v5], v4[4 * v5]) < 1.0e-12);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_21705E1F8(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      BOOL v3 = 0;
      for (i = 0; i != v2; BOOL v3 = i >= v2)
      {
        uint64_t v5 = 0;
        char v6 = 1;
        do
        {
          double v7 = vabdd_f64(*(float *)(a1[4] + 8 * i + 4 * v5), *(float *)(a2[4] + 8 * i + 4 * v5));
          if ((v6 & 1) == 0) {
            break;
          }
          char v6 = 0;
          uint64_t v5 = 1;
        }
        while (v7 < 0.000001);
        if (v7 >= 0.000001) {
          break;
        }
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_21705E28C(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      BOOL v3 = 0;
      for (i = 0; i != v2; BOOL v3 = i >= v2)
      {
        uint64_t v5 = 0;
        char v6 = 1;
        do
        {
          double v7 = vabdd_f64(*(double *)(a1[4] + 16 * i + 8 * v5), *(double *)(a2[4] + 16 * i + 8 * v5));
          if ((v6 & 1) == 0) {
            break;
          }
          char v6 = 0;
          uint64_t v5 = 1;
        }
        while (v7 < 1.0e-12);
        if (v7 >= 1.0e-12) {
          break;
        }
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_21705E318(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      BOOL v3 = 0;
      unint64_t v4 = 0;
      unint64_t v5 = a1[4];
      uint64_t v6 = a2[4];
      do
      {
        BOOL v7 = 0;
        unint64_t v8 = 0;
        unint64_t v9 = v5;
        uint64_t v10 = v6;
LABEL_5:
        uint64_t v11 = 0;
        while (vabdd_f64(*(double *)(v9 + v11), *(double *)(v10 + v11)) < 1.0e-12)
        {
          v11 += 8;
          if (v11 == 24)
          {
            BOOL v7 = v8 > 1;
            v10 += 24;
            v9 += 24;
            if (++v8 != 3) {
              goto LABEL_5;
            }
            goto LABEL_11;
          }
        }
        if (!v7) {
          return v3;
        }
LABEL_11:
        ++v4;
        v6 += 72;
        v5 += 72;
        BOOL v3 = v4 >= v2;
      }
      while (v4 != v2);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t sub_21705E3D0(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      BOOL v3 = 0;
      unint64_t v4 = 0;
      unint64_t v5 = a1[4];
      uint64_t v6 = a2[4];
      do
      {
        uint64_t v7 = 0;
        char v8 = 1;
        while (2)
        {
          uint64_t v9 = 0;
          char v10 = v8;
          char v11 = 1;
          uint64_t v12 = v5 + 32 * v4 + 8 * v7;
          uint64_t v13 = v6 + 32 * v4 + 8 * v7;
          do
          {
            if (vabdd_f64(*(double *)(v12 + 8 * v9), *(double *)(v13 + 8 * v9)) >= 1.0e-12)
            {
              char v15 = v3;
              return v15 & 1;
            }
            char v14 = v11;
            char v11 = 0;
            uint64_t v9 = 1;
          }
          while ((v14 & 1) != 0);
          char v8 = 0;
          uint64_t v7 = 2;
          if (v10) {
            continue;
          }
          break;
        }
        ++v4;
        char v15 = 1;
        BOOL v3 = v4 >= v2;
      }
      while (v4 != v2);
    }
    else
    {
      char v15 = 1;
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_21705E484(double *a1, double *a2)
{
  if (vabdd_f64(a1[3], a2[3]) >= 1.0e-12 || vabdd_f64(*a1, *a2) >= 1.0e-12) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 2) {
      break;
    }
    double v4 = vabdd_f64(a1[v2 + 1], a2[v2 + 1]);
    ++v2;
  }
  while (v4 < 1.0e-12);
  return v3 > 1;
}

BOOL sub_21705E4F8(float *a1, float *a2)
{
  if (vabdd_f64(a1[3], a2[3]) >= 0.000001 || vabdd_f64(*a1, *a2) >= 0.000001) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 2) {
      break;
    }
    double v4 = vabdd_f64(a1[v2 + 1], a2[v2 + 1]);
    ++v2;
  }
  while (v4 < 0.000001);
  return v3 > 1;
}

uint64_t sub_21705E584(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = (double *)a1[4];
  double v4 = (double *)a2[4];
  uint64_t result = sub_21705E484(v3, v4);
  if (result)
  {
    uint64_t v6 = v4 + 4;
    uint64_t v7 = v3 + 4;
    uint64_t v8 = 1;
    do
    {
      unint64_t v9 = v8;
      if (v2 == v8) {
        break;
      }
      BOOL v10 = sub_21705E484(v7, v6);
      uint64_t v8 = v9 + 1;
      v6 += 4;
      v7 += 4;
    }
    while (v10);
    return v9 >= v2;
  }
  return result;
}

uint64_t sub_21705E620(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = (float *)a1[4];
  double v4 = (float *)a2[4];
  uint64_t result = sub_21705E4F8(v3, v4);
  if (result)
  {
    uint64_t v6 = v4 + 4;
    uint64_t v7 = v3 + 4;
    uint64_t v8 = 1;
    do
    {
      unint64_t v9 = v8;
      if (v2 == v8) {
        break;
      }
      BOOL v10 = sub_21705E4F8(v7, v6);
      uint64_t v8 = v9 + 1;
      v6 += 4;
      v7 += 4;
    }
    while (v10);
    return v9 >= v2;
  }
  return result;
}

BOOL sub_21705E6BC(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = (unsigned __int16 *)a1[4];
  double v4 = (unsigned __int16 *)a2[4];
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v3], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4]) >= 0.01)return 0; {
  uint64_t v5 = 1;
  }
  do
  {
    unint64_t v6 = v5;
    if (v2 == v5) {
      break;
    }
    double v7 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3[v5]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[v5]]);
    ++v5;
  }
  while (v7 < 0.01);
  return v6 >= v2;
}

BOOL sub_21705E760(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == *a2)
  {
    if (v2)
    {
      BOOL v3 = 0;
      for (i = 0; i != v2; BOOL v3 = i >= v2)
      {
        uint64_t v5 = 0;
        char v6 = 1;
        do
        {
          double v7 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(a1[4] + 4 * i + 2 * v5)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(a2[4] + 4 * i + 2 * v5)]);
          if ((v6 & 1) == 0) {
            break;
          }
          char v6 = 0;
          uint64_t v5 = 1;
        }
        while (v7 < 0.01);
        if (v7 >= 0.01) {
          break;
        }
        ++i;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL sub_21705E804(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  BOOL v3 = (unsigned __int16 *)a1[4];
  double v4 = (unsigned __int16 *)a2[4];
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v3], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4]) < 0.01)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a2[4];
    unint64_t v8 = a1[4];
    do
    {
      uint64_t v9 = 1;
      do
      {
        uint64_t v10 = v9;
        if (v9 == 3) {
          break;
        }
        double v11 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v8 + 2 * v9)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v7 + 2 * v9)]);
        ++v9;
      }
      while (v11 < 0.01);
      if ((unint64_t)(v10 - 1) <= 1) {
        break;
      }
      BOOL v6 = ++v5 >= v2;
      if (v5 == v2) {
        break;
      }
      v8 += 6;
      v7 += 6;
    }
    while (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3[3 * v5]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[3 * v5]]) < 0.01);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_21705E900(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  BOOL v3 = (unsigned __int16 *)a1[4];
  double v4 = (unsigned __int16 *)a2[4];
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v3], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4]) < 0.01)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a2[4];
    unint64_t v8 = a1[4];
    do
    {
      uint64_t v9 = 1;
      do
      {
        uint64_t v10 = v9;
        if (v9 == 4) {
          break;
        }
        double v11 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v8 + 2 * v9)], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)(v7 + 2 * v9)]);
        ++v9;
      }
      while (v11 < 0.01);
      if ((unint64_t)(v10 - 1) <= 2) {
        break;
      }
      BOOL v6 = ++v5 >= v2;
      if (v5 == v2) {
        break;
      }
      v8 += 8;
      v7 += 8;
    }
    while (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3[4 * v5]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[4 * v5]]) < 0.01);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL sub_21705E9FC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]) >= 0.01|| vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]) >= 0.01)
  {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 2) {
      break;
    }
    double v4 = vabdd_f64(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[v2 + 1]], pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[v2 + 1]]);
    ++v2;
  }
  while (v4 < 0.01);
  return v3 > 1;
}

uint64_t sub_21705EAA8(unint64_t *a1, void *a2)
{
  unint64_t v2 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = (unsigned __int16 *)a1[4];
  double v4 = (unsigned __int16 *)a2[4];
  uint64_t result = sub_21705E9FC(v3, v4);
  if (result)
  {
    BOOL v6 = v4 + 4;
    uint64_t v7 = v3 + 4;
    uint64_t v8 = 1;
    do
    {
      unint64_t v9 = v8;
      if (v2 == v8) {
        break;
      }
      BOOL v10 = sub_21705E9FC(v7, v6);
      uint64_t v8 = v9 + 1;
      v6 += 4;
      v7 += 4;
    }
    while (v10);
    return v9 >= v2;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter(pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  v10[2] = *MEMORY[0x263EF8340];
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)this + 3) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 4) = 0x7FF8000000000000;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 1;
  sub_2168EE4C4(v10, a3);
  pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::_InitializeSparseAuthoring((pxrInternal__aapl__pxrReserved__ **)this, (pxrInternal__aapl__pxrReserved__::VtValue *)v10, v8);
  sub_2168EE084((uint64_t)v10);
  return this;
}

void sub_21705EC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  sub_2168EE084(v2 + 40);
  sub_216D2EDA0(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::_InitializeSparseAuthoring(pxrInternal__aapl__pxrReserved__ **this, pxrInternal__aapl__pxrReserved__::VtValue *a2, __n128 a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  a3.n128_u64[0] = 0x7FF8000000000000;
  int v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10, a3);
  uint64_t v7 = *((void *)a2 + 1);
  if (v5)
  {
    if (!v7
      || v11 && (pxrInternal__aapl__pxrReserved__::_IsClose((pxrInternal__aapl__pxrReserved__ *)v10, a2, v6) & 1) != 0)
    {
      goto LABEL_8;
    }
  }
  else if (!v7)
  {
    goto LABEL_8;
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(this, a2, NAN);
LABEL_8:
  if (*((void *)a2 + 1)) {
    __n128 v8 = a2;
  }
  else {
    __n128 v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)v10;
  }
  sub_21697DC0C(this + 5, v8);
  return sub_2168EE084((uint64_t)v10);
}

void sub_21705ED3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter(pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)this + 3) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 4) = 0x7FF8000000000000;
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 1;
  pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::_InitializeSparseAuthoring((pxrInternal__aapl__pxrReserved__ **)this, a3, v7);
  return this;
}

void sub_21705EE0C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 + 40);
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, double a4)
{
  double v19 = a4;
  int v5 = (double *)(a1 + 32);
  if (*(double *)(a1 + 32) > a4)
  {
    v17[0] = "usdUtils/sparseValueWriter.cpp";
    v17[1] = "SetTimeSample";
    void v17[2] = 267;
    void v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(const VtValue &, const UsdTimeCode)";
    char v18 = 0;
    sub_216EF6394(&v19);
    sub_216EF6394(v5);
    if (v16 >= 0) {
      __n128 v7 = (const char *)&v15;
    }
    else {
      __n128 v7 = (const char *)v15;
    }
    if (v14 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Time-samples should be set in sequentially increasing order of time. Current time(%s) is earlier than previous time(%s)", v7, p_p);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::_IsClose((pxrInternal__aapl__pxrReserved__ *)(a1 + 40), a2, a3))
  {
    char v9 = 0;
    uint64_t v10 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 56)) {
      int v11 = 1;
    }
    else {
      int v11 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 40), *(double *)(a1 + 32));
    }
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, a2, v19) & v11;
    sub_2168EC6DC((void *)(a1 + 40), a2);
    char v9 = 1;
  }
  *(unsigned char *)(a1 + 56) = v9;
  *(double *)(a1 + 32) = v19;
  return v10;
}

{
  double *v5;
  const char *v7;
  const char *p_p;
  char v9;
  uint64_t v10;
  int v11;
  void *__p;
  char v14;
  void *v15;
  char v16;
  void v17[4];
  char v18;
  double v19;

  double v19 = a4;
  int v5 = (double *)(a1 + 32);
  if (*(double *)(a1 + 32) > a4)
  {
    v17[0] = "usdUtils/sparseValueWriter.cpp";
    v17[1] = "SetTimeSample";
    void v17[2] = 313;
    void v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(VtValue *, const UsdTimeCode)";
    char v18 = 0;
    sub_216EF6394(&v19);
    sub_216EF6394(v5);
    if (v16 >= 0) {
      __n128 v7 = (const char *)&v15;
    }
    else {
      __n128 v7 = (const char *)v15;
    }
    if (v14 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Time-samples should be set in sequentially increasing order of time. Current time(%s) is earlier than previous time(%s)", v7, p_p);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
  }
  if (pxrInternal__aapl__pxrReserved__::_IsClose((pxrInternal__aapl__pxrReserved__ *)(a1 + 40), a2, a3))
  {
    char v9 = 0;
    uint64_t v10 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 56)) {
      int v11 = 1;
    }
    else {
      int v11 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(a1 + 40), *(double *)(a1 + 32));
    }
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)a1, a2, v19) & v11;
    sub_21697DC0C((void *)(a1 + 40), a2);
    char v9 = 1;
  }
  *(unsigned char *)(a1 + 56) = v9;
  *(double *)(a1 + 32) = v19;
  return v10;
}

void sub_21705F02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_21705F274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21705F2C0(void *a1, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double a4)
{
  void v21[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_21705F880(a1, (uint64_t)a2);
  if (v8)
  {
    uint64_t v10 = (uint64_t)(v8 + 6);
    return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(v10, a3, v9, a4);
  }
  else
  {
    uint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter((pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *)v16, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
    uint64_t v12 = sub_21705F9C8((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v16);
    sub_2168EE084((uint64_t)v21);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v17) {
      sub_216D16E0C(v17);
    }
    sub_2168EE084((uint64_t)v14);
    return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample((uint64_t)(v12 + 6), a3, v13, a4);
  }
}

void sub_21705F484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseValueWriter::SetAttribute(void *a1, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double a4)
{
  int v5 = a3;
  return sub_21705F4FC(a1, a2, &v5, a4);
}

uint64_t sub_21705F4FC(void *a1, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData **a3, double a4)
{
  void v22[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_21705F880(a1, (uint64_t)a2);
  if (v8)
  {
    uint64_t v10 = *a3;
    uint64_t v11 = (uint64_t)(v8 + 6);
    return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample(v11, v10, v9, a4);
  }
  else
  {
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::UsdUtilsSparseAttrValueWriter((pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter *)v17, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    uint64_t v13 = sub_21705F9C8((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v17);
    sub_2168EE084((uint64_t)v22);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
    sub_2168EE084((uint64_t)v15);
    return pxrInternal__aapl__pxrReserved__::UsdUtilsSparseAttrValueWriter::SetTimeSample((uint64_t)(v13 + 6), *a3, v14, a4);
  }
}

void sub_21705F6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsSparseValueWriter::GetSparseAttrValueWriters@<X0>(pxrInternal__aapl__pxrReserved__::UsdUtilsSparseValueWriter *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = (uint64_t)sub_21705F788(a2, *((void *)this + 3));
  for (unint64_t i = (void *)*((void *)this + 2); i; unint64_t i = (void *)*i)
    uint64_t result = sub_217060374(a2, (uint64_t)(i + 6));
  return result;
}

void sub_21705F76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21705FF2C((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_21705F788(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2169B761C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    _OWORD v7[3] = (char *)v7[0] + 64 * v6;
    sub_21706003C(a1, v7);
    return sub_2170602F8(v7);
  }
  return result;
}

void sub_21705F808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2170602F8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21705F81C(uint64_t a1)
{
  sub_2168EE084(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t *sub_21705F880(void *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  char v12 = 0;
  sub_216D6EF4C((uint64_t)&v11, (unsigned int *)a2, (void *)(a2 + 8), (unsigned int *)(a2 + 16), (void *)(a2 + 24));
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v11);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v7 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v4 - 1) & v5;
  }
  uint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t result = *v8; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == *(_DWORD *)a2
        && result[3] == *(void *)(a2 + 8)
        && result[4] == *(void *)(a2 + 16)
        && (result[5] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_21705F9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v24 = 0;
  char v25 = 0;
  sub_216D6EF4C((uint64_t)&v24, (unsigned int *)a2, (void *)(a2 + 8), (unsigned int *)(a2 + 16), (void *)(a2 + 24));
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v24);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    char v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (*((_DWORD *)i + 4) == *(_DWORD *)a2
            && i[3] == *(void *)(a2 + 8)
            && i[4] == *(void *)(a2 + 16)
            && (i[5] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
          {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_21705FC98(a1, v9, a3, a4, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v24 = *v21;
    uint64_t *v21 = (uint64_t)v24;
  }
  else
  {
    *unint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v24)
    {
      unint64_t v22 = *(void *)(*v24 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v22 >= v10) {
          v22 %= v10;
        }
      }
      else
      {
        v22 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  unint64_t i = v24;
  unint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_21705FE38((uint64_t)&v24, 0);
  return i;
}

void sub_21705FC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21705FE38((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21705FC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x70uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_21705FD20((uint64_t)(v10 + 2), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_21705FD08(_Unwind_Exception *a1)
{
  sub_21705FE38(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21705FD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  *(void *)(a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 16));
  sub_21698105C((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 20));
  uint64_t v9 = *(void *)(a3 + 24);
  *(void *)(a1 + 56) = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 64) = *(void *)(a3 + 32);
  sub_2168EDFA8((void *)(a1 + 72), (void *)(a3 + 40));
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a3 + 56);
  return a1;
}

void sub_21705FE38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21705FE90((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_21705FE90(uint64_t a1)
{
  sub_2168EE084(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 56);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_21697C414((_DWORD *)(a1 + 48));
  unint64_t v3 = *(atomic_ullong **)(a1 + 40);
  if (v3) {
    sub_216D16E0C(v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  unint64_t v5 = *(atomic_ullong **)(a1 + 8);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return a1;
}

void sub_21705FF2C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_21705FFC4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21705FFC4(uint64_t a1, uint64_t a2)
{
  sub_2168EE084(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_21706003C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2170600B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2170600B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 64;
      sub_217060170(v7 - 64, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 64;
      *((void *)&v15 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21706026C((uint64_t)v12);
  return v10;
}

void sub_21706015C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217060170(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_2168EE4C4((void *)(a1 + 40), (void *)(a2 + 40));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

void sub_217060228(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 24);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  uint64_t v6 = *(atomic_ullong **)(v1 + 8);
  if (v6) {
    sub_216D16E0C(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21706026C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2170602A4((uint64_t *)a1);
  }
  return a1;
}

void sub_2170602A4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_21705FFC4(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **sub_2170602F8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_21706032C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    sub_21705FFC4(v4, i - 64);
  }
}

uint64_t sub_217060374(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 6;
    if ((unint64_t)(v10 + 1) >> 58) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 5;
    if (v11 >> 5 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      long long v14 = (char *)sub_2169B761C(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = v14;
    float v16 = &v14[64 * v10];
    unint64_t v18 = &v14[64 * v13];
    sub_217060170((uint64_t)v16, a2);
    BOOL v17 = v16 + 64;
    sub_21706003C(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = (uint64_t)sub_2170602F8(&v15);
  }
  else
  {
    uint64_t result = sub_217060170(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 64;
    a1[1] = v7 + 64;
  }
  a1[1] = v9;
  return result;
}

void sub_217060468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStageCache::Get(pxrInternal__aapl__pxrReserved__::UsdUtilsStageCache *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B950A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B950A0))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStageCache *)operator new(0x48uLL);
    pxrInternal__aapl__pxrReserved__::UsdStageCache::UsdStageCache(v2);
    qword_267B95098 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B950A0);
  }
  return qword_267B95098;
}

void sub_2170604F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_267B950A0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsStageCache::GetSessionLayerForVariantSelections(void *a1@<X0>, long long **a2@<X1>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a3@<X8>)
{
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v51 = 0;
  long long v50 = 0uLL;
  sub_217060D50((char *)&v50, v6, v7, 0xAAAAAAAAAAAAAAABLL * (v7 - v6));
  unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v50 + 1) - v50) >> 4));
  if (*((void *)&v50 + 1) == (void)v50) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  sub_217060E7C(v50, *((const void ***)&v50 + 1), (uint64_t)&__p, v9, 1);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v14 = *(_OWORD *)EmptyString;
    __dst.__r_.__value_.__r.__words[2] = EmptyString[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v14;
  }
  for (long long i = v50; (void)i != *((void *)&i + 1); sub_217060BD4(&i))
  {
    sub_217060B58(&i, v11, v12);
    std::operator+<char>();
    long long v15 = std::string::append(&v45, "=");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = sub_217060B58(&i, v17, v18);
    int v20 = *(char *)(*v19 + 47);
    if (v20 >= 0) {
      uint64_t v21 = (const std::string::value_type *)(*v19 + 24);
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)(*v19 + 24);
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(*v19 + 47);
    }
    else {
      std::string::size_type v22 = *(void *)(*v19 + 32);
    }
    unint64_t v23 = std::string::append(&v46, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&__dst, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
  }
  *a3 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B950A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B950A8))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26798D0B8, &dword_216758000);
    __cxa_guard_release(&qword_267B950A8);
  }
  std::mutex::lock(&stru_26798D0B8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B950B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B950B8))
  {
    uint64_t v43 = operator new(0x28uLL);
    *uint64_t v43 = 0u;
    v43[1] = 0u;
    *((_DWORD *)v43 + 8) = 1065353216;
    qword_267B950B0 = (uint64_t)v43;
    __cxa_guard_release(&qword_267B950B8);
  }
  uint64_t v27 = qword_267B950B0;
  uint64_t v28 = sub_2168602D4((void *)qword_267B950B0, (unsigned __int8 *)&__dst);
  if (v28)
  {
    unint64_t v29 = *a3;
    *a3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)v28 + 5);
    sub_2168BD80C((uint64_t *)v28 + 5);
    sub_2168BD378((int)a3, v29);
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = 0uLL;
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46.__r_.__value_.__l.__size_;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v46, (uint64_t *)&i);
    sub_2167877AC((uint64_t)&v46, (void *)v46.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*a2 != a2[1])
    {
      unint64_t v30 = sub_216ABBA60((uint64_t *)&v46, (uint64_t *)&i);
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v30);
      }
      memset(&__p, 0, sizeof(__p));
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((uint64_t *)&v46, 1, &v44);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v33 = v46.__r_.__value_.__l.__size_;
      if (v46.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(v46.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)v33 + 8))(v33);
      }
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      while (v46.__r_.__value_.__r.__words[0] != v46.__r_.__value_.__l.__size_)
      {
        uint64_t v34 = *sub_217060C54(&v46, v31, v32);
        uint64_t v35 = sub_216A663FC(&v44);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(v35, &v45);
        char v38 = sub_217060C54(&v46, v36, v37);
        sub_216B467C8((uint64_t *)&v45, *v38, (uint64_t **)&__p);
        sub_216B468DC((uint64_t)&__p, v34 + 24);
        if (v45.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)v45.__r_.__value_.__l.__size_);
        }
        sub_217060CD0(&v46);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v46.__r_.__value_.__l.__data_, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v44);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    double v39 = sub_2170627FC(v27, (unsigned __int8 *)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&__p);
    int v40 = v39 + 40;
    uint64_t v41 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)v39 + 5);
    *((void *)v39 + 5) = i;
    sub_2168BD80C((uint64_t *)&i);
    sub_2168BD378(v40, v41);
    uint64_t v42 = *a3;
    *a3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)i;
    sub_2168BD80C((uint64_t *)&i);
    sub_2168BD378((int)a3, v42);
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&i);
  }
  std::mutex::unlock(&stru_26798D0B8);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  sub_21682E488((void ***)&__dst);
}

void sub_2170609DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_guard_abort(&qword_267B950B8);
  std::mutex::unlock(&stru_26798D0B8);
  sub_216ABB798(v37);
  if (a37 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v38 - 80);
  sub_21682E488((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_217060B58(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    uint64_t v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<std::string, std::string>>>::op"
            "erator->() [T = std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_217060BD4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    uint64_t v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<std::string, std:"
            ":string>>>::operator++() [T = std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

void *sub_217060C54(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    uint64_t v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<std::string, std::string>"
            ">>::operator->() [T = const std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_217060CD0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    uint64_t v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<std::string"
            ", std::string>>>::operator++() [T = const std::vector<std::pair<std::string, std::string>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

char *sub_217060D50(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_2169D8290(result, a4);
    uint64_t result = sub_217060DD8((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_217060DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21682E488(&a9);
  _Unwind_Resume(a1);
}

char *sub_217060DD8(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  char v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_216AC11F8(v4, v6);
      v6 += 3;
      char v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216C02F28((uint64_t)v8);
  return v4;
}

void sub_217060E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_217060E7C(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_217061310(uint64_t a1, const void **a2, const void **a3)
{
  int v5 = *((char *)a3 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v5 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16) {
    return 0;
  }
  unint64_t v19 = (const void **)a3[3];
  uint64_t v18 = a3 + 3;
  unint64_t v17 = v19;
  int v20 = *((char *)v18 + 23);
  uint64_t v23 = (const void **)a2[3];
  uint64_t v22 = a2 + 3;
  long long v21 = v23;
  int v24 = *((char *)v22 + 23);
  if (v24 >= 0) {
    size_t v25 = *((unsigned __int8 *)v22 + 23);
  }
  else {
    size_t v25 = (size_t)v22[1];
  }
  if (v24 >= 0) {
    BOOL v26 = v22;
  }
  else {
    BOOL v26 = v21;
  }
  if (v20 >= 0) {
    size_t v27 = *((unsigned __int8 *)v18 + 23);
  }
  else {
    size_t v27 = (size_t)v18[1];
  }
  if (v20 >= 0) {
    uint64_t v28 = v18;
  }
  else {
    uint64_t v28 = v17;
  }
  if (v27 >= v25) {
    size_t v29 = v25;
  }
  else {
    size_t v29 = v27;
  }
  int v30 = memcmp(v26, v28, v29);
  if (v30) {
    return v30 < 0;
  }
  else {
    return v25 < v27;
  }
}

void sub_21706143C(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    int v5 = (const void **)(a1 + 48);
    if ((const void **)(a1 + 48) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        size_t v9 = v5;
        if (sub_217061310(a3, v5, (const void **)v8))
        {
          *(_OWORD *)BOOL v13 = *(_OWORD *)v9;
          uint64_t v14 = v9[2];
          v9[1] = 0;
          v9[2] = 0;
          *size_t v9 = 0;
          long long __p = *(_OWORD *)(v8 + 72);
          uint64_t v16 = *(void *)(v8 + 88);
          *(void *)(v8 + 72) = 0;
          *(void *)(v8 + 80) = 0;
          uint64_t v10 = v7;
          *(void *)(v8 + 88) = 0;
          while (1)
          {
            sub_216AC10C0(a1 + v10 + 48, (long long *)(a1 + v10));
            if (!v10) {
              break;
            }
            char v11 = sub_217061310(a3, (const void **)v13, (const void **)(a1 + v10 - 48));
            v10 -= 48;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = a1 + v10 + 48;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          sub_216AC10C0(v12, (long long *)v13);
          if (SHIBYTE(v16) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v14) < 0) {
            operator delete(v13[0]);
          }
        }
        int v5 = v9 + 6;
        v7 += 48;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 6 != a2);
    }
  }
}

void sub_21706156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_217061580(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    char v4 = a1;
    int v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if (sub_217061310(a3, v5, v4))
        {
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
          size_t v9 = v7[2];
          v7[1] = 0;
          uint64_t v7[2] = 0;
          *uint64_t v7 = 0;
          long long __p = *(_OWORD *)(v4 + 9);
          char v11 = v4[11];
          v4[9] = 0;
          v4[10] = 0;
          v4[11] = 0;
          do
          {
            sub_216AC10C0((uint64_t)(v4 + 6), (long long *)v4);
            v4 -= 6;
          }
          while ((sub_217061310(a3, (const void **)v8, v4) & 1) != 0);
          sub_216AC10C0((uint64_t)(v4 + 6), (long long *)v8);
          if (SHIBYTE(v11) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v9) < 0) {
            operator delete(v8[0]);
          }
        }
        int v5 = v7 + 6;
        char v4 = v7;
      }
      while (v7 + 6 != a2);
    }
  }
}

void sub_217061684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217061698(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  char v8 = sub_217061310(a4, (const void **)a2, (const void **)a1);
  uint64_t result = sub_217061310(a4, (const void **)a3, (const void **)a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = *((void *)a2 + 2);
    long long v18 = *a2;
    uint64_t v19 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v19;
    *a3 = v18;
    *((void *)a3 + 2) = v17;
    uint64_t v20 = *((void *)a2 + 5);
    long long v21 = *(long long *)((char *)a2 + 24);
    uint64_t v22 = *((void *)a3 + 5);
    *(long long *)((char *)a2 + 24) = *(long long *)((char *)a3 + 24);
    *((void *)a2 + 5) = v22;
    *(long long *)((char *)a3 + 24) = v21;
    *((void *)a3 + 5) = v20;
    if (!sub_217061310(a4, (const void **)a2, (const void **)a1)) {
      return 1;
    }
    uint64_t v23 = *((void *)a1 + 2);
    long long v24 = *a1;
    uint64_t v25 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v25;
    *a2 = v24;
    *((void *)a2 + 2) = v23;
    uint64_t v26 = *((void *)a1 + 5);
    long long v27 = *(long long *)((char *)a1 + 24);
    uint64_t v28 = *((void *)a2 + 5);
    *(long long *)((char *)a1 + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a1 + 5) = v28;
    *(long long *)((char *)a2 + 24) = v27;
    *((void *)a2 + 5) = v26;
    return 2;
  }
  uint64_t v10 = (long long *)((char *)a1 + 24);
  if (!result)
  {
    uint64_t v29 = *((void *)a1 + 2);
    long long v30 = *a1;
    uint64_t v31 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v31;
    *a2 = v30;
    *((void *)a2 + 2) = v29;
    uint64_t v32 = *((void *)a1 + 5);
    long long v33 = *v10;
    uint64_t v34 = *((void *)a2 + 5);
    long long *v10 = *(long long *)((char *)a2 + 24);
    *((void *)a1 + 5) = v34;
    *(long long *)((char *)a2 + 24) = v33;
    *((void *)a2 + 5) = v32;
    if (!sub_217061310(a4, (const void **)a3, (const void **)a2)) {
      return 1;
    }
    uint64_t v35 = *((void *)a2 + 2);
    long long v36 = *a2;
    uint64_t v37 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v37;
    *a3 = v36;
    *((void *)a3 + 2) = v35;
    uint64_t v38 = *((void *)a2 + 5);
    long long v39 = *(long long *)((char *)a2 + 24);
    uint64_t v40 = *((void *)a3 + 5);
    *(long long *)((char *)a2 + 24) = *(long long *)((char *)a3 + 24);
    *((void *)a2 + 5) = v40;
    *(long long *)((char *)a3 + 24) = v39;
    *((void *)a3 + 5) = v38;
    return 2;
  }
  uint64_t v11 = *((void *)a1 + 2);
  long long v12 = *a1;
  uint64_t v13 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v13;
  *a3 = v12;
  *((void *)a3 + 2) = v11;
  uint64_t v14 = *((void *)a1 + 5);
  long long v15 = *v10;
  uint64_t v16 = *((void *)a3 + 5);
  long long *v10 = *(long long *)((char *)a3 + 24);
  *((void *)a1 + 5) = v16;
  *(long long *)((char *)a3 + 24) = v15;
  *((void *)a3 + 5) = v14;
  return 1;
}

unint64_t sub_217061890(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v6 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)long long __p = v6;
  uint64_t v20 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (sub_217061310(a3, (const void **)v17, (const void **)(a2 - 48)))
  {
    unint64_t v7 = a1;
    do
      v7 += 48;
    while ((sub_217061310(a3, (const void **)v17, (const void **)v7) & 1) == 0);
  }
  else
  {
    char v8 = (const void **)(a1 + 48);
    do
    {
      unint64_t v7 = (unint64_t)v8;
      if ((unint64_t)v8 >= v4) {
        break;
      }
      int v9 = sub_217061310(a3, (const void **)v17, v8);
      char v8 = (const void **)(v7 + 48);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 -= 48;
    while ((sub_217061310(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *(_OWORD *)v7;
    uint64_t v22 = *(void *)(v7 + 16);
    long long v21 = v10;
    long long v11 = *(_OWORD *)v4;
    *(void *)(v7 + 16) = *(void *)(v4 + 16);
    *(_OWORD *)unint64_t v7 = v11;
    long long v12 = v21;
    *(void *)(v4 + 16) = v22;
    *(_OWORD *)unint64_t v4 = v12;
    uint64_t v13 = *(void *)(v7 + 40);
    long long v14 = *(_OWORD *)(v7 + 24);
    uint64_t v15 = *(void *)(v4 + 40);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v4 + 24);
    *(void *)(v7 + 40) = v15;
    *(_OWORD *)(v4 + 24) = v14;
    *(void *)(v4 + 40) = v13;
    do
      v7 += 48;
    while (!sub_217061310(a3, (const void **)v17, (const void **)v7));
    do
      v4 -= 48;
    while ((sub_217061310(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  if (v7 - 48 != a1) {
    sub_216AC10C0(a1, (long long *)(v7 - 48));
  }
  sub_216AC10C0(v7 - 48, (long long *)v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  return v7;
}

void sub_217061A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

long long *sub_217061A6C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 40);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v7 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)long long __p = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  do
  {
    char v8 = sub_217061310(a3, (const void **)(a1 + v6 + 48), (const void **)v20);
    v6 += 48;
  }
  while ((v8 & 1) != 0);
  unint64_t v9 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v9 >= (unint64_t)a2) {
        break;
      }
      a2 -= 6;
    }
    while ((sub_217061310(a3, a2, (const void **)v20) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!sub_217061310(a3, a2, (const void **)v20));
  }
  if (v9 >= (unint64_t)a2)
  {
    uint64_t v18 = (long long *)(v9 - 48);
  }
  else
  {
    unint64_t v10 = a1 + v6;
    long long v11 = a2;
    do
    {
      long long v24 = *(_OWORD *)v10;
      long long v12 = v24;
      uint64_t v25 = *(const void **)(v10 + 16);
      uint64_t v13 = v25;
      long long v14 = v11[2];
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      *(void *)(v10 + 16) = v14;
      void v11[2] = v13;
      *(_OWORD *)long long v11 = v12;
      uint64_t v15 = *(const void **)(v10 + 40);
      long long v16 = *(_OWORD *)(v10 + 24);
      uint64_t v17 = v11[5];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 3);
      *(void *)(v10 + 40) = v17;
      *(_OWORD *)(v11 + 3) = v16;
      v11[5] = v15;
      do
        v10 += 48;
      while ((sub_217061310(a3, (const void **)v10, (const void **)v20) & 1) != 0);
      do
        v11 -= 6;
      while (!sub_217061310(a3, v11, (const void **)v20));
    }
    while (v10 < (unint64_t)v11);
    uint64_t v18 = (long long *)(v10 - 48);
  }
  if (v18 != (long long *)a1) {
    sub_216AC10C0(a1, v18);
  }
  sub_216AC10C0((uint64_t)v18, (long long *)v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  return v18;
}

void sub_217061C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_217061C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (_OWORD *)(a2 - 48);
      if (sub_217061310(a3, (const void **)(a2 - 48), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 32);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *char v8 = v10;
        *(void *)(a2 - 32) = v9;
        uint64_t v12 = *(void *)(a1 + 40);
        long long v13 = *(_OWORD *)(a1 + 24);
        uint64_t v14 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 40) = v14;
        *(_OWORD *)(a2 - 24) = v13;
        *(void *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      sub_217061698((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      sub_217061ED0(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      sub_217062024(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v15 = (const void **)(a1 + 96);
      sub_217061698((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v16 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    if (sub_217061310(a3, (const void **)v16, v15))
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v16;
      uint64_t v24 = *(void *)(v16 + 16);
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      long long v19 = *(_OWORD *)(v16 + 24);
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      long long __p = v19;
      uint64_t v26 = *(void *)(v16 + 40);
      uint64_t v20 = v17;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      while (1)
      {
        sub_216AC10C0(a1 + v20 + 144, (long long *)(a1 + v20 + 96));
        if (v20 == -96) {
          break;
        }
        char v21 = sub_217061310(a3, (const void **)v23, (const void **)(a1 + v20 + 48));
        v20 -= 48;
        if ((v21 & 1) == 0)
        {
          uint64_t v22 = a1 + v20 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      sub_216AC10C0(v22, (long long *)v23);
      if (SHIBYTE(v26) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
      if (++v18 == 8) {
        return v16 + 48 == a2;
      }
    }
    uint64_t v15 = (const void **)v16;
    v17 += 48;
    v16 += 48;
    if (v16 == a2) {
      return 1;
    }
  }
}

void sub_217061EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_217061ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_217061698((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if (sub_217061310(a5, (const void **)a4, (const void **)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    uint64_t v14 = *(void *)(a3 + 40);
    long long v15 = *(_OWORD *)(a3 + 24);
    uint64_t v16 = *(void *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(void *)(a3 + 40) = v16;
    *(_OWORD *)(a4 + 24) = v15;
    *(void *)(a4 + 40) = v14;
    if (sub_217061310(a5, (const void **)a3, (const void **)a2))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(void *)(a3 + 16) = v17;
      uint64_t v20 = *(void *)(a2 + 40);
      long long v21 = *(_OWORD *)(a2 + 24);
      uint64_t v22 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 40) = v22;
      *(_OWORD *)(a3 + 24) = v21;
      *(void *)(a3 + 40) = v20;
      if (sub_217061310(a5, (const void **)a2, (const void **)a1))
      {
        uint64_t v23 = *(void *)(a1 + 16);
        long long v24 = *(_OWORD *)a1;
        uint64_t v25 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v25;
        *(_OWORD *)a2 = v24;
        *(void *)(a2 + 16) = v23;
        uint64_t v26 = *(void *)(a1 + 40);
        __n128 result = *(__n128 *)(a1 + 24);
        uint64_t v27 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = v27;
        *(__n128 *)(a2 + 24) = result;
        *(void *)(a2 + 40) = v26;
      }
    }
  }
  return result;
}

__n128 sub_217062024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_217061ED0(a1, a2, a3, a4, a6);
  if (sub_217061310(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *(void *)(a4 + 16);
    long long v14 = *(_OWORD *)a4;
    uint64_t v15 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v15;
    *(_OWORD *)a5 = v14;
    *(void *)(a5 + 16) = v13;
    uint64_t v16 = *(void *)(a4 + 40);
    long long v17 = *(_OWORD *)(a4 + 24);
    uint64_t v18 = *(void *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(void *)(a4 + 40) = v18;
    *(_OWORD *)(a5 + 24) = v17;
    *(void *)(a5 + 40) = v16;
    if (sub_217061310(a6, (const void **)a4, (const void **)a3))
    {
      uint64_t v19 = *(void *)(a3 + 16);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(void *)(a4 + 16) = v19;
      uint64_t v22 = *(void *)(a3 + 40);
      long long v23 = *(_OWORD *)(a3 + 24);
      uint64_t v24 = *(void *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(void *)(a3 + 40) = v24;
      *(_OWORD *)(a4 + 24) = v23;
      *(void *)(a4 + 40) = v22;
      if (sub_217061310(a6, (const void **)a3, (const void **)a2))
      {
        uint64_t v25 = *(void *)(a2 + 16);
        long long v26 = *(_OWORD *)a2;
        uint64_t v27 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v27;
        *(_OWORD *)a3 = v26;
        *(void *)(a3 + 16) = v25;
        uint64_t v28 = *(void *)(a2 + 40);
        long long v29 = *(_OWORD *)(a2 + 24);
        uint64_t v30 = *(void *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(void *)(a2 + 40) = v30;
        *(_OWORD *)(a3 + 24) = v29;
        *(void *)(a3 + 40) = v28;
        if (sub_217061310(a6, (const void **)a2, (const void **)a1))
        {
          uint64_t v31 = *(void *)(a1 + 16);
          long long v32 = *(_OWORD *)a1;
          uint64_t v33 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v33;
          *(_OWORD *)a2 = v32;
          *(void *)(a2 + 16) = v31;
          uint64_t v34 = *(void *)(a1 + 40);
          __n128 result = *(__n128 *)(a1 + 24);
          uint64_t v35 = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = v35;
          *(__n128 *)(a2 + 24) = result;
          *(void *)(a2 + 40) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2170621DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 48 * v10;
      do
      {
        sub_21706235C(a1, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      long long v14 = (_OWORD *)(a1 + 24);
      uint64_t v15 = v6;
      do
      {
        if (sub_217061310(a4, (const void **)v15, (const void **)a1))
        {
          uint64_t v16 = *(void *)(v15 + 16);
          long long v17 = *(_OWORD *)v15;
          uint64_t v18 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
          *(void *)(v15 + 16) = v18;
          *(_OWORD *)a1 = v17;
          *(void *)(a1 + 16) = v16;
          uint64_t v19 = *(void *)(v15 + 40);
          long long v20 = *(_OWORD *)(v15 + 24);
          uint64_t v21 = *(void *)(a1 + 40);
          *(_OWORD *)(v15 + 24) = *v14;
          *(void *)(v15 + 40) = v21;
          *long long v14 = v20;
          *(void *)(a1 + 40) = v19;
          sub_21706235C(a1, a4, v9, a1);
        }
        v15 += 48;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 49)
    {
      unint64_t v22 = v8 / 0x30uLL;
      do
      {
        sub_217062510(a1, v6, a4, v22);
        v6 -= 48;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_21706235C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      uint64_t v10 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      uint64_t v11 = a1 + 48 * v10;
      uint64_t v12 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v12 < a3 && sub_217061310(a2, (const void **)(a1 + 48 * v10), (const void **)(v11 + 48)))
      {
        v11 += 48;
        uint64_t v10 = v12;
      }
      if ((sub_217061310(a2, (const void **)v11, (const void **)v5) & 1) == 0)
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v5;
        uint64_t v17 = *(void *)(v5 + 16);
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        long long v13 = *(_OWORD *)(v5 + 24);
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        *(_OWORD *)long long __p = v13;
        uint64_t v19 = *(void *)(v5 + 40);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        do
        {
          uint64_t v14 = v11;
          sub_216AC10C0(v5, (long long *)v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          uint64_t v11 = a1 + 48 * v15;
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v15;
          }
          else if (sub_217061310(a2, (const void **)(a1 + 48 * v15), (const void **)(v11 + 48)))
          {
            v11 += 48;
          }
          else
          {
            uint64_t v10 = v15;
          }
          uint64_t v5 = v14;
        }
        while (!sub_217061310(a2, (const void **)v11, (const void **)v16));
        sub_216AC10C0(v14, (long long *)v16);
        if (SHIBYTE(v19) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
      }
    }
  }
}

void sub_2170624FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_217062510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)long long __p = v7;
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v8 = sub_21706261C(a1, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (long long *)(a2 - 48);
    if (v8 == v10)
    {
      sub_216AC10C0((uint64_t)v8, (long long *)v11);
    }
    else
    {
      sub_216AC10C0((uint64_t)v8, v10);
      sub_216AC10C0((uint64_t)v10, (long long *)v11);
      sub_2170626DC(a1, (uint64_t)(v9 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
}

void sub_217062608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

long long *sub_21706261C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = (long long *)(a1 + 48 * v6 + 48);
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && sub_217061310(a2, (const void **)(a1 + 48 * v6 + 48), (const void **)(a1 + 48 * v6 + 96)))
    {
      v9 += 3;
      uint64_t v10 = v11;
    }
    sub_216AC10C0(a1, v9);
    a1 = (uint64_t)v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void sub_2170626DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = (long long *)(a1 + 48 * v7);
    uint64_t v9 = a2 - 48;
    if (sub_217061310(a3, (const void **)v8, (const void **)(a2 - 48)))
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v9;
      uint64_t v12 = *(void *)(v9 + 16);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = 0;
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 24);
      uint64_t v14 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v10 = (uint64_t)v8;
        sub_216AC10C0(v9, v8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 48 * v7);
        uint64_t v9 = v10;
      }
      while ((sub_217061310(a3, (const void **)v8, (const void **)v11) & 1) != 0);
      sub_216AC10C0(v10, (long long *)v11);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
    }
  }
}

void sub_2170627E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_2170627FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  long long v26 = 0;
  char v27 = 0;
  uint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (long long i = *v14; i; long long i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_217062AC4(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)long long v26 = *v23;
    std::string *v23 = v26;
  }
  else
  {
    *(void *)long long v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  long long i = v26;
  long long v26 = 0;
  ++*(void *)(a1 + 24);
  sub_217062B64((uint64_t)&v26, 0);
  return i;
}

void sub_217062AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_217062B64((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_217062AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_217062B4C(_Unwind_Exception *a1)
{
  sub_217062B64(v1, 0);
  _Unwind_Resume(a1);
}

void sub_217062B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_217062BBC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_217062BBC(uint64_t a1)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsStitchInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  void v3[4] = *MEMORY[0x263EF8340];
  uint64_t v3[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsStitchInfo(a1, a2, (uint64_t)v3);
  return sub_21706B74C(v3);
}

void sub_217062C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21706B74C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  void v21[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t **)sub_21697F2E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, &v18);
  uint64_t v7 = sub_21697F2E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v16);
  uint64_t v8 = (uint64_t **)sub_21697F2E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, &v14);
  uint64_t v9 = sub_21697F2E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v9, &v12);
  v21[0] = &unk_26C771610;
  v21[1] = sub_217062F44;
  _OWORD v21[2] = a3;
  void v21[3] = v21;
  v20[0] = &unk_26C7716B8;
  v20[1] = sub_217063EB0;
  void v20[3] = v20;
  pxrInternal__aapl__pxrReserved__::SdfCopySpec(&v18, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, &v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (int *)v21, (const char *)v20);
  sub_21706BA64(v20);
  sub_21706B8DC(v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  uint64_t v10 = v15;
  if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  uint64_t result = v19;
  if (v19)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_217062E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217062F44(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t *a6, pxrInternal__aapl__pxrReserved__::SdfPath *a7, int a8, void *a9, uint64_t a10)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  if (*(void *)a4 != *(void *)a7)
  {
    double v104 = "usdUtils/stitch.cpp";
    uint64_t v105 = (double *)"_MergeValueFn";
    uint64_t v106 = 140;
    uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &, con"
           "st SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optional<VtVa"
           "lue> *, const UsdUtilsStitchValueFn &)";
    char v108 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcPath == dstPath", 0);
  }
  if (*(void *)(a10 + 24))
  {
    uint64_t v105 = 0;
    int v18 = sub_217064938(a10, (uint64_t)a2, (uint64_t)a4, (uint64_t)a6, a8, (uint64_t)a3, a5, (uint64_t)&v104);
    if (v18)
    {
      if (v18 == 2)
      {
        uint64_t v101 = 0;
        sub_216A98A0C((uint64_t)a9, &v100);
        sub_2168EE084((uint64_t)&v100);
        sub_21697DC0C(a9, &v104);
        int v19 = 1;
        char v10 = 1;
      }
      else
      {
        int v19 = 0;
      }
    }
    else
    {
      char v10 = 0;
      int v19 = 1;
    }
    sub_2168EE084((uint64_t)&v104);
    if (!v19) {
      char v10 = a5;
    }
    if (v19) {
      return v10 & 1;
    }
  }
  else
  {
    char v10 = a5;
  }
  if (!a5 || !a8) {
    return v10 & 1;
  }
  unint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20) {
    unint64_t v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    LODWORD(v100) = 0;
    LODWORD(v97) = 0;
    uint64_t v30 = (void *)sub_2169791E0(a3);
    uint64_t v105 = &v100;
    uint64_t v106 = (uint64_t)&stru_26C758108;
    LOWORD(v107) = 0;
    double v104 = (char *)&unk_26C76A080;
    char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v30, a4, a2, (uint64_t (***)(void, uint64_t))&v104);
    if ((_BYTE)v107) {
      char v32 = 0;
    }
    else {
      char v32 = HasField;
    }
    if ((v32 & 1) == 0)
    {
      double v104 = "usdUtils/stitch.cpp";
      uint64_t v105 = (double *)"_MergeValueFn";
      uint64_t v106 = 178;
      uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &, c"
             "onst SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optional<"
             "VtValue> *, const UsdUtilsStitchValueFn &)";
      char v108 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcLayer->HasField(srcPath, field, &srcSpecifier)", 0);
    }
    uint64_t v33 = (void *)sub_2169791E0(a6);
    uint64_t v105 = &v97;
    uint64_t v106 = (uint64_t)&stru_26C758108;
    LOWORD(v107) = 0;
    double v104 = (char *)&unk_26C76A080;
    char v34 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v33, a7, a2, (uint64_t (***)(void, uint64_t))&v104);
    if ((_BYTE)v107) {
      char v35 = 0;
    }
    else {
      char v35 = v34;
    }
    if ((v35 & 1) == 0)
    {
      double v104 = "usdUtils/stitch.cpp";
      uint64_t v105 = (double *)"_MergeValueFn";
      uint64_t v106 = 179;
      uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &, c"
             "onst SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optional<"
             "VtValue> *, const UsdUtilsStitchValueFn &)";
      char v108 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstSpecifier)", 0);
    }
    int v36 = LODWORD(v100);
    uint64_t v105 = (double *)((char *)&off_26C758118 + 3);
    if (LODWORD(v100) == 1) {
      int v36 = LODWORD(v97);
    }
    LODWORD(v104) = v36;
    sub_216A98A0C((uint64_t)a9, &v104);
    goto LABEL_99;
  }
  unint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21) {
    unint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v21 + 54) & 0xFFFFFFFFFFFFFFF8))
  {
    size_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v22) {
      size_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 40) & 0xFFFFFFFFFFFFFFF8))
    {
      double v100 = 0.0;
      double v97 = 0.0;
      long long v50 = (void *)sub_2169791E0(a3);
      uint64_t v51 = MEMORY[0x263F8C240];
      uint64_t v105 = &v100;
      uint64_t v106 = MEMORY[0x263F8C240];
      LOWORD(v107) = 0;
      double v104 = (char *)&unk_26C75DC08;
      char v52 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v50, a4, a2, (uint64_t (***)(void, uint64_t))&v104);
      if ((_BYTE)v107) {
        char v53 = 0;
      }
      else {
        char v53 = v52;
      }
      if ((v53 & 1) == 0)
      {
        double v104 = "usdUtils/stitch.cpp";
        uint64_t v105 = (double *)"_MergeValueFn";
        uint64_t v106 = 209;
        uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &,"
               " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optio"
               "nal<VtValue> *, const UsdUtilsStitchValueFn &)";
        char v108 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcLayer->HasField(srcPath, field, &srcStartCode)", 0);
      }
      uint64_t v54 = (void *)sub_2169791E0(a6);
      uint64_t v105 = &v97;
      uint64_t v106 = v51;
      LOWORD(v107) = 0;
      double v104 = (char *)&unk_26C75DC08;
      char v55 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v54, a7, a2, (uint64_t (***)(void, uint64_t))&v104);
      if ((_BYTE)v107) {
        char v56 = 0;
      }
      else {
        char v56 = v55;
      }
      if ((v56 & 1) == 0)
      {
        double v104 = "usdUtils/stitch.cpp";
        uint64_t v105 = (double *)"_MergeValueFn";
        uint64_t v106 = 210;
        uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &,"
               " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optio"
               "nal<VtValue> *, const UsdUtilsStitchValueFn &)";
        char v108 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstStartCode)", 0);
      }
      *(double *)&double v57 = v97;
      uint64_t v105 = (double *)&unk_26C750B03;
      if (v97 >= v100) {
        *(double *)&double v57 = v100;
      }
    }
    else
    {
      long long v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23) {
        long long v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 18) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v24) {
          unint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 21) & 0xFFFFFFFFFFFFFFF8))
        {
          double v100 = 0.0;
          double v97 = 0.0;
          uint64_t v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
          if ((sub_216D037E0(v65, a4, a2, (uint64_t (**)(void, uint64_t))&v100) & 1) == 0)
          {
            double v104 = "usdUtils/stitch.cpp";
            uint64_t v105 = (double *)"_MergeValueFn";
            uint64_t v106 = 226;
            uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToke"
                   "n &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, st"
                   "d::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
            char v108 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcLayer->HasField(srcPath, field, &srcFPS)", 0);
          }
          uint64_t v66 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
          if ((sub_216D037E0(v66, a7, a2, (uint64_t (**)(void, uint64_t))&v97) & 1) == 0)
          {
            double v104 = "usdUtils/stitch.cpp";
            uint64_t v105 = (double *)"_MergeValueFn";
            uint64_t v106 = 227;
            uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToke"
                   "n &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, st"
                   "d::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
            char v108 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstFPS)", 0);
          }
          if (v100 != v97)
          {
            double v104 = "usdUtils/stitch.cpp";
            uint64_t v105 = (double *)"_MergeValueFn";
            uint64_t v106 = 232;
            uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToke"
                   "n &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, st"
                   "d::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
            char v108 = 0;
            uint64_t v67 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
            uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v67);
            if (*(char *)(Identifier + 23) >= 0) {
              uint64_t v69 = Identifier;
            }
            else {
              uint64_t v69 = *(void *)Identifier;
            }
            BOOL v70 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
            uint64_t v71 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v70);
            if (*(char *)(v71 + 23) >= 0) {
              uint64_t v73 = v71;
            }
            else {
              uint64_t v73 = *(void *)v71;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v104, (pxrInternal__aapl__pxrReserved__ *)"Mismatched framesPerSecond values in @%s@ and @%s@", v72, v69, v73);
          }
        }
        else
        {
          uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v25) {
            uint64_t v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 55) & 0xFFFFFFFFFFFFFFF8))
          {
            double v100 = 0.0;
            double v97 = 0.0;
            unint64_t v74 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
            if ((sub_216D037E0(v74, a4, a2, (uint64_t (**)(void, uint64_t))&v100) & 1) == 0)
            {
              double v104 = "usdUtils/stitch.cpp";
              uint64_t v105 = (double *)"_MergeValueFn";
              uint64_t v106 = 238;
              uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              char v108 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcLayer->HasField(srcPath, field, &srcTPS)", 0);
            }
            uint64_t v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
            if ((sub_216D037E0(v75, a7, a2, (uint64_t (**)(void, uint64_t))&v97) & 1) == 0)
            {
              double v104 = "usdUtils/stitch.cpp";
              uint64_t v105 = (double *)"_MergeValueFn";
              uint64_t v106 = 239;
              uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              char v108 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstTPS)", 0);
            }
            if (v100 != v97)
            {
              double v104 = "usdUtils/stitch.cpp";
              uint64_t v105 = (double *)"_MergeValueFn";
              uint64_t v106 = 244;
              uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              char v108 = 0;
              uint64_t v76 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
              uint64_t v77 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v76);
              if (*(char *)(v77 + 23) >= 0) {
                uint64_t v78 = v77;
              }
              else {
                uint64_t v78 = *(void *)v77;
              }
              uint64_t v79 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
              uint64_t v80 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v79);
              if (*(char *)(v80 + 23) >= 0) {
                uint64_t v82 = v80;
              }
              else {
                uint64_t v82 = *(void *)v80;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v104, (pxrInternal__aapl__pxrReserved__ *)"Mismatched timeCodesPerSecond values in @%s@ and @%s@", v81, v78, v82);
            }
          }
          else
          {
            long long v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v26) {
              long long v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v26 + 20) & 0xFFFFFFFFFFFFFFF8))
            {
              char v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
              Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v27);
              Fallback = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, a2);
              sub_2168EE4C4(&v104, Fallback);
              if (sub_21706499C(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104, a6, a7, a3, a4, a9)
                || sub_217064C54(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104, a6, a7, a3, a4, a9)
                || (sub_217064F00((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_21706559C((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_217065C38((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_2170662D4((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_217066988((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_21706703C((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_2170676F0((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0
                || (sub_217067DA4((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104) & 1) != 0)
              {
                char v10 = 1;
              }
              else
              {
                char v10 = sub_217068458((uint64_t)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v104);
              }
              sub_2168EE084((uint64_t)&v104);
              return v10 & 1;
            }
            double v100 = 0.0;
            double v97 = 0.0;
            uint64_t v83 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
            if ((sub_216D037E0(v83, a4, a2, (uint64_t (**)(void, uint64_t))&v100) & 1) == 0)
            {
              double v104 = "usdUtils/stitch.cpp";
              uint64_t v105 = (double *)"_MergeValueFn";
              uint64_t v106 = 250;
              uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              char v108 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcLayer->HasField(srcPath, field, &srcPrecision)", 0);
            }
            size_t v84 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
            if ((sub_216D037E0(v84, a7, a2, (uint64_t (**)(void, uint64_t))&v97) & 1) == 0)
            {
              double v104 = "usdUtils/stitch.cpp";
              uint64_t v105 = (double *)"_MergeValueFn";
              uint64_t v106 = 251;
              uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              char v108 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstPrecision)", 0);
            }
            if (v100 != v97)
            {
              double v104 = "usdUtils/stitch.cpp";
              uint64_t v105 = (double *)"_MergeValueFn";
              uint64_t v106 = 256;
              uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfTo"
                     "ken &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL"
                     ", std::optional<VtValue> *, const UsdUtilsStitchValueFn &)";
              char v108 = 0;
              uint64_t v85 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
              uint64_t v86 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v85);
              if (*(char *)(v86 + 23) >= 0) {
                uint64_t v87 = v86;
              }
              else {
                uint64_t v87 = *(void *)v86;
              }
              uint64_t v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
              uint64_t v89 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v88);
              if (*(char *)(v89 + 23) >= 0) {
                uint64_t v91 = v89;
              }
              else {
                uint64_t v91 = *(void *)v89;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v104, (pxrInternal__aapl__pxrReserved__ *)"Mismatched framePrecision values in @%s@ and @%s@", v90, v87, v91);
            }
          }
        }
        char v10 = 0;
        return v10 & 1;
      }
      double v100 = 0.0;
      double v97 = 0.0;
      uint64_t v58 = (void *)sub_2169791E0(a3);
      uint64_t v59 = MEMORY[0x263F8C240];
      uint64_t v105 = &v100;
      uint64_t v106 = MEMORY[0x263F8C240];
      LOWORD(v107) = 0;
      double v104 = (char *)&unk_26C75DC08;
      char v60 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v58, a4, a2, (uint64_t (***)(void, uint64_t))&v104);
      if ((_BYTE)v107) {
        char v61 = 0;
      }
      else {
        char v61 = v60;
      }
      if ((v61 & 1) == 0)
      {
        double v104 = "usdUtils/stitch.cpp";
        uint64_t v105 = (double *)"_MergeValueFn";
        uint64_t v106 = 216;
        uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &,"
               " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optio"
               "nal<VtValue> *, const UsdUtilsStitchValueFn &)";
        char v108 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "srcLayer->HasField(srcPath, field, &srcEndCode)", 0);
      }
      long long v62 = (void *)sub_2169791E0(a6);
      uint64_t v105 = &v97;
      uint64_t v106 = v59;
      LOWORD(v107) = 0;
      double v104 = (char *)&unk_26C75DC08;
      char v63 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v62, a7, a2, (uint64_t (***)(void, uint64_t))&v104);
      if ((_BYTE)v107) {
        char v64 = 0;
      }
      else {
        char v64 = v63;
      }
      if ((v64 & 1) == 0)
      {
        double v104 = "usdUtils/stitch.cpp";
        uint64_t v105 = (double *)"_MergeValueFn";
        uint64_t v106 = 217;
        uint64_t v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValueFn(SdfSpecType, const TfToken &,"
               " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optio"
               "nal<VtValue> *, const UsdUtilsStitchValueFn &)";
        char v108 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v104, "dstLayer->HasField(dstPath, field, &dstEndCode)", 0);
      }
      *(double *)&double v57 = v100;
      uint64_t v105 = (double *)&unk_26C750B03;
      if (v100 < v97) {
        *(double *)&double v57 = v97;
      }
    }
    double v104 = (char *)v57;
    sub_216A98A0C((uint64_t)a9, &v104);
LABEL_99:
    sub_2168EE084((uint64_t)&v104);
    char v10 = 1;
    return v10 & 1;
  }
  double v98 = 0;
  uint64_t v99 = 0;
  double v97 = COERCE_DOUBLE(&v98);
  uint64_t v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath((uint64_t *)&v104, v37, a4);
  uint64_t v38 = v104;
  if (v104 != (char *)&v105)
  {
    do
    {
      double v96 = (uint64_t (*)(void, uint64_t))*((void *)v38 + 4);
      long long v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a6);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v39, a7, *(double *)&v96, 0) & 1) == 0)
      {
        uint64_t v101 = 0;
        uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
        pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v40, a4, *(double *)&v96, (pxrInternal__aapl__pxrReserved__::VtValue *)&v100);
        v103[0] = (uint64_t *)&v96;
        uint64_t v41 = sub_216A9E780((uint64_t **)&v97, (double *)&v96, (uint64_t)&unk_2174BFD90, v103);
        sub_21697DC0C(v41 + 5, &v100);
        sub_2168EE084((uint64_t)&v100);
      }
      uint64_t v42 = (double *)*((void *)v38 + 1);
      if (v42)
      {
        do
        {
          uint64_t v43 = (double **)v42;
          uint64_t v42 = *(double **)v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (double **)*((void *)v38 + 2);
          BOOL v44 = *v43 == (double *)v38;
          uint64_t v38 = (char *)v43;
        }
        while (!v44);
      }
      uint64_t v38 = (char *)v43;
    }
    while (v43 != &v105);
  }
  sub_2167FB780((uint64_t)&v104, v105);
  char v10 = v99 != 0;
  if (v99)
  {
    sub_216997AE0((uint64_t *)&v93, (uint64_t)&v97);
    double v102 = 0;
    std::string v45 = operator new(0x20uLL);
    uint64_t v46 = (uint64_t)v93;
    uint64_t v47 = v94;
    void *v45 = &unk_26C771490;
    v45[1] = v46;
    v45[2] = v47;
    uint64_t v48 = v45 + 2;
    uint64_t v49 = v95;
    v45[3] = v95;
    if (v49)
    {
      v47[2] = v48;
      uint64_t v93 = &v94;
      unint64_t v94 = 0;
      uint64_t v95 = 0;
    }
    else
    {
      v45[1] = v48;
    }
    double v102 = v45;
    sub_217068D68((uint64_t)&v104, (uint64_t)&v100);
    v103[1] = (uint64_t *)&off_26C771510;
    sub_217069024((unsigned int **)v103, (uint64_t)&v104);
    sub_216A98A0C((uint64_t)a9, v103);
    sub_2168EE084((uint64_t)v103);
    sub_21706908C(&v104);
    sub_21706908C(&v100);
    sub_216997EC4((uint64_t)&v93, v94);
  }
  sub_216997EC4((uint64_t)&v97, v98);
  return v10 & 1;
}

void sub_217063DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_217063EB0()
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  void v3[4] = *MEMORY[0x263EF8340];
  uint64_t v3[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(a1, a2, (uint64_t)v3);
  return sub_21706B74C(v3);
}

void sub_217063F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21706B74C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, uint64_t a3)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v10[0] = &unk_26C771610;
  v10[1] = sub_217062F44;
  v10[2] = a3;
  void v10[3] = v10;
  v9[0] = &unk_26C7716B8;
  v9[1] = sub_217064050;
  void v9[3] = v9;
  pxrInternal__aapl__pxrReserved__::SdfCopySpec(a2, v6, (uint64_t *)a1, v7, (int *)v10, (const char *)v9);
  sub_21706BA64(v9);
  return sub_21706B8DC(v10);
}

void sub_217064034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_21706BA64((uint64_t *)va);
  sub_21706B8DC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_217064050(const pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a4;
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (a4 && a7)
  {
    int v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v16);
    Fallback = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, a1);
    int v19 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2168EE4C4(v73, Fallback);
    if (sub_21697BFBC(v19))
    {
      BOOL v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      uint64_t v67 = 0;
      BOOL v68 = 0;
      uint64_t v69 = 0;
      unint64_t v20 = (void *)sub_2169791E0(a2);
      uint64_t v75 = &v70;
      uint64_t v76 = &stru_26C74C2D0;
      __int16 v77 = 0;
      p_p = (void **)&unk_26C759208;
      char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v20, a3, a1, (uint64_t (***)(void, uint64_t))&p_p);
      if ((_BYTE)v77) {
        char v22 = 0;
      }
      else {
        char v22 = HasField;
      }
      if ((v22 & 1) != 0
        || (long long v62 = "usdUtils/stitch.cpp",
            char v63 = "_MergeChildren",
            unint64_t v64 = 315,
            uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const Vt"
                  "Value &, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::option"
                  "al<VtValue> *, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>]",
            char v66 = 0,
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "srcLayer->HasField(srcPath, field, &srcChildren)", 0)))
      {
        long long v23 = (void *)sub_2169791E0(a5);
        uint64_t v75 = &v67;
        uint64_t v76 = &stru_26C74C2D0;
        __int16 v77 = 0;
        p_p = (void **)&unk_26C759208;
        char v24 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v23, a6, a1, (uint64_t (***)(void, uint64_t))&p_p);
        char v25 = (_BYTE)v77 ? 0 : v24;
        if ((v25 & 1) != 0
          || (long long __p = "usdUtils/stitch.cpp",
              uint64_t v58 = "_MergeChildren",
              unint64_t v59 = 316,
              char v60 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const "
                    "VtValue &, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::op"
                    "tional<VtValue> *, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>]",
              char v61 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "dstLayer->HasField(dstPath, field, &dstChildren)", 0) & 1) != 0))
        {
          sub_216AFE5A8(&v62, v68 - v67);
          long long __p = 0;
          uint64_t v58 = 0;
          unint64_t v59 = 0;
          sub_21698FA28(&__p, v67, v68, v68 - v67);
          long long v26 = v70;
          for (long long i = v71; v26 != i; ++v26)
          {
            if (__p == v58)
            {
              uint64_t v28 = (char *)__p;
            }
            else
            {
              uint64_t v28 = (char *)__p;
              while ((*(void *)v28 & 0xFFFFFFFFFFFFFFF8) != (*v26 & 0xFFFFFFFFFFFFFFF8))
              {
                v28 += 8;
                if (v28 == v58)
                {
                  uint64_t v28 = v58;
                  break;
                }
              }
            }
            if (v28 == v58)
            {
              long long v29 = v63;
              if ((unint64_t)v63 >= v64)
              {
                uint64_t v31 = sub_216973984(&v62, v26);
              }
              else
              {
                uint64_t v30 = *v26;
                *(void *)char v63 = *v26;
                if ((v30 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  *(void *)v29 &= 0xFFFFFFFFFFFFFFF8;
                }
                uint64_t v31 = v29 + 8;
              }
              char v63 = v31;
              char v32 = v58;
              if ((unint64_t)v58 >= v59)
              {
                char v34 = sub_216973984((char **)&__p, v26);
              }
              else
              {
                uint64_t v33 = *v26;
                *(void *)uint64_t v58 = *v26;
                if ((v33 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  *(void *)v32 &= 0xFFFFFFFFFFFFFFF8;
                }
                char v34 = v32 + 8;
              }
              uint64_t v58 = v34;
            }
            else
            {
              sub_2168D2318(&v62[8 * ((v28 - (unsigned char *)__p) >> 3)], v26);
            }
          }
          sub_21706B708((uint64_t **)&v62, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
          sub_216A98A0C(a8, &p_p);
          sub_2168EE084((uint64_t)&p_p);
          sub_21706B708((uint64_t **)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
          sub_216A98A0C(a9, &p_p);
          char v35 = (void ***)sub_2168EE084((uint64_t)&p_p);
          p_p = &__p;
          sub_216889A04(v35);
          long long __p = &v62;
          sub_216889A04((void ***)&__p);
          long long v62 = (char *)&v67;
          sub_216889A04((void ***)&v62);
          long long v62 = (char *)&v70;
          sub_216889A04((void ***)&v62);
          goto LABEL_68;
        }
      }
      long long v62 = (char *)&v67;
      sub_216889A04((void ***)&v62);
      long long v62 = (char *)&v70;
      sub_216889A04((void ***)&v62);
    }
    if (!sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)v73))
    {
LABEL_73:
      long long v62 = "usdUtils/stitch.cpp";
      char v63 = "_MergeChildrenFn";
      unint64_t v64 = 376;
      uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildrenFn(const TfToken &, const SdfLay"
            "erHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, std::optional<VtValue> *, "
            "std::optional<VtValue> *)";
      char v66 = 0;
      unint64_t v53 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v53)
      {
        uint64_t v54 = (const char *)(v53 + 16);
        if (*(char *)(v53 + 39) < 0) {
          uint64_t v54 = *(const char **)v54;
        }
      }
      else
      {
        uint64_t v54 = "";
      }
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v73, v36, v37, (uint64_t)&__p);
      if ((v59 & 0x8000000000000000) == 0) {
        char v55 = (const char *)&__p;
      }
      else {
        char v55 = (const char *)__p;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v62, 1, (pxrInternal__aapl__pxrReserved__ *)"Children field '%s' holding unexpected type '%s'", v54, v55);
      if (SHIBYTE(v59) < 0) {
        operator delete(__p);
      }
      uint64_t v9 = 0;
      goto LABEL_83;
    }
    BOOL v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v67 = 0;
    BOOL v68 = 0;
    uint64_t v69 = 0;
    uint64_t v38 = (void *)sub_2169791E0(a2);
    uint64_t v75 = &v70;
    uint64_t v76 = &stru_26C756E40;
    __int16 v77 = 0;
    p_p = (void **)&unk_26C758568;
    char v39 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v38, a3, a1, (uint64_t (***)(void, uint64_t))&p_p);
    if ((_BYTE)v77) {
      char v40 = 0;
    }
    else {
      char v40 = v39;
    }
    if ((v40 & 1) == 0)
    {
      long long v62 = "usdUtils/stitch.cpp";
      char v63 = "_MergeChildren";
      unint64_t v64 = 315;
      uint64_t v65 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const VtValue "
            "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> "
            "*, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>]";
      char v66 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "srcLayer->HasField(srcPath, field, &srcChildren)", 0))goto LABEL_72; {
    }
      }
    uint64_t v41 = (void *)sub_2169791E0(a5);
    uint64_t v75 = &v67;
    uint64_t v76 = &stru_26C756E40;
    __int16 v77 = 0;
    p_p = (void **)&unk_26C758568;
    char v42 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v41, a6, a1, (uint64_t (***)(void, uint64_t))&p_p);
    char v43 = (_BYTE)v77 ? 0 : v42;
    if ((v43 & 1) == 0)
    {
      long long __p = "usdUtils/stitch.cpp";
      uint64_t v58 = "_MergeChildren";
      unint64_t v59 = 316;
      char v60 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeChildren(const TfToken &, const VtValue "
            "&, const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> "
            "*, std::optional<VtValue> *) [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>]";
      char v61 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "dstLayer->HasField(dstPath, field, &dstChildren)", 0) & 1) == 0)
      {
LABEL_72:
        long long v62 = (char *)&v67;
        sub_216981168((void ***)&v62);
        long long v62 = (char *)&v70;
        sub_216981168((void ***)&v62);
        goto LABEL_73;
      }
    }
    sub_2169C4410(&v62, v68 - v67);
    long long __p = 0;
    uint64_t v58 = 0;
    unint64_t v59 = 0;
    sub_216980EEC(&__p, v67, v68, v68 - v67);
    BOOL v44 = v70;
    std::string v45 = v71;
    while (v44 != v45)
    {
      if (__p == v58)
      {
        uint64_t v46 = (char *)__p;
      }
      else
      {
        uint64_t v46 = (char *)__p;
        while (*(void *)v46 != *v44)
        {
          v46 += 8;
          if (v46 == v58)
          {
            uint64_t v46 = v58;
            break;
          }
        }
      }
      if (v46 == v58)
      {
        uint64_t v48 = v63;
        if ((unint64_t)v63 >= v64)
        {
          uint64_t v49 = (char *)sub_216981B30((uint64_t *)&v62, v44);
        }
        else
        {
          sub_216981010(v63, v44);
          sub_21698105C((_DWORD *)v48 + 1, (_DWORD *)v44 + 1);
          uint64_t v49 = v48 + 8;
        }
        char v63 = v49;
        long long v50 = v58;
        if ((unint64_t)v58 >= v59)
        {
          uint64_t v51 = (char *)sub_216981B30((uint64_t *)&__p, v44);
        }
        else
        {
          sub_216981010(v58, v44);
          sub_21698105C((_DWORD *)v50 + 1, (_DWORD *)v44 + 1);
          uint64_t v51 = v50 + 8;
        }
        uint64_t v58 = v51;
      }
      else
      {
        uint64_t v47 = (int *)&v62[8 * ((v46 - (unsigned char *)__p) >> 3)];
        sub_2169C487C(v47, v44);
        sub_2169C48D4(v47 + 1, (_DWORD *)v44 + 1);
      }
      ++v44;
    }
    sub_216A93324((uint64_t *)&v62, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    sub_216A98A0C(a8, &p_p);
    sub_2168EE084((uint64_t)&p_p);
    sub_216A93324((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
    sub_216A98A0C(a9, &p_p);
    char v52 = (void ***)sub_2168EE084((uint64_t)&p_p);
    p_p = &__p;
    sub_216981168(v52);
    long long __p = &v62;
    sub_216981168((void ***)&__p);
    long long v62 = (char *)&v67;
    sub_216981168((void ***)&v62);
    long long v62 = (char *)&v70;
    sub_216981168((void ***)&v62);
LABEL_68:
    uint64_t v9 = 1;
LABEL_83:
    sub_2168EE084((uint64_t)v73);
  }
  return v9;
}

void sub_217064800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t *a30)
{
  a30 = (uint64_t *)&a24;
  sub_216981168((void ***)&a30);
  a24 = &a27;
  sub_216981168((void ***)&a24);
  sub_2168EE084(v30 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_217064938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  char v12 = a5;
  char v11 = a7;
  uint64_t v10 = a8;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t *))(*(void *)v8 + 48))(v8, a2, a3, a4, &v12, a6, &v11, &v10);
}

BOOL sub_21706499C(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, void *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!sub_2168EC434(a2)) {
    return 0;
  }
  unint64_t v21 = 0;
  char v22 = 0;
  int v13 = (void *)sub_2169791E0(a3);
  char v24 = &v22;
  char v25 = &stru_26C74DD70;
  __int16 v26 = 0;
  long long v23 = (uint64_t (**)(void, uint64_t))&unk_26C75E9C0;
  char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, &v23);
  if ((_BYTE)v26) {
    char v15 = 0;
  }
  else {
    char v15 = HasField;
  }
  if ((v15 & 1) == 0)
  {
    char v32 = "usdUtils/stitch.cpp";
    uint64_t v33 = "_MergeValue";
    uint64_t v34 = 117;
    char v35 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " pxrInternal__aapl__pxrReserved__::VtDictionary]";
    char v36 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v32, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_19; {
  }
    }
  int v16 = (void *)sub_2169791E0(a5);
  char v24 = &v21;
  char v25 = &stru_26C74DD70;
  __int16 v26 = 0;
  long long v23 = (uint64_t (**)(void, uint64_t))&unk_26C75E9C0;
  char v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, &v23);
  char v18 = (_BYTE)v26 ? 0 : v17;
  if ((v18 & 1) != 0
    || (char v27 = "usdUtils/stitch.cpp",
        uint64_t v28 = "_MergeValue",
        uint64_t v29 = 118,
        uint64_t v30 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = pxrInternal__aapl__pxrReserved__::VtDictionary]",
        char v31 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((const void ****)&v22, (const char **)&v21, 0, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v27);
    uint64_t v33 = (const char *)&off_26C74DD80;
    sub_2168EEEA8((unsigned int **)&v32, (const void ****)&v27);
    sub_2168EBBB8((void ***)&v27, 0);
    BOOL v19 = v33 != 0;
    if (v33)
    {
      uint64_t v28 = 0;
      sub_216A98A0C((uint64_t)a7, &v27);
      sub_2168EE084((uint64_t)&v27);
      sub_21697DC0C(a7, &v32);
    }
    sub_2168EE084((uint64_t)&v32);
  }
  else
  {
LABEL_19:
    BOOL v19 = 0;
  }
  sub_2168EBBB8(&v21, 0);
  sub_2168EBBB8(&v22, 0);
  return v19;
}

void sub_217064BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  sub_2168EBBB8((void ***)va, 0);
  sub_2168EBBB8((void ***)va1, 0);
  _Unwind_Resume(a1);
}

BOOL sub_217064C54(const pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, void *a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!sub_2169DBB2C(a2)) {
    return 0;
  }
  v24[0] = 0;
  v24[1] = 0;
  v22[1] = 0;
  long long v23 = v24;
  unint64_t v21 = (const void **)v22;
  v22[0] = 0;
  int v13 = (void *)sub_2169791E0(a3);
  __int16 v26 = (const void ***)&v23;
  char v27 = &stru_26C756CC0;
  __int16 v28 = 0;
  char v25 = (uint64_t (**)(void, uint64_t))&unk_26C75C2E8;
  char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v13, a4, a1, &v25);
  if ((_BYTE)v28) {
    char v15 = 0;
  }
  else {
    char v15 = HasField;
  }
  if ((v15 & 1) == 0)
  {
    uint64_t v34 = "usdUtils/stitch.cpp";
    char v35 = "_MergeValue";
    uint64_t v36 = 117;
    uint64_t v37 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &, co"
          "nst SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue> *) [T ="
          " std::map<std::string, std::string>]";
    char v38 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "srcLayer->HasField(srcPath, field, &srcValue)", 0))goto LABEL_19; {
  }
    }
  int v16 = (void *)sub_2169791E0(a5);
  __int16 v26 = &v21;
  char v27 = &stru_26C756CC0;
  __int16 v28 = 0;
  char v25 = (uint64_t (**)(void, uint64_t))&unk_26C75C2E8;
  char v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v16, a6, a1, &v25);
  char v18 = (_BYTE)v28 ? 0 : v17;
  if ((v18 & 1) != 0
    || (uint64_t v29 = "usdUtils/stitch.cpp",
        uint64_t v30 = "_MergeValue",
        uint64_t v31 = 118,
        char v32 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_MergeValue(const TfToken &, const VtValue &"
              ", const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle &, const SdfPath &, std::optional<VtValue>"
              " *) [T = std::map<std::string, std::string>]",
        char v33 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v29, "dstLayer->HasField(dstPath, field, &dstValue)", 0) & 1) != 0))
  {
    sub_216789928((uint64_t *)&v23, v21, v22);
    sub_217069110((uint64_t)&v23, (pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
    BOOL v19 = v35 != 0;
    if (v35)
    {
      uint64_t v30 = 0;
      sub_216A98A0C((uint64_t)a7, &v29);
      sub_2168EE084((uint64_t)&v29);
      sub_21697DC0C(a7, &v34);
    }
    sub_2168EE084((uint64_t)&v34);
  }
  else
  {
LABEL_19:
    BOOL v19 = 0;
  }
  sub_2167877AC((uint64_t)&v21, v22[0]);
  sub_2167877AC((uint64_t)&v23, v24[0]);
  return v19;
}

void sub_217064EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
}

uint64_t sub_217064F00(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698F4F4(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
  }
  return 0;
}

void sub_2170654B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

uint64_t sub_21706559C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698F60C(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
  }
  return 0;
}

void sub_217065B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

uint64_t sub_217065C38(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698F698(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
  }
  return 0;
}

void sub_2170661EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

uint64_t sub_2170662D4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698F7B0(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  return 0;
}

void sub_2170668A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t sub_217066988(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698F724(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  }
  return 0;
}

void sub_217066F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t sub_21706703C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_216980CE8(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
  }
  return 0;
}

void sub_217067608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t sub_2170676F0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698E9D8(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
  }
  return 0;
}

void sub_217067CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t sub_217067DA4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698E94C(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
  }
  return 0;
}

void sub_217068370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t sub_217068458(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (sub_21698F468(a2)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp();
  }
  return 0;
}

void sub_217068A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t sub_217068B0C(uint64_t a1)
{
  *(void *)a1 = &unk_26C771490;
  sub_216997EC4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_217068B54(void **a1)
{
  *a1 = &unk_26C771490;
  sub_216997EC4((uint64_t)(a1 + 1), a1[2]);

  operator delete(a1);
}

void *sub_217068BAC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26C771490;
  sub_216997AE0(v2 + 1, v1);
  return v2;
}

void sub_217068C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_217068C14(uint64_t a1, void *a2)
{
  *a2 = &unk_26C771490;
  return sub_216997AE0(a2 + 1, a1 + 8);
}

void sub_217068C40(uint64_t a1)
{
}

void sub_217068C50(void **a1)
{
  sub_216997EC4((uint64_t)(a1 + 1), a1[2]);

  operator delete(a1);
}

void sub_217068C90(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v3 = *(double **)(a1 + 8);
  unint64_t v4 = (double *)(a1 + 16);
  if (v3 != (double *)(a1 + 16))
  {
    do
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(v7, a3, v3[4], (const pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 5));
      uint64_t v8 = (double *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (double *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
}

uint64_t sub_217068D1C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771500)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217068D5C()
{
  return &unk_26C771500;
}

uint64_t sub_217068D68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_217068E00(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_217068E20(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_217068F4C(a1);
}

uint64_t sub_217068E30()
{
  return 0;
}

uint64_t sub_217068E38(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

uint64_t sub_217068E5C()
{
  return 0;
}

uint64_t sub_217068E64()
{
  return 0;
}

uint64_t sub_217068E70()
{
  return 0;
}

void *sub_217068E7C(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&stru_26C7581D0, *a1, a2);
}

void *sub_217068E90()
{
  return &unk_26C7581D0;
}

uint64_t sub_217068E9C()
{
  return 0;
}

uint64_t sub_217068EA4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_217068EB0()
{
  return 0;
}

uint64_t sub_217068EB8()
{
  return 0;
}

BOOL sub_217068EC0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746C193 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_217068EFC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7581D0, a2, a3);
}

void *sub_217068F20()
{
  return &unk_26C7581D0;
}

uint64_t sub_217068F2C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_217068F34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C771510;
  return sub_217069024((unsigned int **)a2, v2);
}

uint64_t *sub_217068F4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = sub_21706908C((void *)v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_217068F98(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 32));
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x28uLL);
    sub_217068D68((uint64_t)v3, *a1);
    atomic_store(0, v3 + 8);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 8, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_217068F4C(&v5);
  }
  return *a1;
}

void sub_217069010(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217069024(unsigned int **a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0x28uLL);
  uint64_t result = sub_217068D68((uint64_t)v4, a2);
  atomic_store(0, v4 + 8);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_217069078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21706908C(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_217069110@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_216CDFB84(a2, a1);
}

void sub_217069140(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_217069154(uint64_t a1)
{
  __s = 0;
  int v16 = 0;
  char v17 = 0;
  if (&__s != (__int32 **)(a1 + 80)) {
    sub_216825D78((char *)&__s, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  }
  unsigned int v2 = *(__int32 **)(a1 + 32);
  uint64_t v3 = *(__int32 **)(a1 + 40);
  if (v2 != v3)
  {
    unint64_t v4 = v16;
    do
    {
      uint64_t v5 = wmemchr(__s, *v2, v4 - __s);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = v4;
      }
      unint64_t v4 = v16;
      if (v6 == v16)
      {
        if (v6 >= v17)
        {
          uint64_t v7 = __s;
          uint64_t v8 = v16 - __s;
          unint64_t v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 62) {
            sub_21677CB10();
          }
          uint64_t v10 = (char *)v17 - (char *)__s;
          if (((char *)v17 - (char *)__s) >> 1 > v9) {
            unint64_t v9 = v10 >> 1;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11)
          {
            char v12 = (char *)sub_21677EA28((uint64_t)&v17, v11);
            uint64_t v7 = __s;
            uint64_t v6 = v16;
          }
          else
          {
            char v12 = 0;
          }
          int v13 = (__int32 *)&v12[4 * v8];
          *int v13 = *v2;
          unint64_t v4 = v13 + 1;
          while (v6 != v7)
          {
            __int32 v14 = *--v6;
            *--int v13 = v14;
          }
          __s = v13;
          int v16 = v4;
          char v17 = (__int32 *)&v12[4 * v11];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *uint64_t v6 = *v2;
          unint64_t v4 = v6 + 1;
        }
        int v16 = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems();
}

void sub_2170693CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_21706940C(unsigned char *a1, uint64_t a2)
{
  if (a1[152] == *(unsigned char *)(a2 + 152))
  {
    if (a1[152])
    {
      *a1 = *(unsigned char *)a2;
      sub_216B08220((uint64_t)(a1 + 8), (__n128 *)(a2 + 8));
      sub_216B08220((uint64_t)(a1 + 32), (__n128 *)(a2 + 32));
      sub_216B08220((uint64_t)(a1 + 56), (__n128 *)(a2 + 56));
      sub_216B08220((uint64_t)(a1 + 80), (__n128 *)(a2 + 80));
      sub_216B08220((uint64_t)(a1 + 104), (__n128 *)(a2 + 104));
      sub_216B08220((uint64_t)(a1 + 128), (__n128 *)(a2 + 128));
    }
  }
  else if (a1[152])
  {
    sub_2170694FC((uint64_t)a1);
  }
  else
  {
    sub_217069588((uint64_t)a1, a2);
    a1[152] = 1;
  }
}

void sub_2170694FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(void *)(a1 + 112) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 88) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a1 + 56);
    if (v5)
    {
      *(void *)(a1 + 64) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      *(void *)(a1 + 40) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(void *)(a1 + 16) = v7;
      operator delete(v7);
    }
    *(unsigned char *)(a1 + 152) = 0;
  }
}

__n128 sub_217069588(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  return result;
}

void sub_217069654(uint64_t a1)
{
  __s = 0;
  int v16 = 0;
  char v17 = 0;
  if (&__s != (__int32 **)(a1 + 80)) {
    sub_216825D78((char *)&__s, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  }
  unsigned int v2 = *(__int32 **)(a1 + 32);
  uint64_t v3 = *(__int32 **)(a1 + 40);
  if (v2 != v3)
  {
    unint64_t v4 = v16;
    do
    {
      uint64_t v5 = wmemchr(__s, *v2, v4 - __s);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = v4;
      }
      unint64_t v4 = v16;
      if (v6 == v16)
      {
        if (v6 >= v17)
        {
          uint64_t v7 = __s;
          uint64_t v8 = v16 - __s;
          unint64_t v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 62) {
            sub_21677CB10();
          }
          uint64_t v10 = (char *)v17 - (char *)__s;
          if (((char *)v17 - (char *)__s) >> 1 > v9) {
            unint64_t v9 = v10 >> 1;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11)
          {
            char v12 = (char *)sub_21677EA28((uint64_t)&v17, v11);
            uint64_t v7 = __s;
            uint64_t v6 = v16;
          }
          else
          {
            char v12 = 0;
          }
          int v13 = (__int32 *)&v12[4 * v8];
          *int v13 = *v2;
          unint64_t v4 = v13 + 1;
          while (v6 != v7)
          {
            __int32 v14 = *--v6;
            *--int v13 = v14;
          }
          __s = v13;
          int v16 = v4;
          char v17 = (__int32 *)&v12[4 * v11];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *uint64_t v6 = *v2;
          unint64_t v4 = v6 + 1;
        }
        int v16 = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems();
}

void sub_2170698CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_21706990C(uint64_t a1)
{
  long long __p = 0;
  int v16 = 0;
  char v17 = 0;
  if (&__p != (void **)(a1 + 80)) {
    sub_21677CC7C((char *)&__p, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  }
  unsigned int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v2 != v3)
  {
    unint64_t v4 = v16;
    do
    {
      uint64_t v5 = (char *)__p;
      uint64_t v6 = v4;
      if (__p != v4)
      {
        uint64_t v6 = (char *)__p;
        do
        {
          if (*(void *)v6 == *v2) {
            goto LABEL_10;
          }
          v6 += 8;
        }
        while (v6 != v4);
        uint64_t v6 = v4;
      }
LABEL_10:
      if (v6 == v4)
      {
        if (v4 >= v17)
        {
          uint64_t v8 = (v4 - (unsigned char *)__p) >> 3;
          unint64_t v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v10 = v17 - (unsigned char *)__p;
          if ((v17 - (unsigned char *)__p) >> 2 > v9) {
            unint64_t v9 = v10 >> 2;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11)
          {
            char v12 = (char *)sub_21677CB28((uint64_t)&v17, v11);
            uint64_t v5 = (char *)__p;
            unint64_t v4 = v16;
          }
          else
          {
            char v12 = 0;
          }
          int v13 = &v12[8 * v8];
          *(void *)int v13 = *v2;
          uint64_t v7 = v13 + 8;
          while (v4 != v5)
          {
            uint64_t v14 = *((void *)v4 - 1);
            v4 -= 8;
            *((void *)v13 - 1) = v14;
            v13 -= 8;
          }
          long long __p = v13;
          int v16 = v7;
          char v17 = &v12[8 * v11];
          if (v5) {
            operator delete(v5);
          }
        }
        else
        {
          *(void *)unint64_t v4 = *v2;
          uint64_t v7 = v4 + 8;
        }
        int v16 = v7;
        unint64_t v4 = v7;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems();
}

void sub_217069B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_217069BD8(uint64_t **a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  if (&v7 != (char **)(a1 + 10)) {
    sub_216ABF1B0(&v7, a1[10], a1[11], a1[11] - a1[10]);
  }
  unsigned int v2 = a1[4];
  uint64_t v3 = a1[5];
  if (v2 != v3)
  {
    unint64_t v4 = v8;
    do
    {
      uint64_t v5 = v4;
      if (v7 != v4)
      {
        uint64_t v5 = v7;
        do
        {
          if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) == (*v2 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_10;
          }
          v5 += 8;
        }
        while (v5 != v4);
        uint64_t v5 = v4;
      }
LABEL_10:
      if (v5 == v4)
      {
        if ((unint64_t)v4 >= v9)
        {
          unint64_t v4 = sub_216973984(&v7, v2);
        }
        else
        {
          uint64_t v6 = *v2;
          *(void *)unint64_t v4 = *v2;
          if ((v6 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)v4 &= 0xFFFFFFFFFFFFFFF8;
          }
          v4 += 8;
        }
        uint64_t v8 = v4;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems();
}

void sub_217069DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216889A04((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_217069E2C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      sub_216A698A4((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      sub_216A698A4((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      sub_216A698A4((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      sub_216A698A4((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      sub_216A698A4((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      sub_216A698A4((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    sub_217069F68(a1);
  }
  else
  {
    sub_217069588(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_217069F68(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = (void **)(a1 + 128);
    sub_216889A04(&v2);
    unsigned int v2 = (void **)(a1 + 104);
    sub_216889A04(&v2);
    unsigned int v2 = (void **)(a1 + 80);
    sub_216889A04(&v2);
    unsigned int v2 = (void **)(a1 + 56);
    sub_216889A04(&v2);
    unsigned int v2 = (void **)(a1 + 32);
    sub_216889A04(&v2);
    unsigned int v2 = (void **)(a1 + 8);
    sub_216889A04(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

void sub_217069FFC(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  if (&v8 != (uint64_t *)(a1 + 80)) {
    sub_21680F694((uint64_t)&v8, *(std::string **)(a1 + 80), *(long long **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  }
  unsigned int v2 = *(long long **)(a1 + 32);
  uint64_t v3 = *(long long **)(a1 + 40);
  if (v2 != v3)
  {
    uint64_t v4 = v9;
    do
    {
      unint64_t v5 = sub_2169CAFD0(v8, v4, (unsigned __int8 **)v2);
      uint64_t v4 = v9;
      if (v5 == v9)
      {
        unint64_t v6 = v5;
        if (v5 >= v10)
        {
          uint64_t v4 = sub_2167E9A44(&v8, v2);
        }
        else
        {
          if (*((char *)v2 + 23) < 0)
          {
            sub_216778F24((unsigned char *)v5, *(void **)v2, *((void *)v2 + 1));
          }
          else
          {
            long long v7 = *v2;
            *(void *)(v5 + 16) = *((void *)v2 + 2);
            *(_OWORD *)unint64_t v5 = v7;
          }
          uint64_t v4 = v6 + 24;
        }
        uint64_t v9 = v4;
      }
      unsigned int v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems();
}

void sub_21706A200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216782F20((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21706A244(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      sub_21680F80C((uint64_t *)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      sub_21680F80C((uint64_t *)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      sub_21680F80C((uint64_t *)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      sub_21680F80C((uint64_t *)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      sub_21680F80C((uint64_t *)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      sub_21680F80C((uint64_t *)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    sub_21706A380(a1);
  }
  else
  {
    sub_217069588(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_21706A380(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = (void **)(a1 + 128);
    sub_216782F20(&v2);
    unsigned int v2 = (void **)(a1 + 104);
    sub_216782F20(&v2);
    unsigned int v2 = (void **)(a1 + 80);
    sub_216782F20(&v2);
    unsigned int v2 = (void **)(a1 + 56);
    sub_216782F20(&v2);
    unsigned int v2 = (void **)(a1 + 32);
    sub_216782F20(&v2);
    unsigned int v2 = (void **)(a1 + 8);
    sub_216782F20(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

void sub_21706A414(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  if (&v6 != (void **)(a1 + 80)) {
    sub_216A98D9C((uint64_t)&v6, *(_DWORD **)(a1 + 80), *(_DWORD **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  }
  unsigned int v2 = *(_DWORD **)(a1 + 32);
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  if (v2 != v3)
  {
    uint64_t v4 = v7;
    do
    {
      uint64_t v5 = v4;
      if (v6 != (void *)v4)
      {
        uint64_t v5 = v6;
        do
        {
          if (*v5 == *(void *)v2) {
            goto LABEL_10;
          }
          ++v5;
        }
        while (v5 != (void *)v4);
        uint64_t v5 = v4;
      }
LABEL_10:
      if (v5 == (void *)v4)
      {
        if ((unint64_t)v4 >= v8)
        {
          uint64_t v4 = (_DWORD *)sub_216981B30((uint64_t *)&v6, v2);
        }
        else
        {
          sub_216981010(v4, v2);
          sub_21698105C(v4 + 1, v2 + 1);
          v4 += 2;
        }
        uint64_t v7 = v4;
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems();
}

void sub_21706A618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216981168((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21706A650(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      sub_216981200((void *)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      sub_216981200((void *)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      sub_216981200((void *)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      sub_216981200((void *)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      sub_216981200((void *)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      sub_216981200((void *)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    sub_21706A78C(a1);
  }
  else
  {
    sub_217069588(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_21706A78C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = (void **)(a1 + 128);
    sub_216981168(&v2);
    unsigned int v2 = (void **)(a1 + 104);
    sub_216981168(&v2);
    unsigned int v2 = (void **)(a1 + 80);
    sub_216981168(&v2);
    unsigned int v2 = (void **)(a1 + 56);
    sub_216981168(&v2);
    unsigned int v2 = (void **)(a1 + 32);
    sub_216981168(&v2);
    unsigned int v2 = (void **)(a1 + 8);
    sub_216981168(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

void sub_21706A820(uint64_t a1)
{
  uint64_t v6 = 0;
  std::string __dst = 0;
  unint64_t v8 = 0;
  if (&v6 != (unsigned __int8 **)(a1 + 80)) {
    sub_216A993D8((uint64_t)&v6, *(long long **)(a1 + 80), *(long long **)(a1 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
  }
  unsigned int v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 40);
  if (v2 != v3)
  {
    uint64_t v4 = (char *)__dst;
    do
    {
      uint64_t v5 = v6;
      if (v6 == (unsigned __int8 *)v4)
      {
        uint64_t v5 = (unsigned __int8 *)v4;
      }
      else
      {
        do
        {
          if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v5, v2)) {
            goto LABEL_9;
          }
          v5 += 56;
        }
        while (v5 != (unsigned __int8 *)v4);
        uint64_t v5 = (unsigned __int8 *)v4;
LABEL_9:
        uint64_t v4 = (char *)__dst;
      }
      if (v5 == (unsigned __int8 *)v4)
      {
        if ((unint64_t)v4 >= v8)
        {
          uint64_t v4 = (char *)sub_216AE6EA0((uint64_t *)&v6, (long long *)v2);
        }
        else
        {
          sub_2169D5338(v4, (long long *)v2);
          v4 += 56;
        }
        std::string __dst = v4;
      }
      v2 += 56;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems();
}

void sub_21706AA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_2169CC68C((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21706AA78(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      sub_216A9957C((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      sub_216A9957C((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      sub_216A9957C((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      sub_216A9957C((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      sub_216A9957C((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      sub_216A9957C((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    sub_21706ABB4(a1);
  }
  else
  {
    sub_217069588(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_21706ABB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = (void **)(a1 + 128);
    sub_2169CC68C(&v2);
    unsigned int v2 = (void **)(a1 + 104);
    sub_2169CC68C(&v2);
    unsigned int v2 = (void **)(a1 + 80);
    sub_2169CC68C(&v2);
    unsigned int v2 = (void **)(a1 + 56);
    sub_2169CC68C(&v2);
    unsigned int v2 = (void **)(a1 + 32);
    sub_2169CC68C(&v2);
    unsigned int v2 = (void **)(a1 + 8);
    sub_2169CC68C(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

void sub_21706AC48(uint64_t a1)
{
  uint64_t v6 = 0;
  std::string __dst = 0;
  unint64_t v8 = 0;
  if (&v6 != (__n128 **)(a1 + 80)) {
    sub_216A99C60((uint64_t)&v6, *(std::string **)(a1 + 80), *(std::string **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4));
  }
  unsigned int v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 40);
  if (v2 != v3)
  {
    uint64_t v4 = (__n128 *)__dst;
    do
    {
      uint64_t v5 = (unsigned __int8 *)v6;
      if (v6 == v4)
      {
        uint64_t v5 = (unsigned __int8 *)v4;
      }
      else
      {
        do
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v5, v2)) {
            goto LABEL_9;
          }
          v5 += 48;
        }
        while (v5 != (unsigned __int8 *)v4);
        uint64_t v5 = (unsigned __int8 *)v4;
LABEL_9:
        uint64_t v4 = (__n128 *)__dst;
      }
      if (v5 == (unsigned __int8 *)v4)
      {
        if ((unint64_t)v4 >= v8)
        {
          uint64_t v4 = (__n128 *)sub_216AE9558((uint64_t *)&v6, (uint64_t)v2);
        }
        else
        {
          sub_2169D8390((int)&v8, v4, (uint64_t)v2);
          v4 += 3;
        }
        std::string __dst = v4;
      }
      v2 += 48;
    }
    while (v2 != v3);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems();
}

void sub_21706AE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_2169CC78C((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21706AEAC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      sub_216A99DE4((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      sub_216A99DE4((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      sub_216A99DE4((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      sub_216A99DE4((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      sub_216A99DE4((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      sub_216A99DE4((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    sub_21706AFE8(a1);
  }
  else
  {
    sub_217069588(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_21706AFE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = (void **)(a1 + 128);
    sub_2169CC78C(&v2);
    unsigned int v2 = (void **)(a1 + 104);
    sub_2169CC78C(&v2);
    unsigned int v2 = (void **)(a1 + 80);
    sub_2169CC78C(&v2);
    unsigned int v2 = (void **)(a1 + 56);
    sub_2169CC78C(&v2);
    unsigned int v2 = (void **)(a1 + 32);
    sub_2169CC78C(&v2);
    unsigned int v2 = (void **)(a1 + 8);
    sub_2169CC78C(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

uint64_t sub_21706B07C(uint64_t a1, uint64_t *a2)
{
  if (sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v5 = *a2;
    }
    sub_216CEB044(*(unsigned char **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    uint64_t result = sub_216A5F85C((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (result)
    {
      uint64_t result = 1;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_21706B100(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (sub_21698F468(a2)) {
    sub_21706B2B4();
  }
  uint64_t result = sub_216A5F85C(a2);
  if (result)
  {
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  return result;
}

void sub_21706B2B4()
{
}

void sub_21706B318(_Unwind_Exception *a1)
{
  sub_2169D3664(v1);
  _Unwind_Resume(a1);
}

void sub_21706B32C(void *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (&v7 != a1 + 10) {
    sub_216AE3120((uint64_t)&v7, (void *)a1[10], a1[11], (uint64_t)(a1[11] - a1[10]) >> 4);
  }
  unsigned int v2 = (void *)a1[4];
  uint64_t v3 = (void *)a1[5];
  while (1)
  {
    if (v2 == v3) {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems();
    }
    uint64_t v4 = v7;
    uint64_t v5 = v8;
    if (v7 == v8)
    {
      uint64_t v6 = v7;
    }
    else
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v4, v2)) {
          goto LABEL_9;
        }
        v4 += 16;
      }
      while (v4 != v5);
      uint64_t v4 = v5;
LABEL_9:
      uint64_t v6 = v4;
      uint64_t v4 = v8;
    }
    if (v6 == v4) {
      sub_216AD3B24(&v7, v2);
    }
    v2 += 2;
  }
}

void sub_21706B4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216932118((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216932118((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21706B538(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      sub_216AE329C((void **)(a1 + 8));
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      sub_216AE329C((void **)(a1 + 32));
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      sub_216AE329C((void **)(a1 + 56));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      sub_216AE329C((void **)(a1 + 80));
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      sub_216AE329C((void **)(a1 + 104));
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      sub_216AE329C((void **)(a1 + 128));
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(void *)(a2 + 144) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    sub_21706B674(a1);
  }
  else
  {
    sub_217069588(a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

void sub_21706B674(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    unsigned int v2 = (void **)(a1 + 128);
    sub_216932118(&v2);
    unsigned int v2 = (void **)(a1 + 104);
    sub_216932118(&v2);
    unsigned int v2 = (void **)(a1 + 80);
    sub_216932118(&v2);
    unsigned int v2 = (void **)(a1 + 56);
    sub_216932118(&v2);
    unsigned int v2 = (void **)(a1 + 32);
    sub_216932118(&v2);
    unsigned int v2 = (void **)(a1 + 8);
    sub_216932118(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

uint64_t **sub_21706B708@<X0>(uint64_t **a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  return sub_216AA37C4(a2, a1);
}

void sub_21706B738(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_21706B74C(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_21706B7D8(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26C771610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_21706B824(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C771610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_21706B854(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, void *a10)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, void))(a1 + 8))(*a2, a3, a4, a5, *a6, a7, a8, *a9, *a10, *(void *)(a1 + 16));
}

uint64_t sub_21706B890(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771690)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21706B8D0()
{
  return &unk_26C771690;
}

void *sub_21706B8DC(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_21706B968(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C7716B8;
  result[1] = v3;
  return result;
}

uint64_t sub_21706B9B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C7716B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_21706B9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, void *a9, void *a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void, void, void))(a1 + 8))(a2, a3, a4, *a5, a6, a7, *a8, *a9, *a10);
}

uint64_t sub_21706BA18(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771738)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21706BA58()
{
  return &unk_26C771738;
}

void *sub_21706BA64(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClipsTopology(uint64_t *a1, void *a2)
{
  if (!sub_21706BE2C(a1)) {
    return 0;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v4);
  memset(v21, 0, sizeof(v21));
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  if (!sub_21706BEF8((uint64_t *)v21, a2, v6)) {
    goto LABEL_25;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1[1];
  if (v7)
  {
    if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a1;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  unint64_t v20 = v7;
  sub_2168BD80C((uint64_t *)&v20);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
  uint64_t v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v8);
  uint64_t v10 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v10) {
    uint64_t v10 = (uint64_t *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  sub_21706ED64(v21, v9, v10, (uint64_t)&v26);
  sub_216ABBA60(&v24, (uint64_t *)&v20);
  sub_216ABBA60(&v22, (uint64_t *)&v27);
  sub_21706EEE8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, &v22);
  uint64_t v11 = v23;
  if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v25;
  if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  unint64_t v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v14 = v30;
  unint64_t v15 = atomic_load((unint64_t *)(v13 + 144));
  BOOL v16 = v14 >= v15
     || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (atomic_ullong *)v13);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216ABB798(&v28);
  sub_216ABB798(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
  sub_216ABB798(&v20);
  if (v16)
  {
    char v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v18, 0);
    uint64_t v17 = 1;
  }
  else
  {
LABEL_25:
    uint64_t v17 = 0;
  }
  __int16 v26 = (void **)v21;
  sub_216C0ACA8(&v26);
  return v17;
}

void sub_21706BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  sub_21706EF80((uint64_t)&a18);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v18 - 40));
  sub_216ABB798(&a10);
  a18 = (void **)&a11;
  sub_216C0ACA8(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_21706BE2C(uint64_t *a1)
{
  uint64_t v2 = sub_21697CF14(a1);
  if (!(v3 & 1 | (unint64_t)v2)) {
    return 1;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t Identifier = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
  if (!pxrInternal__aapl__pxrReserved__::TfIsFile(Identifier, 0)) {
    return 1;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t v7 = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
  if (pxrInternal__aapl__pxrReserved__::TfIsWritable(v7)) {
    return 1;
  }
  v12[0] = "usdUtils/stitchClips.cpp";
  v12[1] = "_LayerIsWritable";
  _OWORD v12[2] = 83;
  void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_LayerIsWritable(const SdfLayerHandle &)";
  char v13 = 0;
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
  if (*(char *)(v10 + 23) >= 0) {
    uint64_t v11 = (const char *)v10;
  }
  else {
    uint64_t v11 = *(const char **)v10;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Error: Layer %s is unwritable.", v11);
  return 0;
}

uint64_t sub_21706BEF8(uint64_t *a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  char v42 = a1;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
  sub_216D89604(a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v39 = &v42;
  char v40 = a2;
  if (v7 != v8)
  {
    uint64_t v12 = (v7 - v8) / 24;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      LODWORD(v44) = 0;
      uint64_t v49 = 65539;
      int v50 = 55;
      tbb::task_group_context::init((uint64_t)&v44, v9, v10, v11);
      char v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v44;
      uint64_t v13 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v43, 0x38uLL);
      *(unsigned char *)(v13 - 11) = 1;
      *(void *)uint64_t v13 = &unk_26C771768;
      *(void *)(v13 + 8) = v12;
      *(_OWORD *)(v13 + 16) = xmmword_217411D30;
      *(void *)(v13 + 32) = &v39;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(unsigned char *)(v13 + 52) = 5;
      *(void *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 - 40) + 16))(*(void *)(v13 - 40), v13, v13 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v44);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *v40 + v15;
        std::string v45 = 0;
        uint64_t v46 = 0;
        BOOL v44 = &v45;
        pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v17, &v44, &v43);
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(**v39 + v16);
        BOOL v19 = *v18;
        *uint64_t v18 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v43;
        char v43 = 0;
        sub_2168BD378((int)v18, v19);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v43);
        sub_2167877AC((uint64_t)&v44, v45);
        v16 += 8;
        v15 += 24;
        --v12;
      }
      while (v12);
    }
  }
  unint64_t v20 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v20) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v21 = v41;
  unint64_t v22 = atomic_load((unint64_t *)(v20 + 144));
  if (v21 < v22
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41, (atomic_ullong *)v20))
  {
    goto LABEL_25;
  }
  uint64_t v23 = *a2;
  if (a2[1] == *a2) {
    goto LABEL_21;
  }
  uint64_t v24 = v42;
  uint64_t v25 = (uint64_t *)*v42;
  unint64_t v26 = *(void *)*v42;
  if (!v26)
  {
LABEL_16:
    BOOL v44 = (char **)"usdUtils/stitchClips.cpp";
    std::string v45 = "_ClipLayersAreValid";
    uint64_t v46 = 804;
    uint64_t v47 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ClipLayersAreValid(const SdfLayerRefPtrVector &"
          ", const _ClipFileVector &, const SdfPath &)";
    char v48 = 0;
    uint64_t v34 = (const char *)(v23 + 24 * v26);
    if (v34[23] < 0) {
      uint64_t v34 = *(const char **)v34;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to open layer %s\n", v34);
    goto LABEL_25;
  }
  uint64_t v27 = 0;
  char v28 = 0;
  unint64_t v29 = 1;
  while (1)
  {
    unint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v25);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v30, a3, &v44);
    char IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v44);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v32, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v44);
    v28 |= IsDormant ^ 1;
    uint64_t v23 = *a2;
    if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)) {
      break;
    }
    ++v27;
    uint64_t v25 = (uint64_t *)(*v24 + 8 * v27);
    if (!*(void *)(*v24 + 8 * v29++))
    {
      unint64_t v26 = v29 - 1;
      goto LABEL_16;
    }
  }
  if ((v28 & 1) == 0)
  {
LABEL_21:
    BOOL v44 = (char **)"usdUtils/stitchClips.cpp";
    std::string v45 = "_ClipLayersAreValid";
    uint64_t v46 = 814;
    uint64_t v47 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ClipLayersAreValid(const SdfLayerRefPtrVector &"
          ", const _ClipFileVector &, const SdfPath &)";
    char v48 = 0;
    unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
    if (*((char *)String + 23) >= 0) {
      uint64_t v37 = (const char *)String;
    }
    else {
      uint64_t v37 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clip path specified <%s>", v37);
LABEL_25:
    uint64_t v35 = 0;
    goto LABEL_26;
  }
  uint64_t v35 = 1;
LABEL_26:
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v41);
  return v35;
}

void sub_21706C2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a15, v20);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a17);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a13);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClipsManifest(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2, void *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  if (sub_21706BE2C(a1))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v8);
    memset(v21, 0, sizeof(v21));
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
    if (sub_21706BEF8((uint64_t *)v21, a3, v10))
    {
      uint64_t v11 = (void **)a1[1];
      if (v11)
      {
        if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
          uint64_t v11 = (void **)*a1;
        }
        else {
          uint64_t v11 = 0;
        }
      }
      uint64_t v23 = v11;
      sub_2168BD80C((uint64_t *)&v23);
      uint64_t v12 = a2[1];
      if (v12)
      {
        if (*(unsigned char *)(sub_216850B68((uint64_t *)a2 + 1) + 14)) {
          uint64_t v12 = *a2;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      unint64_t v20 = v12;
      sub_2168BD80C((uint64_t *)&v20);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22);
      sub_217071854((uint64_t)&v23, (uint64_t)&v20, v21, a4);
      unint64_t v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v13) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v14 = v22;
      unint64_t v15 = atomic_load((unint64_t *)(v13 + 144));
      if (v14 >= v15)
      {
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22);
        sub_216ABB798(&v20);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v23);
      }
      else
      {
        BOOL IsCleanImpl = pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22, (atomic_ullong *)v13);
        pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v22);
        sub_216ABB798(&v20);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v23);
        if (!IsCleanImpl) {
          goto LABEL_15;
        }
      }
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v18, 0);
      uint64_t v17 = 1;
      goto LABEL_19;
    }
LABEL_15:
    uint64_t v17 = 0;
LABEL_19:
    uint64_t v23 = (void **)v21;
    sub_216C0ACA8(&v23);
    return v17;
  }
  return 0;
}

void sub_21706C4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_216C0ACA8(&a14);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClips(uint64_t *a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, char a4, uint64_t *a5)
{
  if (sub_21706BE2C(a1))
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v10);
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t Identifier = (void **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
    pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipTopologyName(Identifier, (uint64_t)v99);
    v103[1] = 0;
    uint64_t v104 = 0;
    v103[0] = &v103[1];
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v99, v103, &v98);
    sub_2167877AC((uint64_t)v103, (void *)v103[1]);
    unint64_t v13 = v98;
    if (!v98)
    {
      v103[1] = 0;
      uint64_t v104 = 0;
      v103[0] = &v103[1];
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew((uint64_t)v99, (pxrInternal__aapl__pxrReserved__::TfToken *)v103, &v115);
      unint64_t v14 = v98;
      double v98 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v115.__r_.__value_.__r.__words[0];
      v115.__r_.__value_.__r.__words[0] = 0;
      sub_2168BD378((int)&v98, v14);
      sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v115);
      sub_2167877AC((uint64_t)v103, (void *)v103[1]);
    }
    sub_216ABBA60((uint64_t *)v103, (uint64_t *)&v98);
    char v15 = sub_21706BE2C((uint64_t *)v103);
    uint64_t v16 = v103[1];
    if (v103[1] && atomic_fetch_add_explicit((atomic_uint *volatile)v103[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v16 + 8))(v16);
    }
    if (v15)
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v98);
      pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v17);
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      BOOL v19 = (void **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v18);
      pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipManifestName(v19, (uint64_t)v96);
      v103[1] = 0;
      uint64_t v104 = 0;
      v103[0] = &v103[1];
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)v96, v103, &v95);
      sub_2167877AC((uint64_t)v103, (void *)v103[1]);
      unint64_t v20 = v95;
      if (!v95)
      {
        v103[1] = 0;
        uint64_t v104 = 0;
        v103[0] = &v103[1];
        pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew((uint64_t)v96, (pxrInternal__aapl__pxrReserved__::TfToken *)v103, &v115);
        unint64_t v21 = v95;
        uint64_t v95 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v115.__r_.__value_.__r.__words[0];
        v115.__r_.__value_.__r.__words[0] = 0;
        sub_2168BD378((int)&v95, v21);
        sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v115);
        sub_2167877AC((uint64_t)v103, (void *)v103[1]);
      }
      sub_216ABBA60((uint64_t *)v103, (uint64_t *)&v95);
      char v22 = sub_21706BE2C((uint64_t *)v103);
      uint64_t v23 = v103[1];
      if (v103[1]
        && atomic_fetch_add_explicit((atomic_uint *volatile)v103[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(void *))(*(void *)v23 + 8))(v23);
      }
      if (v22)
      {
        uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v95);
        pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v24);
        uint64_t v92 = 0;
        uint64_t v93 = 0;
        uint64_t v94 = 0;
        if (sub_21706BEF8((uint64_t *)&v92, a2, a3))
        {
          char v102 = a4;
          pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v101);
          sub_21706ED64((unint64_t *)&v92, a3, a5, (uint64_t)&v108);
          sub_216ABBA60((uint64_t *)v103, (uint64_t *)&v98);
          sub_216ABBA60((uint64_t *)&v115, &v109);
          sub_21706EEE8((pxrInternal__aapl__pxrReserved__::SdfPath *)v103, (uint64_t *)&v115);
          std::string::size_type size = v115.__r_.__value_.__l.__size_;
          if (v115.__r_.__value_.__l.__size_
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v115.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
          }
          unint64_t v26 = v103[1];
          if (v103[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)v103[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v26 + 8))(v26);
          }
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v27, a3, v103);
          int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v103);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v29, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v103);
          if (IsDormant)
          {
            sub_216ABBA60((uint64_t *)v103, &v110);
            sub_21706EEE8((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (uint64_t *)v103);
            unint64_t v30 = v103[1];
            if (v103[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)v103[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(void *))(*(void *)v30 + 8))(v30);
            }
          }
          else
          {
            uint64_t v31 = (void *)a1[1];
            if (v31)
            {
              if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
                uint64_t v31 = (void *)*a1;
              }
              else {
                uint64_t v31 = 0;
              }
            }
            v103[0] = v31;
            sub_2168BD80C((uint64_t *)v103);
            sub_21706F8E8((uint64_t *)v103, &v110, a3, a5);
            sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v103);
          }
          char v33 = (std::string::size_type *)(a1 + 1);
          std::string::size_type v32 = a1[1];
          if (v32)
          {
            if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
              std::string::size_type v32 = *a1;
            }
            else {
              std::string::size_type v32 = 0;
            }
          }
          v115.__r_.__value_.__r.__words[0] = v32;
          sub_2168BD80C((uint64_t *)&v115);
          uint64_t v34 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v34) {
            uint64_t v34 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_217070194((uint64_t *)&v115, a3, v34, a5, (uint64_t)v103);
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v115);
          sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v103, v35, v36);
          uint64_t v37 = v106;
          sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v103, v38, v39);
          uint64_t v40 = v106 + 16 * (uint64_t)v103[0];
          if (v37 != v40)
          {
            unint64_t v41 = 0;
            do
            {
              *(double *)(v37 + 8) = (double)v41++;
              v37 += 16;
            }
            while (v37 != v40);
          }
          std::string::size_type v42 = *v33;
          if (*v33)
          {
            if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
              std::string::size_type v42 = *a1;
            }
            else {
              std::string::size_type v42 = 0;
            }
          }
          v115.__r_.__value_.__r.__words[0] = v42;
          sub_2168BD80C((uint64_t *)&v115);
          char v43 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v43) {
            char v43 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_2170704D8((uint64_t *)&v115, a3, v43, (uint64_t)v103, a5);
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v115);
          sub_2168F83DC((uint64_t)v103);
          BOOL v44 = (void *)*v33;
          if (*v33)
          {
            if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
              BOOL v44 = (void *)*a1;
            }
            else {
              BOOL v44 = 0;
            }
          }
          v103[0] = v44;
          sub_2168BD80C((uint64_t *)v103);
          std::string v45 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v45) {
            std::string v45 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_21706FC3C((uint64_t *)v103, a3, (void *)v45 + 1, a5, (uint64_t)&v115);
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v103);
          std::string::size_type v46 = v115.__r_.__value_.__r.__words[0];
          char v48 = v92;
          uint64_t v47 = v93;
          uint64_t v114 = 0;
          memset(v113, 0, sizeof(v113));
          sub_216BBA74C((unint64_t *)v113, v115.__r_.__value_.__r.__words[0]);
          uint64_t v49 = (v47 - (uint64_t)v48) >> 3;
          std::string::size_type v50 = v46 - v49;
          if (v46 != v49)
          {
            uint64_t v51 = 0;
            std::string::size_type v52 = v50;
            do
            {
              sub_216C4D6C0((uint64_t)v113, (long long *)(v116 + v51));
              v51 += 48;
              --v52;
            }
            while (v52);
          }
          unint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
          uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v53);
          if (*(char *)(RealPath + 23) < 0)
          {
            sub_216778F24(&__dst, *(void **)RealPath, *(void *)(RealPath + 8));
          }
          else
          {
            long long v55 = *(_OWORD *)RealPath;
            uint64_t v118 = *(void *)(RealPath + 16);
            long long __dst = v55;
          }
          if (v115.__r_.__value_.__r.__words[0] != v50)
          {
            uint64_t v56 = 0;
            std::string::size_type v57 = 0;
            do
            {
              uint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(&v92[v56]);
              uint64_t v59 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v58);
              char v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(&v92[v56]);
              uint64_t v61 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v60);
              sub_21706E43C(v59, v61, (uint64_t)&__dst, (uint64_t)v111);
              pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v103);
              sub_216BBA8E8((uint64_t)v113, (long long *)v103);
              if (v107 < 0) {
                operator delete(__p);
              }
              if (SHIBYTE(v104) < 0) {
                operator delete(v103[0]);
              }
              if (v112 < 0) {
                operator delete(v111[0]);
              }
              ++v57;
              ++v56;
            }
            while (v57 < v115.__r_.__value_.__r.__words[0] - v50);
          }
          long long v62 = (void *)*v33;
          if (*v33)
          {
            if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
              long long v62 = (void *)*a1;
            }
            else {
              long long v62 = 0;
            }
          }
          v103[0] = v62;
          sub_2168BD80C((uint64_t *)v103);
          char v63 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v63) {
            char v63 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_21706FEE4((uint64_t *)v103, a3, (void *)v63 + 1, (uint64_t)v113, a5);
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v103);
          if (SHIBYTE(v118) < 0) {
            operator delete((void *)__dst);
          }
          sub_2169B4408(v113);
          sub_2169B4408(&v115);
          sub_217071854((uint64_t)&v95, (uint64_t)&v98, &v92, a3);
          unint64_t v64 = (void *)*v33;
          if (*v33)
          {
            if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
              unint64_t v64 = (void *)*a1;
            }
            else {
              unint64_t v64 = 0;
            }
          }
          v111[0] = v64;
          sub_2168BD80C((uint64_t *)v111);
          uint64_t v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v95);
          uint64_t v66 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v65);
          uint64_t v67 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v95);
          uint64_t v68 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v67);
          uint64_t v69 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)v111);
          uint64_t v70 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v69);
          sub_21706E43C(v66, v68, v70, (uint64_t)&__dst);
          uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v71) {
            uint64_t v71 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v103);
          uint64_t v72 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA5ECC((uint64_t *)v111);
          uint64_t v91 = (const char **)v72;
          unint64_t v73 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v73)
          {
            uint64_t v72 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
            unint64_t v73 = (unint64_t)v72;
          }
          if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0) {
            Emptyunint64_t String = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v72);
          }
          if (*((char *)EmptyString + 23) >= 0) {
            size_t v75 = *((unsigned __int8 *)EmptyString + 23);
          }
          else {
            size_t v75 = EmptyString[1];
          }
          uint64_t v76 = v113;
          __int16 v77 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)v113, v75 + 1);
          if (v113[23] < 0) {
            uint64_t v76 = *(unsigned char **)v113;
          }
          if (v75)
          {
            if (*((char *)EmptyString + 23) >= 0) {
              uint64_t v78 = EmptyString;
            }
            else {
              uint64_t v78 = (const void *)*EmptyString;
            }
            __int16 v77 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v76, v78, v75);
          }
          *(_WORD *)&v76[v75] = 58;
          if ((*((void *)v71 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
            uint64_t v79 = (uint64_t *)((*((void *)v71 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            uint64_t v79 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v77);
          }
          int v80 = *((char *)v79 + 23);
          if (v80 >= 0) {
            uint64_t v81 = (const std::string::value_type *)v79;
          }
          else {
            uint64_t v81 = (const std::string::value_type *)*v79;
          }
          if (v80 >= 0) {
            std::string::size_type v82 = *((unsigned __int8 *)v79 + 23);
          }
          else {
            std::string::size_type v82 = v79[1];
          }
          uint64_t v83 = std::string::append((std::string *)v113, v81, v82);
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v115.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v119);
          sub_217071D6C(v91, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v73 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v119, (long long *)v103);
          if ((v119 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
          if ((v113[23] & 0x80000000) != 0) {
            operator delete(*(void **)v113);
          }
          if (v107 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v104) < 0) {
            operator delete(v103[0]);
          }
          if (SHIBYTE(v118) < 0) {
            operator delete((void *)__dst);
          }
          sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v111);
          uint64_t v85 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v98);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(v85);
        }
        if (!v13)
        {
          uint64_t v86 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v98);
          uint64_t v87 = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v86);
          pxrInternal__aapl__pxrReserved__::TfDeleteFile(v87);
        }
        if (!v20)
        {
          uint64_t v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v95);
          uint64_t v89 = (const char *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v88);
          pxrInternal__aapl__pxrReserved__::TfDeleteFile(v89);
        }
        v103[0] = &v92;
        sub_216C0ACA8((void ***)v103);
      }
      sub_216ABB798(&v95);
      if (v97 < 0) {
        operator delete(v96[0]);
      }
    }
    sub_216ABB798(&v98);
    if (v100 < 0) {
      operator delete(v99[0]);
    }
  }
  return 0;
}

void sub_21706D4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (*(char *)(v58 - 137) < 0) {
    operator delete(*(void **)(v58 - 160));
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a53);
  sub_21706EF80((uint64_t)&a49);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a33);
  a53 = &a16;
  sub_216C0ACA8((void ***)&a53);
  sub_216ABB798(&a19);
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_216ABB798(&a26);
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipTopologyName(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_216779094(v25, ".");
  int v4 = *((char *)a1 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = (char *)a1;
  }
  else {
    uint64_t v6 = (char *)*a1;
  }
  if (v5) {
    uint64_t v7 = (char *)a1[1];
  }
  else {
    uint64_t v7 = (char *)*((unsigned __int8 *)a1 + 23);
  }
  uint64_t v8 = (unsigned __int8 *)&v7[(void)v6];
  if (v7)
  {
    uint64_t v9 = (unsigned __int8 *)v6;
    uint64_t v10 = &v7[(void)v6];
    do
    {
      uint64_t v11 = v9;
      uint64_t v12 = v9;
      while (1)
      {
        int v13 = *v12++;
        if (v13 == 46) {
          break;
        }
        uint64_t v11 = v12;
        if (v12 == v8)
        {
          uint64_t v11 = (unsigned __int8 *)v10;
          goto LABEL_16;
        }
      }
      uint64_t v9 = v11 + 1;
      uint64_t v10 = (char *)v11;
    }
    while (v12 != v8);
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)v6;
  }
LABEL_16:
  std::string::size_type v14 = v11 - (unsigned __int8 *)v6;
  if (v11 == v8) {
    std::string::size_type v15 = -1;
  }
  else {
    std::string::size_type v15 = v14;
  }
  sub_216779094(v23, "topology");
  if (v15 == -1)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      sub_216778F24(&__dst, *a1, (unint64_t)a1[1]);
    }
    else {
      std::string __dst = *(std::string *)a1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v25, (const void **)v23, (uint64_t)__p);
    if ((v21 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v17 = v21;
    }
    else {
      std::string::size_type v17 = (std::string::size_type)__p[1];
    }
    uint64_t v18 = std::string::insert(&__dst, v15, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24((unsigned char *)a2, v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v19;
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete((void *)v25[0]);
  }
}

void sub_21706DB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsGenerateClipManifestName(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_216779094(v25, ".");
  int v4 = *((char *)a1 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = (char *)a1;
  }
  else {
    uint64_t v6 = (char *)*a1;
  }
  if (v5) {
    uint64_t v7 = (char *)a1[1];
  }
  else {
    uint64_t v7 = (char *)*((unsigned __int8 *)a1 + 23);
  }
  uint64_t v8 = (unsigned __int8 *)&v7[(void)v6];
  if (v7)
  {
    uint64_t v9 = (unsigned __int8 *)v6;
    uint64_t v10 = &v7[(void)v6];
    do
    {
      uint64_t v11 = v9;
      uint64_t v12 = v9;
      while (1)
      {
        int v13 = *v12++;
        if (v13 == 46) {
          break;
        }
        uint64_t v11 = v12;
        if (v12 == v8)
        {
          uint64_t v11 = (unsigned __int8 *)v10;
          goto LABEL_16;
        }
      }
      uint64_t v9 = v11 + 1;
      uint64_t v10 = (char *)v11;
    }
    while (v12 != v8);
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)v6;
  }
LABEL_16:
  std::string::size_type v14 = v11 - (unsigned __int8 *)v6;
  if (v11 == v8) {
    std::string::size_type v15 = -1;
  }
  else {
    std::string::size_type v15 = v14;
  }
  sub_216779094(v23, "manifest");
  if (v15 == -1)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      sub_216778F24(&__dst, *a1, (unint64_t)a1[1]);
    }
    else {
      std::string __dst = *(std::string *)a1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v25, (const void **)v23, (uint64_t)__p);
    if ((v21 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v17 = v21;
    }
    else {
      std::string::size_type v17 = (std::string::size_type)__p[1];
    }
    uint64_t v18 = std::string::insert(&__dst, v15, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24((unsigned char *)a2, v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v19;
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete((void *)v25[0]);
  }
}

void sub_21706DD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsStitchClipsTemplate(uint64_t *a1, uint64_t *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t a5, int a6, void *a7, double a8, double a9, double a10, double a11)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t result = sub_21706BE2C(a1);
  if (result)
  {
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v23);
    char v24 = sub_21697CF14(a2);
    if (v25 & 1 | (unint64_t)v24 && (char v26 = sub_21697CF14(a3), v27 & 1 | (unint64_t)v26))
    {
      pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer(a1, (uint64_t)a4, &v89);
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v28);
      unint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v30);
      std::string::size_type v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v32);
      sub_21706E43C(Identifier, RealPath, v33, (uint64_t)v87);
      uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
      uint64_t v35 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v34);
      uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a3);
      uint64_t v37 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v36);
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      uint64_t v39 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v38);
      sub_21706E43C(v35, v37, v39, (uint64_t)&v85);
      uint64_t v40 = (void *)a1[1];
      if (v40)
      {
        if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
          uint64_t v40 = (void *)*a1;
        }
        else {
          uint64_t v40 = 0;
        }
      }
      v90[0] = v40;
      sub_2168BD80C((uint64_t *)v90);
      sub_21706E744((uint64_t *)v90, (unsigned __int8 *)v87);
      sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v90);
      long long v84 = 0;
      unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a4);
      std::string::size_type v42 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v42) {
        std::string::size_type v42 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      if ((*((void *)v42 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)((*((void *)v42 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v42);
      }
      BOOL v44 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)EmptyString);
      sub_216B8DDC0((uint64_t)v44, (uint64_t)String);
      std::string v45 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v45) {
        std::string v45 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      if ((*((void *)v45 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
        std::string::size_type v46 = (uint64_t *)((*((void *)v45 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        std::string::size_type v46 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v45);
      }
      uint64_t v47 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v46);
      sub_216B8DDC0((uint64_t)v47, a5);
      char v48 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v48) {
        char v48 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      if ((*((void *)v48 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v49 = (uint64_t *)((*((void *)v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
      }
      std::string::size_type v50 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v49);
      uint64_t v51 = v50;
      uint64_t v52 = v50[1];
      if (v52 && (v50[1] & 3) != 3) {
        (*(void (**)(uint64_t *))((v52 & 0xFFFFFFFFFFFFFFF8) + 32))(v50);
      }
      v51[1] = (uint64_t)&unk_26C750B03;
      *(double *)uint64_t v51 = a8;
      unint64_t v53 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v53) {
        unint64_t v53 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      if ((*((void *)v53 + 6) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v54 = (uint64_t *)((*((void *)v53 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v53);
      }
      long long v55 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v54);
      uint64_t v56 = v55;
      uint64_t v57 = v55[1];
      if (v57 && (v55[1] & 3) != 3) {
        (*(void (**)(uint64_t *))((v57 & 0xFFFFFFFFFFFFFFF8) + 32))(v55);
      }
      v56[1] = (uint64_t)&unk_26C750B03;
      *(double *)uint64_t v56 = a9;
      uint64_t v58 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v58) {
        uint64_t v58 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      if ((*((void *)v58 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v59 = (uint64_t *)((*((void *)v58 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v59 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v58);
      }
      char v60 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v59);
      uint64_t v61 = v60;
      uint64_t v62 = v60[1];
      if (v62 && (v60[1] & 3) != 3) {
        (*(void (**)(uint64_t *))((v62 & 0xFFFFFFFFFFFFFFF8) + 32))(v60);
      }
      v61[1] = (uint64_t)&unk_26C750B03;
      *(double *)uint64_t v61 = a10;
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v90);
      char v63 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      if (!v63) {
        char v63 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
      }
      if ((*((void *)v63 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v64 = (uint64_t *)((*((void *)v63 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v64 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v63);
      }
      uint64_t v65 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v64);
      uint64_t v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216B8E52C(v65, (long long *)v90);
      if (v93 < 0) {
        operator delete(__p);
      }
      if (v91 < 0) {
        operator delete(v90[0]);
      }
      if (a11 != 1.79769313e308)
      {
        uint64_t v67 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v67) {
          uint64_t v67 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        if ((*((void *)v67 + 9) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v68 = (uint64_t *)((*((void *)v67 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v68 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v67);
        }
        uint64_t v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v68);
        uint64_t v69 = v66;
        uint64_t v70 = *((void *)v66 + 1);
        if (v70 && (*((void *)v66 + 1) & 3) != 3) {
          uint64_t v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v70 & 0xFFFFFFFFFFFFFFF8) + 32))(v66);
        }
        *((void *)v69 + 1) = &unk_26C750B03;
        *(double *)uint64_t v69 = a11;
      }
      if (a6)
      {
        uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v71) {
          uint64_t v71 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        if ((*((void *)v71 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v72 = (uint64_t *)((*((void *)v71 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v72 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v71);
        }
        uint64_t v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v84, (long long *)v72);
        unint64_t v73 = v66;
        uint64_t v74 = *((void *)v66 + 1);
        if (v74 && (*((void *)v66 + 1) & 3) != 3) {
          uint64_t v66 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))((v74 & 0xFFFFFFFFFFFFFFF8) + 32))(v66);
        }
        *((void *)v73 + 1) = &unk_26C7501AB;
        *(unsigned char *)unint64_t v73 = 1;
      }
      uint64_t v83 = 0;
      if ((*a7 & 0xFFFFFFFFFFFFFFF8) != 0) {
        size_t v75 = (uint64_t *)((*a7 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        size_t v75 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v66);
      }
      uint64_t v76 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v83, (long long *)v75);
      sub_2168EEF10((uint64_t)v76, (const void ****)&v84);
      __int16 v77 = sub_216A663FC(&v89);
      uint64_t v78 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v78) {
        uint64_t v78 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      sub_21703B804((const void ****)&v83, (pxrInternal__aapl__pxrReserved__::VtValue *)v90);
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(v77, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v78 + 8), (const pxrInternal__aapl__pxrReserved__::VtValue *)v90);
      sub_2168EE084((uint64_t)v90);
      uint64_t v79 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(v79, a8);
      int v80 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(v80, a9);
      uint64_t v81 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::Save(v81, 0);
      sub_2168EBBB8(&v83, 0);
      sub_2168EBBB8(&v84, 0);
      if (v86 < 0) {
        operator delete(v85);
      }
      unint64_t v82 = v88;
      if ((v82 & 0x80000000) != 0) {
        operator delete(v87[0]);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v82, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v89);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_21706E390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  sub_2168EE084((uint64_t)&a25);
  sub_2168EBBB8((void ***)&a9, 0);
  sub_2168EBBB8(&a10, 0);
  if (a16 < 0) {
    operator delete(__p);
  }
  unint64_t v28 = a22;
  if ((v28 & 0x80000000) != 0) {
    operator delete(a17);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)v28, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a23);
  _Unwind_Resume(a1);
}

void sub_21706E43C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(&v29, 0, sizeof(v29));
  pxrInternal__aapl__pxrReserved__::TfGetPathName((std::string *)a1, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
    operator delete(v28.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_3;
    }
LABEL_32:
    pxrInternal__aapl__pxrReserved__::TfNormPath(&v28, a1, 0);
    long long v19 = std::string::insert(&v28, 0, "./");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    unsigned int v17 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
    v29.__r_.__value_.__r.__words[0] = v20;
    v29.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    *((unsigned char *)&v29.__r_.__value_.__s + 23) = v17;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    goto LABEL_34;
  }
  if (!*((unsigned char *)&v28.__r_.__value_.__s + 23)) {
    goto LABEL_32;
  }
LABEL_3:
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8)
  {
    char v21 = 0;
    BOOL v24 = 1;
    std::string::size_type v22 = v29.__r_.__value_.__l.__size_;
    goto LABEL_38;
  }
  pxrInternal__aapl__pxrReserved__::TfNormPath(&v28, a3, 0);
  pxrInternal__aapl__pxrReserved__::TfNormPath(&__str, a2, 0);
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&v28, &__p);
  std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    uint64_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v12 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : __str.__r_.__value_.__l.__size_;
    size_t v13 = strlen((const char *)v11);
    if (v12 >= v13)
    {
      size_t v14 = v13;
      std::string::size_type v15 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      if (!strncmp((const char *)v15, (const char *)v11, v14))
      {
        std::string::operator=(&v29, &__str);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
        }
        std::string::replace(&v29, 0, v16, "./");
        char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
    }
  }
  if (v10 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  unsigned int v17 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
LABEL_34:
  char v21 = v17;
  std::string::size_type v22 = v29.__r_.__value_.__l.__size_;
  std::string::size_type v23 = v17;
  if ((v17 & 0x80u) != 0) {
    std::string::size_type v23 = v29.__r_.__value_.__l.__size_;
  }
  BOOL v24 = v23 == 0;
LABEL_38:
  char v25 = &v29;
  if (v24)
  {
    char v25 = (std::string *)a1;
    char v21 = *(unsigned char *)(a1 + 23);
  }
  if (v21 < 0)
  {
    if (v24) {
      unint64_t v26 = *(void *)(a1 + 8);
    }
    else {
      unint64_t v26 = v22;
    }
    sub_216778F24((unsigned char *)a4, v25->__r_.__value_.__l.__data_, v26);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v25->__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_21706E6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_21706E744(uint64_t *a1, unsigned __int8 *a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v4, (uint64_t)v12);
  int v5 = sub_216ABBF20((uint64_t)v12);
  sub_216AB3AB4((uint64_t)v12, (uint64_t)&v8);
  if (v5) {
    uint64_t v6 = v12;
  }
  else {
    uint64_t v6 = 0;
  }
  v16.n128_u64[1] = (unint64_t)v6;
  uint64_t v17 = 0;
  long long v14 = v8;
  uint64_t v15 = v9;
  sub_217072A50(&v16, (uint64_t)&v14, a2, &v18);
  __n128 v10 = v18;
  uint64_t v11 = v19;
  sub_216AB3AB4((uint64_t)v12, (uint64_t)&v18);
  if (sub_216ABD870((uint64_t)&v10, (uint64_t)&v18))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath(v7, (long long *)a2, 0);
  }
  if (v13) {
    sub_216784EC4(v13);
  }
}

void sub_21706E820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21706E848(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  int v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        long long v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)long long v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C771768;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)char v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      uint64_t v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)uint64_t v19 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      char v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C771768;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_21706EC7C((uint64_t)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_21706EC7C((uint64_t)this, (void *)this + 1);
  return 0;
}

void sub_21706EC7C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = *a2 - v2;
  if (*a2 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = 8 * v2;
    uint64_t v6 = 24 * v2;
    do
    {
      uint64_t v7 = **(void **)(v4 + 8) + v6;
      v11[0] = 0;
      v11[1] = 0;
      uint64_t v10 = v11;
      pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(v7, &v10, &v12);
      long long v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(***(void ***)v4 + v5);
      uint64_t v9 = *v8;
      *long long v8 = v12;
      unint64_t v12 = 0;
      sub_2168BD378((int)v8, v9);
      sub_216ABB798(&v12);
      sub_2167877AC((uint64_t)&v10, v11[0]);
      v5 += 8;
      v6 += 24;
      --v3;
    }
    while (v3);
  }
}

void sub_21706ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12)
{
}

void sub_21706ED64(unint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  sub_21706EFE8(a4, a2, a3);
  unint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  if (*a1 < v10)
  {
    v14[0] = 1;
    uint64_t v15 = 65539;
    int v16 = 52;
    tbb::task_group_context::init((uint64_t)v14, v6, v7, v8);
    char v13 = (tbb::task_group_context *)v14;
    uint64_t v11 = tbb::internal::allocate_root_with_context_proxy::allocate(&v13, 0x40uLL);
    *(unsigned char *)(v11 - 11) = 1;
    *(void *)uint64_t v11 = &unk_26C7717B0;
    *(void *)(v11 + 8) = a4;
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = v9;
    *(void *)(v11 + 32) = 1;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v11);
    *(_DWORD *)(v11 + 48) = 0;
    *(unsigned char *)(v11 + 52) = 5;
    *(void *)(v11 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    *(unsigned char *)(v11 + 56) = 0;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v11 - 40) + 16))(*(void *)(v11 - 40), v11, v11 - 8);
    tbb::task_group_context::~task_group_context((tbb::task_group_context *)v14);
  }
}

void sub_21706EEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  unint64_t v12 = v11;
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a9, v12);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a10);
  sub_21706EF80(v10);
  _Unwind_Resume(a1);
}

void *sub_21706EEE8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C771840;
  uint64_t v3[3] = v3;
  pxrInternal__aapl__pxrReserved__::UsdUtilsStitchLayers(a1, a2, (uint64_t)v3);
  return sub_21706B74C(v3);
}

void sub_21706EF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21706B74C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_21706EF80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 16));
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_21706EFE8(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v9 = &v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (uint64_t *)(a1 + 8));
  sub_2167877AC((uint64_t)&v9, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v9 = &v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (uint64_t *)(a1 + 16));
  sub_2167877AC((uint64_t)&v9, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *a3;
  *(void *)(a1 + 24) = *a3;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_21706F0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_2167877AC((uint64_t)&a9, a10);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_216ABB798(v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_21697C414(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_21706F168(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((unsigned char *)this + 56) == 2)
  {
    uint64_t v4 = *((void *)this - 4);
    uint64_t v5 = *(void *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      *((void *)this + 1) = sub_21706EFE8(v4 + 24, *((_DWORD **)this + 1), (uint64_t *)(*((void *)this + 1) + 24));
      *(unsigned char *)(v4 + 9) = 1;
    }
  }
  unint64_t v6 = *((void *)this + 4);
  unint64_t v7 = (uint64_t)(*((void *)this + 2) - *((void *)this + 3)) >> 3;
  if (v6 < v7)
  {
    unint64_t v8 = *((void *)this + 5);
    if (v8 > 1) {
      goto LABEL_15;
    }
    if (v8 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        uint64_t v9 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
        *((void *)this - 4) = v9;
        *(void *)(v9 - 24) = 2;
        uint64_t v10 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v9, 0x40uLL);
        char v11 = *((unsigned char *)this + 56);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C751420;
        __dmb(0xBu);
        *(unsigned char *)(v9 + 8) = 0;
        *(void *)uint64_t v9 = &unk_26C7717F8;
        *(unsigned char *)(v9 + 9) = 0;
        *(unsigned char *)(v9 + 10) = v11;
        *(void *)(v9 + 16) = 0;
        *(unsigned char *)(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C7717B0;
        *(void *)(v10 + 8) = *((void *)this + 1);
        *(void *)(v10 + 16) = *((void *)this + 2);
        unint64_t v12 = *((void *)this + 3)
            + 8
            * ((((uint64_t)(*((void *)this + 2) - *((void *)this + 3)) >> 3)
              + (unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 3)) >> 3 < 0)) >> 1);
        *((void *)this + 2) = v12;
        *(void *)(v10 + 24) = v12;
        *(void *)(v10 + 32) = *((void *)this + 4);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v10 + 40) = v13;
        *(_DWORD *)(v10 + 48) = 2;
        *(unsigned char *)(v10 + 52) = *((unsigned char *)this + 52);
        *(unsigned char *)(v10 + 56) = 2;
        *((unsigned char *)this + 56) = 1;
        (***(void (****)(void))(v10 - 40))();
        unint64_t v6 = *((void *)this + 4);
        unint64_t v7 = (uint64_t)(*((void *)this + 2) - *((void *)this + 3)) >> 3;
        if (v6 >= v7) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v6 < v7 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)unint64_t v30 = 0x10000;
    long long v31 = *((_OWORD *)this + 1);
    uint64_t v32 = *((void *)this + 4);
    while (1)
    {
      sub_21692CF40(v30, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v30[2];
      if (v30[2] < 2u)
      {
        unsigned int v16 = v30[0];
        if (v30[v30[0] + 3] < v18
          && *((void *)&v31 + 3 * v30[0] + 2) < (unint64_t)((uint64_t)(*((void *)&v31 + 3 * v30[0])
                                                                             - *((void *)&v31 + 3 * v30[0] + 1)) >> 3))
        {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      unsigned int v19 = v30[1];
      unsigned __int8 v20 = v30[v30[1] + 3];
      uint64_t v21 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x38uLL);
      *((void *)this - 4) = v21;
      *(void *)(v21 - 24) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x40uLL);
      uint64_t v23 = (char *)&v31 + 24 * v19;
      char v24 = *((unsigned char *)this + 56);
      *(unsigned char *)(v21 - 11) = 1;
      *(void *)uint64_t v21 = &unk_26C751420;
      __dmb(0xBu);
      *(unsigned char *)(v21 + 8) = 0;
      *(void *)uint64_t v21 = &unk_26C7717F8;
      *(unsigned char *)(v21 + 9) = 0;
      *(unsigned char *)(v21 + 10) = v24;
      *(void *)(v21 + 16) = 0;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C7717B0;
      *(void *)(v22 + 8) = *((void *)this + 1);
      long long v25 = *(_OWORD *)v23;
      *(void *)(v22 + 32) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 16) = v25;
      uint64_t v26 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v26;
      *(void *)(v22 + 40) = v26;
      *(_DWORD *)(v22 + 48) = 2;
      LOBYTE(v26) = *((unsigned char *)this + 52);
      *(unsigned char *)(v22 + 56) = 2;
      *(unsigned char *)(v22 + 52) = v26 - v20;
      *((unsigned char *)this + 56) = 1;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v30[2];
      v30[1] = (v30[1] + 1) & 7;
LABEL_30:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        goto LABEL_34;
      }
    }
    unsigned int v16 = v30[0];
LABEL_25:
    sub_2170708F0(this, (uint64_t **)&v31 + 3 * v16);
    unsigned __int8 v17 = --v30[2];
    v30[0] = (v30[0] - 1) & 7;
    goto LABEL_30;
  }
  sub_2170708F0(this, (uint64_t **)this + 2);
LABEL_34:
  if (*((unsigned char *)this + 56) == 1)
  {
    uint64_t v27 = *((void *)this - 4);
    uint64_t v28 = *((void *)this + 1);
    __dmb(0xBu);
    *(void *)(v27 + 16) = v28;
  }
  return 0;
}

uint64_t sub_21706F680(uint64_t a1)
{
  *(void *)a1 = &unk_26C7717F8;
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
    sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 32));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
  }
  return a1;
}

void sub_21706F704(uint64_t a1)
{
  uint64_t v1 = (void *)sub_21706F680(a1);

  operator delete(v1);
}

uint64_t sub_21706F72C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    sub_216ABBA60(&v10, v2 + 1);
    sub_216ABBA60(&v8, (uint64_t *)(a1 + 32));
    sub_21706EEE8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    uint64_t v3 = v9;
    if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v11;
    if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v4 + 8))(v4);
    }
    if (*v2 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4)) {
      sub_21706F8E8(v2 + 2, (uint64_t *)(a1 + 40), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v2, v2 + 3);
    }
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v5 = *(void *)(a1 - 32);
    uint64_t v6 = *(void *)(a1 + 16);
    __dmb(0xBu);
    *(void *)(v5 + 16) = v6;
  }
  return 0;
}

void sub_21706F854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, atomic_uint *a12)
{
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  if (a12)
  {
    if (atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21706F8E8(uint64_t *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, void *a4)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v8) {
    uint64_t v8 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  uint64_t v9 = (void *)((char *)v8 + 8);
  sub_21706FC3C(a1, a3, (void *)v8 + 1, a4, (uint64_t)v19);
  sub_21706FC3C(a2, a3, v9, a4, (uint64_t)v18);
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_216BBA74C((unint64_t *)v16, v18[0] + v19[0]);
  if (v19[0])
  {
    uint64_t v10 = (long long *)v19[4];
    uint64_t v11 = 48 * v19[0];
    do
    {
      sub_216C4D6C0((uint64_t)v16, v10);
      v10 += 3;
      v11 -= 48;
    }
    while (v11);
  }
  if (v18[0])
  {
    unint64_t v12 = (long long *)v18[4];
    uint64_t v13 = 48 * v18[0];
    do
    {
      sub_216C4D6C0((uint64_t)v16, v12);
      v12 += 3;
      v13 -= 48;
    }
    while (v13);
  }
  sub_21706FEE4(a1, a3, v9, (uint64_t)v16, a4);
  sub_2169B4408(v16);
  sub_2169B4408(v18);
  sub_2169B4408(v19);
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v14) {
    unint64_t v14 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_21706FADC(a1, a2, a3, (void *)v14 + 10, a4);
  char v15 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v15) {
    char v15 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_21706FADC(a1, a2, a3, v15, a4);
}

void sub_21706FA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_2169B4408((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_21706FADC(uint64_t *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, void *a4, void *a5)
{
  sub_217070194(a1, a3, a4, a5, (uint64_t)v17);
  sub_217070194(a2, a3, a4, a5, (uint64_t)v16);
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  sub_21707043C((unint64_t *)v14, v16[0] + v17[0]);
  if (v17[0])
  {
    uint64_t v10 = (_OWORD *)v17[4];
    uint64_t v11 = 16 * v17[0];
    do
    {
      sub_2170706CC((uint64_t)v14, v10++);
      v11 -= 16;
    }
    while (v11);
  }
  if (v16[0])
  {
    unint64_t v12 = (_OWORD *)v16[4];
    uint64_t v13 = 16 * v16[0];
    do
    {
      sub_2170706CC((uint64_t)v14, v12++);
      v13 -= 16;
    }
    while (v13);
  }
  sub_2170704D8(a1, a3, a4, (uint64_t)v14, a5);
  sub_2168F83DC((uint64_t)v14);
  sub_2168F83DC((uint64_t)v16);
  sub_2168F83DC((uint64_t)v17);
}

void sub_21706FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21706FC3C@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA5ECC(a1);
  uint64_t v10 = v9;
  unint64_t v11 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    uint64_t v9 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    unint64_t v11 = (unint64_t)v9;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    size_t v13 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v13 = EmptyString[1];
  }
  unint64_t v14 = &v28;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v28, v13 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0) {
      unsigned int v16 = EmptyString;
    }
    else {
      unsigned int v16 = (const void *)*EmptyString;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  }
  int v18 = *((char *)v17 + 23);
  if (v18 >= 0) {
    unsigned int v19 = (const std::string::value_type *)v17;
  }
  else {
    unsigned int v19 = (const std::string::value_type *)*v17;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    std::string::size_type v20 = v17[1];
  }
  uint64_t v21 = std::string::append(&v28, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31, (pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
  {
    if ((v33 & 4) != 0) {
      uint64_t v23 = (*(uint64_t (**)(uint64_t *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
    }
    else {
      uint64_t v23 = v32;
    }
    long long v24 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v23;
    *(_OWORD *)(a5 + 16) = v24;
    uint64_t v25 = *(void *)(v23 + 32);
    *(void *)(a5 + 32) = v25;
    if (v25)
    {
      uint64_t v26 = (atomic_ullong *)(v25 - 16);
      if (*(void *)(a5 + 24)) {
        uint64_t v26 = *(atomic_ullong **)(a5 + 24);
      }
      atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return sub_2168EE084((uint64_t)&v32);
}

void sub_21706FE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_21706FEE4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA5ECC(a1);
  uint64_t v10 = (const char **)v9;
  unint64_t v11 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    uint64_t v9 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    unint64_t v11 = (unint64_t)v9;
  }
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    size_t v13 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v13 = EmptyString[1];
  }
  unint64_t v14 = &v23;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v23, v13 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0) {
      unsigned int v16 = EmptyString;
    }
    else {
      unsigned int v16 = (const void *)*EmptyString;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  }
  int v18 = *((char *)v17 + 23);
  if (v18 >= 0) {
    unsigned int v19 = (const std::string::value_type *)v17;
  }
  else {
    unsigned int v19 = (const std::string::value_type *)*v17;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    std::string::size_type v20 = v17[1];
  }
  uint64_t v21 = std::string::append(&v23, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
  sub_2170700D8(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, a4);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_217070084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if ((a23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170700D8(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = off_26C755AE8;
  sub_2168F8DBC(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_217070178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217070194@<X0>(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA5ECC(a1);
  uint64_t v10 = v9;
  unint64_t v11 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    uint64_t v9 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    unint64_t v11 = (unint64_t)v9;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    size_t v13 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v13 = EmptyString[1];
  }
  unint64_t v14 = &v28;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v28, v13 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0) {
      unsigned int v16 = EmptyString;
    }
    else {
      unsigned int v16 = (const void *)*EmptyString;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  }
  int v18 = *((char *)v17 + 23);
  if (v18 >= 0) {
    unsigned int v19 = (const std::string::value_type *)v17;
  }
  else {
    unsigned int v19 = (const std::string::value_type *)*v17;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    std::string::size_type v20 = v17[1];
  }
  uint64_t v21 = std::string::append(&v28, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v30 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v31);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31, (pxrInternal__aapl__pxrReserved__::VtValue *)&v32);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (sub_2168FC5B0((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
  {
    if ((v33 & 4) != 0) {
      uint64_t v23 = (*(uint64_t (**)(uint64_t *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
    }
    else {
      uint64_t v23 = v32;
    }
    long long v24 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v23;
    *(_OWORD *)(a5 + 16) = v24;
    uint64_t v25 = *(void *)(v23 + 32);
    *(void *)(a5 + 32) = v25;
    if (v25)
    {
      uint64_t v26 = (atomic_ullong *)(v25 - 16);
      if (*(void *)(a5 + 24)) {
        uint64_t v26 = *(atomic_ullong **)(a5 + 24);
      }
      atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return sub_2168EE084((uint64_t)&v32);
}

void sub_2170703D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_21707043C(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    unint64_t v7 = sub_2168FC3C4((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2168FC3C4((uint64_t)a1, a2);
    unint64_t v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_OWORD *)&v6[v8] = *(_OWORD *)(v3 + v8 * 8);
        v8 += 2;
      }
      while (2 * v5 != v8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_2170704D8(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA5ECC(a1);
  uint64_t v10 = (const char **)v9;
  unint64_t v11 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v11)
  {
    uint64_t v9 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    unint64_t v11 = (unint64_t)v9;
  }
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    size_t v13 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v13 = EmptyString[1];
  }
  unint64_t v14 = &v23;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v23, v13 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*((char *)EmptyString + 23) >= 0) {
      unsigned int v16 = EmptyString;
    }
    else {
      unsigned int v16 = (const void *)*EmptyString;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v14, v16, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 58;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v17 = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  }
  int v18 = *((char *)v17 + 23);
  if (v18 >= 0) {
    unsigned int v19 = (const std::string::value_type *)v17;
  }
  else {
    unsigned int v19 = (const std::string::value_type *)*v17;
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    std::string::size_type v20 = v17[1];
  }
  uint64_t v21 = std::string::append(&v23, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
  sub_217070834(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v26, a4);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_217070678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if ((a23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170706CC(uint64_t a1, _OWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(long long **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    unint64_t v12 = sub_2168FC3C4(a1, v11);
    size_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 16 * v4;
      uint64_t v15 = v12;
      do
      {
        long long v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  void v18[2] = 433;
  void v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2d &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

uint64_t sub_217070834(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = off_26C74F058;
  sub_2168F8DBC(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_2170708D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2170708F0(void *result, uint64_t **a2)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    uint64_t v4 = (uint64_t *)result[1];
    uint64_t v5 = v4 + 1;
    uint64_t v67 = *a2;
    uint64_t v68 = v4 + 3;
    do
    {
      sub_216ABBA60((uint64_t *)__p, v5);
      sub_216ABBA60((uint64_t *)&v80, v2);
      sub_21706EEE8((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (uint64_t *)&v80);
      std::string::size_type size = v80.__r_.__value_.__l.__size_;
      if (v80.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(v80.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
      }
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p[1];
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v7 + 8))(v7);
      }
      uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
      if (*v4 != *result)
      {
        sub_21703DB68(&v69, v2);
        sub_21707149C(&v69);
        sub_216ABBA60((uint64_t *)__p, v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer((uint64_t *)__p, (uint64_t)v4, &v71);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v71);
        uint64_t v9 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v9 + 8))(v9);
        }
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v10) {
          uint64_t v10 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
        unint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216AA5ECC(v4 + 2);
        size_t v13 = (const char **)v12;
        unint64_t v14 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v14)
        {
          unint64_t v12 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          unint64_t v14 = (unint64_t)v12;
        }
        if ((*v68 & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyunint64_t String = (uint64_t *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
        }
        if (*((char *)EmptyString + 23) >= 0) {
          size_t v16 = *((unsigned __int8 *)EmptyString + 23);
        }
        else {
          size_t v16 = EmptyString[1];
        }
        int v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v80, v16 + 1);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v18 = &v80;
        }
        else {
          int v18 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if (*((char *)EmptyString + 23) >= 0) {
            char v19 = EmptyString;
          }
          else {
            char v19 = (const void *)*EmptyString;
          }
          int v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v18, v19, v16);
        }
        *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v16) = 58;
        if ((*((void *)v10 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type v20 = (uint64_t *)((*((void *)v10 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          std::string::size_type v20 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
        }
        int v21 = *((char *)v20 + 23);
        if (v21 >= 0) {
          long long v22 = (const std::string::value_type *)v20;
        }
        else {
          long long v22 = (const std::string::value_type *)*v20;
        }
        if (v21 >= 0) {
          std::string::size_type v23 = *((unsigned __int8 *)v20 + 23);
        }
        else {
          std::string::size_type v23 = v20[1];
        }
        long long v24 = std::string::append(&v80, v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        std::string::size_type v73 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v76);
        sub_217071670(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v76, (uint64_t)String);
        if ((v76 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (SHIBYTE(v73) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v26) {
          uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        sub_21706FC3C(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (void *)v26 + 1, v68, (uint64_t)&v80);
        uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, __p);
        char IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)__p);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v29, (pxrInternal__aapl__pxrReserved__::SdfSpec *)__p);
        if ((IsDormant & 1) == 0)
        {
          std::string::size_type v30 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v2);
          uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v30);
          uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v2);
          uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v32);
          uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4 + 2);
          uint64_t v35 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v34);
          sub_21706E43C(Identifier, RealPath, v35, (uint64_t)&v76);
          pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
          sub_216BBA8E8((uint64_t)&v80, (long long *)__p);
          if (v75 < 0) {
            operator delete(v74);
          }
          if (SHIBYTE(v73) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v36) {
            uint64_t v36 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_21706FEE4(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (void *)v36 + 1, (uint64_t)&v80, v68);
          if (v78 < 0) {
            operator delete(v76);
          }
        }
        sub_2169B4408(&v80);
        uint64_t v37 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v37) {
          uint64_t v37 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        sub_217070194(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, v37, v68, (uint64_t)__p);
        uint64_t v38 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v38) {
          uint64_t v38 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        sub_21706FC3C(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (void *)v38 + 1, v68, (uint64_t)&v80);
        unint64_t v39 = v80.__r_.__value_.__r.__words[0];
        sub_2169B4408(&v80);
        uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, &v80);
        char v41 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v42, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
        if ((v41 & 1) == 0)
        {
          sub_21703DB68((uint64_t *)&v80, v2);
          double v43 = sub_21707149C((uint64_t *)&v80);
          std::string::size_type v44 = v80.__r_.__value_.__l.__size_;
          if (v80.__r_.__value_.__l.__size_
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v80.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string::size_type))(*(void *)v44 + 8))(v44);
          }
          *(double *)&v80.__r_.__value_.__l.__data_ = v43;
          *(double *)&v80.__r_.__value_.__l.__size_ = (double)v39 + -1.0;
          sub_216C564B4((uint64_t)__p, &v80);
          std::string v45 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v45) {
            std::string v45 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_2170704D8(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, v45, (uint64_t)__p, v68);
        }
        sub_2168F83DC((uint64_t)__p);
        std::string::size_type v46 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        if (!v46) {
          std::string::size_type v46 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
        }
        sub_217070194(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (void *)v46 + 10, v68, (uint64_t)__p);
        uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4 + 2);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v47, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, &v80);
        char v48 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v49, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
        uint64_t v5 = v4 + 1;
        unint64_t v3 = v67;
        if ((v48 & 1) == 0)
        {
          sub_21703DB68((uint64_t *)&v80, v2);
          *(double *)&std::string::size_type v50 = sub_21707149C((uint64_t *)&v80);
          std::string::size_type v51 = v80.__r_.__value_.__l.__size_;
          if (v80.__r_.__value_.__l.__size_
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v80.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string::size_type))(*(void *)v51 + 8))(v51);
          }
          sub_21703DB68((uint64_t *)&v76, v2);
          uint64_t v52 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v76);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(v52))
          {
            unint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216E08B08((uint64_t *)&v76);
            double EndTimeCode = pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(v53);
          }
          else
          {
            long long v55 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v76);
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v55, &v80);
            uint64_t v56 = sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80);
            uint64_t v57 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v57) {
              uint64_t v57 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            int HasInfo = pxrInternal__aapl__pxrReserved__::SdfSpec::HasInfo((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v57 + 480));
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v59, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
            double EndTimeCode = 0.0;
            if (HasInfo)
            {
              char v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08((uint64_t *)&v76);
              pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v60, &v79);
              uint64_t v61 = sub_216A663FC(&v79);
              uint64_t v62 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v62) {
                uint64_t v62 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              }
              pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v61, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v62 + 480), &v80);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v63, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v79);
              if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v80))
              {
                if ((v80.__r_.__value_.__s.__data_[8] & 4) != 0) {
                  unint64_t v64 = (std::string *)(*(uint64_t (**)(std::string *))((v80.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
                }
                                                                                + 168))(&v80);
                else {
                  unint64_t v64 = &v80;
                }
                double EndTimeCode = *(double *)&v64->__r_.__value_.__l.__data_;
              }
              sub_2168EE084((uint64_t)&v80);
            }
          }
          uint64_t v65 = v77;
          if (v77 && atomic_fetch_add_explicit((atomic_uint *volatile)(v77 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
          }
          v80.__r_.__value_.__r.__words[0] = v50;
          v80.__r_.__value_.__l.__size_ = v50;
          sub_216C564B4((uint64_t)__p, &v80);
          if (EndTimeCode - *(double *)&v50 != 0.0)
          {
            *(double *)&v80.__r_.__value_.__l.__data_ = *(double *)&v50 + EndTimeCode - *(double *)&v50;
            *(double *)&v80.__r_.__value_.__l.__size_ = EndTimeCode;
            sub_216C564B4((uint64_t)__p, &v80);
          }
          uint64_t v66 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v66) {
            uint64_t v66 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_2170704D8(v4 + 2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (void *)v66 + 10, (uint64_t)__p, v68);
        }
        sub_2168F83DC((uint64_t)__p);
        uint64_t result = (void *)v70;
        if (v70)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v70 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_2170711CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_2168EE084((uint64_t)&a35);
  uint64_t v41 = a29;
  if (a29 && atomic_fetch_add_explicit((atomic_uint *volatile)(a29 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  sub_2168F83DC((uint64_t)&a15);
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(a1);
}

double sub_21707149C(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(v2))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_216E08B08(a1);
    return pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(v3);
  }
  else
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v5, &v17);
    unint64_t v6 = sub_216A663FC(&v17);
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      unint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    int HasInfo = pxrInternal__aapl__pxrReserved__::SdfSpec::HasInfo((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 488));
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
    double v10 = 0.0;
    if (HasInfo)
    {
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216E08B08(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v11, &v16);
      unint64_t v12 = sub_216A663FC(&v16);
      size_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v13) {
        size_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(v12, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 488), &v17);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
      if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
      {
        if ((v18 & 4) != 0) {
          uint64_t v15 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
        }
        else {
          uint64_t v15 = (double *)&v17;
        }
        double v10 = *v15;
      }
      sub_2168EE084((uint64_t)&v17);
    }
    return v10;
  }
}

void sub_217071638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217071670(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  v10[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v10[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_217071710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

_WORD *sub_217071734(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26C771840;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_217071780(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C771840;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

BOOL sub_2170717B0(uint64_t a1, void *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    unint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return (*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v3 + 54) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_217071808(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217071848()
{
  return &unk_26C771920;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_217071854(uint64_t a1, uint64_t a2, uint64_t **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  void v14[4] = *MEMORY[0x263EF8340];
  unint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  memset(v14, 0, 24);
  sub_217071994((uint64_t *)v14, v7, v8, v8 - v7);
  pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifestFromLayers(v14, a4, (uint64_t *)&v12);
  size_t v13 = v14;
  sub_216850BF4((void ***)&v13);
  uint64_t v9 = sub_216AA5ECC((uint64_t *)&v12);
  double v10 = operator new(0x20uLL);
  void *v10 = &unk_26C771948;
  v10[1] = &v12;
  v10[2] = a1;
  void v10[3] = a2;
  void v14[3] = (std::string::size_type)v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(v9, a4, (uint64_t)v14);
  sub_216ABEE34(v14);
  return sub_216ABB798(&v12);
}

void sub_217071950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  uint64_t v5 = va_arg(va1, void);
  sub_216ABEE34((uint64_t *)va1);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_217071994(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_216BCCF4C((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_2170719FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216850BF4(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_217071A24(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C771948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_217071A78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C771948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_217071AB0(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this);
  if (result)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1[1]);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath((uint64_t *)&v18, v5, this);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v18)
      || (uint64_t v19 = "usdUtils/stitchClips.cpp",
          std::string::size_type v20 = "operator()",
          uint64_t v21 = 671,
          long long v22 = "auto pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_GenerateClipManifest(const SdfLayerRefPtr"
                " &, const SdfLayerRefPtr &, const SdfLayerRefPtrVector &, const SdfPath &)::(anonymous class)::operator("
                ")(const SdfPath &) const",
          char v23 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "generatedAttr", 0) & 1) != 0))
    {
      sub_216ABBA60((uint64_t *)&v19, a1[2]);
      unint64_t v6 = sub_216A64148(&v18);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(v6);
      unint64_t v7 = sub_216A64148(&v18);
      int Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(v7);
      uint64_t v9 = sub_216A64148(&v18);
      char IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(v9);
      pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer((uint64_t)&v19, this, (uint64_t)&TypeName, Variability, IsCustom);
      unint64_t v11 = v20;
      if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
      }
      std::string::size_type v20 = 0;
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1[3]);
      size_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v13) {
        size_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v12, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
      {
        unint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a1[2]);
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v15) {
          uint64_t v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v14, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v15 + 88), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      }
      sub_2168EE084((uint64_t)&v19);
    }
    return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
  }
  return result;
}

void sub_217071CA4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217071D20(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7719A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217071D60()
{
  return &unk_26C7719A8;
}

uint64_t sub_217071D6C(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, long long *a5)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = &off_26C755A30;
  sub_2169B3DA8(v10, a5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_217071E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217071E28(unint64_t a1, double *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v35 = *(a2 - 2);
                uint64_t v34 = a2 - 2;
                if (v35 < *(double *)v10)
                {
                  long long v87 = *(_OWORD *)v10;
                  *(_OWORD *)unint64_t v10 = *(_OWORD *)v34;
                  *(_OWORD *)uint64_t v34 = v87;
                }
                break;
              case 3uLL:
                sub_2170725C0((double *)v10, (double *)(v10 + 16), a2 - 2);
                break;
              case 4uLL:
                sub_2170728F8((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), (unint64_t *)a2 - 2);
                break;
              case 5uLL:
                uint64_t v36 = (long long *)(v10 + 16);
                uint64_t v37 = (long long *)(v10 + 32);
                uint64_t v38 = (long long *)(v10 + 48);
                sub_2170728F8((double *)v10, (double *)(v10 + 16), (double *)(v10 + 32), (unint64_t *)(v10 + 48));
                double v40 = *(a2 - 2);
                unint64_t v39 = a2 - 2;
                if (v40 < *(double *)(v10 + 48))
                {
                  long long v41 = *v38;
                  *uint64_t v38 = *(_OWORD *)v39;
                  *(_OWORD *)unint64_t v39 = v41;
                  if (*(double *)v38 < *(double *)v37)
                  {
                    long long v42 = *v37;
                    *uint64_t v37 = *v38;
                    *uint64_t v38 = v42;
                    if (*(double *)v37 < *(double *)v36)
                    {
                      long long v43 = *v36;
                      *uint64_t v36 = *v37;
                      *uint64_t v37 = v43;
                      if (*(double *)(v10 + 16) < *(double *)v10)
                      {
                        long long v88 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v36;
                        *uint64_t v36 = v88;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            std::string::size_type v44 = (double *)(v10 + 16);
            BOOL v46 = (double *)v10 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                unint64_t v48 = v10;
                do
                {
                  uint64_t v49 = v44;
                  double v50 = *(double *)(v48 + 16);
                  if (v50 < *(double *)v48)
                  {
                    uint64_t v51 = *(void *)(v48 + 24);
                    uint64_t v52 = v47;
                    while (1)
                    {
                      *(_OWORD *)(v10 + v52 + 16) = *(_OWORD *)(v10 + v52);
                      if (!v52) {
                        break;
                      }
                      double v53 = *(double *)(v10 + v52 - 16);
                      v52 -= 16;
                      if (v50 >= v53)
                      {
                        uint64_t v54 = v10 + v52 + 16;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v54 = v10;
LABEL_81:
                    *(double *)uint64_t v54 = v50;
                    *(void *)(v54 + 8) = v51;
                  }
                  std::string::size_type v44 = v49 + 2;
                  v47 += 16;
                  unint64_t v48 = (unint64_t)v49;
                }
                while (v49 + 2 != a2);
              }
            }
            else if (!v46)
            {
              do
              {
                unint64_t v79 = (unint64_t)v44;
                double v80 = *(double *)(a1 + 16);
                if (v80 < *(double *)a1)
                {
                  uint64_t v81 = *(void *)(a1 + 24);
                  unint64_t v82 = v44;
                  do
                  {
                    *(_OWORD *)unint64_t v82 = *((_OWORD *)v82 - 1);
                    double v83 = *(v82 - 4);
                    v82 -= 2;
                  }
                  while (v80 < v83);
                  *unint64_t v82 = v80;
                  *((void *)v82 + 1) = v81;
                }
                v44 += 2;
                a1 = v79;
              }
              while ((double *)(v79 + 16) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((double *)v10 != a2)
            {
              int64_t v55 = (v12 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  uint64_t v59 = (double *)(v10 + 16 * v58);
                  if (2 * v57 + 2 < (uint64_t)v12 && *v59 < v59[2])
                  {
                    v59 += 2;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  char v60 = (double *)(v10 + 16 * v57);
                  double v61 = *v60;
                  if (*v59 >= *v60)
                  {
                    uint64_t v62 = *((void *)v60 + 1);
                    do
                    {
                      char v63 = v60;
                      char v60 = v59;
                      *(_OWORD *)char v63 = *(_OWORD *)v59;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = 2 * v58;
                      uint64_t v58 = (2 * v58) | 1;
                      uint64_t v59 = (double *)(v10 + 16 * v58);
                      uint64_t v65 = v64 + 2;
                      if (v65 < (uint64_t)v12 && *v59 < v59[2])
                      {
                        v59 += 2;
                        uint64_t v58 = v65;
                      }
                    }
                    while (*v59 >= v61);
                    *char v60 = v61;
                    *((void *)v60 + 1) = v62;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              uint64_t v66 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v67 = 0;
                long long v89 = *(_OWORD *)v10;
                uint64_t v68 = (double *)v10;
                do
                {
                  uint64_t v69 = v68;
                  v68 += 2 * v67 + 2;
                  uint64_t v70 = 2 * v67;
                  uint64_t v67 = (2 * v67) | 1;
                  uint64_t v71 = v70 + 2;
                  if (v71 < v66 && *v68 < v68[2])
                  {
                    v68 += 2;
                    uint64_t v67 = v71;
                  }
                  *(_OWORD *)uint64_t v69 = *(_OWORD *)v68;
                }
                while (v67 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 -= 2;
                if (v68 == a2)
                {
                  *(_OWORD *)uint64_t v68 = v89;
                }
                else
                {
                  *(_OWORD *)uint64_t v68 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v89;
                  uint64_t v72 = (uint64_t)v68 - v10 + 16;
                  if (v72 >= 17)
                  {
                    unint64_t v73 = (((unint64_t)v72 >> 4) - 2) >> 1;
                    uint64_t v74 = (double *)(v10 + 16 * v73);
                    double v75 = *v68;
                    if (*v74 < *v68)
                    {
                      uint64_t v76 = *((void *)v68 + 1);
                      do
                      {
                        uint64_t v77 = v68;
                        uint64_t v68 = v74;
                        *(_OWORD *)uint64_t v77 = *(_OWORD *)v74;
                        if (!v73) {
                          break;
                        }
                        unint64_t v73 = (v73 - 1) >> 1;
                        uint64_t v74 = (double *)(v10 + 16 * v73);
                      }
                      while (*v74 < v75);
                      *uint64_t v68 = v75;
                      *((void *)v68 + 1) = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = (double *)(v10 + 16 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x801)
          {
            sub_2170725C0((double *)a1, (double *)(a1 + 16 * (v12 >> 1)), a2 - 2);
            sub_2170725C0((double *)(a1 + 16), v14 - 2, a2 - 4);
            sub_2170725C0((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v13), a2 - 6);
            sub_2170725C0(v14 - 2, v14, (double *)(a1 + 16 + 16 * v13));
            long long v84 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)unint64_t v14 = v84;
          }
          else
          {
            sub_2170725C0((double *)(a1 + 16 * (v12 >> 1)), (double *)a1, a2 - 2);
          }
          --a3;
          double v15 = *(double *)a1;
          if ((a4 & 1) != 0 || *(double *)(a1 - 16) < v15) {
            break;
          }
          if (v15 >= *(a2 - 2))
          {
            unint64_t v28 = a1 + 16;
            do
            {
              unint64_t v10 = v28;
              if (v28 >= (unint64_t)a2) {
                break;
              }
              v28 += 16;
            }
            while (v15 >= *(double *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              double v27 = *(double *)(v10 + 16);
              v10 += 16;
            }
            while (v15 >= v27);
          }
          std::string v29 = a2;
          if (v10 < (unint64_t)a2)
          {
            std::string v29 = a2;
            do
            {
              double v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v15 < v30);
          }
          uint64_t v31 = *(void *)(a1 + 8);
          while (v10 < (unint64_t)v29)
          {
            long long v86 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v29;
            *(_OWORD *)std::string v29 = v86;
            do
            {
              double v32 = *(double *)(v10 + 16);
              v10 += 16;
            }
            while (v15 >= v32);
            do
            {
              double v33 = *(v29 - 2);
              v29 -= 2;
            }
            while (v15 < v33);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(double *)(v10 - 16) = v15;
          *(void *)(v10 - 8) = v31;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 8);
        do
        {
          double v18 = *(double *)(a1 + v16 + 16);
          v16 += 16;
        }
        while (v18 < v15);
        unint64_t v19 = a1 + v16;
        std::string::size_type v20 = a2;
        if (v16 == 16)
        {
          std::string::size_type v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20) {
              break;
            }
            double v22 = *(v20 - 2);
            v20 -= 2;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            double v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (v21 >= v15);
        }
        unint64_t v10 = a1 + v16;
        if (v19 < (unint64_t)v20)
        {
          char v23 = v20;
          do
          {
            long long v85 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v23;
            *(_OWORD *)char v23 = v85;
            do
            {
              double v24 = *(double *)(v10 + 16);
              v10 += 16;
            }
            while (v24 < v15);
            do
            {
              double v25 = *(v23 - 2);
              v23 -= 2;
            }
            while (v25 >= v15);
          }
          while (v10 < (unint64_t)v23);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(double *)(v10 - 16) = v15;
        *(void *)(v10 - 8) = v17;
        if (v19 >= (unint64_t)v20) {
          break;
        }
LABEL_30:
        sub_217071E28(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v26 = sub_2170726A0(a1, v10 - 16);
      if (sub_2170726A0(v10, (uint64_t)a2)) {
        break;
      }
      if (!v26) {
        goto LABEL_30;
      }
    }
    a2 = (double *)(v10 - 16);
    if (!v26) {
      continue;
    }
    break;
  }
}

double *sub_2170725C0(double *result, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        long long v7 = *(_OWORD *)result;
        *(_OWORD *)__n128 result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)__n128 result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *(_OWORD *)result;
      *(_OWORD *)__n128 result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_2170726A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      sub_2170725C0((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_2170728F8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1;
    case 5:
      uint64_t v17 = (long long *)(a1 + 16);
      double v18 = (long long *)(a1 + 32);
      unint64_t v19 = (long long *)(a1 + 48);
      sub_2170728F8((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48));
      double v21 = *(double *)(a2 - 16);
      std::string::size_type v20 = (long long *)(a2 - 16);
      if (v21 < *(double *)(a1 + 48))
      {
        long long v22 = *v19;
        *unint64_t v19 = *v20;
        *std::string::size_type v20 = v22;
        if (*(double *)v19 < *(double *)v18)
        {
          long long v23 = *v18;
          *double v18 = *v19;
          *unint64_t v19 = v23;
          if (*(double *)v18 < *(double *)v17)
          {
            long long v24 = *v17;
            *uint64_t v17 = *v18;
            *double v18 = v24;
            if (*(double *)(a1 + 16) < *(double *)a1)
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *uint64_t v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = (double *)(a1 + 32);
      sub_2170725C0((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 sub_2170728F8(double *a1, double *a2, double *a3, unint64_t *a4)
{
  sub_2170725C0(a1, a2, a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_2170729C4(const char **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, unsigned char *a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  long long v7 = &unk_26C7501AB;
  v6[0] = *a5;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(a1, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  return sub_2168EE084((uint64_t)v6);
}

void sub_217072A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_217072A50@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  for (; !sub_216ABD870((uint64_t)a1, a2); ++a1[1].n128_u64[0])
  {
    unint64_t v8 = a1[1].n128_u64[0];
    v10[0] = a1->n128_u64[1];
    v10[1] = v8;
    if (sub_217072AD8((uint64_t)v10, a3)) {
      break;
    }
  }
  __n128 result = *a1;
  *a4 = *a1;
  a4[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

uint64_t sub_217072AD8(uint64_t a1, unsigned __int8 *a2)
{
  sub_21697E720(*(uint64_t **)a1, *(void *)(a1 + 8), &__s1);
  if ((v20 & 0x80u) == 0) {
    size_t v3 = v20;
  }
  else {
    size_t v3 = __n;
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 == v4)
  {
    if (v5 >= 0) {
      long long v6 = a2;
    }
    else {
      long long v6 = *(unsigned __int8 **)a2;
    }
    if ((v20 & 0x80) != 0)
    {
      uint64_t v16 = __s1;
      BOOL v15 = memcmp(__s1, v6, __n) == 0;
      goto LABEL_23;
    }
    if (!v20) {
      return 1;
    }
    uint64_t v7 = v20 - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v9 = v10;
      int v12 = *v6++;
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
  }
  else
  {
    BOOL v15 = 0;
  }
  if ((v20 & 0x80) != 0)
  {
    uint64_t v16 = __s1;
LABEL_23:
    operator delete(v16);
  }
  return v15;
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::~UsdUtilsTimeCodeRangeTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::UsdUtilsTimeCodeRangeTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "NONE", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, ":", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "x", 0);
  uint64_t v3 = *this;
  BOOL v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v15 = v4;
    }
  }
  int v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    unint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  int v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    int v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *)this;
}

void sub_217072DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec(std::string *__str)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    if (!v3) {
      uint64_t v3 = sub_2170737EC(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    }
    if (((unint64_t)v3[1] & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)(((unint64_t)v3[1] & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v3);
    }
    pxrInternal__aapl__pxrReserved__::TfStringSplit(__str, (char *)EmptyString, (uint64_t *)&v20);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v20 + 1) - v20) >> 3) < 3)
    {
      *(double *)&uint64_t v15 = 0.0;
      if (sub_217073294(v20, (double *)&v15))
      {
        long long v6 = (std::string *)v20;
        if (*((void *)&v20 + 1) - (void)v20 == 24)
        {
          sub_2170734EC((double *)&v22, *(double *)&v15, *(double *)&v15);
LABEL_23:
          *(void *)&long long v16 = &v20;
          sub_216782F20((void ***)&v16);
          return;
        }
        unint64_t v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
        if (!v8) {
          unint64_t v8 = sub_2170737EC(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
        }
        if (((unint64_t)v8[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
          int v9 = (uint64_t *)(((unint64_t)v8[2] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          int v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
        }
        pxrInternal__aapl__pxrReserved__::TfStringSplit(v6 + 1, (char *)v9, (uint64_t *)&v16);
        sub_21680F80C((uint64_t *)&v20);
        long long v20 = v16;
        uint64_t v21 = v17;
        uint64_t v17 = 0;
        long long v16 = 0uLL;
        double v24 = COERCE_DOUBLE(&v16);
        sub_216782F20((void ***)&v24);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v20 + 1) - v20) >> 3) < 3)
        {
          double v10 = *(double *)&v15;
          double v24 = *(double *)&v15;
          if (sub_217073294(v20, &v24))
          {
            uint64_t v14 = 0x3FF0000000000000;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v20 + 1) - v20) >> 3) < 2)
            {
              int v11 = *(void ***)&v24;
              double v12 = 1.0;
              if (v24 < v10) {
                double v12 = -1.0;
              }
            }
            else
            {
              if (!sub_217073294(v20 + 24, (double *)&v14))
              {
                *(void *)&long long v16 = "usdUtils/timeCodeRange.cpp";
                *((void *)&v16 + 1) = "CreateFromFrameSpec";
                uint64_t v17 = 122;
                uint64_t v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFr"
                      "ameSpec(const std::string &)";
                char v19 = 0;
                if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v13 = __str;
                }
                else {
                  uint64_t v13 = (std::string *)__str->__r_.__value_.__r.__words[0];
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid FrameSpec: \"%s\"", (const char *)v13);
                goto LABEL_22;
              }
              int v11 = *(void ***)&v24;
              double v12 = *(double *)&v14;
            }
            sub_217073524((double *)&v22, v10, *(double *)&v11, v12);
            goto LABEL_23;
          }
          *(void *)&long long v16 = "usdUtils/timeCodeRange.cpp";
          *((void *)&v16 + 1) = "CreateFromFrameSpec";
          uint64_t v17 = 115;
          uint64_t v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpe"
                "c(const std::string &)";
          char v19 = 0;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v7 = __str;
          }
          else {
            uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
          }
        }
        else
        {
          *(void *)&long long v16 = "usdUtils/timeCodeRange.cpp";
          *((void *)&v16 + 1) = "CreateFromFrameSpec";
          uint64_t v17 = 109;
          uint64_t v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpe"
                "c(const std::string &)";
          char v19 = 0;
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v7 = __str;
          }
          else {
            uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
          }
        }
      }
      else
      {
        *(void *)&long long v16 = "usdUtils/timeCodeRange.cpp";
        *((void *)&v16 + 1) = "CreateFromFrameSpec";
        uint64_t v17 = 92;
        uint64_t v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec("
              "const std::string &)";
        char v19 = 0;
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v7 = __str;
        }
        else {
          uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid FrameSpec: \"%s\"", (const char *)v7);
    }
    else
    {
      *(void *)&long long v16 = "usdUtils/timeCodeRange.cpp";
      *((void *)&v16 + 1) = "CreateFromFrameSpec";
      uint64_t v17 = 86;
      uint64_t v18 = "static UsdUtilsTimeCodeRange pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec(co"
            "nst std::string &)";
      char v19 = 0;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v5 = __str;
      }
      else {
        int v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid FrameSpec: \"%s\"", (const char *)v5);
    }
LABEL_22:
    long long v22 = xmmword_2174AEE60;
    uint64_t v23 = 0x3FF0000000000000;
    goto LABEL_23;
  }
}

void sub_217073258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a13 = (void **)&a19;
  sub_216782F20(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_217073294(uint64_t a1, double *a2)
{
  size_t __idx = 0;
  double v4 = std::stod((const std::string *)a1, &__idx);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (__idx != v5) {
    return 0;
  }
  *a2 = v4;
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::operator>>(uint64_t *a1, void *a2)
{
  memset(&__p, 0, sizeof(__p));
  sub_216EE1A64(a1, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::CreateFromFrameSpec(&__p);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2170734CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_2170734EC(double *a1, double a2, double a3)
{
  double v3 = -1.0;
  if (a3 >= a2) {
    double v3 = 1.0;
  }
  return sub_217073524(a1, a2, a3, v3);
}

double *sub_217073524(double *a1, double a2, double a3, double a4)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  if (a2 == -1.79769313e308)
  {
    uint64_t v6 = "usdUtils/timeCodeRange.h";
    uint64_t v7 = "UsdUtilsTimeCodeRange";
    uint64_t v8 = 267;
    int v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTime"
         "Code, const double)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"startTimeCode cannot be UsdTimeCode::EarliestTime()");
  }
  else if (a3 == -1.79769313e308)
  {
    uint64_t v6 = "usdUtils/timeCodeRange.h";
    uint64_t v7 = "UsdUtilsTimeCodeRange";
    uint64_t v8 = 279;
    int v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTime"
         "Code, const double)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"endTimeCode cannot be UsdTimeCode::EarliestTime()");
  }
  else if (a4 <= 0.0)
  {
    if (a4 < 0.0)
    {
      if (a3 <= a2) {
        return a1;
      }
      uint64_t v6 = "usdUtils/timeCodeRange.h";
      uint64_t v7 = "UsdUtilsTimeCodeRange";
      uint64_t v8 = 302;
      int v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTi"
           "meCode, const double)";
      char v10 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"endTimeCode cannot be greater than startTimeCode with negative stride");
    }
    else
    {
      uint64_t v6 = "usdUtils/timeCodeRange.h";
      uint64_t v7 = "UsdUtilsTimeCodeRange";
      uint64_t v8 = 307;
      int v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTi"
           "meCode, const double)";
      char v10 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"stride cannot be zero");
    }
  }
  else
  {
    if (a3 >= a2) {
      return a1;
    }
    uint64_t v6 = "usdUtils/timeCodeRange.h";
    uint64_t v7 = "UsdUtilsTimeCodeRange";
    uint64_t v8 = 294;
    int v9 = "pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRange::UsdUtilsTimeCodeRange(const UsdTimeCode, const UsdTime"
         "Code, const double)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"endTimeCode cannot be less than startTimeCode with positive stride");
  }
  *(_OWORD *)a1 = xmmword_2174AEE60;
  a1[2] = 1.0;
  return a1;
}

void *sub_217073734(void *result, pxrInternal__aapl__pxrReserved__::UsdTimeCode *this)
{
  *__n128 result = this;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  if (!this
    || (unint64_t v2 = vcvtmd_u64_f64((*((double *)this + 1) - *(double *)this + *((double *)this + 2)) / *((double *)this + 2)),
        double v3 = *(double *)this,
        result[2] = v2,
        *((double *)result + 3) = v3,
        result[1] >= v2))
  {
    *(_OWORD *)__n128 result = 0u;
    *((_OWORD *)result + 1) = 0u;
  }
  return result;
}

atomic_uint **sub_2170737EC(atomic_ullong *a1)
{
  __n128 result = sub_217073834();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::~UsdUtilsTimeCodeRangeTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_217073834()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens_StaticTokenType::UsdUtilsTimeCodeRangeTokens_StaticTokenType(v0);
  return v0;
}

void sub_217073864(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage(long long *a1, const std::string *a2, uint64_t a3, char a4)
{
  sub_216779094(&__p, "");
  memset(v10, 0, sizeof(v10));
  uint64_t v8 = sub_217073940(a1, a2, a3, &__p, (uint64_t)v10, a4);
  double v12 = (void **)v10;
  sub_216782F20(&v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_217073918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217073940(long long *a1, const std::string *a2, uint64_t a3, const std::string *a4, uint64_t a5, char a6)
{
  v18[1] = *MEMORY[0x263EF8340];
  sub_2170593EC((uint64_t)v14);
  v14[0] = &unk_26C7719C8;
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::UsdZipFileWriter(v18);
  std::string::operator=(v15, a4);
  if (v17 != (unsigned char *)a5) {
    sub_21680F694((uint64_t)v17, *(std::string **)a5, *(long long **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3));
  }
  char v16 = a6;
  if (pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Build((pxrInternal__aapl__pxrReserved__ *)v14, a1, a3))
  {
    uint64_t v12 = sub_2170743CC((uint64_t)v14, a2);
  }
  else
  {
    uint64_t v12 = 0;
  }
  v14[0] = &unk_26C7719C8;
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)v18);
  sub_217059D5C((uint64_t)v14);
  return v12;
}

void sub_217073A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(char *a1, char *a2, uint64_t a3, char a4)
{
  *(void *)&long long v74 = *MEMORY[0x263EF8340];
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)a1);
  pxrInternal__aapl__pxrReserved__::ArchNormPath(a2, &v68);
  pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_216778F24(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string __dst = __p;
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v10 = 0;
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtils_ExtractExternalReferences((uint64_t)&__dst, 0, &v64, &v61, &v58);
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v11 = *(void *)(a3 + 8);
    if (v11)
    {
      sub_216778F24(&__str, *(void **)a3, v11);
      goto LABEL_15;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    std::string __str = *(std::string *)a3;
    goto LABEL_15;
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a1, &__str);
LABEL_15:
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
  if (!v12) {
    uint64_t v12 = sub_216EE5494(&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
  }
  char v14 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(v12, (unsigned __int8 *)&v55);
  if ((v14 & 1) == 0)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v17 = (unsigned __int8 *)p_str + v16;
    if (v16)
    {
      uint64_t v18 = p_str;
      char v19 = (std::string *)((char *)p_str + v16);
      do
      {
        long long v20 = v18;
        uint64_t v21 = (unsigned __int8 *)v18;
        while (1)
        {
          int v22 = *v21++;
          if (v22 == 46) {
            break;
          }
          long long v20 = (std::string *)v21;
          if (v21 == v17)
          {
            long long v20 = v19;
            goto LABEL_33;
          }
        }
        uint64_t v18 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
        char v19 = v20;
      }
      while (v21 != v17);
    }
    else
    {
      long long v20 = p_str;
    }
LABEL_33:
    int64_t v23 = (char *)v20 - (char *)p_str;
    if (v20 == (std::string *)v17) {
      std::string::size_type v24 = 0;
    }
    else {
      std::string::size_type v24 = v23 + 1;
    }
    std::string::basic_string(&__p, &__str, 0, v24, (std::allocator<char> *)&p_p);
    long long v25 = (pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
    if (!v25) {
      long long v25 = sub_216EE5494(&pxrInternal__aapl__pxrReserved__::UsdUsdcFileFormatTokens);
    }
    if ((*(void *)v25 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((*(void *)v25 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
    }
    int v27 = *((char *)EmptyString + 23);
    if (v27 >= 0) {
      unint64_t v28 = (const std::string::value_type *)EmptyString;
    }
    else {
      unint64_t v28 = (const std::string::value_type *)*EmptyString;
    }
    if (v27 >= 0) {
      std::string::size_type v29 = *((unsigned __int8 *)EmptyString + 23);
    }
    else {
      std::string::size_type v29 = EmptyString[1];
    }
    double v30 = std::string::append(&__p, v28, v29);
    std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
    v73.__r_.__value_.__r.__words[0] = v30->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
    char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = v31;
    __str.__r_.__value_.__l.__size_ = v73.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v32;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v64 != v65 || v61 != v62 || v58 != v59)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/usdzPackage.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCreateNewARKitUsdzPackage";
    __p.__r_.__value_.__r.__words[2] = 178;
    unint64_t v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(const SdfAssetPath &, const std::stri"
          "ng &, const std::string &, BOOL)";
    char v49 = 0;
    if (a1[23] >= 0) {
      double v33 = a1;
    }
    else {
      double v33 = *(char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"The given asset '%s' contains one or more composition arcs referencing external USD files. Flattening it to a single .usdc file before packaging. This will result in loss of features such as variantSets and all asset references to be absolutized.", v13, v33);
    pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t)&__dst, 0, &v54);
    sub_216779094(&__p, ".usdc");
    pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName((uint64_t *)&__str, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (sub_2170402E0(0))
    {
      if (a1[23] >= 0) {
        uint64_t v36 = a1;
      }
      else {
        uint64_t v36 = *(char **)a1;
      }
      p_dst = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      uint64_t v38 = &v73;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v38 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Flattening asset @%s@ located at '%s' to temporary layer at path '%s'.\n", v34, v35, v36, p_dst, v38);
    }
    unint64_t v39 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v54);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    char v40 = pxrInternal__aapl__pxrReserved__::UsdStage::Export(v39, (const char *)&v73, 0, (uint64_t)&__p);
    sub_2167877AC((uint64_t)&__p, (void *)__p.__r_.__value_.__l.__size_);
    if (v40)
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&__p);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_216778F24(&v71, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v71 = __dst;
      }
      p_p = 0;
      uint64_t v52 = 0;
      double v53 = 0;
      uint64_t v69 = &p_p;
      char v70 = 0;
      p_p = operator new(0x18uLL);
      uint64_t v52 = p_p;
      double v53 = (char *)p_p + 24;
      uint64_t v52 = sub_21695F6C0((uint64_t)&v53, (long long *)&v71, (long long *)&v72, (char *)p_p);
      int v43 = sub_217073940((long long *)&__p, &v68, (uint64_t)&__str, &__dst, (uint64_t)&p_p, a4);
      uint64_t v69 = &p_p;
      sub_216782F20(&v69);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (v50 < 0) {
        operator delete(v48);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v43) {
          goto LABEL_83;
        }
      }
      else if (v43)
      {
LABEL_83:
        pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)&v73);
        uint64_t v10 = 1;
LABEL_89:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        sub_216E10FB8(&v54);
        goto LABEL_92;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/usdzPackage.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCreateNewARKitUsdzPackage";
      __p.__r_.__value_.__r.__words[2] = 207;
      unint64_t v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(const SdfAssetPath &, const std::st"
            "ring &, const std::string &, BOOL)";
      char v49 = 0;
      std::string v45 = &v73;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v45 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to create a .usdz package from temporary, flattened layer '%s'.", v44, v45);
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdUtils/usdzPackage.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"UsdUtilsCreateNewARKitUsdzPackage";
      __p.__r_.__value_.__r.__words[2] = 191;
      unint64_t v48 = "BOOL pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage(const SdfAssetPath &, const std::st"
            "ring &, const std::string &, BOOL)";
      char v49 = 0;
      pxrInternal__aapl__pxrReserved__::UsdDescribe(&v54, &p_p);
      if (SHIBYTE(v53) >= 0) {
        long long v42 = &p_p;
      }
      else {
        long long v42 = p_p;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed to flatten and export the USD stage '%s'.", v41, v42);
      if (SHIBYTE(v53) < 0) {
        operator delete(p_p);
      }
    }
    uint64_t v10 = 0;
    goto LABEL_89;
  }
  if (v14)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v10 = sub_217073940((long long *)a1, &v68, (uint64_t)&__str, &__dst, (uint64_t)&__p, a4);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_216782F20((void ***)&v73);
  }
  else
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_216778F24(&v73, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string v73 = __dst;
    }
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    LOBYTE(v52) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_21695F6C0((uint64_t)&__p.__r_.__value_.__r.__words[2], (long long *)&v73, &v74, __p.__r_.__value_.__l.__data_);
    uint64_t v10 = sub_217073940((long long *)a1, &v68, (uint64_t)&__str, &__dst, (uint64_t)&__p, a4);
    p_p = &__p;
    sub_216782F20((void ***)&p_p);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
LABEL_92:
  if (v56 < 0) {
    operator delete(v55);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  sub_216782F20((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  sub_216782F20((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  sub_216782F20((void ***)&__p);
  if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_97:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_98:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_2170741E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  a12 = &a40;
  sub_216782F20((void ***)&a12);
  a12 = &a43;
  sub_216782F20((void ***)&a12);
  a12 = &a46;
  sub_216782F20((void ***)&a12);
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  if (*(char *)(v46 - 145) < 0) {
    operator delete(*(void **)(v46 - 168));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170743CC(uint64_t a1, const std::string *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::CreateNew((uint64_t)a2, &v5);
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::operator=((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile **)(a1 + 512), &v5);
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)&v5);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdUtils_AssetLocalizationPackage::Write(a1, a2);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::Save((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile **)(a1 + 512));
  }
  return result;
}

void sub_21707443C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217074450(void *a1)
{
  *a1 = &unk_26C7719C8;
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::~UsdZipFileWriter((pxrInternal__aapl__pxrReserved__::UsdZipFileWriter *)(a1 + 64));

  return sub_217059D5C((uint64_t)a1);
}

BOOL sub_2170744A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFileWriter::AddFile((FILE ***)(a1 + 512), a2, a3, (uint64_t)v5);
  if ((v6 & 0x80000000) == 0) {
    return v6 != 0;
  }
  BOOL v3 = v5[1] != 0;
  operator delete(v5[0]);
  return v3;
}

void *pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::MakeFullyQualifiedURL@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t *a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *a2;
  }
  uint64_t v11 = [NSString stringWithUTF8String:v10];
  uint64_t v12 = (void *)[NSURL URLWithString:v11];
  if ([v12 scheme])
  {
    uint64_t result = [((id)objc_msgSend(v12, "pathExtension")) isEqualToString:@"usdz"];
    if (result)
    {
      uint64_t v49 = 0;
      char v50 = 0;
      uint64_t v51 = 0;
      char v14 = (void *)[MEMORY[0x263F08BA0] componentsWithString:v11];
      [v14 setQuery:0];
      sub_216779094(__p, (char *)[((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "URL"), "absoluteString"), "UTF8String")) UTF8String]);
      if (sub_217074AA4((uint64_t *)(a1 + 592), (uint64_t)&v49, __p))
      {
        if (*(unsigned char *)(v51 + 40))
        {
          uint64_t v15 = (void *)(v51 + 48);
          if (*(char *)(v51 + 71) < 0) {
            uint64_t v15 = (void *)*v15;
          }
          std::string::size_type v16 = (void *)[NSString stringWithUTF8String:v15];
          uint64_t v17 = [v16 stringByAddingPercentEncodingWithAllowedCharacters:[MEMORY[0x263F08708] URLQueryAllowedCharacterSet]];
          uint64_t v18 = (void *)[MEMORY[0x263F08BA0] componentsWithString:v11];
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          char v19 = (void *)[v18 queryItems];
          uint64_t v20 = [v19 countByEnumeratingWithState:&v43 objects:v53 count:16];
          if (!v20) {
            goto LABEL_18;
          }
          int v21 = 0;
          uint64_t v22 = *(void *)v44;
          do
          {
            for (uint64_t i = 0; i != v20; ++i)
            {
              if (*(void *)v44 != v22) {
                objc_enumerationMutation(v19);
              }
              v21 |= [objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * i), "name") isEqualToString:@"resource"];
            }
            uint64_t v20 = [v19 countByEnumeratingWithState:&v43 objects:v53 count:16];
          }
          while (v20);
          if ((v21 & 1) == 0)
          {
LABEL_18:
            [v18 setQuery:[NSString stringWithFormat:@"resource=%@", v17]];
            sub_216779094(a5, (char *)[((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "URL"), "absoluteString"), "UTF8String")) UTF8String]);
            if (v48 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v51 = 0;
            return sub_21685C048(&v49);
          }
        }
      }
      else
      {
        *a4 = 0;
      }
      if (v48 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v51 = 0;
      uint64_t result = sub_21685C048(&v49);
    }
    if (*((char *)a2 + 23) < 0) {
      return sub_216778F24(a5, *a2, (unint64_t)a2[1]);
    }
    *(_OWORD *)a5 = *(_OWORD *)a2;
    a5[2] = a2[2];
    return result;
  }
  if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2)
    && (*((char *)a3 + 23) >= 0 ? (std::string::size_type v24 = a3) : (std::string::size_type v24 = (uint64_t *)*a3),
        long long v25 = objc_msgSend(NSURL, "URLWithString:", objc_msgSend(NSString, "stringWithUTF8String:", v24)), objc_msgSend(v25, "scheme")))
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v26 = a2;
    }
    else {
      BOOL v26 = *a2;
    }
    uint64_t v38 = [NSString stringWithUTF8String:v26];
    if (objc_msgSend((id)objc_msgSend(v25, "pathExtension"), "isEqualToString:", @"usdz"))
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v37 = [MEMORY[0x263F08BA0] componentsWithString:[v25 absoluteString]];
      int v27 = (void *)[v37 queryItems];
      uint64_t v28 = [v27 countByEnumeratingWithState:&v39 objects:v52 count:16];
      if (v28)
      {
        uint64_t v29 = *(void *)v40;
        while (2)
        {
          for (uint64_t j = 0; j != v28; ++j)
          {
            if (*(void *)v40 != v29) {
              objc_enumerationMutation(v27);
            }
            std::string::size_type v31 = *(void **)(*((void *)&v39 + 1) + 8 * j);
            if (objc_msgSend((id)objc_msgSend(v31, "name"), "isEqualToString:", @"resource"))
            {
              uint64_t v33 = [[(id)objc_msgSend(v31, "value") stringByRemovingPercentEncoding];
              uint64_t v34 = [[[NSURL URLWithString:v38 relativeToURL:[NSURL URLWithString:v33]] absoluteURL] absoluteString];
              uint64_t v35 = [objc_alloc(MEMORY[0x263F08BD0]) initWithName:@"resource" value:v34];
              uint64_t v36 = (void *)[MEMORY[0x263EFF980] arrayWithCapacity:1];
              [v36 addObject:v35];
              [v37 setQueryItems:v36];
              return sub_216779094(a5, (char *)[v37 string]);
            }
          }
          uint64_t v28 = [v27 countByEnumeratingWithState:&v39 objects:v52 count:16];
          if (v28) {
            continue;
          }
          break;
        }
      }
    }
    if (*((char *)a2 + 23) >= 0) {
      char v32 = a2;
    }
    else {
      char v32 = *a2;
    }
    return sub_216779094(a5, (char *)[NSURL URLWithString:[NSString stringWithUTF8String:[NSURL absoluteURL][NSURL absoluteString]] UTF8String]);
  }
  else
  {
    return sub_216779094(a5, "");
  }
}

void sub_217074A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  a38 = 0;
  sub_21685C048(&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_217074AA4(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_217076434(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))sub_217076770, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::IsRelativePath(uint64_t a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::TfIsRelativePath(a2);
}

double pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::GetModificationTime()
{
  return 0.0;
}

void pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchFile(uint64_t a1@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X4>, std::__shared_weak_count **a4@<X8>)
{
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = 0;
  int v9 = v8 + 1;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C771AD0;
  v8[1].__shared_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  uint64_t v10 = (uint64_t *)(a1 + 8);
  uint64_t v23 = 0;
  if (sub_217074D88(v10, (uint64_t)&v21, a2))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v23 + 48);
    *a4 = *(std::__shared_weak_count **)(v23 + 40);
    a4[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = 0;
    sub_21685C048(&v21);
    sub_216784EC4(v8);
  }
  else
  {
    if ((char)a2[23] >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(unsigned char **)a2;
    }
    uint64_t v13 = [NSString stringWithUTF8String:v12];
    char v14 = (void *)[NSURL URLWithString:v13];
    if ([v14 scheme])
    {
      uint64_t v15 = dispatch_group_create();
      dispatch_group_enter(v15);
      std::string::size_type v16 = (void *)[MEMORY[0x263F08BF8] sharedSession];
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 3321888768;
      v19[2] = sub_217074E08;
      void v19[3] = &unk_26C771A00;
      v19[4] = v15;
      void v19[5] = a2;
      uint64_t v19[6] = a3;
      v19[7] = v8 + 1;
      uint64_t v20 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      [((id)objc_msgSend(v16, "dataTaskWithURL:completionHandler:", v14, v19)) resume];
      dispatch_group_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
      if ((std::__shared_weak_count_vtbl *)v8[1].__shared_owners_ == v8[1].__vftable) {
        *a3 = 0;
      }
      sub_2170750AC(v10, (uint64_t)&v21, a2);
      uint64_t v17 = v23;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 48);
      *(void *)(v17 + 40) = v9;
      *(void *)(v17 + 48) = v8;
      if (v18) {
        sub_216784EC4(v18);
      }
      *a4 = v9;
      a4[1] = v8;
      if (v20) {
        sub_216784EC4(v20);
      }
    }
    else
    {
      *a3 = 0;
      *a4 = v9;
      a4[1] = v8;
    }
    uint64_t v23 = 0;
    sub_21685C048(&v21);
  }
}

void sub_217074D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a18) {
    sub_216784EC4(a18);
  }
  a21 = 0;
  sub_21685C048(&a19);
  sub_216784EC4(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_217074D88(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_217076CD4(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))sub_217077010, 0);
}

void sub_217074E08(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
    {
      char v6 = *(uint64_t **)(a1 + 40);
      if (*((char *)v6 + 23) < 0) {
        char v6 = (uint64_t *)*v6;
      }
      int v19 = 136315394;
      uint64_t v20 = v6;
      __int16 v21 = 2112;
      uint64_t v22 = [a4 localizedDescription];
      uint64_t v7 = MEMORY[0x263EF8438];
      uint64_t v8 = "Encountered an error downloading %s : %@";
      uint32_t v9 = 22;
LABEL_11:
      _os_log_impl(&dword_216758000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v19, v9);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  uint64_t v11 = [a3 statusCode];
  if ((unint64_t)(v11 - 204) <= 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v12 = v11;
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(uint64_t **)(a1 + 40);
      if (*((char *)v13 + 23) < 0) {
        uint64_t v13 = (uint64_t *)*v13;
      }
      int v19 = 136315650;
      uint64_t v20 = v13;
      __int16 v21 = 2048;
      uint64_t v22 = v12;
      __int16 v23 = 2112;
      uint64_t v24 = [MEMORY[0x263F088A0] localizedStringForStatusCode:v12];
      uint64_t v7 = MEMORY[0x263EF8438];
      uint64_t v8 = "Encountered an error downloading %s : (%ld) %@";
      uint32_t v9 = 32;
      goto LABEL_11;
    }
LABEL_12:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    **(unsigned char **)(a1 + 48) = 0;
    return;
  }
  unint64_t v14 = [a2 length];
  uint64_t v15 = *(unint64_t **)(a1 + 56);
  unint64_t v16 = v15[1] - *v15;
  if (v14 <= v16)
  {
    if (v14 < v16) {
      v15[1] = *v15 + v14;
    }
  }
  else
  {
    sub_217077494(v15, v14 - v16);
  }
  uint64_t v17 = (char *)[a2 bytes];
  sub_2170775D0(*(void **)(a1 + 56), v17, &v17[v14], v14);
  uint64_t v18 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v18);
}

void sub_21707501C(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 3);
  uint64_t v4 = *(void *)(a2 + 64);
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_217075068(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_216784EC4(v2);
  }
  BOOL v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 3);
}

uint64_t sub_2170750AC(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_217076CD4(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))sub_2170776E0, 0);
}

void pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchByteRange(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, std::__shared_weak_count **a7@<X8>, unsigned char *a8)
{
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x30uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = 0;
  unint64_t v16 = v15 + 1;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C771AD0;
  v15[1].__shared_owners_ = 0;
  v15[1].__shared_weak_owners_ = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  if (a6 && sub_217074D88((uint64_t *)(a1 + 8), (uint64_t)&v30, a2))
  {
    uint64_t v17 = *(std::__shared_weak_count **)(v32 + 48);
    *a7 = *(std::__shared_weak_count **)(v32 + 40);
    a7[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v32 = 0;
    sub_21685C048(&v30);
    sub_216784EC4(v15);
  }
  else
  {
    if ((char)a2[23] >= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = *(unsigned char **)a2;
    }
    uint64_t v19 = [NSString stringWithUTF8String:v18];
    uint64_t v20 = (void *)[NSURL URLWithString:v19];
    if ([v20 scheme])
    {
      if (a5) {
        uint64_t v21 = [NSString stringWithFormat:@"bytes=%d-%d", a3, a4 - 1];
      }
      else {
        uint64_t v21 = [NSString stringWithFormat:@"bytes=%d", a3];
      }
      uint64_t v22 = v21;
      __int16 v23 = (void *)[objc_alloc(MEMORY[0x263F089E0]) initWithURL:v20];
      [v23 setValue:v22 forHTTPHeaderField:@"Range"];
      uint64_t v24 = (void *)[MEMORY[0x263F08BF8] sharedSession];
      uint64_t v25 = dispatch_group_create();
      dispatch_group_enter(v25);
      v28[0] = MEMORY[0x263EF8330];
      v28[1] = 3321888768;
      void v28[2] = sub_217075420;
      void v28[3] = &unk_26C771A00;
      v28[4] = v25;
      v28[5] = a2;
      v28[6] = a8;
      v28[7] = v15 + 1;
      uint64_t v29 = v15;
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      [((id)objc_msgSend(v24, "dataTaskWithRequest:completionHandler:", v23, v28)) resume];
      dispatch_group_wait(v25, 0xFFFFFFFFFFFFFFFFLL);
      if ((std::__shared_weak_count_vtbl *)v15[1].__shared_owners_ == v15[1].__vftable) {
        *a8 = 0;
      }
      if (a6)
      {
        sub_2170750AC((uint64_t *)(a1 + 8), (uint64_t)&v30, a2);
        uint64_t v26 = v32;
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        int v27 = *(std::__shared_weak_count **)(v26 + 48);
        *(void *)(v26 + 40) = v16;
        *(void *)(v26 + 48) = v15;
        if (v27) {
          sub_216784EC4(v27);
        }
      }
      *a7 = v16;
      a7[1] = v15;
      if (v29) {
        sub_216784EC4(v29);
      }
    }
    else
    {
      *a8 = 0;
      *a7 = v16;
      a7[1] = v15;
    }
    uint64_t v32 = 0;
    sub_21685C048(&v30);
  }
}

void sub_2170753D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a22) {
    sub_216784EC4(a22);
  }
  a25 = 0;
  sub_21685C048(&a23);
  sub_216784EC4(v25);
  _Unwind_Resume(a1);
}

void sub_217075420(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
    {
      char v6 = *(uint64_t **)(a1 + 40);
      if (*((char *)v6 + 23) < 0) {
        char v6 = (uint64_t *)*v6;
      }
      int v19 = 136315394;
      uint64_t v20 = v6;
      __int16 v21 = 2112;
      uint64_t v22 = [a4 localizedDescription];
      uint64_t v7 = MEMORY[0x263EF8438];
      uint64_t v8 = "Encountered an error downloading %s : %@";
      uint32_t v9 = 22;
LABEL_13:
      _os_log_impl(&dword_216758000, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v19, v9);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  uint64_t v11 = [a3 statusCode];
  if (v11 != 206)
  {
    uint64_t v15 = v11;
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v16 = *(uint64_t **)(a1 + 40);
      if (*((char *)v16 + 23) < 0) {
        unint64_t v16 = (uint64_t *)*v16;
      }
      int v19 = 136315650;
      uint64_t v20 = v16;
      __int16 v21 = 2048;
      uint64_t v22 = v15;
      __int16 v23 = 2112;
      uint64_t v24 = [MEMORY[0x263F088A0] localizedStringForStatusCode:v15];
      uint64_t v7 = MEMORY[0x263EF8438];
      uint64_t v8 = "Encountered an error downloading byte range for %s : (%ld) %@";
      uint32_t v9 = 32;
      goto LABEL_13;
    }
LABEL_14:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    **(unsigned char **)(a1 + 48) = 0;
    return;
  }
  unint64_t v12 = [a2 length];
  uint64_t v13 = *(unint64_t **)(a1 + 56);
  unint64_t v14 = v13[1] - *v13;
  if (v12 <= v14)
  {
    if (v12 < v14) {
      v13[1] = *v13 + v12;
    }
  }
  else
  {
    sub_217077494(v13, v12 - v14);
  }
  uint64_t v17 = (char *)[a2 bytes];
  sub_2170775D0(*(void **)(a1 + 56), v17, &v17[v12], v12);
  uint64_t v18 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v18);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::RegisterPackageInfo(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = sub_2170756E4((uint64_t *)(a1 + 592), (uint64_t)&v8, a2);
  uint64_t v5 = v10;
  uint64_t v6 = v10;
  *(unsigned char *)(v10 + 40) = *(unsigned char *)a3;
  std::string::operator=((std::string *)(v5 + 48), (const std::string *)(a3 + 8));
  if (v6 + 40 != a3)
  {
    *(_DWORD *)(v5 + 104) = *(_DWORD *)(a3 + 64);
    sub_217075EB0((void *)(v5 + 72), *(uint64_t **)(a3 + 48), 0);
  }
  uint64_t v10 = 0;
  sub_21685C048(&v8);
  return v4;
}

void sub_2170756CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2170756E4(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_217076434(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))sub_2170777F0, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchPackageStreamInfo(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  uint64_t v8 = [NSString stringWithUTF8String:v7];
  char v9 = (void *)[NSURL URLWithString:v8];
  uint64_t result = [v9 scheme];
  if (result)
  {
    uint64_t result = [[(id)objc_msgSend(v9, "pathExtension") isEqualToString:@"usdz"];
    if (result)
    {
      uint64_t v11 = (void *)[MEMORY[0x263F08BA0] componentsWithString:v8];
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      unint64_t v12 = (void *)[v11 queryItems];
      uint64_t v13 = [v12 countByEnumeratingWithState:&v41 objects:v45 count:16];
      if (v13)
      {
        uint64_t v28 = (uint64_t *)(a1 + 592);
        uint64_t v14 = *(void *)v42;
        char v15 = 1;
LABEL_8:
        uint64_t v16 = 0;
        while (1)
        {
          if (*(void *)v42 != v14) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void **)(*((void *)&v41 + 1) + 8 * v16);
          if (objc_msgSend((id)objc_msgSend(v17, "name"), "isEqualToString:", @"resource"))
          {
            uint64_t v18 = [[NSString stringWithString:[v17 value]] stringByRemovingPercentEncoding];
            [v11 setQuery:0];
            sub_216779094(v39, (char *)[v11 string]);
            sub_216779094(&__str, (char *)[v18 UTF8String]);
            std::string::operator=((std::string *)a3, &__str);
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            if (sub_217074AA4(v28, (uint64_t)&v35, v39))
            {
              uint64_t v19 = v37;
              char v31 = *(unsigned char *)(v37 + 40);
              if (*(char *)(v37 + 71) < 0)
              {
                sub_216778F24(&__p, *(void **)(v37 + 48), *(void *)(v37 + 56));
              }
              else
              {
                long long __p = *(_OWORD *)(v37 + 48);
                uint64_t v33 = *(void *)(v37 + 64);
              }
              sub_21707613C((uint64_t)v34, v19 + 72);
              __int16 v21 = sub_216EEC518(v34, (unsigned __int8 *)a3);
              if (v21)
              {
                int v20 = 0;
                int v22 = *((_DWORD *)v21 + 10);
                uint64_t v23 = *((unsigned int *)v21 + 11);
                *a4 = v23;
                *a5 = (v23 + v22);
              }
              else
              {
                v29[0] = "aaplHttpResolver/aaplHttpFoundationResolverDelegate.mm";
                v29[1] = "FetchPackageStreamInfo";
                _OWORD v29[2] = 320;
                v29[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::FetchPackage"
                         "StreamInfo(const std::string &, std::string &, uint64_t &, uint64_t &) const";
                char v30 = 0;
                if (*(char *)(a3 + 23) >= 0) {
                  uint64_t v24 = (const char *)a3;
                }
                else {
                  uint64_t v24 = *(const char **)a3;
                }
                uint64_t v25 = v39;
                if (v40 < 0) {
                  uint64_t v25 = (void **)v39[0];
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not find resource %s in %s\n", v24, (const char *)v25);
                int v20 = 1;
              }
              sub_216850298((uint64_t)v34);
              if (SHIBYTE(v33) < 0) {
                operator delete((void *)__p);
              }
            }
            else
            {
              int v20 = 1;
            }
            uint64_t v37 = 0;
            sub_21685C048(&v35);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (v40 < 0) {
              operator delete(v39[0]);
            }
            char v15 = 0;
            uint64_t result = 0;
            if (v20) {
              break;
            }
          }
          if (v13 == ++v16)
          {
            uint64_t v13 = [v12 countByEnumeratingWithState:&v41 objects:v45 count:16];
            if (v13) {
              goto LABEL_8;
            }
            return (v15 & 1) == 0;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_217075AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  a34 = 0;
  sub_21685C048(&a32);
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217075B4C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::GetExtension(uint64_t a1@<X1>, std::string *a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::AllowFileSystemResolve(pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate *this)
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::IsUrl(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v2 = a2;
  }
  else {
    unint64_t v2 = (uint64_t *)*a2;
  }
  return [[NSURL URLWithString:[NSString stringWithUTF8String:v2]] scheme] != 0;
}

void *pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::GetIdentifier@<X0>(void *a1@<X8>)
{
  return sub_216779094(a1, "AaplHttpFoundationResolverDelegate");
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate::ClearCaches(pxrInternal__aapl__pxrReserved__::AaplHttpFoundationResolverDelegate *this)
{
  sub_217075C3C((unint64_t *)this + 1);

  return sub_217075D0C((unint64_t *)this + 74);
}

uint64_t sub_217075C3C(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *uint64_t v11 = *v10;
          sub_2170771B0((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_217077920((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_217075D0C(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *uint64_t v11 = *v10;
          sub_217076910((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_217077970((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

void sub_217075DDC(unint64_t *a1)
{
  *a1 = (unint64_t)&unk_26C771A40;
  sub_217075D0C(a1 + 74);
  sub_217075C3C(a1 + 1);

  pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate::~AaplHttpResolverDelegate((pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate *)a1);
}

void sub_217075E44(unint64_t *a1)
{
  *a1 = (unint64_t)&unk_26C771A40;
  sub_217075D0C(a1 + 74);
  sub_217075C3C(a1 + 1);
  pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate::~AaplHttpResolverDelegate((pxrInternal__aapl__pxrReserved__::AaplHttpResolverDelegate *)a1);

  operator delete(v2);
}

void sub_217075EB0(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    char v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        v8[5] = (void *)v4[5];
        uint64_t v10 = (void **)*v8;
        sub_217075FB4(a1, v8);
        unint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        char v8 = v10;
      }
      while (!v11);
    }
    sub_2168502D4((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_217076018(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_217075F84(void *a1)
{
  __cxa_begin_catch(a1);
  sub_2168502D4(v1, v2);
  __cxa_rethrow();
}

void sub_217075FA0(_Unwind_Exception *a1)
{
}

void *sub_217075FB4(void *a1, void *a2)
{
  unint64_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = sub_216891D24((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_21699D5FC((uint64_t)a1, v5, v4);
  sub_216862FF0(a1, a2, v6);
  return a2;
}

void *sub_217076018(void *a1, uint64_t a2)
{
  sub_217076078((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_217075FB4(a1, v4);
}

void sub_217076054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_217076078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x30uLL);
  char v8 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v9 = v7 + 16;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(v7 + 16, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *BOOL v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v8 + 5) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_216891D24(a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_217076120(_Unwind_Exception *a1)
{
  *unint64_t v2 = 0;
  sub_2168517F0(v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21707613C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_2170761B4(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_21707619C(_Unwind_Exception *a1)
{
  sub_216850298(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2170761B4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_216891D24(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168513F8(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_216891528(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_217076410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217076434(uint64_t *a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned char *, uint64_t), void *a8)
{
  if ((char)a3[23] >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = *(unsigned char **)a3;
  }
  char v14 = *v13;
  if (*v13)
  {
    unint64_t v15 = 0;
    float v16 = v13 + 1;
    do
    {
      unint64_t v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      int v17 = *v16++;
      char v14 = v17;
    }
    while (v17);
  }
  else
  {
    unint64_t v15 = 0;
  }
  unint64_t v33 = 0;
  uint64_t v18 = *a1;
  __dmb(0xBu);
  uint64_t v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_217076944((uint64_t)&v35, (uint64_t)a1, v18 & v15, 0);
    unint64_t v19 = v37 + 16;
    do
      unint64_t v19 = *(void *)v19;
    while (v19 >= 0x40 && !sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2) {
      break;
    }
    if (v19)
    {
      uint64_t v20 = 1;
LABEL_18:
      uint64_t v21 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_54;
      }
      goto LABEL_19;
    }
    unint64_t v28 = *a1;
    __dmb(0xBu);
    if (v18 == v28 || !sub_21686CF40((uint64_t)a1, v15, v18, v28))
    {
      sub_21685C048(&v35);
      return 0;
    }
LABEL_39:
    sub_21685C048(&v35);
    uint64_t v18 = v28;
  }
  if (v19)
  {
LABEL_15:
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  if (!a8) {
    a8 = (void *)a7(v32, a3, a4);
  }
  if (!v36)
  {
    char v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v35) & 1) == 0)
    {
      unint64_t v19 = v37 + 16;
      while (1)
      {
        unint64_t v19 = *(void *)v19;
        if (v19 < 0x40) {
          break;
        }
        if (sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v36) {
            goto LABEL_15;
          }
          uint64_t v20 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v35, 3uLL);
          char v36 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  unint64_t v28 = *a1;
  __dmb(0xBu);
  if (v18 != v28)
  {
    if (!sub_21686CF40((uint64_t)a1, v15, v18, v28)) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  unint64_t v28 = v18;
LABEL_41:
  unint64_t v33 = sub_21686C9CC((uint64_t)a1, v37, a8, v28);
  uint64_t v21 = 0;
  uint64_t v20 = 1;
  unint64_t v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_54:
    sub_21685C048(&v35);
    goto LABEL_49;
  }
LABEL_19:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v22 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        uint64_t v24 = (atomic_ullong *)v35;
        uint64_t v35 = 0;
        if (v36)
        {
LABEL_24:
          atomic_ullong v25 = *v24;
          unint64_t v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v27 = v25;
            atomic_compare_exchange_strong(v24, (unint64_t *)&v27, v26);
            if (v27 == v25) {
              break;
            }
            if (atomic_fetch_add_explicit(v24, 0, memory_order_relaxed) != v25)
            {
              sched_yield();
              goto LABEL_24;
            }
          }
        }
        else
        {
          atomic_fetch_add(v24, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v28 = *a1;
        __dmb(0xBu);
        a8 = (void *)v21;
        goto LABEL_39;
      }
    }
  }
  sub_21685C048(&v35);
  *(void *)(a5 + 16) = v19;
  *(void *)(a5 + 24) = v15;
LABEL_49:
  if (v33) {
    sub_217076778(a1, v33, v32, 0);
  }
  if (v21) {
    sub_217076910((uint64_t)a1, v21);
  }
  return v20;
}

void sub_217076750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217076770()
{
  return 0;
}

void sub_217076778(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    unint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    unint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    unint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *unint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_217076900(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_217076910(uint64_t a1, uint64_t a2)
{
  sub_217076BF4(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_217076944(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (unint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_217076A20(a2, v11, a3);
    }
  }
  else
  {
    unint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_217076A0C(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_217076A20(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_217076944(&v20, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v22 + 16);
  unint64_t v12 = *(void *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v14 = *(unsigned char **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0) {
        uint64_t v14 = (unsigned char *)(v12 + 16);
      }
      char v15 = *v14;
      if (*v14)
      {
        unint64_t v16 = 0;
        int64x2_t v17 = v14 + 1;
        do
        {
          unint64_t v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          int v18 = *v17++;
          char v15 = v18;
        }
        while (v18);
      }
      else
      {
        unint64_t v16 = 0;
      }
      if ((v16 & v13) != a3) {
        break;
      }
      if (v21 || (char v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v20) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_31:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v20);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v22 + 16);
        unint64_t v12 = *(void *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v20);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_21685C048(&v20);
}

void sub_217076BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_217076BF4(uint64_t a1)
{
  sub_216850298(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_217076C54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C771AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_217076C74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C771AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217076CB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_217076CD4(uint64_t *a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned char *, uint64_t), void *a8)
{
  if ((char)a3[23] >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = *(unsigned char **)a3;
  }
  char v14 = *v13;
  if (*v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = v13 + 1;
    do
    {
      unint64_t v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      int v17 = *v16++;
      char v14 = v17;
    }
    while (v17);
  }
  else
  {
    unint64_t v15 = 0;
  }
  unint64_t v33 = 0;
  uint64_t v18 = *a1;
  __dmb(0xBu);
  uint64_t v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_2170771E4((uint64_t)&v35, (uint64_t)a1, v18 & v15, 0);
    unint64_t v19 = v37 + 16;
    do
      unint64_t v19 = *(void *)v19;
    while (v19 >= 0x40 && !sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2) {
      break;
    }
    if (v19)
    {
      uint64_t v20 = 1;
LABEL_18:
      uint64_t v21 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_54;
      }
      goto LABEL_19;
    }
    unint64_t v28 = *a1;
    __dmb(0xBu);
    if (v18 == v28 || !sub_21686CF40((uint64_t)a1, v15, v18, v28))
    {
      sub_21685C048(&v35);
      return 0;
    }
LABEL_39:
    sub_21685C048(&v35);
    uint64_t v18 = v28;
  }
  if (v19)
  {
LABEL_15:
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  if (!a8) {
    a8 = (void *)a7(v32, a3, a4);
  }
  if (!v36)
  {
    char v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v35) & 1) == 0)
    {
      unint64_t v19 = v37 + 16;
      while (1)
      {
        unint64_t v19 = *(void *)v19;
        if (v19 < 0x40) {
          break;
        }
        if (sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v36) {
            goto LABEL_15;
          }
          uint64_t v20 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v35, 3uLL);
          char v36 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  unint64_t v28 = *a1;
  __dmb(0xBu);
  if (v18 != v28)
  {
    if (!sub_21686CF40((uint64_t)a1, v15, v18, v28)) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  unint64_t v28 = v18;
LABEL_41:
  unint64_t v33 = sub_21686C9CC((uint64_t)a1, v37, a8, v28);
  uint64_t v21 = 0;
  uint64_t v20 = 1;
  unint64_t v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_54:
    sub_21685C048(&v35);
    goto LABEL_49;
  }
LABEL_19:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v22 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        int8x16_t v24 = (atomic_ullong *)v35;
        uint64_t v35 = 0;
        if (v36)
        {
LABEL_24:
          atomic_ullong v25 = *v24;
          unint64_t v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v27 = v25;
            atomic_compare_exchange_strong(v24, (unint64_t *)&v27, v26);
            if (v27 == v25) {
              break;
            }
            if (atomic_fetch_add_explicit(v24, 0, memory_order_relaxed) != v25)
            {
              sched_yield();
              goto LABEL_24;
            }
          }
        }
        else
        {
          atomic_fetch_add(v24, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v28 = *a1;
        __dmb(0xBu);
        a8 = (void *)v21;
        goto LABEL_39;
      }
    }
  }
  sub_21685C048(&v35);
  *(void *)(a5 + 16) = v19;
  *(void *)(a5 + 24) = v15;
LABEL_49:
  if (v33) {
    sub_217077018(a1, v33, v32, 0);
  }
  if (v21) {
    sub_2170771B0((uint64_t)a1, v21);
  }
  return v20;
}

void sub_217076FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217077010()
{
  return 0;
}

void sub_217077018(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    char v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    BOOL v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    unsigned int v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *unint64_t v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_2170771A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_2170771B0(uint64_t a1, uint64_t a2)
{
  sub_216812F30(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_2170771E4(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_2170772C0(a2, v11, a3);
    }
  }
  else
  {
    unint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_2170772AC(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_2170772C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_2170771E4(&v20, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v22 + 16);
  unint64_t v12 = *(void *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v14 = *(unsigned char **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0) {
        uint64_t v14 = (unsigned char *)(v12 + 16);
      }
      char v15 = *v14;
      if (*v14)
      {
        unint64_t v16 = 0;
        int64x2_t v17 = v14 + 1;
        do
        {
          unint64_t v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          int v18 = *v17++;
          char v15 = v18;
        }
        while (v18);
      }
      else
      {
        unint64_t v16 = 0;
      }
      if ((v16 & v13) != a3) {
        break;
      }
      if (v21 || (char v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v20) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_31:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v20);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v22 + 16);
        unint64_t v12 = *(void *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v20);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_21685C048(&v20);
}

void sub_217077480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_217077494(unint64_t *a1, size_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    BOOL v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_21677CB10();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *sub_2170775D0(void *result, char *__src, char *a3, unint64_t a4)
{
  BOOL v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *BOOL v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_21677CB10();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    unint64_t result = sub_216780490(v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  unint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      unint64_t result = memmove(v9, __src, v16);
    }
    char v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    unint64_t result = memmove(v9, v14, a3 - v14);
  }
  char v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t sub_2170776E0(uint64_t a1, long long *a2)
{
  unint64_t v3 = a2;
  return sub_217077714(a1, (uint64_t)&unk_2174BFD90, &v3);
}

uint64_t sub_217077714(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v6 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v11[0] = v6;
  v11[1] = a1;
  *(_OWORD *)(v6 + 32) = 0u;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  BOOL v7 = (unsigned char *)(v6 + 16);
  unint64_t v8 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *(void *)(v6 + 32) = *((void *)v8 + 2);
    *(_OWORD *)BOOL v7 = v9;
  }
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0;
  v11[0] = 0;
  sub_2170777BC(v11, v5);
  return v6;
}

void sub_2170777A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2170777BC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_2170777F0(uint64_t a1, long long *a2)
{
  uint64_t v3 = a2;
  return sub_217077824(a1, (uint64_t)&unk_2174BFD90, &v3);
}

uint64_t sub_217077824(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v6 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x70);
  v11[0] = v6;
  v11[1] = a1;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  BOOL v7 = (unsigned char *)(v6 + 16);
  unint64_t v8 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *(void *)(v6 + 32) = *((void *)v8 + 2);
    *(_OWORD *)BOOL v7 = v9;
  }
  *(void *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_DWORD *)(v6 + 104) = 1065353216;
  v11[0] = 0;
  sub_2170778EC(v11, v5);
  return v6;
}

void sub_2170778D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2170778EC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_217077920(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *unint64_t v4 = 0;
  return result;
}

uint64_t sub_217077970(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *unint64_t v4 = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::AaplHttpAsset::AaplHttpAsset(void *a1, __n128 *a2, int a3)
{
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(a1);
  void *v5 = &unk_26C771B20;
  __n128 result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *((_DWORD *)v5 + 6) = a3;
  return result;
}

{
  void *v5;
  __n128 result;

  uint64_t v5 = pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(a1);
  void *v5 = &unk_26C771B20;
  __n128 result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *((_DWORD *)v5 + 6) = a3;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::GetSize(pxrInternal__aapl__pxrReserved__::AaplHttpAsset *this)
{
  return *(void *)(*((void *)this + 1) + 8) - (**((void **)this + 1) + *((unsigned int *)this + 6));
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::GetBuffer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = **(void **)(this + 8) + *(unsigned int *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::GetFileUnsafe(pxrInternal__aapl__pxrReserved__::AaplHttpAsset *this)
{
  return 0;
}

size_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::Read(pxrInternal__aapl__pxrReserved__::AaplHttpAsset *this, void *__dst, size_t a3, uint64_t a4)
{
  if (__CFADD__(a4, a3) || (size_t v4 = a4 + a3, v5 = *((unsigned int *)this + 6), __CFADD__(v5, a4 + a3)))
  {
    size_t v11 = "aaplHttpResolver/aaplHttpAsset.cpp";
    unint64_t v12 = "Read";
    uint64_t v13 = 34;
    uint64_t v14 = "virtual size_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::Read(void *, size_t, size_t) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Read parameters would cause overflow.");
    return 0;
  }
  uint64_t v8 = **((void **)this + 1);
  size_t v9 = *(void *)(*((void *)this + 1) + 8) - v8;
  if (v4 + v5 > v9)
  {
    size_t v11 = "aaplHttpResolver/aaplHttpAsset.cpp";
    unint64_t v12 = "Read";
    uint64_t v13 = 39;
    uint64_t v14 = "virtual size_t pxrInternal__aapl__pxrReserved__::AaplHttpAsset::Read(void *, size_t, size_t) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Trying to read beyond end of buffer.");
    return 0;
  }
  size_t v10 = v9 - v5;
  if (v10 < v4) {
    size_t v4 = v10;
  }
  size_t v6 = v4 - a4;
  memcpy(__dst, (const void *)(v8 + a4 + v5), a3);
  return v6;
}

void sub_217077BA8(pxrInternal__aapl__pxrReserved__::ArAsset *this)
{
  *(void *)this = &unk_26C771B20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);
}

void sub_217077C04(pxrInternal__aapl__pxrReserved__::ArAsset *this)
{
  *(void *)this = &unk_26C771B20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset(this);

  operator delete(v3);
}

uint64_t sub_217077C64()
{
  uint64_t v0 = sub_217079494();

  return sub_2170795C0(v0);
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(pxrInternal__aapl__pxrReserved__::ArResolver *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  CurrentContext = (pxrInternal__aapl__pxrReserved__::AaplHttpResolver *)pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(v27, a1);
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int ResourceOffset = 0;
  char v21 = 1;
  long long v20 = 0uLL;
  unint64_t Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(CurrentContext);
  unint64_t v7 = Delegate;
  __src[0] = 0;
  __src[1] = 0;
  uint64_t v19 = 0;
  if (!Delegate)
  {
    __p[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    __p[1] = "_OpenAsset";
    uint64_t v15 = 40;
    size_t v16 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(const ArResolvedPath &) const";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)__p, a3);
    goto LABEL_29;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(void *)Delegate
                                                                                                + 56))(Delegate, a2, v25, &v24, &v23))
  {
    uint64_t v8 = (*(void *(**)(void **__return_ptr, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, void **, char *))(*(void *)v7 + 40))(__p, v7, a2, v24, v23, 1, 1, v27, __src, &v21);
    size_t v10 = __p[0];
    size_t v9 = (std::__shared_weak_count *)__p[1];
    long long v20 = *(_OWORD *)__p;
    if (v21)
    {
      v13[0] = (uint64_t *)__p[0];
      v13[1] = (uint64_t *)__p[1];
      if (__p[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
      }
      int ResourceOffset = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset((uint64_t)v8, (uint64_t)v25, v13, &v21);
      if (v9) {
        sub_216784EC4(v9);
      }
    }
    else
    {
      __p[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
      __p[1] = "_OpenAsset";
      uint64_t v15 = 49;
      size_t v16 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(const ArReso"
            "lvedPath &) const";
      char v17 = 0;
      if (*(char *)(a2 + 23) >= 0) {
        size_t v11 = (const char *)a2;
      }
      else {
        size_t v11 = *(const char **)a2;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to download bytes for %s", v11);
    }
  }
  else
  {
    (*(void (**)(void **__return_ptr, unint64_t, uint64_t, uint64_t *, void **, char *))(*(void *)v7 + 32))(__p, v7, a2, v27, __src, &v21);
    long long v20 = *(_OWORD *)__p;
    size_t v10 = __p[0];
  }
  if (v21)
  {
    if (v10[1] != *v10)
    {
      sub_2170796F8((unint64_t *)&v20, &ResourceOffset, __p);
      *a3 = *(_OWORD *)__p;
      goto LABEL_32;
    }
    if (SHIBYTE(v19) < 0)
    {
      if (__src[1])
      {
        sub_216778F24(__p, __src[0], (unint64_t)__src[1]);
        goto LABEL_22;
      }
    }
    else if (HIBYTE(v19))
    {
      *(_OWORD *)long long __p = *(_OWORD *)__src;
      uint64_t v15 = v19;
LABEL_22:
      pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)__p, a3);
      goto LABEL_29;
    }
  }
  if ((*(unsigned int (**)(unint64_t))(*(void *)v7 + 80))(v7)
    && ((*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v7 + 72))(v7, a2) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)a2, a3);
    goto LABEL_32;
  }
  __p[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
  __p[1] = "_OpenAsset";
  uint64_t v15 = 69;
  size_t v16 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_OpenAsset(const ArResolvedPath &) const";
  char v17 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v12 = (const char *)a2;
  }
  else {
    unint64_t v12 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to download %s", v12);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_OpenAsset((const char *)__p, a3);
LABEL_29:
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
LABEL_32:
  if (SHIBYTE(v19) < 0) {
    operator delete(__src[0]);
  }
  if (*((void *)&v20 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v20 + 1));
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  __p[0] = v27;
  sub_216787968((void ***)__p);
}

void sub_217078070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a28) {
    sub_216784EC4(a28);
  }
  if (*(char *)(v28 - 97) < 0) {
    operator delete(*(void **)(v28 - 120));
  }
  a13 = (void *)(v28 - 96);
  sub_216787968((void ***)&a13);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *this)
{
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate))
  {
    uint64_t v2 = operator new(0x498uLL);
    bzero(v2, 0x498uLL);
    uint64_t v3 = 0;
    *uint64_t v2 = &unk_26C771A40;
    size_t v4 = v2 + 67;
    do
    {
      v2[v3 + 68] = 0;
      v3 += 3;
    }
    while (v3 != 6);
    uint64_t v5 = 0;
    *((_OWORD *)v2 + 31) = 0u;
    *((_OWORD *)v2 + 32) = 0u;
    *((_OWORD *)v2 + 29) = 0u;
    *((_OWORD *)v2 + 30) = 0u;
    *((_OWORD *)v2 + 27) = 0u;
    *((_OWORD *)v2 + 28) = 0u;
    *((_OWORD *)v2 + 25) = 0u;
    *((_OWORD *)v2 + 26) = 0u;
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 24) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    __dmb(0xBu);
    v2[1] = 0;
    __dmb(0xBu);
    v2[66] = 0;
    *size_t v4 = 0u;
    *(_OWORD *)(v2 + 69) = 0u;
    *(_OWORD *)(v2 + 71) = 0u;
    v2[2] = v4;
    __dmb(0xBu);
    size_t v6 = v2 + 140;
    v2[1] = 1;
    do
    {
      v2[v5 + 141] = 0;
      v5 += 3;
    }
    while (v5 != 6);
    *(_OWORD *)(v2 + 105) = 0u;
    *(_OWORD *)(v2 + 103) = 0u;
    *(_OWORD *)(v2 + 101) = 0u;
    *(_OWORD *)(v2 + 99) = 0u;
    *(_OWORD *)(v2 + 97) = 0u;
    *(_OWORD *)(v2 + 95) = 0u;
    *(_OWORD *)(v2 + 93) = 0u;
    *(_OWORD *)(v2 + 91) = 0u;
    *(_OWORD *)(v2 + 89) = 0u;
    *(_OWORD *)(v2 + 87) = 0u;
    *(_OWORD *)(v2 + 85) = 0u;
    *(_OWORD *)(v2 + 83) = 0u;
    *(_OWORD *)(v2 + 81) = 0u;
    *(_OWORD *)(v2 + 79) = 0u;
    *(_OWORD *)(v2 + 77) = 0u;
    *(_OWORD *)(v2 + 75) = 0u;
    *(_OWORD *)(v2 + 135) = 0u;
    *(_OWORD *)(v2 + 137) = 0u;
    *(_OWORD *)(v2 + 131) = 0u;
    *(_OWORD *)(v2 + 133) = 0u;
    *(_OWORD *)(v2 + 127) = 0u;
    *(_OWORD *)(v2 + 129) = 0u;
    *(_OWORD *)(v2 + 123) = 0u;
    *(_OWORD *)(v2 + 125) = 0u;
    *(_OWORD *)(v2 + 119) = 0u;
    *(_OWORD *)(v2 + 121) = 0u;
    *(_OWORD *)(v2 + 115) = 0u;
    *(_OWORD *)(v2 + 117) = 0u;
    *(_OWORD *)(v2 + 111) = 0u;
    *(_OWORD *)(v2 + 113) = 0u;
    *(_OWORD *)(v2 + 107) = 0u;
    *(_OWORD *)(v2 + 109) = 0u;
    __dmb(0xBu);
    v2[74] = 0;
    __dmb(0xBu);
    v2[139] = 0;
    *size_t v6 = 0u;
    *((_OWORD *)v2 + 71) = 0u;
    *((_OWORD *)v2 + 72) = 0u;
    v2[75] = v6;
    __dmb(0xBu);
    v2[74] = 1;
    atomic_store((unint64_t)v2, &pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
  }
  return atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(uint64_t a1, uint64_t a2, uint64_t **a3, unsigned char *a4)
{
  uint64_t v5 = **a3;
  unint64_t v6 = (*a3)[1] - v5;
  if (v6 == 30)
  {
LABEL_8:
    uint64_t v9 = 0;
    *a4 = 0;
    return v9;
  }
  unint64_t v8 = 30;
  while (*(unsigned char *)(v5 + v8 - 30) != 80
       || *(unsigned char *)(v5 + v8 - 29) != 75
       || *(unsigned char *)(v5 + v8 - 28) != 3
       || *(unsigned char *)(v5 + v8 - 27) != 4)
  {
    if (v6 == ++v8) {
      goto LABEL_8;
    }
  }
  if (v8 - 4 >= v6)
  {
    char v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    int v18 = "GetResourceOffset";
    uint64_t v19 = 366;
    long long v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read uncompressed size for %s.");
    return 0;
  }
  if (v8 - 2 >= v6)
  {
    char v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    int v18 = "GetResourceOffset";
    uint64_t v19 = 375;
    long long v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file name length for %s.");
    return 0;
  }
  if (v8 >= v6)
  {
    char v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    int v18 = "GetResourceOffset";
    uint64_t v19 = 384;
    long long v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read extra field length for %s.");
    return 0;
  }
  uint64_t v11 = *(unsigned __int16 *)(v5 + v8 - 4);
  if (v11 + v8 >= v6)
  {
    char v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    int v18 = "GetResourceOffset";
    uint64_t v19 = 399;
    long long v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    char v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file name for %s.");
    return 0;
  }
  int v12 = *(unsigned __int16 *)(v5 + v8 - 2);
  sub_216799F58(__p, (void *)(v5 + v8), *(unsigned __int16 *)(v5 + v8 - 4));
  if (sub_216AAA048((unsigned __int8 *)__p, (unsigned __int8 *)a2))
  {
    *a4 = 0;
    char v17 = "aaplHttpResolver/aaplHttpResolver.cpp";
    int v18 = "GetResourceOffset";
    uint64_t v19 = 407;
    long long v20 = "uint32_t pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetResourceOffset(const std::string &, const std:"
          ":shared_ptr<std::vector<char>>, BOOL &) const";
    char v21 = 0;
    if (v16 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v14 = (const char *)a2;
    }
    else {
      uint64_t v14 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Found %s but expected %s", (const char *)v13, v14);
    uint64_t v9 = 0;
  }
  else
  {
    *a4 = 1;
    uint64_t v9 = (v11 + v12 + 30);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_217078568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetModificationTimestamp(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *a1, uint64_t a2, char *a3)
{
  unint64_t Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(a1);
  if (Delegate)
  {
    unint64_t v7 = Delegate;
    if ((*(unsigned int (**)(unint64_t))(*(void *)Delegate + 80))(Delegate)
      && ((*(uint64_t (**)(unint64_t, char *))(*(void *)v7 + 72))(v7, a3) & 1) == 0)
    {
      return pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_GetModificationTimestamp((uint64_t)a1, a2, a3);
    }
    else
    {
      (*(void (**)(unint64_t, char *))(*(void *)v7 + 24))(v7, a3);
    }
  }
  else
  {
    v9[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    v9[1] = "_GetModificationTimestamp";
    v9[2] = 79;
    void v9[3] = "virtual ArTimestamp pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetModificationTimestamp(const std:"
            ":string &, const ArResolvedPath &) const";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    return NAN;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_CreateIdentifier(pxrInternal__aapl__pxrReserved__::ArResolver *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)a4 = *(_OWORD *)a2;
      a4[2] = *(void *)(a2 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(void *)(a2 + 8))
  {
LABEL_5:
    CurrentContext = (pxrInternal__aapl__pxrReserved__::AaplHttpResolver *)pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(v21, this);
    char v20 = 0;
    unint64_t Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(CurrentContext);
    unint64_t v10 = Delegate;
    if (Delegate)
    {
      (*(void (**)(void **__return_ptr, unint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(void *)Delegate + 16))(__p, Delegate, a2, a3, &v20, v21);
      if (v20)
      {
        if (pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(this, (uint64_t)__p))
        {
          (*(void (**)(void **__return_ptr, unint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(void *)v10 + 16))(v13, v10, a2, a3, &v20, v21);
          if (SHIBYTE(v19) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)long long __p = *(_OWORD *)v13;
          uint64_t v19 = v14;
        }
        else
        {
          LOBYTE(v13[0]) = 0;
          sub_216779094(&v13[1], "");
          memset(v16, 0, sizeof(v16));
          int v17 = 1065353216;
          (*(void (**)(unint64_t, void **, void **))(*(void *)v10 + 48))(v10, __p, v13);
          sub_216850298((uint64_t)v16);
          if (SHIBYTE(v15) < 0) {
            operator delete(v13[1]);
          }
        }
      }
      int v12 = (void *)HIBYTE(v19);
      if (v19 < 0) {
        int v12 = __p[1];
      }
      if (v12)
      {
        *(_OWORD *)a4 = *(_OWORD *)__p;
        a4[2] = v19;
        __p[1] = 0;
        uint64_t v19 = 0;
        __p[0] = 0;
      }
      else if (!(*(unsigned int (**)(unint64_t))(*(void *)v10 + 80))(v10) {
             || ((*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v10 + 72))(v10, a2) & 1) != 0
      }
             || ((*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v10 + 72))(v10, a3) & 1) != 0)
      {
        sub_216779094(a4, "");
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_CreateIdentifier((uint64_t)this, a2, a3, a4);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      v13[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
      v13[1] = "_CreateIdentifier";
      uint64_t v14 = 103;
      uint64_t v15 = "virtual std::string pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_CreateIdentifier(const std::string "
            "&, const ArResolvedPath &) const";
      LOBYTE(v16[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
      sub_216779094(a4, "");
    }
    v13[0] = v21;
    sub_216787968((void ***)v13);
    return;
  }
  uint64_t v11 = *(void **)a2;

  sub_216778F24(a4, v11, 0);
}

void sub_2170789E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_217075B4C((uint64_t)&a10);
  if (a24 < 0) {
    operator delete(__p);
  }
  a10 = v24 - 72;
  sub_216787968((void ***)&a10);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(pxrInternal__aapl__pxrReserved__::ArResolver *a1, uint64_t a2)
{
  v39[0] = 1;
  CurrentContext = (pxrInternal__aapl__pxrReserved__::AaplHttpResolver *)pxrInternal__aapl__pxrReserved__::ArResolver::GetCurrentContext(v38, a1);
  unint64_t Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(CurrentContext);
  unint64_t v5 = Delegate;
  if (!Delegate)
  {
    atomic_ullong v27 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
    v28.__r_.__value_.__l.__size_ = 167;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::"
                                                               "GetPackageContents(const std::string &) const";
    LOBYTE(v29) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    BOOL v10 = 0;
    goto LABEL_21;
  }
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v37 = 0;
  (*(void (**)(uint64_t **__return_ptr, unint64_t, uint64_t, uint64_t, void, void, void, uint64_t *, void **, unsigned char *))(*(void *)Delegate + 40))(&v34, Delegate, a2, -128, 0, 0, 0, v38, v36, v39);
  if (v39[0])
  {
    uint64_t v6 = *v34;
    unint64_t v7 = v34[1] - *v34;
    if (v7 >= 0x14)
    {
      if (v7 == 20)
      {
LABEL_11:
        atomic_ullong v27 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
        v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
        v28.__r_.__value_.__l.__size_ = 207;
        v28.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolv"
                                                                   "er::GetPackageContents(const std::string &) const";
        LOBYTE(v29) = 0;
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v9 = (const char *)a2;
        }
        else {
          uint64_t v9 = *(const char **)a2;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to find End of Central Directory record for %s", v9);
      }
      else
      {
        uint64_t v8 = 0;
        while (*(unsigned char *)(v6 + v8) != 80
             || *(unsigned char *)(v6 + v8 + 1) != 75
             || *(unsigned char *)(v6 + v8 + 2) != 5
             || *(unsigned char *)(v6 + v8 + 3) != 6)
        {
          if (v7 - 20 == ++v8) {
            goto LABEL_11;
          }
        }
        if (v8 + 12 >= v7)
        {
          atomic_ullong v27 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
          v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
          v28.__r_.__value_.__l.__size_ = 215;
          v28.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpReso"
                                                                     "lver::GetPackageContents(const std::string &) const";
          LOBYTE(v29) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read number of entries in End of Central Directory record.");
        }
        else if (v8 + 16 >= v7)
        {
          atomic_ullong v27 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
          v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
          v28.__r_.__value_.__l.__size_ = 223;
          v28.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpReso"
                                                                     "lver::GetPackageContents(const std::string &) const";
          LOBYTE(v29) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read directory size in End of Central Directory record.");
        }
        else
        {
          if (v8 + 20 < v7)
          {
            (*(void (**)(void **__return_ptr, unint64_t, uint64_t, void, void, uint64_t, void, uint64_t *, void **, unsigned char *))(*(void *)v5 + 40))(&v32, v5, a2, *(unsigned int *)(v6 + v8 + 16), (*(_DWORD *)(v6 + v8 + 16) + *(_DWORD *)(v6 + v8 + 12)), 1, 0, v38, v36, v39);
            if (v39[0])
            {
              LOBYTE(v27) = 1;
              sub_216779094(&v28, "");
              long long v30 = 0u;
              long long v29 = 0u;
              int v31 = 1065353216;
              int v12 = v32;
              uint64_t v13 = *v32;
              unint64_t v14 = v32[1] - *v32;
              if (v14 == 30)
              {
LABEL_62:
                BOOL v10 = 0;
              }
              else
              {
                __int16 v15 = 0;
                unint64_t v16 = 0;
                do
                {
                  if (*(unsigned char *)(v13 + v16) == 80
                    && *(unsigned char *)(v16 + v13 + 1) == 75
                    && *(unsigned char *)(v16 + v13 + 2) == 1
                    && *(unsigned char *)(v16 + v13 + 3) == 2)
                  {
                    if (v16 + 28 >= v14)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 270;
                      atomic_ullong v25 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      char v26 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read uncompressed size for entry.");
                      goto LABEL_62;
                    }
                    if (v16 + 30 >= v14)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 279;
                      atomic_ullong v25 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      char v26 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file name length for entry.");
                      goto LABEL_62;
                    }
                    if (v16 + 32 >= v14)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 288;
                      atomic_ullong v25 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      char v26 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read extra field length for entry.");
                      goto LABEL_62;
                    }
                    unint64_t v17 = v16 + 46;
                    if (v16 + 46 >= v14)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 297;
                      atomic_ullong v25 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      char v26 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read file offset for entry");
                      goto LABEL_62;
                    }
                    uint64_t v18 = *(unsigned __int16 *)(v13 + v16 + 28);
                    if (v17 + v18 >= v14)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"aaplHttpResolver/aaplHttpResolver.cpp";
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"GetPackageContents";
                      __p.__r_.__value_.__r.__words[2] = 312;
                      atomic_ullong v25 = "BOOL pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetPackageContents(const std::string &) const";
                      char v26 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to file name for entry");
                      goto LABEL_62;
                    }
                    int v19 = *(_DWORD *)(v16 + v13 + 24);
                    int v20 = *(unsigned __int16 *)(v13 + v16 + 30);
                    uint64_t v21 = *(unsigned int *)(v16 + v13 + 42);
                    sub_216799F58(&__str, (void *)(v13 + v17), *(unsigned __int16 *)(v13 + v16 + 28));
                    if (!v15) {
                      std::string::operator=(&v28, &__str);
                    }
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      sub_216778F24(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string __p = __str;
                    }
                    atomic_ullong v25 = (const char *)((v19 + v18 + v20 + 30) | (unint64_t)(v21 << 32));
                    sub_2170761B4((uint64_t)&v29, (unsigned __int8 *)&__p, (uint64_t)&__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    ++v15;
                    int v12 = v32;
                    uint64_t v13 = *v32;
                    unint64_t v16 = v17;
                  }
                  ++v16;
                  unint64_t v14 = v12[1] - v13;
                }
                while (v16 < v14 - 30);
                if (!*((void *)&v30 + 1)) {
                  goto LABEL_62;
                }
                (*(void (**)(unint64_t, uint64_t, void ***))(*(void *)v5 + 48))(v5, a2, &v27);
                BOOL v10 = v39[0] != 0;
              }
              sub_217075B4C((uint64_t)&v27);
            }
            else
            {
              atomic_ullong v27 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
              v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
              v28.__r_.__value_.__l.__size_ = 244;
              v28.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttp"
                                                                         "Resolver::GetPackageContents(const std::string &) const";
              LOBYTE(v29) = 0;
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v22 = (const char *)a2;
              }
              else {
                uint64_t v22 = *(const char **)a2;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to fetch central directory for %s", v22);
              BOOL v10 = 0;
            }
            if (v33) {
              sub_216784EC4(v33);
            }
            goto LABEL_16;
          }
          atomic_ullong v27 = (void **)"aaplHttpResolver/aaplHttpResolver.cpp";
          v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"GetPackageContents";
          v28.__r_.__value_.__l.__size_ = 232;
          v28.__r_.__value_.__r.__words[2] = (std::string::size_type)"BOOL pxrInternal__aapl__pxrReserved__::AaplHttpReso"
                                                                     "lver::GetPackageContents(const std::string &) const";
          LOBYTE(v29) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read directory offset in End of Central Directory record.");
        }
      }
    }
  }
  BOOL v10 = 0;
LABEL_16:
  if (v35) {
    sub_216784EC4(v35);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
LABEL_21:
  atomic_ullong v27 = (void **)v38;
  sub_216787968(&v27);
  return v10;
}

void sub_2170790F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  sub_217075B4C((uint64_t)&a24);
  if (a34) {
    sub_216784EC4(a34);
  }
  if (a36) {
    sub_216784EC4(a36);
  }
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  a24 = v36 - 120;
  sub_216787968((void ***)&a24);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_Resolve(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4) {
    goto LABEL_10;
  }
  unint64_t Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(a1);
  if (!Delegate)
  {
    v11[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    v11[1] = "_Resolve";
    uint64_t v11[2] = 149;
    void v11[3] = "virtual ArResolvedPath pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_Resolve(const std::string &) const";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  unint64_t v8 = Delegate;
  if ((*(unsigned int (**)(unint64_t))(*(void *)Delegate + 80))(Delegate)
    && ((*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v8 + 72))(v8, a2) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::ArDefaultResolver::_Resolve(a1, a2, a3);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v9 = *(void **)a2;
    unint64_t v10 = *(void *)(a2 + 8);
    sub_216778F24(a3, v9, v10);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = *(void *)(a2 + 16);
  }
}

void *pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetExtension@<X0>(pxrInternal__aapl__pxrReserved__::AaplHttpResolver *a1@<X0>, void *a2@<X8>)
{
  unint64_t Delegate = pxrInternal__aapl__pxrReserved__::AaplHttpResolver::GetDelegate(a1);
  if (Delegate)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)Delegate + 64);
    return (void *)v4();
  }
  else
  {
    v6[0] = "aaplHttpResolver/aaplHttpResolver.cpp";
    v6[1] = "_GetExtension";
    _OWORD v6[2] = 424;
    v6[3] = "virtual std::string pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_GetExtension(const std::string &) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 3, (pxrInternal__aapl__pxrReserved__ *)"HttpResolverDelegate was not available");
    return sub_216779094(a2, "");
  }
}

void pxrInternal__aapl__pxrReserved__::AaplHttpResolver::SetDelegate(uint64_t a1, unint64_t a2, int a3)
{
  if (a3)
  {
    if (atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate))
    {
      unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
      atomic_store(0, &pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
      if (v5) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  atomic_store(a2, &pxrInternal__aapl__pxrReserved__::AaplHttpResolver::_delegate);
}

void sub_21707946C(pxrInternal__aapl__pxrReserved__::ArDefaultResolver *a1)
{
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::~ArDefaultResolver(a1);

  operator delete(v1);
}

uint64_t *sub_217079494()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216971348((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_217079574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2170795C0(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C771C60;
  unint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  unint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21707964C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217079670(pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Ar_ResolverFactoryBase::~Ar_ResolverFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::ArDefaultResolver *sub_217079698()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::ArDefaultResolver *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::ArDefaultResolver::ArDefaultResolver(v0);
  *(void *)uint64_t v0 = &unk_26C771B80;
  return v0;
}

void sub_2170796E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2170796F8@<X0>(unint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x38uLL);
  uint64_t result = sub_21707975C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217079748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21707975C(void *a1, unint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C771CA0;
  sub_21707985C((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_2170797BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2170797D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C771CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2170797F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C771CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217079834(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21707985C(uint64_t a1, void *a2, unint64_t *a3, int *a4)
{
  unint64_t v4 = a3[1];
  v5.n128_u64[0] = *a3;
  v5.n128_u64[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::AaplHttpAsset::AaplHttpAsset(a2, &v5, *a4);
  if (v5.n128_u64[1]) {
    sub_216784EC4((std::__shared_weak_count *)v5.n128_u64[1]);
  }
}

void sub_2170798B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::~UsdPhysicsPreliminary_InfiniteColliderPlane(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771D78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_InfiniteColliderPlane.cpp";
    unint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_InfiniteColliderPlane pxrInternal__aapl__pxrReserved__::UsdPhys"
                            "icsPreliminary_InfiniteColliderPlane::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771D78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_217079A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B950C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B950C8))
  {
    __cxa_guard_release(&qword_267B950C8);
  }
  return &qword_267B950C0;
}

void sub_217079B1C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B950D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *)__cxa_guard_acquire(&qword_267B950D8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetStaticTfType(v2);
      byte_267B950D0 = sub_216D16508((char *)&qword_267B950C0, v3, v4);
      __cxa_guard_release(&qword_267B950D8);
    }
  }
  return byte_267B950D0;
}

void sub_217079B9C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  return &qword_267B950C0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::GetPositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 16), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217079C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::CreatePositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 216), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::GetNormalAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_217079DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::CreateNormalAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 240), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_InfiniteColliderPlane *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B950F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B950F8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 2);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      __n128 v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v6) {
      int v6 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    int v7 = *(atomic_uint **)v6;
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B950E0, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B950E0, &dword_216758000);
    __cxa_guard_release(&qword_267B950F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95118))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_21707A0FC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95100, &dword_216758000);
    __cxa_guard_release(&qword_267B95118);
  }
  if (v1) {
    return &qword_267B95100;
  }
  else {
    return &qword_267B950E0;
  }
}

void sub_21707A084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B950F8);
  _Unwind_Resume(a1);
}

void *sub_21707A0FC(uint64_t **a1)
{
  qword_267B95108 = 0;
  unk_267B95110 = 0;
  qword_267B95100 = 0;
  sub_216973388((char **)&qword_267B95100, ((unk_267B950E8 - qword_267B950E0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95100, (void *)qword_267B95108, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95100, (void *)qword_267B95108, (uint64_t *)qword_267B950E0, unk_267B950E8, (unk_267B950E8 - qword_267B950E0) >> 3);
}

void sub_21707A194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21707A1B4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F0D538((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21707A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *sub_21707A2E4(atomic_ullong *a1)
{
  uint64_t result = sub_21707A32C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_21707A370((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *sub_21707A32C()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::AaplUsdPhysicsTokensType(v0);
  return v0;
}

void sub_21707A35C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21707A370(uint64_t a1)
{
  uint64_t v11 = (void **)(a1 + 72);
  sub_216889A04(&v11);
  uint64_t v2 = *(void *)(a1 + 64);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::~UsdPhysicsPreliminary_PhysicsColliderAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C771DD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_PhysicsColliderAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsColliderAPI pxrInternal__aapl__pxrReserved__::UsdPhysics"
                            "Preliminary_PhysicsColliderAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C771DD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21707A640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  return 5;
}

uint64_t sub_21707A668(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95120, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    _OWORD v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_21707A850(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C771DD0;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C771DD0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_21707A83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21707A850(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95120, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    void v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsPreliminary_PhysicsColliderAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95128, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95128))
  {
    __cxa_guard_release(&qword_267B95128);
  }
  return &qword_267B95120;
}

void sub_21707A984(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95138, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *)__cxa_guard_acquire(&qword_267B95138);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetStaticTfType(v2);
      byte_267B95130 = sub_216D16508((char *)&qword_267B95120, v3, v4);
      __cxa_guard_release(&qword_267B95138);
    }
  }
  return byte_267B95130;
}

void sub_21707AA04(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  return &qword_267B95120;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetPreliminaryPhysicsColliderConvexShapeRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 24), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707AADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::CreatePreliminaryPhysicsColliderConvexShapeRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 24), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95158))
  {
    qword_267B95140 = 0;
    *(void *)algn_267B95148 = 0;
    qword_267B95150 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95140, &dword_216758000);
    __cxa_guard_release(&qword_267B95158);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95178))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B95160 = 0;
    *(void *)algn_267B95168 = 0;
    qword_267B95170 = 0;
    sub_21698FA28(&qword_267B95160, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95160, &dword_216758000);
    __cxa_guard_release(&qword_267B95178);
  }
  if (v1) {
    return &qword_267B95160;
  }
  else {
    return &qword_267B95140;
  }
}

void sub_21707ACC0(_Unwind_Exception *a1)
{
}

uint64_t *sub_21707ACD8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21707ADB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::~UsdPhysicsPreliminary_PhysicsForce(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771E28;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_PhysicsForce.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsForce pxrInternal__aapl__pxrReserved__::UsdPhysicsPrelim"
                            "inary_PhysicsForce::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771E28;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21707AFBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95188, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95188))
  {
    __cxa_guard_release(&qword_267B95188);
  }
  return &qword_267B95180;
}

void sub_21707B04C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95198, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *)__cxa_guard_acquire(&qword_267B95198);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetStaticTfType(v2);
      byte_267B95190 = sub_216D16508((char *)&qword_267B95180, v3, v4);
      __cxa_guard_release(&qword_267B95198);
    }
  }
  return byte_267B95190;
}

void sub_21707B0CC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  return &qword_267B95180;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B951B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B951B8))
  {
    qword_267B951A0 = 0;
    *(void *)algn_267B951A8 = 0;
    qword_267B951B0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B951A0, &dword_216758000);
    __cxa_guard_release(&qword_267B951B8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B951D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B951D8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_267B951C0 = 0;
    *(void *)algn_267B951C8 = 0;
    qword_267B951D0 = 0;
    sub_21698FA28(&qword_267B951C0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B951C0, &dword_216758000);
    __cxa_guard_release(&qword_267B951D8);
  }
  if (v1) {
    return &qword_267B951C0;
  }
  else {
    return &qword_267B951A0;
  }
}

void sub_21707B214(_Unwind_Exception *a1)
{
}

uint64_t *sub_21707B22C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21707B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_21707B35C()
{
  sub_21707BCDC();
  sub_216779094(__p, "Preliminary_PhysicsGravitationalForce");
  sub_21707BE08((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21707B3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::~UsdPhysicsPreliminary_PhysicsGravitationalForce(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::~UsdPhysicsPreliminary_PhysicsForce(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771E80;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_PhysicsGravitationalForce.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsGravitationalForce pxrInternal__aapl__pxrReserved__::Usd"
                            "PhysicsPreliminary_PhysicsGravitationalForce::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771E80;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21707B578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B951E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B951E8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B951E0, "Preliminary_PhysicsGravitationalForce");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B951E0, &dword_216758000);
    __cxa_guard_release(&qword_267B951E8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B951E0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771E80;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_PhysicsGravitationalForce.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsGravitationalForce pxrInternal__aapl__pxrReserved__::Usd"
                            "PhysicsPreliminary_PhysicsGravitationalForce::Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C771E80;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21707B784(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B951F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B951F8))
  {
    __cxa_guard_release(&qword_267B951F8);
  }
  return &qword_267B951F0;
}

void sub_21707B82C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95208, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *)__cxa_guard_acquire(&qword_267B95208);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetStaticTfType(v2);
      byte_267B95200 = sub_216D16508((char *)&qword_267B951F0, v3, v4);
      __cxa_guard_release(&qword_267B95208);
    }
  }
  return byte_267B95200;
}

void sub_21707B8AC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  return &qword_267B951F0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::GetPhysicsGravitationalForceAccelerationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 8), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::CreatePhysicsGravitationalForceAccelerationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 8), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 240), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsGravitationalForce *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95228))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 1);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B95210, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95210, &dword_216758000);
    __cxa_guard_release(&qword_267B95228);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95248))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsForce *)1);
    sub_21707BC24((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95230, &dword_216758000);
    __cxa_guard_release(&qword_267B95248);
  }
  if (v1) {
    return &qword_267B95230;
  }
  else {
    return &qword_267B95210;
  }
}

void sub_21707BBDC(_Unwind_Exception *a1)
{
}

void *sub_21707BC24(uint64_t **a1)
{
  qword_267B95238 = 0;
  unk_267B95240 = 0;
  qword_267B95230 = 0;
  sub_216973388((char **)&qword_267B95230, ((unk_267B95218 - qword_267B95210) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95230, (void *)qword_267B95238, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95230, (void *)qword_267B95238, (uint64_t *)qword_267B95210, unk_267B95218, (unk_267B95218 - qword_267B95210) >> 3);
}

void sub_21707BCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21707BCDC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_21707BEBC((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21707BDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_21707BE08(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_21707BE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21707BEBC(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21707BF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::~UsdPhysicsPreliminary_PhysicsMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C771ED8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_PhysicsMaterialAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsMaterialAPI pxrInternal__aapl__pxrReserved__::UsdPhysics"
                            "Preliminary_PhysicsMaterialAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C771ED8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21707C10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  return 5;
}

uint64_t sub_21707C134(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95250, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    _OWORD v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_21707C31C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C771ED8;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C771ED8;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_21707C308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21707C31C(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95250, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    void v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsPreliminary_PhysicsMaterialAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95258))
  {
    __cxa_guard_release(&qword_267B95258);
  }
  return &qword_267B95250;
}

void sub_21707C450(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95268, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *)__cxa_guard_acquire(&qword_267B95268);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetStaticTfType(v2);
      byte_267B95260 = sub_216D16508((char *)&qword_267B95250, v3, v4);
      __cxa_guard_release(&qword_267B95268);
    }
  }
  return byte_267B95260;
}

void sub_21707C4D0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  return &qword_267B95250;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetPreliminaryPhysicsMaterialRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::CreatePreliminaryPhysicsMaterialRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetPreliminaryPhysicsMaterialFrictionStaticAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 40), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::CreatePreliminaryPhysicsMaterialFrictionStaticAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetPreliminaryPhysicsMaterialFrictionDynamicAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 32), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::CreatePreliminaryPhysicsMaterialFrictionDynamicAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95288))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 6);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v5) {
      int v5 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 5);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 4);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95270, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95270, &dword_216758000);
    __cxa_guard_release(&qword_267B95288);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B952A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B952A8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_21707CC10((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95290, &dword_216758000);
    __cxa_guard_release(&qword_267B952A8);
  }
  if (v1) {
    return &qword_267B95290;
  }
  else {
    return &qword_267B95270;
  }
}

void sub_21707CB8C(_Unwind_Exception *a1)
{
}

void *sub_21707CC10(uint64_t **a1)
{
  qword_267B95298 = 0;
  unk_267B952A0 = 0;
  qword_267B95290 = 0;
  sub_216973388((char **)&qword_267B95290, ((unk_267B95278 - qword_267B95270) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95290, (void *)qword_267B95298, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95290, (void *)qword_267B95298, (uint64_t *)qword_267B95270, unk_267B95278, (unk_267B95278 - qword_267B95270) >> 3);
}

void sub_21707CCA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21707CCC8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21707CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::~UsdPhysicsPreliminary_PhysicsRigidBodyAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C771F30;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdPhysics/preliminary_PhysicsRigidBodyAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPreliminary_PhysicsRigidBodyAPI pxrInternal__aapl__pxrReserved__::UsdPhysic"
                            "sPreliminary_PhysicsRigidBodyAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C771F30;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_21707CFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  return 5;
}

uint64_t sub_21707CFDC(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B952B0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    _OWORD v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_21707D1C4(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C771F30;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C771F30;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_21707D1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21707D1C4(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B952B0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    void v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B952B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B952B8))
  {
    __cxa_guard_release(&qword_267B952B8);
  }
  return &qword_267B952B0;
}

void sub_21707D2F8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B952C8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *)__cxa_guard_acquire(&qword_267B952C8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetStaticTfType(v2);
      byte_267B952C0 = sub_216D16508((char *)&qword_267B952B0, v3, v4);
      __cxa_guard_release(&qword_267B952C8);
    }
  }
  return byte_267B952C0;
}

void sub_21707D378(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  return &qword_267B952B0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::GetPreliminaryPhysicsRigidBodyMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::CreatePreliminaryPhysicsRigidBodyMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::GetPreliminaryPhysicsRigidBodyInitiallyActiveAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_21707D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::CreatePreliminaryPhysicsRigidBodyInitiallyActiveAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)((char *)v8 + 56), v9, 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B952E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B952E8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 8);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    if (!v6) {
      int v6 = sub_21707A2E4(&pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 7);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B952D0, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B952D0, &dword_216758000);
    __cxa_guard_release(&qword_267B952E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95308, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95308))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_21707D8D8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B952F0, &dword_216758000);
    __cxa_guard_release(&qword_267B95308);
  }
  if (v1) {
    return &qword_267B952F0;
  }
  else {
    return &qword_267B952D0;
  }
}

void sub_21707D860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B952E8);
  _Unwind_Resume(a1);
}

void *sub_21707D8D8(uint64_t **a1)
{
  qword_267B952F8 = 0;
  unk_267B95300 = 0;
  qword_267B952F0 = 0;
  sub_216973388((char **)&qword_267B952F0, ((unk_267B952D8 - qword_267B952D0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B952F0, (void *)qword_267B952F8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B952F0, (void *)qword_267B952F8, (uint64_t *)qword_267B952D0, unk_267B952D8, (unk_267B952D8 - qword_267B952D0) >> 3);
}

void sub_21707D970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21707D990()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21707DA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::AaplUsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "normal", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "physics:gravitationalForce:acceleration", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "position", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "preliminary:physics:collider:convexShape", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "preliminary:physics:material:friction:dynamic", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "preliminary:physics:material:friction:static", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "preliminary:physics:material:restitution", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "preliminary:physics:rigidBody:initiallyActive", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "preliminary:physics:rigidBody:mass", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v18 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v19 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v21 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v22 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v23 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v24 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v25 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v26 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  uint64_t v12 = (char *)operator new(0x48uLL);
  uint64_t v13 = 0;
  *((void *)this + 9) = v12;
  *((void *)this + 10) = v12;
  *((void *)this + 11) = v12 + 72;
  do
  {
    uint64_t v14 = *(uint64_t *)((char *)&v18 + v13);
    *(void *)&v12[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v12[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 72);
  *((void *)this + 10) = v12 + 72;
  for (uint64_t i = 64; i != -8; i -= 8)
  {
    uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_21707DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v21 = 64;
  while (1)
  {
    uint64_t v22 = *(void *)(&a11 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_21707DF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 8;
  uint64_t v7 = (_DWORD *)(a2 + 16);
  sub_216D16CFC((uint64_t)v64, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  uint64_t v8 = sub_216D563F8(v64);
  if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (const std::string *)((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  std::string::operator=((std::string *)(a1 + 8), EmptyString);
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v66);
  sub_21697C414(&v65);
  if (v64[1]) {
    sub_216D16E0C((atomic_ullong *)v64[1]);
  }
  v83[0] = 0;
  v83[1] = 0;
  unint64_t v81 = 0;
  unint64_t v82 = v83;
  unint64_t v79 = (uint64_t *)&v80;
  double v80 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  sub_216779094(v74, ":indices");
  sub_216D16CFC((uint64_t)v64, (uint64_t *)v6, v7);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes((pxrInternal__aapl__pxrReserved__::UsdPrim *)v64, (uint64_t *)v63);
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v66);
  sub_21697C414(&v65);
  if (v64[1]) {
    sub_216D16E0C((atomic_ullong *)v64[1]);
  }
  uint64_t v10 = (char *)v63[0];
  uint64_t v11 = (char *)v63[1];
  if (v63[0] != v63[1])
  {
    while (1)
    {
      LODWORD(v64[0]) = *(_DWORD *)v10;
      uint64_t v12 = (atomic_ullong *)*((void *)v10 + 1);
      v64[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(v12 + 6, 1uLL, memory_order_relaxed);
      }
      sub_216981010(&v65, (_DWORD *)v10 + 4);
      sub_21698105C(&v66, (_DWORD *)v10 + 5);
      uint64_t v13 = *((void *)v10 + 3);
      uint64_t v67 = v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v67 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v14 = sub_216D563F8(v64);
      if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v15 = (uint64_t *)((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      if (*((char *)v15 + 23) < 0)
      {
        sub_216778F24(__p, (void *)*v15, v15[1]);
      }
      else
      {
        long long v16 = *(_OWORD *)v15;
        uint64_t v62 = v15[2];
        *(_OWORD *)std::string __p = v16;
      }
      if (v62 >= 0) {
        unint64_t v17 = (char *)HIBYTE(v62);
      }
      else {
        unint64_t v17 = (char *)__p[1];
      }
      if ((v75 & 0x80u) == 0) {
        uint64_t v18 = (char *)v75;
      }
      else {
        uint64_t v18 = (char *)v74[1];
      }
      BOOL v19 = v17 >= v18;
      uint64_t v20 = (char *)(v17 - v18);
      if (v19)
      {
        if (v62 < 0)
        {
          if (v18 == (char *)-1 || __p[1] < v20) {
LABEL_146:
          }
            sub_216855AD4();
          uint64_t v25 = (char *)((char *)__p[1] - (char *)v20) >= v18 ? v18 : (char *)((char *)__p[1] - (char *)v20);
          uint64_t v26 = (void **)__p[0];
        }
        else
        {
          if (HIBYTE(v62) < (unint64_t)v20 || v18 == (char *)-1) {
            goto LABEL_146;
          }
          uint64_t v25 = HIBYTE(v62) - (unint64_t)v20 >= (unint64_t)v18 ? v18 : (char *)(HIBYTE(v62) - (void)v20);
          uint64_t v26 = __p;
        }
        uint64_t v37 = (v75 & 0x80u) == 0 ? v74 : (void **)v74[0];
        if (!memcmp(&v20[(void)v26], v37, (size_t)v25) && v25 == v18) {
          goto LABEL_74;
        }
      }
      uint64_t v21 = sub_21678C2D8(a3, (const void **)__p);
      if (a3 + 8 != v21) {
        break;
      }
      int v27 = sub_2170955E8((const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v64, (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2);
      if (!v27)
      {
        unint64_t v38 = sub_2170965F8((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v64);
        *(void *)&long long v72 = __p;
        long long v39 = sub_217088108((uint64_t **)&v82, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v72);
        *((_DWORD *)v39 + 14) = v38;
        *((_WORD *)v39 + 30) = WORD2(v38);
LABEL_74:
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples((uint64_t)v64, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v76);
        long long v42 = v76;
        long long v43 = v77;
        while (v42 != v43)
        {
          *(void *)&long long v72 = 0;
          *(void *)&long long v72 = *v42;
          sub_21708827C(&v79, (double *)&v72, (uint64_t *)&v72);
          ++v42;
        }
        int v24 = 0;
        goto LABEL_78;
      }
      std::string v28 = sub_2170A4138();
      std::operator+<char>();
      long long v29 = std::string::append(&v69, "(code ");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v68, v27);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = &v68;
      }
      else {
        int v31 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v68.__r_.__value_.__l.__size_;
      }
      unint64_t v33 = std::string::append(&v70, (const std::string::value_type *)v31, size);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      uint64_t v35 = std::string::append(&__dst, ")");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      std::string::size_type v73 = v35->__r_.__value_.__r.__words[2];
      long long v72 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      sub_21707F290((os_log_t *)v28, (uint64_t *)&v72);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      int v24 = 3;
LABEL_78:
      if (SHIBYTE(v62) < 0) {
        operator delete(__p[0]);
      }
      if ((v67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v66);
      sub_21697C414(&v65);
      if (v64[1]) {
        sub_216D16E0C((atomic_ullong *)v64[1]);
      }
      if (v24 != 3 && v24)
      {
        v64[0] = v63;
        sub_216D6CFF8((void ***)v64);
        goto LABEL_141;
      }
      v10 += 32;
      if (v10 == v11) {
        goto LABEL_87;
      }
    }
    uint64_t v22 = sub_2170955E8((const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v64, (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2);
    if (v22
      || (v23 = v21 + 56, uint64_t v22 = sub_217095FA8((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v64, v23), v22))
    {
      int v24 = 1;
      uint64_t v6 = v22;
      goto LABEL_78;
    }
    *(void *)&long long v72 = __p;
    char v40 = sub_217088108((uint64_t **)&v82, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v72);
    int v41 = *(_DWORD *)v23;
    *((_WORD *)v40 + 30) = *(_WORD *)(v23 + 4);
    *((_DWORD *)v40 + 14) = v41;
    goto LABEL_74;
  }
LABEL_87:
  v64[0] = v63;
  sub_216D6CFF8((void ***)v64);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a2, (uint64_t)&v72);
  long long v44 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)*((void *)&v72 + 1);
  for (uint64_t i = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v72;
        i != v44;
        uint64_t i = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)i + 24))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v63, i);
    v63[0] = &unk_26C76D230;
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v63, (uint64_t)v64);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples((uint64_t)v64, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v76);
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v66);
    sub_21697C414(&v65);
    if (v64[1]) {
      sub_216D16E0C((atomic_ullong *)v64[1]);
    }
    uint64_t v46 = (void **)v76;
    uint64_t v47 = (void **)v77;
    while (v46 != v47)
    {
      v64[0] = 0;
      v64[0] = *v46;
      sub_21708827C(&v79, (double *)v64, (uint64_t *)v64);
      ++v46;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v63);
  }
  if (v81 <= 1)
  {
    *(unsigned char *)(a1 + 104) = 1;
    *(_DWORD *)(a1 + 136) = 14;
    sub_216779094(v64, "points");
    uint64_t v49 = sub_21678C2D8((uint64_t)&v82, (const void **)v64);
    if (SHIBYTE(v66) < 0) {
      operator delete(v64[0]);
    }
    if (v83 != (char **)v49)
    {
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(v49 + 56);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(v49 + 61);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2, (uint64_t)v64);
    __p[0] = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v64);
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)__p, (atomic_uint **)v63);
    if (((unint64_t)v63[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v51 = (uint64_t *)(((unint64_t)v63[0] & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v51 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)v51 + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*v51, v51[1]);
    }
    else
    {
      long long v52 = *(_OWORD *)v51;
      __dst.__r_.__value_.__r.__words[2] = v51[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v52;
    }
    if (((uint64_t)v63[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v63[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v66);
    sub_21697C414(&v65);
    if (v64[1]) {
      sub_216D16E0C((atomic_ullong *)v64[1]);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst.__r_.__value_.__l.__size_ == 9)
      {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (*(void *)__dst.__r_.__value_.__l.__data_ != 0x5B6633746E696F70
          || *(unsigned char *)(__dst.__r_.__value_.__r.__words[0] + 8) != 93)
        {
LABEL_129:
          std::string::size_type v56 = p_dst->__r_.__value_.__r.__words[0];
          int v57 = p_dst->__r_.__value_.__s.__data_[8];
          if (v56 == 0x5B6433746E696F70 && v57 == 93) {
            sub_21707F744(a1 + 80, a1 + 32, a1 + 56, a1 + 104, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)a2);
          }
          goto LABEL_133;
        }
LABEL_136:
        sub_21707F33C(a1 + 80, a1 + 32, a1 + 56, a1 + 104, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)a2);
      }
    }
    else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) == 9)
    {
      if (__dst.__r_.__value_.__r.__words[0] != 0x5B6633746E696F70 || __dst.__r_.__value_.__s.__data_[8] != 93)
      {
        p_dst = &__dst;
        goto LABEL_129;
      }
      goto LABEL_136;
    }
LABEL_133:
    uint64_t v59 = sub_2170A4138();
    std::operator+<char>();
    sub_21707FB4C((os_log_t *)v59, (uint64_t *)v64);
    if (SHIBYTE(v66) < 0) {
      operator delete(v64[0]);
    }
    uint64_t v6 = 201;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    goto LABEL_140;
  }
  char v48 = sub_2170A4138();
  sub_216779094(v64, "fromUsdMesh: Animation not supported!");
  sub_21707F290((os_log_t *)v48, (uint64_t *)v64);
  if (SHIBYTE(v66) < 0) {
    operator delete(v64[0]);
  }
  uint64_t v6 = 200;
LABEL_140:
  v64[0] = &v72;
  sub_216F50D48((void ***)v64);
LABEL_141:
  if ((char)v75 < 0) {
    operator delete(v74[0]);
  }
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  sub_2167FB780((uint64_t)&v79, v80);
  sub_21678A498((uint64_t)&v82, v83[0]);
  return v6;
}

void sub_21707EF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  sub_2168F83DC((uint64_t)&a31);
  a31 = &a52;
  sub_217087F44(&a31);
  if (*(char *)(v57 - 217) < 0) {
    operator delete(*(void **)(v57 - 240));
  }
  a31 = (void **)(v57 - 208);
  sub_216F50D48(&a31);
  if (*(char *)(v57 - 161) < 0) {
    operator delete(*(void **)(v57 - 184));
  }
  uint64_t v59 = *(void **)(v57 - 160);
  if (v59)
  {
    *(void *)(v57 - 152) = v59;
    operator delete(v59);
  }
  sub_2167FB780(v57 - 136, *(void **)(v57 - 128));
  sub_21678A498(v57 - 112, *(char **)(v57 - 104));
  _Unwind_Resume(a1);
}

void sub_21707F290(os_log_t *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_impl(&dword_216758000, v3, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v5, 0xCu);
  }
}

void sub_21707F33C(int a1, int a2, int a3, int a4, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  __src = 0;
  long long v10 = 0u;
  long long v9 = 0u;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_21707F6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC((uint64_t)va2);
  sub_2168F83DC(v5 - 128);
  _Unwind_Resume(a1);
}

void sub_21707F744(int a1, int a2, int a3, int a4, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  __src = 0;
  long long v10 = 0u;
  long long v9 = 0u;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(this, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_21707FABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_2168F83DC((uint64_t)va2);
  sub_2168F83DC(v5 - 128);
  _Unwind_Resume(a1);
}

void sub_21707FB4C(os_log_t *a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315138;
    long long v6 = v4;
    _os_log_impl(&dword_216758000, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_21707FBF8(void *a1)
{
  unint64_t v2 = (long long *)a1[27];
  uint64_t v3 = (long long *)(a1 + 28);
  if (v2 != (long long *)(a1 + 28))
  {
    do
    {
      sub_2168BB890(&v148, v2 + 2);
      if (SHIBYTE(v149) < 0)
      {
        sub_216778F24(&__dst, (void *)v148, *((unint64_t *)&v148 + 1));
      }
      else
      {
        long long __dst = v148;
        uint64_t v147 = v149;
      }
      int v5 = *(unsigned __int8 *)(v150 + 136);
      unint64_t v6 = *(int *)(v150 + 140);
      if ((v5 - 3) <= 1)
      {
        uint64_t v7 = *(void *)(v150 + 56) - *(void *)(v150 + 48);
        if (!v7)
        {
          if (((uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2) / v6 == ((uint64_t)(a1[11] - a1[10]) >> 2)
                                                                                       / 3uLL)
            goto LABEL_154;
          uint64_t v23 = sub_2170A4138();
          std::operator+<char>();
          int v24 = std::string::append(&v138, ", data size: ");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v137, (uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2);
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v26 = &v137;
          }
          else {
            uint64_t v26 = (std::string *)v137.__r_.__value_.__r.__words[0];
          }
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v137.__r_.__value_.__l.__size_;
          }
          std::string v28 = std::string::append(&v139, (const std::string::value_type *)v26, size);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          long long v30 = std::string::append(&v140, ", gclCPV: ");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, v6);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v32 = &v136;
          }
          else {
            uint64_t v32 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v33 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v33 = v136.__r_.__value_.__l.__size_;
          }
          long long v34 = std::string::append(&v141, (const std::string::value_type *)v32, v33);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          long long v36 = std::string::append(&v142, ", points size: ");
          long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v37;
          v36->__r_.__value_.__l.__size_ = 0;
          v36->__r_.__value_.__r.__words[2] = 0;
          v36->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v135, (uint64_t)(a1[11] - a1[10]) >> 2);
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v38 = &v135;
          }
          else {
            unint64_t v38 = (std::string *)v135.__r_.__value_.__r.__words[0];
          }
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v39 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v39 = v135.__r_.__value_.__l.__size_;
          }
LABEL_200:
          uint64_t v126 = std::string::append(&v143, (const std::string::value_type *)v38, v39);
          long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          std::string::size_type v145 = v126->__r_.__value_.__r.__words[2];
          long long v144 = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v23, (uint64_t *)&v144);
          if (SHIBYTE(v145) < 0) {
            operator delete((void *)v144);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v141.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v139.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          int v70 = 0;
          uint64_t v1 = 210;
          goto LABEL_221;
        }
        if (v7 >> 2 != ((uint64_t)(a1[11] - a1[10]) >> 2) / 3uLL)
        {
          char v40 = sub_2170A4138();
          std::operator+<char>();
          int v41 = std::string::append(&v140, ", indices size: ");
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v139, (uint64_t)(*(void *)(v150 + 56) - *(void *)(v150 + 48)) >> 2);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v43 = &v139;
          }
          else {
            long long v43 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v44 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v44 = v139.__r_.__value_.__l.__size_;
          }
          long long v45 = std::string::append(&v141, (const std::string::value_type *)v43, v44);
          long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          uint64_t v47 = std::string::append(&v142, ", points size: ");
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, (uint64_t)(a1[11] - a1[10]) >> 2);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v49 = &v138;
          }
          else {
            uint64_t v49 = (std::string *)v138.__r_.__value_.__r.__words[0];
          }
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v50 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v50 = v138.__r_.__value_.__l.__size_;
          }
          goto LABEL_167;
        }
        long long v144 = 0uLL;
        std::string::size_type v145 = 0;
        sub_216825C04(&v144, *(const void **)(v150 + 24), *(void *)(v150 + 32), (uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2);
        sub_21681C000(v150 + 24, ((uint64_t)(*(void *)(v150 + 56) - *(void *)(v150 + 48)) >> 2) * v6);
        uint64_t v8 = v150;
        uint64_t v9 = *(_DWORD **)(v150 + 48);
        uint64_t v10 = *(void *)(v150 + 56) - (void)v9;
        if (v10)
        {
          unint64_t v11 = v10 >> 2;
          if (v11 <= 1) {
            uint64_t v12 = 1;
          }
          else {
            uint64_t v12 = v11;
          }
          unsigned int v13 = *v9 * v6;
          if ((v13 & 0x80000000) != 0)
          {
            BOOL v18 = 1;
          }
          else
          {
            uint64_t v14 = 0;
            unint64_t v15 = 0;
            uint64_t v16 = v144;
            unint64_t v17 = (uint64_t)(*((void *)&v144 + 1) - v144) >> 2;
            BOOL v18 = 1;
            while (v17 >= (int)(v13 + v6))
            {
              if ((int)v6 >= 1)
              {
                uint64_t v19 = (_DWORD *)(*(void *)(v8 + 24) + v14);
                uint64_t v20 = (int *)(v16 + 4 * v13);
                uint64_t v21 = v6;
                do
                {
                  int v22 = *v20++;
                  *v19++ = v22;
                  --v21;
                }
                while (v21);
              }
              if (++v15 == v12) {
                goto LABEL_52;
              }
              BOOL v18 = v11 > v15;
              unsigned int v13 = v9[v15] * v6;
              v14 += 4 * v6;
              if ((v13 & 0x80000000) != 0) {
                break;
              }
            }
          }
          uint64_t v51 = sub_2170A4138();
          std::operator+<char>();
          long long v52 = std::string::append(&v137, ", idxInOriginalData: ");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, v13);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v54 = &v136;
          }
          else {
            uint64_t v54 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v55 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v55 = v136.__r_.__value_.__l.__size_;
          }
          std::string::size_type v56 = std::string::append(&v138, (const std::string::value_type *)v54, v55);
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          uint64_t v58 = std::string::append(&v139, ", gclCPV: ");
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v135, v6);
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v135;
          }
          else {
            uint64_t v60 = (std::string *)v135.__r_.__value_.__r.__words[0];
          }
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = v135.__r_.__value_.__l.__size_;
          }
          uint64_t v62 = std::string::append(&v140, (const std::string::value_type *)v60, v61);
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          uint64_t v64 = std::string::append(&v141, ", originalData size: ");
          long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v134, (uint64_t)(*((void *)&v144 + 1) - v144) >> 2);
          if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v66 = &v134;
          }
          else {
            int v66 = (std::string *)v134.__r_.__value_.__r.__words[0];
          }
          if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v67 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v67 = v134.__r_.__value_.__l.__size_;
          }
          std::string v68 = std::string::append(&v142, (const std::string::value_type *)v66, v67);
          long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v51, (uint64_t *)&v143);
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v134.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v141.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v139.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          uint64_t v1 = 212;
        }
        else
        {
LABEL_52:
          BOOL v18 = 0;
          *(void *)(v8 + 56) = v9;
        }
        if ((void)v144)
        {
          *((void *)&v144 + 1) = v144;
          operator delete((void *)v144);
        }
        if (v18)
        {
          int v70 = 0;
          goto LABEL_221;
        }
      }
      if (v5 != 5) {
        goto LABEL_154;
      }
      std::string v71 = *(_DWORD **)(v150 + 48);
      long long v72 = *(_DWORD **)(v150 + 56);
      if (v72 == v71)
      {
        if (((uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2) / v6 == (uint64_t)(a1[8] - a1[7]) >> 2) {
          goto LABEL_154;
        }
        uint64_t v23 = sub_2170A4138();
        std::operator+<char>();
        char v112 = std::string::append(&v138, ", data size: ");
        long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v137, (uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v114 = &v137;
        }
        else {
          uint64_t v114 = (std::string *)v137.__r_.__value_.__r.__words[0];
        }
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v115 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v115 = v137.__r_.__value_.__l.__size_;
        }
        uint64_t v116 = std::string::append(&v139, (const std::string::value_type *)v114, v115);
        long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        uint64_t v118 = std::string::append(&v140, ", gclCPV: ");
        long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v136, v6);
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v120 = &v136;
        }
        else {
          uint64_t v120 = (std::string *)v136.__r_.__value_.__r.__words[0];
        }
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v121 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v121 = v136.__r_.__value_.__l.__size_;
        }
        int v122 = std::string::append(&v141, (const std::string::value_type *)v120, v121);
        long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        v124 = std::string::append(&v142, ", faceVertexIndices size: ");
        long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v135, (uint64_t)(a1[8] - a1[7]) >> 2);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v38 = &v135;
        }
        else {
          unint64_t v38 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v39 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v39 = v135.__r_.__value_.__l.__size_;
        }
        goto LABEL_200;
      }
      v143.__r_.__value_.__s.__data_[0] = 0;
      std::string::size_type v73 = sub_217087E68(v71, v72);
      if (*(void *)(v150 + 56) - *(void *)(v150 + 48) != a1[8] - a1[7])
      {
        char v40 = sub_2170A4138();
        std::operator+<char>();
        char v102 = std::string::append(&v140, ", indices size: ");
        long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v139, (uint64_t)(*(void *)(v150 + 56) - *(void *)(v150 + 48)) >> 2);
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v104 = &v139;
        }
        else {
          uint64_t v104 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v105 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v105 = v139.__r_.__value_.__l.__size_;
        }
        uint64_t v106 = std::string::append(&v141, (const std::string::value_type *)v104, v105);
        long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        uint64_t v108 = std::string::append(&v142, ", faceVertexIndices size: ");
        long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v138, (uint64_t)(a1[8] - a1[7]) >> 2);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v49 = &v138;
        }
        else {
          uint64_t v49 = (std::string *)v138.__r_.__value_.__r.__words[0];
        }
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v50 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v50 = v138.__r_.__value_.__l.__size_;
        }
LABEL_167:
        uint64_t v110 = std::string::append(&v143, (const std::string::value_type *)v49, v50);
        long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        std::string::size_type v145 = v110->__r_.__value_.__r.__words[2];
        long long v144 = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        sub_21707FB4C((os_log_t *)v40, (uint64_t *)&v144);
        if (SHIBYTE(v145) < 0) {
          operator delete((void *)v144);
        }
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v140.__r_.__value_.__l.__data_);
        }
        int v70 = 0;
        uint64_t v1 = 211;
        goto LABEL_221;
      }
      unsigned __int8 v75 = v73;
      uint64_t v76 = v74;
      if ((*v73 & 0x80000000) == 0
        && (int)v6 + (int)v6 * *v74 <= (unint64_t)((uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2))
      {
LABEL_154:
        int v70 = 1;
        goto LABEL_221;
      }
      uint64_t v77 = sub_2170A4138();
      std::operator+<char>();
      uint64_t v78 = std::string::append(&v136, ", min: ");
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v135, *v75);
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v80 = &v135;
      }
      else {
        double v80 = (std::string *)v135.__r_.__value_.__r.__words[0];
      }
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v81 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v81 = v135.__r_.__value_.__l.__size_;
      }
      unint64_t v82 = std::string::append(&v137, (const std::string::value_type *)v80, v81);
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      long long v84 = std::string::append(&v138, ", max: ");
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v134, *v76);
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v86 = &v134;
      }
      else {
        long long v86 = (std::string *)v134.__r_.__value_.__r.__words[0];
      }
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v87 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v87 = v134.__r_.__value_.__l.__size_;
      }
      long long v88 = std::string::append(&v139, (const std::string::value_type *)v86, v87);
      long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      uint64_t v90 = std::string::append(&v140, ", gclCPV: ");
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v141.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v133, v6);
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v92 = &v133;
      }
      else {
        uint64_t v92 = (std::string *)v133.__r_.__value_.__r.__words[0];
      }
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v93 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v93 = v133.__r_.__value_.__l.__size_;
      }
      uint64_t v94 = std::string::append(&v141, (const std::string::value_type *)v92, v93);
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      double v96 = std::string::append(&v142, ", attr.second->data.size(): ");
      long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v132, (uint64_t)(*(void *)(v150 + 32) - *(void *)(v150 + 24)) >> 2);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v98 = &v132;
      }
      else {
        double v98 = (std::string *)v132.__r_.__value_.__r.__words[0];
      }
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v99 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v99 = v132.__r_.__value_.__l.__size_;
      }
      char v100 = std::string::append(&v143, (const std::string::value_type *)v98, v99);
      long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      std::string::size_type v145 = v100->__r_.__value_.__r.__words[2];
      long long v144 = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      sub_21707FB4C((os_log_t *)v77, (uint64_t *)&v144);
      if (SHIBYTE(v145) < 0) {
        operator delete((void *)v144);
      }
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v132.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v141.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v140.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v134.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v139.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v136.__r_.__value_.__l.__data_);
      }
      int v70 = 0;
      uint64_t v1 = 212;
LABEL_221:
      if (SHIBYTE(v147) < 0) {
        operator delete((void *)__dst);
      }
      if (v151) {
        sub_216784EC4(v151);
      }
      if (SHIBYTE(v149) < 0) {
        operator delete((void *)v148);
      }
      if (!v70) {
        return v1;
      }
      int v128 = (long long *)*((void *)v2 + 1);
      if (v128)
      {
        do
        {
          uint64_t v129 = v128;
          int v128 = *(long long **)v128;
        }
        while (v128);
      }
      else
      {
        do
        {
          uint64_t v129 = (long long *)*((void *)v2 + 2);
          BOOL v130 = *(void *)v129 == (void)v2;
          unint64_t v2 = v129;
        }
        while (!v130);
      }
      unint64_t v2 = v129;
    }
    while (v129 != v3);
  }
  return 0;
}

void sub_217080A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 201) < 0) {
    operator delete(*(void **)(v64 - 224));
  }
  if (*(char *)(v64 - 233) < 0) {
    operator delete(*(void **)(v64 - 256));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  sub_2168B7DB4(v64 - 136);
  _Unwind_Resume(a1);
}

void sub_217080E18()
{
}

uint64_t sub_217080E20(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1)
  {
    unint64_t v6 = sub_2170A4138();
    uint64_t v7 = "toUsdMesh: Invalid mesh";
    goto LABEL_9;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)sub_216D16CFC((uint64_t)&v23, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(v4, (uint64_t *)&v20);
  long long v5 = v20;
  BOOL v18 = (void **)&v20;
  sub_216D6CFF8(&v18);
  if ((BYTE8(v24) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
  sub_21697C414(&v24);
  if (*((void *)&v23 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v23 + 1));
  }
  if (*((void *)&v5 + 1) != (void)v5)
  {
    unint64_t v6 = sub_2170A4138();
    uint64_t v7 = "toUsdMesh: Invalid mesh, authored attributes present in output mesh";
LABEL_9:
    sub_216779094(&v23, v7);
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v23);
    if (SBYTE7(v24) < 0) {
      operator delete((void *)v23);
    }
    return 201;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  if (*(unsigned char *)(a1 + 104) == 1)
  {
    uint64_t v8 = sub_21708151C((void *)(a1 + 80), (unint64_t *)&v23, a1 + 104, 3);
    if (!v8)
    {
      uint64_t v22 = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      if ((void)v23)
      {
        unint64_t v11 = 0;
        do
        {
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v23, v9, v10);
          LODWORD(v18) = *(_DWORD *)(v25 + 4 * v11);
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v23, v12, v13);
          HIDWORD(v18) = *(_DWORD *)(v25 + 4 * v11 + 4);
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v23, v14, v15);
          int v19 = *(_DWORD *)(v25 + 4 * v11 + 8);
          sub_217088FDC((uint64_t)&v20, (uint64_t *)&v18);
          v11 += 3;
        }
        while ((unint64_t)v23 > v11);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a2, (uint64_t)&v18);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    }
  }
  else
  {
    uint64_t v16 = sub_2170A4138();
    sub_216779094(&v20, "toUsdMesh: Quantization for points should be UNIFORM");
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&v20);
    if (SBYTE7(v21) < 0) {
      operator delete((void *)v20);
    }
    uint64_t v8 = 112;
  }
  sub_2168F83DC((uint64_t)&v23);
  return v8;
}

void sub_2170813B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a14 = (unint64_t)&a19;
  sub_216FF97AC((void ***)&a14);
  sub_2168F83DC((uint64_t)&a23);
  sub_2168F83DC((uint64_t)&a29);
  sub_2168F83DC(v29 - 176);
  sub_2168F83DC(v29 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_21708151C(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 112;
  }
  v24[1] = v7;
  v24[2] = v6;
  v24[13] = v4;
  v24[14] = v5;
  unint64_t v10 = a1[1] - *a1;
  uint64_t result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    int v23 = 0;
    v24[0] = &v23;
    sub_2168F84A8(a2, (v10 >> 2), v24);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    float v18 = *(float *)(a3 + 4);
    uint64_t v19 = (int)((uint64_t)v10 >> 2);
    uint64_t v20 = 4 * a4;
    do
    {
      uint64_t v21 = 0;
      do
      {
        float v22 = (float)(v18 * (float)*(int *)(*a1 + v16 + v21)) + *(float *)(*(void *)(a3 + 8) + v21);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(float *)(a2[4] + v16 + v21) = v22;
        v21 += 4;
      }
      while (v20 != v21);
      v17 += a4;
      v16 += v20;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

void sub_21708163C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  sub_2168F845C(a1);
  v6[0] = (int **)&v8;
  v6[1] = (int **)&v7;
  sub_217089174(a1, (a3 - a2) >> 2, v6);
}

BOOL sub_21708169C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_216855AD4();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

BOOL sub_217081730(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 216);
  unint64_t v2 = (void *)(a1 + 224);
  if (v1 == (void *)(a1 + 224)) {
    return 0;
  }
  do
  {
    unsigned int v3 = *(unsigned __int8 *)(v1[7] + 136) - 5;
    BOOL result = v3 < 0xFFFFFFFE;
    if (v3 < 0xFFFFFFFE) {
      break;
    }
    long long v5 = (void *)v1[1];
    if (v5)
    {
      do
      {
        unint64_t v6 = v5;
        long long v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        unint64_t v6 = (void *)v1[2];
        BOOL v7 = *v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_21708179C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 216);
  if (v1 == (void *)(a1 + 224)) {
    return 1;
  }
  while (*(unsigned __int8 *)(v1[7] + 136) - 3 < 3)
  {
    unint64_t v2 = (void *)v1[1];
    if (v2)
    {
      do
      {
        unsigned int v3 = v2;
        unint64_t v2 = (void *)*v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        unsigned int v3 = (void *)v1[2];
        BOOL v4 = *v3 == (void)v1;
        uint64_t v1 = v3;
      }
      while (!v4);
    }
    uint64_t v1 = v3;
    if (v3 == (void *)(a1 + 224)) {
      return 1;
    }
  }
  unint64_t v6 = sub_2170A4138();
  std::operator+<char>();
  BOOL v7 = std::string::append(&v19, ": interpolation ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_2170819D0(*(unsigned char *)(v1[7] + 136), (atomic_uint **)&v18);
  if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  int v11 = *((char *)EmptyString + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const std::string::value_type *)EmptyString;
  }
  else {
    uint64_t v12 = (const std::string::value_type *)*EmptyString;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    std::string::size_type v13 = EmptyString[1];
  }
  uint64_t v14 = std::string::append(&v20, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v21, " not supported");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v23 = v16->__r_.__value_.__r.__words[2];
  long long v22 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v22);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_217081964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170819D0(unsigned __int8 a1@<W0>, atomic_uint **a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned __int8 v18 = a1;
  LOBYTE(v19[0]) = 0;
  v19[1] = 0;
  unsigned int v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unsigned int v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v20 = 1;
  uint64_t v4 = *((void *)v3 + 17);
  uint64_t v21 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5) {
    long long v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v22 = 2;
  uint64_t v6 = *((void *)v5 + 145);
  uint64_t v23 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    BOOL v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v24 = 3;
  uint64_t v8 = *((void *)v7 + 151);
  uint64_t v25 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v26 = 4;
  uint64_t v10 = *((void *)v9 + 153);
  uint64_t v27 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11) {
    int v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v28 = 5;
  uint64_t v12 = *((void *)v11 + 40);
  uint64_t v29 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2170875D4((uint64_t)v17, (unsigned __int8 *)v19, 6);
  for (uint64_t i = 11; i != -1; i -= 2)
  {
    unint64_t v14 = (unint64_t)v19[i];
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  v19[0] = &v18;
  unint64_t v15 = (unint64_t)sub_2170878F8(v17, &v18, (uint64_t)&unk_2174BFD90, v19)[5];
  *a2 = (atomic_uint *)v15;
  if ((v15 & 7) != 0)
  {
    uint64_t v16 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v16;
    }
  }
  sub_2168D87B4((uint64_t)v17, v17[1]);
}

void sub_217081C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  while (1)
  {
    uint64_t v15 = *((void *)v14 - 1);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v14 -= 16;
    if (v14 == &a14) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_217081CFC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!sub_217081730(a1)) {
    return 0;
  }
  unint64_t v2 = (uint64_t)(*(void *)(v1 + 88) - *(void *)(v1 + 80)) >> 2;
  if (0xAAAAAAAAAAAAAAABLL * v2 >= 0x5555555555555556)
  {
    unsigned int v3 = sub_2170A4138();
    sub_216779094(__p, "unifyIndices: Size of points should be a multiple of 3");
    sub_21707FB4C((os_log_t *)v3, (uint64_t *)__p);
    if (SBYTE7(v211) < 0) {
      operator delete(__p[0]);
    }
    return 110;
  }
  *(void *)__val = *(void *)(v1 + 232);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  long long v225 = 0uLL;
  int v226 = 0;
  sub_21681FE20((void **)&v225, v2);
  sub_2167816FC(&v223, (uint64_t)(*(void *)(v1 + 64) - *(void *)(v1 + 56)) >> 2);
  __p[0] = 0;
  sub_217089368(v222, __val[0], __p);
  uint64_t v8 = *(void **)(v1 + 216);
  if (v8 == (void *)(v1 + 224))
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      *((void *)v222[0] + v9) = v8[7];
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (void *)v8[2];
          BOOL v65 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v65);
      }
      ++v9;
      uint64_t v8 = v11;
    }
    while (v11 != (void *)(v1 + 224));
  }
  if (v9 == __val[0])
  {
    sub_2170893EC(&v221, __val[0]);
    unint64_t v12 = (unint64_t)(v6 - v7) >> 2;
    memset(&v220, 0, sizeof(v220));
    memset(&v219, 0, sizeof(v219));
    uint64_t v13 = v12;
    *(unsigned char *)(v1 + 1) = 0;
    uint64_t v198 = v1;
    uint64_t v203 = v12;
    if (__val[0] >= 1)
    {
      uint64_t v14 = 0;
      int v201 = v12;
      while (1)
      {
        uint64_t v15 = (std::string *)*((void *)v222[0] + v14);
        std::string::size_type v16 = v221.__r_.__value_.__r.__words[0];
        long long v17 = operator new(0x98uLL);
        v17[10] = 0;
        v17[11] = 0;
        unsigned __int8 v18 = (std::string **)(v16 + 16 * v14);
        v17[12] = 0;
        v17[15] = 0;
        v17[16] = 0;
        v17[14] = 0;
        *(_OWORD *)long long v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        *((_OWORD *)v17 + 2) = 0u;
        *((_OWORD *)v17 + 3) = 0u;
        unsigned char v17[8] = 0;
        sub_217083128(v18, (uint64_t)v17);
        std::string::operator=(*v18, v15);
        std::string v19 = *v18;
        v19[3].__r_.__value_.__r.__words[0] = v15[3].__r_.__value_.__r.__words[0];
        if (v19 != v15) {
          sub_216825D78(&v19[3].__r_.__value_.__s.__data_[8], (char *)v15[3].__r_.__value_.__l.__size_, v15[3].__r_.__value_.__r.__words[2], (uint64_t)(v15[3].__r_.__value_.__r.__words[2] - v15[3].__r_.__value_.__l.__size_) >> 2);
        }
        LODWORD(v19[4].__r_.__value_.__r.__words[1]) = v15[4].__r_.__value_.__r.__words[1];
        std::string::operator=((std::string *)((char *)*v18 + 112), (std::string *)((char *)v15 + 112));
        char v20 = *v18;
        v20[5].__r_.__value_.__s.__data_[16] = v15[5].__r_.__value_.__s.__data_[16];
        *(std::string::size_type *)((char *)&v20[5].__r_.__value_.__r.__words[2] + 4) = *(std::string::size_type *)((char *)&v15[5].__r_.__value_.__r.__words[2] + 4);
        v20[6].__r_.__value_.__s.__data_[4] = v15[6].__r_.__value_.__s.__data_[4];
        int v21 = v15[5].__r_.__value_.__s.__data_[16];
        if (v21 == 5)
        {
          std::string::pointer data = v15[2].__r_.__value_.__l.__data_;
          size_t v23 = v15[2].__r_.__value_.__l.__size_ - (void)data;
          char v24 = *(const void **)(v1 + 56);
          if (v23 != *(void *)(v1 + 64) - (void)v24 || memcmp(data, v24, v23))
          {
LABEL_32:
            std::string::pointer v26 = v15[2].__r_.__value_.__l.__data_;
            std::string::size_type size = v15[2].__r_.__value_.__l.__size_;
            uint64_t v27 = (std::string::__raw *)&v15[2];
            if (v26 == (std::string::pointer)size)
            {
              unint64_t v28 = (uint64_t)(*(void *)(v1 + 64) - *(void *)(v1 + 56)) >> 2;
              unint64_t v206 = SHIDWORD(v15[5].__r_.__value_.__r.__words[2]);
              if (v28 * v206 != (uint64_t)(v15[1].__r_.__value_.__l.__size_ - v15[1].__r_.__value_.__r.__words[0]) >> 2)
              {
                size_t v182 = sub_2170A4138();
                std::operator+<char>();
                uint64_t v183 = std::string::append(&v215, " has incorrect size ");
                long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
                v216.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v184;
                v183->__r_.__value_.__l.__size_ = 0;
                v183->__r_.__value_.__r.__words[2] = 0;
                v183->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v214, (uint64_t)(v15[1].__r_.__value_.__l.__size_ - v15[1].__r_.__value_.__r.__words[0]) >> 2);
                if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v185 = &v214;
                }
                else {
                  v185 = (std::string *)v214.__r_.__value_.__r.__words[0];
                }
                if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v186 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v186 = v214.__r_.__value_.__l.__size_;
                }
                v187 = std::string::append(&v216, (const std::string::value_type *)v185, v186);
                long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
                v217.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v188;
                v187->__r_.__value_.__l.__size_ = 0;
                v187->__r_.__value_.__r.__words[2] = 0;
                v187->__r_.__value_.__r.__words[0] = 0;
                long long v189 = std::string::append(&v217, " vs ");
                long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
                v218.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v190;
                v189->__r_.__value_.__l.__size_ = 0;
                v189->__r_.__value_.__r.__words[2] = 0;
                v189->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v213, ((uint64_t)(*(void *)(v1 + 64) - *(void *)(v1 + 56)) >> 2) * v206);
                if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v191 = &v213;
                }
                else {
                  uint64_t v191 = (std::string *)v213.__r_.__value_.__r.__words[0];
                }
                if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v192 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v192 = v213.__r_.__value_.__l.__size_;
                }
                uint64_t v193 = std::string::append(&v218, (const std::string::value_type *)v191, v192);
                long long v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
                *(void *)&long long v211 = *((void *)&v193->__r_.__value_.__l + 2);
                *(_OWORD *)std::string __p = v194;
                v193->__r_.__value_.__l.__size_ = 0;
                v193->__r_.__value_.__r.__words[2] = 0;
                v193->__r_.__value_.__r.__words[0] = 0;
                long long v178 = (os_log_t *)v182;
LABEL_257:
                sub_21707FB4C(v178, (uint64_t *)__p);
                if (SBYTE7(v211) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v213.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v218.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v217.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v214.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v216.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
                {
                  uint64_t v195 = (void *)v215.__r_.__value_.__r.__words[0];
                  goto LABEL_271;
                }
                goto LABEL_273;
              }
              sub_21681C000((uint64_t)&v15[2], v28);
              *(_OWORD *)std::string __p = 0u;
              long long v211 = 0u;
              int v212 = 1065353216;
              memset(&v218, 0, sizeof(v218));
              sub_2167816FC(&v217, v206);
              uint64_t v204 = v14;
              sub_21681FE20((void **)&v218.__r_.__value_.__l.__data_, (uint64_t)(v15[1].__r_.__value_.__l.__size_ - v15[1].__r_.__value_.__r.__words[0]) >> 2);
              if ((int)v12 >= 1)
              {
                uint64_t v29 = 0;
                int v30 = 0;
                int v31 = 0;
                do
                {
                  if ((int)v206 >= 1)
                  {
                    uint64_t v32 = (_DWORD *)v217.__r_.__value_.__r.__words[0];
                    std::string::size_type v33 = (int *)(v15[1].__r_.__value_.__r.__words[0] + 4 * v31);
                    v31 += v206;
                    uint64_t v34 = v206;
                    do
                    {
                      int v35 = *v33++;
                      *v32++ = v35;
                      --v34;
                    }
                    while (v34);
                  }
                  long long v36 = sub_217083170(__p, (int **)&v217);
                  if (v36)
                  {
                    *(_DWORD *)(v27->__words[0] + 4 * v29) = *((_DWORD *)v36 + 10);
                  }
                  else
                  {
                    int v37 = v30 + 1;
                    *(_DWORD *)sub_2170832B0((uint64_t)__p, (int **)&v217) = v30;
                    *(_DWORD *)(v27->__words[0] + 4 * v29) = v30;
                    if ((int)v206 < 1)
                    {
                      ++v30;
                    }
                    else
                    {
                      uint64_t v38 = 0;
                      std::string::size_type v39 = (_DWORD *)v218.__r_.__value_.__l.__size_;
                      do
                      {
                        std::string::size_type v40 = v217.__r_.__value_.__r.__words[0];
                        if ((unint64_t)v39 >= v218.__r_.__value_.__r.__words[2])
                        {
                          long long v42 = (_DWORD *)v218.__r_.__value_.__r.__words[0];
                          uint64_t v43 = (uint64_t)((uint64_t)v39 - v218.__r_.__value_.__r.__words[0]) >> 2;
                          unint64_t v44 = v43 + 1;
                          if ((unint64_t)(v43 + 1) >> 62) {
                            sub_21677CB10();
                          }
                          int64_t v45 = v218.__r_.__value_.__r.__words[2] - v218.__r_.__value_.__r.__words[0];
                          if ((uint64_t)(v218.__r_.__value_.__r.__words[2] - v218.__r_.__value_.__r.__words[0]) >> 1 > v44) {
                            unint64_t v44 = v45 >> 1;
                          }
                          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v46 = v44;
                          }
                          if (v46)
                          {
                            uint64_t v47 = (char *)sub_21677EA28((uint64_t)&v218.__r_.__value_.__r.__words[2], v46);
                            std::string::size_type v39 = (_DWORD *)v218.__r_.__value_.__l.__size_;
                            long long v42 = (_DWORD *)v218.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            uint64_t v47 = 0;
                          }
                          long long v48 = &v47[4 * v43];
                          *(_DWORD *)long long v48 = *(_DWORD *)(v40 + 4 * v38);
                          std::string::size_type v41 = (std::string::size_type)(v48 + 4);
                          while (v39 != v42)
                          {
                            int v49 = *--v39;
                            *((_DWORD *)v48 - 1) = v49;
                            v48 -= 4;
                          }
                          v218.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
                          v218.__r_.__value_.__l.__size_ = v41;
                          v218.__r_.__value_.__r.__words[2] = (std::string::size_type)&v47[4 * v46];
                          if (v42) {
                            operator delete(v42);
                          }
                        }
                        else
                        {
                          *std::string::size_type v39 = *(_DWORD *)(v217.__r_.__value_.__r.__words[0] + 4 * v38);
                          std::string::size_type v41 = (std::string::size_type)(v39 + 1);
                        }
                        v218.__r_.__value_.__l.__size_ = v41;
                        ++v38;
                        std::string::size_type v39 = (_DWORD *)v41;
                      }
                      while (v38 != v206);
                      int v30 = v37;
                      uint64_t v13 = v203;
                    }
                  }
                  ++v29;
                }
                while (v29 != v13);
              }
              long long v50 = *(_OWORD *)&v15[1].__r_.__value_.__l.__data_;
              long long v51 = *(_OWORD *)&v218.__r_.__value_.__l.__data_;
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v50;
              *(_OWORD *)&v15[1].__r_.__value_.__l.__data_ = v51;
              std::string::size_type v52 = v218.__r_.__value_.__r.__words[2];
              v218.__r_.__value_.__r.__words[2] = v15[1].__r_.__value_.__r.__words[2];
              v15[1].__r_.__value_.__r.__words[2] = v52;
              if (v217.__r_.__value_.__r.__words[0])
              {
                v217.__r_.__value_.__l.__size_ = v217.__r_.__value_.__r.__words[0];
                operator delete(v217.__r_.__value_.__l.__data_);
                long long v53 = (void *)v218.__r_.__value_.__r.__words[0];
              }
              else
              {
                long long v53 = (void *)v50;
              }
              uint64_t v1 = v198;
              uint64_t v14 = v204;
              LODWORD(v12) = v201;
              if (v53)
              {
                v218.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
                operator delete(v53);
              }
              sub_21686891C((uint64_t)__p);
              std::string::pointer v26 = v15[2].__r_.__value_.__l.__data_;
              std::string::size_type size = v15[2].__r_.__value_.__l.__size_;
            }
            if (((size - (unint64_t)v26) >> 2) != v12)
            {
              long long v165 = sub_2170A4138();
              std::operator+<char>();
              uint64_t v166 = std::string::append(&v215, " has incorrect indices size ");
              long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
              v216.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v167;
              v166->__r_.__value_.__l.__size_ = 0;
              v166->__r_.__value_.__r.__words[2] = 0;
              v166->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v214, (uint64_t)(v15[2].__r_.__value_.__l.__size_ - v15[2].__r_.__value_.__r.__words[0]) >> 2);
              if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v168 = &v214;
              }
              else {
                uint64_t v168 = (std::string *)v214.__r_.__value_.__r.__words[0];
              }
              if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v169 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v169 = v214.__r_.__value_.__l.__size_;
              }
              uint64_t v170 = std::string::append(&v216, (const std::string::value_type *)v168, v169);
              long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
              v217.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v171;
              v170->__r_.__value_.__l.__size_ = 0;
              v170->__r_.__value_.__r.__words[2] = 0;
              v170->__r_.__value_.__r.__words[0] = 0;
              uint64_t v172 = std::string::append(&v217, " vs index count");
              long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
              v218.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v173;
              v172->__r_.__value_.__l.__size_ = 0;
              v172->__r_.__value_.__r.__words[2] = 0;
              v172->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v213, v12);
              if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v174 = &v213;
              }
              else {
                uint64_t v174 = (std::string *)v213.__r_.__value_.__r.__words[0];
              }
              if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v175 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v175 = v213.__r_.__value_.__l.__size_;
              }
              uint64_t v176 = std::string::append(&v218, (const std::string::value_type *)v174, v175);
              long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
              *(void *)&long long v211 = *((void *)&v176->__r_.__value_.__l + 2);
              *(_OWORD *)std::string __p = v177;
              v176->__r_.__value_.__l.__size_ = 0;
              v176->__r_.__value_.__r.__words[2] = 0;
              v176->__r_.__value_.__r.__words[0] = 0;
              long long v178 = (os_log_t *)v165;
              goto LABEL_257;
            }
            (*v18)[5].__r_.__value_.__s.__data_[16] = 4;
            int v64 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
            if (v64 < 0)
            {
              if (v15->__r_.__value_.__l.__size_ != 7)
              {
LABEL_100:
                std::string::size_type v66 = v220.__r_.__value_.__l.__size_;
                if (v220.__r_.__value_.__l.__size_ >= v220.__r_.__value_.__r.__words[2])
                {
                  std::string v68 = (void *)v220.__r_.__value_.__r.__words[0];
                  uint64_t v69 = (uint64_t)(v220.__r_.__value_.__l.__size_ - v220.__r_.__value_.__r.__words[0]) >> 2;
                  unint64_t v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62) {
LABEL_290:
                  }
                    sub_21677CB10();
                  int64_t v71 = v220.__r_.__value_.__r.__words[2] - v220.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v220.__r_.__value_.__r.__words[2] - v220.__r_.__value_.__r.__words[0]) >> 1 > v70) {
                    unint64_t v70 = v71 >> 1;
                  }
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v72 = v70;
                  }
                  if (v72)
                  {
                    std::string::size_type v73 = (char *)sub_21677EA28((uint64_t)&v220.__r_.__value_.__r.__words[2], v72);
                    std::string::size_type v66 = v220.__r_.__value_.__l.__size_;
                    std::string v68 = (void *)v220.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    std::string::size_type v73 = 0;
                  }
                  long long v74 = &v73[4 * v69];
                  *(_DWORD *)long long v74 = v14;
                  std::string::size_type v67 = (std::string::size_type)(v74 + 4);
                  while ((void *)v66 != v68)
                  {
                    int v75 = *(_DWORD *)(v66 - 4);
                    v66 -= 4;
                    *((_DWORD *)v74 - 1) = v75;
                    v74 -= 4;
                  }
                  v220.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
                  v220.__r_.__value_.__l.__size_ = v67;
                  v220.__r_.__value_.__r.__words[2] = (std::string::size_type)&v73[4 * v72];
                  if (v68) {
                    operator delete(v68);
                  }
                }
                else
                {
                  *(_DWORD *)v220.__r_.__value_.__l.__size_ = v14;
                  std::string::size_type v67 = v66 + 4;
                }
                v220.__r_.__value_.__l.__size_ = v67;
                goto LABEL_117;
              }
              uint64_t v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
            }
            else if (v64 != 7)
            {
              goto LABEL_100;
            }
            BOOL v65 = LODWORD(v15->__r_.__value_.__l.__data_) == 1836216174
               && *(_DWORD *)((char *)v15->__r_.__value_.__r.__words + 3) == 1936482669;
            if (v65)
            {
              MEMORY[0x21D4477E0]();
              (*v18)[6].__r_.__value_.__s.__data_[4] = 1;
              *(unsigned char *)(v1 + 1) = 1;
            }
            goto LABEL_100;
          }
          v15[5].__r_.__value_.__s.__data_[16] = 4;
          sub_21681C000((uint64_t)&v15[2], 0);
          int v21 = v15[5].__r_.__value_.__s.__data_[16];
        }
        if ((v21 - 3) > 1)
        {
          if (v21 == 5) {
            goto LABEL_32;
          }
          if (v15[2].__r_.__value_.__r.__words[0] != v15[2].__r_.__value_.__l.__size_)
          {
            uint64_t v196 = sub_2170A4138();
            std::operator+<char>();
            sub_21707FB4C((os_log_t *)v196, (uint64_t *)__p);
            if ((SBYTE7(v211) & 0x80000000) == 0) {
              goto LABEL_273;
            }
            uint64_t v195 = __p[0];
LABEL_271:
            operator delete(v195);
LABEL_273:
            uint64_t v4 = 202;
            goto LABEL_274;
          }
        }
        else
        {
          if (v15[2].__r_.__value_.__l.__size_ != v15[2].__r_.__value_.__r.__words[0])
          {
            uint64_t v179 = sub_2170A4138();
            std::operator+<char>();
            int v180 = std::string::append(&v218, " cannot both be Vertex/Varying Interpolation and have indices.");
            long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
            *(void *)&long long v211 = *((void *)&v180->__r_.__value_.__l + 2);
            *(_OWORD *)std::string __p = v181;
            v180->__r_.__value_.__l.__size_ = 0;
            v180->__r_.__value_.__r.__words[2] = 0;
            v180->__r_.__value_.__r.__words[0] = 0;
            sub_21707FB4C((os_log_t *)v179, (uint64_t *)__p);
            if (SBYTE7(v211) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v218.__r_.__value_.__l.__data_);
            }
            uint64_t v4 = 110;
            goto LABEL_274;
          }
          if (v21 == 3) {
            goto LABEL_67;
          }
        }
        LOBYTE(v21) = 4;
LABEL_67:
        (*v18)[5].__r_.__value_.__s.__data_[16] = v21;
        std::string::size_type v54 = v219.__r_.__value_.__l.__size_;
        if (v219.__r_.__value_.__l.__size_ >= v219.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v56 = (void *)v219.__r_.__value_.__r.__words[0];
          uint64_t v57 = (uint64_t)(v219.__r_.__value_.__l.__size_ - v219.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62) {
            goto LABEL_290;
          }
          int64_t v59 = v219.__r_.__value_.__r.__words[2] - v219.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v219.__r_.__value_.__r.__words[2] - v219.__r_.__value_.__r.__words[0]) >> 1 > v58) {
            unint64_t v58 = v59 >> 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60)
          {
            std::string::size_type v61 = (char *)sub_21677EA28((uint64_t)&v219.__r_.__value_.__r.__words[2], v60);
            std::string::size_type v54 = v219.__r_.__value_.__l.__size_;
            std::string::size_type v56 = (void *)v219.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::size_type v61 = 0;
          }
          uint64_t v62 = &v61[4 * v57];
          *(_DWORD *)uint64_t v62 = v14;
          std::string::size_type v55 = (std::string::size_type)(v62 + 4);
          while ((void *)v54 != v56)
          {
            int v63 = *(_DWORD *)(v54 - 4);
            v54 -= 4;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
          v219.__r_.__value_.__l.__size_ = v55;
          v219.__r_.__value_.__r.__words[2] = (std::string::size_type)&v61[4 * v60];
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          *(_DWORD *)v219.__r_.__value_.__l.__size_ = v14;
          std::string::size_type v55 = v54 + 4;
        }
        v219.__r_.__value_.__l.__size_ = v55;
LABEL_117:
        if (++v14 == __val[0])
        {
          std::string::size_type v76 = v220.__r_.__value_.__l.__size_;
          std::string::size_type v77 = v220.__r_.__value_.__r.__words[0];
          goto LABEL_137;
        }
      }
    }
    std::string::size_type v77 = 0;
    std::string::size_type v76 = 0;
LABEL_137:
    *(_OWORD *)std::string __p = 0u;
    long long v211 = 0u;
    int v212 = 1065353216;
    std::string::size_type v87 = v76 - v77;
    sub_2167816FC(&v218, (uint64_t)(((v76 - v77) << 30) + 0x100000000) >> 32);
    if ((int)v12 >= 1)
    {
      uint64_t v88 = 0;
      int v89 = 0;
      std::string::size_type v90 = v87 >> 2;
      uint64_t v199 = (v87 >> 2);
      std::string::size_type v197 = v87 >> 2;
      do
      {
        std::string::size_type v91 = v218.__r_.__value_.__r.__words[0];
        uint64_t v207 = *(int *)(*(void *)(v1 + 56) + 4 * v88);
        *(_DWORD *)v218.__r_.__value_.__l.__data_ = v207;
        if ((int)v90 >= 1)
        {
          uint64_t v92 = (int *)v220.__r_.__value_.__r.__words[0];
          std::string::size_type v93 = v222[0];
          uint64_t v94 = (_DWORD *)(v91 + 4);
          uint64_t v95 = v199;
          do
          {
            uint64_t v96 = *v92++;
            *v94++ = *(_DWORD *)(*(void *)(v93[v96] + 48) + 4 * v88);
            --v95;
          }
          while (v95);
        }
        long long v97 = sub_217083170(__p, (int **)&v218);
        if (v97)
        {
          *(_DWORD *)(v223 + 4 * v88) = *((_DWORD *)v97 + 10);
        }
        else
        {
          uint64_t v98 = 0;
          *(_DWORD *)sub_2170832B0((uint64_t)__p, (int **)&v218) = v89;
          *(_DWORD *)(v223 + 4 * v88) = v89;
          std::string::size_type v99 = (char *)*((void *)&v225 + 1);
          do
          {
            uint64_t v100 = v98 + 3 * v207;
            uint64_t v101 = *(void *)(v1 + 80);
            if (v99 >= v226)
            {
              long long v103 = (char *)v225;
              uint64_t v104 = (uint64_t)&v99[-v225] >> 2;
              unint64_t v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62) {
                sub_21677CB10();
              }
              uint64_t v106 = (uint64_t)&v226[-v225];
              if ((uint64_t)&v226[-v225] >> 1 > v105) {
                unint64_t v105 = v106 >> 1;
              }
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v107 = v105;
              }
              if (v107)
              {
                uint64_t v108 = (char *)sub_21677EA28((uint64_t)&v226, v107);
                std::string::size_type v99 = (char *)*((void *)&v225 + 1);
                long long v103 = (char *)v225;
              }
              else
              {
                uint64_t v108 = 0;
              }
              long long v109 = &v108[4 * v104];
              *(_DWORD *)long long v109 = *(_DWORD *)(v101 + 4 * v100);
              char v102 = v109 + 4;
              while (v99 != v103)
              {
                int v110 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(void *)&long long v225 = v109;
              *((void *)&v225 + 1) = v102;
              int v226 = &v108[4 * v107];
              if (v103) {
                operator delete(v103);
              }
            }
            else
            {
              *(_DWORD *)std::string::size_type v99 = *(_DWORD *)(v101 + 4 * v100);
              char v102 = v99 + 4;
            }
            *((void *)&v225 + 1) = v102;
            ++v98;
            std::string::size_type v99 = v102;
          }
          while (v98 != 3);
          int v202 = v89 + 1;
          uint64_t v205 = v88;
          std::string::size_type v111 = v219.__r_.__value_.__l.__size_;
          std::string::size_type v208 = v219.__r_.__value_.__l.__size_;
          for (uint64_t i = (int *)v219.__r_.__value_.__r.__words[0]; i != (int *)v111; ++i)
          {
            uint64_t v113 = *i;
            uint64_t v114 = *((void *)v222[0] + v113);
            uint64_t v115 = *(unsigned int *)(v114 + 140);
            if ((int)v115 >= 1)
            {
              uint64_t v116 = 0;
              std::string::size_type v117 = v221.__r_.__value_.__r.__words[0] + 16 * v113;
              do
              {
                uint64_t v118 = *(void **)v117;
                uint64_t v119 = v116 + (int)v115 * (int)v207;
                uint64_t v120 = *(void *)(v114 + 24);
                std::string::size_type v121 = *(char **)(*(void *)v117 + 32);
                unint64_t v122 = *(void *)(*(void *)v117 + 40);
                if ((unint64_t)v121 >= v122)
                {
                  v124 = (char *)v118[3];
                  uint64_t v125 = (v121 - v124) >> 2;
                  if ((unint64_t)(v125 + 1) >> 62) {
                    sub_21677CB10();
                  }
                  unint64_t v126 = v122 - (void)v124;
                  unint64_t v127 = (uint64_t)(v122 - (void)v124) >> 1;
                  if (v127 <= v125 + 1) {
                    unint64_t v127 = v125 + 1;
                  }
                  if (v126 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v128 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v128 = v127;
                  }
                  if (v128)
                  {
                    uint64_t v129 = (char *)sub_21677EA28(*(void *)v117 + 40, v128);
                    v124 = (char *)v118[3];
                    std::string::size_type v121 = (char *)v118[4];
                  }
                  else
                  {
                    uint64_t v129 = 0;
                  }
                  BOOL v130 = &v129[4 * v125];
                  *(_DWORD *)BOOL v130 = *(_DWORD *)(v120 + 4 * v119);
                  long long v123 = v130 + 4;
                  while (v121 != v124)
                  {
                    int v131 = *((_DWORD *)v121 - 1);
                    v121 -= 4;
                    *((_DWORD *)v130 - 1) = v131;
                    v130 -= 4;
                  }
                  v118[3] = v130;
                  v118[4] = v123;
                  v118[5] = &v129[4 * v128];
                  if (v124) {
                    operator delete(v124);
                  }
                }
                else
                {
                  *(_DWORD *)std::string::size_type v121 = *(_DWORD *)(v120 + 4 * v119);
                  long long v123 = v121 + 4;
                }
                v118[4] = v123;
                ++v116;
              }
              while (v116 != v115);
            }
            std::string::size_type v111 = v208;
          }
          std::string::size_type v132 = v220.__r_.__value_.__l.__size_;
          std::string::size_type v209 = v220.__r_.__value_.__l.__size_;
          for (uint64_t j = (int *)v220.__r_.__value_.__r.__words[0]; j != (int *)v132; ++j)
          {
            uint64_t v134 = *j;
            uint64_t v135 = *((void *)v222[0] + v134);
            uint64_t v136 = *(unsigned int *)(v135 + 140);
            if ((int)v136 >= 1)
            {
              uint64_t v137 = 0;
              std::string::size_type v138 = v221.__r_.__value_.__r.__words[0] + 16 * v134;
              uint64_t v139 = *(int *)(*(void *)(v135 + 48) + 4 * v205) * (uint64_t)(int)v136;
              do
              {
                std::string v140 = *(void **)v138;
                uint64_t v141 = v137 + v139;
                uint64_t v142 = *(void *)(v135 + 24);
                std::string v143 = *(char **)(*(void *)v138 + 32);
                unint64_t v144 = *(void *)(*(void *)v138 + 40);
                if ((unint64_t)v143 >= v144)
                {
                  unint64_t v146 = (char *)v140[3];
                  uint64_t v147 = (v143 - v146) >> 2;
                  if ((unint64_t)(v147 + 1) >> 62) {
                    sub_21677CB10();
                  }
                  unint64_t v148 = v144 - (void)v146;
                  unint64_t v149 = (uint64_t)(v144 - (void)v146) >> 1;
                  if (v149 <= v147 + 1) {
                    unint64_t v149 = v147 + 1;
                  }
                  if (v148 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v150 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v150 = v149;
                  }
                  if (v150)
                  {
                    unint64_t v151 = (char *)sub_21677EA28(*(void *)v138 + 40, v150);
                    unint64_t v146 = (char *)v140[3];
                    std::string v143 = (char *)v140[4];
                  }
                  else
                  {
                    unint64_t v151 = 0;
                  }
                  unint64_t v152 = &v151[4 * v147];
                  *(_DWORD *)unint64_t v152 = *(_DWORD *)(v142 + 4 * v141);
                  std::string::size_type v145 = v152 + 4;
                  while (v143 != v146)
                  {
                    int v153 = *((_DWORD *)v143 - 1);
                    v143 -= 4;
                    *((_DWORD *)v152 - 1) = v153;
                    v152 -= 4;
                  }
                  v140[3] = v152;
                  v140[4] = v145;
                  v140[5] = &v151[4 * v150];
                  if (v146) {
                    operator delete(v146);
                  }
                }
                else
                {
                  *(_DWORD *)std::string v143 = *(_DWORD *)(v142 + 4 * v141);
                  std::string::size_type v145 = v143 + 4;
                }
                v140[4] = v145;
                ++v137;
              }
              while (v137 != v136);
            }
            std::string::size_type v132 = v209;
          }
          int v89 = v202;
          LODWORD(v90) = v197;
          uint64_t v1 = v198;
          uint64_t v13 = v203;
          uint64_t v88 = v205;
        }
        ++v88;
      }
      while (v88 != v13);
    }
    long long v154 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v1 + 80) = v225;
    long long v225 = v154;
    uint64_t v155 = *(char **)(v1 + 96);
    *(void *)(v1 + 96) = v226;
    int v226 = v155;
    long long v156 = *(_OWORD *)(v1 + 56);
    *(_OWORD *)(v1 + 56) = v223;
    long long v223 = v156;
    uint64_t v157 = *(void *)(v1 + 72);
    *(void *)(v1 + 72) = v224;
    uint64_t v224 = v157;
    if (__val[0] >= 1)
    {
      uint64_t v158 = 0;
      do
      {
        std::string::size_type v159 = v221.__r_.__value_.__r.__words[0];
        v217.__r_.__value_.__r.__words[0] = *(void *)(v221.__r_.__value_.__r.__words[0] + v158);
        uint64_t v160 = sub_217087FC8((uint64_t **)(v1 + 216), (const void **)v217.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v217);
        long long v161 = *(_OWORD *)(v159 + v158);
        uint64_t v162 = *(void *)(v159 + v158 + 8);
        if (v162) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v162 + 8), 1uLL, memory_order_relaxed);
        }
        int v163 = (std::__shared_weak_count *)v160[8];
        *(_OWORD *)(v160 + 7) = v161;
        if (v163) {
          sub_216784EC4(v163);
        }
        v158 += 16;
      }
      while (16 * __val[0] != v158);
    }
    if (*(unsigned char *)(v1 + 1))
    {
      sub_216779094(&v217, "normals");
      sub_216B72330((uint64_t **)(v1 + 216), (const void **)&v217.__r_.__value_.__l.__data_);
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
    }
    if (*(void *)(v1 + 80) == *(void *)(v1 + 88))
    {
      uint64_t v164 = sub_2170A4138();
      sub_216779094(&v217, "unifyIndices: points should not be empty");
      sub_21707FB4C((os_log_t *)v164, (uint64_t *)&v217);
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
      uint64_t v4 = 202;
    }
    else
    {
      uint64_t v4 = 0;
    }
    if (v218.__r_.__value_.__r.__words[0])
    {
      v218.__r_.__value_.__l.__size_ = v218.__r_.__value_.__r.__words[0];
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    sub_21686891C((uint64_t)__p);
LABEL_274:
    if (v219.__r_.__value_.__r.__words[0])
    {
      v219.__r_.__value_.__l.__size_ = v219.__r_.__value_.__r.__words[0];
      operator delete(v219.__r_.__value_.__l.__data_);
    }
    if (v220.__r_.__value_.__r.__words[0])
    {
      v220.__r_.__value_.__l.__size_ = v220.__r_.__value_.__r.__words[0];
      operator delete(v220.__r_.__value_.__l.__data_);
    }
    __p[0] = &v221;
    sub_216787968((void ***)__p);
  }
  else
  {
    uint64_t v78 = sub_2170A4138();
    std::to_string(&v219, v9);
    long long v79 = std::string::insert(&v219, 0, "unifyIndices: Invalid attribute counter/count ");
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v81 = std::string::append(&v220, " and ");
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v221.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v218, __val[0]);
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v83 = &v218;
    }
    else {
      long long v83 = (std::string *)v218.__r_.__value_.__r.__words[0];
    }
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v84 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v84 = v218.__r_.__value_.__l.__size_;
    }
    long long v85 = std::string::append(&v221, (const std::string::value_type *)v83, v84);
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(void *)&long long v211 = *((void *)&v85->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v78, (uint64_t *)__p);
    if (SBYTE7(v211) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v220.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v219.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = 202;
  }
  if (v222[0])
  {
    v222[1] = v222[0];
    operator delete(v222[0]);
  }
  if ((void)v223)
  {
    *((void *)&v223 + 1) = v223;
    operator delete((void *)v223);
  }
  if ((void)v225)
  {
    *((void *)&v225 + 1) = v225;
    operator delete((void *)v225);
  }
  return v4;
}

void sub_217082ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  BOOL v65 = *(void **)(v63 - 248);
  if (v65)
  {
    *(void *)(v63 - 240) = v65;
    operator delete(v65);
  }
  std::string::size_type v66 = *(void **)(v63 - 224);
  if (v66)
  {
    *(void *)(v63 - 216) = v66;
    operator delete(v66);
  }
  a21 = v63 - 192;
  sub_216787968((void ***)&a21);
  std::string::size_type v67 = *(void **)(v63 - 168);
  if (v67)
  {
    *(void *)(v63 - 160) = v67;
    operator delete(v67);
  }
  std::string v68 = *(void **)(v63 - 144);
  if (v68)
  {
    *(void *)(v63 - 136) = v68;
    operator delete(v68);
  }
  uint64_t v69 = *(void **)(v63 - 112);
  if (v69)
  {
    *(void *)(v63 - 104) = v69;
    operator delete(v69);
  }
  _Unwind_Resume(a1);
}

void sub_217083128(void *a1, uint64_t a2)
{
  sub_21708946C(&v5, a2);
  unsigned int v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_217083170(void *a1, int **a2)
{
  unsigned int v3 = *a2;
  unint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    long long v5 = *a2;
    do
    {
      uint64_t v6 = *v5++;
      v4 ^= (v4 << 6) + (v4 >> 2) + 2654435769u + v6;
    }
    while (v5 != v2);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v4;
  }
  int v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = (void *)*v11;
  if (*v11)
  {
    size_t v13 = (char *)v2 - (char *)v3;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v4)
      {
        uint64_t v15 = (const void *)v12[2];
        if (v12[3] - (void)v15 == v13 && !memcmp(v15, v3, v13)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

void *sub_2170832B0(uint64_t a1, int **a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)a2[1];
  if (*a2 == (int *)v5)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    int8x8_t v7 = *a2;
    do
    {
      uint64_t v8 = *v7++;
      v6 ^= (v6 << 6) + (v6 >> 2) + 2654435769u + v8;
    }
    while (v7 != (int *)v5);
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v6 >= v9) {
        unint64_t v2 = v6 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v6;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v2);
    if (v12)
    {
      size_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v6)
          {
            uint64_t v15 = (const void *)v13[2];
            if (v13[3] - (void)v15 == v5 - (void)v4 && !memcmp(v15, v4, v5 - (void)v4)) {
              return v13 + 5;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2) {
              break;
            }
          }
          size_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  std::string::size_type v16 = (void *)(a1 + 16);
  uint64_t v38 = operator new(0x30uLL);
  *uint64_t v38 = 0;
  v38[1] = v6;
  uint64_t v38[3] = 0;
  v38[4] = 0;
  v38[2] = 0;
  sub_216825C04(v38 + 2, v4, v5, (v5 - (uint64_t)v4) >> 2);
  *((_DWORD *)v38 + 10) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3) {
      BOOL v19 = 0;
    }
    unint64_t v20 = (2 * v9) | !v19;
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_21677CA1C();
          }
          size_t v23 = operator new(8 * *(void *)&prime);
          char v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          std::string::pointer v26 = (void *)*v16;
          if (*v16)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v16;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_61;
                  }
                  void *v26 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_61:
                std::string::pointer v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        int v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v6 >= v9) {
        unint64_t v2 = v6 % v9;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v6;
    }
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v2);
  if (v34)
  {
    *uint64_t v38 = *v34;
    *uint64_t v34 = v38;
  }
  else
  {
    *uint64_t v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v38;
    *(void *)(*(void *)a1 + 8 * v2) = v16;
    if (*v38)
    {
      unint64_t v35 = *(void *)(*v38 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v35 >= v9) {
          v35 %= v9;
        }
      }
      else
      {
        v35 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v38;
    }
  }
  size_t v13 = v38;
  ++*(void *)(a1 + 24);
  return v13 + 5;
}

void sub_217083738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    sub_216C7A0A8(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21708376C(uint64_t a1)
{
  uint64_t v1 = *(long long **)(a1 + 216);
  std::string::size_type v87 = (uint64_t **)(a1 + 216);
  unint64_t v2 = (long long *)(a1 + 224);
  if (v1 != (long long *)(a1 + 224))
  {
    uint64_t v3 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
    unint64_t v89 = (unint64_t)v3 >> 2;
    unint64_t v90 = (int)(v3 >> 2);
    unint64_t v4 = (unint64_t)v104;
    uint64_t v94 = ((unint64_t)v3 >> 2);
    uint64_t v88 = (long long *)(a1 + 224);
    while (1)
    {
      sub_2168BB890(__dst, v1 + 2);
      uint64_t v6 = v110;
      uint64_t v5 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(unsigned char *)(v6 + 136) == 5)
      {
        int8x8_t v7 = (void *)(v6 + 48);
        if (*(void *)(v6 + 56) == *(void *)(v6 + 48)) {
          break;
        }
      }
      if (v5) {
        goto LABEL_8;
      }
LABEL_9:
      if (v111) {
        sub_216784EC4(v111);
      }
      if (v109 < 0) {
        operator delete((void *)__dst[0]);
      }
      uint64_t v8 = (long long *)*((void *)v1 + 1);
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          uint64_t v8 = *(long long **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (long long *)*((void *)v1 + 2);
          BOOL v79 = *(void *)v9 == (void)v1;
          uint64_t v1 = v9;
        }
        while (!v79);
      }
      uint64_t v1 = v9;
      if (v9 == v2) {
        goto LABEL_174;
      }
    }
    uint64_t v92 = v5;
    uint64_t v10 = *(int *)(v6 + 140);
    *(_OWORD *)std::string __p = 0u;
    long long v106 = 0u;
    float v107 = 1.0;
    v103[0] = 0;
    v103[1] = 0;
    v104[0] = 0;
    sub_2167816FC(&__s2, v10 + 1);
    std::string::size_type v91 = v1;
    sub_21681C000(v6 + 48, v90);
    sub_21681FE20(v103, (uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2);
    uint64_t v93 = v6;
    if ((int)v89 >= 1)
    {
      uint64_t v11 = 0;
      int v97 = 0;
      int v99 = 0;
      uint64_t v12 = v10;
      uint64_t v95 = v10;
      uint64_t v98 = v7;
      do
      {
        size_t v13 = (int *)__s2;
        if ((int)v10 >= 1)
        {
          unint64_t v14 = (int *)(*(void *)(v93 + 24) + 4 * v97);
          v97 += v12;
          uint64_t v15 = v12;
          std::string::size_type v16 = __s2;
          do
          {
            int v17 = *v14++;
            *v16++ = v17;
            --v15;
          }
          while (v15);
        }
        v13[v10] = *(_DWORD *)(*(void *)(a1 + 56) + 4 * v11);
        uint64_t v18 = (uint64_t)v102;
        uint64_t v100 = v11;
        unint64_t v19 = 0;
        if (v13 != v102)
        {
          unint64_t v20 = v13;
          do
          {
            uint64_t v21 = *v20++;
            v19 ^= (v19 << 6) + 2654435769u + (v19 >> 2) + v21;
          }
          while (v20 != v102);
        }
        unint64_t v22 = (unint64_t)__p[1];
        if (__p[1])
        {
          uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v23.i16[0] = vaddlv_u8(v23);
          unint64_t v4 = v23.u32[0];
          if (v23.u32[0] > 1uLL)
          {
            unint64_t v24 = v19;
            if ((void *)v19 >= __p[1]) {
              unint64_t v24 = v19 % (unint64_t)__p[1];
            }
          }
          else
          {
            unint64_t v24 = ((unint64_t)__p[1] - 1) & v19;
          }
          uint64_t v25 = (uint64_t **)*((void *)__p[0] + v24);
          if (v25)
          {
            std::string::pointer v26 = *v25;
            if (*v25)
            {
              int64_t v27 = (char *)v102 - (char *)v13;
              do
              {
                unint64_t v28 = v26[1];
                if (v28 == v19)
                {
                  unint64_t v29 = (const void *)v26[2];
                  if (v26[3] - (void)v29 == v27 && !memcmp(v29, v13, v18 - (void)v13))
                  {
                    uint64_t v71 = v100;
                    *(_DWORD *)(*v98 + 4 * v100) = *((_DWORD *)v26 + 10);
                    goto LABEL_145;
                  }
                }
                else
                {
                  if (v4 > 1)
                  {
                    if (v28 >= v22) {
                      v28 %= v22;
                    }
                  }
                  else
                  {
                    v28 &= v22 - 1;
                  }
                  if (v28 != v24) {
                    break;
                  }
                }
                std::string::pointer v26 = (uint64_t *)*v26;
              }
              while (v26);
            }
          }
        }
        if (v13 == (int *)v18)
        {
          unint64_t v30 = 0;
          if (!v22) {
            goto LABEL_68;
          }
        }
        else
        {
          unint64_t v30 = 0;
          uint64_t v31 = v13;
          do
          {
            uint64_t v32 = *v31++;
            v30 ^= (v30 << 6) + 2654435769u + (v30 >> 2) + v32;
          }
          while (v31 != (int *)v18);
          if (!v22) {
            goto LABEL_68;
          }
        }
        uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
        v33.i16[0] = vaddlv_u8(v33);
        unint64_t v34 = v33.u32[0];
        if (v33.u32[0] > 1uLL)
        {
          unint64_t v4 = v30;
          if (v30 >= v22) {
            unint64_t v4 = v30 % v22;
          }
        }
        else
        {
          unint64_t v4 = v30 & (v22 - 1);
        }
        unint64_t v35 = (void *)*((void *)__p[0] + v4);
        if (v35)
        {
          long long v36 = (void *)*v35;
          if (*v35)
          {
            do
            {
              unint64_t v37 = v36[1];
              if (v37 == v30)
              {
                uint64_t v38 = (const void *)v36[2];
                if (v36[3] - (void)v38 == v18 - (void)v13 && !memcmp(v38, v13, v18 - (void)v13))
                {
                  unint64_t v4 = (unint64_t)v104;
                  unint64_t v72 = v98;
                  goto LABEL_124;
                }
              }
              else
              {
                if (v34 > 1)
                {
                  if (v37 >= v22) {
                    v37 %= v22;
                  }
                }
                else
                {
                  v37 &= v22 - 1;
                }
                if (v37 != v4) {
                  break;
                }
              }
              long long v36 = (void *)*v36;
            }
            while (v36);
          }
        }
LABEL_68:
        std::string::size_type v39 = operator new(0x30uLL);
        char v112 = v39;
        uint64_t v113 = &v106;
        char v114 = 0;
        *std::string::size_type v39 = 0;
        v39[1] = v30;
        void v39[3] = 0;
        v39[4] = 0;
        v39[2] = 0;
        sub_216825C04(v39 + 2, v13, v18, (v18 - (uint64_t)v13) >> 2);
        *((_DWORD *)v39 + 10) = 0;
        char v114 = 1;
        float v40 = (float)(unint64_t)(*((void *)&v106 + 1) + 1);
        unint64_t v72 = v98;
        if (v22 && (float)(v107 * (float)v22) >= v40) {
          goto LABEL_115;
        }
        BOOL v41 = (v22 & (v22 - 1)) == 0;
        if (v22 < 3) {
          BOOL v41 = 0;
        }
        unint64_t v42 = (2 * v22) | !v41;
        unint64_t v43 = vcvtps_u32_f32(v40 / v107);
        if (v42 <= v43) {
          int8x8_t prime = (int8x8_t)v43;
        }
        else {
          int8x8_t prime = (int8x8_t)v42;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v22 = (unint64_t)__p[1];
        if ((void *)*(void *)&prime > __p[1]) {
          goto LABEL_80;
        }
        if ((void *)*(void *)&prime < __p[1])
        {
          unint64_t v51 = vcvtps_u32_f32((float)*((unint64_t *)&v106 + 1) / v107);
          if (__p[1] < (void *)3
            || (uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
          {
            unint64_t v51 = std::__next_prime(v51);
          }
          else
          {
            uint64_t v53 = 1 << -(char)__clz(v51 - 1);
            if (v51 >= 2) {
              unint64_t v51 = v53;
            }
          }
          if (*(void *)&prime <= v51) {
            int8x8_t prime = (int8x8_t)v51;
          }
          if (*(void *)&prime < v22)
          {
            if (!*(void *)&prime)
            {
              unint64_t v70 = __p[0];
              __p[0] = 0;
              unint64_t v72 = v98;
              if (v70) {
                operator delete(v70);
              }
              unint64_t v22 = 0;
              __p[1] = 0;
              goto LABEL_110;
            }
LABEL_80:
            if (*(void *)&prime >> 61) {
              sub_21677CA1C();
            }
            int64_t v45 = operator new(8 * *(void *)&prime);
            unint64_t v46 = __p[0];
            __p[0] = v45;
            if (v46) {
              operator delete(v46);
            }
            uint64_t v47 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v47++) = 0;
            while (*(void *)&prime != v47);
            long long v48 = (void **)v106;
            if ((void)v106)
            {
              unint64_t v49 = *(void *)(v106 + 8);
              uint8x8_t v50 = (uint8x8_t)vcnt_s8(prime);
              v50.i16[0] = vaddlv_u8(v50);
              if (v50.u32[0] > 1uLL)
              {
                if (v49 >= *(void *)&prime) {
                  v49 %= *(void *)&prime;
                }
              }
              else
              {
                v49 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v49) = &v106;
              for (i = *v48; i; unint64_t v49 = v55)
              {
                unint64_t v55 = i[1];
                if (v50.u32[0] > 1uLL)
                {
                  if (v55 >= *(void *)&prime) {
                    v55 %= *(void *)&prime;
                  }
                }
                else
                {
                  v55 &= *(void *)&prime - 1;
                }
                if (v55 != v49)
                {
                  if (!*((void *)__p[0] + v55))
                  {
                    *((void *)__p[0] + v55) = v48;
                    goto LABEL_105;
                  }
                  *long long v48 = (void *)*i;
                  *uint64_t i = **((void **)__p[0] + v55);
                  **((void **)__p[0] + v55) = i;
                  uint64_t i = v48;
                }
                unint64_t v55 = v49;
LABEL_105:
                long long v48 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v22 = (unint64_t)prime;
            goto LABEL_109;
          }
          unint64_t v22 = (unint64_t)__p[1];
        }
LABEL_109:
        unint64_t v72 = v98;
LABEL_110:
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v30 >= v22) {
            unint64_t v4 = v30 % v22;
          }
          else {
            unint64_t v4 = v30;
          }
        }
        else
        {
          unint64_t v4 = (v22 - 1) & v30;
        }
LABEL_115:
        std::string::size_type v56 = (void *)*((void *)__p[0] + v4);
        if (v56)
        {
          void *v112 = *v56;
          *std::string::size_type v56 = v112;
          unint64_t v4 = (unint64_t)v104;
        }
        else
        {
          void *v112 = v106;
          *(void *)&long long v106 = v112;
          *((void *)__p[0] + v4) = &v106;
          unint64_t v4 = (unint64_t)v104;
          if (*v112)
          {
            unint64_t v57 = *(void *)(*v112 + 8);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v57 >= v22) {
                v57 %= v22;
              }
            }
            else
            {
              v57 &= v22 - 1;
            }
            *((void *)__p[0] + v57) = v112;
          }
        }
        long long v36 = v112;
        ++*((void *)&v106 + 1);
LABEL_124:
        *((_DWORD *)v36 + 10) = v99;
        uint64_t v71 = v100;
        *(_DWORD *)(*v72 + 4 * v100) = v99;
        if ((int)v12 < 1)
        {
          ++v99;
        }
        else
        {
          uint64_t v58 = 0;
          int64_t v59 = (char *)v103[1];
          do
          {
            unint64_t v60 = __s2;
            if ((unint64_t)v59 >= v104[0])
            {
              uint64_t v62 = (char *)v103[0];
              uint64_t v63 = (v59 - (char *)v103[0]) >> 2;
              unint64_t v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62) {
                sub_21677CB10();
              }
              int64_t v65 = v104[0] - (unint64_t)v103[0];
              if ((uint64_t)(v104[0] - (unint64_t)v103[0]) >> 1 > v64) {
                unint64_t v64 = v65 >> 1;
              }
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66)
              {
                std::string::size_type v67 = (char *)sub_21677EA28((uint64_t)v104, v66);
                uint64_t v62 = (char *)v103[0];
                int64_t v59 = (char *)v103[1];
              }
              else
              {
                std::string::size_type v67 = 0;
              }
              std::string v68 = &v67[4 * v63];
              *(_DWORD *)std::string v68 = v60[v58];
              std::string::size_type v61 = v68 + 4;
              while (v59 != v62)
              {
                int v69 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              v103[0] = v68;
              v103[1] = v61;
              v104[0] = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              *(_DWORD *)int64_t v59 = *((_DWORD *)__s2 + v58);
              std::string::size_type v61 = v59 + 4;
            }
            v103[1] = v61;
            ++v58;
            int64_t v59 = (char *)v61;
          }
          while (v58 != v12);
          ++v99;
          uint64_t v71 = v100;
        }
LABEL_145:
        uint64_t v11 = v71 + 1;
        uint64_t v10 = v95;
      }
      while (v11 != v94);
    }
    long long v73 = *(_OWORD *)(v93 + 24);
    long long v74 = *(_OWORD *)v103;
    *(_OWORD *)long long v103 = v73;
    *(_OWORD *)(v93 + 24) = v74;
    uint64_t v75 = v104[0];
    v104[0] = *(void *)(v93 + 40);
    *(void *)(v93 + 40) = v75;
    if (v109 < 0)
    {
      unint64_t v2 = v88;
      uint64_t v1 = v91;
      if (__dst[1] != (const void *)7) {
        goto LABEL_167;
      }
      std::string::size_type v76 = (const void **)__dst[0];
    }
    else
    {
      unint64_t v2 = v88;
      uint64_t v1 = v91;
      if (v109 != 7) {
        goto LABEL_167;
      }
      std::string::size_type v76 = __dst;
    }
    int v77 = *(_DWORD *)v76;
    int v78 = *(_DWORD *)((char *)v76 + 3);
    BOOL v79 = v77 == 1836216174 && v78 == 1936482669;
    if (v79) {
      *(unsigned char *)(a1 + 1) = 1;
    }
LABEL_167:
    if (__s2)
    {
      char v102 = (int *)__s2;
      operator delete(__s2);
      long long v80 = v103[0];
      if (!v103[0]) {
        goto LABEL_170;
      }
    }
    else
    {
      long long v80 = (void *)v73;
      if (!(void)v73)
      {
LABEL_170:
        sub_21686891C((uint64_t)__p);
        uint64_t v5 = v92;
        if (!v92) {
          goto LABEL_9;
        }
LABEL_8:
        sub_216784EC4(v5);
        goto LABEL_9;
      }
    }
    v103[1] = v80;
    operator delete(v80);
    goto LABEL_170;
  }
LABEL_174:
  if (*(unsigned char *)(a1 + 1))
  {
    sub_216779094(__dst, "normals");
    __p[0] = __dst;
    std::string::size_type v81 = sub_2170895F0(v87, __dst, (uint64_t)&unk_2174BFD90, (_OWORD **)__p);
    uint64_t v83 = *((void *)v81 + 7);
    long long v82 = (std::__shared_weak_count *)*((void *)v81 + 8);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v109 < 0) {
      operator delete((void *)__dst[0]);
    }
    MEMORY[0x21D4477E0](v83, "primvars:normals");
    *(unsigned char *)(v83 + 148) = 1;
    sub_216779094(__dst, "primvars:normals");
    __p[0] = __dst;
    std::string::size_type v84 = sub_2170895F0(v87, __dst, (uint64_t)&unk_2174BFD90, (_OWORD **)__p);
    if (v82) {
      atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v85 = (std::__shared_weak_count *)*((void *)v84 + 8);
    *((void *)v84 + 7) = v83;
    *((void *)v84 + 8) = v82;
    if (v85) {
      sub_216784EC4(v85);
    }
    if (v109 < 0) {
      operator delete((void *)__dst[0]);
    }
    sub_216779094(__dst, "normals");
    sub_216B72330(v87, __dst);
    if (v109 < 0) {
      operator delete((void *)__dst[0]);
    }
    if (v82) {
      sub_216784EC4(v82);
    }
  }
  return 0;
}

void sub_2170841E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (*(char *)(v34 - 129) < 0) {
    operator delete(*(void **)(v34 - 152));
  }
  if (v33) {
    sub_216784EC4(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170842C0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned __int8 *a5)
{
  int v9 = *a5;
  *(unsigned char *)(a1 + 2) = v9;
  int v10 = a5[1];
  *(unsigned char *)(a1 + 3) = v10;
  if (v10)
  {
    if (v9 || sub_217081730(a1))
    {
      uint64_t v11 = sub_2170A4138();
      sub_216779094(__p, "encode: when preserving flags, cannot require index unification.");
      sub_21707FB4C((os_log_t *)v11, (uint64_t *)__p);
      if (SHIBYTE(v98) < 0) {
        operator delete(__p[0]);
      }
      return 11;
    }
    size_t v13 = (char *)operator new(0xB0uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)size_t v13 = &unk_26C772000;
    *(_OWORD *)(v13 + 24) = 0u;
    unint64_t v14 = (void **)(v13 + 24);
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *((void *)v13 + 21) = 0;
    sub_216779094(__p, "_orderingIndices");
    if (v13[47] < 0) {
      operator delete(*v14);
    }
    *(_OWORD *)unint64_t v14 = *(_OWORD *)__p;
    *((void *)v13 + 5) = v98;
    sub_21681C000((uint64_t)(v13 + 48), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
    uint64_t v15 = *((void *)v13 + 6);
    uint64_t v16 = *((void *)v13 + 7);
    uint64_t v17 = v16 - v15;
    if (v16 != v15)
    {
      uint64_t v18 = 0;
      unint64_t v19 = v17 >> 2;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      do
      {
        *(_DWORD *)(v15 + 4 * v18) = v18;
        ++v18;
      }
      while (v19 != v18);
    }
    *((void *)v13 + 10) = *((void *)v13 + 9);
    v13[96] = 0;
    MEMORY[0x21D4477E0](v13 + 136, "int");
    v13[160] = 4;
    *(void *)(v13 + 164) = 0x100000001;
    v13[172] = 0;
    if (v13[47] < 0)
    {
      sub_216778F24(&__dst, *((void **)v13 + 3), *((void *)v13 + 4));
    }
    else
    {
      long long __dst = *(_OWORD *)v14;
      uint64_t v118 = *((void *)v13 + 5);
    }
    uint64_t v115 = v13 + 24;
    uint64_t v116 = (std::__shared_weak_count *)v13;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    sub_2170850B4(a1, (const void **)&__dst, (uint64_t *)&v115, 1);
    if (v116) {
      sub_216784EC4(v116);
    }
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)__dst);
    }
    sub_216784EC4((std::__shared_weak_count *)v13);
  }
  sub_21687B9B4(a3);
  char v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  sub_2170C36A0(&v111);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 88);
  sub_2167807A0(v110, 0x400uLL);
  uint64_t v22 = v20 - v21;
  char v105 = 4;
  int v106 = 2;
  char v107 = 0;
  int v108 = 16843009;
  char v109 = 1;
  int v23 = *(_DWORD *)(a1 + 136);
  v104[0] = 0;
  v104[1] = v23;
  unint64_t v24 = *(int **)(a1 + 144);
  if (*(int **)(a1 + 152) == v24) {
    unint64_t v24 = 0;
  }
  else {
    char v107 = 1;
  }
  unsigned int v103 = a4;
  unint64_t v25 = (v22 >> 2) / 3uLL;
  sub_2170C36D0((uint64_t)&v111, *(void *)(a1 + 80), v25, *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2, (uint64_t)v24, &v103, (uint64_t)v104);
  int v27 = v26;
  if (v26)
  {
    unint64_t v28 = sub_2170A4138();
    std::to_string(&v102, v27);
    unint64_t v29 = std::string::insert(&v102, 0, "encode: issue with estimatePositionsAndPolygonsEncodingParameters: ");
    goto LABEL_32;
  }
  unint64_t v30 = sub_2170B213C(*(void *)(a1 + 80), (v22 >> 2) / 3uLL, *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2, (uint64_t)v24, (uint64_t)v104);
  uint64_t v31 = v30;
  uint64_t v32 = (uint64_t)v112;
  if (v30 <= v113 - v112)
  {
    if (v30 < v113 - v112) {
      uint64_t v113 = &v112[v30];
    }
  }
  else
  {
    sub_217077494((unint64_t *)&v112, v30 - (v113 - v112));
    uint64_t v32 = (uint64_t)v112;
  }
  unint64_t v101 = 0;
  int v33 = sub_2170C36E4(&v111, *(uint64_t **)(a1 + 80), (v22 >> 2) / 3uLL, *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2, *(const void **)(a1 + 56), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2, v24, v32, v31, (uint64_t *)&v101, (uint64_t)v104);
  if (v33)
  {
    unint64_t v28 = sub_2170A4138();
    std::to_string(&v102, v33);
    unint64_t v29 = std::string::insert(&v102, 0, "encode: issue with encodePositionsAndPolygons: ");
LABEL_32:
    long long v34 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    int64_t v98 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v34;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v28, (uint64_t *)__p);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v35 = (void *)v102.__r_.__value_.__r.__words[0];
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  unint64_t v37 = v112;
  uint64_t v38 = v113;
  if (v101 <= v113 - v112)
  {
    if (v101 < v113 - v112)
    {
      uint64_t v38 = &v112[v101];
      uint64_t v113 = &v112[v101];
    }
  }
  else
  {
    sub_217077494((unint64_t *)&v112, v101 - (v113 - v112));
    unint64_t v37 = v112;
    uint64_t v38 = v113;
  }
  sub_2170897CC(a2, *(char **)(a2 + 8), v37, v38, v38 - v37);
  sub_216779094(__p, "points");
  std::string::size_type v39 = operator new(0x28uLL);
  v39[1] = *(_OWORD *)__p;
  *((void *)v39 + 4) = v98;
  __p[1] = 0;
  int64_t v98 = 0;
  uint64_t v40 = *a3;
  *(void *)std::string::size_type v39 = *a3;
  *((void *)v39 + 1) = a3;
  *(void *)(v40 + 8) = v39;
  *a3 = (uint64_t)v39;
  ++a3[2];
  sub_216779094(__p, "faceVertexCounts");
  BOOL v41 = operator new(0x28uLL);
  v41[1] = *(_OWORD *)__p;
  *((void *)v41 + 4) = v98;
  __p[1] = 0;
  int64_t v98 = 0;
  uint64_t v42 = *a3;
  *(void *)BOOL v41 = *a3;
  *((void *)v41 + 1) = a3;
  *(void *)(v42 + 8) = v41;
  *a3 = (uint64_t)v41;
  ++a3[2];
  sub_216779094(__p, "faceVertexIndices");
  unint64_t v43 = operator new(0x28uLL);
  v43[1] = *(_OWORD *)__p;
  *((void *)v43 + 4) = v98;
  __p[1] = 0;
  int64_t v98 = 0;
  uint64_t v44 = *a3;
  *(void *)unint64_t v43 = *a3;
  *((void *)v43 + 1) = a3;
  *(void *)(v44 + 8) = v43;
  *a3 = (uint64_t)v43;
  ++a3[2];
  uint64_t v45 = sub_2170C3730((uint64_t)&v111);
  sub_216779094(__p, "points");
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  unint64_t v46 = sub_2170899AC((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, &v102);
  sub_21681C000((uint64_t)v46 + 56, (v22 >> 2) / 3uLL);
  uint64_t v92 = (unint64_t *)a2;
  if (SHIBYTE(v98) < 0) {
    operator delete(__p[0]);
  }
  if ((unint64_t)v22 >= 0xC)
  {
    uint64_t v47 = 0;
    if (v25 <= 1) {
      uint64_t v48 = 1;
    }
    else {
      uint64_t v48 = v25;
    }
    do
    {
      int v49 = *(_DWORD *)(v45 + 4 * v47);
      sub_216779094(__p, "points");
      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      *(_DWORD *)(*((void *)sub_2170899AC((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, &v102)
                  + 7)
                + 4 * v47) = v49;
      if (SHIBYTE(v98) < 0) {
        operator delete(__p[0]);
      }
      ++v47;
    }
    while (v48 != v47);
  }
  uint64_t v50 = sub_2170C373C((uint64_t)&v111);
  sub_216779094(__p, "faceVertexCounts");
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  unint64_t v51 = sub_2170899AC((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, &v102);
  sub_21681C000((uint64_t)v51 + 56, (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  if (SHIBYTE(v98) < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(a1 + 40) != *(void *)(a1 + 32))
  {
    unint64_t v52 = 0;
    do
    {
      int v53 = *(_DWORD *)(v50 + 4 * v52);
      sub_216779094(__p, "faceVertexCounts");
      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      *(_DWORD *)(*((void *)sub_2170899AC((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, &v102)
                  + 7)
                + 4 * v52) = v53;
      if (SHIBYTE(v98) < 0) {
        operator delete(__p[0]);
      }
      ++v52;
    }
    while (v52 < (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  }
  uint64_t v54 = sub_2170C3748((uint64_t)&v111);
  sub_216779094(__p, "faceVertexIndices");
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  unint64_t v55 = sub_2170899AC((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, &v102);
  sub_21681C000((uint64_t)v55 + 56, (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  if (SHIBYTE(v98) < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(a1 + 40) != *(void *)(a1 + 32))
  {
    unint64_t v56 = 0;
    do
    {
      int v57 = *(_DWORD *)(v54 + 4 * v56);
      sub_216779094(__p, "faceVertexIndices");
      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      *(_DWORD *)(*((void *)sub_2170899AC((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, &v102)
                  + 7)
                + 4 * v56) = v57;
      if (SHIBYTE(v98) < 0) {
        operator delete(__p[0]);
      }
      ++v56;
    }
    while (v56 < (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
  }
  uint64_t v58 = *(long long **)(a1 + 216);
  if (v58 == (long long *)(a1 + 224))
  {
LABEL_125:
    uint64_t v12 = 0;
    goto LABEL_38;
  }
  uint64_t v93 = a1 + 240;
  while (1)
  {
    int64_t v59 = sub_2168BB890(__p, v58 + 2);
    int v60 = *(unsigned __int8 *)(v99 + 136);
    if ((v60 - 3) > 1) {
      break;
    }
    std::string::size_type v61 = v100;
    v96[0] = v99;
    v96[1] = (uint64_t)v100;
    if (v100) {
      atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v62 = sub_21708515C((uint64_t)v59, v96, &v111, v92, &v103);
    if (v61) {
      sub_216784EC4(v61);
    }
    if (v62)
    {
      unint64_t v89 = sub_2170A4138();
      std::to_string(&v95, v62);
      unint64_t v90 = std::string::insert(&v95, 0, "encode: issue with compressVertexAttribute: ");
      goto LABEL_127;
    }
LABEL_89:
    if (*(unsigned char *)(a1 + 1))
    {
      if (SHIBYTE(v98) < 0)
      {
        if (__p[1] != (void *)16) {
          goto LABEL_99;
        }
        long long v74 = (void **)__p[0];
      }
      else
      {
        if (SHIBYTE(v98) != 16) {
          goto LABEL_99;
        }
        long long v74 = __p;
      }
      std::string::size_type v76 = *v74;
      uint64_t v75 = v74[1];
      BOOL v77 = v76 == (void *)0x737261766D697270 && v75 == (void *)0x736C616D726F6E3ALL;
      if (v77)
      {
        sub_216779094(&v102, "normals");
        int v78 = (char *)operator new(0x28uLL);
        *(std::string *)(v78 + 16) = v102;
        *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v79 = *a3;
        *((void *)v78 + 1) = a3;
        goto LABEL_100;
      }
    }
LABEL_99:
    int v78 = (char *)sub_21687C484((uint64_t)a3, 0, 0, (uint64_t)__p);
    *((void *)v78 + 1) = a3;
    uint64_t v79 = *a3;
LABEL_100:
    *(void *)int v78 = v79;
    *(void *)(v79 + 8) = v78;
    *a3 = (uint64_t)v78;
    ++a3[2];
    long long v80 = sub_21687C484(v93, 0, 0, (uint64_t)__p);
    v80[1] = v93;
    uint64_t v81 = *(void *)(a1 + 240);
    *long long v80 = v81;
    *(void *)(v81 + 8) = v80;
    *(void *)(a1 + 240) = v80;
    ++*(void *)(a1 + 256);
    if (a1 + 264 != sub_217089C68(*(void *)(a1 + 272), a1 + 264, (unsigned __int8 **)__p))
    {
      if (v98 >= 0) {
        size_t v82 = HIBYTE(v98);
      }
      else {
        size_t v82 = (size_t)__p[1];
      }
      sub_2167940B4((uint64_t)&v102, v82 + 8);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v83 = &v102;
      }
      else {
        uint64_t v83 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if (v82)
      {
        if (v98 >= 0) {
          std::string::size_type v84 = __p;
        }
        else {
          std::string::size_type v84 = (void **)__p[0];
        }
        memmove(v83, v84, v82);
      }
      strcpy((char *)v83 + v82, ":indices");
      long long v85 = (char *)operator new(0x28uLL);
      *(std::string *)(v85 + 16) = v102;
      *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v86 = *a3;
      *(void *)long long v85 = *a3;
      *((void *)v85 + 1) = a3;
      *(void *)(v86 + 8) = v85;
      *a3 = (uint64_t)v85;
      ++a3[2];
    }
    if (v100) {
      sub_216784EC4(v100);
    }
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type v87 = (long long *)*((void *)v58 + 1);
    if (v87)
    {
      do
      {
        uint64_t v88 = v87;
        std::string::size_type v87 = *(long long **)v87;
      }
      while (v87);
    }
    else
    {
      do
      {
        uint64_t v88 = (long long *)*((void *)v58 + 2);
        BOOL v77 = *(void *)v88 == (void)v58;
        uint64_t v58 = v88;
      }
      while (!v77);
    }
    uint64_t v58 = v88;
    if (v88 == (long long *)(a1 + 224)) {
      goto LABEL_125;
    }
  }
  if (v60 != 5) {
    goto LABEL_89;
  }
  uint64_t v63 = v100;
  v94[0] = v99;
  v94[1] = (uint64_t)v100;
  if (v100) {
    atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v64 = sub_217085490((uint64_t)v59, v94, &v111, v92, &v103);
  if (v63) {
    sub_216784EC4(v63);
  }
  if (!v64)
  {
    uint64_t v65 = sub_2170C3840((uint64_t)&v111);
    uint64_t v66 = *(void *)(v99 + 24);
    uint64_t v67 = *(void *)(v99 + 32);
    unint64_t v68 = *(int *)(v99 + 144);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    int v69 = sub_217089B24((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v102);
    unint64_t v70 = (v67 - v66) >> 2;
    unint64_t v71 = v70 / v68;
    sub_21681C000((uint64_t)(v69 + 7), v70 / v68);
    if (v70 >= v68)
    {
      uint64_t v72 = 0;
      if (v71 <= 1) {
        unint64_t v71 = 1;
      }
      do
      {
        int v73 = *(_DWORD *)(v65 + 4 * v72);
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        *(_DWORD *)(sub_217089B24((uint64_t **)(a1 + 288), (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v102)[7]+ 4 * v72++) = v73;
      }
      while (v71 != v72);
    }
    goto LABEL_89;
  }
  unint64_t v89 = sub_2170A4138();
  std::to_string(&v95, v64);
  unint64_t v90 = std::string::insert(&v95, 0, "encode: issue with compressFaceVaryingAttribute: ");
LABEL_127:
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v89, (uint64_t *)&v102);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (v100) {
    sub_216784EC4(v100);
  }
  if (SHIBYTE(v98) < 0)
  {
    unint64_t v35 = __p[0];
LABEL_36:
    operator delete(v35);
  }
LABEL_37:
  uint64_t v12 = 110;
LABEL_38:
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  sub_2170C36A4((uint64_t *)&v111);
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
  return v12;
}

void sub_217084F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_2168B7DB4((uint64_t)&a28);
  uint64_t v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(void *)(v42 - 192) = v44;
    operator delete(v44);
  }
  sub_2170C36A4((uint64_t *)(v42 - 176));
  uint64_t v45 = *(void **)(v42 - 168);
  if (v45)
  {
    *(void *)(v42 - 160) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170850B4(uint64_t a1, const void **a2, uint64_t *a3, char a4)
{
  if ((a4 & 1) == 0 && a1 + 224 != sub_21678C2D8(a1 + 216, a2)) {
    return 0;
  }
  uint64_t v12 = a2;
  uint64_t v8 = sub_217087FC8((uint64_t **)(a1 + 216), a2, (uint64_t)&unk_2174BFD90, (long long **)&v12);
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)v8[8];
  v8[7] = v10;
  v8[8] = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  return 1;
}

uint64_t sub_21708515C(uint64_t a1, uint64_t *a2, int **a3, unint64_t *a4, unsigned int *a5)
{
  char v43 = 4;
  uint64_t v44 = 2;
  int v45 = 0;
  char v46 = 1;
  uint64_t v8 = *a2;
  int v9 = *(_DWORD *)(*a2 + 104);
  v42[0] = 0;
  v42[1] = v9;
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v11 = *(void *)(v8 + 32);
  unint64_t v12 = *(int *)(v8 + 140);
  int v13 = sub_2170C36DC(a3, v10, 0, 16, v12, a5, (uint64_t)v42);
  if (v13)
  {
    int v14 = v13;
    uint64_t v15 = sub_2170A4138();
    std::operator+<char>();
    uint64_t v16 = std::string::append(&v38, " due to error ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, v14);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v37;
    }
    else {
      uint64_t v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v37.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v39, (const std::string::value_type *)v18, size);
LABEL_21:
    long long v33 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v33;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v15, (uint64_t *)__p);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    return 110;
  }
  unint64_t v21 = (v11 - v10) >> 2;
  unint64_t v22 = a4[1] - *a4;
  uint64_t v23 = sub_2170B28B0(*(void *)(*a2 + 24), 0, 16, v21 / v12, *(int *)(*a2 + 140), (uint64_t)v42);
  uint64_t v24 = v23;
  unint64_t v25 = *a4;
  unint64_t v26 = a4[1] - *a4;
  if (v23 + v22 <= v26)
  {
    if (v23 + v22 < v26) {
      a4[1] = v25 + v23 + v22;
    }
  }
  else
  {
    sub_217077494(a4, v23 + v22 - v26);
    unint64_t v25 = *a4;
  }
  uint64_t v36 = 0;
  int v27 = sub_2170C3720((unsigned int **)a3, *(void *)(*a2 + 24), 0, 0x10u, 0, *(int *)(*a2 + 140), v25 + v22, v24, &v36, (uint64_t)v42);
  if (v27)
  {
    int v28 = v27;
    uint64_t v15 = sub_2170A4138();
    std::operator+<char>();
    unint64_t v29 = std::string::append(&v38, " due to error ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, v28);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v37;
    }
    else {
      uint64_t v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v37.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v39, (const std::string::value_type *)v31, v32);
    goto LABEL_21;
  }
  unint64_t v35 = a4[1] - *a4;
  if (v36 + v22 <= v35)
  {
    if (v36 + v22 < v35)
    {
      uint64_t result = 0;
      a4[1] = *a4 + v36 + v22;
      return result;
    }
  }
  else
  {
    sub_217077494(a4, v36 + v22 - v35);
  }
  return 0;
}

void sub_217085438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217085490(uint64_t a1, uint64_t *a2, int **a3, unint64_t *a4, unsigned int *a5)
{
  char v42 = 4;
  uint64_t v43 = 2;
  int v44 = 0;
  char v45 = 1;
  uint64_t v8 = *a2;
  int v9 = *(_DWORD *)(*a2 + 104);
  v41[0] = 0;
  v41[1] = v9;
  uint64_t v10 = *(void *)(v8 + 24);
  unint64_t v11 = *(int *)(v8 + 140);
  unint64_t v12 = ((*(void *)(v8 + 32) - v10) >> 2) / v11;
  int v13 = sub_2170C3780(a3, v10, 0, 16, v12, v11, *(void *)(v8 + 48), a5, (uint64_t)v41);
  if (v13)
  {
    int v14 = v13;
    uint64_t v15 = sub_2170A4138();
    std::operator+<char>();
    uint64_t v16 = std::string::append(&v37, " due to error ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, v14);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v36;
    }
    else {
      uint64_t v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v38, (const std::string::value_type *)v18, size);
LABEL_21:
    long long v32 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v40 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v32;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v15, (uint64_t *)__p);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    return 110;
  }
  int v44 = 1;
  unint64_t v21 = a4[1] - *a4;
  uint64_t v22 = sub_2170C3754(*(void *)(*a2 + 24), 0, 16, v12, *(int *)(*a2 + 140), *(void *)(*a2 + 48), (uint64_t)(*(void *)(*a2 + 56) - *(void *)(*a2 + 48)) >> 2, (uint64_t)v41);
  uint64_t v23 = v22;
  unint64_t v24 = *a4;
  unint64_t v25 = a4[1] - *a4;
  if (v22 + v21 <= v25)
  {
    if (v22 + v21 < v25) {
      a4[1] = v24 + v22 + v21;
    }
  }
  else
  {
    sub_217077494(a4, v22 + v21 - v25);
    unint64_t v24 = *a4;
  }
  uint64_t v35 = 0;
  int v26 = sub_2170C3824((uint64_t *)a3, *(int **)(*a2 + 24), 0, 16, 0, v12, *(int *)(*a2 + 140), *(int **)(*a2 + 48), v24 + v21, v23, &v35, (uint64_t)v41);
  if (v26)
  {
    int v27 = v26;
    uint64_t v15 = sub_2170A4138();
    std::operator+<char>();
    int v28 = std::string::append(&v37, " due to error ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, v27);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v30 = &v36;
    }
    else {
      long long v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v36.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v38, (const std::string::value_type *)v30, v31);
    goto LABEL_21;
  }
  unint64_t v34 = a4[1] - *a4;
  if (v35 + v21 <= v34)
  {
    if (v35 + v21 < v34)
    {
      uint64_t result = 0;
      a4[1] = *a4 + v35 + v21;
      return result;
    }
  }
  else
  {
    sub_217077494(a4, v35 + v21 - v34);
  }
  return 0;
}

void sub_21708578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170857E4(uint64_t a1, uint64_t a2)
{
  v67[0] = 0;
  v67[1] = 0;
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v68 = 0;
  int v69 = v70;
  v71[1] = 0;
  uint64_t v72 = 0;
  v71[0] = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  uint64_t v4 = sub_2170A25F8(a2, (uint64_t)v67);
  if (v4) {
    goto LABEL_63;
  }
  uint64_t v5 = *(_DWORD **)(a2 + 176);
  if (!v5)
  {
    unint64_t v12 = sub_2170A4138();
    sub_216779094(__p, "decode: empty buffer");
    sub_21707FB4C((os_log_t *)v12, (uint64_t *)__p);
    if ((SBYTE7(v61) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v4 = 100;
      goto LABEL_63;
    }
    unint64_t v11 = __p[0];
LABEL_10:
    operator delete(v11);
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a2 + 184) & ~(*(uint64_t *)(a2 + 184) >> 63);
  int v7 = sub_2170B118C(v5, v6);
  if (v7)
  {
    uint64_t v8 = sub_2170A4138();
    std::to_string(&__dst, v7);
    int v9 = std::string::insert(&__dst, 0, "decode: issue with checkBitstream: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&long long v61 = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v8, (uint64_t *)__p);
    if (SBYTE7(v61) < 0) {
      operator delete(__p[0]);
    }
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    unint64_t v11 = (void *)__dst.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  sub_2170B1098(&v65);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  *(unsigned char *)(a1 + 104) = sub_217086124((uint64_t)v71);
  *(_DWORD *)(a1 + 108) = v73;
  if ((long long *)(a1 + 112) != &v74) {
    sub_216825D78((char *)(a1 + 112), (char *)v74, *((uint64_t *)&v74 + 1), (uint64_t)(*((void *)&v74 + 1) - v74) >> 2);
  }
  char v62 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v61 = 0u;
  sub_2170B10C8((uint64_t)v5, v6, (uint64_t)__p);
  int v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_2170A4138();
    std::to_string(&v59, v14);
    uint64_t v16 = std::string::insert(&v59, 0, "decode: cannot parse header: ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v15, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = 151;
    goto LABEL_62;
  }
  *(_DWORD *)(a1 + 136) = DWORD2(v61);
  if (v62)
  {
    sub_21681C000(a1 + 144, (int)v61);
    uint64_t v4 = *(void *)(a1 + 144);
  }
  else
  {
    uint64_t v4 = 0;
  }
  if ((long long *)(a1 + 192) != (long long *)((char *)&v78 + 8)) {
    sub_21680F694(a1 + 192, *((std::string **)&v78 + 1), (long long *)v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *((void *)&v78 + 1)) >> 3));
  }
  if ((long long *)(a1 + 168) != &v77) {
    sub_217089D24((uint64_t **)(a1 + 168), v77, *((uint64_t **)&v77 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v77 + 1) - v77) >> 3));
  }
  sub_21681C000(a1 + 32, (int)v61);
  sub_21681C000(a1 + 80, 3 * SHIDWORD(__p[1]));
  sub_21681C000(a1 + 56, SDWORD1(v61));
  uint64_t v63 = 0;
  int v18 = sub_2170B11EC((uint64_t *)&v65, (unint64_t)v5, v6, &v63, *(int32x2_t **)(a1 + 80), *(_DWORD **)(a1 + 32), *(void **)(a1 + 56), (int *)v4);
  if (v18)
  {
    unint64_t v19 = sub_2170A4138();
    std::to_string(&v59, v18);
    uint64_t v20 = std::string::insert(&v59, 0, "decode: issue with decodePositionAndPolygons: ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v19, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v22 = (void *)v59.__r_.__value_.__r.__words[0];
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  uint64_t v64 = v63;
  uint64_t v23 = v69;
  while (1)
  {
    if (v64 == v6)
    {
      *(unsigned char *)a1 = 1;
      int v28 = (uint64_t **)(a1 + 216);
      sub_216779094(&__dst, "_orderingIndices");
      uint64_t v29 = sub_21678C2D8(a1 + 216, (const void **)&__dst.__r_.__value_.__l.__data_);
      long long v30 = (uint64_t *)(a1 + 224);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v30 == (uint64_t *)v29) {
        goto LABEL_110;
      }
      memset(&__dst, 0, sizeof(__dst));
      sub_216779094(&v59, "_orderingIndices");
      std::string::size_type v31 = (std::string **)sub_2170869E8(a1 + 216, (const void **)&v59.__r_.__value_.__l.__data_);
      if (&__dst != &(*v31)[1]) {
        std::string::size_type v31 = (std::string **)sub_216825D78((char *)&__dst, (*v31)[1].__r_.__value_.__l.__data_, (*v31)[1].__r_.__value_.__l.__size_, (uint64_t)((*v31)[1].__r_.__value_.__l.__size_ - (*v31)[1].__r_.__value_.__r.__words[0]) >> 2);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      memset(&v59, 0, sizeof(v59));
      if (&v59 != (std::string *)(a1 + 80)) {
        std::string::size_type v31 = (std::string **)sub_216825D78((char *)&v59, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
      }
      uint64_t v32 = sub_217086A28((uint64_t)v31, (uint64_t *)&v59, (uint64_t *)(a1 + 80), 3, (uint64_t *)&__dst);
      if (v32) {
        goto LABEL_59;
      }
      std::string v36 = *(int **)(a1 + 56);
      uint64_t v37 = *(void *)(a1 + 64) - (void)v36;
      if (v37)
      {
        unint64_t v38 = v37 >> 2;
        std::string::size_type v39 = __dst.__r_.__value_.__r.__words[0];
        unint64_t v40 = (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 2;
        if (v38 <= 1) {
          unint64_t v38 = 1;
        }
        while (1)
        {
          unint64_t v41 = *v36;
          if ((v41 & 0x80000000) != 0 || v40 <= v41) {
            break;
          }
          *v36++ = *(_DWORD *)(v39 + 4 * v41);
          if (!--v38) {
            goto LABEL_79;
          }
        }
        int v53 = sub_2170A4138();
        sub_216779094(&v56, "decode: Cannot reorder faceVertexIndices, out of range");
        sub_21707FB4C((os_log_t *)v53, (uint64_t *)&v56);
        if (SHIBYTE(v58) < 0) {
          operator delete(v56);
        }
        char v33 = 0;
        uint64_t v4 = 12;
      }
      else
      {
LABEL_79:
        char v42 = *v28;
        if (*v28 != v30)
        {
          while (1)
          {
            uint64_t v43 = (char *)sub_21708169C(v42 + 4, "_orderingIndices");
            if (v43)
            {
              uint64_t v44 = v42[7];
              if (*(unsigned char *)(v44 + 136) == 4)
              {
                if (&v59 != (std::string *)(v44 + 24))
                {
                  uint64_t v43 = sub_216825D78((char *)&v59, *(char **)(v44 + 24), *(void *)(v44 + 32), (uint64_t)(*(void *)(v44 + 32) - *(void *)(v44 + 24)) >> 2);
                  uint64_t v44 = v42[7];
                }
                uint64_t v32 = sub_217086A28((uint64_t)v43, (uint64_t *)&v59, (uint64_t *)(v44 + 24), *(_DWORD *)(v44 + 140), (uint64_t *)&__dst);
                if (v32) {
                  break;
                }
              }
            }
            char v45 = (uint64_t *)v42[1];
            if (v45)
            {
              do
              {
                char v46 = v45;
                char v45 = (uint64_t *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                char v46 = (uint64_t *)v42[2];
                BOOL v47 = *v46 == (void)v42;
                char v42 = v46;
              }
              while (!v47);
            }
            char v42 = v46;
            if (v46 == v30) {
              goto LABEL_91;
            }
          }
LABEL_59:
          char v33 = 0;
          uint64_t v4 = v32;
          goto LABEL_105;
        }
LABEL_91:
        unint64_t v56 = 0;
        int v57 = 0;
        uint64_t v58 = 0;
        sub_216825C04(&v56, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 2);
        uint64_t v48 = (int *)v56;
        if (v57 != v56)
        {
          unint64_t v49 = (v57 - (unsigned char *)v56) >> 2;
          std::string::size_type v50 = __dst.__r_.__value_.__r.__words[0];
          if (v49 <= 1) {
            unint64_t v49 = 1;
          }
          do
          {
            uint64_t v51 = *v48++;
            *(_DWORD *)(v50 + 4 * v51) = v51;
            --v49;
          }
          while (v49);
        }
        sub_216779094(v54, "_orderingIndices");
        long long v80 = v54;
        unint64_t v52 = (std::string *)(*((void *)sub_2170895F0(v28, (const void **)v54, (uint64_t)&unk_2174BFD90, (_OWORD **)&v80)+ 7)+ 24);
        if (v52 != &__dst) {
          sub_216825D78((char *)v52, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 2);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        if (v56)
        {
          int v57 = v56;
          operator delete(v56);
        }
        char v33 = 1;
      }
LABEL_105:
      if (v59.__r_.__value_.__r.__words[0])
      {
        v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if ((v33 & 1) == 0) {
        goto LABEL_62;
      }
LABEL_110:
      uint64_t v4 = 0;
      goto LABEL_62;
    }
    if (v23 == v70) {
      break;
    }
    if (*((char *)v23 + 55) < 0) {
      sub_216778F24(&__dst, (void *)v23[4], v23[5]);
    }
    else {
      std::string __dst = *(std::string *)(v23 + 4);
    }
    uint64_t v24 = sub_217086464(a1, (uint64_t *)&v65, (uint64_t)v5, v6, (uint64_t)(v23 + 7), &v64);
    int v25 = v24;
    if (v24)
    {
      uint64_t v4 = v24;
    }
    else
    {
      int v26 = (void *)v23[1];
      if (v26)
      {
        do
        {
          uint64_t v23 = v26;
          int v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = v23;
          uint64_t v23 = (void *)v23[2];
        }
        while ((void *)*v23 != v27);
      }
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v25) {
      goto LABEL_62;
    }
  }
  unint64_t v34 = sub_2170A4138();
  sub_216779094(&__dst, "decode: Cannot decompress mesh, missing attribute json data");
  sub_21707FB4C((os_log_t *)v34, (uint64_t *)&__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_61;
  }
  uint64_t v22 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_32:
  operator delete(v22);
LABEL_61:
  uint64_t v4 = 150;
LABEL_62:
  sub_2170B109C(&v65);
LABEL_63:
  __p[0] = (char *)&v78 + 8;
  sub_216782F20((void ***)__p);
  __p[0] = &v77;
  sub_217087F44((void ***)__p);
  if (*((void *)&v75 + 1))
  {
    *(void *)&long long v76 = *((void *)&v75 + 1);
    operator delete(*((void **)&v75 + 1));
  }
  if ((void)v74)
  {
    *((void *)&v74 + 1) = v74;
    operator delete((void *)v74);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete(v71[0]);
  }
  sub_2170879BC((uint64_t)&v69, v70[0]);
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  return v4;
}

void sub_217085FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  sub_2170B109C(&a32);
  sub_217086D7C((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_217086124(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    unsigned int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 > 8)
    {
      if (v1 != 9)
      {
        if (v1 != 17)
        {
          if (v1 != 23) {
            goto LABEL_68;
          }
          BOOL v2 = *(void *)a1 == 0x2079726174696E75 && *(void *)(a1 + 8) == 0x6576697469736F70;
          if (!v2 || *(void *)(a1 + 15) != 0x7468676965772065) {
            goto LABEL_68;
          }
          return 4;
        }
        if (*(void *)a1 != 0x2079726174696E75
          || *(void *)(a1 + 8) != 0x6F74636576206433
          || *(unsigned char *)(a1 + 16) != 114)
        {
LABEL_68:
          long long v17 = sub_2170A4138();
          std::operator+<char>();
          int v18 = std::string::append(&v20, ", using default NONE");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          std::string::size_type v22 = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          sub_21707F290((os_log_t *)v17, (uint64_t *)__p);
          if (SHIBYTE(v22) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          return 0;
        }
        return 2;
      }
      if (*(void *)a1 != 0x677220726F6C6F63 || *(unsigned char *)(a1 + 8) != 98) {
        goto LABEL_68;
      }
      return 3;
    }
    unint64_t v11 = (_DWORD *)a1;
    if (v1 != 4)
    {
      if (v1 != 7) {
        goto LABEL_68;
      }
      if (*(_DWORD *)a1 != 1718185589 || *(_DWORD *)(a1 + 3) != 1836216166) {
        goto LABEL_68;
      }
      return 1;
    }
LABEL_67:
    if (*v11 == 1701736302) {
      return 0;
    }
    goto LABEL_68;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == 7 && **(_DWORD **)a1 == 1718185589 && *(_DWORD *)(*(void *)a1 + 3) == 1836216166) {
    return 1;
  }
  if (v4 == 17)
  {
    if (**(void **)a1 == 0x2079726174696E75
      && *(void *)(*(void *)a1 + 8) == 0x6F74636576206433
      && *(unsigned char *)(*(void *)a1 + 16) == 114)
    {
      return 2;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4 == 9)
  {
    if (**(void **)a1 == 0x677220726F6C6F63 && *(unsigned char *)(*(void *)a1 + 8) == 98) {
      return 3;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4 != 23)
  {
LABEL_44:
    if (v4 != 4) {
      goto LABEL_68;
    }
    unint64_t v11 = *(_DWORD **)a1;
    goto LABEL_67;
  }
  if (**(void **)a1 != 0x2079726174696E75
    || *(void *)(*(void *)a1 + 8) != 0x6576697469736F70
    || *(void *)(*(void *)a1 + 15) != 0x7468676965772065)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    goto LABEL_44;
  }
  return 4;
}

void sub_217086448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217086464(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v12 = (char *)operator new(0xB0uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)unint64_t v12 = &unk_26C772000;
  *(_OWORD *)(v12 + 24) = 0u;
  int v13 = (const void **)(v12 + 24);
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((void *)v12 + 21) = 0;
  std::string::operator=((std::string *)v12 + 1, (const std::string *)a5);
  std::string::operator=((std::string *)(v12 + 136), (const std::string *)(a5 + 24));
  int v14 = (void *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v54);
  v12[160] = sub_217086E14(v14);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *((_DWORD *)v12 + 42) = *(_DWORD *)(a5 + 72);
  v12[172] = *(unsigned char *)(a5 + 76);
  v12[96] = sub_217086124(a5 + 80);
  *((_DWORD *)v12 + 25) = *(_DWORD *)(a5 + 104);
  if (v12 + 104 != (char *)(a5 + 112)) {
    sub_216825D78(v12 + 104, *(char **)(a5 + 112), *(void *)(a5 + 120), (uint64_t)(*(void *)(a5 + 120) - *(void *)(a5 + 112)) >> 2);
  }
  int v15 = sub_2170B118C((_DWORD *)(a3 + *a6), a4);
  if (v15)
  {
    uint64_t v16 = sub_2170A4138();
    std::operator+<char>();
    long long v17 = std::string::append(&v52, " due to error ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v51, v15);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v19 = &v51;
    }
    else {
      long long v19 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v51.__r_.__value_.__l.__size_;
    }
    long long v21 = std::string::append(&v53, (const std::string::value_type *)v19, size);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(void *)&long long v49 = *((void *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)__p);
    if (SBYTE7(v49) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    uint64_t v23 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_36:
    operator delete(v23);
LABEL_37:
    uint64_t v33 = 150;
    goto LABEL_38;
  }
  long long v49 = 0u;
  long long v50 = 0u;
  *(_OWORD *)std::string __p = 0u;
  sub_2170B1128(a3 + *a6, a4, __p);
  int v25 = v24;
  if (v24)
  {
    int v26 = sub_2170A4138();
    std::operator+<char>();
    int v27 = std::string::append(&v51, " due to error ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, v25);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v47;
    }
    else {
      uint64_t v29 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v47.__r_.__value_.__l.__size_;
    }
    std::string::size_type v31 = std::string::append(&v52, (const std::string::value_type *)v29, v30);
LABEL_28:
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v26, (uint64_t *)&v53);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    uint64_t v23 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_36;
  }
  int v36 = HIDWORD(__p[1]);
  int v35 = v49;
  *((_DWORD *)v12 + 41) = v49;
  *((_DWORD *)v12 + 32) = HIDWORD(v49);
  uint64_t v46 = 0;
  uint64_t v37 = (uint64_t *)(v12 + 48);
  sub_21681C000((uint64_t)(v12 + 48), v36 * (uint64_t)v35);
  sub_21681C000((uint64_t)(v12 + 72), SDWORD1(v49));
  if (DWORD1(v50) == 3)
  {
    int v38 = sub_2170B1200(a2, a3 + *a6, a4, &v46, *v37, *((void **)v12 + 9));
  }
  else
  {
    if (DWORD1(v50)) {
      goto LABEL_51;
    }
    int v38 = sub_2170B11F4(a2, a3 + *a6, a4, &v46, *v37);
  }
  int v39 = v38;
  if (v38)
  {
    int v26 = sub_2170A4138();
    std::operator+<char>();
    unint64_t v40 = std::string::append(&v51, " due to error ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, v39);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v42 = &v47;
    }
    else {
      char v42 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v47.__r_.__value_.__l.__size_;
    }
    std::string::size_type v31 = std::string::append(&v52, (const std::string::value_type *)v42, v43);
    goto LABEL_28;
  }
LABEL_51:
  *a6 += v46;
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 24);
  uint64_t v44 = sub_217087FC8((uint64_t **)(a1 + 216), v13, (uint64_t)&unk_2174BFD90, (long long **)&v53);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
  char v45 = (std::__shared_weak_count *)v44[8];
  v44[7] = (uint64_t)v13;
  v44[8] = (uint64_t)v12;
  if (v45) {
    sub_216784EC4(v45);
  }
  uint64_t v33 = 0;
LABEL_38:
  sub_216784EC4((std::__shared_weak_count *)v12);
  return v33;
}

void sub_217086900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_216784EC4(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_2170869E8(uint64_t a1, const void **a2)
{
  uint64_t v2 = *sub_21677B220(a1, &v4, a2);
  if (!v2) {
    sub_216855AEC("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t sub_217086A28(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t *a5)
{
  if (a4 < 1 || (unint64_t v8 = (a2[1] - *a2) >> 2, v8 % a4) || v8 / a4 != (a5[1] - *a5) >> 2)
  {
    uint64_t v23 = sub_2170A4138();
    std::to_string(&v40, a4);
    int v24 = std::string::insert(&v40, 0, "reorderData: Size issue, componentsPerVector: ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v41, ", inputData size: ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, (a2[1] - *a2) >> 2);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v28 = &v39;
    }
    else {
      long long v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    std::string::size_type v30 = std::string::append(&v42, (const std::string::value_type *)v28, size);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    long long v32 = std::string::append(&v43, ", orderInfo size: ");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v38, (a5[1] - *a5) >> 2);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v34 = &v38;
    }
    else {
      unint64_t v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
    }
    int v36 = std::string::append(&v44, (const std::string::value_type *)v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    std::string::size_type v46 = v36->__r_.__value_.__r.__words[2];
    long long v45 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v23, (uint64_t *)&v45);
    if (SHIBYTE(v46) < 0) {
      operator delete((void *)v45);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    return 12;
  }
  else
  {
    sub_21681C000((uint64_t)a3, v8);
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11 - *a2;
    if (v11 != *a2)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v12 >> 2;
      uint64_t v15 = *a5;
      uint64_t v16 = *a3;
      do
      {
        long long v17 = (int *)(v10 + 4 * (int)v13);
        uint64_t v18 = v13 << 32;
        long long v19 = (_DWORD *)(v16 + 4 * *(_DWORD *)(v15 + 4 * ((int)v13 / a4)) * a4);
        uint64_t v20 = a4;
        do
        {
          int v21 = *v17++;
          *v19++ = v21;
          v18 += 0x100000000;
          uint64_t v13 = (v13 + 1);
          --v20;
        }
        while (v20);
      }
      while (v14 > v18 >> 32);
    }
    return 0;
  }
}

void sub_217086CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217086D7C(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 152);
  sub_216782F20(&v5);
  uint64_t v5 = (void **)(a1 + 128);
  sub_217087F44(&v5);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_2170879BC(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_217086E14(void *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*a1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v2) {
      uint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v3 = *((void *)v2 + 17);
    std::string __p = (void *)v3;
    if ((v3 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      std::string __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    }
    char v19 = 1;
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      uint64_t v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v5 = *((void *)v4 + 145);
    uint64_t v20 = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v21 = 2;
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      uint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v7 = *((void *)v6 + 151);
    uint64_t v22 = v7;
    if ((v7 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v23 = 3;
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v8) {
      unint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v9 = *((void *)v8 + 153);
    uint64_t v24 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v25 = 4;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10) {
      uint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v11 = *((void *)v10 + 40);
    uint64_t v26 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v27 = 5;
    sub_217087AB0((uint64_t)v17, (uint64_t *)&__p, 5);
    for (uint64_t i = 64; i != -16; i -= 16)
    {
      uint64_t v13 = *(uint64_t *)((char *)&__p + i);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    std::string __p = a1;
    uint64_t v14 = *((unsigned __int8 *)sub_217087C2C(v17, a1, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p) + 40);
    sub_2168CB05C((uint64_t)v17, v17[1]);
  }
  else
  {
    uint64_t v15 = sub_2170A4138();
    sub_216779094(&__p, "getInterpolationFromToken: Empty token");
    sub_21707F290((os_log_t *)v15, (uint64_t *)&__p);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
    return 0;
  }
  return v14;
}

void sub_2170870CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  while (1)
  {
    uint64_t v16 = *((void *)v14 - 2);
    v14 -= 16;
    uint64_t v15 = v16;
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v14 == &a14) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_217087158(uint64_t a1, uint64_t a2)
{
  sub_217087D3C((uint64_t)v31);
  memset(&v21, 0, sizeof(v21));
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v22 = (uint64_t *)v23;
  uint64_t v25 = 0;
  long long __p = 0uLL;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  std::string::operator=(&v21, (const std::string *)(a1 + 8));
  sub_216779094(__str, off_264294668[*(char *)(a1 + 104)]);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v8 = a2;
  long long __p = *(_OWORD *)__str;
  uint64_t v25 = *(void *)&__str[16];
  int v26 = *(_DWORD *)(a1 + 108);
  if (&v27 != (long long *)(a1 + 112)) {
    sub_216825D78((char *)&v27, *(char **)(a1 + 112), *(void *)(a1 + 120), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 2);
  }
  if (v30 != (_OWORD *)(a1 + 168)) {
    sub_217089D24((uint64_t **)v30, *(void *)(a1 + 168), *(uint64_t **)(a1 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 3));
  }
  if ((_OWORD *)((char *)&v30[1] + 8) != (_OWORD *)(a1 + 192)) {
    sub_21680F694((uint64_t)&v30[1] + 8, *(std::string **)(a1 + 192), *(long long **)(a1 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 3));
  }
  for (uint64_t i = *(void *)(a1 + 248); i != a1 + 240; uint64_t i = *(void *)(i + 8))
  {
    if (*(char *)(i + 39) < 0)
    {
      sub_216778F24(__dst, *(void **)(i + 16), *(void *)(i + 24));
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)(i + 16);
      uint64_t v20 = *(void *)(i + 32);
    }
    memset(&v14, 0, sizeof(v14));
    long long v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    memset(__str, 0, sizeof(__str));
    long long v10 = 0u;
    memset(&v11, 0, sizeof(v11));
    v32[0] = (long long *)__dst;
    uint64_t v5 = sub_217087FC8((uint64_t **)(a1 + 216), (const void **)__dst, (uint64_t)&unk_2174BFD90, v32);
    sub_21709FB70((std::string *)v5[7], (std::string *)__str);
    v32[0] = (long long *)__str;
    uint64_t v6 = sub_21708A1C0(&v22, (const void **)__str, (uint64_t)&unk_2174BFD90, v32);
    std::string::operator=((std::string *)(v6 + 7), (const std::string *)__str);
    std::string::operator=((std::string *)(v6 + 10), (const std::string *)&__str[24]);
    std::string::operator=((std::string *)(v6 + 13), &v11);
    *((_DWORD *)v6 + 32) = v12;
    *((unsigned char *)v6 + 132) = v13;
    std::string::operator=((std::string *)(v6 + 17), &v14);
    *((_DWORD *)v6 + 40) = v15;
    if (v6 + 7 != (uint64_t *)__str) {
      sub_216825D78((char *)v6 + 168, (char *)v16, (uint64_t)v17, (v17 - (unsigned char *)v16) >> 2);
    }
    if (v16)
    {
      long long v17 = v16;
      operator delete(v16);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(*(void **)&__str[24]);
    }
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(__dst[0]);
    }
  }
  sub_2170A26F4((uint64_t)v31, (uint64_t)&v21);
  sub_2170A1500((uint64_t)v31, v8);
  *(void *)std::string __str = (char *)&v30[1] + 8;
  sub_216782F20((void ***)__str);
  *(void *)std::string __str = v30;
  sub_217087F44((void ***)__str);
  if (*((void *)&v28 + 1))
  {
    *(void *)&long long v29 = *((void *)&v28 + 1);
    operator delete(*((void **)&v28 + 1));
  }
  if ((void)v27)
  {
    *((void *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__p);
  }
  sub_2170879BC((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  sub_217087DC0((uint64_t)v31);
  return 0;
}

void sub_217087518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_217087560(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2170875D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_217087654((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_21708763C(_Unwind_Exception *a1)
{
  sub_2168D87B4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_217087654(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_2170876D8(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_217087880((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_2170876D8(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int8 *)a2 + 32), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      long long v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        long long v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        long long v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 32) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 32))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          std::string v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      std::string v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

unsigned char *sub_217087880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x30uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[32] = *(unsigned char *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *((void *)result + 5) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 5) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t **sub_2170878F8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  uint64_t v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((void *)v11 + 5) = 0;
    sub_21677B358(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_2170879BC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2170879BC(a1, *a2);
    sub_2170879BC(a1, a2[1]);
    sub_217087A18((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_217087A18(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_217087AB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_217087B30((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_217087B18(_Unwind_Exception *a1)
{
  sub_2168CB05C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_217087B30(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_216A5D0F4(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_217087BB4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_217087BB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x30uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((unsigned char *)result + 40) = *((unsigned char *)a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_217087C2C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_217087CC4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *sub_217087CC4@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x30uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((unsigned char *)result + 40) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_217087D3C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  uint64_t v2 = operator new(4uLL);
  *(void *)(a1 + 192) = v2;
  *v2++ = 0;
  *(void *)(a1 + 200) = v2;
  *(void *)(a1 + 208) = v2;
  *(void *)(a1 + 232) = 16;
  return a1;
}

void sub_217087DAC(_Unwind_Exception *a1)
{
  sub_217086D7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217087DC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  uint64_t v6 = (void **)(a1 + 152);
  sub_216782F20(&v6);
  uint64_t v6 = (void **)(a1 + 128);
  sub_217087F44(&v6);
  unint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_2170879BC(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_DWORD *sub_217087E68(_DWORD *result, _DWORD *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    int v5 = *result;
    int v4 = result[1];
    if (v4 < *result) {
      ++result;
    }
    uint64_t v6 = v4 >= v5 ? v2 + 1 : v2;
    uint64_t v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5) {
        int v8 = v5;
      }
      else {
        int v8 = v4;
      }
      if (v4 >= v5) {
        int v4 = v5;
      }
      while (v7 + 1 != a2)
      {
        int v10 = *v7;
        int v9 = v7[1];
        if (v9 >= *v7)
        {
          if (v10 < v4)
          {
            int v4 = *v7;
            uint64_t result = v7;
          }
          BOOL v11 = v9 < v8;
          if (v9 > v8) {
            int v8 = v7[1];
          }
          if (!v11) {
            uint64_t v6 = v7 + 1;
          }
        }
        else
        {
          int v4 = *result;
          if (v9 < *result)
          {
            int v4 = v7[1];
            uint64_t result = v7 + 1;
          }
          int v8 = *v6;
          if (v10 > *v6) {
            int v8 = *v7;
          }
          if (v10 >= *v6) {
            uint64_t v6 = v7;
          }
        }
        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

void sub_217087F44(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_2168505B4(v4);
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_217087FC8(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    sub_217088074((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21681534C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_217088074@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2170880F0(_Unwind_Exception *a1)
{
  sub_21681534C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_217088108(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_2170881A0((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *sub_2170881A0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_217088224(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217088208(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_217088224(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v3;
  }
  *((_WORD *)__dst + 14) = 0;
  *((_DWORD *)__dst + 6) = 0;
  return __dst;
}

uint64_t *sub_21708827C(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x28uLL);
    void v10[4] = *a3;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_217088338(unsigned int *a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1) {
    return 112;
  }
  unint64_t v7 = *a1;
  uint64_t v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_21681C000((uint64_t)a2, v7);
    uint64_t v12 = a4;
    sub_217088740(&v63, a4, *((_DWORD **)a1 + 4));
    sub_217088740(v62, a4, *((_DWORD **)a1 + 4));
    uint64_t v13 = 0;
    BOOL v14 = (float *)v62[0];
    unsigned int v15 = v63;
    uint64_t v16 = (int)v7;
    long long v17 = (float *)*((void *)a1 + 4);
    do
    {
      uint64_t v18 = a4;
      char v19 = v14;
      uint64_t v20 = (float *)v15;
      std::string v21 = v17;
      do
      {
        float v22 = *v21++;
        float v23 = v22;
        float v24 = *v20;
        if (*v20 >= v22) {
          float v24 = v23;
        }
        *v20++ = v24;
        if (v23 < *v19) {
          float v23 = *v19;
        }
        *v19++ = v23;
        --v18;
      }
      while (v18);
      v13 += a4;
      v17 += a4;
    }
    while (v13 < (int)v7);
    uint64_t v25 = v63;
    float v26 = *(float *)v62[0] - *(float *)v63;
    if (a4 >= 2)
    {
      long long v27 = (float *)((char *)v62[0] + 4);
      long long v28 = (float *)(v63 + 4);
      uint64_t v29 = a4 - 1;
      do
      {
        float v30 = *v27++;
        float v31 = v30;
        float v32 = *v28++;
        float v33 = v31 - v32;
        if (v33 >= v26) {
          float v26 = v33;
        }
        --v29;
      }
      while (v29);
    }
    int v34 = 1 << a5;
    if (a5)
    {
      if (v26 < 2.2204e-16) {
        float v26 = 1.0;
      }
      float v35 = (float)((float)v34 + -1.0) / v26;
    }
    else
    {
      float v35 = 1.0;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    std::string v38 = (float *)*((void *)a1 + 4);
    uint64_t v39 = a4;
    uint64_t v40 = 4 * a4;
    while (2)
    {
      std::string v41 = (int *)(*a2 + v36);
      uint64_t v42 = v12;
      std::string v43 = (float *)v25;
      std::string v44 = v38;
      do
      {
        int v45 = llroundf(v35 * (float)(*v44 - *v43));
        if (v45 < 0 || v34 <= v45)
        {
          std::string::size_type v46 = sub_2170A4138();
          std::to_string(&v57, v45);
          uint64_t v47 = std::string::insert(&v57, 0, "Uniform quantization: values out of bound; qvalue=");
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v58.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          long long v49 = std::string::append(&v58, " and qp1=");
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v56, 1 << a5);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v51 = &v56;
          }
          else {
            std::string v51 = (std::string *)v56.__r_.__value_.__r.__words[0];
          }
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v56.__r_.__value_.__l.__size_;
          }
          std::string v53 = std::string::append(&v59, (const std::string::value_type *)v51, size);
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          std::string::size_type v61 = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v46, (uint64_t *)__p);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 112;
          goto LABEL_49;
        }
        *v41++ = v45;
        ++v44;
        ++v43;
        --v42;
      }
      while (v42);
      v37 += v39;
      std::string v38 = (float *)((char *)v38 + v40);
      v36 += v40;
      if (v37 < v16) {
        continue;
      }
      break;
    }
    if ((char **)(a3 + 8) != &v63) {
      sub_216825D78((char *)(a3 + 8), v63, (uint64_t)v64, (v64 - v63) >> 2);
    }
    uint64_t v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v35;
LABEL_49:
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    if (v63)
    {
      uint64_t v64 = v63;
      operator delete(v63);
    }
  }
  return v8;
}

void sub_2170886A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  float v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217088740(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216781458(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2170887A8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170887C4(double **a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1) {
    return 112;
  }
  unint64_t v7 = *(unsigned int *)a1;
  uint64_t v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_21681C000((uint64_t)a2, v7);
    uint64_t v12 = a4;
    float v13 = *a1[4];
    *(float *)uint64_t v65 = v13;
    sub_217088740(&v66, a4, v65);
    float v14 = *a1[4];
    *(float *)long long __p = v14;
    sub_217088740(v65, a4, __p);
    uint64_t v15 = 0;
    uint64_t v16 = (float *)v65[0];
    long long v17 = v66;
    uint64_t v18 = (int)v7;
    char v19 = a1[4];
    do
    {
      uint64_t v20 = a4;
      std::string v21 = v16;
      float v22 = (float *)v17;
      float v23 = v19;
      do
      {
        double v24 = *v23++;
        float v25 = v24;
        float v26 = *v22;
        if (*v22 >= v25) {
          float v26 = v25;
        }
        *v22++ = v26;
        if (*v21 > v25) {
          float v25 = *v21;
        }
        *v21++ = v25;
        --v20;
      }
      while (v20);
      v15 += a4;
      v19 += a4;
    }
    while (v15 < (int)v7);
    long long v27 = v66;
    float v28 = *(float *)v65[0] - *(float *)v66;
    if (a4 >= 2)
    {
      uint64_t v29 = (float *)((char *)v65[0] + 4);
      float v30 = (float *)(v66 + 4);
      uint64_t v31 = a4 - 1;
      do
      {
        float v32 = *v29++;
        float v33 = v32;
        float v34 = *v30++;
        float v35 = v33 - v34;
        if (v35 >= v28) {
          float v28 = v35;
        }
        --v31;
      }
      while (v31);
    }
    int v36 = 1 << a5;
    if (a5)
    {
      if (v28 < 2.2204e-16) {
        float v28 = 1.0;
      }
      float v37 = (float)((float)v36 + -1.0) / v28;
    }
    else
    {
      float v37 = 1.0;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = a1[4];
    uint64_t v41 = a4;
    uint64_t v42 = 8 * a4;
    uint64_t v43 = 4 * a4;
    while (2)
    {
      std::string v44 = (int *)(*a2 + v38);
      uint64_t v45 = v12;
      std::string::size_type v46 = (float *)v27;
      uint64_t v47 = v40;
      do
      {
        int v48 = llround((*v47 - *v46) * v37);
        if (v48 < 0 || v36 <= v48)
        {
          long long v49 = sub_2170A4138();
          std::to_string(&v60, v48);
          long long v50 = std::string::insert(&v60, 0, "Uniform quantization: values out of bound; qvalue=");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::string v52 = std::string::append(&v61, " and qp1=");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v59, 1 << a5);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v54 = &v59;
          }
          else {
            long long v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v59.__r_.__value_.__l.__size_;
          }
          std::string v56 = std::string::append(&v62, (const std::string::value_type *)v54, size);
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          std::string::size_type v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v49, (uint64_t *)__p);
          if (SHIBYTE(v64) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 112;
          goto LABEL_49;
        }
        *v44++ = v48;
        ++v47;
        ++v46;
        --v45;
      }
      while (v45);
      v39 += v41;
      uint64_t v40 = (double *)((char *)v40 + v42);
      v38 += v43;
      if (v39 < v18) {
        continue;
      }
      break;
    }
    if ((char **)(a3 + 8) != &v66) {
      sub_216825D78((char *)(a3 + 8), v66, (uint64_t)v67, (v67 - v66) >> 2);
    }
    uint64_t v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v37;
LABEL_49:
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (v66)
    {
      uint64_t v67 = v66;
      operator delete(v66);
    }
  }
  return v8;
}

void sub_217088B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  float v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  int v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void sub_217088BFC(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    long long v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 24;
      uint64_t v6 = v3 - 24;
      unint64_t v7 = v3 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_217088C9C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    int v4 = (void *)a1[1];
    uint64_t v5 = &v4[3 * a2];
    do
    {
      *int v4 = v4;
      v4[1] = v4;
      v4[2] = 0;
      v4 += 3;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_217088D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_217088D20(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      unint64_t v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(void *)unint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_217088DA8(_Unwind_Exception *a1)
{
  sub_2168505B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217088DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 16;
  if (v9) {
    int v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    int v10 = 0;
  }
  float v13 = v10;
  float v14 = &v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  sub_217088D20(v14, a2);
  uint64_t v15 = v14 + 24;
  sub_217088EC4((uint64_t **)a1, &v13);
  uint64_t v11 = *(void *)(a1 + 8);
  sub_217088F8C((uint64_t)&v13);
  return v11;
}

void sub_217088EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217088F8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_217088EC4(uint64_t **result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v5 = *result;
  unint64_t v4 = result[1];
  uint64_t v6 = (uint64_t *)a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 3;
      v4 -= 3;
      uint64_t result = (uint64_t **)sub_217088F64((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  unint64_t v8 = v3[1];
  v3[1] = (uint64_t *)a2[2];
  a2[2] = v8;
  unint64_t v9 = v3[2];
  v3[2] = (uint64_t *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217088F64(uint64_t a1, uint64_t *a2, void *a3)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  return sub_21685A0DC((uint64_t)a2, a2, a3);
}

uint64_t sub_217088F8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_2168505B4((void *)(i - 24));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_217088FDC(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v10 = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v11 = *(uint64_t **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    float v14 = sub_2168FD4A4(a1, v13);
    uint64_t v15 = v14;
    if (v4)
    {
      uint64_t v16 = 12 * v4;
      uint64_t v17 = v14;
      do
      {
        uint64_t v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *uint64_t v17 = v18;
        uint64_t v17 = (void *)((char *)v17 + 12);
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    uint64_t v19 = *a2;
    uint64_t v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v20 = v19;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  void v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3f &>]";
  char v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v21 = 4;
    }
    else {
      int v21 = 3;
    }
  }
  else
  {
    int v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

void sub_217089174(unint64_t *a1, unint64_t a2, int ***a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_216907BD4((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = **a3;
            unint64_t v13 = *a3[1];
            if (v12 != v13)
            {
              uint64_t v14 = 4 * v3;
              do
              {
                int v15 = *v12++;
                *(_DWORD *)((char *)v7 + v14) = v15;
                v14 += 4;
              }
              while (v12 != v13);
            }
          }
          uint64_t v16 = v7;
LABEL_34:
          if (v16 != (unint64_t *)a1[4])
          {
            sub_2168F83DC((uint64_t)a1);
            a1[4] = (unint64_t)v16;
          }
          *a1 = a2;
          return;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v21 = a2;
      }
      else {
        unint64_t v21 = *a1;
      }
      float v22 = sub_216907BD4((uint64_t)a1, a2);
      uint64_t v16 = v22;
      if (v21)
      {
        uint64_t v23 = 4 * v21;
        double v24 = v22;
        do
        {
          int v25 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)double v24 = v25;
          double v24 = (unint64_t *)((char *)v24 + 4);
          v23 -= 4;
        }
        while (v23);
      }
      if (v3 < a2)
      {
        float v26 = **a3;
        long long v27 = *a3[1];
        if (v26 != v27)
        {
          uint64_t v28 = 4 * v3;
          do
          {
            int v29 = *v26++;
            *(_DWORD *)((char *)v22 + v28) = v29;
            v28 += 4;
          }
          while (v26 != v27);
        }
      }
      goto LABEL_34;
    }
    if (4 * a2 / a2 == 4)
    {
      uint64_t v17 = sub_216907BD4((uint64_t)a1, a2);
      uint64_t v16 = v17;
      uint64_t v18 = **a3;
      uint64_t v19 = *a3[1];
      if (v18 != v19)
      {
        uint64_t v20 = 0;
        do
        {
          *(_DWORD *)((char *)v17 + v20 * 4) = v18[v20];
          ++v20;
        }
        while (&v18[v20] != v19);
      }
      goto LABEL_34;
    }
  }

  sub_2168F845C(a1);
}

void *sub_217089368(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2170893D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2170893EC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_217089458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_21708946C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C771F88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2170894CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_217089564((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170894F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217089518(uint64_t a1)
{
}

uint64_t sub_217089520(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C771FD8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_217089564(int a1, void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 135) < 0) {
      operator delete(__p[14]);
    }
    unint64_t v3 = __p[10];
    if (v3)
    {
      __p[11] = v3;
      operator delete(v3);
    }
    uint64_t v4 = __p[6];
    if (v4)
    {
      __p[7] = v4;
      operator delete(v4);
    }
    uint64_t v5 = __p[3];
    if (v5)
    {
      __p[4] = v5;
      operator delete(v5);
    }
    if (*((char *)__p + 23) < 0) {
      operator delete(*__p);
    }
    operator delete(__p);
  }
}

_OWORD *sub_2170895F0(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)sub_21677B220((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    uint64_t v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *unint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    char v13 = 1;
    sub_21677B358(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_21681534C((uint64_t)v12, 0);
  }
  return v7;
}

void sub_2170896B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C772000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2170896D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C772000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217089718(uint64_t a1)
{
  sub_217089744((uint64_t)&v1, a1 + 24);
}

void sub_217089744(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 135) < 0) {
    operator delete(*(void **)(a2 + 112));
  }
  unint64_t v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(void *)(a2 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5)
  {
    *(void *)(a2 + 32) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v6 = *(void **)a2;
    operator delete(v6);
  }
}

char *sub_2170897CC(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  uint64_t v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_21677CB10();
    }
    char v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    float v26 = &v13[(void)v16];
    long long v27 = &v13[(void)v16 + v6];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    float v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      float v32 = v26;
    }
    else
    {
      uint64_t v31 = v5;
      float v32 = v26;
      do
      {
        char v33 = *--v31;
        *--float v32 = v33;
      }
      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }
    float v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    float v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v21 = &v5[v6];
    float v22 = &v20[-v6];
    uint64_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  uint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

_OWORD *sub_2170899AC(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_21677B220((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    uint64_t v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    sub_21677B358(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_217089A74((uint64_t)v12, 0);
  }
  return v7;
}

void sub_217089A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_217089ACC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_217089ACC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *sub_217089B24(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_217089BD0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_217089A74((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_217089BD0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217089C50(_Unwind_Exception *a1)
{
  sub_217089A74(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_217089C68(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 39);
      if ((v8 & 0x80u) == 0) {
        long long v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 39);
      }
      else {
        long long v9 = *(unsigned __int8 **)(v3 + 24);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v3 + 16), v7, *(void *)(v3 + 24))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 39)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10 + 16) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_217089D24(uint64_t **a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  long long v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) < a4)
  {
    sub_217089E94(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * (a1[2] - *a1);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216782E84(a1, v11);
    uint64_t result = sub_217089EFC(v8, a2, (uint64_t)a3, (uint64_t)a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[1] - v9) < a4)
  {
    char v13 = (uint64_t *)(a2 + 8 * (a1[1] - v9));
    sub_217089F80(a2, v13, v9);
    uint64_t result = sub_217089EFC(v8, (uint64_t)v13, (uint64_t)a3, (uint64_t)a1[1]);
LABEL_11:
    a1[1] = (uint64_t *)result;
    return result;
  }
  uint64_t result = (uint64_t)sub_217089F80(a2, a3, v9);
  size_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      uint64_t result = (uint64_t)sub_2168505B4(v16);
    }
    while (v16 != v15);
  }
  a1[1] = v15;
  return result;
}

void sub_217089E84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_217089E8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_217089E94(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_2168505B4(v3);
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_217089EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_217088D20((void *)(a4 + v7), a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_217089F5C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 24;
    do
    {
      sub_2168505B4((void *)(v4 + v2));
      v2 -= 24;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_217089F80(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t *)a1;
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v6 = a1;
    do
    {
      if (v4 != a3) {
        sub_217089FF4(a3, v4[1], v6);
      }
      v4 += 3;
      a3 += 3;
      v6 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *sub_217089FF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return sub_21708A044((uint64_t)a1, a1, a2, a3);
  }
  else {
    return sub_21708A14C((uint64_t)a1, i, a1);
  }
}

uint64_t *sub_21708A044(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    long long v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        *uint64_t v8 = v12;
        v8[1] = 0;
        *((_DWORD *)v8 + 4) = *(_DWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *long long v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_21708A118(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_21708A138(_Unwind_Exception *a1)
{
}

uint64_t *sub_21708A14C(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    do
    {
      uint64_t v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      long long __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t *sub_21708A1C0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_21708A26C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21708A324((uint64_t)v10, 0);
  }
  return v7;
}

double sub_21708A26C@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xC0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }
  *((void *)v6 + 23) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21708A30C(_Unwind_Exception *a1)
{
  sub_21708A324(v1, 0);
  _Unwind_Resume(a1);
}

void sub_21708A324(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_217087A18((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_21708A37C(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 24);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

atomic_uint **sub_21708A400(atomic_uint **a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a1, "gcl", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a1 + 2, "usd", 0);
  uint64_t v3 = *a1;
  size_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      size_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  uint64_t v7 = a1[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  long long v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  a1[3] = v9;
  a1[4] = v9;
  a1[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  a1[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return a1;
}

void sub_21708A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_21708A640()
{
  uint64_t v0 = sub_21708B338();

  return sub_21708B464(v0);
}

uint64_t sub_21708A668(void *a1)
{
  uint64_t v2 = (uint64_t *)atomic_load((unint64_t *)&qword_267B99D48);
  if (!v2) {
    uint64_t v2 = (uint64_t *)sub_21708B6F8(&qword_267B99D48);
  }
  uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&qword_267B99D48);
  if (!v3) {
    uint64_t v3 = sub_21708B6F8(&qword_267B99D48);
  }
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&qword_267B99D48);
  if (!v4) {
    uint64_t v4 = sub_21708B6F8(&qword_267B99D48);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&qword_267B99D48);
  if (!v5) {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21708B6F8(&qword_267B99D48);
  }
  if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)a1, v2, (uint64_t *)v3 + 1, (uint64_t *)v4 + 2, (uint64_t)EmptyString);
  *a1 = &unk_26C772050;
  return result;
}

void sub_21708A75C(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(a1);

  operator delete(v1);
}

BOOL sub_21708A784(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = v9;
  if (!v9)
  {
    uint64_t v5 = sub_2170A4138();
    std::operator+<char>();
    sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  return v4 != 0;
}

void sub_21708A858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21708A88C(pxrInternal__aapl__pxrReserved__ *a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, long long *a3)
{
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(&__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __dst = *a3;
    uint64_t v23 = *((void *)a3 + 2);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__dst);
  }
  if (v24)
  {
    long long __dst = 0uLL;
    uint64_t v23 = 0;
    (*(void (**)(void **__return_ptr))(*(void *)v24 + 24))(__p);
    uint64_t v6 = __p[0];
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
    BOOL v8 = sub_21708AB54(v7, a2, (uint64_t)v6, v7, 0, (uint64_t)&__dst);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
    if (!v8)
    {
      uint64_t v9 = sub_2170A4138();
      std::operator+<char>();
      unint64_t v10 = std::string::append(&v18, ", error ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (v23 >= 0) {
        p_dst = (const std::string::value_type *)&__dst;
      }
      else {
        p_dst = (const std::string::value_type *)__dst;
      }
      if (v23 >= 0) {
        std::string::size_type v13 = HIBYTE(v23);
      }
      else {
        std::string::size_type v13 = *((void *)&__dst + 1);
      }
      uint64_t v14 = std::string::append(&v19, p_dst, v13);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      std::string::size_type v21 = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      sub_21707FB4C((os_log_t *)v9, (uint64_t *)__p);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
  }
  else
  {
    uint64_t v16 = sub_2170A4138();
    std::operator+<char>();
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&__dst);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__dst);
    }
    BOOL v8 = 0;
  }
  if (v25) {
    sub_216784EC4(v25);
  }
  return v8;
}

void sub_21708AABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v24 - 57) < 0) {
    operator delete(*(void **)(v24 - 80));
  }
  float v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    sub_216784EC4(v26);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21708AB54(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, BOOL a4, uint64_t a5, uint64_t a6)
{
  BOOL v7 = a4;
  if (a4)
  {
    int v28 = 0x10000;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
    v44[1] = 0;
    v44[0] = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v42 = 0;
    uint64_t v43 = v44;
    v45[0] = v45;
    v45[1] = v45;
    v45[2] = 0;
    v46[0] = v46;
    v46[1] = v46;
    v46[2] = 0;
    v47[1] = 0;
    v47[0] = 0;
    v46[3] = v47;
    sub_217087D3C((uint64_t)v27);
    if (sub_2170A1230((uint64_t)v27, a3, v7))
    {
      MEMORY[0x21D4477E0](a6, "Aborting, unable to read JSON bitstream");
      BOOL v7 = 0;
    }
    else
    {
      sub_2170857E4((uint64_t)&v28, (uint64_t)v27);
      sub_216779094(&__p, ".usda");
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v23 = &v24;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v23, (uint64_t *)&v26);
      sub_2167877AC((uint64_t)&v23, v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v26);
      pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&__p, 0, &v22);
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
      }
      sub_2170519EC(&v20, (uint64_t *)&v22);
      sub_216779094(&__p, "/ReconstructedUsdMesh");
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v18, &__p);
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define(&v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = v21;
      if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      int v12 = sub_217080E20((uint64_t)&v28, (uint64_t)&v23);
      BOOL v7 = v12 == 0;
      if (v12)
      {
        MEMORY[0x21D4477E0](a6, "Aborting, unable to convert gcl mesh to usd mesh");
      }
      else
      {
        std::string::size_type v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v22);
        sub_216D16CFC((uint64_t)&__p, (uint64_t *)&v24, &v25);
        pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim(v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
        sub_21697C414(&__p.__r_.__value_.__r.__words[2]);
        if (__p.__r_.__value_.__l.__size_) {
          sub_216D16E0C((atomic_ullong *)__p.__r_.__value_.__l.__size_);
        }
        sub_216ABBA60((uint64_t *)&__p, (uint64_t *)&v26);
        pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(a2, (uint64_t *)&__p);
        std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_
          && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(std::string::size_type))(*(void *)v14 + 8))(v14);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v23);
      sub_216E10FB8(&v22);
      sub_216ABB798(&v26);
    }
    sub_217087DC0((uint64_t)v27);
    sub_21708B5C8((uint64_t)&v28);
  }
  else
  {
    MEMORY[0x21D4477E0](a6, "Aborting, empty bitstream");
  }
  return v7;
}

void sub_21708AEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, atomic_uint *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&a21);
  sub_216E10FB8(&a20);
  sub_216ABB798(&a26);
  sub_217087DC0((uint64_t)&a27);
  sub_21708B5C8((uint64_t)&a59);
  _Unwind_Resume(a1);
}

BOOL sub_21708B084(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  uint64_t v3 = *(void *)(a3 + 8);
  if (*(char *)(a3 + 23) >= 0)
  {
    uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
  }
  else
  {
    a3 = *(void *)a3;
    uint64_t v4 = v3;
  }
  BOOL v5 = sub_21708AB54(a1, a2, a3, v4, 0, (uint64_t)v10);
  if (!v5)
  {
    uint64_t v6 = sub_2170A4138();
    std::operator+<char>();
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&__p);
    if (v9 < 0) {
      operator delete(__p);
    }
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  return v5;
}

void sub_21708B128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21708B148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7) {
    BOOL v7 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v12);
  uint64_t v8 = sub_216979288(&v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, a2, a3, a4);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_21708B228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21708B240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v7) {
    BOOL v7 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v7, &v12);
  uint64_t v8 = sub_216979288(&v12);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 80))(v8, a2, a3, a4);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_21708B320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21708B338()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B76D4C((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7720E0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7720E0, (char *)0x70, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21708B418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_21708B464(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C772108;
  BOOL v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  BOOL v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_21708B4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21708B514(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_21708B53C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  sub_21708A668(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_21708B598(&v4);
}

void sub_21708B584(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_21708B598(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_21708B5C8(uint64_t a1)
{
  sub_21708B69C(a1 + 288, *(void **)(a1 + 296));
  sub_21687B9B4((void *)(a1 + 264));
  sub_21687B9B4((void *)(a1 + 240));
  sub_216812ED4(a1 + 216, *(void **)(a1 + 224));
  uint64_t v8 = (void **)(a1 + 192);
  sub_216782F20(&v8);
  uint64_t v8 = (void **)(a1 + 168);
  sub_217087F44(&v8);
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 120) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 88) = v4;
    operator delete(v4);
  }
  BOOL v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(void *)(a1 + 64) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_21708B69C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21708B69C(a1, *a2);
    sub_21708B69C(a1, a2[1]);
    sub_217089ACC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

atomic_uint **sub_21708B6F8(atomic_ullong *a1)
{
  uint64_t result = sub_21708B740();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_21708A37C((uint64_t)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_21708B740()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  sub_21708A400(v0);
  return v0;
}

void sub_21708B770(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21708B784(unsigned char *a1)
{
  if (*a1) {
    BOOL v1 = a1[1] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return 0;
  }
  uint64_t v3 = sub_2170A4138();
  sub_216779094(__p, "checkParameters: cannot have unifyIndices and preserveVertexOrder both true at the same time");
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 10;
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplGclCodec_CompressMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  return pxrInternal__aapl__pxrReserved__::AaplGclCodec_CompressMesh(a1, a2, a3, a4, a5, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::AaplGclCodec_CompressMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __int16 a6)
{
  *(_WORD *)size_t v82 = a6;
  sub_21708C278(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 3
      || (*(_WORD *)__p.__r_.__value_.__l.__data_ == 25447
        ? (BOOL v12 = *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 2) == 108)
        : (BOOL v12 = 0),
          !v12))
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_15;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 3) {
      goto LABEL_15;
    }
    if (LOWORD(__p.__r_.__value_.__l.__data_) != 25447 || __p.__r_.__value_.__s.__data_[2] != 108) {
      goto LABEL_15;
    }
  }
  sub_21708C278(a3, &v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v23 = v60.__r_.__value_.__l.__size_ != 3
       || *(_WORD *)v60.__r_.__value_.__l.__data_ != 25447
       || *(unsigned char *)(v60.__r_.__value_.__r.__words[0] + 2) != 108;
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v23 = SHIBYTE(v60.__r_.__value_.__r.__words[2]) != 3
       || LOWORD(v60.__r_.__value_.__l.__data_) != 25447
       || v60.__r_.__value_.__s.__data_[2] != 108;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v23) {
      goto LABEL_55;
    }
LABEL_15:
    uint64_t v13 = sub_2170A4138();
    sub_21708C278(a2, &v81);
    std::operator+<char>();
    std::string::size_type v14 = std::string::append(&v58, " refPath: ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_21708C278(a3, &__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    int v18 = std::string::append(&v60, (const std::string::value_type *)p_dst, size);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v13, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    return 5;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v23) {
    goto LABEL_15;
  }
LABEL_55:
  sub_21708C388((long long *)a2, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0 || __p.__r_.__value_.__l.__size_ < 0x100)
  {
    sub_21708C388((long long *)a3, &v60);
    BOOL v26 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0 && v60.__r_.__value_.__l.__size_ > 0xFF;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v26) {
        goto LABEL_68;
      }
    }
    else if (v26)
    {
      goto LABEL_68;
    }
    uint64_t v20 = sub_21708B784(v82);
    if (v20) {
      return v20;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0x10000;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v69 = 0;
    uint64_t v74 = 0;
    long long v75 = v76;
    v76[0] = 0;
    v76[1] = 0;
    v77[0] = v77;
    v77[1] = v77;
    v77[2] = 0;
    v78[0] = v78;
    v78[1] = v78;
    v78[2] = 0;
    v79[0] = 0;
    v79[1] = 0;
    v78[3] = v79;
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
    v81.__r_.__value_.__l.__size_ = (std::string::size_type)&v81;
    v81.__r_.__value_.__r.__words[2] = 0;
    uint64_t v20 = sub_21708C4F8(&__p, a1, a2, (uint64_t *)&v81, a4, a5, v82);
    if (!v20)
    {
      uint64_t v38 = *(void *)(a1 + 8);
      if (v38
        && (*(unsigned char *)(v38 + 57) & 8) == 0
        && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) != 0)
      {
        sub_216D16CFC((uint64_t)&v60, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
        char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v60, v39);
        sub_216D16AD8((uint64_t)&v60);
        if (IsDefined)
        {
          sub_216D16CFC((uint64_t)&v58, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v58, (uint64_t)&v60);
          sub_216D16AD8((uint64_t)&v58);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v60, v41))
          {
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v58, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v60, a3, (uint64_t)&v58, 1);
            for (std::string::size_type i = v81.__r_.__value_.__l.__size_; (std::string *)i != &v81; std::string::size_type i = *(void *)(i + 8))
            {
              if (*(char *)(i + 39) < 0) {
                sub_216778F24(&__dst, *(void **)(i + 16), *(void *)(i + 24));
              }
              else {
                std::string __dst = *(std::string *)(i + 16);
              }
              sub_216D16CFC((uint64_t)&v58, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v56);
              pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v58, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v56);
              if ((v56 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((v59 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58.__r_.__value_.__r.__words[2] + 1);
              sub_21697C414(&v58.__r_.__value_.__r.__words[2]);
              if (v58.__r_.__value_.__l.__size_) {
                sub_216D16E0C((atomic_ullong *)v58.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
            }
            memset(&__dst, 0, sizeof(__dst));
            sub_216812BD8((char *)&__dst, (long long *)v73, *((long long **)&v73 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v73 + 1) - v73) >> 3));
            if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)a1, (uint64_t)&v56);
              uint64_t v43 = v56;
              for (j = v57; v43 != j; uint64_t v43 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v43 + 24))
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v53, v43);
                long long v53 = &unk_26C76D230;
                std::string::size_type v46 = __dst.__r_.__value_.__l.__size_;
                uint64_t v45 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                sub_216D16CFC((uint64_t)&v58, &v54, &v55);
                uint64_t v47 = sub_216D563F8(&v58);
                if (v45 != (unsigned __int8 *)v46)
                {
                  int v48 = v47;
                  while ((pxrInternal__aapl__pxrReserved__::TfToken::operator==(v48, v45) & 1) == 0)
                  {
                    v45 += 24;
                    if (v45 == (unsigned __int8 *)v46)
                    {
                      uint64_t v45 = (unsigned __int8 *)v46;
                      break;
                    }
                  }
                }
                std::string::size_type v49 = __dst.__r_.__value_.__l.__size_;
                if ((v59 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58.__r_.__value_.__r.__words[2] + 1);
                sub_21697C414(&v58.__r_.__value_.__r.__words[2]);
                if (v58.__r_.__value_.__l.__size_) {
                  sub_216D16E0C((atomic_ullong *)v58.__r_.__value_.__l.__size_);
                }
                if (v45 != (unsigned __int8 *)v49)
                {
                  sub_216D16CFC((uint64_t)&v58, &v54, &v55);
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v52, "indices");
                  pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v58, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
                  if ((v52 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if ((v59 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58.__r_.__value_.__r.__words[2] + 1);
                  sub_21697C414(&v58.__r_.__value_.__r.__words[2]);
                  if (v58.__r_.__value_.__l.__size_) {
                    sub_216D16E0C((atomic_ullong *)v58.__r_.__value_.__l.__size_);
                  }
                }
                pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v53);
              }
              v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
              sub_216F50D48((void ***)&v58);
            }
            v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
            sub_216782F20((void ***)&v58);
            uint64_t v20 = 0;
          }
          else
          {
            long long v51 = sub_2170A4138();
            sub_216779094(&v58, "Invalid references!");
            sub_21707FB4C((os_log_t *)v51, (uint64_t *)&v58);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            uint64_t v20 = 255;
          }
          sub_21708C974((uint64_t)&v60);
          goto LABEL_137;
        }
        long long v50 = sub_2170A4138();
        sub_216779094(&v60, "Invalid prim!");
      }
      else
      {
        long long v50 = sub_2170A4138();
        sub_216779094(&v60, "Invalid mesh!");
      }
      sub_21707FB4C((os_log_t *)v50, (uint64_t *)&v60);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = 255;
    }
LABEL_137:
    sub_21687B9B4(&v81);
    sub_21708B5C8((uint64_t)&__p);
    return v20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_68:
  long long v27 = sub_2170A4138();
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v28 = *(void *)(a2 + 8);
  }
  std::to_string(&v81, v28);
  long long v29 = std::string::insert(&v81, 0, "AaplGclCodec_CompressMesh: File name too long! filename: ");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  long long v31 = std::string::append(&v58, " refPath: ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) >= 0) {
    unint64_t v33 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v33 = *(void *)(a3 + 8);
  }
  std::to_string(&__dst, v33);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v34 = &__dst;
  }
  else {
    long long v34 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v36 = std::string::append(&v60, (const std::string::value_type *)v34, v35);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v27, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  return 6;
}

void sub_21708C0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a17 = (void *)(v36 - 160);
  sub_216782F20((void ***)&a17);
  sub_21708C974((uint64_t)&a24);
  sub_21687B9B4((void *)(v36 - 128));
  sub_21708B5C8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_21708C278(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_216778F24(&__str, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  char v5 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v6 = v5[size--];
    if (v6 == 46)
    {
      if (size != -1)
      {
        std::string::basic_string(&v8, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v8;
        std::string::size_type v7 = v8.__r_.__value_.__r.__words[2];
        *(_OWORD *)a2 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
        a2[2] = v7;
        return;
      }
      break;
    }
  }
  sub_216779094(a2, "");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_21708C368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21708C388@<D0>(long long *a1@<X0>, std::string *a2@<X8>)
{
  if (*((char *)a1 + 23) < 0)
  {
    sub_216778F24(a2, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long v3 = *a1;
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *a1;
    a2->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
  }
  uint64_t v4 = 0;
  int v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v6 = v5 < 0;
  std::string::size_type v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v5 >= 0) {
    std::string::size_type v7 = a2;
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v9 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  while (size != v4)
  {
    int v10 = *(unsigned __int8 *)(v9 + size);
    ++v4;
    --v9;
    if (v10 == 47)
    {
      if (size + 1 != v4)
      {
        std::string::size_type v11 = size - v4;
        if (v4 == 1)
        {
          std::string::basic_string(&v18, a2, 0, v11, (std::allocator<char> *)&v19);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *(void *)&long long v3 = v18.__r_.__value_.__r.__words[0];
          *a2 = v18;
          int v12 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          BOOL v13 = v12 < 0;
          std::string::size_type v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
          if (v12 >= 0) {
            std::string::size_type v14 = a2;
          }
          std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if (v13) {
            std::string::size_type size = a2->__r_.__value_.__l.__size_;
          }
          uint64_t v15 = (uint64_t)&v14[-1].__r_.__value_.__r.__words[2] + 7;
          std::string::size_type v11 = size;
          while (v11)
          {
            int v16 = *(unsigned __int8 *)(v15 + v11--);
            if (v16 == 47) {
              goto LABEL_22;
            }
          }
        }
        else
        {
LABEL_22:
          if (size && v11 != -1)
          {
            std::string::basic_string(&v18, a2, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(a2->__r_.__value_.__l.__data_);
            }
            *(void *)&long long v3 = v18.__r_.__value_.__r.__words[0];
            *a2 = v18;
          }
        }
      }
      return *(double *)&v3;
    }
  }
  return *(double *)&v3;
}

void sub_21708C4D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21708C4F8(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, unsigned __int8 *a7)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v11 = sub_21707DF8C((uint64_t)a1, a2, a5);
  if (!v11)
  {
    uint64_t v12 = *a7 ? sub_217081CFC((uint64_t)a1) : sub_21708376C((uint64_t)a1);
    uint64_t v11 = v12;
    if (!v12)
    {
      if (sub_21708179C((uint64_t)a1))
      {
        if (*a1)
        {
          unint64_t v28 = 0;
          long long v29 = 0;
          uint64_t v30 = 0;
          uint64_t v11 = sub_2170842C0((uint64_t)a1, (uint64_t)&v28, a4, a6, a7);
          if (!v11)
          {
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            uint64_t v11 = sub_217087158((uint64_t)a1, (uint64_t)&v25);
            if (!v11)
            {
              sub_21708DC40((uint64_t)v31);
              sub_21708DD60(v31);
              if (*(_DWORD *)&v33[*((void *)v31[0] - 3)])
              {
                BOOL v13 = sub_2170A4138();
                std::operator+<char>();
                sub_21707FB4C((os_log_t *)v13, (uint64_t *)&__p);
                if (v24 < 0) {
                  operator delete(__p);
                }
                uint64_t v11 = 400;
              }
              else
              {
                sub_21679A150(&__p, 0x10uLL);
                uint64_t v15 = __p;
                *(void *)std::string __p = 1246511943;
                _OWORD v15[2] = 1281;
                int v16 = HIBYTE(v27);
                if (v27 < 0) {
                  int v16 = v26;
                }
                void v15[3] = v23 - __p + v16;
                std::ostream::write();
                if (*(_DWORD *)&v33[*((void *)v31[0] - 3)]
                  || (std::ostream::write(), *(_DWORD *)&v33[*((void *)v31[0] - 3)])
                  || (std::ostream::write(), *(_DWORD *)&v33[*((void *)v31[0] - 3)]))
                {
                  uint64_t v17 = sub_2170A4138();
                  std::operator+<char>();
                  sub_21707FB4C((os_log_t *)v17, (uint64_t *)v20);
                  if (v21 < 0) {
                    operator delete(v20[0]);
                  }
                  uint64_t v11 = 403;
                }
                else
                {
                  sub_21708DDD8(v31);
                  if (*(_DWORD *)&v33[*((void *)v31[0] - 3)])
                  {
                    char v19 = sub_2170A4138();
                    std::operator+<char>();
                    sub_21707FB4C((os_log_t *)v19, (uint64_t *)v20);
                    if (v21 < 0) {
                      operator delete(v20[0]);
                    }
                    uint64_t v11 = 401;
                  }
                  else
                  {
                    uint64_t v11 = 0;
                  }
                }
                if (__p)
                {
                  BOOL v23 = __p;
                  operator delete(__p);
                }
              }
              sub_21708DE40(v31);
            }
            if (SHIBYTE(v27) < 0) {
              operator delete(v25);
            }
          }
          if (v28)
          {
            long long v29 = v28;
            operator delete(v28);
          }
        }
        else
        {
          std::string::size_type v14 = sub_2170A4138();
          sub_216779094(v31, "compress: invalid mesh");
          sub_21707FB4C((os_log_t *)v14, (uint64_t *)v31);
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          return 201;
        }
      }
      else
      {
        return 15;
      }
    }
  }
  return v11;
}

void sub_21708C8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21708DE40(&a24);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21708C974(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  long long v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_21708C9D0(const __CFString *a1, uint64_t a2)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding == -1) {
    return 0;
  }
  CFIndex v6 = MaximumSizeForEncoding + 1;
  std::string::size_type v7 = (char *)operator new[](MaximumSizeForEncoding + 1);
  uint64_t result = CFStringGetCString(a1, v7, v6, 0x8000100u);
  if (result)
  {
    sub_216779094(&v9, v7);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v9;
    *(void *)(a2 + 16) = v10;
    operator delete[](v7);
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::aaplUsdGclCodec::compressMesh(pxrInternal__aapl__pxrReserved__::aaplUsdGclCodec *this, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2, const __CFDictionary *a3, __CFDictionary *a4)
{
  sub_216779094(v108, "");
  value = 0;
  if (CFDictionaryGetValueIfPresent(a2, @"CompressedBitstreamPath", (const void **)&value))
  {
    if ((sub_21708C9D0((const __CFString *)value, (uint64_t)v108) & 1) == 0)
    {
      std::string::size_type v7 = sub_2170A4138();
      sub_216779094(&__p, "Invalid filename parameter");
      sub_21707FB4C((os_log_t *)v7, (uint64_t *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = 4;
      goto LABEL_151;
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&__p, (uint64_t *)this + 1, (_DWORD *)this + 4);
    long long v9 = sub_216D563F8(&__p);
    if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    if (*((char *)EmptyString + 23) >= 0) {
      size_t v11 = *((unsigned __int8 *)EmptyString + 23);
    }
    else {
      size_t v11 = EmptyString[1];
    }
    sub_2167940B4((uint64_t)&v77, v11 + 4);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v77;
    }
    else {
      uint64_t v12 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if (v11)
    {
      if (*((char *)EmptyString + 23) >= 0) {
        BOOL v13 = EmptyString;
      }
      else {
        BOOL v13 = (const void *)*EmptyString;
      }
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, ".gcl");
    if (SHIBYTE(v108[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108[0].__r_.__value_.__l.__data_);
    }
    v108[0] = v77;
    *((unsigned char *)&v77.__r_.__value_.__s + 23) = 0;
    v77.__r_.__value_.__s.__data_[0] = 0;
    if ((v79 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&__p.__r_.__value_.__r.__words[2]);
    if (__p.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)__p.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(v108[0].__r_.__value_.__r.__words[2]) < 0) {
    sub_216778F24(&__dst, v108[0].__r_.__value_.__l.__data_, v108[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v108[0];
  }
  if (CFDictionaryGetValueIfPresent(a2, @"ReferencePath", (const void **)&value)
    && (sub_21708C9D0((const __CFString *)value, (uint64_t)&__dst) & 1) == 0)
  {
    uint64_t v26 = sub_2170A4138();
    sub_216779094(&__p, "Invalid ref path parameter");
LABEL_63:
    sub_21707FB4C((os_log_t *)v26, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = 4;
    goto LABEL_149;
  }
  unsigned int valuePtr = 10;
  uint64_t v104 = 0;
  if (CFDictionaryGetValueIfPresent(a2, @"CompressionLevel", (const void **)&v104)
    && !CFNumberGetValue((CFNumberRef)v104, kCFNumberIntType, &valuePtr))
  {
    uint64_t v26 = sub_2170A4138();
    sub_216779094(&__p, "Invalid compression level parameter");
    goto LABEL_63;
  }
  __int16 v103 = 1;
  std::string v102 = 0;
  if (CFDictionaryGetValueIfPresent(a2, @"UnifyIndices", (const void **)&v102)) {
    LOBYTE(v103) = CFBooleanGetValue((CFBooleanRef)v102) != 0;
  }
  if (CFDictionaryGetValueIfPresent(a2, @"PreserveVertexOrdering", (const void **)&v102)) {
    HIBYTE(v103) = CFBooleanGetValue((CFBooleanRef)v102) != 0;
  }
  v101[0] = 0;
  v101[1] = 0;
  uint64_t v99 = 0;
  uint64_t v100 = v101;
  if (CFDictionaryGetValueIfPresent(a2, @"AttributeDescription", (const void **)&v99))
  {
    unint64_t Count = CFDictionaryGetCount((CFDictionaryRef)v99);
    uint64_t v15 = Count;
    if (Count >> 61) {
      size_t v16 = -1;
    }
    else {
      size_t v16 = 8 * Count;
    }
    uint64_t v17 = (const void **)operator new[](v16);
    uint64_t v67 = this;
    std::string v18 = (const void **)operator new[](v16);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v99, v17, v18);
    if (v15 >= 1)
    {
      uint64_t v19 = 0;
      while (1)
      {
        memset(&__p, 0, sizeof(__p));
        CFDataRef v20 = (const __CFData *)v18[v19];
        int v21 = sub_21708C9D0((const __CFString *)v17[v19], (uint64_t)&__p);
        char v22 = v21;
        if (v21)
        {
          WORD2(buffer.__r_.__value_.__r.__words[0]) = 0;
          LODWORD(buffer.__r_.__value_.__l.__data_) = 0;
          v109.length = CFDataGetLength(v20);
          v109.location = 0;
          CFDataGetBytes(v20, v109, (UInt8 *)&buffer);
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          BOOL v23 = sub_217088108((uint64_t **)&v100, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v77);
          *((_DWORD *)v23 + 14) = buffer.__r_.__value_.__l.__data_;
          *((_WORD *)v23 + 30) = WORD2(buffer.__r_.__value_.__r.__words[0]);
        }
        else
        {
          char v24 = sub_2170A4138();
          sub_216779094(&v77, "Invalid attribute description parameter");
          sub_21707FB4C((os_log_t *)v24, (uint64_t *)&v77);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          operator delete[](v17);
          operator delete[](v18);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v22 & 1) == 0) {
          break;
        }
        if (v15 == ++v19) {
          goto LABEL_52;
        }
      }
      uint64_t v8 = 4;
      goto LABEL_148;
    }
LABEL_52:
    operator delete[](v17);
    operator delete[](v18);
    this = v67;
  }
  sub_21708C278((uint64_t)v108, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 3
      || (*(_WORD *)__p.__r_.__value_.__l.__data_ == 25447
        ? (BOOL v27 = *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 2) == 108)
        : (BOOL v27 = 0),
          !v27))
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_72;
    }
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 3) {
      goto LABEL_72;
    }
    if (LOWORD(__p.__r_.__value_.__l.__data_) != 25447 || __p.__r_.__value_.__s.__data_[2] != 108) {
      goto LABEL_72;
    }
  }
  sub_21708C278((uint64_t)&__dst, &v77);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v36 = v77.__r_.__value_.__l.__size_ != 3
       || *(_WORD *)v77.__r_.__value_.__l.__data_ != 25447
       || *(unsigned char *)(v77.__r_.__value_.__r.__words[0] + 2) != 108;
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v36 = SHIBYTE(v77.__r_.__value_.__r.__words[2]) != 3
       || LOWORD(v77.__r_.__value_.__l.__data_) != 25447
       || v77.__r_.__value_.__s.__data_[2] != 108;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v36) {
      goto LABEL_112;
    }
LABEL_72:
    unint64_t v28 = sub_2170A4138();
    sub_21708C278((uint64_t)v108, &v98);
    std::operator+<char>();
    long long v29 = std::string::append(&buffer, " refPath: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    sub_21708C278((uint64_t)&__dst, &v97);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v31 = &v97;
    }
    else {
      long long v31 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v97.__r_.__value_.__l.__size_;
    }
    unint64_t v33 = std::string::append(&v77, (const std::string::value_type *)v31, size);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v28, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buffer.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buffer.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = 5;
    goto LABEL_148;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v36) {
    goto LABEL_72;
  }
LABEL_112:
  sub_21708C388((long long *)v108, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0 && __p.__r_.__value_.__l.__size_ >= 0x100)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_125:
    long long v40 = sub_2170A4138();
    if ((v108[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v41 = HIBYTE(v108[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v41 = v108[0].__r_.__value_.__l.__size_;
    }
    std::to_string(&v98, v41);
    uint64_t v42 = std::string::insert(&v98, 0, "AaplGclCodec_CompressMesh: File name too long! filename: ");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    buffer.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buffer.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string v44 = std::string::append(&buffer, " refPath: ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = __dst.__r_.__value_.__l.__size_;
    }
    std::to_string(&v97, v46);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v47 = &v97;
    }
    else {
      uint64_t v47 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v97.__r_.__value_.__l.__size_;
    }
    std::string::size_type v49 = std::string::append(&v77, (const std::string::value_type *)v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v40, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buffer.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buffer.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = 6;
    goto LABEL_148;
  }
  sub_21708C388((long long *)&__dst, &v77);
  BOOL v39 = (v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0 && v77.__r_.__value_.__l.__size_ > 0xFF;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v39) {
      goto LABEL_125;
    }
  }
  else if (v39)
  {
    goto LABEL_125;
  }
  uint64_t v8 = sub_21708B784(&v103);
  if (!v8)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 0x10000;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    uint64_t v86 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = v93;
    v93[0] = 0;
    v93[1] = 0;
    v94[0] = v94;
    v94[1] = v94;
    uint64_t v94[2] = 0;
    v95[0] = v95;
    v95[1] = v95;
    v95[2] = 0;
    v96[0] = 0;
    v96[1] = 0;
    v95[3] = v96;
    v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
    v98.__r_.__value_.__l.__size_ = (std::string::size_type)&v98;
    v98.__r_.__value_.__r.__words[2] = 0;
    uint64_t v8 = sub_21708C4F8(&__p, (uint64_t)this, (uint64_t)v108, (uint64_t *)&v98, (uint64_t)&v100, valuePtr, (unsigned __int8 *)&v103);
    if (!v8)
    {
      uint64_t v52 = *((void *)this + 1);
      if (v52
        && (*(unsigned char *)(v52 + 57) & 8) == 0
        && ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::aaplUsdGclCodec *))(*(void *)this + 32))(this) & 1) != 0)
      {
        sub_216D16CFC((uint64_t)&v77, (uint64_t *)this + 1, (_DWORD *)this + 4);
        char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v77, v53);
        sub_216D16AD8((uint64_t)&v77);
        if (IsDefined)
        {
          uint64_t v68 = a3;
          sub_216D16CFC((uint64_t)&buffer, (uint64_t *)this + 1, (_DWORD *)this + 4);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&buffer, (uint64_t)&v77);
          sub_216D16AD8((uint64_t)&buffer);
          if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v77, v55))
          {
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&buffer, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference((pxrInternal__aapl__pxrReserved__::UsdObject *)&v77, (uint64_t)&__dst, (uint64_t)&buffer, 1);
            for (std::string::size_type i = v98.__r_.__value_.__l.__size_; (std::string *)i != &v98; std::string::size_type i = *(void *)(i + 8))
            {
              if (*(char *)(i + 39) < 0) {
                sub_216778F24(&v97, *(void **)(i + 16), *(void *)(i + 24));
              }
              else {
                std::string v97 = *(std::string *)(i + 16);
              }
              sub_216D16CFC((uint64_t)&buffer, (uint64_t *)this + 1, (_DWORD *)this + 4);
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v73);
              pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&buffer, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v73);
              if ((v73 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((v76 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&buffer.__r_.__value_.__r.__words[2] + 1);
              sub_21697C414(&buffer.__r_.__value_.__r.__words[2]);
              if (buffer.__r_.__value_.__l.__size_) {
                sub_216D16E0C((atomic_ullong *)buffer.__r_.__value_.__l.__size_);
              }
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v97.__r_.__value_.__l.__data_);
              }
            }
            memset(&v97, 0, sizeof(v97));
            sub_216812BD8((char *)&v97, (long long *)v90, *((long long **)&v90 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v90 + 1) - v90) >> 3));
            if (v97.__r_.__value_.__l.__size_ != v97.__r_.__value_.__r.__words[0])
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets(this, (uint64_t)&v73);
              std::string v58 = v73;
              for (j = v74; v58 != j; std::string v58 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v58 + 24))
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v70, v58);
                long long v70 = &unk_26C76D230;
                std::string::size_type v59 = v97.__r_.__value_.__l.__size_;
                std::string v60 = (unsigned __int8 *)v97.__r_.__value_.__r.__words[0];
                sub_216D16CFC((uint64_t)&buffer, &v71, &v72);
                std::string v61 = sub_216D563F8(&buffer);
                if (v60 != (unsigned __int8 *)v59)
                {
                  long long v62 = v61;
                  while ((pxrInternal__aapl__pxrReserved__::TfToken::operator==(v62, v60) & 1) == 0)
                  {
                    v60 += 24;
                    if (v60 == (unsigned __int8 *)v59)
                    {
                      std::string v60 = (unsigned __int8 *)v59;
                      break;
                    }
                  }
                }
                std::string::size_type v63 = v97.__r_.__value_.__l.__size_;
                if ((v76 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&buffer.__r_.__value_.__r.__words[2] + 1);
                sub_21697C414(&buffer.__r_.__value_.__r.__words[2]);
                if (buffer.__r_.__value_.__l.__size_) {
                  sub_216D16E0C((atomic_ullong *)buffer.__r_.__value_.__l.__size_);
                }
                if (v60 != (unsigned __int8 *)v63)
                {
                  sub_216D16CFC((uint64_t)&buffer, &v71, &v72);
                  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v69, "indices");
                  pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&buffer, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v69);
                  if ((v69 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  sub_216D16AD8((uint64_t)&buffer);
                }
                pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v70);
              }
              buffer.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
              sub_216F50D48((void ***)&buffer);
            }
            if (v68)
            {
              if (CFDictionaryContainsKey(a2, @"DumpOrderingInfo"))
              {
                CFBooleanRef v64 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"DumpOrderingInfo");
                if (v64)
                {
                  if (CFBooleanGetValue(v64)) {
                    sub_21708DA28((uint64_t)&__p, v68);
                  }
                }
              }
            }
            buffer.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
            sub_216782F20((void ***)&buffer);
            uint64_t v8 = 0;
          }
          else
          {
            long long v66 = sub_2170A4138();
            sub_216779094(&buffer, "Invalid references!");
            sub_21707FB4C((os_log_t *)v66, (uint64_t *)&buffer);
            if (SHIBYTE(buffer.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buffer.__r_.__value_.__l.__data_);
            }
            uint64_t v8 = 255;
          }
          sub_21708C974((uint64_t)&v77);
          goto LABEL_202;
        }
        long long v65 = sub_2170A4138();
        sub_216779094(&v77, "Invalid prim!");
      }
      else
      {
        long long v65 = sub_2170A4138();
        sub_216779094(&v77, "Invalid mesh!");
      }
      sub_21707FB4C((os_log_t *)v65, (uint64_t *)&v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = 255;
    }
LABEL_202:
    sub_21687B9B4(&v98);
    sub_21708B5C8((uint64_t)&__p);
  }
LABEL_148:
  sub_21678A498((uint64_t)&v100, v101[0]);
LABEL_149:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_151:
  if (SHIBYTE(v108[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108[0].__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_21708D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *p_p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  p_p = &__p;
  sub_216782F20((void ***)&p_p);
  sub_21708C974((uint64_t)&a23);
  sub_21687B9B4((void *)(v67 - 248));
  sub_21708B5C8((uint64_t)&a27);
  sub_21678A498(v67 - 216, *(char **)(v67 - 208));
  if (*(char *)(v67 - 137) < 0) {
    operator delete(*(void **)(v67 - 160));
  }
  if (*(char *)(v67 - 105) < 0) {
    operator delete(*(void **)(v67 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21708DA28(uint64_t a1, __CFDictionary *a2)
{
  v25[0] = 0;
  v25[1] = 0;
  char v24 = (uint64_t *)v25;
  if ((uint64_t **)(a1 + 288) == &v24
    || (sub_21708E2B4(&v24, *(long long **)(a1 + 288), (long long *)(a1 + 296)), long long v3 = v24, v24 == (uint64_t *)v25))
  {
LABEL_25:
    uint64_t v16 = 0;
  }
  else
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v5 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
    while (1)
    {
      sub_21708E5DC(__dst, (long long *)v3 + 2);
      Mutable = CFArrayCreateMutable(v4, (v23 - (unsigned char *)v22) >> 2, v5);
      if (Mutable)
      {
        std::string::size_type v7 = v22;
        uint64_t v8 = v23;
        while (v7 != v8)
        {
          LODWORD(__p[0]) = 0;
          LODWORD(__p[0]) = *v7;
          CFNumberRef v9 = CFNumberCreate(v4, kCFNumberIntType, __p);
          CFArrayAppendValue(Mutable, v9);
          ++v7;
        }
        uint64_t v10 = v21 >= 0 ? (const char *)__dst : (const char *)__dst[0];
        CFStringRef v11 = CFStringCreateWithCString(v4, v10, 0x8000100u);
        CFDictionaryAddValue(a2, v11, Mutable);
      }
      else
      {
        uint64_t v12 = sub_2170A4138();
        sub_216779094(__p, "Invalid reordering info!");
        sub_21707FB4C((os_log_t *)v12, (uint64_t *)__p);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v22)
      {
        BOOL v23 = v22;
        operator delete(v22);
      }
      if (v21 < 0) {
        operator delete(__dst[0]);
      }
      if (!Mutable) {
        break;
      }
      BOOL v13 = (uint64_t *)v3[1];
      if (v13)
      {
        do
        {
          std::string::size_type v14 = v13;
          BOOL v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string::size_type v14 = (uint64_t *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          long long v3 = v14;
        }
        while (!v15);
      }
      long long v3 = v14;
      if (v14 == (uint64_t *)v25) {
        goto LABEL_25;
      }
    }
    uint64_t v16 = 256;
  }
  sub_21708B69C((uint64_t)&v24, v25[0]);
  return v16;
}

void sub_21708DC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

uint64_t sub_21708DC40(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_26C772178;
  uint64_t v2 = a1 + 24;
  *(void *)a1 = &unk_26C772290;
  *(void *)(a1 + 432) = &unk_26C7722B8;
  std::ios_base::init((std::ios_base *)(a1 + 432), (void *)(a1 + 24));
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  *(void *)a1 = &unk_26C772150;
  *(void *)(a1 + 432) = &unk_26C7721A0;
  *(void *)(a1 + 16) = &unk_26C772178;
  MEMORY[0x21D447900](v2);
  return a1;
}

void sub_21708DD30(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](v1);
  _Unwind_Resume(a1);
}

void sub_21708DD60(void *a1)
{
  uint64_t v2 = std::filebuf::open();
  long long v3 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  if (v2) {
    std::ios_base::iostate v4 = 0;
  }
  else {
    std::ios_base::iostate v4 = v3->__rdstate_ | 4;
  }

  std::ios_base::clear(v3, v4);
}

void sub_21708DDD8(void *a1)
{
  if (!std::filebuf::close())
  {
    uint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    std::ios_base::iostate v3 = v2->__rdstate_ | 4;
    std::ios_base::clear(v2, v3);
  }
}

void *sub_21708DE40(void *a1)
{
  *a1 = &unk_26C772150;
  uint64_t v2 = a1 + 54;
  a1[54] = &unk_26C7721A0;
  a1[2] = &unk_26C772178;
  MEMORY[0x21D447910](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](v2);
  return a1;
}

uint64_t sub_21708DEE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21708DF28(void *a1)
{
  *(a1 - 2) = &unk_26C772150;
  a1[52] = &unk_26C7721A0;
  *a1 = &unk_26C772178;
  MEMORY[0x21D447910](a1 + 1);
  std::iostream::~basic_iostream();

  JUMPOUT(0x21D447E60);
}

void sub_21708DFCC(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  *uint64_t v1 = &unk_26C772150;
  v1[54] = &unk_26C7721A0;
  v1[2] = &unk_26C772178;
  MEMORY[0x21D447910](v1 + 3);
  std::iostream::~basic_iostream();

  JUMPOUT(0x21D447E60);
}

void sub_21708E08C(void *a1)
{
  *a1 = &unk_26C772150;
  uint64_t v2 = a1 + 54;
  a1[54] = &unk_26C7721A0;
  a1[2] = &unk_26C772178;
  MEMORY[0x21D447910](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](v2);

  operator delete(a1);
}

void sub_21708E140(void *a1)
{
  uint64_t v1 = a1 - 2;
  *(a1 - 2) = &unk_26C772150;
  uint64_t v2 = a1 + 52;
  a1[52] = &unk_26C7721A0;
  *a1 = &unk_26C772178;
  MEMORY[0x21D447910](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](v2);

  operator delete(v1);
}

void sub_21708E1EC(void *a1)
{
  uint64_t v1 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  *uint64_t v1 = &unk_26C772150;
  v1[54] = &unk_26C7721A0;
  v1[2] = &unk_26C772178;
  MEMORY[0x21D447910](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](v1 + 54);

  operator delete(v1);
}

uint64_t **sub_21708E2B4(uint64_t **result, long long *a2, long long *a3)
{
  int v5 = result;
  if (result[2])
  {
    CFIndex v6 = *result;
    std::string::size_type v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    uint64_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        CFNumberRef v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_21708E444((uint64_t)v18, (const std::string *)(v9 + 2));
          uint64_t v10 = (uint64_t **)sub_216799DAC((uint64_t)v5, v18, v17 + 4);
          sub_21677B358(v5, v18[0], v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_216799E28((uint64_t)v16);
          }
          CFStringRef v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              CFStringRef v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              CFNumberRef v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          CFNumberRef v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_21708E494((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_21708E4EC(v5, a2 + 2);
      BOOL v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          std::string::size_type v14 = v13;
          BOOL v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          std::string::size_type v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_21708E430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21708E494((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21708E444(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  std::ios_base::iostate v4 = *(char **)(a1 + 8);
  if (v4 != (char *)&a2[1]) {
    sub_216825D78(v4, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 2);
  }
  return a1;
}

uint64_t sub_21708E494(uint64_t a1)
{
  sub_21708B69C(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    std::ios_base::iostate v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        std::ios_base::iostate v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_21708B69C(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_21708E4EC(uint64_t **a1, long long *a2)
{
  sub_21708E570((uint64_t)a1, a2, (uint64_t)v7);
  std::ios_base::iostate v3 = (uint64_t **)sub_216799DAC((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_21677B358(a1, v6, v3, v7[0]);
  std::ios_base::iostate v4 = v7[0];
  v7[0] = 0;
  sub_217089A74((uint64_t)v7, 0);
  return v4;
}

void sub_21708E558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217089A74((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_21708E570@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_21708E5DC(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21708E5C4(_Unwind_Exception *a1)
{
  sub_217089A74(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_21708E5DC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_216825C04(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  return __dst;
}

void sub_21708E648(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21708E664()
{
  sub_216779094(v5, "AAPL_GCL_CODEC_MESH");
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772330, 0, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v0 = sub_21708E78C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "AAPL_GCL_CODEC_MESH", "converting mesh");
  sub_216779094(v5, "AAPL_GCL_CODEC_MESH_ENCODER");
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772330, 1, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v1 = sub_21708E78C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "AAPL_GCL_CODEC_MESH_ENCODER", "encoding mesh");
}

void sub_21708E75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21708E78C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798D100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798D100))
  {
    uint64_t v1 = operator new(8uLL);
    *uint64_t v1 = 0;
    qword_26798D0F8 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798D100);
  }
  return qword_26798D0F8;
}

void sub_21708E7F0(_Unwind_Exception *a1)
{
}

void sub_21708E808()
{
  sub_216779094(v2, "GclCodecErrorCode::OK");
  sub_216779094(__p, "No issue found!");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::INVALID_PARAMETER");
  sub_216779094(__p, "Invalid parameter");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::WRONG_OUTPUT_FILE_EXTENSION");
  sub_216779094(__p, "Output file needs to be a .gcl");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::FILENAME_OR_REFPATH_TOO_LONG");
  sub_216779094(__p, "filename and refPath parameters should be limited to 255 characters");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::PARAMETER_ERROR_UNIFY_AND_ORDER");
  sub_216779094(__p, "Parameters unify indices and preserve vertex order cannot be both set to true");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 10, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_PRESERVE_VERTEX_ORDER_UNIFICATION_REQUIRED");
  sub_216779094(__p, "Cannot preserve order, index unification is required");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 11, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_REORDER_DATA");
  sub_216779094(__p, "Cannot reorder data");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 12, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::INDEX_UNIFICATION_REQUIRED");
  sub_216779094(__p, "Input requires index unification : either provide unified indices (all attributes are vertex interpolated without indices specified), or set parameter unifyIndices to true (only if preserveVertexOrder is false).");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 13, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::MISSING_ATTRIBUTE_DESCRIPTION");
  sub_216779094(__p, "Missing description for an attribute");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 14, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNSUPPORTED_INTERPOLATION");
  sub_216779094(__p, "Interpolation is not supported by the compression plugin");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 15, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNSUPPORTED_USD_DATATYPE");
  sub_216779094(__p, "Data type is not supported by the compression plugin");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 16, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNSUPPORTED_ATTRIBUTE_NOT_PRIMVAR");
  sub_216779094(__p, "Non-primvar attribute not supported for compression");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 17, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNSUPPORTED_ATTRIBUTE_NO_VALUE");
  sub_216779094(__p, "Attribute with no value");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 18, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::FILE_NOT_FOUND");
  sub_216779094(__p, "File was not found");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 50, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::ASSET_SIZE_ERROR");
  sub_216779094(__p, "Asset as a size of zero or negative");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 51, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::ASSET_DATA_ACCESS_ERROR");
  sub_216779094(__p, "Data from asset cannot be accessed");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 52, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::INCOMPATIBLE_BITSTREAM");
  sub_216779094(__p, "Incompatible bitstream");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 100, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_COMPRESS_MESH");
  sub_216779094(__p, "Cannot compress mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 110, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNABLE_TO_GENERATE_HEADER");
  sub_216779094(__p, "Unable to generate header");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 111, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::QUANTIZATION_ERROR");
  sub_216779094(__p, "Quantization");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 112, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::INCOMPATIBLE_QUANTIZATION");
  sub_216779094(__p, "Incompatible quantization for given data type");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 113, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_DECOMPRESS_MESH");
  sub_216779094(__p, "Cannot decompress mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 150, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNABLE_TO_READ_HEADER");
  sub_216779094(__p, "Invalid bitstream header");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 151, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNSUPPORTED_MESH");
  sub_216779094(__p, "Unsupported mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 200, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::INVALID_MESH");
  sub_216779094(__p, "Invalid mesh");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 201, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::INDEX_UNIFICATION_ERROR");
  sub_216779094(__p, "Error during index unification");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 202, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::ATTRIBUTE_INVALID_VALUE_COUNT");
  sub_216779094(__p, "Number of attribute elements not compatible with geometry");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 210, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::ATTRIBUTE_INVALID_INDEX_COUNT");
  sub_216779094(__p, "Number of attribute indices not compatible with geometry");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 211, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::ATTRIBUTE_INVALID_INDEX_VALUE");
  sub_216779094(__p, "Attribute index out of bound");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 212, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::ATTRIBUTE_UNABLE_TO_READ");
  sub_216779094(__p, "Unable to read attribute data or indices (if any) from USD");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 213, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UPDATE_REFERENCE_ISSUE");
  sub_216779094(__p, "Unable to update reference list");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 255, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::UNABLE_TO_REPORT_COMPRESSION_RESULT");
  sub_216779094(__p, "Unable to report result info from compression");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 256, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::JSON_NOT_VALID");
  sub_216779094(__p, "Not a (valid) JSON file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 300, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::JSON_INCOMPATIBLE");
  sub_216779094(__p, "Not a GCL-USD compatible Json file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 301, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::JSON_VERSION_ISSUE");
  sub_216779094(__p, "JSON version issue");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 302, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::JSON_HEADER");
  sub_216779094(__p, "Error reading JSON header");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 303, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::JSON_MESH_UNKNOWN");
  sub_216779094(__p, "Mesh not present in JSON");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 310, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_OPEN_FILE");
  sub_216779094(__p, "Error when opening file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 400, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_CLOSE_FILE");
  sub_216779094(__p, "Error when closing file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 401, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_READ_FROM_FILE");
  sub_216779094(__p, "Error when reading from file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 402, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GclCodecErrorCode::CANNOT_WRITE_TO_FILE");
  sub_216779094(__p, "Error when writing to file");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C772340, 403, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_21708F644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21708F7B8(const std::string::value_type **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if ((*a1)[23] < 0)
  {
    uint64_t v6 = *((void *)v4 + 1);
    if (v6 == 6 && **(_DWORD **)v4 == 1852403568 && *(_WORD *)(*(void *)v4 + 4) == 29556) {
      return 1;
    }
    if (v6 != 16) {
      goto LABEL_16;
    }
    uint64_t v4 = *(const std::string::value_type **)v4;
    goto LABEL_12;
  }
  int v5 = *((unsigned __int8 *)*a1 + 23);
  if (v5 != 6)
  {
    if (v5 != 16) {
      goto LABEL_16;
    }
LABEL_12:
    CFNumberRef v9 = *(const std::string::value_type **)v4;
    uint64_t v8 = *((void *)v4 + 1);
    if (v9 != (const std::string::value_type *)0x6E69726564726F5FLL || v8 != 0x73656369646E4967) {
      goto LABEL_16;
    }
    return 1;
  }
  int v14 = *(_DWORD *)v4;
  int v15 = *((unsigned __int16 *)v4 + 2);
  if (v14 == 1852403568 && v15 == 29556) {
    return 1;
  }
LABEL_16:
  uint64_t v105 = sub_217090AE8((unsigned __int16 *)*a1 + 56);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v105)) {
    return 0;
  }
  *(void *)&long long v99 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v105);
  CPPuint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v99);
  if (*(char *)(CPPTypeName + 23) < 0)
  {
    sub_216778F24(&v103, *(void **)CPPTypeName, *(void *)(CPPTypeName + 8));
  }
  else
  {
    long long v13 = *(_OWORD *)CPPTypeName;
    uint64_t v104 = *(void *)(CPPTypeName + 16);
    long long v103 = v13;
  }
  uint64_t v17 = *a1;
  if (!(*a1)[148])
  {
    if (*((void *)v17 + 6) != *((void *)v17 + 7))
    {
      CFDataRef v20 = sub_2170A4138();
      std::operator+<char>();
      char v21 = std::string::append(&v96, "! ");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      BOOL v23 = std::string::append(&v97, "Indices size ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      *(void *)&v94[16] = *((void *)&v23->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v94 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v93, (uint64_t)(*((void *)*a1 + 7) - *((void *)*a1 + 6)) >> 2);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v93;
      }
      else {
        uint64_t v25 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v93.__r_.__value_.__l.__size_;
      }
      BOOL v27 = std::string::append((std::string *)v94, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v100 = v27->__r_.__value_.__r.__words[2];
      long long v99 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      sub_21707FB4C((os_log_t *)v20, (uint64_t *)&v99);
      if (SHIBYTE(v100) < 0) {
        operator delete((void *)v99);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if ((v94[23] & 0x80000000) != 0) {
        operator delete(*(void **)v94);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_256;
      }
      long long v29 = (void *)v96.__r_.__value_.__r.__words[0];
      goto LABEL_144;
    }
    sub_216D16CFC((uint64_t)&v99, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v97);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&v99, (uint64_t *)&v97, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v105, 0, (uint64_t)v94);
    if ((v97.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
    sub_21697C414(&v100);
    if (*((void *)&v99 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v99 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v94);
    sub_2170819D0((*a1)[136], (atomic_uint **)&v97);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v97);
    if ((v97.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v102 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
    sub_21697C414(&v100);
    if (*((void *)&v99 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v99 + 1));
    }
    if (*((_DWORD *)*a1 + 36))
    {
      if (sub_216855A40(&v103, "GfVec2i"))
      {
        BOOL v31 = sub_217092970((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec3i"))
      {
        BOOL v31 = sub_217092A98((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec4i"))
      {
        BOOL v31 = sub_217092BC0((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec2f"))
      {
        BOOL v31 = sub_217092CE8((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec3f"))
      {
        BOOL v31 = sub_217092E10((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec4f"))
      {
        BOOL v31 = sub_217092F38((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec2d"))
      {
        BOOL v31 = sub_217093060((uint64_t)v94, (uint64_t)a1);
      }
      else if (sub_216855A40(&v103, "GfVec3d"))
      {
        BOOL v31 = sub_217093188((uint64_t)v94, (uint64_t)a1);
      }
      else
      {
        if (!sub_216855A40(&v103, "GfVec4d"))
        {
LABEL_243:
          long long v78 = sub_2170A4138();
          std::operator+<char>();
          uint64_t v84 = std::string::append(&v96, " data for ");
          long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          int v86 = (*a1)[23];
          if (v86 >= 0) {
            long long v82 = *a1;
          }
          else {
            long long v82 = *(const std::string::value_type **)*a1;
          }
          if (v86 >= 0) {
            std::string::size_type v83 = *((unsigned __int8 *)*a1 + 23);
          }
          else {
            std::string::size_type v83 = *((void *)*a1 + 1);
          }
LABEL_249:
          long long v87 = std::string::append(&v97, v82, v83);
          long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          std::string::size_type v100 = v87->__r_.__value_.__r.__words[2];
          long long v99 = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v78, (uint64_t *)&v99);
          if (SHIBYTE(v100) < 0) {
            operator delete((void *)v99);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          sub_216D2EDA0((uint64_t)v94);
          goto LABEL_256;
        }
        BOOL v31 = sub_2170932B0((uint64_t)v94, (uint64_t)a1);
      }
      if (v31)
      {
LABEL_241:
        sub_216D2EDA0((uint64_t)v94);
LABEL_242:
        uint64_t v11 = 1;
        goto LABEL_257;
      }
      goto LABEL_243;
    }
    if (sub_216855A40(&v103, "float"))
    {
      BOOL v54 = sub_217092430((uint64_t)v94, (uint64_t)a1);
      goto LABEL_227;
    }
    if (sub_216855A40(&v103, "double"))
    {
      BOOL v54 = sub_217092510((uint64_t)v94, (uint64_t)a1);
      goto LABEL_227;
    }
    if (sub_216855A40(&v103, "int"))
    {
      BOOL v54 = sub_2170925F0((uint64_t)v94, (uint64_t)a1);
      goto LABEL_227;
    }
    if (sub_216855A40(&v103, "BOOL"))
    {
      BOOL v54 = sub_2170926D0((uint64_t)v94, (uint64_t)a1);
      goto LABEL_227;
    }
    if (!sub_216855A40(&v103, "uint8_t"))
    {
      if (sub_216855A40(&v103, "unsigned int"))
      {
        BOOL v54 = sub_217092890((uint64_t)v94, (uint64_t)a1);
        goto LABEL_227;
      }
      if (!sub_216855A40(&v103, "unsigned char"))
      {
LABEL_230:
        long long v78 = sub_2170A4138();
        std::operator+<char>();
        long long v79 = std::string::append(&v96, " data for ");
        long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        int v81 = (*a1)[23];
        if (v81 >= 0) {
          long long v82 = *a1;
        }
        else {
          long long v82 = *(const std::string::value_type **)*a1;
        }
        if (v81 >= 0) {
          std::string::size_type v83 = *((unsigned __int8 *)*a1 + 23);
        }
        else {
          std::string::size_type v83 = *((void *)*a1 + 1);
        }
        goto LABEL_249;
      }
    }
    BOOL v54 = sub_2170927B0((uint64_t)v94, (uint64_t)a1);
LABEL_227:
    if (v54)
    {
      if (*((_DWORD *)*a1 + 35) != 1)
      {
        std::string v77 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v94);
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(v77, *((_DWORD *)*a1 + 35));
        sub_216F45190((uint64_t)&v99);
      }
      goto LABEL_241;
    }
    goto LABEL_230;
  }
  if (*((void *)v17 + 7) != *((void *)v17 + 6) || *((unsigned __int8 *)v17 + 136) - 3 <= 1)
  {
    sub_216D16CFC((uint64_t)&v97, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v94, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v97);
    *(void *)&v94[24] = 0;
    *(void *)uint64_t v94 = &unk_26C76D128;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v96);
    v93.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v94, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v105, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v93, -1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99);
    if ((v93.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v96.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v96.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)v94);
    if ((v98 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v97.__r_.__value_.__r.__words[2]);
    if (v97.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v97.__r_.__value_.__l.__size_);
    }
    if (*((_DWORD *)*a1 + 36))
    {
      if (v104 < 0)
      {
        if (*((void *)&v103 + 1) != 7) {
          goto LABEL_92;
        }
        char v19 = (int *)v103;
        if (*(_DWORD *)v103 != 1700161095 || *(_DWORD *)(v103 + 3) != 1764909925)
        {
LABEL_88:
          int v33 = *v19;
          int v34 = *(int *)((char *)v19 + 3);
          if (v33 == 1700161095 && v34 == 1764975461)
          {
            BOOL v36 = sub_217091AF0((uint64_t)&v99, (uint64_t)a1);
            goto LABEL_183;
          }
LABEL_92:
          if (sub_216855A40(&v103, "GfVec4i"))
          {
            BOOL v36 = sub_217091C18((uint64_t)&v99, (uint64_t)a1);
          }
          else if (sub_216855A40(&v103, "GfVec2f"))
          {
            BOOL v36 = sub_217091D40((uint64_t)&v99, (uint64_t)a1);
          }
          else if (sub_216855A40(&v103, "GfVec3f"))
          {
            BOOL v36 = sub_217091E68((uint64_t)&v99, (uint64_t)a1);
          }
          else if (sub_216855A40(&v103, "GfVec4f"))
          {
            BOOL v36 = sub_217091F90((uint64_t)&v99, (uint64_t)a1);
          }
          else if (sub_216855A40(&v103, "GfVec2d"))
          {
            BOOL v36 = sub_2170920B8((uint64_t)&v99, (uint64_t)a1);
          }
          else if (sub_216855A40(&v103, "GfVec3d"))
          {
            BOOL v36 = sub_2170921E0((uint64_t)&v99, (uint64_t)a1);
          }
          else
          {
            if (!sub_216855A40(&v103, "GfVec4d"))
            {
LABEL_194:
              std::string v61 = sub_2170A4138();
              std::operator+<char>();
              uint64_t v71 = std::string::append(&v96, " data for ");
              long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
              v97.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v72;
              v71->__r_.__value_.__l.__size_ = 0;
              v71->__r_.__value_.__r.__words[2] = 0;
              v71->__r_.__value_.__r.__words[0] = 0;
              int v73 = (*a1)[23];
              if (v73 >= 0) {
                long long v65 = (const std::string::value_type **)*a1;
              }
              else {
                long long v65 = *(const std::string::value_type ***)*a1;
              }
              if (v73 >= 0) {
                std::string::size_type v66 = *((unsigned __int8 *)*a1 + 23);
              }
              else {
                std::string::size_type v66 = *((void *)*a1 + 1);
              }
LABEL_200:
              uint64_t v74 = std::string::append(&v97, (const std::string::value_type *)v65, v66);
              long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
              *(void *)&v94[16] = *((void *)&v74->__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v94 = v75;
              v74->__r_.__value_.__l.__size_ = 0;
              v74->__r_.__value_.__r.__words[2] = 0;
              v74->__r_.__value_.__r.__words[0] = 0;
              sub_21707FB4C((os_log_t *)v61, (uint64_t *)v94);
              if ((v94[23] & 0x80000000) != 0) {
                operator delete(*(void **)v94);
              }
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v97.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v96.__r_.__value_.__l.__data_);
              }
              if ((v102 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((v101 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
              sub_21697C414(&v100);
              if (*((void *)&v99 + 1)) {
                sub_216D16E0C(*((atomic_ullong **)&v99 + 1));
              }
              goto LABEL_256;
            }
            BOOL v36 = sub_217092308((uint64_t)&v99, (uint64_t)a1);
          }
LABEL_183:
          if (v36) {
            goto LABEL_184;
          }
          goto LABEL_194;
        }
      }
      else
      {
        if (HIBYTE(v104) != 7) {
          goto LABEL_92;
        }
        if (v103 != 1700161095 || *(_DWORD *)((char *)&v103 + 3) != 1764909925)
        {
          char v19 = (int *)&v103;
          goto LABEL_88;
        }
      }
      BOOL v36 = sub_2170919C8((uint64_t)&v99, (uint64_t)a1);
      goto LABEL_183;
    }
    if (v104 < 0)
    {
      if (*((void *)&v103 + 1) != 5) {
        goto LABEL_110;
      }
      long long v30 = (long long *)v103;
    }
    else
    {
      if (HIBYTE(v104) != 5) {
        goto LABEL_110;
      }
      long long v30 = &v103;
    }
    int v50 = *(_DWORD *)v30;
    int v51 = *((unsigned __int8 *)v30 + 4);
    if (v50 == 1634692198 && v51 == 116)
    {
      BOOL v53 = sub_217091488((uint64_t)&v99, (uint64_t)a1);
      goto LABEL_165;
    }
LABEL_110:
    if (sub_216855A40(&v103, "double"))
    {
      BOOL v53 = sub_217091568((uint64_t)&v99, (uint64_t)a1);
      goto LABEL_165;
    }
    if (sub_216855A40(&v103, "int"))
    {
      BOOL v53 = sub_217091648((uint64_t)&v99, (uint64_t)a1);
      goto LABEL_165;
    }
    if (sub_216855A40(&v103, "BOOL"))
    {
      BOOL v53 = sub_217091728((uint64_t)&v99, (uint64_t)a1);
      goto LABEL_165;
    }
    if (!sub_216855A40(&v103, "uint8_t"))
    {
      if (sub_216855A40(&v103, "unsigned int"))
      {
        BOOL v53 = sub_2170918E8((uint64_t)&v99, (uint64_t)a1);
LABEL_165:
        if (v53)
        {
          int v60 = *((_DWORD *)*a1 + 35);
          if (v60 != 1) {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, v60);
          }
LABEL_184:
          uint64_t v67 = *((void *)*a1 + 6);
          uint64_t v68 = *((void *)*a1 + 7);
          if (v67 != v68)
          {
LABEL_185:
            std::string __dst = 0;
            memset(v94, 0, sizeof(v94));
            LODWORD(v96.__r_.__value_.__l.__data_) = 0;
            v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
            sub_216907A0C((unint64_t *)v94, (v68 - v67) >> 2, &v97);
            sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v94, v69, v70);
            memcpy(__dst, *((const void **)*a1 + 6), 4 * *(void *)v94);
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99);
            sub_2170819D0((*a1)[136], (atomic_uint **)&v97);
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v97);
            if ((v97.__r_.__value_.__s.__data_[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v97.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            sub_2168F83DC((uint64_t)v94);
LABEL_188:
            if ((v102 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v101 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
            sub_21697C414(&v100);
            if (*((void *)&v99 + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&v99 + 1));
            }
            goto LABEL_242;
          }
          int v76 = *((unsigned __int8 *)*a1 + 136);
          if (v76 == 3)
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v94, "varying");
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)v94);
          }
          else
          {
            if (v76 != 4) {
              goto LABEL_185;
            }
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)v94, "vertex");
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)v94);
          }
          if ((v94[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_188;
        }
        goto LABEL_175;
      }
      if (!sub_216855A40(&v103, "unsigned char"))
      {
LABEL_175:
        std::string v61 = sub_2170A4138();
        std::operator+<char>();
        long long v62 = std::string::append(&v96, " data for ");
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        int v64 = (*a1)[23];
        if (v64 >= 0) {
          long long v65 = (const std::string::value_type **)*a1;
        }
        else {
          long long v65 = *(const std::string::value_type ***)*a1;
        }
        if (v64 >= 0) {
          std::string::size_type v66 = *((unsigned __int8 *)*a1 + 23);
        }
        else {
          std::string::size_type v66 = *((void *)*a1 + 1);
        }
        goto LABEL_200;
      }
    }
    BOOL v53 = sub_217091808((uint64_t)&v99, (uint64_t)a1);
    goto LABEL_165;
  }
  long long v37 = sub_2170A4138();
  std::operator+<char>();
  uint64_t v38 = std::string::append(&v92, "! ");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  long long v40 = std::string::append(&v93, "Indices size ");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v91, (uint64_t)(*((void *)*a1 + 7) - *((void *)*a1 + 6)) >> 2);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v42 = &v91;
  }
  else {
    uint64_t v42 = (std::string *)v91.__r_.__value_.__r.__words[0];
  }
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = v91.__r_.__value_.__l.__size_;
  }
  std::string v44 = std::string::append(&v96, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v46 = std::string::append(&v97, " and interpolation ");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  *(void *)&v94[16] = *((void *)&v46->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v94 = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  sub_2170819D0((*a1)[136], (atomic_uint **)&v90);
  if ((v90 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v90 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v48);
  }
  int v55 = *((char *)EmptyString + 23);
  if (v55 >= 0) {
    std::string v56 = (const std::string::value_type *)EmptyString;
  }
  else {
    std::string v56 = (const std::string::value_type *)*EmptyString;
  }
  if (v55 >= 0) {
    std::string::size_type v57 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    std::string::size_type v57 = EmptyString[1];
  }
  std::string v58 = std::string::append((std::string *)v94, v56, v57);
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  std::string::size_type v100 = v58->__r_.__value_.__r.__words[2];
  long long v99 = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v37, (uint64_t *)&v99);
  if (SHIBYTE(v100) < 0) {
    operator delete((void *)v99);
  }
  if ((v90 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v94[23] & 0x80000000) != 0) {
    operator delete(*(void **)v94);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_256;
  }
  long long v29 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_144:
  operator delete(v29);
LABEL_256:
  uint64_t v11 = 0;
LABEL_257:
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  return v11;
}

void sub_2170907D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_216F45190(v44 - 128);
  sub_216D2EDA0((uint64_t)&a30);
  if (*(char *)(v44 - 57) < 0) {
    operator delete(*(void **)(v44 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217090AE8(unsigned __int16 *a1)
{
  v75[4] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798D120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798D120))
  {
    int v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v14) {
      int v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(__p, "BOOL");
    uint64_t v47 = *((void *)v14 + 56);
    int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v15) {
      int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v48, "uchar");
    v48[3] = *((void *)v15 + 57);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v16) {
      uint64_t v16 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v49, "int");
    uint64_t v49[3] = *((void *)v16 + 58);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v17) {
      uint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v50, "uint");
    v50[3] = *((void *)v17 + 60);
    std::string v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v18) {
      std::string v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v51, "float");
    v51[3] = *((void *)v18 + 64);
    char v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v19) {
      char v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v52, "double");
    v52[3] = *((void *)v19 + 65);
    CFDataRef v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v20) {
      CFDataRef v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v53, "int2");
    void v53[3] = *((void *)v20 + 70);
    char v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v21) {
      char v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v54, "int3");
    v54[3] = *((void *)v21 + 71);
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v22) {
      long long v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v55, "int4");
    v55[3] = *((void *)v22 + 72);
    BOOL v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v23) {
      BOOL v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v56, "float2");
    v56[3] = *((void *)v23 + 76);
    long long v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v24) {
      long long v24 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v57, "float3");
    uint64_t v57[3] = *((void *)v24 + 77);
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25) {
      uint64_t v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v58, "float4");
    v58[3] = *((void *)v25 + 78);
    uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v26) {
      uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v59, "double2");
    v59[3] = *((void *)v26 + 79);
    BOOL v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v27) {
      BOOL v27 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v60, "double3");
    v60[3] = *((void *)v27 + 80);
    long long v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v28) {
      long long v28 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v61, "double4");
    v61[3] = *((void *)v28 + 81);
    long long v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29) {
      long long v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v62, "point3f");
    v62[3] = *((void *)v29 + 83);
    long long v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v30) {
      long long v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v63, "point3d");
    v63[3] = *((void *)v30 + 84);
    BOOL v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v31) {
      BOOL v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v64, "normal3f");
    v64[3] = *((void *)v31 + 89);
    char v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v32) {
      char v32 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v65, "normal3d");
    v65[3] = *((void *)v32 + 90);
    int v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v33) {
      int v33 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v66, "vector3f");
    v66[3] = *((void *)v33 + 86);
    int v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v34) {
      int v34 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v67, "vector3d");
    v67[3] = *((void *)v34 + 87);
    std::string::size_type v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v35) {
      std::string::size_type v35 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v68, "color3f");
    v68[3] = *((void *)v35 + 92);
    BOOL v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v36) {
      BOOL v36 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v69, "color3d");
    v69[3] = *((void *)v36 + 93);
    long long v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v37) {
      long long v37 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v70, "color4f");
    v70[3] = *((void *)v37 + 95);
    uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v38) {
      uint64_t v38 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v71, "color4d");
    v71[3] = *((void *)v38 + 96);
    long long v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v39) {
      long long v39 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v72, "texCoord2f");
    v72[3] = *((void *)v39 + 105);
    long long v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v40) {
      long long v40 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v73, "texCoord2d");
    v73[3] = *((void *)v40 + 106);
    long long v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v41) {
      long long v41 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v74, "texCoord3f");
    v74[3] = *((void *)v41 + 108);
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v42) {
      uint64_t v42 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v75, "texCoord3d");
    v75[3] = *((void *)v42 + 109);
    sub_217096C74((uint64_t)&unk_26798D108, (const void **)__p, 29);
    uint64_t v43 = 116;
    do
    {
      if (*((char *)&__p[v43 - 1] - 1) < 0) {
        operator delete(__p[v43 - 4]);
      }
      v43 -= 4;
    }
    while (v43 * 8);
    __cxa_atexit((void (*)(void *))sub_217096C48, &unk_26798D108, &dword_216758000);
    __cxa_guard_release(&qword_26798D120);
  }
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a1 + 23) != 7)
    {
      uint64_t v2 = a1;
      if (*((unsigned char *)a1 + 23) != 10)
      {
LABEL_25:
        uint64_t v11 = sub_21678C2D8((uint64_t)&unk_26798D108, (const void **)a1);
        if ((_UNKNOWN *)v11 != &unk_26798D110) {
          return *(void *)(v11 + 56);
        }
        BOOL v12 = sub_2170A4138();
        std::operator+<char>();
        sub_21707FB4C((os_log_t *)v12, (uint64_t *)__p);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v44);
        return v44;
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)a1 != 1702258279 || *(_DWORD *)((char *)a1 + 3) != 1714643813) {
      goto LABEL_25;
    }
LABEL_30:
    long long v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13) {
      long long v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    return *((void *)v13 + 77);
  }
  uint64_t v3 = *((void *)a1 + 1);
  if (v3 == 7 && **(_DWORD **)a1 == 1702258279 && *(_DWORD *)(*(void *)a1 + 3) == 1714643813) {
    goto LABEL_30;
  }
  if (v3 != 10) {
    goto LABEL_25;
  }
  uint64_t v2 = *(unsigned __int16 **)a1;
LABEL_13:
  uint64_t v5 = *(void *)v2;
  int v6 = v2[4];
  if (v5 != 0x64726F6F63786574 || v6 != 26162) {
    goto LABEL_25;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8) {
    uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  return *((void *)v8 + 105);
}

void sub_217091418(_Unwind_Exception *a1)
{
}

BOOL sub_217091488(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_217091548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217091568(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_217091628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217091648(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_217091708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217091728(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_217098D3C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_2170917E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217091808(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_2170996D8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_2170918C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2170918E8(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_21709A044((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_2170919A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2170919C8(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v11, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v11[0])
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        char v7 = 1;
        do
        {
          char v8 = v7;
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v2, v3);
          char v7 = 0;
          *((_DWORD *)&v10 + v6) = *(_DWORD *)(v12 + 4 * (v5 | v6));
          uint64_t v6 = 1;
        }
        while ((v8 & 1) != 0);
        sub_216F5160C((uint64_t)v13, &v10);
        v5 += 2;
      }
      while (v5 < *(void *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>();
  }
  sub_2168F83DC((uint64_t)v11);
  sub_2168F83DC((uint64_t)v13);
  return v4 == 0;
}

void sub_217091AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217091AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 12; i += 4)
        {
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v9 + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_216F53124((uint64_t)v12, &v9);
        v6 += 3;
        v5 += 12;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217091BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217091C18(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 16; i += 4)
        {
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v10[-1] + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_21709A998((uint64_t)v12, &v9);
        v6 += 4;
        v5 += 16;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217091D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217091D40(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v11, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v11[0])
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        char v7 = 1;
        do
        {
          char v8 = v7;
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v2, v3);
          char v7 = 0;
          *((_DWORD *)&v10 + v6) = *(_DWORD *)(v12 + 4 * (v5 | v6));
          uint64_t v6 = 1;
        }
        while ((v8 & 1) != 0);
        sub_21709AB00((uint64_t)v13, &v10);
        v5 += 2;
      }
      while (v5 < *(void *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
  }
  sub_2168F83DC((uint64_t)v11);
  sub_2168F83DC((uint64_t)v13);
  return v4 == 0;
}

void sub_217091E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217091E68(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 12; i += 4)
        {
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v9 + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_217088FDC((uint64_t)v12, &v9);
        v6 += 3;
        v5 += 12;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217091F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217091F90(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 16; i += 4)
        {
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v10[-1] + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_21709AC68((uint64_t)v12, &v9);
        v6 += 4;
        v5 += 16;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_21709208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_2170920B8(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v11, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v11[0])
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        char v7 = 1;
        do
        {
          char v8 = v7;
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v2, v3);
          char v7 = 0;
          *((void *)&v11[-1] + v6) = *(void *)(v12 + 8 * (v5 | v6));
          uint64_t v6 = 1;
        }
        while ((v8 & 1) != 0);
        sub_2170706CC((uint64_t)v13, &v10);
        v5 += 2;
      }
      while (v5 < *(void *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>();
  }
  sub_2168F83DC((uint64_t)v11);
  sub_2168F83DC((uint64_t)v13);
  return v4 == 0;
}

void sub_2170921B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_2170921E0(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 24; i += 8)
        {
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(void *)((char *)&v9 + i) = *(void *)(v11 + v5 + i);
        }
        sub_21709ADD0((uint64_t)v12, &v9);
        v6 += 3;
        v5 += 24;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_2170922DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092308(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(void *)((char *)v9 + i) = *(void *)(v11 + v5 + i);
        }
        sub_21709AF68((uint64_t)v12, v9);
        v6 += 4;
        v5 += 32;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217092404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092430(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_2170924F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217092510(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_2170925D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2170925F0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_2170926B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2170926D0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_217098D3C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_217092790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2170927B0(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_2170996D8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_217092870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217092890(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  int v2 = sub_21709A044((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v7, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>();
  }
  uint64_t v3 = sub_2170A4138();
  std::operator+<char>();
  sub_21707FB4C((os_log_t *)v3, (uint64_t *)&__p);
  if (v6 < 0) {
    operator delete(__p);
  }
  sub_2168F83DC((uint64_t)v7);
  return v2 == 0;
}

void sub_217092950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_217092970(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v11, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v11[0])
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        char v7 = 1;
        do
        {
          char v8 = v7;
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v2, v3);
          char v7 = 0;
          *((_DWORD *)&v10 + v6) = *(_DWORD *)(v12 + 4 * (v5 | v6));
          uint64_t v6 = 1;
        }
        while ((v8 & 1) != 0);
        sub_216F5160C((uint64_t)v13, &v10);
        v5 += 2;
      }
      while (v5 < *(void *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>();
  }
  sub_2168F83DC((uint64_t)v11);
  sub_2168F83DC((uint64_t)v13);
  return v4 == 0;
}

void sub_217092A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092A98(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 12; i += 4)
        {
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v9 + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_216F53124((uint64_t)v12, &v9);
        v6 += 3;
        v5 += 12;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217092B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_2170983E8((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 16; i += 4)
        {
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v10[-1] + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_21709A998((uint64_t)v12, &v9);
        v6 += 4;
        v5 += 16;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217092CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v11, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v11[0])
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        char v7 = 1;
        do
        {
          char v8 = v7;
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v2, v3);
          char v7 = 0;
          *((_DWORD *)&v10 + v6) = *(_DWORD *)(v12 + 4 * (v5 | v6));
          uint64_t v6 = 1;
        }
        while ((v8 & 1) != 0);
        sub_21709AB00((uint64_t)v13, &v10);
        v5 += 2;
      }
      while (v5 < *(void *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
  }
  sub_2168F83DC((uint64_t)v11);
  sub_2168F83DC((uint64_t)v13);
  return v4 == 0;
}

void sub_217092DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092E10(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 12; i += 4)
        {
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v9 + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_217088FDC((uint64_t)v12, &v9);
        v6 += 3;
        v5 += 12;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217092F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217092F38(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217096E4C((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 16; i += 4)
        {
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(_DWORD *)((char *)&v10[-1] + i) = *(_DWORD *)(v11 + v5 + i);
        }
        sub_21709AC68((uint64_t)v12, &v9);
        v6 += 4;
        v5 += 16;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217093034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217093060(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  int v4 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v11, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v11[0])
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        char v7 = 1;
        do
        {
          char v8 = v7;
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v2, v3);
          char v7 = 0;
          *((void *)&v11[-1] + v6) = *(void *)(v12 + 8 * (v5 | v6));
          uint64_t v6 = 1;
        }
        while ((v8 & 1) != 0);
        sub_2170706CC((uint64_t)v13, &v10);
        v5 += 2;
      }
      while (v5 < *(void *)&v11[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>();
  }
  sub_2168F83DC((uint64_t)v11);
  sub_2168F83DC((uint64_t)v13);
  return v4 == 0;
}

void sub_21709315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_217093188(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 24; i += 8)
        {
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(void *)((char *)&v9 + i) = *(void *)(v11 + v5 + i);
        }
        sub_21709ADD0((uint64_t)v12, &v9);
        v6 += 3;
        v5 += 24;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_217093284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_2170932B0(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v4 = sub_217097884((uint64_t *)(*(void *)a2 + 24), (unint64_t *)v10, (unsigned char *)(*(void *)a2 + 72), (int *)(*(void *)a2 + 140));
  if (!v4)
  {
    if (*(void *)&v10[0])
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v2, v3);
          *(void *)((char *)v9 + i) = *(void *)(v11 + v5 + i);
        }
        sub_21709AF68((uint64_t)v12, v9);
        v6 += 4;
        v5 += 32;
      }
      while (v6 < *(void *)&v10[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>();
  }
  sub_2168F83DC((uint64_t)v10);
  sub_2168F83DC((uint64_t)v12);
  return v4 == 0;
}

void sub_2170933AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170933D8(uint64_t a1, const std::string *a2, uint64_t a3)
{
  int v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v5 < 0)
  {
    if (a2->__r_.__value_.__l.__size_ != 6) {
      goto LABEL_10;
    }
    uint64_t v6 = (int *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v6 = (int *)a2;
    if (v5 != 6) {
      goto LABEL_10;
    }
  }
  int v7 = *v6;
  int v8 = *((unsigned __int16 *)v6 + 2);
  if (v7 == 1852403568 && v8 == 29556) {
    return 1;
  }
LABEL_10:
  sub_216D16CFC((uint64_t)&v54, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v47);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v54, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47, (uint64_t)v60);
  if ((v47.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54.__r_.__value_.__r.__words[2] + 1);
  sub_21697C414(&v54.__r_.__value_.__r.__words[2]);
  if (v54.__r_.__value_.__l.__size_) {
    sub_216D16E0C((atomic_ullong *)v54.__r_.__value_.__l.__size_);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v60, v10))
  {
    uint64_t v11 = (char *)operator new(0xB0uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)uint64_t v11 = &unk_26C772000;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *((void *)v11 + 21) = 0;
    *(_OWORD *)(v11 + 24) = 0u;
    std::string v58 = v11 + 24;
    long long v59 = (std::__shared_weak_count *)v11;
    std::string::operator=((std::string *)v11 + 1, a2);
    uint64_t v12 = v58;
    v58[72] = *(unsigned char *)(a3 + 5);
    *((_DWORD *)v12 + 26) = *(_DWORD *)a3;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v47, "elementSize");
    v54.__r_.__value_.__r.__words[0] = 0;
    BOOL v13 = sub_21709B0D8((uint64_t)v60, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v47, (uint64_t)(v58 + 140), (uint64_t *)&v54);
    if ((v54.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v47.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v13) {
      *((_DWORD *)v58 + 35) = -1;
    }
    char IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v60, v14);
    v58[148] = IsPrimvar;
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v54, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v60);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v54, &v57);
    char v16 = sub_217086E14(&v57);
    v58[136] = v16;
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((__src & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v54.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v54.__r_.__value_.__r.__words[2]);
    if (v54.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v54.__r_.__value_.__l.__size_);
    }
    v47.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v60);
    v54.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v47);
    CPPuint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v54);
    if (*(char *)(CPPTypeName + 23) < 0)
    {
      sub_216778F24(__dst, *(void **)CPPTypeName, *(void *)(CPPTypeName + 8));
    }
    else
    {
      long long v18 = *(_OWORD *)CPPTypeName;
      uint64_t v53 = *(void *)(CPPTypeName + 16);
      *(_OWORD *)std::string __dst = v18;
    }
    v47.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v60);
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v47, (atomic_uint **)&v54);
    if ((v54.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v54.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__str, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v22 = *(_OWORD *)EmptyString;
      __str.__r_.__value_.__r.__words[2] = EmptyString[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
    }
    if ((v54.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&v54, &__str, 0, size - 2, (std::allocator<char> *)&v47);
    long long v24 = (void **)(v58 + 112);
    if (v58[135] < 0) {
      operator delete(*v24);
    }
    *(std::string *)long long v24 = v54;
    v54.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v60);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)&v54, &v49);
    if (v50 == 1)
    {
      unsigned __int32 v26 = v49.n128_u32[0];
      BOOL v27 = v58;
      *((_DWORD *)v58 + 36) = v49.n128_u32[0];
      if (*((_DWORD *)v27 + 35) == -1) {
        *((_DWORD *)v27 + 35) = v26;
      }
    }
    else
    {
      if (v50)
      {
        long long v30 = sub_2170A4138();
        std::operator+<char>();
        sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v54);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_136:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v53) < 0) {
            operator delete(__dst[0]);
          }
          if (v59) {
            sub_216784EC4(v59);
          }
          uint64_t v19 = 0;
          goto LABEL_143;
        }
        BOOL v31 = (void *)v54.__r_.__value_.__r.__words[0];
LABEL_135:
        operator delete(v31);
        goto LABEL_136;
      }
      uint64_t v25 = v58;
      *((_DWORD *)v58 + 36) = 0;
      if (*((_DWORD *)v25 + 35) == -1) {
        *((_DWORD *)v25 + 35) = 1;
      }
    }
    if (SHIBYTE(v53) < 0)
    {
      char v32 = __dst[1];
      if (__dst[1] == (void *)5 && *(_DWORD *)__dst[0] == 1634692198 && *((unsigned char *)__dst[0] + 4) == 116) {
LABEL_89:
      }
        sub_217094150();
      if (__dst[1] == (void *)6)
      {
        if (*(_DWORD *)__dst[0] == 1651863396 && *((_WORD *)__dst[0] + 2) == 25964) {
LABEL_103:
        }
          sub_217094234();
        char v32 = __dst[1];
      }
      if (v32 == (void *)3)
      {
        if (*(_WORD *)__dst[0] == 28265 && *((unsigned char *)__dst[0] + 2) == 116) {
          goto LABEL_104;
        }
        char v32 = __dst[1];
      }
      if (v32 != (void *)4) {
        goto LABEL_96;
      }
      long long v28 = (void **)__dst[0];
    }
    else
    {
      long long v28 = __dst;
      switch(HIBYTE(v53))
      {
        case 3:
          goto LABEL_55;
        case 4:
          break;
        case 5:
          if (LODWORD(__dst[0]) != 1634692198 || BYTE4(__dst[0]) != 116) {
            goto LABEL_96;
          }
          goto LABEL_89;
        case 6:
          if (LODWORD(__dst[0]) == 1651863396 && WORD2(__dst[0]) == 25964) {
            goto LABEL_103;
          }
          if (HIBYTE(v53) != 4)
          {
            if (HIBYTE(v53) != 3) {
              goto LABEL_96;
            }
LABEL_55:
            if (LOWORD(__dst[0]) != 28265 || BYTE2(__dst[0]) != 116)
            {
LABEL_96:
              if (sub_216855A40(__dst, "uint8_t")) {
                goto LABEL_97;
              }
              if (sub_216855A40(__dst, "unsigned int")) {
                sub_2170945C4();
              }
              if (sub_216855A40(__dst, "unsigned char")) {
LABEL_97:
              }
                sub_2170944E0();
              if (sub_216855A40(__dst, "GfVec2i")) {
                sub_2170946A8();
              }
              if (sub_216855A40(__dst, "GfVec3i")) {
                sub_217094854();
              }
              if (sub_216855A40(__dst, "GfVec4i")) {
                sub_217094A08();
              }
              if (sub_216855A40(__dst, "GfVec2f")) {
                sub_217094BBC();
              }
              if (sub_216855A40(__dst, "GfVec3f")) {
                sub_217094D70();
              }
              if (sub_216855A40(__dst, "GfVec4f")) {
                sub_217094F24();
              }
              if (sub_216855A40(__dst, "GfVec2d")) {
                sub_2170950D8();
              }
              if (sub_216855A40(__dst, "GfVec3d")) {
                sub_217095288();
              }
              if (sub_216855A40(__dst, "GfVec4d")) {
                sub_217095438();
              }
              uint64_t v38 = sub_2170A4138();
              std::operator+<char>();
              long long v39 = std::string::append(&__p, " data for ");
              long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              v47.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              int v41 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
              if (v41 >= 0) {
                uint64_t v42 = (const std::string::value_type *)a2;
              }
              else {
                uint64_t v42 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
              }
              if (v41 >= 0) {
                std::string::size_type v43 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v43 = a2->__r_.__value_.__l.__size_;
              }
              uint64_t v44 = std::string::append(&v47, v42, v43);
              long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              v54.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              sub_21707FB4C((os_log_t *)v38, (uint64_t *)&v54);
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v54.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v47.__r_.__value_.__l.__data_);
              }
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_136;
              }
              BOOL v31 = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_135;
            }
LABEL_104:
            sub_217094318();
          }
          long long v28 = __dst;
          break;
        default:
          goto LABEL_96;
      }
    }
    if (*(_DWORD *)v28 == 1819242338) {
      sub_2170943FC();
    }
    goto LABEL_96;
  }
  uint64_t v19 = 1;
LABEL_143:
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
  sub_21697C414(&v62);
  if (v61) {
    sub_216D16E0C(v61);
  }
  return v19;
}

void sub_217093F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  sub_2168F83DC((uint64_t)&a41);
  sub_216D2EDA0((uint64_t)&a11);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  std::string::size_type v43 = *(std::__shared_weak_count **)(v41 - 112);
  if (v43) {
    sub_216784EC4(v43);
  }
  sub_216D2EDA0(v41 - 104);
  _Unwind_Resume(a1);
}

void sub_217094150()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
}

void sub_217094210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094234()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
}

void sub_2170942F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094318()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_2170943D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170943FC()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>();
}

void sub_2170944BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170944E0()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>();
}

void sub_2170945A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170945C4()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>();
}

void sub_217094684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170946A8()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>();
}

void sub_217094814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094854()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>();
}

void sub_2170949C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094A08()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
}

void sub_217094B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094BBC()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
}

void sub_217094D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094D70()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void sub_217094EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217094F24()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>();
}

void sub_217095098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170950D8()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>();
}

void sub_217095248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217095288()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
}

void sub_2170953F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217095438()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>();
}

void sub_2170955A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170955E8(const pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v49, a1);
  int v4 = sub_216D563F8(a1);
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(__p, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v7 = *(_OWORD *)EmptyString;
    uint64_t v48 = EmptyString[2];
    *(_OWORD *)std::string __p = v7;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v49, v5))goto LABEL_8; {
  if (SHIBYTE(v48) < 0)
  }
  {
    if (__p[1] != (void *)6)
    {
      if (__p[1] != (void *)7) {
        goto LABEL_49;
      }
      if (*(_DWORD *)__p[0] != 1836216174 || *(_DWORD *)((char *)__p[0] + 3) != 1936482669) {
        goto LABEL_49;
      }
      goto LABEL_8;
    }
    uint64_t v12 = (void **)__p[0];
    goto LABEL_45;
  }
  if (HIBYTE(v48) == 6)
  {
    uint64_t v12 = __p;
LABEL_45:
    int v17 = *(_DWORD *)v12;
    int v18 = *((unsigned __int16 *)v12 + 2);
    if (v17 != 1852403568 || v18 != 29556) {
      goto LABEL_49;
    }
    goto LABEL_8;
  }
  if (HIBYTE(v48) != 7
    || (LODWORD(__p[0]) == 1836216174 ? (BOOL v9 = *(_DWORD *)((char *)__p + 3) == 1936482669) : (BOOL v9 = 0), !v9))
  {
LABEL_49:
    uint64_t v10 = 17;
    goto LABEL_101;
  }
LABEL_8:
  if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v49))
  {
    uint64_t v10 = 18;
    goto LABEL_101;
  }
  if (SHIBYTE(v48) < 0)
  {
    if (__p[1] == (void *)6 && *(_DWORD *)__p[0] == 1852403568 && *((_WORD *)__p[0] + 2) == 29556) {
      goto LABEL_69;
    }
    if (__p[1] != (void *)7) {
      goto LABEL_54;
    }
    int v8 = (void **)__p[0];
  }
  else
  {
    if (HIBYTE(v48) == 6)
    {
      if (LODWORD(__p[0]) == 1852403568 && WORD2(__p[0]) == 29556) {
        goto LABEL_69;
      }
      goto LABEL_54;
    }
    if (HIBYTE(v48) != 7)
    {
LABEL_54:
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v49, &__str);
      goto LABEL_55;
    }
    int v8 = __p;
  }
  int v14 = *(_DWORD *)v8;
  int v15 = *(_DWORD *)((char *)v8 + 3);
  if (v14 != 1836216174 || v15 != 1936482669) {
    goto LABEL_54;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(a2, (atomic_uint **)&__str);
LABEL_55:
  std::string::size_type v21 = __str.__r_.__value_.__r.__words[0];
  long long v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22) {
    long long v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  BOOL v23 = (atomic_uint *)(v21 & 0xFFFFFFFFFFFFFFF8);
  if ((v21 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v22 + 153) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v24) {
      long long v24 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if (v23 != (atomic_uint *)(*((void *)v24 + 151) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v25) {
        uint64_t v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if (v23 != (atomic_uint *)(*((void *)v25 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit(v23, 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v10 = 15;
        goto LABEL_101;
      }
    }
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit(v23, 0xFFFFFFFE, memory_order_release);
  }
LABEL_69:
  v44.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v44, (atomic_uint **)&v45);
  if ((v45.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    BOOL v27 = (uint64_t *)((v45.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    BOOL v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  }
  if (*((char *)v27 + 23) < 0)
  {
    sub_216778F24(&__str, (void *)*v27, v27[1]);
  }
  else
  {
    long long v28 = *(_OWORD *)v27;
    __str.__r_.__value_.__r.__words[2] = v27[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v28;
  }
  if ((v45.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&v45, &__str, 0, size - 2, (std::allocator<char> *)&v44);
  BOOL v30 = sub_217095BB0((const void **)&v45.__r_.__value_.__l.__data_);
  BOOL v31 = v30;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if (v31) {
      goto LABEL_81;
    }
LABEL_83:
    char v32 = sub_2170A4138();
    std::operator+<char>();
    int v33 = std::string::append(&v43, " for attribute ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v35 = sub_216D563F8(a1);
    if ((*(void *)v35 & 0xFFFFFFFFFFFFFFF8) != 0) {
      BOOL v36 = (uint64_t *)((*(void *)v35 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      BOOL v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v35);
    }
    int v37 = *((char *)v36 + 23);
    if (v37 >= 0) {
      uint64_t v38 = (const std::string::value_type *)v36;
    }
    else {
      uint64_t v38 = (const std::string::value_type *)*v36;
    }
    if (v37 >= 0) {
      std::string::size_type v39 = *((unsigned __int8 *)v36 + 23);
    }
    else {
      std::string::size_type v39 = v36[1];
    }
    long long v40 = std::string::append(&v44, v38, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v32, (uint64_t *)&v45);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = 16;
    goto LABEL_99;
  }
  if (!v30) {
    goto LABEL_83;
  }
LABEL_81:
  uint64_t v10 = 0;
LABEL_99:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_101:
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
  sub_21697C414(&v51);
  if (v50) {
    sub_216D16E0C(v50);
  }
  return v10;
}

BOOL sub_217095BB0(const void **a1)
{
  v32[3] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798D140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798D140))
  {
    sub_216779094(v4, "BOOL");
    sub_216779094(v5, "uchar");
    sub_216779094(v6, "int");
    sub_216779094(v7, "uint");
    sub_216779094(v8, "float");
    sub_216779094(v9, "double");
    sub_216779094(v10, "int2");
    sub_216779094(v11, "int3");
    sub_216779094(v12, "int4");
    sub_216779094(v13, "float2");
    sub_216779094(v14, "float3");
    sub_216779094(v15, "float4");
    sub_216779094(v16, "double2");
    sub_216779094(v17, "double3");
    sub_216779094(v18, "double4");
    sub_216779094(v19, "point3f");
    sub_216779094(v20, "point3d");
    sub_216779094(v21, "normal3f");
    sub_216779094(v22, "normal3d");
    sub_216779094(v23, "vector3f");
    sub_216779094(v24, "vector3d");
    sub_216779094(v25, "color3f");
    sub_216779094(v26, "color3d");
    sub_216779094(v27, "color4f");
    sub_216779094(v28, "color4d");
    sub_216779094(v29, "texCoord2f");
    sub_216779094(v30, "texCoord2d");
    sub_216779094(v31, "texCoord3f");
    sub_216779094(v32, "texCoord3d");
    sub_217050B20((uint64_t)&unk_26798D128, v4, 29);
    uint64_t v3 = 87;
    do
    {
      if (SHIBYTE(v4[v3 - 1]) < 0) {
        operator delete((void *)v4[v3 - 3]);
      }
      v3 -= 3;
    }
    while (v3 * 8);
    __cxa_atexit((void (*)(void *))sub_217096E20, &unk_26798D128, &dword_216758000);
    __cxa_guard_release(&qword_26798D140);
  }
  return sub_21678C2D8((uint64_t)&unk_26798D128, a1) != (void)&unk_26798D130;
}

void sub_217095F38(_Unwind_Exception *a1)
{
  uint64_t v3 = 696;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0) {
      operator delete(*(void **)(v1 + v3 - 24));
    }
    v3 -= 24;
    if (!v3)
    {
      __cxa_guard_abort(&qword_26798D140);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_217095FA8(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2)
{
  __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&__p, (atomic_uint **)v39);
  if (((unint64_t)v39[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)(((unint64_t)v39[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)EmptyString;
    uint64_t v42 = EmptyString[2];
    long long __dst = v6;
  }
  if (((uint64_t)v39[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v39[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v42 < 0)
  {
    uint64_t v11 = *((void *)&__dst + 1);
    if (*((void *)&__dst + 1) == 10)
    {
      if (*(void *)__dst == 0x66336C616D726F6ELL && *(_WORD *)(__dst + 8) == 23899) {
        goto LABEL_49;
      }
      if (*(void *)__dst == 0x64336C616D726F6ELL && *(_WORD *)(__dst + 8) == 23899) {
        goto LABEL_49;
      }
      uint64_t v11 = *((void *)&__dst + 1);
    }
    if (v11 != 9) {
      goto LABEL_47;
    }
    if (*(void *)__dst != 0x5B6633726F6C6F63 || *(unsigned char *)(__dst + 8) != 93)
    {
      if (*((void *)&__dst + 1) != 9) {
        goto LABEL_47;
      }
      p_dst = (long long *)__dst;
LABEL_43:
      uint64_t v15 = *(void *)p_dst;
      int v16 = *((unsigned __int8 *)p_dst + 8);
      if (v15 != 0x5B6433726F6C6F63 || v16 != 93)
      {
LABEL_47:
        v37.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetScalarType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v37);
        CPPuint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
        if (*(char *)(CPPTypeName + 23) < 0)
        {
          sub_216778F24(v39, *(void **)CPPTypeName, *(void *)(CPPTypeName + 8));
        }
        else
        {
          long long v19 = *(_OWORD *)CPPTypeName;
          std::string::size_type v40 = *(void *)(CPPTypeName + 16);
          *(_OWORD *)std::string::size_type v39 = v19;
        }
        if ((v40 & 0x8000000000000000) != 0)
        {
          if (v39[1] == (void *)5 && *(_DWORD *)v39[0] == 1634692198 && *((unsigned char *)v39[0] + 4) == 116) {
            goto LABEL_82;
          }
          if (v39[1] == (void *)7)
          {
            long long v22 = (void **)v39[0];
LABEL_64:
            int v24 = *(_DWORD *)v22;
            int v25 = *(_DWORD *)((char *)v22 + 3);
            if (v24 == 1700161095 && v25 == 1714578277) {
              goto LABEL_82;
            }
          }
        }
        else
        {
          if (HIBYTE(v40) == 5)
          {
            if (LODWORD(v39[0]) == 1634692198 && BYTE4(v39[0]) == 116) {
              goto LABEL_82;
            }
            goto LABEL_76;
          }
          if (HIBYTE(v40) == 7)
          {
            long long v22 = v39;
            goto LABEL_64;
          }
        }
LABEL_76:
        if (!sub_216855A40(v39, "GfVec3f")
          && !sub_216855A40(v39, "GfVec4f")
          && !sub_216855A40(v39, "double")
          && !sub_216855A40(v39, "GfVec2d")
          && !sub_216855A40(v39, "GfVec3d")
          && !sub_216855A40(v39, "GfVec4d"))
        {
          if (*(unsigned char *)(a2 + 5))
          {
            BOOL v30 = sub_2170A4138();
            BOOL v31 = sub_216D563F8(a1);
            if ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != 0) {
              goto LABEL_86;
            }
            goto LABEL_85;
          }
          uint64_t v27 = 0;
LABEL_91:
          if (SHIBYTE(v40) < 0) {
            operator delete(v39[0]);
          }
          goto LABEL_100;
        }
LABEL_82:
        uint64_t v27 = 0;
        int v29 = *(unsigned __int8 *)(a2 + 5);
        if (v29 != 1 && v29 != 4)
        {
          BOOL v30 = sub_2170A4138();
          BOOL v31 = sub_216D563F8(a1);
          if ((*(void *)v31 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
LABEL_86:
            std::operator+<char>();
            char v32 = std::string::append(&v37, ")");
            long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            sub_21707FB4C((os_log_t *)v30, (uint64_t *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            uint64_t v27 = 113;
            goto LABEL_91;
          }
LABEL_85:
          pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
          goto LABEL_86;
        }
        goto LABEL_91;
      }
    }
  }
  else
  {
    if (HIBYTE(v42) != 9)
    {
      if (HIBYTE(v42) != 10) {
        goto LABEL_47;
      }
      if (((void)__dst != 0x66336C616D726F6ELL || WORD4(__dst) != 23899)
        && ((void)__dst != 0x64336C616D726F6ELL || WORD4(__dst) != 23899))
      {
        goto LABEL_47;
      }
LABEL_49:
      if (*(unsigned __int8 *)(a2 + 5) - 1 >= 2)
      {
        CFDataRef v20 = sub_2170A4138();
        std::string::size_type v21 = sub_216D563F8(a1);
        if ((*(void *)v21 & 0xFFFFFFFFFFFFFFF8) != 0) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
LABEL_71:
      uint64_t v27 = 0;
      goto LABEL_100;
    }
    if ((void)__dst != 0x5B6633726F6C6F63 || BYTE8(__dst) != 93)
    {
      p_dst = &__dst;
      goto LABEL_43;
    }
  }
  if ((*(unsigned __int8 *)(a2 + 5) | 2) == 3) {
    goto LABEL_71;
  }
  CFDataRef v20 = sub_2170A4138();
  std::string::size_type v21 = sub_216D563F8(a1);
  if ((*(void *)v21 & 0xFFFFFFFFFFFFFFF8) == 0) {
LABEL_94:
  }
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
LABEL_95:
  std::operator+<char>();
  long long v34 = std::string::append(&__p, ")");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  std::string::size_type v40 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v39 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v20, (uint64_t *)v39);
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = 113;
LABEL_100:
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__dst);
  }
  return v27;
}

void sub_21709655C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2170965F8(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  v45[5] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95328))
  {
    sub_216779094(__p, "BOOL[]");
    uint64_t v17 = 0;
    sub_216779094(v18, "uchar[]");
    void v18[3] = 0;
    sub_216779094(v19, "int[]");
    void v19[3] = 0;
    sub_216779094(v20, "uint[]");
    void v20[3] = 0;
    sub_216779094(v21, "float[]");
    void v21[3] = 0x1000000000ELL;
    sub_216779094(v22, "double[]");
    void v22[3] = 0x1000000000ELL;
    sub_216779094(v23, "int2[]");
    void v23[3] = 0x200000000;
    sub_216779094(v24, "int3[]");
    void v24[3] = 0x300000000;
    sub_216779094(v25, "int4[]");
    void v25[3] = 0x400000000;
    sub_216779094(v26, "float2[]");
    void v26[3] = 0x1020000000ELL;
    sub_216779094(v27, "float3[]");
    void v27[3] = 0x1030000000ELL;
    sub_216779094(v28, "float4[]");
    void v28[3] = 0x1040000000ELL;
    sub_216779094(v29, "double2[]");
    void v29[3] = 0x1020000000ELL;
    sub_216779094(v30, "double3[]");
    void v30[3] = 0x1030000000ELL;
    sub_216779094(v31, "double4[]");
    void v31[3] = 0x1040000000ELL;
    sub_216779094(v32, "point3f[]");
    v32[3] = 0x1030000000ELL;
    sub_216779094(v33, "point3d[]");
    v33[3] = 0x1030000000ELL;
    sub_216779094(v34, "normal3f[]");
    v34[3] = 0x2030000000ALL;
    sub_216779094(v35, "normal3d[]");
    v35[3] = 0x2030000000ALL;
    sub_216779094(v36, "vector3f[]");
    v36[3] = 0x1030000000ELL;
    sub_216779094(v37, "vector3d[]");
    v37[3] = 0x1030000000ELL;
    sub_216779094(v38, "color3f[]");
    uint64_t v38[3] = 0x30300000008;
    sub_216779094(v39, "color3d[]");
    void v39[3] = 0x30300000008;
    sub_216779094(v40, "color4f[]");
    void v40[3] = 0x1040000000ELL;
    sub_216779094(v41, "color4d[]");
    void v41[3] = 0x1040000000ELL;
    sub_216779094(v42, "texCoord2f[]");
    v42[3] = 0x1020000000CLL;
    sub_216779094(v43, "texCoord2d[]");
    v43[3] = 0x1020000000CLL;
    sub_216779094(v44, "texCoord3f[]");
    v44[3] = 0x1030000000CLL;
    sub_216779094(v45, "texCoord3d[]");
    void v45[3] = 0x1030000000CLL;
    sub_21709F9C4((uint64_t)&unk_267B95310, (const void **)__p, 29);
    uint64_t v12 = 116;
    do
    {
      if (*((char *)&TypeName + v12 * 8 + 7) < 0) {
        operator delete(__p[v12 - 4]);
      }
      v12 -= 4;
    }
    while (v12 * 8);
    __cxa_atexit((void (*)(void *))sub_217096C1C, &unk_267B95310, &dword_216758000);
    __cxa_guard_release(&qword_267B95328);
  }
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v14);
  if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(__p, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v4 = *(_OWORD *)EmptyString;
    uint64_t v16 = EmptyString[2];
    *(_OWORD *)std::string __p = v4;
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = sub_21678C2D8((uint64_t)&unk_267B95310, (const void **)__p);
  if ((_UNKNOWN *)v5 == &unk_267B95318)
  {
    uint64_t v9 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0x10000000000;
    uint64_t v10 = 14;
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 56);
    unint64_t v7 = v6 & 0xFFFF000000000000;
    uint64_t v8 = v6 & 0xFF0000000000;
    uint64_t v9 = v6 & 0xFF00000000;
    uint64_t v10 = v6;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v9 | v10 | v8 | v7;
}

void sub_217096B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v18 = 928;
  while (1)
  {
    if (*(char *)(v16 + v18 - 9) < 0) {
      operator delete(*(void **)(v16 + v18 - 32));
    }
    v18 -= 32;
    if (!v18)
    {
      __cxa_guard_abort(&qword_267B95328);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_217096C1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_217096C48(uint64_t a1)
{
  return a1;
}

uint64_t sub_217096C74(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_217096CF4((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_217096CDC(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_217096CF4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_216789A4C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_217096D78((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_217096D78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_217096E04(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_217096E20(uint64_t a1)
{
  return a1;
}

uint64_t sub_217096E4C(uint64_t *a1, unint64_t *a2, unsigned char *a3, int *a4)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_217096F8C(a1, a2);
      break;
    case 1:
      int v6 = *a4;
      uint64_t result = sub_21708151C(a1, a2, (uint64_t)a3, v6);
      break;
    case 2:
      uint64_t result = sub_21709702C(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t result = sub_2170971E0(a1, a2, (uint64_t)a3);
      break;
    case 4:
      uint64_t result = sub_217097680(a1, a2, (uint64_t)a3, a4);
      break;
    default:
      uint64_t v5 = sub_2170A4138();
      sub_216779094(__p, "Unknown quantization function");
      sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_217096F8C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (a1[1] - *a1) >> 2;
  int v11 = 0;
  uint64_t v12 = &v11;
  sub_2168F84A8(a2, v4, &v12);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      float v9 = (float)*(int *)(v7 + 4 * v8);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(float *)(a2[4] + 4 * v8++) = v9;
      uint64_t v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_21709702C(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1[1] - *a1;
  if (v4) {
    BOOL v5 = (v4 & 4) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 112;
  }
  if (*(int *)(a3 + 32) < 3 || *a4 != 2) {
    return 112;
  }
  unint64_t v12 = (unint64_t)v4 >> 2;
  DWORD1(v27) = 0;
  *((void *)&v27 + 1) = (char *)&v27 + 4;
  sub_2168F84A8(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_DWORD **)&v27 + 1);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v27) = 0;
      *(void *)&long long v27 = 0;
      sub_2170A4744(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v27 + 2, (int *)&v27 + 1, (int *)&v27, v15);
      float v18 = (float)SDWORD2(v27);
      float v19 = (float)SDWORD1(v27);
      float v20 = (float)(int)v27;
      if (*(void *)((char *)&v27 + 4) || (float v21 = 1.0, v27)) {
        float v21 = 1.0 / sqrtf((float)((float)(v18 * v18) + (float)(v19 * v19)) + (float)(v20 * v20));
      }
      float v22 = v21 * v18;
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(float *)(a2[4] + v13) = v22;
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v23, v24);
      *(float *)(a2[4] + v13 + 4) = v21 * v19;
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
      *(float *)(a2[4] + v13 + 8) = v21 * v20;
      v14 += 2;
      v13 += 12;
    }
    while ((int)v14 < (int)v12);
  }
  uint64_t result = 0;
  ++*a4;
  return result;
}

uint64_t sub_2170971E0(void *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    int v6 = sub_2170A4138();
    std::to_string(&v51, v4);
    uint64_t v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v7->__r_.__value_.__r.__words[2];
    long long v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    float v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  float v12 = *(float *)(a3 + 4);
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  *(void *)&long long v52 = &v51;
  sub_2168F84A8(a2, (int)((uint64_t)v3 >> 2), (_DWORD **)&v52);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (int *)(*a1 + 4 * v15);
    float v17 = v12 * (float)*v16;
    float v18 = (float)(v12 * (float)v16[1]) + -0.5;
    float v19 = (float)(v12 * (float)v16[2]) + -0.5;
    float v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    float v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    float v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    BOOL v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0) {
      break;
    }
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(float *)(a2[4] + 4 * v15) = v20;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(float *)(a2[4] + 4 * v15 + 4) = v21;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(float *)(a2[4] + 4 * v15 + 8) = v22;
    v15 += 3;
    if ((int)v15 >= (int)v4) {
      return 0;
    }
  }
  BOOL v30 = sub_2170A4138();
  std::to_string(&v47, v20);
  BOOL v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v48, ", g=");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v46;
  }
  else {
    long long v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v39 = std::string::append(&v50, ", b=");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v41 = &v45;
  }
  else {
    long long v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v45.__r_.__value_.__l.__size_;
  }
  std::string v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v53 = v43->__r_.__value_.__r.__words[2];
  long long v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    float v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_2170975C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217097680(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *a4;
  *a4 = v4 + 1;
  if ((int)v4 <= 0)
  {
    uint64_t v28 = sub_2170A4138();
    int v29 = "Weight dequantization: componentsPerVector value too small";
LABEL_21:
    sub_216779094(__p, v29);
    sub_21707FB4C((os_log_t *)v28, (uint64_t *)__p);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  uint64_t v6 = (a1[1] - *a1) >> 2;
  if ((int)v6 % (int)v4) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (int)v4 <= (int)v6;
  }
  if (v7)
  {
    int v10 = v6 / v4 * (v4 + 1);
    float v11 = *(float *)(a3 + 4);
    int v32 = 0;
    __p[0] = &v32;
    sub_2168F84A8(a2, v10, (_DWORD **)__p);
    if (v10 < 1) {
      return 0;
    }
    LODWORD(v14) = 0;
    int v15 = 0;
    while (1)
    {
      uint64_t v14 = (int)v14;
      uint64_t v16 = v4;
      uint64_t v17 = 4 * v15;
      float v18 = 0.0;
      do
      {
        int v19 = *(_DWORD *)(*a1 + 4 * v14++);
        float v20 = fminf(fmaxf(v11 * (float)v19, 0.0), 1.0);
        sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
        *(float *)(a2[4] + v17) = v20;
        float v18 = v18 + v20;
        v17 += 4;
        --v16;
      }
      while (v16);
      float v21 = fminf(fmaxf(1.0 - v18, 0.0), 1.0);
      sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
      *(float *)(a2[4] + 4 * (v15 + (int)v4)) = v21;
      float v22 = v18 + v21;
      if (v22 <= 0.0) {
        break;
      }
      LODWORD(v23) = *a4;
      if (vabds_f32(1.0, v22) > 0.000001 && (int)v23 >= 1)
      {
        uint64_t v25 = 0;
        do
        {
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
          uint64_t v26 = a2[4] + 4 * v15;
          *(float *)(v26 + 4 * v25) = *(float *)(v26 + 4 * v25) / v22;
          ++v25;
          uint64_t v23 = (int)*a4;
        }
        while (v25 < v23);
      }
      v15 += v23;
      if (v15 >= v10) {
        return 0;
      }
    }
    uint64_t v28 = sub_2170A4138();
    int v29 = "Weight dequantization: negative weights sum";
    goto LABEL_21;
  }
  return 112;
}

uint64_t sub_217097884(uint64_t *a1, unint64_t *a2, unsigned char *a3, int *a4)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_2170979C4(a1, a2);
      break;
    case 1:
      int v6 = *a4;
      uint64_t result = sub_217097A60(a1, a2, (uint64_t)a3, v6);
      break;
    case 2:
      uint64_t result = sub_217097B78(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t result = sub_217097D28(a1, a2, (uint64_t)a3);
      break;
    case 4:
      uint64_t result = sub_2170981D4(a1, a2, (uint64_t)a3, a4);
      break;
    default:
      BOOL v5 = sub_2170A4138();
      sub_216779094(__p, "Unknown quantization function");
      sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_2170979C4(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (a1[1] - *a1) >> 2;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  sub_2168F9B94(a2, v4, &v12);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      double v9 = (double)*(int *)(v7 + 4 * v8);
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(double *)(a2[4] + 8 * v8++) = v9;
      uint64_t v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_217097A60(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 112;
  }
  v23[1] = v7;
  void v23[2] = v6;
  v23[13] = v4;
  v23[14] = v5;
  unint64_t v10 = a1[1] - *a1;
  uint64_t result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    uint64_t v22 = 0;
    v23[0] = &v22;
    sub_2168F9B94(a2, (v10 >> 2), v23);
    uint64_t v16 = 0;
    float v17 = *(float *)(a3 + 4);
    uint64_t v18 = (int)((uint64_t)v10 >> 2);
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = v16;
      do
      {
        double v21 = (float)((float)(v17 * (float)*(int *)(*a1 + 4 * v20)) + *(float *)(*(void *)(a3 + 8) + v19));
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(double *)(a2[4] + 8 * v20++) = v21;
        v19 += 4;
      }
      while (4 * a4 != v19);
      v16 += a4;
    }
    while (v16 < v18);
    return 0;
  }
  return result;
}

uint64_t sub_217097B78(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1[1] - *a1;
  if (v4) {
    BOOL v5 = (v4 & 4) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 112;
  }
  if (*(int *)(a3 + 32) < 3 || *a4 != 2) {
    return 112;
  }
  unint64_t v12 = (unint64_t)v4 >> 2;
  uint64_t v28 = 0;
  int v29 = &v28;
  sub_2168F9B94(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), &v29);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      LODWORD(v29) = 0;
      int v27 = 0;
      LODWORD(v28) = 0;
      sub_2170A4744(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v29, (int *)&v28, &v27, v15);
      double v18 = (double)(int)v29;
      double v19 = (double)(int)v28;
      double v20 = (double)v27;
      if (v29 || v28 || (double v21 = 1.0, v27)) {
        double v21 = 1.0 / sqrt(v18 * v18 + v19 * v19 + v20 * v20);
      }
      double v22 = v21 * v18;
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(double *)(a2[4] + v13) = v22;
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v23, v24);
      *(double *)(a2[4] + v13 + 8) = v21 * v19;
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
      *(double *)(a2[4] + v13 + 16) = v21 * v20;
      v14 += 2;
      v13 += 24;
    }
    while ((int)v14 < (int)v12);
  }
  uint64_t result = 0;
  ++*a4;
  return result;
}

uint64_t sub_217097D28(void *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    int v6 = sub_2170A4138();
    std::to_string(&v51, v4);
    uint64_t v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v7->__r_.__value_.__r.__words[2];
    long long v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    double v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  float v12 = *(float *)(a3 + 4);
  v51.__r_.__value_.__r.__words[0] = 0;
  *(void *)&long long v52 = &v51;
  sub_2168F9B94(a2, (int)((uint64_t)v3 >> 2), (uint64_t **)&v52);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (int *)(*a1 + 4 * v15);
    float v17 = v12 * (float)*v16;
    float v18 = (float)(v12 * (float)v16[1]) + -0.5;
    float v19 = (float)(v12 * (float)v16[2]) + -0.5;
    float v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    float v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    float v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    BOOL v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0) {
      break;
    }
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(double *)(a2[4] + 8 * v15) = v20;
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(double *)(a2[4] + 8 * v15 + 8) = v21;
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(double *)(a2[4] + 8 * v15 + 16) = v22;
    v15 += 3;
    if ((int)v15 >= (int)v4) {
      return 0;
    }
  }
  BOOL v30 = sub_2170A4138();
  std::to_string(&v47, v20);
  char v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v48, ", g=");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v46;
  }
  else {
    long long v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v39 = std::string::append(&v50, ", b=");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v41 = &v45;
  }
  else {
    long long v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v45.__r_.__value_.__l.__size_;
  }
  std::string v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v53 = v43->__r_.__value_.__r.__words[2];
  long long v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    double v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_217098114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170981D4(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *a4;
  *a4 = v4 + 1;
  if ((int)v4 <= 0)
  {
    uint64_t v28 = sub_2170A4138();
    int v29 = "Weight dequantization: componentsPerVector value too small";
LABEL_21:
    sub_216779094(__p, v29);
    sub_21707FB4C((os_log_t *)v28, (uint64_t *)__p);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  uint64_t v6 = (a1[1] - *a1) >> 2;
  if ((int)v6 % (int)v4) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (int)v4 <= (int)v6;
  }
  if (v7)
  {
    int v10 = v6 / v4 * (v4 + 1);
    float v11 = *(float *)(a3 + 4);
    uint64_t v32 = 0;
    __p[0] = &v32;
    sub_2168F9B94(a2, v10, (uint64_t **)__p);
    if (v10 < 1) {
      return 0;
    }
    LODWORD(v14) = 0;
    int v15 = 0;
    while (1)
    {
      uint64_t v14 = (int)v14;
      uint64_t v16 = v4;
      uint64_t v17 = 8 * v15;
      double v18 = 0.0;
      do
      {
        int v19 = *(_DWORD *)(*a1 + 4 * v14++);
        double v20 = fmin(fmaxf(v11 * (float)v19, 0.0), 1.0);
        sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
        *(double *)(a2[4] + v17) = v20;
        double v18 = v18 + v20;
        v17 += 8;
        --v16;
      }
      while (v16);
      double v21 = fmin(fmax(1.0 - v18, 0.0), 1.0);
      sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
      *(double *)(a2[4] + 8 * (v15 + (int)v4)) = v21;
      double v22 = v18 + v21;
      if (v22 <= 0.0) {
        break;
      }
      LODWORD(v23) = *a4;
      if (vabdd_f64(1.0, v22) > 0.000001 && (int)v23 >= 1)
      {
        uint64_t v25 = 0;
        do
        {
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v12, v13);
          uint64_t v26 = a2[4] + 8 * v15;
          *(double *)(v26 + 8 * v25) = *(double *)(v26 + 8 * v25) / v22;
          ++v25;
          uint64_t v23 = (int)*a4;
        }
        while (v25 < v23);
      }
      v15 += v23;
      if (v15 >= v10) {
        return 0;
      }
    }
    uint64_t v28 = sub_2170A4138();
    int v29 = "Weight dequantization: negative weights sum";
    goto LABEL_21;
  }
  return 112;
}

uint64_t sub_2170983E8(uint64_t *a1, unint64_t *a2, unsigned char *a3, int *a4)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709851C(a1, a2);
      break;
    case 1:
      int v7 = *a4;
      uint64_t result = sub_2170985B0(a1, a2, (uint64_t)a3, v7);
      break;
    case 2:
      uint64_t result = sub_2170986D4(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t result = sub_217098888(a1, a2, (uint64_t)a3);
      break;
    case 4:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Weight dequantization: incompatible type int";
      goto LABEL_16;
    default:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Unknown quantization function";
LABEL_16:
      sub_216779094(__p, v6);
      sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709851C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (a1[1] - *a1) >> 2;
  int v11 = 0;
  uint64_t v12 = &v11;
  sub_216907A0C(a2, v4, &v12);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(_DWORD *)(a2[4] + 4 * v8++) = v9;
      uint64_t v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_2170985B0(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 112;
  }
  v24[1] = v7;
  v24[2] = v6;
  v24[13] = v4;
  v24[14] = v5;
  unint64_t v10 = a1[1] - *a1;
  uint64_t result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    int v23 = 0;
    v24[0] = &v23;
    sub_216907A0C(a2, (v10 >> 2), v24);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    float v18 = *(float *)(a3 + 4);
    uint64_t v19 = (int)((uint64_t)v10 >> 2);
    uint64_t v20 = 4 * a4;
    do
    {
      uint64_t v21 = 0;
      do
      {
        int v22 = (int)(float)((float)(v18 * (float)*(int *)(*a1 + v16 + v21)) + *(float *)(*(void *)(a3 + 8) + v21));
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(_DWORD *)(a2[4] + v16 + v21) = v22;
        v21 += 4;
      }
      while (v20 != v21);
      v17 += a4;
      v16 += v20;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_2170986D4(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1[1] - *a1;
  if (v4) {
    BOOL v5 = (v4 & 4) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 112;
  }
  if (*(int *)(a3 + 32) < 3 || *a4 != 2) {
    return 112;
  }
  unint64_t v12 = (unint64_t)v4 >> 2;
  DWORD1(v26) = 0;
  *((void *)&v26 + 1) = (char *)&v26 + 4;
  sub_216907A0C(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_DWORD **)&v26 + 1);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v26) = 0;
      *(void *)&long long v26 = 0;
      sub_2170A4744(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v26 + 2, (int *)&v26 + 1, (int *)&v26, v15);
      int v18 = DWORD1(v26);
      int v19 = v26;
      if (*(void *)((char *)&v26 + 4) || (double v20 = 1.0, v26)) {
        double v20 = 1.0 / sqrt((double)(DWORD2(v26) * DWORD2(v26) + DWORD1(v26) * DWORD1(v26) + (int)v26 * (int)v26));
      }
      int v21 = (int)(v20 * (double)SDWORD2(v26));
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(_DWORD *)(a2[4] + v13) = v21;
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v22, v23);
      *(_DWORD *)(a2[4] + v13 + 4) = (int)(v20 * (double)v18);
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v24, v25);
      *(_DWORD *)(a2[4] + v13 + 8) = (int)(v20 * (double)v19);
      v14 += 2;
      v13 += 12;
    }
    while ((int)v14 < (int)v12);
  }
  uint64_t result = 0;
  ++*a4;
  return result;
}

uint64_t sub_217098888(void *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    uint64_t v6 = sub_2170A4138();
    std::to_string(&v51, v4);
    uint64_t v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v7->__r_.__value_.__r.__words[2];
    long long v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    int v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  float v12 = *(float *)(a3 + 4);
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  *(void *)&long long v52 = &v51;
  sub_216907A0C(a2, (int)((uint64_t)v3 >> 2), (_DWORD **)&v52);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (int *)(*a1 + 4 * v15);
    float v17 = v12 * (float)*v16;
    float v18 = (float)(v12 * (float)v16[1]) + -0.5;
    float v19 = (float)(v12 * (float)v16[2]) + -0.5;
    float v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    float v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    float v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    BOOL v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0) {
      break;
    }
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(_DWORD *)(a2[4] + 4 * v15) = (int)v20;
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(_DWORD *)(a2[4] + 4 * v15 + 4) = (int)v21;
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(_DWORD *)(a2[4] + 4 * v15 + 8) = (int)v22;
    v15 += 3;
    if ((int)v15 >= (int)v4) {
      return 0;
    }
  }
  BOOL v30 = sub_2170A4138();
  std::to_string(&v47, v20);
  char v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v48, ", g=");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v46;
  }
  else {
    long long v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v39 = std::string::append(&v50, ", b=");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v41 = &v45;
  }
  else {
    long long v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v45.__r_.__value_.__l.__size_;
  }
  std::string v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v53 = v43->__r_.__value_.__r.__words[2];
  long long v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    int v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_217098C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217098D3C(uint64_t *a1, unint64_t *a2, unsigned char *a3, int *a4)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_217098E70(a1, a2);
      break;
    case 1:
      int v7 = *a4;
      uint64_t result = sub_217098F0C(a1, a2, (uint64_t)a3, v7);
      break;
    case 2:
      uint64_t result = sub_217099034(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t result = sub_217099218(a1, a2, (uint64_t)a3);
      break;
    case 4:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Weight dequantization: incompatible type BOOL";
      goto LABEL_16;
    default:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Unknown quantization function";
LABEL_16:
      sub_216779094(__p, v6);
      sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_217098E70(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (a1[1] - *a1) >> 2;
  char v11 = 0;
  float v12 = &v11;
  sub_2169AAD2C(a2, v4, &v12);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      BOOL v9 = *(_DWORD *)(v7 + 4 * v8) != 0;
      sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(unsigned char *)(a2[4] + v8++) = v9;
      uint64_t v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_217098F0C(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 112;
  }
  v23[1] = v7;
  void v23[2] = v6;
  v23[13] = v4;
  v23[14] = v5;
  unint64_t v10 = a1[1] - *a1;
  uint64_t result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    char v22 = 0;
    v23[0] = &v22;
    sub_2169AAD2C(a2, (v10 >> 2), v23);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    float v18 = *(float *)(a3 + 4);
    uint64_t v19 = (int)((uint64_t)v10 >> 2);
    do
    {
      uint64_t v20 = 0;
      do
      {
        BOOL v21 = (float)((float)(v18 * (float)*(int *)(*a1 + v16 + 4 * v20)) + *(float *)(*(void *)(a3 + 8) + 4 * v20)) != 0.0;
        sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(unsigned char *)(a2[4] + v17 + v20++) = v21;
      }
      while (a4 != v20);
      v17 += a4;
      v16 += 4 * a4;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_217099034(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1[1] - *a1;
  if (v4) {
    BOOL v5 = (v4 & 4) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 112;
  }
  if (*(int *)(a3 + 32) < 3 || *a4 != 2) {
    return 112;
  }
  unint64_t v12 = (unint64_t)v4 >> 2;
  BYTE4(v32) = 0;
  *((void *)&v32 + 1) = (char *)&v32 + 4;
  sub_2169AAD2C(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (unsigned char **)&v32 + 1);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v32) = 0;
      *(void *)&long long v32 = 0;
      sub_2170A4744(*(unsigned int *)(*a1 + 4 * v13), *(_DWORD *)(*a1 + 4 * v13 + 4), (int *)&v32 + 2, (int *)&v32 + 1, (int *)&v32, v15);
      int v18 = DWORD1(v32);
      int v19 = v32;
      if (*(void *)((char *)&v32 + 4) || (double v20 = 1.0, v32))
      {
        int v21 = DWORD2(v32) != 0;
        if (DWORD1(v32)) {
          ++v21;
        }
        if (v32) {
          ++v21;
        }
        double v20 = 1.0 / sqrt((double)v21);
      }
      if (DWORD2(v32)) {
        double v22 = 1.0;
      }
      else {
        double v22 = 0.0;
      }
      BOOL v23 = v20 * v22 != 0.0;
      sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(unsigned char *)(a2[4] + v14) = v23;
      if (v18) {
        double v26 = 1.0;
      }
      else {
        double v26 = 0.0;
      }
      BOOL v27 = v20 * v26 != 0.0;
      sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v24, v25);
      *(unsigned char *)(a2[4] + v14 + 1) = v27;
      if (v19) {
        double v30 = 1.0;
      }
      else {
        double v30 = 0.0;
      }
      BOOL v31 = v20 * v30 != 0.0;
      sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v28, v29);
      *(unsigned char *)(a2[4] + v14 + 2) = v31;
      v13 += 2;
      v14 += 3;
    }
    while ((int)v13 < (int)v12);
  }
  uint64_t result = 0;
  ++*a4;
  return result;
}

uint64_t sub_217099218(void *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    uint64_t v6 = sub_2170A4138();
    std::to_string(&v51, v4);
    uint64_t v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v7->__r_.__value_.__r.__words[2];
    long long v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    BOOL v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  float v12 = *(float *)(a3 + 4);
  v51.__r_.__value_.__s.__data_[0] = 0;
  *(void *)&long long v52 = &v51;
  sub_2169AAD2C(a2, (int)((uint64_t)v3 >> 2), (unsigned char **)&v52);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (int *)(*a1 + 4 * v15);
    float v17 = v12 * (float)*v16;
    float v18 = (float)(v12 * (float)v16[1]) + -0.5;
    float v19 = (float)(v12 * (float)v16[2]) + -0.5;
    float v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    float v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    float v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    BOOL v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0) {
      break;
    }
    sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(unsigned char *)(a2[4] + v15) = v20 != 0.0;
    sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(unsigned char *)(a2[4] + v15 + 1) = v21 != 0.0;
    sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(unsigned char *)(a2[4] + v15 + 2) = v22 != 0.0;
    v15 += 3;
    if ((int)v15 >= (int)v4) {
      return 0;
    }
  }
  double v30 = sub_2170A4138();
  std::to_string(&v47, v20);
  BOOL v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v48, ", g=");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v46;
  }
  else {
    long long v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v39 = std::string::append(&v50, ", b=");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v41 = &v45;
  }
  else {
    long long v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v45.__r_.__value_.__l.__size_;
  }
  std::string v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v53 = v43->__r_.__value_.__r.__words[2];
  long long v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_217099618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170996D8(uint64_t *a1, unint64_t *a2, unsigned char *a3, int *a4)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709980C(a1, a2);
      break;
    case 1:
      int v7 = *a4;
      uint64_t result = sub_2170998A0(a1, a2, (uint64_t)a3, v7);
      break;
    case 2:
      uint64_t result = sub_2170999C4(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t result = sub_217099B90(a1, a2, (uint64_t)a3);
      break;
    case 4:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Weight dequantization: incompatible type uint8_t";
      goto LABEL_16;
    default:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Unknown quantization function";
LABEL_16:
      sub_216779094(__p, v6);
      sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709980C(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (a1[1] - *a1) >> 2;
  char v11 = 0;
  float v12 = &v11;
  sub_2169083F4(a2, v4, &v12);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
      sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(unsigned char *)(a2[4] + v8++) = v9;
      uint64_t v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_2170998A0(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 112;
  }
  v23[1] = v7;
  void v23[2] = v6;
  v23[13] = v4;
  v23[14] = v5;
  unint64_t v10 = a1[1] - *a1;
  uint64_t result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    char v22 = 0;
    v23[0] = &v22;
    sub_2169083F4(a2, (v10 >> 2), v23);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    float v18 = *(float *)(a3 + 4);
    uint64_t v19 = (int)((uint64_t)v10 >> 2);
    do
    {
      uint64_t v20 = 0;
      do
      {
        int v21 = (int)(float)((float)(v18 * (float)*(int *)(*a1 + v16 + 4 * v20))
                         + *(float *)(*(void *)(a3 + 8) + 4 * v20));
        sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(unsigned char *)(a2[4] + v17 + v20++) = v21;
      }
      while (a4 != v20);
      v17 += a4;
      v16 += 4 * a4;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_2170999C4(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1[1] - *a1;
  if (v4) {
    BOOL v5 = (v4 & 4) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 112;
  }
  if (*(int *)(a3 + 32) < 3 || *a4 != 2) {
    return 112;
  }
  unint64_t v12 = (unint64_t)v4 >> 2;
  BYTE4(v27) = 0;
  *((void *)&v27 + 1) = (char *)&v27 + 4;
  sub_2169083F4(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (unsigned char **)&v27 + 1);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v27) = 0;
      *(void *)&long long v27 = 0;
      sub_2170A4744(*(unsigned int *)(*a1 + 4 * v13), *(_DWORD *)(*a1 + 4 * v13 + 4), (int *)&v27 + 2, (int *)&v27 + 1, (int *)&v27, v15);
      if (*(void *)((char *)&v27 + 4) || (int v18 = 0, v19 = 0, v20 = 0, v21 = 1.0, v27))
      {
        int v20 = BYTE8(v27);
        int v19 = BYTE4(v27);
        int v18 = v27;
        double v21 = 1.0 / sqrt((double)(v20 * v20 + v19 * v19 + v18 * v18));
      }
      int v22 = (int)(v21 * (double)v20);
      sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(unsigned char *)(a2[4] + v14) = v22;
      sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v23, v24);
      *(unsigned char *)(a2[4] + v14 + 1) = (int)(v21 * (double)v19);
      sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
      *(unsigned char *)(a2[4] + v14 + 2) = (int)(v21 * (double)v18);
      v13 += 2;
      v14 += 3;
    }
    while ((int)v13 < (int)v12);
  }
  uint64_t result = 0;
  ++*a4;
  return result;
}

uint64_t sub_217099B90(void *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    uint64_t v6 = sub_2170A4138();
    std::to_string(&v51, v4);
    uint64_t v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v7->__r_.__value_.__r.__words[2];
    long long v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    int v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  float v12 = *(float *)(a3 + 4);
  v51.__r_.__value_.__s.__data_[0] = 0;
  *(void *)&long long v52 = &v51;
  sub_2169083F4(a2, (int)((uint64_t)v3 >> 2), (unsigned char **)&v52);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (int *)(*a1 + 4 * v15);
    float v17 = v12 * (float)*v16;
    float v18 = (float)(v12 * (float)v16[1]) + -0.5;
    float v19 = (float)(v12 * (float)v16[2]) + -0.5;
    float v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    float v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    float v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    BOOL v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0) {
      break;
    }
    sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(unsigned char *)(a2[4] + v15) = (int)v20;
    sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(unsigned char *)(a2[4] + v15 + 1) = (int)v21;
    sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(unsigned char *)(a2[4] + v15 + 2) = (int)v22;
    v15 += 3;
    if ((int)v15 >= (int)v4) {
      return 0;
    }
  }
  double v30 = sub_2170A4138();
  std::to_string(&v47, v20);
  BOOL v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v48, ", g=");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v46;
  }
  else {
    long long v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v39 = std::string::append(&v50, ", b=");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v41 = &v45;
  }
  else {
    long long v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v45.__r_.__value_.__l.__size_;
  }
  std::string v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v53 = v43->__r_.__value_.__r.__words[2];
  long long v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    int v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_217099F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709A044(uint64_t *a1, unint64_t *a2, unsigned char *a3, int *a4)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709A178(a1, a2);
      break;
    case 1:
      int v7 = *a4;
      uint64_t result = sub_21709A20C(a1, a2, (uint64_t)a3, v7);
      break;
    case 2:
      uint64_t result = sub_21709A330(a1, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t result = sub_21709A4E4(a1, a2, (uint64_t)a3);
      break;
    case 4:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Weight dequantization: incompatible type unsigned int";
      goto LABEL_16;
    default:
      BOOL v5 = sub_2170A4138();
      uint64_t v6 = "Unknown quantization function";
LABEL_16:
      sub_216779094(__p, v6);
      sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709A178(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = (a1[1] - *a1) >> 2;
  int v11 = 0;
  float v12 = &v11;
  sub_216906E30(a2, v4, &v12);
  uint64_t v7 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
      sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
      *(_DWORD *)(a2[4] + 4 * v8++) = v9;
      uint64_t v7 = *a1;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
  return 0;
}

uint64_t sub_21709A20C(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 < 1) {
    return 112;
  }
  v24[1] = v7;
  v24[2] = v6;
  v24[13] = v4;
  v24[14] = v5;
  unint64_t v10 = a1[1] - *a1;
  uint64_t result = 112;
  if ((int)(v10 >> 2) >= a4 && !((int)(v10 >> 2) % a4))
  {
    int v23 = 0;
    v24[0] = &v23;
    sub_216906E30(a2, (v10 >> 2), v24);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    float v18 = *(float *)(a3 + 4);
    uint64_t v19 = (int)((uint64_t)v10 >> 2);
    uint64_t v20 = 4 * a4;
    do
    {
      uint64_t v21 = 0;
      do
      {
        unsigned int v22 = (float)((float)(v18 * (float)*(int *)(*a1 + v16 + v21))
                                  + *(float *)(*(void *)(a3 + 8) + v21));
        sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v14, v15);
        *(_DWORD *)(a2[4] + v16 + v21) = v22;
        v21 += 4;
      }
      while (v20 != v21);
      v17 += a4;
      v16 += v20;
    }
    while (v17 < v19);
    return 0;
  }
  return result;
}

uint64_t sub_21709A330(void *a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = a1[1] - *a1;
  if (v4) {
    BOOL v5 = (v4 & 4) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 112;
  }
  if (*(int *)(a3 + 32) < 3 || *a4 != 2) {
    return 112;
  }
  unint64_t v12 = (unint64_t)v4 >> 2;
  DWORD1(v26) = 0;
  *((void *)&v26 + 1) = (char *)&v26 + 4;
  sub_216906E30(a2, 3 * ((unint64_t)(v4 >> 2) >> 1), (_DWORD **)&v26 + 1);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = ~(-1 << (*(_DWORD *)(a3 + 32) - 1));
    do
    {
      DWORD2(v26) = 0;
      *(void *)&long long v26 = 0;
      sub_2170A4744(*(unsigned int *)(*a1 + 4 * v14), *(_DWORD *)(*a1 + 4 * v14 + 4), (int *)&v26 + 2, (int *)&v26 + 1, (int *)&v26, v15);
      unsigned int v18 = DWORD1(v26);
      unsigned int v19 = v26;
      if (*(void *)((char *)&v26 + 4) || (double v20 = 1.0, v26)) {
        double v20 = 1.0 / sqrt((double)(DWORD2(v26) * DWORD2(v26) + DWORD1(v26) * DWORD1(v26) + v26 * v26));
      }
      unsigned int v21 = (v20 * (double)DWORD2(v26));
      sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v16, v17);
      *(_DWORD *)(a2[4] + v13) = v21;
      sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v22, v23);
      *(_DWORD *)(a2[4] + v13 + 4) = (v20 * (double)v18);
      sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v24, v25);
      *(_DWORD *)(a2[4] + v13 + 8) = (v20 * (double)v19);
      v14 += 2;
      v13 += 12;
    }
    while ((int)v14 < (int)v12);
  }
  uint64_t result = 0;
  ++*a4;
  return result;
}

uint64_t sub_21709A4E4(void *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1[1] - *a1;
  unint64_t v4 = v3 >> 2;
  if (v3 < 0xC || (int)(v3 >> 2) % 3 != 0)
  {
    uint64_t v6 = sub_2170A4138();
    std::to_string(&v51, v4);
    uint64_t v7 = std::string::insert(&v51, 0, "dequantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v53 = v7->__r_.__value_.__r.__words[2];
    long long v52 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v52);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    int v9 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  float v12 = *(float *)(a3 + 4);
  LODWORD(v51.__r_.__value_.__l.__data_) = 0;
  *(void *)&long long v52 = &v51;
  sub_216906E30(a2, (int)((uint64_t)v3 >> 2), (_DWORD **)&v52);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (int *)(*a1 + 4 * v15);
    float v17 = v12 * (float)*v16;
    float v18 = (float)(v12 * (float)v16[1]) + -0.5;
    float v19 = (float)(v12 * (float)v16[2]) + -0.5;
    float v20 = fminf(fmaxf(v17 + (float)(v19 * 1.5748), 0.0), 1.0);
    float v21 = fminf(fmaxf((float)(v17 + (float)(v18 * -0.18733)) + (float)(v19 * -0.46813), 0.0), 1.0);
    float v22 = fminf(fmaxf(v17 + (float)(v18 * 1.8556), 0.0), 1.0);
    BOOL v23 = v20 <= 1.0 && v21 <= 1.0;
    if (!v23 || v22 > 1.0) {
      break;
    }
    sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    *(_DWORD *)(a2[4] + 4 * v15) = v20;
    sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v25, v26);
    *(_DWORD *)(a2[4] + 4 * v15 + 4) = v21;
    sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v27, v28);
    *(_DWORD *)(a2[4] + 4 * v15 + 8) = v22;
    v15 += 3;
    if ((int)v15 >= (int)v4) {
      return 0;
    }
  }
  double v30 = sub_2170A4138();
  std::to_string(&v47, v20);
  BOOL v31 = std::string::insert(&v47, 0, "dequantizeColorRGB: values out of bound r=");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  long long v33 = std::string::append(&v48, ", g=");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v21);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v35 = &v46;
  }
  else {
    long long v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v46.__r_.__value_.__l.__size_;
  }
  std::string v37 = std::string::append(&v49, (const std::string::value_type *)v35, size);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v39 = std::string::append(&v50, ", b=");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v45, v22);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v41 = &v45;
  }
  else {
    long long v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v45.__r_.__value_.__l.__size_;
  }
  std::string v43 = std::string::append(&v51, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v53 = v43->__r_.__value_.__r.__words[2];
  long long v52 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v52);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    int v9 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return 112;
}

void sub_21709A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_21709A998(uint64_t a1, _OWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    int v9 = *(long long **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    float v12 = sub_2169BDC8C(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 16 * v4;
      uint64_t v15 = v12;
      do
      {
        long long v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  uint64_t v18[2] = 433;
  void v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4i, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4i &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_21709AB00(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    int v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    float v12 = sub_2168FACB0(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 8 * v4;
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  uint64_t v18[2] = 433;
  void v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2f &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_21709AC68(uint64_t a1, _OWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_OWORD *)(v5 + 16 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    int v9 = *(long long **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    float v12 = sub_2168FFC84(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 16 * v4;
      uint64_t v15 = v12;
      do
      {
        long long v16 = *v9++;
        *v15++ = v16;
        v14 -= 16;
      }
      while (v14);
    }
    *(_OWORD *)&v12[2 * v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  uint64_t v18[2] = 433;
  void v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4f, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4f &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void sub_21709ADD0(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      long long v9 = *a2;
      uint64_t v10 = v5 + 24 * v4;
      *(void *)(v10 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v10 = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v11 = *(long long **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    uint64_t v14 = sub_2168FECE0(a1, v13);
    uint64_t v15 = v14;
    if (v4)
    {
      uint64_t v16 = 24 * v4;
      int v17 = v14;
      do
      {
        long long v18 = *v11;
        void v17[2] = *((void *)v11 + 2);
        *(_OWORD *)int v17 = v18;
        v17 += 3;
        unint64_t v11 = (long long *)((char *)v11 + 24);
        v16 -= 24;
      }
      while (v16);
    }
    long long v19 = *a2;
    float v20 = &v14[3 * v4];
    v20[2] = *((void *)a2 + 2);
    *(_OWORD *)float v20 = v19;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  void v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3d &>]";
  char v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v21 = 4;
    }
    else {
      int v21 = 3;
    }
  }
  else
  {
    int v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

void sub_21709AF68(uint64_t a1, _OWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      long long v9 = a2[1];
      uint64_t v10 = (_OWORD *)(v5 + 32 * v4);
      _OWORD *v10 = *a2;
      v10[1] = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v11 = *(long long **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    uint64_t v14 = sub_216901404(a1, v13);
    uint64_t v15 = v14;
    if (v4)
    {
      uint64_t v16 = 32 * v4;
      int v17 = v14;
      do
      {
        long long v18 = *v11;
        long long v19 = v11[1];
        v11 += 2;
        *int v17 = v18;
        v17[1] = v19;
        v17 += 2;
        v16 -= 32;
      }
      while (v16);
    }
    long long v20 = a2[1];
    int v21 = &v14[4 * v4];
    _OWORD *v21 = *a2;
    v21[1] = v20;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v23[0] = "vt/array.h";
  v23[1] = "emplace_back";
  void v23[2] = 433;
  void v23[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec4d, Args = <const pxrInternal__aapl__pxrReserved__::GfVec4d &>]";
  char v24 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v22 = 4;
    }
    else {
      int v22 = 3;
    }
  }
  else
  {
    int v22 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v22);
}

BOOL sub_21709B0D8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  _OWORD v11[2] = MEMORY[0x263F8C258];
  __int16 v12 = 0;
  v11[0] = &unk_26C772360;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_21709B180(unint64_t *a1, uint64_t *a2, unsigned char *a3, int *a4, char a5)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709B1EC(a1, a2);
      break;
    case 1:
      uint64_t result = sub_217088338((unsigned int *)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      uint64_t result = sub_21709B244(a1, a2, a4, a5);
      break;
    case 3:
      uint64_t result = sub_21709B33C((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      uint64_t result = sub_21709B91C((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709B1EC(unint64_t *a1, void *a2)
{
  sub_21681C000((uint64_t)a2, *a1);
  unint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (float *)a1[4];
    unint64_t v6 = (_DWORD *)*a2;
    do
    {
      float v7 = *v5++;
      *v6++ = (int)v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_21709B244(unint64_t *a1, void *a2, _DWORD *a3, int a4)
{
  unint64_t v4 = *a1;
  if (!*a1) {
    return 112;
  }
  char v5 = a4;
  uint64_t result = 112;
  if (a4 >= 3 && !(v4 % 3) && *a3 == 3)
  {
    sub_21681C000((uint64_t)a2, 2 * (v4 / 3));
    if ((int)v4 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = ~(-1 << (v5 - 1));
      do
      {
        sub_2170A4424(*a2 + v11, *a2 + v11 + 4, v13, *(float *)(a1[4] + 4 * v12), *(float *)(a1[4] + 4 * v12 + 4), *(float *)(a1[4] + 4 * v12 + 8));
        v12 += 3;
        v11 += 8;
      }
      while ((int)v12 < (int)v4);
    }
    uint64_t result = 0;
    --*a3;
  }
  return result;
}

uint64_t sub_21709B33C(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    unint64_t v6 = sub_2170A4138();
    std::to_string(&v62, v4);
    float v7 = std::string::insert(&v62, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v64 = v7->__r_.__value_.__r.__words[2];
    long long v63 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v63);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    uint64_t v9 = (void *)v62.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  uint64_t v14 = (float *)a1[4];
  v62.__r_.__value_.__s.__data_[0] = 0;
  if (*sub_21709BA90(v14, &v14[v4]) >= 0.0 && *v15 <= 1.0)
  {
    int v18 = 1 << a4;
    float v51 = (float)v18 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v51;
    LODWORD(v63) = 0;
    sub_216824364(a3 + 8, 3uLL, &v63);
    sub_21681C000((uint64_t)a2, (int)v4);
    if ((int)v4 < 1) {
      return 0;
    }
    uint64_t v19 = 0;
    uint64_t v20 = a1[4];
    for (uint64_t i = (int32x2_t *)(*a2 + 4); ; uint64_t i = (int32x2_t *)((char *)i + 12))
    {
      int v22 = (float *)(v20 + 4 * v19);
      float v23 = v22[1];
      float v24 = v22[2];
      int v25 = llroundf(v51 * (float)((float)((float)(*v22 * 0.2126) + (float)(v23 * 0.7152)) + (float)(v24 * 0.0722)));
      float32x2_t v26 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, *v22), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v23));
      float32x2_t v27 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v24);
      v28.i32[0] = vadd_f32(v26, v27).u32[0];
      v28.i32[1] = vsub_f32(v26, v27).i32[1];
      int32x2_t v29 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v28, (float32x2_t)0x3F0000003F000000), v51)));
      if (v25 < 0 || v18 <= v25 || v29.i32[0] < 0 || v18 <= v29.i32[0] || v29.i32[1] < 0 || v18 <= v29.i32[1]) {
        break;
      }
      uint64_t result = 0;
      i[-1].i32[1] = v25;
      *uint64_t i = v29;
      v19 += 3;
      if ((int)v19 >= (int)v4) {
        return result;
      }
    }
    int32x2_t v52 = v29;
    double v30 = sub_2170A4138();
    std::to_string(&v56, v18);
    BOOL v31 = std::string::insert(&v56, 0, "quantizeColorRGB: values out of bound qp1=");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    long long v33 = std::string::append(&v57, ", y=");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v25);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v35 = &v55;
    }
    else {
      long long v35 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v55.__r_.__value_.__l.__size_;
    }
    std::string v37 = std::string::append(&v58, (const std::string::value_type *)v35, size);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v39 = std::string::append(&v59, ", u=");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v52.i32[0]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v41 = &v54;
    }
    else {
      long long v41 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v54.__r_.__value_.__l.__size_;
    }
    std::string v43 = std::string::append(&v60, (const std::string::value_type *)v41, v42);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::string v45 = std::string::append(&v61, ", v=");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v52.i32[1]);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v47 = &v53;
    }
    else {
      std::string v47 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v53.__r_.__value_.__l.__size_;
    }
    std::string v49 = std::string::append(&v62, (const std::string::value_type *)v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    std::string::size_type v64 = v49->__r_.__value_.__r.__words[2];
    long long v63 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v30, (uint64_t *)&v63);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v9 = (void *)v56.__r_.__value_.__r.__words[0];
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = sub_2170A4138();
    sub_216779094(&v63, "quantizeColorRGB: Input out of range");
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&v63);
    if (SHIBYTE(v64) < 0)
    {
      uint64_t v9 = (void *)v63;
LABEL_13:
      operator delete(v9);
    }
  }
  return 112;
}

void sub_21709B814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v54 - 153) < 0) {
    operator delete(*(void **)(v54 - 176));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709B91C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6 = *a4;
  if ((int)v6 < 2) {
    return 112;
  }
  int v9 = *(_DWORD *)a1;
  uint64_t result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    uint64_t v11 = (v6 - 1);
    unsigned int v12 = v9 / v6;
    float v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_216824364(a3 + 8, v6, __p);
    sub_21681C000((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *a2;
    while (1)
    {
      uint64_t v14 = (int)v14;
      float v18 = 0.0;
      uint64_t v19 = v11;
      uint64_t v20 = (float *)(v16 + 4 * v15);
      do
      {
        float v21 = *v20++;
        float v18 = v18 + v21;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v13 * v21);
        --v19;
      }
      while (v19);
      if (vabds_f32(1.0, v18 + *(float *)(v16 + 4 * (v15 + (int)v11))) > 0.00001) {
        break;
      }
      v15 += *a4;
      if (v15 >= v9)
      {
        uint64_t result = 0;
        --*a4;
        return result;
      }
    }
    int v22 = sub_2170A4138();
    sub_216779094(__p, "Weight quantization: sum too far from 1.0");
    sub_21707FB4C((os_log_t *)v22, (uint64_t *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  return result;
}

float *sub_21709BA90(float *result, float *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    float v5 = *result;
    float v4 = result[1];
    if (v4 < *result) {
      ++result;
    }
    unint64_t v6 = v4 >= *v2 ? v2 + 1 : v2;
    float v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 >= v5) {
        float v4 = v5;
      }
      while (v7 + 1 != a2)
      {
        float v9 = *v7;
        float v8 = v7[1];
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            float v4 = *v7;
            uint64_t result = v7;
          }
          if (v8 >= *v6) {
            unint64_t v6 = v7 + 1;
          }
        }
        else
        {
          float v4 = *result;
          if (v8 < *result)
          {
            float v4 = v7[1];
            uint64_t result = v7 + 1;
          }
          if (v9 >= *v6) {
            unint64_t v6 = v7;
          }
        }
        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

uint64_t sub_21709BB64(unint64_t *a1, uint64_t *a2, unsigned char *a3, int *a4, char a5)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709BBD0(a1, a2);
      break;
    case 1:
      uint64_t result = sub_2170887C4((double **)a1, a2, (uint64_t)a3, *a4, a5);
      break;
    case 2:
      uint64_t result = sub_21709BC28(a1, a2, a4, a5);
      break;
    case 3:
      uint64_t result = sub_21709BD20((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      uint64_t result = sub_21709C30C((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709BBD0(unint64_t *a1, void *a2)
{
  sub_21681C000((uint64_t)a2, *a1);
  unint64_t v4 = *a1;
  if (*a1)
  {
    float v5 = (double *)a1[4];
    unint64_t v6 = (_DWORD *)*a2;
    do
    {
      double v7 = *v5++;
      *v6++ = (int)v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_21709BC28(unint64_t *a1, void *a2, _DWORD *a3, int a4)
{
  unint64_t v4 = *a1;
  if (!*a1) {
    return 112;
  }
  char v5 = a4;
  uint64_t result = 112;
  if (a4 >= 3 && !(v4 % 3) && *a3 == 3)
  {
    sub_21681C000((uint64_t)a2, 2 * (v4 / 3));
    if ((int)v4 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = ~(-1 << (v5 - 1));
      do
      {
        sub_2170A45BC(*a2 + v11, *a2 + v11 + 4, v13, *(double *)(a1[4] + 8 * v12), *(double *)(a1[4] + 8 * v12 + 8), *(double *)(a1[4] + 8 * v12 + 16));
        v12 += 3;
        v11 += 8;
      }
      while ((int)v12 < (int)v4);
    }
    uint64_t result = 0;
    --*a3;
  }
  return result;
}

uint64_t sub_21709BD20(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    unint64_t v6 = sub_2170A4138();
    std::to_string(&v67, v4);
    double v7 = std::string::insert(&v67, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v69 = v7->__r_.__value_.__r.__words[2];
    long long v68 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v68);
    if (SHIBYTE(v69) < 0) {
      operator delete((void *)v68);
    }
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    float v9 = (void *)v67.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  uint64_t v14 = (double *)a1[4];
  v67.__r_.__value_.__s.__data_[0] = 0;
  if (*sub_21709C494(v14, &v14[v4]) < 0.0 || *v15 > 1.0)
  {
    uint64_t v16 = sub_2170A4138();
    sub_216779094(&v68, "quantizeColorRGB: Input out of range");
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&v68);
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      return 112;
    }
    float v9 = (void *)v68;
LABEL_13:
    operator delete(v9);
    return 112;
  }
  int v18 = 1 << a4;
  float v19 = (float)v18 + -1.0;
  *(float *)(a3 + 4) = 1.0 / v19;
  LODWORD(v68) = 0;
  sub_216824364(a3 + 8, 3uLL, &v68);
  sub_21681C000((uint64_t)a2, (int)v4);
  if ((int)v4 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = a1[4];
    double v22 = v19;
    float v23 = (int32x2_t *)(*a2 + 4);
    __asm { FMOV            V7.2D, #0.5 }
    while (1)
    {
      float32x2_t v28 = (double *)(v21 + 8 * v20);
      double v29 = v28[1];
      double v30 = v28[2];
      int v31 = llround((*v28 * 0.212599993 + v29 * 0.715200007 + v30 * 0.0722000003) * v22);
      float64x2_t v32 = vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_2174AF650, *v28), vmulq_n_f64((float64x2_t)xmmword_2174AF660, v29));
      float64x2_t v33 = vmulq_n_f64((float64x2_t)xmmword_2174AF670, v30);
      *(void *)&v34.f64[0] = *(_OWORD *)&vaddq_f64(v32, v33);
      v34.f64[1] = vsubq_f64(v32, v33).f64[1];
      int32x2_t v35 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vaddq_f64(v34, _Q7), v22))));
      if (v31 < 0 || v18 <= v31 || v35.i32[0] < 0 || v18 <= v35.i32[0] || v35.i32[1] < 0 || v18 <= v35.i32[1]) {
        break;
      }
      uint64_t result = 0;
      v23[-1].i32[1] = v31;
      int32x2_t *v23 = v35;
      float v23 = (int32x2_t *)((char *)v23 + 12);
      v20 += 3;
      if ((int)v20 >= (int)v4) {
        return result;
      }
    }
    int32x2_t v57 = v35;
    BOOL v36 = sub_2170A4138();
    std::to_string(&v61, v18);
    std::string v37 = std::string::insert(&v61, 0, "quantizeColorRGB: values out of bound qp1=");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v39 = std::string::append(&v62, ", y=");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v60, v31);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v41 = &v60;
    }
    else {
      long long v41 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v60.__r_.__value_.__l.__size_;
    }
    std::string v43 = std::string::append(&v63, (const std::string::value_type *)v41, size);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::string v45 = std::string::append(&v64, ", u=");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, v57.i32[0]);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v47 = &v59;
    }
    else {
      std::string v47 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v59.__r_.__value_.__l.__size_;
    }
    std::string v49 = std::string::append(&v65, (const std::string::value_type *)v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    float v51 = std::string::append(&v66, ", v=");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, v57.i32[1]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v53 = &v58;
    }
    else {
      std::string v53 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = v58.__r_.__value_.__l.__size_;
    }
    std::string v55 = std::string::append(&v67, (const std::string::value_type *)v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    std::string::size_type v69 = v55->__r_.__value_.__r.__words[2];
    long long v68 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v36, (uint64_t *)&v68);
    if (SHIBYTE(v69) < 0) {
      operator delete((void *)v68);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    float v9 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  return 0;
}

void sub_21709C204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0) {
    operator delete(*(void **)(v54 - 160));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v54 - 169) < 0) {
    operator delete(*(void **)(v54 - 192));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709C30C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6 = *a4;
  if ((int)v6 < 2) {
    return 112;
  }
  int v9 = *(_DWORD *)a1;
  uint64_t result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    uint64_t v11 = (v6 - 1);
    unsigned int v12 = v9 / v6;
    float v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_216824364(a3 + 8, v6, __p);
    sub_21681C000((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *a2;
    while (1)
    {
      uint64_t v14 = (int)v14;
      float v18 = 0.0;
      uint64_t v19 = v11;
      uint64_t v20 = (double *)(v16 + 8 * v15);
      do
      {
        double v21 = *v20++;
        float v18 = v21 + v18;
        *(_DWORD *)(v17 + 4 * v14++) = llround(v21 * v13);
        --v19;
      }
      while (v19);
      float v22 = *(double *)(v16 + 8 * (v15 + (int)v11)) + v18;
      if (vabds_f32(1.0, v22) > 0.00001) {
        break;
      }
      v15 += *a4;
      if (v15 >= v9)
      {
        uint64_t result = 0;
        --*a4;
        return result;
      }
    }
    float v23 = sub_2170A4138();
    sub_216779094(__p, "Weight quantization: sum too far from 1.0");
    sub_21707FB4C((os_log_t *)v23, (uint64_t *)__p);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  return result;
}

double *sub_21709C494(double *result, double *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    double v5 = *result;
    double v4 = result[1];
    if (v4 < *result) {
      ++result;
    }
    unint64_t v6 = v4 >= *v2 ? v2 + 1 : v2;
    double v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 >= v5) {
        double v4 = v5;
      }
      while (v7 + 1 != a2)
      {
        double v9 = *v7;
        double v8 = v7[1];
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            double v4 = *v7;
            uint64_t result = v7;
          }
          if (v8 >= *v6) {
            unint64_t v6 = v7 + 1;
          }
        }
        else
        {
          double v4 = *result;
          if (v8 < *result)
          {
            double v4 = v7[1];
            uint64_t result = v7 + 1;
          }
          if (v9 >= *v6) {
            unint64_t v6 = v7;
          }
        }
        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

uint64_t sub_21709C568(unint64_t *a1, uint64_t *a2, unsigned char *a3, int *a4, char a5)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709C68C(a1, a2);
      break;
    case 1:
      int v6 = *a4;
      uint64_t result = sub_21709C6E0((int **)a1, a2, (uint64_t)a3, v6, a5);
      break;
    case 2:
      double v7 = sub_2170A4138();
      sub_216779094(__p, "Weight quantizeUnitary3DVector: incompatible type int");
      sub_21707FB4C((os_log_t *)v7, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_10;
    case 3:
      uint64_t result = sub_21709CB0C((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      uint64_t result = sub_21709D0F4((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_10:
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709C68C(unint64_t *a1, void *a2)
{
  sub_21681C000((uint64_t)a2, *a1);
  unint64_t v4 = *a1;
  if (*a1)
  {
    double v5 = (int *)a1[4];
    int v6 = (_DWORD *)*a2;
    do
    {
      int v7 = *v5++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_21709C6E0(int **a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1) {
    return 112;
  }
  unint64_t v7 = *(unsigned int *)a1;
  uint64_t v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_21681C000((uint64_t)a2, v7);
    uint64_t v12 = a4;
    *(float *)std::string v63 = (float)*a1[4];
    sub_217088740(&v64, a4, v63);
    *(float *)std::string __p = (float)*a1[4];
    sub_217088740(v63, a4, __p);
    uint64_t v13 = 0;
    uint64_t v14 = (float *)v63[0];
    int v15 = v64;
    uint64_t v16 = (int)v7;
    uint64_t v17 = a1[4];
    do
    {
      uint64_t v18 = a4;
      uint64_t v19 = v14;
      uint64_t v20 = (float *)v15;
      double v21 = v17;
      do
      {
        int v22 = *v21++;
        float v23 = (float)v22;
        float v24 = *v20;
        if (*v20 >= (float)v22) {
          float v24 = v23;
        }
        *v20++ = v24;
        if (*v19 > v23) {
          float v23 = *v19;
        }
        *v19++ = v23;
        --v18;
      }
      while (v18);
      v13 += a4;
      v17 += a4;
    }
    while (v13 < (int)v7);
    char v25 = v64;
    float v26 = *(float *)v63[0] - *(float *)v64;
    if (a4 >= 2)
    {
      float32x2_t v27 = (float *)((char *)v63[0] + 4);
      float32x2_t v28 = (float *)(v64 + 4);
      uint64_t v29 = a4 - 1;
      do
      {
        float v30 = *v27++;
        float v31 = v30;
        float v32 = *v28++;
        float v33 = v31 - v32;
        if (v33 >= v26) {
          float v26 = v33;
        }
        --v29;
      }
      while (v29);
    }
    int v34 = 1 << a5;
    if (a5)
    {
      if (v26 < 2.2204e-16) {
        float v26 = 1.0;
      }
      float v35 = (float)((float)v34 + -1.0) / v26;
    }
    else
    {
      float v35 = 1.0;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    long long v38 = a1[4];
    uint64_t v39 = a4;
    uint64_t v40 = 4 * a4;
    while (2)
    {
      long long v41 = (int *)(*a2 + v36);
      uint64_t v42 = v12;
      std::string v43 = (float *)v25;
      long long v44 = v38;
      do
      {
        int v45 = *v44++;
        int v46 = llroundf(v35 * (float)((float)v45 - *v43));
        if (v46 < 0 || v34 <= v46)
        {
          std::string v47 = sub_2170A4138();
          std::to_string(&v58, v46);
          std::string::size_type v48 = std::string::insert(&v58, 0, "Uniform quantization: values out of bound; qvalue=");
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          long long v50 = std::string::append(&v59, " and qp1=");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v57, 1 << a5);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v52 = &v57;
          }
          else {
            long long v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v57.__r_.__value_.__l.__size_;
          }
          uint64_t v54 = std::string::append(&v60, (const std::string::value_type *)v52, size);
          long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          std::string::size_type v62 = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v47, (uint64_t *)__p);
          if (SHIBYTE(v62) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 112;
          goto LABEL_49;
        }
        *v41++ = v46;
        ++v43;
        --v42;
      }
      while (v42);
      v37 += v39;
      long long v38 = (int *)((char *)v38 + v40);
      v36 += v40;
      if (v37 < v16) {
        continue;
      }
      break;
    }
    if ((char **)(a3 + 8) != &v64) {
      sub_216825D78((char *)(a3 + 8), v64, (uint64_t)v65, (v65 - v64) >> 2);
    }
    uint64_t v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v35;
LABEL_49:
    if (v63[0])
    {
      v63[1] = v63[0];
      operator delete(v63[0]);
    }
    if (v64)
    {
      std::string v65 = v64;
      operator delete(v64);
    }
  }
  return v8;
}

void sub_21709CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  float v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709CB0C(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    int v6 = sub_2170A4138();
    std::to_string(&v63, v4);
    unint64_t v7 = std::string::insert(&v63, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v7->__r_.__value_.__r.__words[2];
    long long v64 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    char v9 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  uint64_t v14 = (_DWORD *)a1[4];
  v63.__r_.__value_.__s.__data_[0] = 0;
  if ((*sub_217087E68(v14, &v14[v4]) & 0x80000000) != 0 || *v15 > 1)
  {
    uint64_t v16 = sub_2170A4138();
    sub_216779094(&v64, "quantizeColorRGB: Input out of range");
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
    {
      char v9 = (void *)v64;
LABEL_13:
      operator delete(v9);
    }
  }
  else
  {
    int v18 = 1 << a4;
    float v52 = (float)v18 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v52;
    LODWORD(v64) = 0;
    sub_216824364(a3 + 8, 3uLL, &v64);
    sub_21681C000((uint64_t)a2, (int)v4);
    if ((int)v4 < 1) {
      return 0;
    }
    uint64_t v19 = 0;
    uint64_t v20 = a1[4];
    for (uint64_t i = (int32x2_t *)(*a2 + 4); ; uint64_t i = (int32x2_t *)((char *)i + 12))
    {
      int v22 = (int *)(v20 + 4 * v19);
      float v23 = (float)*v22;
      float v24 = (float)v22[1];
      float v25 = (float)v22[2];
      int v26 = llroundf(v52 * (float)((float)((float)(v23 * 0.2126) + (float)(v24 * 0.7152)) + (float)(v25 * 0.0722)));
      float32x2_t v27 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v23), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v24));
      float32x2_t v28 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v25);
      v29.i32[0] = vadd_f32(v27, v28).u32[0];
      v29.i32[1] = vsub_f32(v27, v28).i32[1];
      int32x2_t v30 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v29, (float32x2_t)0x3F0000003F000000), v52)));
      if (v26 < 0 || v18 <= v26 || v30.i32[0] < 0 || v18 <= v30.i32[0] || v30.i32[1] < 0 || v18 <= v30.i32[1]) {
        break;
      }
      uint64_t result = 0;
      i[-1].i32[1] = v26;
      *uint64_t i = v30;
      v19 += 3;
      if ((int)v19 >= (int)v4) {
        return result;
      }
    }
    int32x2_t v53 = v30;
    float v31 = sub_2170A4138();
    std::to_string(&v57, v18);
    float v32 = std::string::insert(&v57, 0, "quantizeColorRGB: values out of bound qp1=");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    int v34 = std::string::append(&v58, ", y=");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v56, v26);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v56;
    }
    else {
      uint64_t v36 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    long long v38 = std::string::append(&v59, (const std::string::value_type *)v36, size);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    uint64_t v40 = std::string::append(&v60, ", u=");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v53.i32[0]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &v55;
    }
    else {
      uint64_t v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v55.__r_.__value_.__l.__size_;
    }
    long long v44 = std::string::append(&v61, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    int v46 = std::string::append(&v62, ", v=");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v53.i32[1]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = &v54;
    }
    else {
      std::string::size_type v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v54.__r_.__value_.__l.__size_;
    }
    long long v50 = std::string::append(&v63, (const std::string::value_type *)v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v50->__r_.__value_.__r.__words[2];
    long long v64 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v31, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      char v9 = (void *)v57.__r_.__value_.__r.__words[0];
      goto LABEL_13;
    }
  }
  return 112;
}

void sub_21709CFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v54 - 153) < 0) {
    operator delete(*(void **)(v54 - 176));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709D0F4(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6 = *a4;
  if ((int)v6 < 2) {
    return 112;
  }
  int v9 = *(_DWORD *)a1;
  uint64_t result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    uint64_t v11 = (v6 - 1);
    unsigned int v12 = v9 / v6;
    float v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_216824364(a3 + 8, v6, __p);
    sub_21681C000((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *a2;
    while (1)
    {
      uint64_t v14 = (int)v14;
      float v18 = 0.0;
      uint64_t v19 = v11;
      uint64_t v20 = (int *)(v16 + 4 * v15);
      do
      {
        int v21 = *v20++;
        float v18 = v18 + (float)v21;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v13 * (float)v21);
        --v19;
      }
      while (v19);
      if (vabds_f32(1.0, v18 + (float)*(int *)(v16 + 4 * (v15 + (int)v11))) > 0.00001) {
        break;
      }
      v15 += *a4;
      if (v15 >= v9)
      {
        uint64_t result = 0;
        --*a4;
        return result;
      }
    }
    int v22 = sub_2170A4138();
    sub_216779094(__p, "Weight quantization: sum too far from 1.0");
    sub_21707FB4C((os_log_t *)v22, (uint64_t *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  return result;
}

uint64_t sub_21709D270(unint64_t *a1, uint64_t *a2, unsigned char *a3, int *a4, char a5)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709D394(a1, a2);
      break;
    case 1:
      int v6 = *a4;
      uint64_t result = sub_21709D3E8((unsigned int *)a1, a2, (uint64_t)a3, v6, a5);
      break;
    case 2:
      unint64_t v7 = sub_2170A4138();
      sub_216779094(__p, "Weight quantizeUnitary3DVector: incompatible type BOOL");
      sub_21707FB4C((os_log_t *)v7, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_10;
    case 3:
      uint64_t result = sub_21709D824((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      uint64_t result = sub_21709DDC0((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_10:
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709D394(unint64_t *a1, void *a2)
{
  sub_21681C000((uint64_t)a2, *a1);
  unint64_t v4 = *a1;
  if (*a1)
  {
    double v5 = (unsigned __int8 *)a1[4];
    int v6 = (_DWORD *)*a2;
    do
    {
      int v7 = *v5++;
      *v6++ = v7;
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t sub_21709D3E8(unsigned int *a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1) {
    return 112;
  }
  unint64_t v7 = *a1;
  uint64_t v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_21681C000((uint64_t)a2, v7);
    uint64_t v12 = a4;
    if (**((unsigned char **)a1 + 4)) {
      float v13 = 1.0;
    }
    else {
      float v13 = 0.0;
    }
    *(float *)std::string::size_type v65 = v13;
    sub_217088740(&v66, a4, v65);
    if (**((unsigned char **)a1 + 4)) {
      float v14 = 1.0;
    }
    else {
      float v14 = 0.0;
    }
    *(float *)std::string __p = v14;
    sub_217088740(v65, a4, __p);
    uint64_t v15 = 0;
    uint64_t v16 = (float *)v65[0];
    uint64_t v17 = v66;
    uint64_t v18 = (int)v7;
    uint64_t v19 = (unsigned __int8 *)*((void *)a1 + 4);
    do
    {
      uint64_t v20 = a4;
      int v21 = v16;
      int v22 = (float *)v17;
      float v23 = v19;
      do
      {
        if (*v23++) {
          float v25 = 1.0;
        }
        else {
          float v25 = 0.0;
        }
        float v26 = *v22;
        if (*v22 >= v25) {
          float v26 = v25;
        }
        *v22++ = v26;
        if (*v21 > v25) {
          float v25 = *v21;
        }
        *v21++ = v25;
        --v20;
      }
      while (v20);
      v15 += a4;
      v19 += a4;
    }
    while (v15 < (int)v7);
    float32x2_t v27 = v66;
    float v28 = *(float *)v65[0] - *(float *)v66;
    if (a4 >= 2)
    {
      float32x2_t v29 = (float *)((char *)v65[0] + 4);
      int32x2_t v30 = (float *)(v66 + 4);
      uint64_t v31 = a4 - 1;
      do
      {
        float v32 = *v29++;
        float v33 = v32;
        float v34 = *v30++;
        float v35 = v33 - v34;
        if (v35 >= v28) {
          float v28 = v35;
        }
        --v31;
      }
      while (v31);
    }
    int v36 = 1 << a5;
    if (a5)
    {
      if (v28 < 2.2204e-16) {
        float v28 = 1.0;
      }
      float v37 = (float)((float)v36 + -1.0) / v28;
    }
    else
    {
      float v37 = 1.0;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int8 *)*((void *)a1 + 4);
    uint64_t v41 = a4;
    uint64_t v42 = 4 * a4;
    while (2)
    {
      std::string::size_type v43 = (int *)(*a2 + v38);
      uint64_t v44 = v12;
      long long v45 = (float *)v27;
      int v46 = v40;
      do
      {
        unsigned int v47 = *v46++;
        int v48 = llroundf(v37 * (float)((float)v47 - *v45));
        if (v48 < 0 || v36 <= v48)
        {
          std::string::size_type v49 = sub_2170A4138();
          std::to_string(&v60, v48);
          long long v50 = std::string::insert(&v60, 0, "Uniform quantization: values out of bound; qvalue=");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          float v52 = std::string::append(&v61, " and qp1=");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v59, 1 << a5);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v54 = &v59;
          }
          else {
            uint64_t v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v59.__r_.__value_.__l.__size_;
          }
          std::string v56 = std::string::append(&v62, (const std::string::value_type *)v54, size);
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          std::string::size_type v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v49, (uint64_t *)__p);
          if (SHIBYTE(v64) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 112;
          goto LABEL_58;
        }
        *v43++ = v48;
        ++v45;
        --v44;
      }
      while (v44);
      v39 += v41;
      v40 += v41;
      v38 += v42;
      if (v39 < v18) {
        continue;
      }
      break;
    }
    if ((char **)(a3 + 8) != &v66) {
      sub_216825D78((char *)(a3 + 8), v66, (uint64_t)v67, (v67 - v66) >> 2);
    }
    uint64_t v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v37;
LABEL_58:
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (v66)
    {
      std::string v67 = v66;
      operator delete(v66);
    }
  }
  return v8;
}

void sub_21709D788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  float v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  int v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709D824(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    int v6 = sub_2170A4138();
    std::to_string(&v61, v4);
    unint64_t v7 = std::string::insert(&v61, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v63 = v7->__r_.__value_.__r.__words[2];
    long long v62 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v62);
    if (SHIBYTE(v63) < 0) {
      operator delete((void *)v62);
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    char v9 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_59;
  }
  float v14 = (unsigned __int8 *)a1[4];
  v61.__r_.__value_.__s.__data_[0] = 0;
  sub_21709DF40(v14, &v14[v4]);
  int v15 = 1 << a4;
  float v50 = (float)v15 + -1.0;
  *(float *)(a3 + 4) = 1.0 / v50;
  LODWORD(v62) = 0;
  sub_216824364(a3 + 8, 3uLL, &v62);
  sub_21681C000((uint64_t)a2, (int)v4);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v19 = a1[4];
  for (uint64_t i = (int32x2_t *)(*a2 + 4); ; uint64_t i = (int32x2_t *)((char *)i + 12))
  {
    v16.i8[0] = *(unsigned char *)(v19 + v18);
    float v21 = (float)v16.u32[0];
    v17.i8[0] = *(unsigned char *)(v19 + v18 + 1);
    float v22 = (float)v17.u32[0];
    *(float *)&unsigned int v23 = v22 * 0.7152;
    LOBYTE(v23) = *(unsigned char *)(v19 + v18 + 2);
    float v24 = (float)v23;
    int v25 = llroundf(v50 * (float)((float)((float)(v21 * 0.2126) + (float)(v22 * 0.7152)) + (float)(v24 * 0.0722)));
    float32x2_t v26 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v21), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v22));
    float32x2_t v27 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v24);
    v17.i32[0] = vadd_f32(v26, v27).u32[0];
    v17.i32[1] = vsub_f32(v26, v27).i32[1];
    int32x2_t v16 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v17, (float32x2_t)0x3F0000003F000000), v50)));
    if (v25 < 0 || v15 <= v25 || v16.i32[0] < 0 || v15 <= v16.i32[0] || v16.i32[1] < 0 || v15 <= v16.i32[1]) {
      break;
    }
    i[-1].i32[1] = v25;
    *uint64_t i = v16;
    v18 += 3;
    if ((int)v18 >= (int)v4) {
      return 0;
    }
  }
  int32x2_t v51 = v16;
  float32x2_t v29 = sub_2170A4138();
  std::to_string(&v55, v15);
  int32x2_t v30 = std::string::insert(&v55, 0, "quantizeColorRGB: values out of bound qp1=");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  float v32 = std::string::append(&v56, ", y=");
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v54, v25);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v34 = &v54;
  }
  else {
    float v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  int v36 = std::string::append(&v57, (const std::string::value_type *)v34, size);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append(&v58, ", u=");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v53, v51.i32[0]);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v53;
  }
  else {
    uint64_t v40 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v53.__r_.__value_.__l.__size_;
  }
  uint64_t v42 = std::string::append(&v59, (const std::string::value_type *)v40, v41);
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  uint64_t v44 = std::string::append(&v60, ", v=");
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v52, v51.i32[1]);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v46 = &v52;
  }
  else {
    int v46 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v47 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v47 = v52.__r_.__value_.__l.__size_;
  }
  int v48 = std::string::append(&v61, (const std::string::value_type *)v46, v47);
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  std::string::size_type v63 = v48->__r_.__value_.__r.__words[2];
  long long v62 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  sub_21707FB4C((os_log_t *)v29, (uint64_t *)&v62);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    char v9 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_59:
    operator delete(v9);
  }
  return 112;
}

void sub_21709DCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v54 - 153) < 0) {
    operator delete(*(void **)(v54 - 176));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void sub_21709DDA4()
{
}

void sub_21709DDAC()
{
  if (*(char *)(v0 - 89) < 0) {
    JUMPOUT(0x21709DD98);
  }
  JUMPOUT(0x21709DD9CLL);
}

uint64_t sub_21709DDC0(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6 = *a4;
  if ((int)v6 < 2) {
    return 112;
  }
  int v9 = *(_DWORD *)a1;
  uint64_t result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    uint64_t v11 = (v6 - 1);
    unsigned int v12 = v9 / v6;
    float v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_216824364(a3 + 8, v6, __p);
    sub_21681C000((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *a2;
    while (1)
    {
      uint64_t v18 = v15;
      uint64_t v14 = (int)v14;
      float v19 = 0.0;
      uint64_t v20 = v11;
      float v21 = (unsigned __int8 *)(v16 + v15);
      do
      {
        unsigned int v22 = *v21++;
        float v19 = v19 + (float)v22;
        float v23 = v13 * (float)v22;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v23);
        --v20;
      }
      while (v20);
      LOBYTE(v23) = *(unsigned char *)(v16 + v18 + (int)v11);
      if (vabds_f32(1.0, v19 + (float)LODWORD(v23)) > 0.00001) {
        break;
      }
      int v15 = *a4 + v18;
      if (v15 >= v9)
      {
        uint64_t result = 0;
        --*a4;
        return result;
      }
    }
    float v24 = sub_2170A4138();
    sub_216779094(__p, "Weight quantization: sum too far from 1.0");
    sub_21707FB4C((os_log_t *)v24, (uint64_t *)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  return result;
}

unsigned __int8 *sub_21709DF40(unsigned __int8 *result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    unsigned int v3 = result[1];
    unsigned int v4 = *result;
    if (v3 >= v4)
    {
      double v5 = result + 1;
    }
    else
    {
      ++result;
      double v5 = v2;
    }
    unint64_t v6 = v2 + 2;
    if (v2 + 2 != a2)
    {
      if (v2 + 3 == a2)
      {
LABEL_21:
        if (*v6 < *result) {
          return v6;
        }
      }
      else
      {
        if (v3 >= v4) {
          unsigned __int8 v7 = v4;
        }
        else {
          unsigned __int8 v7 = v3;
        }
        while (1)
        {
          unsigned int v8 = v6[1];
          unsigned int v9 = *v6;
          if (v8 >= v9)
          {
            if (v9 < v7)
            {
              unsigned __int8 v7 = *v6;
              uint64_t result = v6;
            }
            if (v8 >= *v5) {
              double v5 = v6 + 1;
            }
          }
          else
          {
            unsigned __int8 v7 = 0;
            if (v8 < *result) {
              uint64_t result = v6 + 1;
            }
            double v5 = v6;
          }
          v6 += 2;
          if (v6 == a2) {
            break;
          }
          if (v6 + 1 == a2) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_21709E030(unint64_t *a1, uint64_t *a2, unsigned char *a3, int *a4, char a5)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709D394(a1, a2);
      break;
    case 1:
      int v6 = *a4;
      uint64_t result = sub_21709E154((unsigned int *)a1, a2, (uint64_t)a3, v6, a5);
      break;
    case 2:
      unsigned __int8 v7 = sub_2170A4138();
      sub_216779094(__p, "Weight quantizeUnitary3DVector: incompatible type uint8_t");
      sub_21707FB4C((os_log_t *)v7, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_10;
    case 3:
      uint64_t result = sub_21709E57C((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      uint64_t result = sub_21709DDC0((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_10:
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709E154(unsigned int *a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1) {
    return 112;
  }
  unint64_t v7 = *a1;
  uint64_t v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_21681C000((uint64_t)a2, v7);
    uint64_t v12 = a4;
    LOBYTE(v13) = **((unsigned char **)a1 + 4);
    *(float *)std::string::size_type v65 = (float)v13;
    sub_217088740(&v66, a4, v65);
    LOBYTE(v14) = **((unsigned char **)a1 + 4);
    *(float *)std::string __p = (float)v14;
    sub_217088740(v65, a4, __p);
    uint64_t v15 = 0;
    uint64_t v16 = (float *)v65[0];
    uint64_t v17 = v66;
    uint64_t v18 = (int)v7;
    float v19 = (unsigned __int8 *)*((void *)a1 + 4);
    do
    {
      uint64_t v20 = a4;
      float v21 = v16;
      unsigned int v22 = (float *)v17;
      float v23 = v19;
      do
      {
        unsigned int v24 = *v23++;
        float v25 = (float)v24;
        float v26 = *v22;
        if (*v22 >= (float)v24) {
          float v26 = v25;
        }
        *v22++ = v26;
        if (*v21 > v25) {
          float v25 = *v21;
        }
        *v21++ = v25;
        --v20;
      }
      while (v20);
      v15 += a4;
      v19 += a4;
    }
    while (v15 < (int)v7);
    float32x2_t v27 = v66;
    float v28 = *(float *)v65[0] - *(float *)v66;
    if (a4 >= 2)
    {
      float32x2_t v29 = (float *)((char *)v65[0] + 4);
      int32x2_t v30 = (float *)(v66 + 4);
      uint64_t v31 = a4 - 1;
      do
      {
        float v32 = *v29++;
        float v33 = v32;
        float v34 = *v30++;
        float v35 = v33 - v34;
        if (v35 >= v28) {
          float v28 = v35;
        }
        --v31;
      }
      while (v31);
    }
    int v36 = 1 << a5;
    if (a5)
    {
      if (v28 < 2.2204e-16) {
        float v28 = 1.0;
      }
      float v37 = (float)((float)v36 + -1.0) / v28;
    }
    else
    {
      float v37 = 1.0;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned __int8 *)*((void *)a1 + 4);
    uint64_t v41 = a4;
    uint64_t v42 = 4 * a4;
    while (2)
    {
      long long v43 = (int *)(*a2 + v38);
      uint64_t v44 = v12;
      long long v45 = (float *)v27;
      int v46 = v40;
      do
      {
        unsigned int v47 = *v46++;
        int v48 = llroundf(v37 * (float)((float)v47 - *v45));
        if (v48 < 0 || v36 <= v48)
        {
          long long v49 = sub_2170A4138();
          std::to_string(&v60, v48);
          float v50 = std::string::insert(&v60, 0, "Uniform quantization: values out of bound; qvalue=");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::string v52 = std::string::append(&v61, " and qp1=");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v59, 1 << a5);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v54 = &v59;
          }
          else {
            uint64_t v54 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v59.__r_.__value_.__l.__size_;
          }
          std::string v56 = std::string::append(&v62, (const std::string::value_type *)v54, size);
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          std::string::size_type v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v49, (uint64_t *)__p);
          if (SHIBYTE(v64) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 112;
          goto LABEL_49;
        }
        *v43++ = v48;
        ++v45;
        --v44;
      }
      while (v44);
      v39 += v41;
      v40 += v41;
      v38 += v42;
      if (v39 < v18) {
        continue;
      }
      break;
    }
    if ((char **)(a3 + 8) != &v66) {
      sub_216825D78((char *)(a3 + 8), v66, (uint64_t)v67, (v67 - v66) >> 2);
    }
    uint64_t v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v37;
LABEL_49:
    if (v65[0])
    {
      v65[1] = v65[0];
      operator delete(v65[0]);
    }
    if (v66)
    {
      std::string v67 = v66;
      operator delete(v66);
    }
  }
  return v8;
}

void sub_21709E4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  float v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  int v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709E57C(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    int v6 = sub_2170A4138();
    std::to_string(&v63, v4);
    unint64_t v7 = std::string::insert(&v63, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v7->__r_.__value_.__r.__words[2];
    long long v64 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    char v9 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_62;
  }
  unsigned int v14 = (unsigned __int8 *)a1[4];
  v63.__r_.__value_.__s.__data_[0] = 0;
  sub_21709EB58(v14, &v14[v4]);
  if (*v15 < 2u)
  {
    int v17 = 1 << a4;
    float v52 = (float)v17 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v52;
    LODWORD(v64) = 0;
    sub_216824364(a3 + 8, 3uLL, &v64);
    sub_21681C000((uint64_t)a2, (int)v4);
    if ((int)v4 < 1) {
      return 0;
    }
    uint64_t v20 = 0;
    uint64_t v21 = a1[4];
    for (uint64_t i = (int32x2_t *)(*a2 + 4); ; uint64_t i = (int32x2_t *)((char *)i + 12))
    {
      v18.i8[0] = *(unsigned char *)(v21 + v20);
      float v23 = (float)v18.u32[0];
      v19.i8[0] = *(unsigned char *)(v21 + v20 + 1);
      float v24 = (float)v19.u32[0];
      *(float *)&unsigned int v25 = v24 * 0.7152;
      LOBYTE(v25) = *(unsigned char *)(v21 + v20 + 2);
      float v26 = (float)v25;
      int v27 = llroundf(v52 * (float)((float)((float)(v23 * 0.2126) + (float)(v24 * 0.7152)) + (float)(v26 * 0.0722)));
      float32x2_t v28 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v23), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v24));
      float32x2_t v29 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v26);
      v19.i32[0] = vadd_f32(v28, v29).u32[0];
      v19.i32[1] = vsub_f32(v28, v29).i32[1];
      int32x2_t v18 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v19, (float32x2_t)0x3F0000003F000000), v52)));
      if (v27 < 0 || v17 <= v27 || v18.i32[0] < 0 || v17 <= v18.i32[0] || v18.i32[1] < 0 || v17 <= v18.i32[1]) {
        break;
      }
      i[-1].i32[1] = v27;
      *uint64_t i = v18;
      v20 += 3;
      if ((int)v20 >= (int)v4) {
        return 0;
      }
    }
    int32x2_t v53 = v18;
    uint64_t v31 = sub_2170A4138();
    std::to_string(&v57, v17);
    float v32 = std::string::insert(&v57, 0, "quantizeColorRGB: values out of bound qp1=");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    float v34 = std::string::append(&v58, ", y=");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v56, v27);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v36 = &v56;
    }
    else {
      int v36 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = std::string::append(&v59, (const std::string::value_type *)v36, size);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    uint64_t v40 = std::string::append(&v60, ", u=");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v53.i32[0]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &v55;
    }
    else {
      uint64_t v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v55.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = std::string::append(&v61, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    int v46 = std::string::append(&v62, ", v=");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v53.i32[1]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v48 = &v54;
    }
    else {
      int v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v54.__r_.__value_.__l.__size_;
    }
    float v50 = std::string::append(&v63, (const std::string::value_type *)v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v50->__r_.__value_.__r.__words[2];
    long long v64 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v31, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      char v9 = (void *)v57.__r_.__value_.__r.__words[0];
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v16 = sub_2170A4138();
    sub_216779094(&v64, "quantizeColorRGB: Input out of range");
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
    {
      char v9 = (void *)v64;
LABEL_62:
      operator delete(v9);
    }
  }
  return 112;
}

void sub_21709EA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v54 - 153) < 0) {
    operator delete(*(void **)(v54 - 176));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_21709EB58(unsigned __int8 *result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    unsigned int v4 = result[1];
    unsigned int v5 = *result;
    if (v4 >= v5)
    {
      int v6 = result + 1;
    }
    else
    {
      ++result;
      int v6 = v2;
    }
    unint64_t v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5) {
        LOBYTE(v8) = v5;
      }
      else {
        LOBYTE(v8) = v4;
      }
      if (v4 >= v5) {
        LOBYTE(v4) = v5;
      }
      while (v7 + 1 != a2)
      {
        unsigned int v9 = v7[1];
        unsigned int v10 = *v7;
        if (v9 >= v10)
        {
          if (v10 < v4)
          {
            LOBYTE(v4) = *v7;
            uint64_t result = v7;
          }
          BOOL v12 = v9 >= v8;
          if (v9 > v8) {
            LOBYTE(v8) = v7[1];
          }
          if (v12) {
            int v6 = v7 + 1;
          }
        }
        else
        {
          unsigned int v4 = *result;
          if (v9 < v4)
          {
            LOBYTE(v4) = v7[1];
            uint64_t result = v7 + 1;
          }
          unsigned int v8 = *v6;
          BOOL v11 = v10 >= v8;
          if (v10 > v8) {
            LOBYTE(v8) = *v7;
          }
          if (v11) {
            int v6 = v7;
          }
        }
        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

uint64_t sub_21709EC44(unint64_t *a1, uint64_t *a2, unsigned char *a3, int *a4, char a5)
{
  switch(*a3)
  {
    case 0:
      uint64_t result = sub_21709C68C(a1, a2);
      break;
    case 1:
      int v6 = *a4;
      uint64_t result = sub_21709ED68((unsigned int **)a1, a2, (uint64_t)a3, v6, a5);
      break;
    case 2:
      unint64_t v7 = sub_2170A4138();
      sub_216779094(__p, "Weight quantizeUnitary3DVector: incompatible type unsigned int");
      sub_21707FB4C((os_log_t *)v7, (uint64_t *)__p);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_10;
    case 3:
      uint64_t result = sub_21709F194((uint64_t *)a1, a2, (uint64_t)a3, a5);
      break;
    case 4:
      uint64_t result = sub_21709F76C((uint64_t)a1, a2, (uint64_t)a3, a4, a5);
      break;
    default:
LABEL_10:
      uint64_t result = 112;
      break;
  }
  return result;
}

uint64_t sub_21709ED68(unsigned int **a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1) {
    return 112;
  }
  unint64_t v7 = *(unsigned int *)a1;
  uint64_t v8 = 112;
  if ((int)v7 >= a4 && !((int)v7 % a4))
  {
    sub_21681C000((uint64_t)a2, v7);
    uint64_t v12 = a4;
    *(float *)std::string v63 = (float)*a1[4];
    sub_217088740(&v64, a4, v63);
    *(float *)std::string __p = (float)*a1[4];
    sub_217088740(v63, a4, __p);
    uint64_t v13 = 0;
    unsigned int v14 = (float *)v63[0];
    uint64_t v15 = v64;
    uint64_t v16 = (int)v7;
    int v17 = a1[4];
    do
    {
      uint64_t v18 = a4;
      float32x2_t v19 = v14;
      uint64_t v20 = (float *)v15;
      uint64_t v21 = v17;
      do
      {
        unsigned int v22 = *v21++;
        float v23 = (float)v22;
        float v24 = *v20;
        if (*v20 >= (float)v22) {
          float v24 = v23;
        }
        *v20++ = v24;
        if (*v19 > v23) {
          float v23 = *v19;
        }
        *v19++ = v23;
        --v18;
      }
      while (v18);
      v13 += a4;
      v17 += a4;
    }
    while (v13 < (int)v7);
    unsigned int v25 = v64;
    float v26 = *(float *)v63[0] - *(float *)v64;
    if (a4 >= 2)
    {
      int v27 = (float *)((char *)v63[0] + 4);
      float32x2_t v28 = (float *)(v64 + 4);
      uint64_t v29 = a4 - 1;
      do
      {
        float v30 = *v27++;
        float v31 = v30;
        float v32 = *v28++;
        float v33 = v31 - v32;
        if (v33 >= v26) {
          float v26 = v33;
        }
        --v29;
      }
      while (v29);
    }
    int v34 = 1 << a5;
    if (a5)
    {
      if (v26 < 2.2204e-16) {
        float v26 = 1.0;
      }
      float v35 = (float)((float)v34 + -1.0) / v26;
    }
    else
    {
      float v35 = 1.0;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = a1[4];
    uint64_t v39 = a4;
    uint64_t v40 = 4 * a4;
    while (2)
    {
      long long v41 = (int *)(*a2 + v36);
      uint64_t v42 = v12;
      std::string::size_type v43 = (float *)v25;
      uint64_t v44 = v38;
      do
      {
        unsigned int v45 = *v44++;
        int v46 = llroundf(v35 * (float)((float)v45 - *v43));
        if (v46 < 0 || v34 <= v46)
        {
          long long v47 = sub_2170A4138();
          std::to_string(&v58, v46);
          int v48 = std::string::insert(&v58, 0, "Uniform quantization: values out of bound; qvalue=");
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          float v50 = std::string::append(&v59, " and qp1=");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v57, 1 << a5);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            float v52 = &v57;
          }
          else {
            float v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v57.__r_.__value_.__l.__size_;
          }
          uint64_t v54 = std::string::append(&v60, (const std::string::value_type *)v52, size);
          long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          std::string::size_type v62 = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          sub_21707FB4C((os_log_t *)v47, (uint64_t *)__p);
          if (SHIBYTE(v62) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = 112;
          goto LABEL_49;
        }
        *v41++ = v46;
        ++v43;
        --v42;
      }
      while (v42);
      v37 += v39;
      uint64_t v38 = (unsigned int *)((char *)v38 + v40);
      v36 += v40;
      if (v37 < v16) {
        continue;
      }
      break;
    }
    if ((char **)(a3 + 8) != &v64) {
      sub_216825D78((char *)(a3 + 8), v64, (uint64_t)v65, (v65 - v64) >> 2);
    }
    uint64_t v8 = 0;
    *(float *)(a3 + 4) = 1.0 / v35;
LABEL_49:
    if (v63[0])
    {
      v63[1] = v63[0];
      operator delete(v63[0]);
    }
    if (v64)
    {
      std::string::size_type v65 = v64;
      operator delete(v64);
    }
  }
  return v8;
}

void sub_21709F0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  float v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(void *)(v33 - 120) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709F194(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 < 3 || (int)*a1 % 3 != 0)
  {
    int v6 = sub_2170A4138();
    std::to_string(&v63, v4);
    unint64_t v7 = std::string::insert(&v63, 0, "quantizeColorRGB: Incompatible data dimension: componentCount ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v7->__r_.__value_.__r.__words[2];
    long long v64 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v6, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 112;
    }
    char v9 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_62;
  }
  unsigned int v14 = (unsigned int *)a1[4];
  v63.__r_.__value_.__s.__data_[0] = 0;
  sub_21709F8E8(v14, &v14[v4]);
  if (*v15 < 2u)
  {
    int v17 = 1 << a4;
    float v52 = (float)v17 + -1.0;
    *(float *)(a3 + 4) = 1.0 / v52;
    LODWORD(v64) = 0;
    sub_216824364(a3 + 8, 3uLL, &v64);
    sub_21681C000((uint64_t)a2, (int)v4);
    if ((int)v4 < 1) {
      return 0;
    }
    uint64_t v18 = 0;
    uint64_t v19 = a1[4];
    for (uint64_t i = (int32x2_t *)(*a2 + 4); ; uint64_t i = (int32x2_t *)((char *)i + 12))
    {
      uint64_t v21 = (unsigned int *)(v19 + 4 * v18);
      float v22 = (float)*v21;
      float v23 = (float)v21[1];
      float v24 = (float)v21[2];
      int v25 = llroundf(v52 * (float)((float)((float)(v22 * 0.2126) + (float)(v23 * 0.7152)) + (float)(v24 * 0.0722)));
      float32x2_t v26 = vadd_f32(vmul_n_f32((float32x2_t)0x3F000000BDEAB368, v22), vmul_n_f32((float32x2_t)0xBEE88CE7BEC55326, v23));
      float32x2_t v27 = vmul_n_f32((float32x2_t)0x3D3B98C83F000000, v24);
      v28.i32[0] = vadd_f32(v26, v27).u32[0];
      v28.i32[1] = vsub_f32(v26, v27).i32[1];
      int32x2_t v29 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vadd_f32(v28, (float32x2_t)0x3F0000003F000000), v52)));
      if (v25 < 0 || v17 <= v25 || v29.i32[0] < 0 || v17 <= v29.i32[0] || v29.i32[1] < 0 || v17 <= v29.i32[1]) {
        break;
      }
      i[-1].i32[1] = v25;
      *uint64_t i = v29;
      v18 += 3;
      if ((int)v18 >= (int)v4) {
        return 0;
      }
    }
    int32x2_t v53 = v29;
    float v31 = sub_2170A4138();
    std::to_string(&v57, v17);
    float v32 = std::string::insert(&v57, 0, "quantizeColorRGB: values out of bound qp1=");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    int v34 = std::string::append(&v58, ", y=");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v56, v25);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v56;
    }
    else {
      uint64_t v36 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = std::string::append(&v59, (const std::string::value_type *)v36, size);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    uint64_t v40 = std::string::append(&v60, ", u=");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v55, v53.i32[0]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &v55;
    }
    else {
      uint64_t v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v55.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = std::string::append(&v61, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    int v46 = std::string::append(&v62, ", v=");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v54, v53.i32[1]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v48 = &v54;
    }
    else {
      int v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v54.__r_.__value_.__l.__size_;
    }
    float v50 = std::string::append(&v63, (const std::string::value_type *)v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    std::string::size_type v65 = v50->__r_.__value_.__r.__words[2];
    long long v64 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    sub_21707FB4C((os_log_t *)v31, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      char v9 = (void *)v57.__r_.__value_.__r.__words[0];
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v16 = sub_2170A4138();
    sub_216779094(&v64, "quantizeColorRGB: Input out of range");
    sub_21707FB4C((os_log_t *)v16, (uint64_t *)&v64);
    if (SHIBYTE(v65) < 0)
    {
      char v9 = (void *)v64;
LABEL_62:
      operator delete(v9);
    }
  }
  return 112;
}

void sub_21709F664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0) {
    operator delete(*(void **)(v54 - 144));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v54 - 153) < 0) {
    operator delete(*(void **)(v54 - 176));
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21709F76C(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, char a5)
{
  unint64_t v6 = *a4;
  if ((int)v6 < 2) {
    return 112;
  }
  int v9 = *(_DWORD *)a1;
  uint64_t result = 112;
  if ((int)v6 <= v9 && !(v9 % (int)v6))
  {
    uint64_t v11 = (v6 - 1);
    unsigned int v12 = v9 / v6;
    float v13 = (float)(1 << a5) + -1.0;
    *(float *)(a3 + 4) = 1.0 / v13;
    LODWORD(__p[0]) = 0;
    sub_216824364(a3 + 8, v6, __p);
    sub_21681C000((uint64_t)a2, (int)(v12 * v11));
    LODWORD(v14) = 0;
    int v15 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *a2;
    while (1)
    {
      uint64_t v14 = (int)v14;
      float v18 = 0.0;
      uint64_t v19 = v11;
      uint64_t v20 = (unsigned int *)(v16 + 4 * v15);
      do
      {
        unsigned int v21 = *v20++;
        float v18 = v18 + (float)v21;
        *(_DWORD *)(v17 + 4 * v14++) = llroundf(v13 * (float)v21);
        --v19;
      }
      while (v19);
      if (vabds_f32(1.0, v18 + (float)*(unsigned int *)(v16 + 4 * (v15 + (int)v11))) > 0.00001) {
        break;
      }
      v15 += *a4;
      if (v15 >= v9)
      {
        uint64_t result = 0;
        --*a4;
        return result;
      }
    }
    float v22 = sub_2170A4138();
    sub_216779094(__p, "Weight quantization: sum too far from 1.0");
    sub_21707FB4C((os_log_t *)v22, (uint64_t *)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    return 112;
  }
  return result;
}

unsigned int *sub_21709F8E8(unsigned int *result, unsigned int *a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 1 != a2)
  {
    unsigned int v5 = *result;
    unsigned int v4 = result[1];
    if (v4 < *result) {
      ++result;
    }
    unint64_t v6 = v4 >= v5 ? v2 + 1 : v2;
    unint64_t v7 = v2 + 2;
    if (v7 != a2)
    {
      if (v4 <= v5) {
        unsigned int v8 = v5;
      }
      else {
        unsigned int v8 = v4;
      }
      if (v4 >= v5) {
        unsigned int v4 = v5;
      }
      while (v7 + 1 != a2)
      {
        unsigned int v10 = *v7;
        unsigned int v9 = v7[1];
        if (v9 >= *v7)
        {
          if (v10 < v4)
          {
            unsigned int v4 = *v7;
            uint64_t result = v7;
          }
          BOOL v11 = v9 >= v8;
          if (v9 > v8) {
            unsigned int v8 = v7[1];
          }
          if (v11) {
            unint64_t v6 = v7 + 1;
          }
        }
        else
        {
          unsigned int v4 = *result;
          if (v9 < *result)
          {
            unsigned int v4 = v7[1];
            uint64_t result = v7 + 1;
          }
          unsigned int v8 = *v6;
          if (v10 > *v6) {
            unsigned int v8 = *v7;
          }
          if (v10 >= *v6) {
            unint64_t v6 = v7;
          }
        }
        v7 += 2;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

uint64_t sub_21709F9C4(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_21709FA44((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_21709FA2C(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_21709FA44(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_216789A4C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_21709FAC8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_21709FAC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21709FB54(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_21709FB70(std::string *__str, std::string *this)
{
  std::string::operator=(this, __str);
  std::string::operator=(this + 1, (std::string *)((char *)__str + 112));
  sub_2170819D0(__str[5].__r_.__value_.__s.__data_[16], (atomic_uint **)&v8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (const std::string *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  std::string::operator=(this + 2, EmptyString);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = __str[6].__r_.__value_.__l.__data_;
  this[3].__r_.__value_.__s.__data_[4] = __str[6].__r_.__value_.__s.__data_[4];
  sub_216779094(&v8, off_264294690[__str[3].__r_.__value_.__s.__data_[0]]);
  p_std::string::size_type size = (void **)&this[3].__r_.__value_.__l.__size_;
  if (this[4].__r_.__value_.__s.__data_[7] < 0) {
    operator delete(*p_size);
  }
  *(_OWORD *)p_std::string::size_type size = v8;
  this[4].__r_.__value_.__r.__words[0] = v9;
  LODWORD(this[4].__r_.__value_.__r.__words[1]) = HIDWORD(__str[3].__r_.__value_.__r.__words[0]);
  uint64_t result = &this[4].__r_.__value_.__s.__data_[16];
  if (&this[4].__r_.__value_.__r.__words[2] != &__str[3].__r_.__value_.__r.__words[1]) {
    return sub_216825D78(result, (char *)__str[3].__r_.__value_.__l.__size_, __str[3].__r_.__value_.__r.__words[2], (uint64_t)(__str[3].__r_.__value_.__r.__words[2] - __str[3].__r_.__value_.__l.__size_) >> 2);
  }
  return result;
}

void *sub_21709FC94()
{
  void v31[3] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95348))
  {
    v2[0] = 0;
    sub_216779094(v3, "nm");
    int v4 = 2;
    sub_216779094(v5, "fg2ss");
    int v6 = 1;
    sub_216779094(v7, "ssn");
    int v8 = 3;
    sub_216779094(v9, "fn");
    int v10 = 4;
    sub_216779094(v11, "sc");
    int v12 = 5;
    sub_216779094(v13, "sh");
    int v14 = 6;
    sub_216779094(v15, "attr");
    int v16 = 7;
    sub_216779094(v17, "nm");
    int v18 = 8;
    sub_216779094(v19, "tp");
    int v20 = 9;
    sub_216779094(v21, "int");
    int v22 = 10;
    sub_216779094(v23, "usdCPV");
    int v24 = 11;
    sub_216779094(v25, "isPV");
    int v26 = 12;
    sub_216779094(v27, "fn");
    int v28 = 13;
    sub_216779094(v29, "sc");
    int v30 = 14;
    sub_216779094(v31, "sh");
    sub_2170A3790((uint64_t)&unk_267B95330, v2, 15);
    uint64_t v1 = 120;
    do
    {
      if (SHIBYTE(v2[v1 - 1]) < 0) {
        operator delete(*(void **)&v2[v1 - 6]);
      }
      v1 -= 8;
    }
    while (v1 * 4);
    __cxa_guard_release(&qword_267B95348);
  }
  return &unk_267B95330;
}

void sub_21709FF20(_Unwind_Exception *a1)
{
  uint64_t v3 = 480;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0) {
      operator delete(*(void **)(v1 + v3 - 24));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_267B95348);
      _Unwind_Resume(a1);
    }
  }
}

void sub_21709FFB4()
{
}

uint64_t sub_21709FFBC(uint64_t a1, char *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::JsParseString(a2, 0, a3, (pxrInternal__aapl__pxrReserved__::JsValue *)&v15);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v15))
  {
    int v4 = sub_2170A4138();
    std::operator+<char>();
    sub_21707FB4C((os_log_t *)v4, (uint64_t *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = 300;
  }
  else
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v15);
    sub_2168BB7AC((uint64_t *)__p, JsObject);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v10, __p);
    int v7 = sub_2170A0134(a1, (unint64_t **)&v10);
    if (v11) {
      sub_216784EC4(v11);
    }
    if (v7)
    {
      int v8 = sub_2170A4138();
      std::operator+<char>();
      sub_21707FB4C((os_log_t *)v8, (uint64_t *)&v10);
      if (v12 < 0) {
        operator delete(v10);
      }
      uint64_t v5 = 301;
    }
    else
    {
      uint64_t v5 = 0;
    }
    sub_216812ED4((uint64_t)__p, (void *)__p[1]);
  }
  if (v16) {
    sub_216784EC4(v16);
  }
  return v5;
}

void sub_2170A00E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  sub_216812ED4((uint64_t)&a12, a13);
  int v15 = *(std::__shared_weak_count **)(v13 - 24);
  if (v15) {
    sub_216784EC4(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170A0134(uint64_t a1, unint64_t **this)
{
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)this))
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(this);
    sub_2168BB7AC((uint64_t *)&v112, JsObject);
    sub_21709FC94();
    LODWORD(v101.__r_.__value_.__l.__data_) = 0;
    uint64_t v5 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v101);
    if (v113 == (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v5))
    {
      uint64_t v37 = sub_2170A4138();
      sub_21709FC94();
      LODWORD(__p[0]) = 0;
      sub_2170A25A0((uint64_t)&unk_267B95330, (int *)__p);
      std::operator+<char>();
    }
    else
    {
      sub_21709FC94();
      LODWORD(v101.__r_.__value_.__l.__data_) = 6;
      int v6 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v101);
      if (v113 != (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v6))
      {
        memset(&v101, 0, sizeof(v101));
        v103[0] = 0;
        v103[1] = 0;
        uint64_t v102 = (uint64_t *)v103;
        memset(&v104, 0, sizeof(v104));
        long long v106 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        sub_21709FC94();
        LODWORD(v98) = 0;
        __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
        int v7 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v7 + 7)))
        {
          sub_21709FC94();
          LODWORD(v98) = 0;
          __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
          int v8 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
          unint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v8 + 7));
          std::string::operator=(&v101, String);
          sub_21709FC94();
          LODWORD(v98) = 3;
          int v10 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
          if (v113 == (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v10)
            || (sub_21709FC94(),
                LODWORD(v93) = 3,
                __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93),
                BOOL v11 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p),
                !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v11 + 7))))
          {
            uint64_t v38 = sub_2170A4138();
            sub_21709FC94();
            LODWORD(v98) = 3;
            sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
            std::operator+<char>();
          }
          else
          {
            sub_21709FC94();
            LODWORD(v98) = 3;
            __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
            char v12 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
            uint64_t v13 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v12 + 7));
            std::string::operator=(&v104, v13);
            sub_21709FC94();
            LODWORD(v98) = 4;
            char v14 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
            if (v113 == (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v14)
              || (sub_21709FC94(),
                  LODWORD(v93) = 4,
                  __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93),
                  int v15 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p),
                  !pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)(v15 + 7))))
            {
              uint64_t v38 = sub_2170A4138();
              sub_21709FC94();
              LODWORD(v98) = 4;
              sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
              std::operator+<char>();
            }
            else
            {
              sub_21709FC94();
              LODWORD(v98) = 4;
              __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
              int v16 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
              float Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)v16 + 7);
              float v105 = Real;
              sub_21709FC94();
              LODWORD(v98) = 5;
              int v18 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
              if (v113 != (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v18))
              {
                sub_21709FC94();
                LODWORD(v93) = 5;
                __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93);
                uint64_t v19 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v19 + 7)))
                {
                  sub_21709FC94();
                  LODWORD(v93) = 5;
                  __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93);
                  int v20 = sub_2170A3AA4(&v112, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
                  JsArray = (void **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v20 + 7);
                  uint64_t v98 = 0;
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                  sub_2168BBA24(&v98, *JsArray, JsArray[1], ((char *)JsArray[1] - (char *)*JsArray) >> 4);
                  *((void *)&v106 + 1) = v106;
                  uint64_t v22 = v98;
                  for (uint64_t i = v99; v22 != i; v22 += 16)
                  {
                    std::string v93 = *(void **)v22;
                    int v24 = *(std::__shared_weak_count **)(v22 + 8);
                    uint64_t v94 = v24;
                    if (v24) {
                      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    Isfloat Real = pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v93);
                    if (IsReal)
                    {
                      float v26 = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)&v93);
                      *(float *)std::string __p = v26;
                      sub_2170A2710((uint64_t)&v106, __p);
                    }
                    else
                    {
                      float32x2_t v27 = sub_2170A4138();
                      sub_21709FC94();
                      LODWORD(v89) = 5;
                      sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                      std::operator+<char>();
                      sub_21707FB4C((os_log_t *)v27, (uint64_t *)__p);
                      if (SBYTE7(v78) < 0) {
                        operator delete(__p[0]);
                      }
                    }
                    if (v94) {
                      sub_216784EC4(v94);
                    }
                    if (!IsReal) {
                      goto LABEL_122;
                    }
                  }
                  unsigned int v28 = *(unsigned __int8 *)(a1 + 220);
                  if (v28 > 1 || v28 == 1 && *(unsigned __int8 *)(a1 + 221) >= 5u)
                  {
                    sub_21709FC94();
                    LODWORD(__p[0]) = 2;
                    int32x2_t v29 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)__p);
                    if (v113 == (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v29)
                      || (sub_21709FC94(),
                          LODWORD(v89) = 2,
                          std::string v93 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89),
                          int v30 = sub_2170A3AA4(&v112, (const void **)v93, (uint64_t)&unk_2174BFD90, (long long **)&v93),
                          !pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v30 + 7))))
                    {
                      uint64_t v40 = sub_2170A4138();
                      sub_21709FC94();
                      LODWORD(v93) = 2;
                      sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93);
                      std::operator+<char>();
LABEL_114:
                      sub_21707FB4C((os_log_t *)v40, (uint64_t *)__p);
                      if (SBYTE7(v78) < 0) {
                        operator delete(__p[0]);
                      }
                      goto LABEL_122;
                    }
                    sub_21709FC94();
                    LODWORD(v89) = 2;
                    std::string v93 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                    float v31 = sub_2170A3AA4(&v112, (const void **)v93, (uint64_t)&unk_2174BFD90, (long long **)&v93);
                    float v32 = (void **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v31 + 7);
                    __p[0] = 0;
                    __p[1] = 0;
                    *(void *)&long long v78 = 0;
                    sub_2168BBA24(__p, *v32, v32[1], ((char *)v32[1] - (char *)*v32) >> 4);
                    long long v33 = (void *)*((void *)&v109 + 1);
                    int v34 = (void *)v109;
                    while (v33 != v34)
                    {
                      v33 -= 3;
                      sub_2168505B4(v33);
                    }
                    *((void *)&v109 + 1) = v34;
                    uint64_t v42 = (char *)__p[0];
                    long long v41 = (char *)__p[1];
                    if (__p[0] != __p[1])
                    {
                      do
                      {
                        std::string::size_type v43 = (std::__shared_weak_count *)*((void *)v42 + 1);
                        std::string v96 = *(std::__shared_weak_count_vtbl **)v42;
                        std::string v97 = v43;
                        if (v43) {
                          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v96))
                        {
                          std::string v93 = &v93;
                          uint64_t v94 = (std::__shared_weak_count *)&v93;
                          uint64_t v95 = 0;
                          uint64_t v44 = (uint64_t *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v96);
                          uint64_t v45 = *v44;
                          uint64_t v46 = v44[1];
                          while (1)
                          {
                            if (v45 == v46)
                            {
                              sub_2170A27F8((uint64_t)&v109, (uint64_t)&v93);
                              int v54 = 0;
                              goto LABEL_77;
                            }
                            std::string v91 = *(void ***)v45;
                            long long v47 = *(std::__shared_weak_count **)(v45 + 8);
                            std::string v92 = v47;
                            if (v47) {
                              atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            BOOL IsInt = pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)&v91);
                            if (IsInt)
                            {
                              int Int = pxrInternal__aapl__pxrReserved__::JsValue::GetInt((uint64_t **)&v91);
                              float v50 = operator new(0x18uLL);
                              void v50[4] = Int;
                              long long v51 = v93;
                              *(void *)float v50 = v93;
                              *((void *)v50 + 1) = &v93;
                              v51[1] = v50;
                              std::string v93 = v50;
                              ++v95;
                            }
                            else
                            {
                              float v52 = sub_2170A4138();
                              sub_21709FC94();
                              int v88 = 2;
                              sub_2170A25A0((uint64_t)&unk_267B95330, &v88);
                              std::operator+<char>();
                              sub_21707FB4C((os_log_t *)v52, (uint64_t *)&v89);
                              if (SHIBYTE(v90) < 0) {
                                operator delete(v89);
                              }
                            }
                            if (v92) {
                              sub_216784EC4(v92);
                            }
                            if (!IsInt) {
                              break;
                            }
                            v45 += 16;
                          }
                          int v54 = 1;
LABEL_77:
                          sub_2168505B4(&v93);
                        }
                        else
                        {
                          int32x2_t v53 = sub_2170A4138();
                          sub_21709FC94();
                          LODWORD(v89) = 2;
                          sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                          std::operator+<char>();
                          sub_21707FB4C((os_log_t *)v53, (uint64_t *)&v93);
                          if (SHIBYTE(v95) < 0) {
                            operator delete(v93);
                          }
                          int v54 = 1;
                        }
                        if (v97) {
                          sub_216784EC4(v97);
                        }
                        if (v54) {
                          goto LABEL_121;
                        }
                        v42 += 16;
                      }
                      while (v42 != v41);
                    }
                    sub_21709FC94();
                    LODWORD(v93) = 1;
                    std::string v55 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93);
                    if (v113 == (void **)sub_21678C2D8((uint64_t)&v112, (const void **)v55)
                      || (sub_21709FC94(),
                          LODWORD(v96) = 1,
                          long long v89 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v96),
                          std::string v56 = sub_2170A3AA4(&v112, (const void **)v89, (uint64_t)&unk_2174BFD90, (long long **)&v89),
                          !pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v56 + 7))))
                    {
                      std::string v61 = sub_2170A4138();
                      sub_21709FC94();
                      LODWORD(v89) = 1;
                      sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                      std::operator+<char>();
                      sub_21707FB4C((os_log_t *)v61, (uint64_t *)&v93);
                      if (SHIBYTE(v95) < 0) {
                        operator delete(v93);
                      }
LABEL_121:
                      std::string v93 = __p;
                      sub_216787968((void ***)&v93);
LABEL_122:
                      uint64_t v36 = 301;
LABEL_123:
                      __p[0] = &v98;
                      sub_216787968((void ***)__p);
LABEL_45:
                      __p[0] = (char *)&v110 + 8;
                      sub_216782F20((void ***)__p);
                      __p[0] = &v109;
                      sub_217087F44((void ***)__p);
                      if (*((void *)&v107 + 1))
                      {
                        *(void *)&long long v108 = *((void *)&v107 + 1);
                        operator delete(*((void **)&v107 + 1));
                      }
                      if ((void)v106)
                      {
                        *((void *)&v106 + 1) = v106;
                        operator delete((void *)v106);
                      }
                      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v104.__r_.__value_.__l.__data_);
                      }
                      sub_2170879BC((uint64_t)&v102, v103[0]);
                      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v101.__r_.__value_.__l.__data_);
                      }
LABEL_53:
                      sub_216812ED4((uint64_t)&v112, v113[0]);
                      return v36;
                    }
                    sub_21709FC94();
                    LODWORD(v96) = 1;
                    long long v89 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v96);
                    std::string v57 = sub_2170A3AA4(&v112, (const void **)v89, (uint64_t)&unk_2174BFD90, (long long **)&v89);
                    std::string v58 = (void **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v57 + 7);
                    std::string v93 = 0;
                    uint64_t v94 = 0;
                    uint64_t v95 = 0;
                    sub_2168BBA24(&v93, *v58, v58[1], ((char *)v58[1] - (char *)*v58) >> 4);
                    uint64_t v59 = *((void *)&v110 + 1);
                    for (uint64_t j = v111; j != v59; j -= 24)
                    {
                      if (*(char *)(j - 1) < 0) {
                        operator delete(*(void **)(j - 24));
                      }
                    }
                    *(void *)&long long v111 = v59;
                    std::string v62 = (std::__shared_weak_count *)v93;
                    std::string v63 = v94;
                    if (v93 != v94)
                    {
                      while (1)
                      {
                        std::string v96 = v62->__vftable;
                        shared_owners = (std::__shared_weak_count *)v62->__shared_owners_;
                        std::string v97 = shared_owners;
                        if (shared_owners) {
                          atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        Isunint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v96);
                        if (IsString)
                        {
                          std::string v66 = (long long *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v96);
                          sub_2170A284C((uint64_t *)&v110 + 1, v66);
                        }
                        else
                        {
                          std::string v67 = sub_2170A4138();
                          sub_21709FC94();
                          LODWORD(v91) = 1;
                          sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v91);
                          std::operator+<char>();
                          sub_21707FB4C((os_log_t *)v67, (uint64_t *)&v89);
                          if (SHIBYTE(v90) < 0) {
                            operator delete(v89);
                          }
                        }
                        if (v97) {
                          sub_216784EC4(v97);
                        }
                        if (!IsString) {
                          break;
                        }
                        std::string v62 = (std::__shared_weak_count *)((char *)v62 + 16);
                        if (v62 == v63) {
                          goto LABEL_102;
                        }
                      }
                      long long v89 = &v93;
                      sub_216787968((void ***)&v89);
                      goto LABEL_121;
                    }
LABEL_102:
                    long long v89 = &v93;
                    sub_216787968((void ***)&v89);
                    std::string v93 = __p;
                    sub_216787968((void ***)&v93);
                  }
                  sub_21709FC94();
                  LODWORD(__p[0]) = 6;
                  std::string v93 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)__p);
                  long long v68 = sub_2170A3AA4(&v112, (const void **)v93, (uint64_t)&unk_2174BFD90, (long long **)&v93);
                  if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v68 + 7)))
                  {
                    sub_21709FC94();
                    LODWORD(__p[0]) = 6;
                    long long v89 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)__p);
                    std::string::size_type v69 = sub_2170A3AA4(&v112, (const void **)v89, (uint64_t)&unk_2174BFD90, (long long **)&v89);
                    long long v70 = (void **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v69 + 7);
                    std::string v93 = 0;
                    uint64_t v94 = 0;
                    uint64_t v95 = 0;
                    int v71 = sub_2168BBA24(&v93, *v70, v70[1], ((char *)v70[1] - (char *)*v70) >> 4);
                    long long v90 = 0uLL;
                    long long v89 = &v90;
                    long long v72 = (std::__shared_weak_count *)v93;
                    int v73 = v94;
                    uint64_t v74 = &v90;
                    if (v93 == v94)
                    {
LABEL_112:
                      sub_2170A3BBC(&v102, v74, &v90);
                      sub_2170A2620(a1, (uint64_t)&v101);
                      uint64_t v36 = 0;
                    }
                    else
                    {
                      while (1)
                      {
                        std::string v96 = v72->__vftable;
                        long long v75 = (std::__shared_weak_count *)v72->__shared_owners_;
                        std::string v97 = v75;
                        if (v75) {
                          atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v82 = 0;
                        uint64_t v83 = 0;
                        uint64_t v84 = 0;
                        uint64_t v86 = 0;
                        uint64_t v87 = 0;
                        uint64_t v85 = 0;
                        *(_OWORD *)std::string __p = 0u;
                        long long v78 = 0u;
                        long long v79 = 0u;
                        long long v80 = 0u;
                        uint64_t v81 = 0;
                        if (sub_2170A288C(v71, (unint64_t **)&v96, (uint64_t)__p)) {
                          break;
                        }
                        std::string v91 = __p;
                        int v76 = sub_21708A1C0((uint64_t **)&v89, (const void **)__p, (uint64_t)&unk_2174BFD90, (long long **)&v91);
                        sub_2170A370C((uint64_t)(v76 + 7), (uint64_t)__p);
                        sub_217087560((uint64_t)__p);
                        int v71 = (int)v97;
                        if (v97) {
                          sub_216784EC4(v97);
                        }
                        long long v72 = (std::__shared_weak_count *)((char *)v72 + 16);
                        if (v72 == v73)
                        {
                          uint64_t v74 = (long long *)v89;
                          goto LABEL_112;
                        }
                      }
                      sub_217087560((uint64_t)__p);
                      if (v97) {
                        sub_216784EC4(v97);
                      }
                      uint64_t v36 = 301;
                    }
                    sub_2170879BC((uint64_t)&v89, (void *)v90);
                    __p[0] = &v93;
                    sub_216787968((void ***)__p);
                    goto LABEL_123;
                  }
                  uint64_t v40 = sub_2170A4138();
                  sub_21709FC94();
                  LODWORD(v93) = 6;
                  sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v93);
                  std::operator+<char>();
                  goto LABEL_114;
                }
              }
              uint64_t v38 = sub_2170A4138();
              sub_21709FC94();
              LODWORD(v98) = 5;
              sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
              std::operator+<char>();
            }
          }
        }
        else
        {
          uint64_t v38 = sub_2170A4138();
          sub_21709FC94();
          LODWORD(v98) = 0;
          sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v98);
          std::operator+<char>();
        }
        sub_21707FB4C((os_log_t *)v38, (uint64_t *)__p);
        if (SBYTE7(v78) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v36 = 301;
        goto LABEL_45;
      }
      uint64_t v37 = sub_2170A4138();
      sub_21709FC94();
      LODWORD(__p[0]) = 6;
      sub_2170A25A0((uint64_t)&unk_267B95330, (int *)__p);
      std::operator+<char>();
    }
    sub_21707FB4C((os_log_t *)v37, (uint64_t *)&v101);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    uint64_t v36 = 301;
    goto LABEL_53;
  }
  long long v35 = sub_2170A4138();
  sub_216779094(&v101, "parseJsonMesh: Not an object!");
  sub_21707FB4C((os_log_t *)v35, (uint64_t *)&v101);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  return 301;
}

void sub_2170A1024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void ***a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  a34 = &a11;
  sub_216787968((void ***)&a34);
  a11 = (void **)&a39;
  sub_216787968(&a11);
  sub_217086D7C((uint64_t)&a42);
  sub_216812ED4(v42 - 120, *(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_2170A1230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 1) {
    goto LABEL_18;
  }
  **(unsigned char **)(a1 + 192) = *(unsigned char *)a2;
  if (a3 == 1) {
    goto LABEL_18;
  }
  *(unsigned char *)(*(void *)(a1 + 192) + 1) = *(unsigned char *)(a2 + 1);
  if (a3 == 2) {
    goto LABEL_18;
  }
  *(unsigned char *)(*(void *)(a1 + 192) + 2) = *(unsigned char *)(a2 + 2);
  if (a3 == 3
    || (*(unsigned char *)(*(void *)(a1 + 192) + 3) = *(unsigned char *)(a2 + 3), (a3 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    || (*(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 4), a3 == 8)
    || (*(unsigned char *)(a1 + 220) = *(unsigned char *)(a2 + 8), a3 == 9)
    || (*(unsigned char *)(a1 + 221) = *(unsigned char *)(a2 + 9), (a3 & 0xFFFFFFFFFFFFFFFELL) == 0xA)
    || (*(_WORD *)(a1 + 222) = *(_WORD *)(a2 + 10), (a3 & 0xFFFFFFFFFFFFFFFCLL) == 0xC)
    || (*(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 12), uint64_t v5 = (char *)(a2 + 16), a2 == -16))
  {
LABEL_18:
    char v14 = sub_2170A4138();
    int v15 = "read: bytestream issue, JSON not valid!";
  }
  else
  {
    uint64_t result = sub_2170A13EC(a1);
    if (result) {
      return result;
    }
    uint64_t v7 = *(void *)(a1 + 232);
    uint64_t v8 = *(unsigned int *)(a1 + 224) - v7;
    uint64_t v9 = a3 - 16 - v8;
    if (v9 >= 0) {
      size_t v10 = *(unsigned int *)(a1 + 224) - v7;
    }
    else {
      size_t v10 = 0;
    }
    if (((v10 | v9) & 0x8000000000000000) == 0)
    {
      BOOL v11 = &v5[v8];
      sub_216799F58(__p, v5, v10);
      *(void *)(a1 + 176) = v11;
      *(void *)(a1 + 184) = v9;
      uint64_t result = sub_21709FFBC(a1, (char *)__p, v12);
      if (v17 < 0)
      {
        uint64_t v13 = result;
        operator delete(__p[0]);
        return v13;
      }
      return result;
    }
    char v14 = sub_2170A4138();
    int v15 = "read: bytestream or JSON data issue, JSON not valid!";
  }
  sub_216779094(__p, v15);
  sub_21707FB4C((os_log_t *)v14, (uint64_t *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  return 300;
}

void sub_2170A13D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170A13EC(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 192);
  if (*v1 != 71 || v1[1] != 67 || v1[2] != 76 || v1[3] != 74)
  {
    uint64_t v2 = sub_2170A4138();
    uint64_t v3 = "checkJsonCompatible: Incorrect magic key!";
LABEL_11:
    sub_216779094(__p, v3);
    sub_21707FB4C((os_log_t *)v2, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    return 300;
  }
  if (*(unsigned char *)(a1 + 220) && *(unsigned char *)(a1 + 220) == 1 && *(unsigned __int8 *)(a1 + 221) < 6u)
  {
    if (*(void *)(a1 + 232) != *(_DWORD *)(a1 + 224)) {
      return 0;
    }
    uint64_t v2 = sub_2170A4138();
    uint64_t v3 = "checkJsonCompatible: Incorrect size!";
    goto LABEL_11;
  }
  uint64_t v5 = sub_2170A4138();
  sub_216779094(__p, "checkJsonCompatible: Incompatible version!");
  sub_21707FB4C((os_log_t *)v5, (uint64_t *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 302;
}

uint64_t sub_2170A1500(uint64_t a1, uint64_t a2)
{
  v133[0] = 0;
  v133[1] = 0;
  std::string::size_type v132 = (uint64_t *)v133;
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, a1);
  sub_21709FC94();
  LODWORD(v127) = 0;
  uint64_t v129 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v127);
  int v4 = sub_2170A3AA4(&v132, (const void **)v129, (uint64_t)&unk_2174BFD90, &v129);
  long long v5 = v135;
  long long v135 = 0uLL;
  int v6 = (std::__shared_weak_count *)v4[8];
  *(_OWORD *)(v4 + 7) = v5;
  if (v6)
  {
    sub_216784EC4(v6);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, a1 + 48);
  sub_21709FC94();
  LODWORD(v127) = 3;
  uint64_t v129 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v127);
  char v7 = sub_2170A3AA4(&v132, (const void **)v129, (uint64_t)&unk_2174BFD90, &v129);
  long long v8 = v135;
  long long v135 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)v7[8];
  *(_OWORD *)(v7 + 7) = v8;
  if (v9)
  {
    sub_216784EC4(v9);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v135, *(float *)(a1 + 72));
  sub_21709FC94();
  LODWORD(v127) = 4;
  uint64_t v129 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v127);
  size_t v10 = sub_2170A3AA4(&v132, (const void **)v129, (uint64_t)&unk_2174BFD90, &v129);
  long long v11 = v135;
  long long v135 = 0uLL;
  char v12 = (std::__shared_weak_count *)v10[8];
  *(_OWORD *)(v10 + 7) = v11;
  uint64_t v113 = a2;
  if (v12)
  {
    sub_216784EC4(v12);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  uint64_t v129 = 0;
  BOOL v130 = 0;
  unint64_t v131 = 0;
  uint64_t v13 = *(float **)(a1 + 80);
  char v14 = *(float **)(a1 + 88);
  for (uint64_t i = (void *)a1; v13 != v14; ++v13)
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v127, *v13);
    int v15 = v130;
    if ((unint64_t)v130 >= v131)
    {
      uint64_t v16 = v130 - v129;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v18 = v131 - (void)v129;
      if ((uint64_t)(v131 - (void)v129) >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      std::string::size_type v138 = (void **)&v131;
      if (v19) {
        int v20 = (char *)sub_216787EE0((uint64_t)&v131, v19);
      }
      else {
        int v20 = 0;
      }
      unsigned int v21 = &v20[16 * v16];
      *(void *)&long long v135 = v20;
      *((void *)&v135 + 1) = v21;
      uint64_t v137 = &v20[16 * v19];
      *(_OWORD *)unsigned int v21 = v127;
      long long v127 = 0uLL;
      uint64_t v136 = v21 + 16;
      sub_2168B7398((uint64_t *)&v129, &v135);
      uint64_t v22 = v130;
      sub_216788028((void **)&v135);
      BOOL v130 = v22;
      if (*((void *)&v127 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v127 + 1));
      }
    }
    else
    {
      _OWORD *v130 = v127;
      BOOL v130 = v15 + 1;
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, &v129);
  sub_21709FC94();
  LODWORD(v127) = 5;
  v124 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v127);
  float v23 = sub_2170A3AA4(&v132, (const void **)v124, (uint64_t)&unk_2174BFD90, &v124);
  long long v24 = v135;
  long long v135 = 0uLL;
  int v25 = (std::__shared_weak_count *)v23[8];
  *(_OWORD *)(v23 + 7) = v24;
  if (v25)
  {
    sub_216784EC4(v25);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  long long v127 = 0uLL;
  v128[0] = 0;
  uint64_t v27 = i[16];
  for (uint64_t j = i[17]; v27 != j; v27 += 24)
  {
    sub_217088D20(&v124, v27);
    __p[0] = 0;
    __p[1] = 0;
    long long v123 = 0;
    for (k = v125; k != &v124; k = (long long **)k[1])
    {
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v120, *((_DWORD *)k + 4));
      int32x2_t v29 = (char *)__p[1];
      if (__p[1] >= v123)
      {
        int64_t v30 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v32 = v123 - (char *)__p[0];
        if ((v123 - (char *)__p[0]) >> 3 > v31) {
          unint64_t v31 = v32 >> 3;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        std::string::size_type v138 = (void **)&v123;
        if (v33) {
          int v34 = (char *)sub_216787EE0((uint64_t)&v123, v33);
        }
        else {
          int v34 = 0;
        }
        long long v35 = &v34[16 * v30];
        *(void *)&long long v135 = v34;
        *((void *)&v135 + 1) = v35;
        uint64_t v137 = &v34[16 * v33];
        *(_OWORD *)long long v35 = v120;
        long long v120 = 0uLL;
        uint64_t v136 = v35 + 16;
        sub_2168B7398((uint64_t *)__p, &v135);
        uint64_t v36 = __p[1];
        sub_216788028((void **)&v135);
        __p[1] = v36;
        if (*((void *)&v120 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v120 + 1));
        }
      }
      else
      {
        *(_OWORD *)__p[1] = v120;
        __p[1] = v29 + 16;
      }
    }
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v120, __p);
    uint64_t v37 = *((void *)&v127 + 1);
    if (*((void *)&v127 + 1) >= v128[0])
    {
      uint64_t v38 = (uint64_t)(*((void *)&v127 + 1) - v127) >> 4;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v40 = v128[0] - v127;
      if ((uint64_t)(v128[0] - v127) >> 3 > v39) {
        unint64_t v39 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      std::string::size_type v138 = (void **)v128;
      if (v41) {
        uint64_t v42 = (char *)sub_216787EE0((uint64_t)v128, v41);
      }
      else {
        uint64_t v42 = 0;
      }
      std::string::size_type v43 = &v42[16 * v38];
      *(void *)&long long v135 = v42;
      *((void *)&v135 + 1) = v43;
      uint64_t v137 = &v42[16 * v41];
      *(_OWORD *)std::string::size_type v43 = v120;
      long long v120 = 0uLL;
      uint64_t v136 = v43 + 16;
      sub_2168B7398((uint64_t *)&v127, &v135);
      uint64_t v44 = *((void *)&v127 + 1);
      sub_216788028((void **)&v135);
      *((void *)&v127 + 1) = v44;
      if (*((void *)&v120 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v120 + 1));
      }
    }
    else
    {
      **((_OWORD **)&v127 + 1) = v120;
      *((void *)&v127 + 1) = v37 + 16;
    }
    *(void *)&long long v135 = __p;
    sub_216787968((void ***)&v135);
    sub_2168505B4(&v124);
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, &v127);
  sub_21709FC94();
  LODWORD(v124) = 2;
  __p[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v124);
  uint64_t v45 = sub_2170A3AA4(&v132, (const void **)__p[0], (uint64_t)&unk_2174BFD90, (long long **)__p);
  long long v46 = v135;
  long long v135 = 0uLL;
  long long v47 = (std::__shared_weak_count *)v45[8];
  *(_OWORD *)(v45 + 7) = v46;
  if (v47)
  {
    sub_216784EC4(v47);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  v124 = 0;
  uint64_t v125 = 0;
  unint64_t v126 = 0;
  int v48 = (long long *)i[19];
  for (m = (long long *)i[20]; v48 != m; int v48 = (long long *)((char *)v48 + 24))
  {
    if (*((char *)v48 + 23) < 0)
    {
      sub_216778F24(__p, *(void **)v48, *((void *)v48 + 1));
    }
    else
    {
      long long v50 = *v48;
      long long v123 = (unsigned char *)*((void *)v48 + 2);
      *(_OWORD *)std::string __p = v50;
    }
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v120, __p);
    long long v51 = v125;
    if ((unint64_t)v125 >= v126)
    {
      uint64_t v52 = ((char *)v125 - (char *)v124) >> 4;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v54 = v126 - (void)v124;
      if ((uint64_t)(v126 - (void)v124) >> 3 > v53) {
        unint64_t v53 = v54 >> 3;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v55 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      std::string::size_type v138 = (void **)&v126;
      if (v55) {
        std::string v56 = (char *)sub_216787EE0((uint64_t)&v126, v55);
      }
      else {
        std::string v56 = 0;
      }
      std::string v57 = &v56[16 * v52];
      *(void *)&long long v135 = v56;
      *((void *)&v135 + 1) = v57;
      uint64_t v137 = &v56[16 * v55];
      *(_OWORD *)std::string v57 = v120;
      long long v120 = 0uLL;
      uint64_t v136 = v57 + 16;
      sub_2168B7398((uint64_t *)&v124, &v135);
      std::string v58 = v125;
      sub_216788028((void **)&v135);
      uint64_t v125 = v58;
      if (*((void *)&v120 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v120 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v125 = v120;
      uint64_t v125 = v51 + 2;
    }
    if (SHIBYTE(v123) < 0) {
      operator delete(__p[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, &v124);
  sub_21709FC94();
  LODWORD(__p[0]) = 1;
  *(void *)&long long v120 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)__p);
  uint64_t v59 = sub_2170A3AA4(&v132, (const void **)v120, (uint64_t)&unk_2174BFD90, (long long **)&v120);
  long long v60 = v135;
  long long v135 = 0uLL;
  std::string v61 = (std::__shared_weak_count *)v59[8];
  *(_OWORD *)(v59 + 7) = v60;
  std::string v62 = i;
  if (v61)
  {
    sub_216784EC4(v61);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  long long v123 = 0;
  std::string v63 = (void *)i[3];
  uint64_t v115 = i + 4;
  if (v63 != v62 + 4)
  {
    do
    {
      *((void *)&v120 + 1) = 0;
      uint64_t v121 = 0;
      *(void *)&long long v120 = (char *)&v120 + 8;
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, v63 + 4);
      sub_21709FC94();
      LODWORD(v116) = 7;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      long long v64 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v65 = v135;
      long long v135 = 0uLL;
      std::string v66 = (std::__shared_weak_count *)v64[8];
      *(_OWORD *)(v64 + 7) = v65;
      if (v66)
      {
        sub_216784EC4(v66);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, v63 + 10);
      sub_21709FC94();
      LODWORD(v116) = 8;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      std::string v67 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v68 = v135;
      long long v135 = 0uLL;
      std::string::size_type v69 = (std::__shared_weak_count *)v67[8];
      *(_OWORD *)(v67 + 7) = v68;
      if (v69)
      {
        sub_216784EC4(v69);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, v63 + 13);
      sub_21709FC94();
      LODWORD(v116) = 9;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      long long v70 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v71 = v135;
      long long v135 = 0uLL;
      long long v72 = (std::__shared_weak_count *)v70[8];
      *(_OWORD *)(v70 + 7) = v71;
      if (v72)
      {
        sub_216784EC4(v72);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v135, *((_DWORD *)v63 + 32));
      sub_21709FC94();
      LODWORD(v116) = 10;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      int v73 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v74 = v135;
      long long v135 = 0uLL;
      long long v75 = (std::__shared_weak_count *)v73[8];
      *(_OWORD *)(v73 + 7) = v74;
      if (v75)
      {
        sub_216784EC4(v75);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v135, *((unsigned char *)v63 + 132));
      sub_21709FC94();
      LODWORD(v116) = 11;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      int v76 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v77 = v135;
      long long v135 = 0uLL;
      long long v78 = (std::__shared_weak_count *)v76[8];
      *(_OWORD *)(v76 + 7) = v77;
      if (v78)
      {
        sub_216784EC4(v78);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, v63 + 17);
      sub_21709FC94();
      LODWORD(v116) = 12;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      long long v79 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v80 = v135;
      long long v135 = 0uLL;
      uint64_t v81 = (std::__shared_weak_count *)v79[8];
      *(_OWORD *)(v79 + 7) = v80;
      if (v81)
      {
        sub_216784EC4(v81);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v135, *((float *)v63 + 40));
      sub_21709FC94();
      LODWORD(v116) = 13;
      std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      uint64_t v82 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
      long long v83 = v135;
      long long v135 = 0uLL;
      uint64_t v84 = (std::__shared_weak_count *)v82[8];
      *(_OWORD *)(v82 + 7) = v83;
      if (v84)
      {
        sub_216784EC4(v84);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      std::string::size_type v117 = 0;
      uint64_t v118 = 0;
      unint64_t v119 = 0;
      uint64_t v86 = (float *)v63[21];
      uint64_t v85 = (float *)v63[22];
      while (v86 != v85)
      {
        pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v116, *v86);
        uint64_t v87 = v118;
        if ((unint64_t)v118 >= v119)
        {
          uint64_t v88 = v118 - v117;
          unint64_t v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v90 = v119 - (void)v117;
          if ((uint64_t)(v119 - (void)v117) >> 3 > v89) {
            unint64_t v89 = v90 >> 3;
          }
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v91 = v89;
          }
          std::string::size_type v138 = (void **)&v119;
          if (v91) {
            std::string v92 = (char *)sub_216787EE0((uint64_t)&v119, v91);
          }
          else {
            std::string v92 = 0;
          }
          std::string v93 = &v92[16 * v88];
          *(void *)&long long v135 = v92;
          *((void *)&v135 + 1) = v93;
          uint64_t v137 = &v92[16 * v91];
          *(_OWORD *)std::string v93 = v116;
          long long v116 = 0uLL;
          uint64_t v136 = v93 + 16;
          sub_2168B7398((uint64_t *)&v117, &v135);
          uint64_t v94 = v118;
          sub_216788028((void **)&v135);
          uint64_t v118 = v94;
          if (*((void *)&v116 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v116 + 1));
          }
        }
        else
        {
          *uint64_t v118 = v116;
          uint64_t v118 = v87 + 1;
        }
        ++v86;
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, &v117);
      sub_21709FC94();
      LODWORD(v116) = 14;
      uint64_t v134 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v116);
      uint64_t v95 = sub_2170A3AA4((uint64_t **)&v120, (const void **)v134, (uint64_t)&unk_2174BFD90, &v134);
      long long v96 = v135;
      long long v135 = 0uLL;
      std::string v97 = (std::__shared_weak_count *)v95[8];
      *(_OWORD *)(v95 + 7) = v96;
      if (v97)
      {
        sub_216784EC4(v97);
        if (*((void *)&v135 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
        }
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v116, &v120);
      uint64_t v98 = (char *)__p[1];
      if (__p[1] >= v123)
      {
        int64_t v99 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        unint64_t v100 = v99 + 1;
        if ((unint64_t)(v99 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v101 = v123 - (char *)__p[0];
        if ((v123 - (char *)__p[0]) >> 3 > v100) {
          unint64_t v100 = v101 >> 3;
        }
        if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v102 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v102 = v100;
        }
        std::string::size_type v138 = (void **)&v123;
        if (v102) {
          long long v103 = (char *)sub_216787EE0((uint64_t)&v123, v102);
        }
        else {
          long long v103 = 0;
        }
        std::string v104 = &v103[16 * v99];
        *(void *)&long long v135 = v103;
        *((void *)&v135 + 1) = v104;
        uint64_t v137 = &v103[16 * v102];
        *(_OWORD *)std::string v104 = v116;
        long long v116 = 0uLL;
        uint64_t v136 = v104 + 16;
        sub_2168B7398((uint64_t *)__p, &v135);
        float v105 = __p[1];
        sub_216788028((void **)&v135);
        __p[1] = v105;
        if (*((void *)&v116 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v116 + 1));
        }
      }
      else
      {
        *(_OWORD *)__p[1] = v116;
        __p[1] = v98 + 16;
      }
      *(void *)&long long v135 = &v117;
      sub_216787968((void ***)&v135);
      sub_216812ED4((uint64_t)&v120, *((void **)&v120 + 1));
      long long v106 = (void *)v63[1];
      if (v106)
      {
        do
        {
          long long v107 = v106;
          long long v106 = (void *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          long long v107 = (void *)v63[2];
          BOOL v108 = *v107 == (void)v63;
          std::string v63 = v107;
        }
        while (!v108);
      }
      std::string v63 = v107;
    }
    while (v107 != v115);
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v135, __p);
  sub_21709FC94();
  LODWORD(v120) = 6;
  std::string::size_type v117 = (long long *)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v120);
  long long v109 = sub_2170A3AA4(&v132, (const void **)v117, (uint64_t)&unk_2174BFD90, &v117);
  long long v110 = v135;
  long long v135 = 0uLL;
  long long v111 = (std::__shared_weak_count *)v109[8];
  *(_OWORD *)(v109 + 7) = v110;
  if (v111)
  {
    sub_216784EC4(v111);
    if (*((void *)&v135 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
    }
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(&v120, &v132);
  pxrInternal__aapl__pxrReserved__::JsWriteToString((unint64_t **)&v120, &v135);
  if (*(char *)(v113 + 23) < 0) {
    operator delete(*(void **)v113);
  }
  *(_OWORD *)uint64_t v113 = v135;
  *(void *)(v113 + 16) = v136;
  HIBYTE(v136) = 0;
  LOBYTE(v135) = 0;
  if (*((void *)&v120 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v120 + 1));
  }
  *(void *)&long long v135 = __p;
  sub_216787968((void ***)&v135);
  *(void *)&long long v135 = &v124;
  sub_216787968((void ***)&v135);
  *(void *)&long long v135 = &v127;
  sub_216787968((void ***)&v135);
  *(void *)&long long v135 = &v129;
  sub_216787968((void ***)&v135);
  sub_216812ED4((uint64_t)&v132, v133[0]);
  return 0;
}

void sub_2170A22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **p_p, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,char ***__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char **a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a20) {
    sub_216784EC4(a20);
  }
  p_p = (void **)&__p;
  sub_216787968(&p_p);
  std::string __p = &a29;
  sub_216787968((void ***)&__p);
  a29 = &a32;
  sub_216787968((void ***)&a29);
  a32 = &a36;
  sub_216787968((void ***)&a32);
  sub_216812ED4(v36 - 168, *(void **)(v36 - 160));
  _Unwind_Resume(a1);
}

uint64_t *sub_2170A25A0(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_216855AEC("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_2170A25F8(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_2170A2620(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  }
  else
  {
    sub_2170A3BBC((uint64_t **)(a1 + 24), *(long long **)(a2 + 24), (long long *)(a2 + 32));
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    sub_216825D78((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_2170775D0((void *)(a1 + 104), *(char **)(a2 + 104), *(char **)(a2 + 112), *(void *)(a2 + 112) - *(void *)(a2 + 104));
    sub_217089D24((uint64_t **)(a1 + 128), *(void *)(a2 + 128), *(uint64_t **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
    sub_21680F694(a1 + 152, *(std::string **)(a2 + 152), *(long long **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  }
  return a1;
}

uint64_t sub_2170A26F4(uint64_t a1, uint64_t a2)
{
  return 0;
}

void sub_2170A2710(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    long long v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_21677EA28(v4, v12);
      long long v8 = *(_DWORD **)a1;
      int v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)char v14 = *a2;
    char v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v6 = *a2;
    char v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t sub_2170A27F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_217088DBC(a1, a2);
  }
  else
  {
    sub_217088D20(*(void **)(a1 + 8), a2);
    uint64_t result = v3 + 24;
    *(void *)(a1 + 8) = v3 + 24;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2170A2844(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2170A284C(uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_2167E9A44(a1, a2);
  }
  else
  {
    sub_2167E99E4(a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_2170A288C(int a1, unint64_t **this, uint64_t a3)
{
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)this))
  {
    JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(this);
    sub_2168BB7AC((uint64_t *)&v96, JsObject);
    sub_21709FC94();
    LODWORD(__p.__r_.__value_.__l.__data_) = 7;
    int v6 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
    if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v6)
      || (sub_21709FC94(),
          LODWORD(v92.__r_.__value_.__l.__data_) = 7,
          v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
          char v7 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
          !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v7 + 7))))
    {
      uint64_t v52 = sub_2170A4138();
      sub_21709FC94();
      LODWORD(__p.__r_.__value_.__l.__data_) = 7;
      sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
      std::operator+<char>();
      sub_21707FB4C((os_log_t *)v52, (uint64_t *)v94);
      if (SHIBYTE(v95) < 0)
      {
        unint64_t v53 = v94[0];
LABEL_93:
        operator delete(v53);
      }
    }
    else
    {
      sub_21709FC94();
      LODWORD(__p.__r_.__value_.__l.__data_) = 7;
      v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
      long long v8 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
      unint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v8 + 7));
      std::string::operator=((std::string *)a3, String);
      sub_21709FC94();
      LODWORD(__p.__r_.__value_.__l.__data_) = 8;
      unint64_t v10 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
      if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v10)
        || (sub_21709FC94(),
            LODWORD(v92.__r_.__value_.__l.__data_) = 8,
            v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
            uint64_t v11 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
            !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v11 + 7))))
      {
        uint64_t v54 = sub_2170A4138();
        std::operator+<char>();
        unint64_t v55 = std::string::append(&v92, ", key ");
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        sub_21709FC94();
        LODWORD(v89.__r_.__value_.__l.__data_) = 8;
        std::string v57 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
        int v58 = *((char *)v57 + 23);
        if (v58 >= 0) {
          uint64_t v59 = (const std::string::value_type *)v57;
        }
        else {
          uint64_t v59 = (const std::string::value_type *)*v57;
        }
        if (v58 >= 0) {
          std::string::size_type v60 = *((unsigned __int8 *)v57 + 23);
        }
        else {
          std::string::size_type v60 = v57[1];
        }
      }
      else
      {
        sub_21709FC94();
        LODWORD(__p.__r_.__value_.__l.__data_) = 8;
        v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
        unint64_t v12 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
        uint64_t v13 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v12 + 7));
        std::string::operator=((std::string *)(a3 + 24), v13);
        sub_21709FC94();
        LODWORD(__p.__r_.__value_.__l.__data_) = 9;
        char v14 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
        if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v14)
          || (sub_21709FC94(),
              LODWORD(v92.__r_.__value_.__l.__data_) = 9,
              v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
              int v15 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
              !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v15 + 7))))
        {
          uint64_t v54 = sub_2170A4138();
          std::operator+<char>();
          std::string v61 = std::string::append(&v92, ", key ");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          sub_21709FC94();
          LODWORD(v89.__r_.__value_.__l.__data_) = 9;
          std::string v63 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
          int v64 = *((char *)v63 + 23);
          if (v64 >= 0) {
            uint64_t v59 = (const std::string::value_type *)v63;
          }
          else {
            uint64_t v59 = (const std::string::value_type *)*v63;
          }
          if (v64 >= 0) {
            std::string::size_type v60 = *((unsigned __int8 *)v63 + 23);
          }
          else {
            std::string::size_type v60 = v63[1];
          }
        }
        else
        {
          sub_21709FC94();
          LODWORD(__p.__r_.__value_.__l.__data_) = 9;
          v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
          int v16 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
          unint64_t v17 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v16 + 7));
          std::string::operator=((std::string *)(a3 + 48), v17);
          sub_21709FC94();
          LODWORD(__p.__r_.__value_.__l.__data_) = 10;
          uint64_t v18 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
          if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v18)
            || (sub_21709FC94(),
                LODWORD(v92.__r_.__value_.__l.__data_) = 10,
                v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
                unint64_t v19 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
                !pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)(v19 + 7))))
          {
            uint64_t v54 = sub_2170A4138();
            std::operator+<char>();
            long long v65 = std::string::append(&v92, ", key ");
            long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            sub_21709FC94();
            LODWORD(v89.__r_.__value_.__l.__data_) = 10;
            std::string v67 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
            int v68 = *((char *)v67 + 23);
            if (v68 >= 0) {
              uint64_t v59 = (const std::string::value_type *)v67;
            }
            else {
              uint64_t v59 = (const std::string::value_type *)*v67;
            }
            if (v68 >= 0) {
              std::string::size_type v60 = *((unsigned __int8 *)v67 + 23);
            }
            else {
              std::string::size_type v60 = v67[1];
            }
          }
          else
          {
            sub_21709FC94();
            LODWORD(__p.__r_.__value_.__l.__data_) = 10;
            v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
            int v20 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
            *(_DWORD *)(a3 + 72) = pxrInternal__aapl__pxrReserved__::JsValue::GetInt((uint64_t **)v20 + 7);
            sub_21709FC94();
            LODWORD(__p.__r_.__value_.__l.__data_) = 11;
            unsigned int v21 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
            if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v21)
              || (sub_21709FC94(),
                  LODWORD(v92.__r_.__value_.__l.__data_) = 11,
                  v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
                  uint64_t v22 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
                  !pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)(v22 + 7))))
            {
              uint64_t v54 = sub_2170A4138();
              std::operator+<char>();
              std::string::size_type v69 = std::string::append(&v92, ", key ");
              long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v70;
              v69->__r_.__value_.__l.__size_ = 0;
              v69->__r_.__value_.__r.__words[2] = 0;
              v69->__r_.__value_.__r.__words[0] = 0;
              sub_21709FC94();
              LODWORD(v89.__r_.__value_.__l.__data_) = 11;
              long long v71 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
              int v72 = *((char *)v71 + 23);
              if (v72 >= 0) {
                uint64_t v59 = (const std::string::value_type *)v71;
              }
              else {
                uint64_t v59 = (const std::string::value_type *)*v71;
              }
              if (v72 >= 0) {
                std::string::size_type v60 = *((unsigned __int8 *)v71 + 23);
              }
              else {
                std::string::size_type v60 = v71[1];
              }
            }
            else
            {
              sub_21709FC94();
              LODWORD(__p.__r_.__value_.__l.__data_) = 11;
              v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
              float v23 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
              *(unsigned char *)(a3 + 76) = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)(v23 + 7));
              sub_21709FC94();
              LODWORD(__p.__r_.__value_.__l.__data_) = 12;
              long long v24 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
              if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v24)
                || (sub_21709FC94(),
                    LODWORD(v92.__r_.__value_.__l.__data_) = 12,
                    v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
                    int v25 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
                    !pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v25 + 7))))
              {
                uint64_t v54 = sub_2170A4138();
                std::operator+<char>();
                int v73 = std::string::append(&v92, ", key ");
                long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v74;
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                sub_21709FC94();
                LODWORD(v89.__r_.__value_.__l.__data_) = 12;
                long long v75 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                int v76 = *((char *)v75 + 23);
                if (v76 >= 0) {
                  uint64_t v59 = (const std::string::value_type *)v75;
                }
                else {
                  uint64_t v59 = (const std::string::value_type *)*v75;
                }
                if (v76 >= 0) {
                  std::string::size_type v60 = *((unsigned __int8 *)v75 + 23);
                }
                else {
                  std::string::size_type v60 = v75[1];
                }
              }
              else
              {
                sub_21709FC94();
                LODWORD(__p.__r_.__value_.__l.__data_) = 12;
                v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
                float v26 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
                uint64_t v27 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(v26 + 7));
                std::string::operator=((std::string *)(a3 + 80), v27);
                sub_21709FC94();
                LODWORD(__p.__r_.__value_.__l.__data_) = 13;
                unsigned int v28 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
                if (&v97 == (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v28)
                  || (sub_21709FC94(),
                      LODWORD(v92.__r_.__value_.__l.__data_) = 13,
                      v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92),
                      int32x2_t v29 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94),
                      !pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)(v29 + 7))))
                {
                  uint64_t v54 = sub_2170A4138();
                  std::operator+<char>();
                  long long v77 = std::string::append(&v92, ", key ");
                  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v78;
                  v77->__r_.__value_.__l.__size_ = 0;
                  v77->__r_.__value_.__r.__words[2] = 0;
                  v77->__r_.__value_.__r.__words[0] = 0;
                  sub_21709FC94();
                  LODWORD(v89.__r_.__value_.__l.__data_) = 13;
                  long long v79 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                  int v80 = *((char *)v79 + 23);
                  if (v80 >= 0) {
                    uint64_t v59 = (const std::string::value_type *)v79;
                  }
                  else {
                    uint64_t v59 = (const std::string::value_type *)*v79;
                  }
                  if (v80 >= 0) {
                    std::string::size_type v60 = *((unsigned __int8 *)v79 + 23);
                  }
                  else {
                    std::string::size_type v60 = v79[1];
                  }
                }
                else
                {
                  sub_21709FC94();
                  LODWORD(__p.__r_.__value_.__l.__data_) = 13;
                  v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
                  int64_t v30 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
                  float Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)v30 + 7);
                  *(float *)(a3 + 104) = Real;
                  sub_21709FC94();
                  LODWORD(__p.__r_.__value_.__l.__data_) = 14;
                  uint64_t v32 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&__p);
                  if (&v97 != (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v32))
                  {
                    sub_21709FC94();
                    LODWORD(v92.__r_.__value_.__l.__data_) = 14;
                    v94[0] = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92);
                    unint64_t v33 = sub_2170A3AA4(&v96, (const void **)v94[0], (uint64_t)&unk_2174BFD90, (long long **)v94);
                    if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v33 + 7)))
                    {
                      sub_21709FC94();
                      LODWORD(v92.__r_.__value_.__l.__data_) = 14;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v92);
                      int v34 = sub_2170A3AA4(&v96, (const void **)__p.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&__p);
                      JsArray = (void **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v34 + 7);
                      v94[0] = 0;
                      v94[1] = 0;
                      std::string::size_type v95 = 0;
                      sub_2168BBA24(v94, *JsArray, JsArray[1], ((char *)JsArray[1] - (char *)*JsArray) >> 4);
                      *(void *)(a3 + 120) = *(void *)(a3 + 112);
                      uint64_t v36 = (char *)v94[0];
                      uint64_t v37 = (char *)v94[1];
                      if (v94[0] == v94[1])
                      {
LABEL_39:
                        uint64_t v50 = 0;
                      }
                      else
                      {
                        while (1)
                        {
                          uint64_t v90 = *(uint64_t **)v36;
                          uint64_t v38 = (std::__shared_weak_count *)*((void *)v36 + 1);
                          unint64_t v91 = v38;
                          if (v38) {
                            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          Isfloat Real = pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v90);
                          if (IsReal)
                          {
                            float v40 = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(&v90);
                            *(float *)&__p.__r_.__value_.__l.__data_ = v40;
                            sub_2170A2710(a3 + 112, &__p);
                          }
                          else
                          {
                            unint64_t v41 = sub_2170A4138();
                            std::operator+<char>();
                            uint64_t v42 = std::string::append(&v89, ", key ");
                            long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
                            v92.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v43;
                            v42->__r_.__value_.__l.__size_ = 0;
                            v42->__r_.__value_.__r.__words[2] = 0;
                            v42->__r_.__value_.__r.__words[0] = 0;
                            sub_21709FC94();
                            int v88 = 14;
                            uint64_t v44 = sub_2170A25A0((uint64_t)&unk_267B95330, &v88);
                            int v45 = *((char *)v44 + 23);
                            if (v45 >= 0) {
                              long long v46 = (const std::string::value_type *)v44;
                            }
                            else {
                              long long v46 = (const std::string::value_type *)*v44;
                            }
                            if (v45 >= 0) {
                              std::string::size_type v47 = *((unsigned __int8 *)v44 + 23);
                            }
                            else {
                              std::string::size_type v47 = v44[1];
                            }
                            int v48 = std::string::append(&v92, v46, v47);
                            long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
                            __p.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v49;
                            v48->__r_.__value_.__l.__size_ = 0;
                            v48->__r_.__value_.__r.__words[2] = 0;
                            v48->__r_.__value_.__r.__words[0] = 0;
                            sub_21707FB4C((os_log_t *)v41, (uint64_t *)&__p);
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v92.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v89.__r_.__value_.__l.__data_);
                            }
                          }
                          if (v91) {
                            sub_216784EC4(v91);
                          }
                          if (!IsReal) {
                            break;
                          }
                          v36 += 16;
                          if (v36 == v37) {
                            goto LABEL_39;
                          }
                        }
                        uint64_t v50 = 301;
                      }
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                      sub_216787968((void ***)&__p);
                      goto LABEL_95;
                    }
                  }
                  uint64_t v54 = sub_2170A4138();
                  std::operator+<char>();
                  uint64_t v81 = std::string::append(&v92, ", key ");
                  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v82;
                  v81->__r_.__value_.__l.__size_ = 0;
                  v81->__r_.__value_.__r.__words[2] = 0;
                  v81->__r_.__value_.__r.__words[0] = 0;
                  sub_21709FC94();
                  LODWORD(v89.__r_.__value_.__l.__data_) = 14;
                  long long v83 = sub_2170A25A0((uint64_t)&unk_267B95330, (int *)&v89);
                  int v84 = *((char *)v83 + 23);
                  if (v84 >= 0) {
                    uint64_t v59 = (const std::string::value_type *)v83;
                  }
                  else {
                    uint64_t v59 = (const std::string::value_type *)*v83;
                  }
                  if (v84 >= 0) {
                    std::string::size_type v60 = *((unsigned __int8 *)v83 + 23);
                  }
                  else {
                    std::string::size_type v60 = v83[1];
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v85 = std::string::append(&__p, v59, v60);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      std::string::size_type v95 = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v94 = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      sub_21707FB4C((os_log_t *)v54, (uint64_t *)v94);
      if (SHIBYTE(v95) < 0) {
        operator delete(v94[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v53 = (void *)v92.__r_.__value_.__r.__words[0];
        goto LABEL_93;
      }
    }
    uint64_t v50 = 301;
LABEL_95:
    sub_216812ED4((uint64_t)&v96, v97);
    return v50;
  }
  long long v51 = sub_2170A4138();
  sub_216779094(&v96, "parseJsonAttribute: Not an object!");
  sub_21707FB4C((os_log_t *)v51, (uint64_t *)&v96);
  if (v98 < 0) {
    operator delete(v96);
  }
  return 301;
}

void sub_2170A3550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  sub_216812ED4(v33 - 120, *(void **)(v32 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_2170A370C(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  char v4 = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = v4;
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  if (a1 != a2) {
    sub_216825D78((char *)(a1 + 112), *(char **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 2);
  }
  return a1;
}

uint64_t sub_2170A3790(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  char v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_2170A3810((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2170A37F8(_Unwind_Exception *a1)
{
  sub_2168C80D0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2170A3810(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)sub_216BD543C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_2170A3894((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_2170A3894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  unsigned char v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2170A3924(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_2170A3940(v3, v2);
  _Unwind_Resume(a1);
}

void sub_2170A3940(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_2170A39A0(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = sub_216789A4C(a1, a2, &v12, &v11, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    sub_2170A3A38((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, (uint64_t)v12, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    sub_21681534C((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_2170A3A38@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2168BB890(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2170A3A8C(_Unwind_Exception *a1)
{
  sub_21681534C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170A3AA4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  char v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    sub_2170A3B50((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    sub_21681534C((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_2170A3B50@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_21705BFB4(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2170A3BA4(_Unwind_Exception *a1)
{
  sub_21681534C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_2170A3BBC(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    char v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _OWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    int v15 = result;
    int v16 = v8;
    unint64_t v17 = (const void **)v8;
    if (v8)
    {
      int v16 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_2170A3D4C((uint64_t)v18, (uint64_t)(v9 + 2));
          unint64_t v10 = (uint64_t **)sub_216799DAC((uint64_t)v5, v18, v17 + 4);
          sub_21677B358(v5, v18[0], v10, (uint64_t *)v17);
          unint64_t v17 = (const void **)v16;
          if (v16) {
            int v16 = sub_216799E28((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          long long v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_2170A3DF0((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_2170A3E48(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          char v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2170A3D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2170A3DF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170A3D4C(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  std::string::operator=((std::string *)v4, (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(v4 + 24), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(v4 + 48), (const std::string *)(a2 + 72));
  char v5 = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(v4 + 72) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(v4 + 76) = v5;
  std::string::operator=((std::string *)(v4 + 80), (const std::string *)(a2 + 104));
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a2 + 128);
  if (v4 != a2 + 24) {
    sub_216825D78((char *)(v4 + 112), *(char **)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 2);
  }
  return a1;
}

uint64_t sub_2170A3DF0(uint64_t a1)
{
  sub_2170879BC(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_2170879BC(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_2170A3E48(uint64_t **a1, long long *a2)
{
  sub_2170A3ECC((uint64_t)a1, a2, (uint64_t)v7);
  uint64_t v3 = (uint64_t **)sub_216799DAC((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_21677B358(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_21708A324((uint64_t)v7, 0);
  return v4;
}

void sub_2170A3EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21708A324((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_2170A3ECC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0xC0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2170A3F38(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2170A3F20(_Unwind_Exception *a1)
{
  sub_21708A324(v1, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_2170A3F38(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_2170A3FB0(__dst + 24, (long long *)((char *)a2 + 24));
  return __dst;
}

void sub_2170A3F94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2170A3FB0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_216778F24(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  int v7 = *((_DWORD *)a2 + 18);
  __dst[76] = *((unsigned char *)a2 + 76);
  *((_DWORD *)__dst + 18) = v7;
  if (*((char *)a2 + 103) < 0)
  {
    sub_216778F24(__dst + 80, *((void **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v8 = a2[5];
    *((void *)__dst + 12) = *((void *)a2 + 12);
    *((_OWORD *)__dst + 5) = v8;
  }
  int v9 = *((_DWORD *)a2 + 26);
  *((void *)__dst + 14) = 0;
  *((_DWORD *)__dst + 26) = v9;
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  sub_216825CFC((void *)__dst + 14, *((const void **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  return __dst;
}

void sub_2170A40D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2170A4138()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95358))
  {
    qword_267B95350 = (uint64_t)os_log_create("com.apple.usdlib", "aaplUsdGclCodec");
    __cxa_atexit((void (*)(void *))sub_2170A41CC, &qword_267B95350, &dword_216758000);
    __cxa_guard_release(&qword_267B95358);
  }
  return &qword_267B95350;
}

void **sub_2170A41CC(void **a1)
{
  return a1;
}

uint64_t sub_2170A41FC(uint64_t result)
{
  uint64_t v1 = 0;
  *(_DWORD *)uint64_t result = 0;
  *(void *)&long long v2 = 0xFFFF00000000;
  *((void *)&v2 + 1) = 0xFFFF00000000;
  *(_OWORD *)(result + 24) = v2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 40) = 0;
  uint64_t v3 = 0x217u;
  do
  {
    *(_WORD *)(result + v1 * 2 + 48) = word_26798D148[v1];
    *(_WORD *)(result + v3 * 2) = word_26798D148[v3 - 280];
    --v3;
    ++v1;
  }
  while (v1 != 256);
  return result;
}

void *sub_2170A4250(uint64_t a1)
{
  *(void *)&long long v1 = 0xFFFF000000000000;
  *((void *)&v1 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 24) = v1;
  *(void *)(a1 + 40) = 16;
  unsigned int v2 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    int v4 = -16777216;
    goto LABEL_7;
  }
  uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
  int v4 = *v3 << 24;
  *(_DWORD *)(a1 + 32) = v4;
  if (v2 == 1)
  {
LABEL_7:
    int v5 = v4 | 0xFF0000;
    goto LABEL_8;
  }
  int v5 = v4 | (v3[1] << 16);
  *(_DWORD *)(a1 + 32) = v5;
  if (v2 <= 2)
  {
LABEL_8:
    int v6 = v5 | 0xFF00;
    goto LABEL_9;
  }
  int v6 = v5 | (v3[2] << 8);
  *(_DWORD *)(a1 + 32) = v6;
  if (v2 == 3)
  {
LABEL_9:
    int v7 = 255;
    goto LABEL_10;
  }
  int v7 = v3[3];
LABEL_10:
  *(_DWORD *)(a1 + 32) = v7 | v6;
  *(void *)(a1 + 16) = 3;
  return memcpy((void *)(a1 + 48), &unk_26798D348, 0x400uLL);
}

uint64_t sub_2170A42E8(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v2 = (unsigned __int8 *)result;
  LODWORD(result) = -1;
  do
  {
    int v3 = *v2++;
    uint64_t result = (dword_2174AF680[v3 ^ BYTE3(result)] ^ (result << 8));
    --a2;
  }
  while (a2);
  return result;
}

uint64_t sub_2170A4320(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 3;
  if (a1 && (a2 & 0x8000000000000000) == 0 && (unint64_t)a2 >= 4)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4 || a2 < 16 || a1 == (_DWORD *)-16 || !a4)
    {
      return 3;
    }
    else
    {
      uint64_t v5 = a2 - 8;
      int v6 = a1 + 2;
      uint64_t v8 = 4 * a4;
      unint64_t v9 = a1[3];
      while (*a3 != *a1)
      {
        ++a3;
        uint64_t v4 = 3;
        v8 -= 4;
        if (!v8) {
          return v4;
        }
      }
      uint64_t v11 = 8;
      if (v5 > 8) {
        uint64_t v11 = a2 - 8;
      }
      uint64_t v4 = 3;
      if ((a2 & (unint64_t)~(a2 >> 63)) - v11 + 8 <= v9 && ((a2 - v9) & 0x8000000000000000) == 0)
      {
        uint64_t v4 = 3;
        if ((_DWORD *)((char *)v6 + (v5 & ~(v5 >> 63))) >= a1
          && (_DWORD *)((char *)a1 + v9) >= v6
          && a1 != (_DWORD *)-8
          && v9 >= 8)
        {
          int v7 = a1[1];
          if (v7 == sub_2170A42E8((uint64_t)(a1 + 2), v9 - 8)) {
            return 0;
          }
          else {
            return 3;
          }
        }
      }
    }
  }
  return v4;
}

int *sub_2170A4428(int *result, int *a2, int a3, float a4, float a5, float a6)
{
  float v6 = fabsf(a6);
  float v7 = (float)(fabsf(a4) + fabsf(a5)) + v6;
  if (v7 <= 0.0)
  {
    *uint64_t result = a3;
  }
  else
  {
    int v8 = 0;
    double v9 = (double)a3 / v7;
    double v10 = v9 * a4;
    double v11 = v9 * a5;
    int v12 = vcvtmd_s64_f64(v10);
    double v13 = v9 * v6;
    int v14 = vcvtmd_s64_f64(v11);
    if (v12 >= 0) {
      int v15 = v12;
    }
    else {
      int v15 = -v12;
    }
    if (v14 >= 0) {
      int v16 = v14;
    }
    else {
      int v16 = -v14;
    }
    double v17 = (v10 * (double)v12 + v11 * (double)v14 + v13 * (double)(a3 - (v16 + v15)))
        / sqrt((double)(v14 * v14 + v12 * v12 + (a3 - (v16 + v15)) * (a3 - (v16 + v15))));
    char v18 = 1;
    int v19 = v14;
    int v20 = v12;
    do
    {
      int v21 = 0;
      char v22 = v18;
      int v23 = v8 + v14;
      if (v8 + v14 >= 0) {
        int v24 = v8 + v14;
      }
      else {
        int v24 = -v23;
      }
      char v26 = 1;
      do
      {
        char v27 = v26;
        int v28 = v21 + v12;
        if (v21 + v12 >= 0) {
          int v29 = v21 + v12;
        }
        else {
          int v29 = -v28;
        }
        if (v21 | v8)
        {
          int v30 = a3 - v24 - v29;
          if ((v30 & 0x80000000) == 0)
          {
            double v31 = sqrt((double)(v23 * v23 + v28 * v28 + v30 * v30));
            double v25 = v11 * (double)v23;
            if (v17 < (v25 + v10 * (double)v28 + v13 * (double)v30) / v31)
            {
              double v17 = (v25 + v10 * (double)v28 + v13 * (double)v30) / v31;
              int v20 = v28;
              int v19 = v8 + v14;
            }
          }
        }
        char v26 = 0;
        int v21 = 1;
      }
      while ((v27 & 1) != 0);
      char v18 = 0;
      int v8 = 1;
    }
    while ((v22 & 1) != 0);
    if (a6 >= 0.0)
    {
      *uint64_t result = v20 + a3;
      a3 += v19;
    }
    else
    {
      int v32 = 2 * a3;
      if (v19 >= 0) {
        int v33 = v19;
      }
      else {
        int v33 = -v19;
      }
      if (a4 >= 0.0) {
        int v33 = v32 - v33;
      }
      *uint64_t result = v33;
      if (v20 >= 0) {
        int v34 = v20;
      }
      else {
        int v34 = -v20;
      }
      int v35 = v32 - v34;
      if (a5 >= 0.0) {
        a3 = v35;
      }
      else {
        a3 = v34;
      }
    }
  }
  *a2 = a3;
  return result;
}

int *sub_2170A45C0(int *result, int *a2, int a3, double a4, double a5, double a6)
{
  double v6 = fabs(a6);
  double v7 = fabs(a4) + fabs(a5) + v6;
  if (v7 <= 0.0)
  {
    *uint64_t result = a3;
  }
  else
  {
    int v8 = 0;
    double v9 = (double)a3 / v7;
    double v10 = v9 * a4;
    double v11 = v9 * a5;
    int v12 = vcvtmd_s64_f64(v9 * a4);
    double v13 = v6 * v9;
    int v14 = vcvtmd_s64_f64(v9 * a5);
    if (v12 >= 0) {
      int v15 = v12;
    }
    else {
      int v15 = -v12;
    }
    if (v14 >= 0) {
      int v16 = v14;
    }
    else {
      int v16 = -v14;
    }
    double v17 = (v10 * (double)v12 + v11 * (double)v14 + v13 * (double)(a3 - (v16 + v15)))
        / sqrt((double)(v14 * v14 + v12 * v12 + (a3 - (v16 + v15)) * (a3 - (v16 + v15))));
    char v18 = 1;
    int v19 = v14;
    int v20 = v12;
    do
    {
      int v21 = 0;
      char v22 = v18;
      int v23 = v8 + v14;
      if (v8 + v14 >= 0) {
        int v24 = v8 + v14;
      }
      else {
        int v24 = -v23;
      }
      char v26 = 1;
      do
      {
        char v27 = v26;
        int v28 = v21 + v12;
        if (v21 + v12 >= 0) {
          int v29 = v21 + v12;
        }
        else {
          int v29 = -v28;
        }
        if (v21 | v8)
        {
          int v30 = a3 - v24 - v29;
          if ((v30 & 0x80000000) == 0)
          {
            double v31 = sqrt((double)(v23 * v23 + v28 * v28 + v30 * v30));
            double v25 = v11 * (double)v23;
            if (v17 < (v25 + v10 * (double)v28 + v13 * (double)v30) / v31)
            {
              double v17 = (v25 + v10 * (double)v28 + v13 * (double)v30) / v31;
              int v20 = v28;
              int v19 = v8 + v14;
            }
          }
        }
        char v26 = 0;
        int v21 = 1;
      }
      while ((v27 & 1) != 0);
      char v18 = 0;
      int v8 = 1;
    }
    while ((v22 & 1) != 0);
    if (a6 >= 0.0)
    {
      *uint64_t result = v20 + a3;
      a3 += v19;
    }
    else
    {
      int v32 = 2 * a3;
      if (v19 >= 0) {
        int v33 = v19;
      }
      else {
        int v33 = -v19;
      }
      if (a4 >= 0.0) {
        int v33 = v32 - v33;
      }
      *uint64_t result = v33;
      if (v20 >= 0) {
        int v34 = v20;
      }
      else {
        int v34 = -v20;
      }
      int v35 = v32 - v34;
      if (a5 >= 0.0) {
        a3 = v35;
      }
      else {
        a3 = v34;
      }
    }
  }
  *a2 = a3;
  return result;
}

uint64_t sub_2170A4744(uint64_t result, int a2, int *a3, int *a4, int *a5, int a6)
{
  int v6 = result - a6;
  int v7 = a2 - a6;
  if ((int)result - a6 >= 0) {
    int v8 = result - a6;
  }
  else {
    int v8 = a6 - result;
  }
  if (v7 >= 0) {
    int v9 = a2 - a6;
  }
  else {
    int v9 = a6 - a2;
  }
  int v10 = a6 - v8;
  int v11 = v9 - a6;
  if (v6 >= 0) {
    int v11 = a6 - v9;
  }
  int v12 = v8 - a6;
  if (v7 >= 0) {
    int v12 = v10;
  }
  int v13 = v10 - v9;
  *a5 = v13;
  if (v13 < 0)
  {
    int v6 = v11;
    int v7 = v12;
  }
  *a3 = v6;
  *a4 = v7;
  return result;
}

BOOL sub_2170A4794(unsigned int *a1, _WORD *a2)
{
  unsigned int v2 = (unsigned __int16)*a2;
  unsigned int v3 = a1[7];
  unsigned int v4 = a1[8];
  if (v3 > 0x40000000)
  {
    unsigned int v11 = a1[7];
  }
  else
  {
    int v5 = a1[10];
    do
    {
      v4 *= 2;
      a1[10] = --v5;
      if (!v5)
      {
        uint64_t v6 = *((void *)a1 + 2);
        *((void *)a1 + 2) = v6 + 1;
        unint64_t v7 = *a1;
        if (v6 + 1 >= v7) {
          int v8 = 65280;
        }
        else {
          int v8 = *(unsigned __int8 *)(*((void *)a1 + 1) + v6 + 1) << 8;
        }
        unint64_t v9 = v6 + 2;
        *((void *)a1 + 2) = v9;
        if (v9 >= v7) {
          int v10 = 255;
        }
        else {
          int v10 = *(unsigned __int8 *)(*((void *)a1 + 1) + v9);
        }
        v4 |= v8 | v10;
        int v5 = 16;
        a1[10] = 16;
      }
      unsigned int v11 = 2 * v3;
      BOOL v12 = v3 >= 0x20000001;
      v3 *= 2;
    }
    while (!v12);
  }
  unsigned int v13 = (HIWORD(v11) * v2) & 0xFFFF0000;
  unsigned int v14 = v11 - v13;
  BOOL v15 = v4 >= v13;
  *a2 = *((_WORD *)a1 + ((v2 >> 7) & 0x1FE | v15) + 24) + v2;
  if (v4 < v13) {
    unsigned int v16 = v13;
  }
  else {
    unsigned int v16 = v14;
  }
  if (v4 < v13) {
    unsigned int v13 = 0;
  }
  a1[7] = v16;
  a1[8] = v4 - v13;
  return v15;
}

uint64_t sub_2170A4884(unsigned int *a1, int a2, _WORD *a3)
{
  int v6 = 0;
  if (sub_2170A4794(a1, a3) && a2 <= 30)
  {
    int v6 = 0;
    do
    {
      int v7 = a2 + 1;
      v6 |= 1 << a2;
      if (!sub_2170A4794(a1, a3)) {
        break;
      }
    }
    while (a2++ < 30);
  }
  else
  {
    int v7 = a2;
  }
  int v9 = 0;
  if (v7)
  {
    int v10 = v7 - 1;
    do
    {
      __int16 v12 = 0x8000;
      v9 |= sub_2170A4794(a1, &v12) << v10--;
    }
    while (v10 != -1);
  }
  return (v9 + v6);
}

void sub_2170A494C(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2170A4E24(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void sub_2170A4988(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2170A49C4(a1, v5, a3);
  }
  else if (!v4)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void sub_2170A49C4(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  int v9 = *(_DWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 2) >= a2)
  {
    if (a2)
    {
      BOOL v15 = &v9[3 * a2];
      do
      {
        *int v9 = *a3;
        v9[1] = a3[1];
        _OWORD v9[2] = a3[2];
        v9 += 3;
      }
      while (v9 != v15);
      int v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 2);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v22 = v6;
    if (v13) {
      unsigned int v14 = (char *)sub_216B0D05C(v6, v13);
    }
    else {
      unsigned int v14 = 0;
    }
    unsigned int v16 = &v14[12 * v10];
    std::string __p = v14;
    int v19 = v16;
    int v21 = &v14[12 * v13];
    double v17 = &v16[12 * a2];
    do
    {
      *(_DWORD *)unsigned int v16 = *a3;
      *((_DWORD *)v16 + 1) = a3[1];
      *((_DWORD *)v16 + 2) = a3[2];
      v16 += 12;
    }
    while (v16 != v17);
    int v20 = v17;
    sub_2170A4B9C(a1, &__p);
    if (v20 != v19) {
      int v20 = &v19[(v20 - v19 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_2170A4B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2170A4B9C(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2170A4C04(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    sub_216780490(a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2170A4C68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170A4C84(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_2170A4CB4((char **)a1, a2 - v2);
  }
}

void sub_2170A4CB4(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  size_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      memset_pattern16(*(void **)(v4 - 8), &unk_2174AFAB0, 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_21677CB10();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)sub_216780E70(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    BOOL v15 = &v14[2 * v11];
    unsigned int v16 = &v14[2 * v13];
    memset_pattern16(v15, &unk_2174AFAB0, 2 * a2);
    double v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_2170A4DD4(unsigned int *a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t result = sub_2170A4884(a1, a2, a4);
  if (result)
  {
    unsigned int v7 = result;
    if (sub_2170A4794(a1, a3)) {
      return v7;
    }
    else {
      return -v7;
    }
  }
  return result;
}

void sub_2170A4E24(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_216B0D05C(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    std::string __p = v12;
    unsigned int v16 = &v12[12 * v8];
    __int16 v18 = &v12[12 * v11];
    size_t v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v16, v14);
    double v17 = &v16[v14];
    sub_2170A4B9C(a1, &__p);
    if (v17 != v16) {
      double v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_2170A4FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2170A4FFC(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216781458(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2170A5064(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170A5080(uint64_t result, int a2, _WORD *a3)
{
  unint64_t v3 = (unsigned __int16)*a3;
  int v4 = *(_DWORD *)(result + 28);
  unsigned int v5 = (v4 * v3) >> 16;
  if (a2)
  {
    *(_DWORD *)(result + 24) += v5;
    unsigned int v5 = v4 - v5;
    __int16 v6 = v3 - *(_WORD *)(result + ((v3 >> 7) & 0x1FE) + 48);
  }
  else
  {
    __int16 v6 = *(_WORD *)(result + (~(*a3 >> 7) & 0x1FE) + 48) + *a3;
  }
  *(_DWORD *)(result + 28) = v5;
  *a3 = v6;
  if (v5 <= 0x4000)
  {
    unsigned int v7 = *(_DWORD *)(result + 24);
    int v8 = *(_DWORD *)(result + 40);
    while (1)
    {
      v7 *= 2;
      v5 *= 2;
      *(_DWORD *)(result + 24) = v7;
      *(_DWORD *)(result + 28) = v5;
      *(_DWORD *)(result + 40) = ++v8;
      if (v8 == 8) {
        break;
      }
LABEL_18:
      if (v5 > 0x4000) {
        return result;
      }
    }
    uint64_t v9 = *(void *)(result + 16);
    uint64_t v10 = *(int *)(result + 44);
    if (v9 + v10 + 1 > (unint64_t)*(unsigned int *)(result + 4)) {
      return result;
    }
    if (HIBYTE(v7))
    {
      ++*(unsigned char *)(v9 + *(void *)(result + 8) - 1);
      uint64_t v9 = *(void *)(result + 16);
      if (*(_DWORD *)(result + 44))
      {
        do
        {
          *(unsigned char *)(*(void *)(result + 8) + v9) = 0;
          int v11 = *(_DWORD *)(result + 44);
          uint64_t v9 = *(void *)(result + 16) + 1;
          *(void *)(result + 16) = v9;
          *(_DWORD *)(result + 44) = --v11;
        }
        while (v11);
      }
    }
    else
    {
      if ((v7 + v5) >> 24)
      {
        *(_DWORD *)(result + 44) = v10 + 1;
LABEL_17:
        int v8 = 0;
        unsigned int v7 = (unsigned __int16)v7;
        *(_DWORD *)(result + 24) = (unsigned __int16)v7;
        *(_DWORD *)(result + 40) = 0;
        goto LABEL_18;
      }
      if (v10)
      {
        do
        {
          *(unsigned char *)(*(void *)(result + 8) + v9) = -1;
          int v12 = *(_DWORD *)(result + 44);
          uint64_t v9 = *(void *)(result + 16) + 1;
          *(void *)(result + 16) = v9;
          *(_DWORD *)(result + 44) = --v12;
        }
        while (v12);
      }
    }
    *(unsigned char *)(*(void *)(result + 8) + v9) = *(_WORD *)(result + 26);
    ++*(void *)(result + 16);
    LOWORD(v7) = *(_WORD *)(result + 24);
    unsigned int v5 = *(_DWORD *)(result + 28);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_2170A51F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(int *)(a1 + 44);
  if (v1 + v2 + 3 <= (unint64_t)*(unsigned int *)(a1 + 4))
  {
    int v4 = 0;
    int v5 = *(_DWORD *)(a1 + 40);
    int v6 = *(_DWORD *)(a1 + 24);
    do
    {
      if ((v6 | ((2 << v4) - 1)) > *(_DWORD *)(a1 + 28) - 1) {
        break;
      }
      ++v4;
    }
    while (v4 != 16);
    unsigned int v7 = v6 | ~(-1 << v4);
    *(_DWORD *)(a1 + 24) = v7;
    if (v5 <= 7)
    {
      int v8 = v5 - 8;
      do
        unsigned int v7 = (2 * v7) | 1;
      while (!__CFADD__(v8++, 1));
      *(_DWORD *)(a1 + 24) = v7;
      *(_DWORD *)(a1 + 40) = 8;
    }
    if (HIBYTE(v7))
    {
      ++*(unsigned char *)(v1 + *(void *)(a1 + 8) - 1);
      uint64_t v1 = *(void *)(a1 + 16);
      if (*(_DWORD *)(a1 + 44))
      {
        do
        {
          *(unsigned char *)(*(void *)(a1 + 8) + v1) = 0;
          int v10 = *(_DWORD *)(a1 + 44);
          uint64_t v1 = *(void *)(a1 + 16) + 1;
          *(void *)(a1 + 16) = v1;
          *(_DWORD *)(a1 + 44) = --v10;
        }
        while (v10);
      }
    }
    else if (v2)
    {
      do
      {
        *(unsigned char *)(*(void *)(a1 + 8) + v1) = -1;
        int v11 = *(_DWORD *)(a1 + 44);
        uint64_t v1 = *(void *)(a1 + 16) + 1;
        *(void *)(a1 + 16) = v1;
        *(_DWORD *)(a1 + 44) = --v11;
      }
      while (v11);
    }
    *(unsigned char *)(*(void *)(a1 + 8) + v1) = *(_WORD *)(a1 + 26);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16) + 1;
    *(void *)(a1 + 16) = v13;
    *(unsigned char *)(v12 + v13) = BYTE1(*(_DWORD *)(a1 + 24));
    unint64_t v3 = *(void *)(a1 + 16) + 1;
    *(void *)(a1 + 16) = v3;
    if (v5 >= 1)
    {
      *(unsigned char *)(*(void *)(a1 + 8) + v3) = *(_DWORD *)(a1 + 24);
      unint64_t v3 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v3;
    }
    if (v3 >= 2)
    {
      uint64_t v14 = *(void *)(a1 + 8) - 1;
      while (*(unsigned __int8 *)(v14 + v3) == 255)
      {
        *(void *)(a1 + 16) = --v3;
        if (v3 <= 1) {
          return 1;
        }
      }
    }
  }
  else
  {
    unint64_t v3 = 0;
    *(_DWORD *)a1 = 1;
  }
  return v3;
}

void sub_2170A5390(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  sub_21681C000(a1, 0);
  int v5 = 0;
  sub_216820DFC(v3, a2 + 1, &v5);
  v3 += 24;
  sub_21681C000(v3, 0);
  int v4 = 0;
  sub_216820DFC(v3, a2, &v4);
}

void sub_2170A5400(int **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v3 = (char *)v1 - (char *)*a1;
  if ((int)(v3 >> 2) >= 2)
  {
    uint64_t v4 = (v3 >> 2);
    int v7 = *v2;
    int v5 = v2 + 1;
    int v6 = v7;
    uint64_t v8 = v4 - 1;
    do
    {
      v6 += *v5;
      *v5++ = v6;
      --v8;
    }
    while (v8);
  }
  sub_21681C000((uint64_t)(a1 + 6), *(v1 - 1));
}

uint64_t sub_2170A5440(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

_DWORD *sub_2170A5494(void *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  int v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 2) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_216BD0794(a1, v12);
    uint64_t v14 = (_DWORD *)a1[1];
    uint64_t v13 = (_DWORD **)(a1 + 1);
    uint64_t result = v14;
    BOOL v15 = (char *)v14;
    if (v6 != a3)
    {
      BOOL v15 = (char *)result;
      do
      {
        *(_DWORD *)BOOL v15 = *v6;
        *((_DWORD *)v15 + 1) = v6[1];
        *((_DWORD *)v15 + 2) = v6[2];
        v15 += 12;
        v6 += 3;
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v24 = v15 - (char *)result;
    goto LABEL_27;
  }
  double v17 = (_DWORD *)a1[1];
  uint64_t v13 = (_DWORD **)(a1 + 1);
  unsigned int v16 = v17;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v17 - result);
  if (v18 >= a4)
  {
    BOOL v15 = (char *)result;
    if (a2 != a3)
    {
      double v25 = result;
      do
      {
        uint64_t v26 = *(void *)v6;
        std::locale v25[2] = v6[2];
        *(void *)double v25 = v26;
        v25 += 3;
        v6 += 3;
        v15 += 12;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  uint64_t v19 = &a2[3 * v18];
  if (v16 != result)
  {
    uint64_t v20 = 12 * v18;
    do
    {
      uint64_t v21 = *(void *)v6;
      result[2] = v6[2];
      *(void *)uint64_t result = v21;
      result += 3;
      v6 += 3;
      v20 -= 12;
    }
    while (v20);
    uint64_t result = *v13;
  }
  uint64_t v22 = (char *)result;
  if (v19 != a3)
  {
    uint64_t v22 = (char *)result;
    int v23 = result;
    do
    {
      _DWORD *v23 = *v19;
      v23[1] = v19[1];
      void v23[2] = v19[2];
      v22 += 12;
      v19 += 3;
      v23 += 3;
    }
    while (v19 != a3);
  }
  int64_t v24 = v22 - (char *)result;
LABEL_27:
  *uint64_t v13 = (_DWORD *)((char *)result + v24);
  return result;
}

uint64_t sub_2170A5664(uint64_t a1, signed int a2, int a3, _WORD *a4, _WORD *a5)
{
  signed int v6 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  uint64_t result = sub_2170A56D8(a1, a2, a3, a5);
  if (v6)
  {
    return sub_2170A5080(a1, v6 >= 0, a4);
  }
  return result;
}

uint64_t sub_2170A56D8(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  int v5 = a3;
  unsigned int v6 = a2;
  for (int i = 1 << a3; v6 >= 1 << v5; int i = 1 << v5)
  {
    sub_2170A5080(a1, 1, a4);
    ++v5;
    v6 -= i;
  }
  uint64_t result = sub_2170A5080(a1, 0, a4);
  if (v5)
  {
    int v10 = v5 - 1;
    do
    {
      __int16 v11 = 0x8000;
      uint64_t result = sub_2170A5080(a1, (v6 >> v10--) & 1, &v11);
    }
    while (v10 != -1);
  }
  return result;
}

int *sub_2170A5790(int *result, int *a2, int *a3, int a4, int *a5, int *a6, int *a7, int *a8, _DWORD *a9)
{
  uint64_t v10 = *a7;
  uint64_t v11 = a7[1];
  uint64_t v12 = *a5 - v10;
  uint64_t v13 = a5[1] - v11;
  uint64_t v14 = a7[2];
  uint64_t v15 = a5[2] - v14;
  uint64_t v16 = *a6 - v10;
  uint64_t v17 = a6[1] - v11;
  uint64_t v18 = a6[2] - v14;
  uint64_t v19 = *a8 - v10;
  uint64_t v20 = a8[1] - v11;
  uint64_t v21 = a8[2] - v14;
  unint64_t v22 = v12 * v12 + v13 * v13 + v15 * v15;
  unint64_t v23 = v16 * v16 + v17 * v17 + v18 * v18;
  if (v22 >> 30) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v23 >> 30 == 0;
  }
  if (v24 && (unint64_t)(v19 * v19 + v20 * v20 + v21 * v21) >> 30 == 0)
  {
    uint64_t v32 = v16 * v12 + v17 * v13 + v18 * v15;
    unint64_t v33 = v23 * v22 - v32 * v32;
    if (v33)
    {
      uint64_t v34 = v19 * v12 + v20 * v13 + v21 * v15;
      uint64_t v35 = v19 * v16 + v20 * v17 + v21 * v18;
      if (v33 >= 0x80)
      {
        char v44 = __clz(v33);
        char v45 = 57 - v44;
        uint64_t v46 = 1 << (56 - v44);
        unint64_t v33 = (uint64_t)(v46 + v33) >> v45;
        uint64_t v47 = v34 * v23 - v35 * v32;
        if (v47 < 0) {
          uint64_t v36 = -(uint64_t)((unint64_t)(v46 - v47) >> v45);
        }
        else {
          uint64_t v36 = (unint64_t)(v46 + v47) >> v45;
        }
        if (v36 >= 0x3FFFFFFFFFFFLL) {
          uint64_t v36 = 0x3FFFFFFFFFFFLL;
        }
        if (v36 <= (uint64_t)0xFFFFC00000000001) {
          uint64_t v36 = 0xFFFFC00000000001;
        }
        uint64_t v48 = v35 * v22 - v34 * v32;
        if (v48 < 0) {
          uint64_t v37 = -(uint64_t)((unint64_t)(v46 - v48) >> v45);
        }
        else {
          uint64_t v37 = (unint64_t)(v46 + v48) >> v45;
        }
      }
      else
      {
        uint64_t v36 = v34 * v23 - v35 * v32;
        if (v36 >= 0x3FFFFFFFFFFFLL) {
          uint64_t v36 = 0x3FFFFFFFFFFFLL;
        }
        if (v36 <= (uint64_t)0xFFFFC00000000001) {
          uint64_t v36 = 0xFFFFC00000000001;
        }
        uint64_t v37 = v35 * v22 - v34 * v32;
      }
      if (v37 >= 0x3FFFFFFFFFFFLL) {
        uint64_t v37 = 0x3FFFFFFFFFFFLL;
      }
      unint64_t v49 = 0xFFFFC00000000001;
      if (v37 > (uint64_t)0xFFFFC00000000001) {
        unint64_t v49 = v37;
      }
      uint64_t v50 = word_2174AFAC8[v33 - 1];
      if (v36 * v50 >= 0x3FFFFFFF) {
        uint64_t v51 = 0x3FFFFFFFLL;
      }
      else {
        uint64_t v51 = v36 * v50;
      }
      if (v51 <= -1073741823) {
        uint64_t v51 = -1073741823;
      }
      uint64_t v52 = v49 * v50;
      if (v52 >= 0x3FFFFFFF) {
        uint64_t v52 = 0x3FFFFFFFLL;
      }
      if (v52 <= -1073741823) {
        uint64_t v52 = -1073741823;
      }
      if (a4 >= 1)
      {
        uint64_t v53 = a4;
        do
        {
          uint64_t v55 = *result++;
          uint64_t v54 = v55;
          uint64_t v56 = *a2++;
          uint64_t v57 = v51 * v54 + v52 * v56;
          uint64_t v58 = *a3++;
          uint64_t v59 = v57 + (0x10000 - (v52 + v51)) * v58;
          if (v59 >= 0) {
            int64_t v60 = (unint64_t)(v59 + 0x8000) >> 16;
          }
          else {
            int64_t v60 = -(uint64_t)((unint64_t)(0x8000 - v59) >> 16);
          }
          if (v60 >= 0x3FFFFFFF) {
            int64_t v60 = 0x3FFFFFFFLL;
          }
          if (v60 <= -1073741823) {
            LODWORD(v60) = -1073741823;
          }
          *a9++ = v60;
          --v53;
        }
        while (v53);
      }
    }
    else if (a4 >= 1)
    {
      uint64_t v38 = a4;
      do
      {
        int v40 = *result++;
        int v39 = v40;
        int v42 = *a2++;
        int v41 = v42;
        int v43 = *a3++;
        *a9++ = v41 + v39 - v43;
        --v38;
      }
      while (v38);
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v26 = a4;
    do
    {
      int v28 = *result++;
      int v27 = v28;
      int v30 = *a2++;
      int v29 = v30;
      int v31 = *a3++;
      *a9++ = v29 + v27 - v31;
      --v26;
    }
    while (v26);
  }
  return result;
}

int *sub_2170A5A30(int *result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7, _DWORD *a8)
{
  *a8 = 0;
  int v8 = a5[1];
  int v9 = a4[1];
  int v10 = a5[2];
  int v11 = a4[2];
  unint64_t v12 = (v8 - v9) * (uint64_t)(v8 - v9) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v10 - v11) * (uint64_t)(v10 - v11);
  int v13 = *a6;
  int v14 = a6[1];
  int v15 = a6[2];
  unint64_t v16 = (v14 - v9) * (uint64_t)(v14 - v9) + (v13 - *a4) * (uint64_t)(v13 - *a4) + (v15 - v11) * (uint64_t)(v15 - v11);
  unint64_t v17 = (v14 - v8) * (uint64_t)(v14 - v8) + (v13 - *a5) * (uint64_t)(v13 - *a5) + (v15 - v10) * (uint64_t)(v15 - v10);
  if (v12 >> 28) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v16 >> 28 == 0;
  }
  if (!v18 || v17 >> 28 != 0 || v12 == 0)
  {
    int v21 = *a2 + *result;
    if (v21 < 0 != __OFADD__(*a2, *result)) {
      ++v21;
    }
    *a7 = v21 >> 1;
    int v22 = result[1];
    int v23 = a2[1];
    BOOL v24 = __OFADD__(v23, v22);
    int v25 = v23 + v22;
    if (v25 < 0 != v24) {
      ++v25;
    }
    LODWORD(v26) = v25 >> 1;
  }
  else
  {
    char v27 = __clz(v12);
    uint64_t v28 = 1 << (56 - v27);
    if (v12 >= 0x80)
    {
      unint64_t v17 = (v28 + v17) >> (57 - v27);
      unint64_t v16 = (v28 + v16) >> (57 - v27);
      unint64_t v12 = (v28 + v12) >> (57 - v27);
    }
    uint64_t v29 = word_2174AFAC8[v12 - 1];
    uint64_t v30 = (v16 - v17) * v29;
    uint64_t v31 = 1073676288;
    if (v30 < 1073676288) {
      uint64_t v31 = v30;
    }
    uint64_t v32 = v31 + 0x10000;
    BOOL v33 = v30 < -1073807360;
    uint64_t v34 = -1073741824;
    if (!v33) {
      uint64_t v34 = v32;
    }
    uint64_t v35 = ((v16 * v29) << 18) - v34 * v34;
    if (v35 >= 0xFFFFFFFFLL) {
      uint64_t v35 = 0xFFFFFFFFLL;
    }
    LODWORD(v36) = v35 & ~(v35 >> 63);
    uint64_t v37 = *result;
    uint64_t v38 = result[1];
    uint64_t v39 = *a2 - v37;
    uint64_t v40 = a2[1] - v38;
    uint64_t v41 = a3[1] - v38;
    unsigned int v42 = __clz(v36);
    unsigned int v43 = ((v36 >> ((32 - v42) >> 1)) + (1 << ((32 - v42) >> 1))) >> 1;
    if (v36 >= 2) {
      uint64_t v36 = v43;
    }
    else {
      uint64_t v36 = v36;
    }
    if ((*a3 - v37) * v40 < v41 * v39)
    {
      uint64_t v36 = -v36;
      *a8 = 1;
      LODWORD(v37) = *result;
    }
    uint64_t v44 = (int)v37;
    uint64_t v45 = v34 * v39 + v36 * v40;
    if (v45 >= 0) {
      unint64_t v46 = (unint64_t)(v45 + 0x10000) >> 17;
    }
    else {
      unint64_t v46 = -(uint64_t)((unint64_t)(0x10000 - v45) >> 17);
    }
    uint64_t v47 = v46 + v44;
    uint64_t v48 = v34 * v40 - v36 * v39;
    if (v48 >= 0) {
      unint64_t v49 = (unint64_t)(v48 + 0x10000) >> 17;
    }
    else {
      unint64_t v49 = -(uint64_t)((unint64_t)(0x10000 - v48) >> 17);
    }
    uint64_t v50 = v49 + result[1];
    if (v47 >= 0x3FFFFFFF) {
      uint64_t v47 = 0x3FFFFFFFLL;
    }
    if (v47 <= -1073741823) {
      LODWORD(v47) = -1073741823;
    }
    *a7 = v47;
    if (v50 >= 0x3FFFFFFF) {
      uint64_t v26 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v26 = v50;
    }
    if (v26 <= -1073741823) {
      LODWORD(v26) = -1073741823;
    }
  }
  a7[1] = v26;
  return result;
}

int *sub_2170A5C70(int *result, int *a2, _DWORD *a3, _DWORD *a4, int *a5, int a6, int *a7)
{
  int v7 = a4[1];
  int v8 = a3[1];
  int v9 = a4[2];
  int v10 = a3[2];
  unint64_t v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a4 - *a3) * (uint64_t)(*a4 - *a3) + (v9 - v10) * (uint64_t)(v9 - v10);
  int v12 = *a5;
  int v13 = a5[1];
  int v14 = a5[2];
  unint64_t v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a3) * (uint64_t)(v12 - *a3) + (v14 - v10) * (uint64_t)(v14 - v10);
  unint64_t v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 >> 28 == 0;
  }
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    int v20 = *a2 + *result;
    if (v20 < 0 != __OFADD__(*a2, *result)) {
      ++v20;
    }
    *a7 = v20 >> 1;
    int v21 = result[1];
    int v22 = a2[1];
    BOOL v23 = __OFADD__(v22, v21);
    int v24 = v22 + v21;
    if (v24 < 0 != v23) {
      ++v24;
    }
    LODWORD(v25) = v24 >> 1;
  }
  else
  {
    char v26 = __clz(v11);
    char v27 = 57 - v26;
    uint64_t v28 = 1 << (56 - v26);
    unint64_t v29 = (v28 + v11) >> v27;
    unint64_t v30 = (v28 + v15) >> v27;
    unint64_t v31 = (v28 + v16) >> v27;
    if (v11 >= 0x80)
    {
      unint64_t v16 = v31;
      unint64_t v15 = v30;
      unint64_t v11 = v29;
    }
    uint64_t v32 = word_2174AFAC8[v11 - 1];
    uint64_t v33 = (v15 - v16) * v32;
    uint64_t v34 = 1073676288;
    if (v33 < 1073676288) {
      uint64_t v34 = v33;
    }
    uint64_t v35 = v34 + 0x10000;
    BOOL v36 = v33 < -1073807360;
    uint64_t v37 = -1073741824;
    if (!v36) {
      uint64_t v37 = v35;
    }
    uint64_t v38 = ((v15 * v32) << 18) - v37 * v37;
    if (v38 >= 0xFFFFFFFFLL) {
      uint64_t v38 = 0xFFFFFFFFLL;
    }
    LODWORD(v38) = v38 & ~(v38 >> 63);
    uint64_t v39 = *result;
    uint64_t v40 = result[1];
    uint64_t v41 = *a2 - v39;
    uint64_t v42 = a2[1] - v40;
    unsigned int v43 = __clz(v38);
    if (v38 >= 2) {
      uint64_t v38 = ((v38 >> ((32 - v43) >> 1)) + (1 << ((32 - v43) >> 1))) >> 1;
    }
    else {
      uint64_t v38 = v38;
    }
    uint64_t v44 = v38 * *((int *)&unk_2174AFA80 + a6);
    uint64_t v45 = v37 * v41 + v44 * v42;
    if (v45 >= 0) {
      unint64_t v46 = (unint64_t)(v45 + 0x10000) >> 17;
    }
    else {
      unint64_t v46 = -(uint64_t)((unint64_t)(0x10000 - v45) >> 17);
    }
    uint64_t v47 = v46 + v39;
    uint64_t v48 = v37 * v42 - v44 * v41;
    if (v48 >= 0) {
      unint64_t v49 = (unint64_t)(v48 + 0x10000) >> 17;
    }
    else {
      unint64_t v49 = -(uint64_t)((unint64_t)(0x10000 - v48) >> 17);
    }
    uint64_t v25 = v49 + v40;
    if (v47 >= 0x3FFFFFFF) {
      uint64_t v50 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v50 = v47;
    }
    if (v50 <= -1073741823) {
      LODWORD(v50) = -1073741823;
    }
    *a7 = v50;
    if (v25 >= 0x3FFFFFFF) {
      uint64_t v25 = 0x3FFFFFFFLL;
    }
    if (v25 <= -1073741823) {
      LODWORD(v25) = -1073741823;
    }
  }
  a7[1] = v25;
  return result;
}

unint64_t sub_2170A5E8C(unint64_t result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  int v7 = a5[1];
  int v8 = a4[1];
  int v9 = a5[2];
  int v10 = a4[2];
  unint64_t v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v9 - v10) * (uint64_t)(v9 - v10);
  int v12 = *a6;
  int v13 = a6[1];
  int v14 = a6[2];
  unint64_t v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v10) * (uint64_t)(v14 - v10);
  unint64_t v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a5) * (uint64_t)(v12 - *a5) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 >> 28 == 0;
  }
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    int v20 = *a2 + *(_DWORD *)result;
    if (v20 < 0 != __OFADD__(*a2, *(_DWORD *)result)) {
      ++v20;
    }
    *a7 = v20 >> 1;
    int v21 = *(_DWORD *)(result + 4);
    int v22 = a2[1];
    BOOL v23 = __OFADD__(v22, v21);
    int v24 = v22 + v21;
    if (v24 < 0 != v23) {
      ++v24;
    }
    LODWORD(v25) = v24 >> 1;
  }
  else
  {
    char v26 = __clz(v11);
    char v27 = 57 - v26;
    uint64_t v28 = 1 << (56 - v26);
    unint64_t v29 = (v28 + v11) >> v27;
    unint64_t v30 = (v28 + v15) >> v27;
    unint64_t v31 = (v28 + v16) >> v27;
    if (v11 >= 0x80)
    {
      unint64_t v16 = v31;
      unint64_t v15 = v30;
      unint64_t v11 = v29;
    }
    uint64_t v32 = word_2174AFAC8[v11 - 1];
    uint64_t v33 = (v15 - v16) * v32;
    uint64_t v34 = 1073676288;
    if (v33 < 1073676288) {
      uint64_t v34 = v33;
    }
    uint64_t v35 = v34 + 0x10000;
    BOOL v36 = v33 < -1073807360;
    uint64_t v37 = -1073741824;
    if (!v36) {
      uint64_t v37 = v35;
    }
    uint64_t v38 = ((v15 * v32) << 18) - v37 * v37;
    if (v38 >= 0xFFFFFFFFLL) {
      uint64_t v38 = 0xFFFFFFFFLL;
    }
    LODWORD(v38) = v38 & ~(v38 >> 63);
    uint64_t v39 = *(int *)result;
    uint64_t v40 = *(int *)(result + 4);
    uint64_t v41 = *a2 - v39;
    uint64_t v42 = a2[1] - v40;
    unsigned int v43 = (32 - __clz(v38)) >> 1;
    uint64_t result = v38 >> v43;
    if (v38 >= 2) {
      uint64_t v38 = (result + (1 << v43)) >> 1;
    }
    else {
      uint64_t v38 = v38;
    }
    if ((v40 - a3[1]) * v41 < (v39 - *a3) * v42) {
      uint64_t v38 = -v38;
    }
    uint64_t v44 = v37 * v41 - v38 * v42;
    if (v44 >= 0) {
      unint64_t v45 = (unint64_t)(v44 + 0x10000) >> 17;
    }
    else {
      unint64_t v45 = -(uint64_t)((unint64_t)(0x10000 - v44) >> 17);
    }
    uint64_t v46 = v45 + v39;
    uint64_t v47 = v37 * v42 + v38 * v41;
    if (v47 >= 0) {
      unint64_t v48 = (unint64_t)(v47 + 0x10000) >> 17;
    }
    else {
      unint64_t v48 = -(uint64_t)((unint64_t)(0x10000 - v47) >> 17);
    }
    uint64_t v25 = v48 + v40;
    if (v46 >= 0x3FFFFFFF) {
      uint64_t v49 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v49 = v46;
    }
    if (v49 <= -1073741823) {
      LODWORD(v49) = -1073741823;
    }
    *a7 = v49;
    if (v25 >= 0x3FFFFFFF) {
      uint64_t v25 = 0x3FFFFFFFLL;
    }
    if (v25 <= -1073741823) {
      LODWORD(v25) = -1073741823;
    }
  }
  a7[1] = v25;
  return result;
}

char *sub_2170A60B4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = a3 - 4;
  if (a3 >= 4)
  {
    unsigned int v7 = *a2;
    int v5 = a2 + 1;
    unsigned int v6 = (char *)v7;
    if (v5) {
      uint64_t v4 = &v6[(void)v5];
    }
    else {
      uint64_t v4 = v6;
    }
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    uint64_t v3 = 0;
    unsigned int v6 = 0;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v8 = 0;
  if (((v3 - (void)v6) & 0x8000000000000000) == 0)
  {
    *(_DWORD *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    sub_2170A4250(a1);
    return v4;
  }
  return (char *)v8;
}

uint64_t sub_2170A6138(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, int32x2_t *a5, _DWORD *a6, void *a7, int *a8)
{
  *(_DWORD *)(a1 + 4384) = 0;
  char v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  int v55 = 0;
  char v56 = 4;
  uint64_t v57 = 0x101010100000002;
  unsigned __int8 v58 = 1;
  unint64_t v16 = (_DWORD *)sub_2170A654C(a2, a3, (uint64_t)&v52, (int16x8_t)0);
  if (!v16) {
    goto LABEL_59;
  }
  if (v17 < 0) {
    goto LABEL_59;
  }
  if (!a2) {
    goto LABEL_59;
  }
  if (((a3 - DWORD2(v52)) & 0x8000000000000000) != 0) {
    goto LABEL_59;
  }
  if ((unint64_t)v16 + v17 < a2) {
    goto LABEL_59;
  }
  if (a2 + DWORD2(v52) < (unint64_t)v16) {
    goto LABEL_59;
  }
  uint64_t v18 = a2 + DWORD2(v52) - (void)v16;
  if (v18 < 0) {
    goto LABEL_59;
  }
  if (!a5 || !a7 || !a6 && (HIDWORD(v53) & 0xFFFFFFFE) == 2 || !a8 && v54) {
    goto LABEL_14;
  }
  int16x4_t v20 = (int16x4_t)vand_s8((int8x8_t)vdup_n_s16(BYTE4(v52) == 0), (int8x8_t)vceq_s16((int16x4_t)(*(void *)&vdup_n_s16(BYTE5(v52)) & 0xFF00FF00FF00FFLL), (int16x4_t)0x8000600040005));
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v20, 0xFuLL))) & 1) == 0
    || v54 && (vorr_s8((int8x8_t)v20, (int8x8_t)vdup_lane_s16(v20, 1)).u8[0] & 1) != 0 && (v56 & 0xFB) != 0)
  {
    uint64_t v19 = 4;
    goto LABEL_60;
  }
  if (a3 < DWORD2(v52) || v57 == 3 || v57 == 4 || v56 == 3 || v56 == 1) {
    goto LABEL_59;
  }
  uint64_t v19 = 0;
  if (!v53 || !HIDWORD(v52)) {
    return v19;
  }
  unsigned int v49 = 0;
  uint64_t v48 = 0;
  if ((unint64_t)v18 < 4
    || (LODWORD(v50) = *v16, (v18 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    || (HIDWORD(v50) = v16[1], (v18 & 0xFFFFFFFFFFFFFFFCLL) == 8))
  {
    uint64_t v21 = 0;
    int v22 = 0;
  }
  else
  {
    uint64_t v21 = v18 - 12;
    int v22 = v16 + 3;
    int v51 = v16[2];
  }
  unsigned int v23 = v58;
  if (v58)
  {
    if (!v21) {
      goto LABEL_59;
    }
    unsigned int v23 = *(unsigned __int8 *)v22;
    LODWORD(v48) = v23;
    if (v21 == 1) {
      goto LABEL_59;
    }
    unsigned int v24 = *((unsigned __int8 *)v22 + 1);
    HIDWORD(v48) = v24;
    if (v21 == 2) {
      goto LABEL_59;
    }
    v21 -= 3;
    unsigned int v25 = *((unsigned __int8 *)v22 + 2);
    int v22 = (unsigned int *)((char *)v22 + 3);
    unsigned int v49 = v25;
  }
  else
  {
    unsigned int v25 = 0;
    unsigned int v24 = 0;
  }
  if (!v22) {
    goto LABEL_59;
  }
  if ((int)v23 <= (int)v24) {
    unsigned int v26 = v24;
  }
  else {
    unsigned int v26 = v23;
  }
  if (v23 <= v24) {
    unsigned int v23 = v24;
  }
  if (v26 < v25) {
    unsigned int v23 = v25;
  }
  if (v23 >= 0x1D) {
    goto LABEL_59;
  }
  sub_2170A66B8(a1 + 1072, &v52, &v50, &v48);
  sub_2170A67D4(a1 + 1304, a1 + 1072);
  char v27 = sub_2170A60B4(a1, v22, v21);
  if (!v27) {
    goto LABEL_59;
  }
  uint64_t v30 = v28;
  if (v28 < 0) {
    goto LABEL_59;
  }
  unint64_t v31 = (unsigned int *)v27;
  if (*(unsigned char *)(a1 + 1152)) {
    sub_2170A69D0(a1, v29);
  }
  else {
    sub_2170A6BFC(a1, v29);
  }
  uint64_t v19 = *(unsigned int *)(a1 + 4384);
  if (v19) {
    return v19;
  }
  if (v54)
  {
    if (!a8)
    {
LABEL_14:
      uint64_t v19 = 5;
LABEL_60:
      *(_DWORD *)(a1 + 4384) = v19;
      return v19;
    }
    if (sub_2170A60B4(a1, v31, v30) && (v32 & 0x8000000000000000) == 0)
    {
      sub_2170A6DD0(a1, a8);
      uint64_t v19 = *(unsigned int *)(a1 + 4384);
      if (v19) {
        return v19;
      }
      uint64_t v19 = sub_2170A7130(a1, a8);
      *(_DWORD *)(a1 + 4384) = v19;
      goto LABEL_63;
    }
LABEL_59:
    uint64_t v19 = 3;
    goto LABEL_60;
  }
  sub_21681C000(a1 + 1232, 2uLL);
  uint64_t v34 = *(_DWORD **)(a1 + 1232);
  *uint64_t v34 = 0;
  v34[1] = v53;
  uint64_t v19 = *(unsigned int *)(a1 + 4384);
LABEL_63:
  if (!v19)
  {
    uint64_t v35 = *(unsigned char **)(a1 + 1184);
    BOOL v36 = *(unsigned char **)(a1 + 1192);
    if (v36 != v35) {
      memmove(a7, v35, v36 - v35);
    }
    uint64_t v37 = HIDWORD(v52);
    if (SHIDWORD(v52) >= 1)
    {
      int32x2_t v38 = *(int32x2_t *)(a1 + 1092);
      int v39 = *(_DWORD *)(a1 + 1100);
      uint64_t v40 = (_DWORD *)(*(void *)(a1 + 1160) + 8);
      uint64_t v41 = a5 + 1;
      do
      {
        __int32 v42 = *v40 + v39;
        v41[-1] = vadd_s32(*(int32x2_t *)(v40 - 2), v38);
        v41->i32[0] = v42;
        uint64_t v41 = (int32x2_t *)((char *)v41 + 12);
        v40 += 3;
        --v37;
      }
      while (v37);
    }
    if (a6)
    {
      uint64_t v43 = *(void *)(a1 + 1208);
      uint64_t v44 = *(void *)(a1 + 1216) - v43;
      if ((unint64_t)v44 >= 5)
      {
        unint64_t v45 = v44 >> 2;
        if (v45 <= 2) {
          unint64_t v45 = 2;
        }
        unint64_t v46 = v45 - 1;
        uint64_t v47 = (_DWORD *)(v43 + 4);
        do
        {
          *a6++ = *v47 - *(v47 - 1);
          ++v47;
          --v46;
        }
        while (v46);
      }
    }
    uint64_t v19 = 0;
    *a4 = DWORD2(v52);
  }
  return v19;
}

uint64_t sub_2170A654C(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  if (a2 < 4) {
    return 0;
  }
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v4 == 12
    || v4 == 16
    || v4 == 20
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27
    || v4 == 28)
  {
    return 0;
  }
  uint64_t v7 = a1 + 32;
  if (a1 == -32) {
    return 0;
  }
  uint64_t v5 = 0;
  if (*(_DWORD *)a1 == -90009999)
  {
    int v8 = *(_DWORD *)(a1 + 4);
    char v9 = *(unsigned char *)(a1 + 8);
    char v10 = *(unsigned char *)(a1 + 9);
    __int16 v11 = *(_WORD *)(a1 + 10);
    int v12 = *(_DWORD *)(a1 + 12);
    int v13 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
    int v14 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
    char v15 = *(unsigned char *)(a1 + 24);
    int v16 = *(unsigned __int8 *)(a1 + 25);
    unsigned int v17 = *(unsigned __int8 *)(a1 + 26);
    int v18 = *(unsigned __int8 *)(a1 + 27);
    int v19 = *(_DWORD *)(a1 + 28) & 0x7FFFFFFF;
    *(uint16x4_t *)a4.i8 = vshl_u16((uint16x4_t)vdup_n_s16(v17), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
    if (v17 >> 6 == 1) {
      int v19 = 4 * v14;
    }
    if (v17 < 0x40) {
      int v19 = 3 * v14;
    }
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 4) = v9;
    *(unsigned char *)(a3 + 5) = v10;
    *(_WORD *)(a3 + 6) = v11;
    *(_DWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 12) = v13;
    *(_DWORD *)(a3 + 16) = v14;
    *(_DWORD *)(a3 + 20) = v19;
    *(_DWORD *)(a3 + 24) = v18;
    *(_DWORD *)(a3 + 28) = v17 >> 6;
    *(unsigned char *)(a3 + 32) = v17 & 1;
    *(_DWORD *)(a3 + 36) = v8;
    *(unsigned char *)(a3 + 40) = v15;
    *(_DWORD *)(a3 + 44) = v16;
    a4.i32[0] &= 0xFF01FF01;
    a4.i16[2] &= 0xFF01u;
    a4.i16[3] &= 0xFF01u;
    *(_DWORD *)(a3 + 48) = vmovn_s16(a4).u32[0];
    *(unsigned char *)(a3 + 52) = (v17 & 0x20) != 0;
    return v7;
  }
  return v5;
}

void sub_2170A66B8(uint64_t a1, long long *a2, uint64_t *a3, uint64_t *a4)
{
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[2];
  *(void *)(a1 + 77) = *(void *)((char *)a2 + 45);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = 0;
  uint64_t v9 = *a4;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 8) = v9;
  uint64_t v10 = *a3;
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 20) = v10;
  unint64_t v11 = *((int *)a2 + 3);
  sub_2170A494C((uint64_t *)(a1 + 88), v11);
  sub_21681C000(a1 + 136, 0);
  unint64_t v12 = *((int *)a2 + 4) + 1;
  LODWORD(v13) = 0;
  sub_216820DFC(a1 + 136, v12, &v13);
  sub_21681C000(a1 + 112, *((int *)a2 + 5));
  sub_2170A494C((uint64_t *)(a1 + 184), 0);
  int v14 = -1;
  uint64_t v13 = -1;
  sub_2170A4988((uint64_t *)(a1 + 184), v11, &v13);
  sub_2170A494C((uint64_t *)(a1 + 208), 0);
  int v14 = -1;
  uint64_t v13 = -1;
  sub_2170A4988((uint64_t *)(a1 + 208), v11, &v13);
  sub_21681C000(a1 + 160, 0);
}

void sub_2170A67D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(int *)(a2 + 44);
  if (*(unsigned char *)(a2 + 81)) {
    BOOL v4 = *(unsigned char *)(a2 + 80) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 || (sub_21681C000(a1 + 120, 0), int v12 = 0, sub_216820DFC(a1 + 120, v3, &v12), *(unsigned char *)(a2 + 80)))
  {
    sub_2170B1210(a1 + 168, v3);
    sub_2170B124C(a1 + 192, 64);
  }
  sub_2170B12E4(a1 + 144, v3);
  long long v6 = *(unsigned char **)(a1 + 144);
  long long v7 = *(unsigned char **)(a1 + 152);
  if (v6 != v7) {
    memset(v6, 255, ((v7 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  sub_21681FE20((void **)a1, 0x100uLL);
  sub_21681FE20((void **)(a1 + 96), 0x40uLL);
  sub_21681FE20((void **)(a1 + 72), 0x40uLL);
  sub_21681FE20((void **)(a1 + 24), 0x20uLL);
  sub_2170B1314((unint64_t *)(a1 + 48), 0x20uLL);
  memset_pattern16((void *)(a1 + 1992), &unk_2174AFAB0, 0xAuLL);
  uint64_t v8 = 0;
  *(_WORD *)(a1 + 2002) = 0x8000;
  do
  {
    memset_pattern16((void *)(a1 + 2004 + v8), &unk_2174AFAB0, 6uLL);
    v8 += 6;
  }
  while (v8 != 96);
  *(_WORD *)(a1 + 2100) = 0x8000;
  memset_pattern16((void *)(a1 + 2102), &unk_2174AFAB0, 6uLL);
  uint64_t v9 = 0;
  *(_WORD *)(a1 + 2108) = 0x8000;
  do
  {
    memset_pattern16((void *)(a1 + 2110 + v9), &unk_2174AFAB0, 0x10uLL);
    v9 += 16;
  }
  while (v9 != 80);
  memset_pattern16((void *)(a1 + 2194), &unk_2174AFAB0, 0x20uLL);
  memset_pattern16((void *)(a1 + 2232), &unk_2174AFAB0, 0x80uLL);
  *(_WORD *)(a1 + 2230) = 0x8000;
  *(_DWORD *)(a1 + 2190) = -2147450880;
  *(_DWORD *)(a1 + 2226) = -2147450880;
  memset_pattern16((void *)(a1 + 2368), &unk_2174AFAB0, 6uLL);
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 2376;
  do
  {
    sub_2170A8CEC(v11 + v10, 3);
    v10 += 120;
  }
  while (v10 != 240);
}

uint64_t sub_2170A69D0(uint64_t a1, int32x2_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 1116);
  uint64_t v27 = 0;
  int v26 = 0;
  if ((int)v3 < 1)
  {
    int v22 = 0;
    int v23 = 0;
LABEL_27:
    BOOL v24 = *(_DWORD *)(a1 + 1120) == v23 && v3 == v22;
    if (v24 && *(_DWORD *)(a1 + 1124) == v26)
    {
      return 0;
    }
    else
    {
      uint64_t result = 3;
      *(_DWORD *)(a1 + 4384) = 3;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(a1 + 1496);
    LODWORD(v6) = -1;
    while (1)
    {
      if (v4 == HIDWORD(v27))
      {
        ++HIDWORD(v27);
        int v7 = *(unsigned char *)(a1 + 1156) ? -1 : v6;
        *(_DWORD *)(*(void *)(a1 + 1256) + 12 * v4) = v7;
        sub_2170AAE8C(a1, v4, a2);
        sub_2170ABC20((_DWORD *)(a1 + 1496), (int *)(*(void *)(a1 + 1472) + 12 * v4));
        if (*(_DWORD *)(a1 + 1496)) {
          break;
        }
      }
LABEL_24:
      if (++v4 == v3)
      {
        int v23 = v27;
        int v22 = HIDWORD(v27);
        LODWORD(v3) = *(_DWORD *)(a1 + 1116);
        goto LABEL_27;
      }
    }
    while (1)
    {
      int v8 = *(_DWORD *)(a1 + 1500);
      uint64_t v9 = v8 < 0 ? 0 : sub_2170B1CAC((_DWORD *)(a1 + 1496), v8);
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(void *)(a1 + 1472)) >> 2);
      int v10 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * (int)v6);
      int v11 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * (int)v6 + 4);
      BOOL v12 = v10 != -1;
      BOOL v13 = v11 == v10 && v10 != -1;
      unsigned int v14 = (v12 | (2 * (v11 != -1))) + v13;
      if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 2 * v14 + 3296))) {
        break;
      }
LABEL_23:
      if (!*v5) {
        goto LABEL_24;
      }
    }
    while (1)
    {
      int v25 = 0;
      int v15 = sub_2170ABDC8(a1, v6, v14, &v25, (_DWORD *)&v27 + 1, (int *)&v27, &v26);
      uint64_t result = *(unsigned int *)(a1 + 4384);
      if (v15 < 0) {
        break;
      }
      if (result) {
        break;
      }
      sub_2170AB688(a1, v25, v15, v16);
      uint64_t result = *(unsigned int *)(a1 + 4384);
      if (result) {
        break;
      }
      sub_2170AB74C(a1, v6, v15);
      uint64_t result = *(unsigned int *)(a1 + 4384);
      if (result) {
        break;
      }
      int v18 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * (int)v6);
      int v19 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * (int)v6 + 4);
      BOOL v20 = v18 != -1;
      BOOL v21 = v19 == v18 && v18 != -1;
      unsigned int v14 = (v20 | (2 * (v19 != -1))) + v21;
      if (!sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3306))) {
        goto LABEL_23;
      }
    }
  }
  return result;
}

uint64_t sub_2170A6BFC(uint64_t a1, int32x2_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 1116);
  int v24 = 0;
  int v25 = 0;
  if ((int)v3 < 1)
  {
    int v4 = 0;
    int v21 = 0;
LABEL_24:
    BOOL v22 = *(_DWORD *)(a1 + 1120) == v21 && v3 == v4;
    if (v22 && *(_DWORD *)(a1 + 1124) == v24)
    {
      return 0;
    }
    else
    {
      uint64_t result = 3;
      *(_DWORD *)(a1 + 4384) = 3;
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    LODWORD(v7) = -1;
    while (1)
    {
      if (v5 == v4)
      {
        int v26 = v4 + 1;
        int v8 = *(unsigned char *)(a1 + 1156) ? -1 : v7;
        *(_DWORD *)(*(void *)(a1 + 1256) + 12 * v5) = v8;
        a2 = sub_2170AAE8C(a1, v5, a2);
        int v4 = v26;
        if ((int)v6 < v26) {
          break;
        }
      }
LABEL_21:
      if (++v5 == v3)
      {
        int v21 = v25;
        LODWORD(v3) = *(_DWORD *)(a1 + 1116);
        goto LABEL_24;
      }
    }
    uint64_t v6 = (int)v6;
    while (1)
    {
      uint64_t v7 = v6;
      int v9 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * v6);
      int v10 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * v6 + 4);
      BOOL v11 = v9 != -1;
      BOOL v12 = v10 == v9 && v9 != -1;
      unsigned int v13 = (v11 | (2 * (v10 != -1))) + v12;
      if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 2 * v13 + 3296))) {
        break;
      }
LABEL_20:
      uint64_t v6 = v7 + 1;
      int v4 = v26;
      if (v7 + 1 >= v26) {
        goto LABEL_21;
      }
    }
    while (1)
    {
      int v23 = 0;
      int v14 = sub_2170ABDC8(a1, v7, v13, &v23, &v26, &v25, &v24);
      uint64_t result = *(unsigned int *)(a1 + 4384);
      if (v14 < 0) {
        break;
      }
      if (result) {
        break;
      }
      sub_2170AB688(a1, v23, v14, v15);
      uint64_t result = *(unsigned int *)(a1 + 4384);
      if (result) {
        break;
      }
      int v17 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * v7);
      int v18 = *(_DWORD *)(*(void *)(a1 + 1448) + 16 * v7 + 4);
      BOOL v19 = v17 != -1;
      BOOL v20 = v18 == v17 && v17 != -1;
      unsigned int v13 = (v19 | (2 * (v18 != -1))) + v20;
      if (!sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3306))) {
        goto LABEL_20;
      }
    }
  }
  return result;
}

uint64_t sub_2170A6DD0(uint64_t a1, _DWORD *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a2 && (uint64_t v3 = *(unsigned int *)(a1 + 1120), (int)v3 > 0))
  {
    int v4 = a2;
    if (*(unsigned char *)(a1 + 1144))
    {
      __int16 v39 = 0x8000;
      __int16 v38 = 0x8000;
      memset_pattern16(__b, &unk_2174AFAB0, 0x80uLL);
      int v5 = 0;
      __int16 v37 = 0x8000;
      int v6 = 6;
      do
      {
        if (sub_2170A4794((unsigned int *)a1, &v39))
        {
          BOOL v7 = sub_2170A4794((unsigned int *)a1, &v38);
          if (sub_2170A4794((unsigned int *)a1, __b)) {
            unsigned int v8 = 32;
          }
          else {
            unsigned int v8 = 0;
          }
          if (sub_2170A4794((unsigned int *)a1, &__b[(v8 >> 5) + 1])) {
            int v9 = 16;
          }
          else {
            int v9 = 0;
          }
          unsigned int v10 = v9 | v8;
          if (sub_2170A4794((unsigned int *)a1, &__b[(v10 >> 4) + 3])) {
            int v11 = 8;
          }
          else {
            int v11 = 0;
          }
          unsigned int v12 = v10 | v11;
          if (sub_2170A4794((unsigned int *)a1, &__b[(v12 >> 3) + 7])) {
            int v13 = 4;
          }
          else {
            int v13 = 0;
          }
          unsigned int v14 = v12 | v13;
          if (sub_2170A4794((unsigned int *)a1, &__b[(v14 >> 2) + 15])) {
            int v15 = 2;
          }
          else {
            int v15 = 0;
          }
          int v16 = v14 | v15 | sub_2170A4794((unsigned int *)a1, &__b[((v14 | v15) >> 1) + 31]);
          if (v16 == 63)
          {
            int v17 = sub_2170A4884((unsigned int *)a1, v6, &v37);
            int v16 = v17 + 63;
            int v18 = -63 - v17;
            if (v17 >= -63) {
              int v18 = v17 + 63;
            }
            int v19 = v18 >> v6;
            if (!v6 || v19)
            {
              if (v19 > 1) {
                ++v6;
              }
            }
            else
            {
              --v6;
            }
          }
          if (v7) {
            int v20 = v16 + 1;
          }
          else {
            int v20 = ~v16;
          }
        }
        else
        {
          int v20 = 0;
        }
        v5 += v20;
        *v4++ = v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      __int16 v39 = 0x8000;
      __int16 v38 = 0x8000;
      memset_pattern16(__b, &unk_2174AFAB0, 0x80uLL);
      int v22 = 0;
      __int16 v37 = 0x8000;
      do
      {
        if (sub_2170A4794((unsigned int *)a1, &v39))
        {
          BOOL v23 = sub_2170A4794((unsigned int *)a1, &v38);
          BOOL v24 = sub_2170A4794((unsigned int *)a1, __b);
          if (v24) {
            uint64_t v25 = 2;
          }
          else {
            uint64_t v25 = 1;
          }
          if (sub_2170A4794((unsigned int *)a1, &__b[v25])) {
            int v26 = 2;
          }
          else {
            int v26 = 0;
          }
          int v27 = v26 | v24;
          if (sub_2170A4794((unsigned int *)a1, &__b[v27 + 3])) {
            int v28 = 4;
          }
          else {
            int v28 = 0;
          }
          int v29 = v27 | v28;
          if (sub_2170A4794((unsigned int *)a1, &__b[v29 + 7])) {
            int v30 = 8;
          }
          else {
            int v30 = 0;
          }
          int v31 = v29 | v30;
          if (sub_2170A4794((unsigned int *)a1, &__b[v31 + 15])) {
            int v32 = 16;
          }
          else {
            int v32 = 0;
          }
          int v33 = v31 | v32;
          if (sub_2170A4794((unsigned int *)a1, &__b[v33 + 31])) {
            int v34 = 32;
          }
          else {
            int v34 = 0;
          }
          int v35 = v33 | v34;
          if (v35 == 63) {
            int v35 = sub_2170A4884((unsigned int *)a1, 6, &v37) + 63;
          }
          if (v23) {
            int v36 = v35 + 1;
          }
          else {
            int v36 = ~v35;
          }
        }
        else
        {
          int v36 = 0;
        }
        v22 += v36;
        *v4++ = v22;
        --v3;
      }
      while (v3);
    }
    return 0;
  }
  else
  {
    uint64_t result = 3;
    *(_DWORD *)(a1 + 4384) = 3;
  }
  return result;
}

uint64_t sub_2170A7130(uint64_t a1, int *a2)
{
  if (!a2
    || ((unint64_t v3 = *(unsigned int *)(a1 + 1120), v4 = *(unsigned int *)(a1 + 1124), (int)v4 >= 3)
      ? (BOOL v5 = (int)v3 <= 0)
      : (BOOL v5 = 1),
        v5
     || (LOBYTE(v55[0]) = 0, int v8 = *sub_217087E68(a2, &a2[v3]), v8 < 0)
     || (int v9 = *v7, v10 = *v7 - v8, v10 > (int)v3)))
  {
    uint64_t result = 3;
    *(_DWORD *)(a1 + 4384) = 3;
  }
  else
  {
    int v12 = v10 + 2;
    *(_DWORD *)(a1 + 1076) = v8;
    *(_DWORD *)(a1 + 1072) = v9;
    int v13 = (int **)(a1 + 1232);
    sub_21681C000(a1 + 1232, 0);
    LODWORD(v56[0]) = 0;
    sub_216820DFC(a1 + 1232, v10 + 2, v56);
    uint64_t v14 = *(void *)(a1 + 1232);
    unint64_t v15 = v3;
    int v16 = a2;
    do
    {
      int v17 = *v16++;
      ++*(_DWORD *)(v14 + 4 * (v17 - v8 + 1));
      --v15;
    }
    while (v15);
    if ((v10 & 0x80000000) == 0)
    {
      int v18 = *v13;
      if (v12 <= 2) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = v12;
      }
      int v22 = *v18;
      int v20 = v18 + 1;
      int v21 = v22;
      uint64_t v23 = v19 - 1;
      do
      {
        v21 += *v20;
        *v20++ = v21;
        --v23;
      }
      while (v23);
    }
    sub_2167816FC(v56, v3);
    LODWORD(v53[0]) = 0;
    sub_2170A4FFC(v55, (int)v3 + 1, v53);
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(a1 + 1232);
    int v26 = v56[0];
    uint64_t v27 = *(void *)(a1 + 1208);
    int v28 = v55[0];
    do
    {
      int v29 = a2[v24] - v8;
      uint64_t v30 = *(int *)(v25 + 4 * v29);
      *(_DWORD *)(v25 + 4 * v29) = v30 + 1;
      v26[v30] = v24;
      v28[v24 + 1] = *(_DWORD *)(v27 + 4 * v24 + 4) - *(_DWORD *)(v27 + 4 * v24) + v28[v24];
      ++v24;
    }
    while (v3 != v24);
    sub_2167816FC(v53, v4);
    sub_2167816FC(__p, v3);
    uint64_t v31 = 0;
    int v32 = 0;
    do
    {
      uint64_t v33 = *((int *)v56[0] + v31);
      uint64_t v34 = 4 * v33 + 4;
      int v35 = *(_DWORD *)(*(void *)(a1 + 1208) + v34) - *(_DWORD *)(*(void *)(a1 + 1208) + 4 * v33);
      uint64_t v36 = *((int *)v55[0] + v33);
      uint64_t v37 = *(int *)((char *)v55[0] + v34);
      *((_DWORD *)__p[0] + v31) = v35;
      if (v37 != v36) {
        memmove((char *)v53[0] + 4 * v32, (const void *)(*(void *)(a1 + 1184) + 4 * v36), 4 * v37 - 4 * v36);
      }
      v32 += v35;
      ++v31;
    }
    while (v3 != v31);
    long long v38 = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a1 + 1184) = *(_OWORD *)v53;
    *(_OWORD *)long long v53 = v38;
    uint64_t v39 = *(void *)(a1 + 1200);
    *(void *)(a1 + 1200) = v54;
    uint64_t v54 = v39;
    uint64_t v40 = *(int **)(a1 + 1208);
    uint64_t v41 = (int *)__p[0];
    int v44 = *v40;
    __int32 v42 = v40 + 1;
    int v43 = v44;
    do
    {
      int v45 = *v41++;
      v43 += v45;
      *v42++ = v43;
      --v3;
    }
    while (v3);
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v46 = 0;
      int v47 = 0;
      uint64_t v48 = *v13;
      do
      {
        int v49 = v48[v46];
        if (v47 < v49)
        {
          uint64_t v50 = &a2[v47];
          uint64_t v51 = v49 - (uint64_t)v47;
          do
          {
            *v50++ = v8 + v46;
            --v51;
          }
          while (v51);
        }
        v48[v46++] = v47;
        int v47 = v49;
      }
      while (v46 != v10 + 1);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v53[0])
    {
      v53[1] = v53[0];
      operator delete(v53[0]);
    }
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    return 0;
  }
  return result;
}

void sub_2170A7434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170A7480(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 5;
  if (a2 && a5)
  {
    if (*(_DWORD *)(a1 + 4384)) {
      return 6;
    }
    uint64_t v14 = (unsigned int *)sub_2170A7784(a2, a3, a1 + 3992);
    uint64_t result = 3;
    if (v14)
    {
      if ((v13 & 0x8000000000000000) == 0)
      {
        unint64_t v15 = *(unsigned int *)(a1 + 4000);
        if ((uint64_t)(a3 - v15) >= 0 && (unint64_t)v14 + v13 >= a2)
        {
          uint64_t v16 = a2 + v15;
          if (a2 + v15 >= (unint64_t)v14)
          {
            uint64_t v17 = v16 - (void)v14;
            if (v16 - (uint64_t)v14 >= 0 && !*(_DWORD *)(a1 + 4028))
            {
              if (*(unsigned char *)(a1 + 3996)) {
                return 4;
              }
              unsigned int v18 = *(unsigned __int8 *)(a1 + 3997);
              uint64_t result = 4;
              if (v18 <= 8 && ((1 << v18) & 0x160) != 0)
              {
                if (a3 < v15) {
                  return 3;
                }
                int v19 = *(_DWORD *)(a1 + 1116);
                if (*(_DWORD *)(a1 + 4004) != v19 || !a6 && *(_DWORD *)(a1 + 4032)) {
                  return 3;
                }
                unint64_t v44 = *(int *)(a1 + 4008);
                uint64_t v45 = *(unsigned int *)(a1 + 4008);
                if ((*(_DWORD *)(a1 + 4048) - 5) >= 2)
                {
                  unsigned int v20 = *(_DWORD *)(a1 + 4020);
                }
                else
                {
                  if (*(_DWORD *)(a1 + 4008) != 2) {
                    return 3;
                  }
                  unsigned int v20 = *(_DWORD *)(a1 + 4020);
                  if (!v20) {
                    return 3;
                  }
                }
                if (v20 > 0x1B) {
                  return 3;
                }
                int v21 = (int **)(a1 + 3920);
                int v22 = (int **)(a1 + 3944);
                sub_21681C000(a1 + 3944, v44);
                if ((int)v45 <= 0)
                {
                  sub_21681C000(a1 + 3920, v44);
                }
                else
                {
                  unint64_t v23 = 0;
                  uint64_t v24 = 4 * v45;
                  do
                  {
                    BOOL v25 = v17 < 4;
                    v17 -= 4;
                    if (v25)
                    {
                      uint64_t v17 = 0;
                      uint64_t v14 = 0;
                    }
                    else
                    {
                      unsigned int v26 = *v14++;
                      (*v22)[v23 / 4] = v26;
                    }
                    v23 += 4;
                  }
                  while (v24 != v23);
                  sub_21681C000(a1 + 3920, v44);
                  unint64_t v27 = 0;
                  do
                  {
                    BOOL v25 = v17-- < 1;
                    if (v25)
                    {
                      uint64_t v17 = 0;
                      uint64_t v14 = 0;
                    }
                    else
                    {
                      int v28 = *(unsigned __int8 *)v14;
                      uint64_t v14 = (unsigned int *)((char *)v14 + 1);
                      (*v21)[v27 / 4] = v28;
                    }
                    v27 += 4;
                  }
                  while (v24 != v27);
                }
                if (!v14) {
                  return 3;
                }
                if ((int)v45 < 1)
                {
                  unsigned __int8 v29 = 0;
                }
                else
                {
                  unsigned __int8 v29 = 0;
                  uint64_t v30 = *v22;
                  uint64_t v31 = *v21;
                  char v32 = 1;
                  uint64_t v33 = v45;
                  do
                  {
                    int v34 = *v30++;
                    v29 |= v34 != 0;
                    int v35 = *v31++;
                    v32 &= v35 < 29;
                    --v33;
                  }
                  while (v33);
                  if ((v32 & 1) == 0) {
                    return 3;
                  }
                }
                uint64_t v37 = sub_2170A60B4(a1, v14, v17);
                uint64_t result = 3;
                if (v37)
                {
                  if ((v36 & 0x8000000000000000) == 0)
                  {
                    uint64_t result = sub_2170A78D8(a1, a5, a6);
                    if (!result)
                    {
                      if ((v29 & (v19 > 0)) == 1)
                      {
                        int v38 = 0;
                        int v39 = 0;
                        do
                        {
                          if ((int)v45 >= 1)
                          {
                            uint64_t v40 = *v22;
                            uint64_t v41 = (_DWORD *)(a5 + 4 * v38);
                            v38 += v44;
                            uint64_t v42 = v45;
                            do
                            {
                              int v43 = *v40++;
                              *v41++ += v43;
                              --v42;
                            }
                            while (v42);
                          }
                          ++v39;
                        }
                        while (v39 != v19);
                      }
                      uint64_t result = 0;
                      *a4 = *(unsigned int *)(a1 + 4000);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2170A7784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 4) {
    return 0;
  }
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v3 == 12
    || v3 == 16
    || a2 == 20
    || a2 == 21
    || a2 == 22
    || a2 == 23
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27
    || v3 == 28)
  {
    return 0;
  }
  uint64_t v6 = a1 + 32;
  if (a1 == -32) {
    return 0;
  }
  uint64_t v4 = 0;
  if (*(_DWORD *)a1 == -290009985)
  {
    int v7 = *(_DWORD *)(a1 + 4);
    char v8 = *(unsigned char *)(a1 + 8);
    char v9 = *(unsigned char *)(a1 + 9);
    __int16 v10 = *(_WORD *)(a1 + 10);
    int v11 = *(_DWORD *)(a1 + 12);
    int v12 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
    int v13 = *(unsigned __int8 *)(a1 + 20);
    int v14 = *(unsigned __int8 *)(a1 + 21);
    int v15 = *(unsigned __int8 *)(a1 + 22);
    char v16 = *(unsigned char *)(a1 + 23);
    int v17 = *(unsigned __int8 *)(a1 + 24);
    unsigned int v18 = *(unsigned __int8 *)(a1 + 25);
    int v19 = *(unsigned __int8 *)(a1 + 26);
    int v20 = *(unsigned __int8 *)(a1 + 27);
    int v21 = *(_DWORD *)(a1 + 28) & 0x7FFFFFFF;
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 4) = v8;
    *(unsigned char *)(a3 + 5) = v9;
    *(_WORD *)(a3 + 6) = v10;
    *(_DWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 12) = v12;
    *(_DWORD *)(a3 + 16) = v15;
    *(_DWORD *)(a3 + 20) = v21;
    *(_DWORD *)(a3 + 24) = v14;
    *(_DWORD *)(a3 + 28) = v20;
    *(_DWORD *)(a3 + 32) = v13;
    *(_DWORD *)(a3 + 36) = v18 & 0xF;
    *(_DWORD *)(a3 + 40) = v19;
    *(_DWORD *)(a3 + 44) = v18 >> 4;
    *(_DWORD *)(a3 + 48) = v7;
    *(unsigned char *)(a3 + 52) = v16;
    uint64_t v4 = v6;
    *(_DWORD *)(a3 + 56) = v17;
  }
  return v4;
}

uint64_t sub_2170A78D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 4032) == 1)
  {
    memset_pattern16(__b, &unk_2174AFAB0, 4uLL);
    if (*(int *)(a1 + 4004) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      while (1)
      {
        char v8 = (int *)(*(void *)(a1 + 1256) + v6);
        uint64_t v9 = *v8;
        uint64_t v10 = v8[1];
        uint64_t v11 = v8[2];
        int v12 = (int *)(*(void *)(a1 + 1280) + v6);
        uint64_t v13 = v12[2];
        if (v13 != -1)
        {
          BOOL v14 = *(unsigned __int8 *)(a3 + v10)
              + *(unsigned __int8 *)(a3 + v9)
              + *(unsigned __int8 *)(a3 + v11)
              + *(unsigned __int8 *)(a3 + *v12)
              + *(unsigned __int8 *)(a3 + v12[1])
              + *(unsigned __int8 *)(a3 + v13) > 2;
          goto LABEL_8;
        }
        if (v11 != -1)
        {
          BOOL v14 = *(unsigned __int8 *)(a3 + v10)
              + *(unsigned __int8 *)(a3 + v9)
              + *(unsigned __int8 *)(a3 + v11) > 1;
LABEL_8:
          int v15 = v14;
          goto LABEL_11;
        }
        if (v10 == -1) {
          break;
        }
        int v15 = *(unsigned __int8 *)(a3 + v9);
        if (v15)
        {
          int v16 = *(unsigned __int8 *)(a3 + v10);
LABEL_18:
          int v15 = v16 != 0;
        }
LABEL_11:
        *(unsigned char *)(a3 + v7++) = sub_2170A4794((unsigned int *)a1, &__b[v15]);
        v6 += 12;
        if (v7 >= *(int *)(a1 + 4004)) {
          goto LABEL_20;
        }
      }
      if (v9 == -1)
      {
        int v15 = 0;
        goto LABEL_11;
      }
      int v16 = *(unsigned __int8 *)(a3 + v9);
      goto LABEL_18;
    }
  }
LABEL_20:
  uint64_t v17 = *(unsigned int *)(a1 + 4048);
  if (v17 > 6) {
    return 3;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))*(&off_26C772370 + 2 * v17))(a1, a2, a3);
  return 0;
}

void sub_2170A7A6C(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, void *a5, unsigned char *a6, void *a7, uint64_t a8)
{
  int v62 = 0;
  sub_2170A4FFC(__p, a4, &v62);
  switch(*a6)
  {
    case 0:
      if (a4 < 1) {
        goto LABEL_89;
      }
      uint64_t v13 = 0;
      do
      {
        if (sub_2170A4794(a1, (_WORD *)(*a7 + 2 * v13)))
        {
          BOOL v14 = sub_2170A4794(a1, (_WORD *)(a7[3] + 2 * v13));
          int v15 = (_WORD *)(a7[6] + 2 * (int)(v13 << 6));
          BOOL v16 = sub_2170A4794(a1, v15);
          if (v16) {
            uint64_t v17 = 2;
          }
          else {
            uint64_t v17 = 1;
          }
          if (sub_2170A4794(a1, &v15[v17])) {
            int v18 = 2;
          }
          else {
            int v18 = 0;
          }
          int v19 = v18 | v16;
          if (sub_2170A4794(a1, &v15[v19 + 3])) {
            int v20 = 4;
          }
          else {
            int v20 = 0;
          }
          int v21 = v19 | v20;
          if (sub_2170A4794(a1, &v15[v21 + 7])) {
            int v22 = 8;
          }
          else {
            int v22 = 0;
          }
          int v23 = v21 | v22;
          if (sub_2170A4794(a1, &v15[v23 + 15])) {
            int v24 = 16;
          }
          else {
            int v24 = 0;
          }
          int v25 = v23 | v24;
          if (sub_2170A4794(a1, &v15[v25 + 31])) {
            int v26 = 32;
          }
          else {
            int v26 = 0;
          }
          int v27 = v25 | v26;
          if (v27 == 63) {
            int v27 = sub_2170A4884(a1, *(_DWORD *)(a7[12] + 4 * v13), (_WORD *)(a7[9] + 2 * v13)) + 63;
          }
          if (v14) {
            int v28 = v27 + 1;
          }
          else {
            int v28 = ~v27;
          }
        }
        else
        {
          int v28 = 0;
        }
        *((_DWORD *)__p[0] + v13++) = v28;
      }
      while (v13 != a4);
      goto LABEL_85;
    case 2:
      if (a4 < 1) {
        goto LABEL_89;
      }
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = a7[12];
        int v31 = sub_2170A4DD4(a1, *(_DWORD *)(v30 + 4 * v29), (_WORD *)(a7[3] + 2 * v29), (_WORD *)(a7[9] + 2 * v29));
        if (v31 >= 0) {
          unsigned int v32 = v31;
        }
        else {
          unsigned int v32 = -v31;
        }
        int v33 = *(_DWORD *)(v30 + 4 * v29);
        unsigned int v34 = v32 >> v33;
        if (v33) {
          BOOL v35 = v34 == 0;
        }
        else {
          BOOL v35 = 0;
        }
        if (v35)
        {
          int v36 = -1;
        }
        else
        {
          if (v34 < 2) {
            goto LABEL_44;
          }
          int v36 = 1;
        }
        *(_DWORD *)(v30 + 4 * v29) = v33 + v36;
LABEL_44:
        *((_DWORD *)__p[0] + v29++) = v31;
      }
      while (v29 != a4);
LABEL_85:
      unsigned __int8 v58 = (char *)__p[0];
      if (a4 < 1) {
        goto LABEL_90;
      }
      uint64_t v59 = 0;
      do
      {
        *(_DWORD *)(a8 + v59) = *(_DWORD *)&v58[v59] + *(_DWORD *)(a3 + v59);
        v59 += 4;
      }
      while (4 * a4 != v59);
LABEL_91:
      __p[1] = v58;
      operator delete(v58);
      return;
    case 3:
      if (a4 < 1) {
        goto LABEL_89;
      }
      uint64_t v37 = 0;
      do
      {
        int v38 = *(_DWORD *)(*a5 + 4 * v37);
        if (v38 < 1)
        {
          int v40 = 0;
        }
        else
        {
          int v39 = 0;
          int v40 = 0;
          do
          {
            LOWORD(v62) = 0x8000;
            v40 += sub_2170A4794(a1, &v62) << v39++;
          }
          while (v38 != v39);
        }
        *((_DWORD *)__p[0] + v37++) = v40;
      }
      while (v37 != a4);
      goto LABEL_85;
    case 4:
      if (a4 < 1)
      {
LABEL_89:
        unsigned __int8 v58 = (char *)__p[0];
LABEL_90:
        if (v58) {
          goto LABEL_91;
        }
        return;
      }
      uint64_t v41 = 0;
      break;
    default:
      goto LABEL_85;
  }
  while (!sub_2170A4794(a1, (_WORD *)(*a7 + 2 * v41)))
  {
    int v57 = 0;
LABEL_84:
    *((_DWORD *)__p[0] + v41++) = v57;
    if (v41 == a4) {
      goto LABEL_85;
    }
  }
  BOOL v42 = sub_2170A4794(a1, (_WORD *)(a7[3] + 2 * v41));
  int v43 = (_WORD *)(a7[6] + 2 * (int)(v41 << 6));
  if (sub_2170A4794(a1, v43)) {
    unsigned int v44 = 32;
  }
  else {
    unsigned int v44 = 0;
  }
  if (sub_2170A4794(a1, &v43[(v44 >> 5) + 1])) {
    int v45 = 16;
  }
  else {
    int v45 = 0;
  }
  unsigned int v46 = v45 | v44;
  if (sub_2170A4794(a1, &v43[(v46 >> 4) + 3])) {
    int v47 = 8;
  }
  else {
    int v47 = 0;
  }
  unsigned int v48 = v46 | v47;
  if (sub_2170A4794(a1, &v43[(v48 >> 3) + 7])) {
    int v49 = 4;
  }
  else {
    int v49 = 0;
  }
  unsigned int v50 = v48 | v49;
  if (sub_2170A4794(a1, &v43[(v50 >> 2) + 15])) {
    int v51 = 2;
  }
  else {
    int v51 = 0;
  }
  int v52 = v50 | v51 | sub_2170A4794(a1, &v43[((v50 | v51) >> 1) + 31]);
  if (v52 == 63)
  {
    uint64_t v53 = a7[12];
    int v52 = sub_2170A4884(a1, *(_DWORD *)(v53 + 4 * v41), (_WORD *)(a7[9] + 2 * v41)) + 63;
    int v54 = *(_DWORD *)(v53 + 4 * v41);
    int v55 = v52 >> v54;
    if (!v54 || v55)
    {
      if (v55 < 2) {
        goto LABEL_81;
      }
      int v56 = 1;
    }
    else
    {
      int v56 = -1;
    }
    *(_DWORD *)(v53 + 4 * v41) = v54 + v56;
  }
LABEL_81:
  if (v42) {
    int v57 = v52 + 1;
  }
  else {
    int v57 = ~v52;
  }
  goto LABEL_84;
}

void sub_2170A7F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170A7F50(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a1 + 3920);
  uint64_t v5 = *(unsigned int *)(a1 + 4004);
  uint64_t v151 = *(int *)(a1 + 4008);
  int v149 = ~(-1 << (*(_DWORD *)(a1 + 4020) - 1));
  sub_2170AE224((void *)(a1 + 1160), (void *)(a1 + 1208), (void *)(a1 + 1184), (uint64_t *)(a1 + 1184), -1431655765 * ((*(void *)(a1 + 1168) - *(void *)(a1 + 1160)) >> 2), (uint64_t *)(a1 + 3968), v149);
  uint64_t v6 = 0;
  uint64_t v164 = 0;
  memset(v163, 0, sizeof(v163));
  do
  {
    sub_2170A8CEC((uint64_t)v163 + v6, v151);
    v6 += 120;
  }
  while (v6 != 360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(v161, &unk_2174AFAB0, 6uLL);
  __int16 v160 = 0x8000;
  __int16 v159 = 0x8000;
  int v7 = v149;
  if ((int)v5 > 0)
  {
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)(a1 + 4032);
    int v143 = 2 * v149;
    int v144 = v9;
    uint64_t v146 = 12 * v5;
    uint64_t v10 = (int *)(a2 + 4);
    int32x2_t v11 = vdup_n_s32(v149);
    int v12 = a3;
    std::string::size_type v145 = a3;
    std::string::size_type v138 = v4;
    while (v9 && !*v12)
    {
LABEL_162:
      v8 += 12;
      ++v12;
      v10 += v151;
      if (v146 == v8) {
        goto LABEL_163;
      }
    }
    uint64_t v13 = (int32x2_t *)(*(void *)(a1 + 3968) + v8);
    int32x2_t v14 = *v13;
    int v15 = v13[1].i32[0];
    BOOL v16 = (int *)(*(void *)(a1 + 1256) + v8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    int v20 = (int *)(*(void *)(a1 + 1280) + v8);
    uint64_t v21 = v20[2];
    int32x2_t v147 = v14;
    if (v21 != -1 && (!v9 || a3[v17] && a3[v18] && a3[v19] && a3[*v20] && a3[v20[1]] && a3[v21]))
    {
      int v139 = *v20;
      int v140 = v20[1];
      int32x2_t v22 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      int32x2_t v23 = vabs_s32(vrev64_s32(v22));
      int v141 = v7 - v23.i32[1] - v23.i32[0];
      if (v141 < 0) {
        int32x2_t v22 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v22), (int8x8_t)vsub_s32(v23, v11), (int8x8_t)__PAIR64__(v7 - v23.i32[1], v7 - v23.i32[0]));
      }
      BOOL v24 = sub_2170A4794((unsigned int *)a1, v161);
      uint64_t v25 = 2;
      if (!v24) {
        uint64_t v25 = 1;
      }
      if (sub_2170A4794((unsigned int *)a1, &v161[v25])) {
        int v27 = 2;
      }
      else {
        int v27 = 0;
      }
      int v28 = v27 | v24;
      if (v28 == 2)
      {
        int32x2_t v60 = vsub_s32(*(int32x2_t *)(a2 + 4 * v139 * (int)v151), v11);
        int32x2_t v61 = vabs_s32(vrev64_s32(v60));
        int v62 = v149 - v61.i32[1] - v61.i32[0];
        if (v62 < 0) {
          int32x2_t v60 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v60), (int8x8_t)vsub_s32(v61, v11), (int8x8_t)__PAIR64__(v149 - v61.i32[1], v149 - v61.i32[0]));
        }
        uint64_t v4 = v138;
        int32x2_t v63 = vsub_s32(*(int32x2_t *)(a2 + 4 * v140 * (int)v151), v11);
        int32x2_t v64 = vabs_s32(vrev64_s32(v63));
        int v65 = v149 - v64.i32[1] - v64.i32[0];
        if (v65 < 0) {
          int32x2_t v63 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v63), (int8x8_t)vsub_s32(v64, v11), (int8x8_t)__PAIR64__(v149 - v64.i32[1], v149 - v64.i32[0]));
        }
        int32x2_t v66 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v21 * (int)v151), v11);
        int32x2_t v67 = vabs_s32(vrev64_s32(v66));
        if (v149 - v67.i32[1] - v67.i32[0] < 0) {
          int32x2_t v66 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v66), (int8x8_t)vsub_s32(v67, v11), (int8x8_t)__PAIR64__(v149 - v67.i32[1], v149 - v67.i32[0]));
        }
        double v29 = COERCE_DOUBLE(vsub_s32(vadd_s32(v63, v60), v66));
        int v15 = v65 + v62 - (v149 - v67.i32[1] - v67.i32[0]);
      }
      else
      {
        uint64_t v4 = v138;
        if (v28 == 1)
        {
          int32x2_t v68 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11);
          int32x2_t v69 = vabs_s32(vrev64_s32(v68));
          int v70 = v149 - v69.i32[1] - v69.i32[0];
          if (v70 < 0) {
            int32x2_t v68 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v68), (int8x8_t)vsub_s32(v69, v11), (int8x8_t)__PAIR64__(v149 - v69.i32[1], v149 - v69.i32[0]));
          }
          int32x2_t v71 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v19 * (int)v151), v11);
          int32x2_t v72 = vabs_s32(vrev64_s32(v71));
          int v73 = v149 - v72.i32[1] - v72.i32[0];
          if (v73 < 0) {
            int32x2_t v71 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v71), (int8x8_t)vsub_s32(v72, v11), (int8x8_t)__PAIR64__(v149 - v72.i32[1], v149 - v72.i32[0]));
          }
          double v29 = COERCE_DOUBLE(vsub_s32(vadd_s32(v68, v22), v71));
          int v15 = v70 + v141 - v73;
        }
        else if (v28)
        {
          double v74 = COERCE_DOUBLE(vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11));
          int32x2_t v75 = vabs_s32(vrev64_s32(*(int32x2_t *)&v74));
          int8x8_t v77 = (int8x8_t)vsub_s32(v75, v11);
          __int32 v78 = v75.i32[0];
          v75.i32[0] = v149 - v75.i32[0];
          v75.i32[1] = v149 - v75.i32[1];
          __int32 v76 = v75.i32[1];
          double v79 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)&v74), v77, (int8x8_t)v75));
          int v80 = v76 - v78;
          if (v80 < 0) {
            double v74 = v79;
          }
          double v81 = COERCE_DOUBLE(vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v19 * (int)v151), v11));
          int32x2_t v82 = vabs_s32(vrev64_s32(*(int32x2_t *)&v81));
          __int32 v83 = v149 - v82.i32[1];
          __int32 v84 = v82.i32[0];
          double v85 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)&v81), (int8x8_t)vsub_s32(v82, v11), (int8x8_t)__PAIR64__(v149 - v82.i32[1], v149 - v82.i32[0])));
          int v86 = v83 - v84;
          if (v86 < 0) {
            double v81 = v85;
          }
          int32x2_t v87 = vsub_s32(*(int32x2_t *)(a2 + 4 * v139 * (int)v151), v11);
          int32x2_t v88 = vabs_s32(vrev64_s32(v87));
          int v89 = v149 - v88.i32[1] - v88.i32[0];
          if (v89 < 0) {
            int32x2_t v87 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v87), (int8x8_t)vsub_s32(v88, v11), (int8x8_t)__PAIR64__(v149 - v88.i32[1], v149 - v88.i32[0]));
          }
          int32x2_t v90 = vsub_s32(*(int32x2_t *)(a2 + 4 * v140 * (int)v151), v11);
          int32x2_t v91 = vabs_s32(vrev64_s32(v90));
          int v92 = v149 - v91.i32[1] - v91.i32[0];
          if (v92 < 0) {
            int32x2_t v90 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v90), (int8x8_t)vsub_s32(v91, v11), (int8x8_t)__PAIR64__(v149 - v91.i32[1], v149 - v91.i32[0]));
          }
          int32x2_t v93 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v21 * (int)v151), v11);
          int32x2_t v94 = vabs_s32(vrev64_s32(v93));
          if (v149 - v94.i32[1] - v94.i32[0] < 0) {
            int32x2_t v93 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v93), (int8x8_t)vsub_s32(v94, v11), (int8x8_t)__PAIR64__(v149 - v94.i32[1], v149 - v94.i32[0]));
          }
          uint32x2_t v95 = (uint32x2_t)vadd_s32(v87, v22);
          BOOL v96 = __OFADD__(v89, v141);
          int v97 = v89 + v141;
          if (v97 < 0 != v96) {
            ++v97;
          }
          int32x2_t v98 = vadd_s32(v90, *(int32x2_t *)&v74);
          int64x2_t v99 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v98, v98), (int32x2_t)vsra_n_u32(v95, v95, 0x1FuLL), 1uLL), vadd_s32(*(int32x2_t *)&v81, v93)), vdup_n_s32(0x55555556u));
          double v29 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v99, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v99, 0x3FuLL))));
          unint64_t v100 = 1431655766 * ((v97 >> 1) + 2 * (v92 + v80) - (v86 + v149 - v94.i32[1] - v94.i32[0]));
          int v15 = HIDWORD(v100) + (v100 >> 63);
        }
        else
        {
          double v29 = *(double *)&v147;
          int32x2_t v30 = vzip1_s32(v22, v147);
          int32x2_t v31 = vzip2_s32(v22, v147);
          if (v30.i32[0] * (uint64_t)v30.i32[1] + v15 * (uint64_t)v141 + v31.i32[0] * (uint64_t)v31.i32[1] < 0)
          {
            double v29 = COERCE_DOUBLE(vneg_s32(v147));
            int v15 = -v15;
          }
        }
      }
      unsigned int v52 = 2;
      goto LABEL_109;
    }
    if (v19 != -1 && (!v9 || a3[v17] && a3[v18] && a3[v19]))
    {
      int32x2_t v32 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      int32x2_t v33 = vabs_s32(vrev64_s32(v32));
      int v142 = v7 - v33.i32[1] - v33.i32[0];
      if (v142 < 0) {
        int32x2_t v32 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v32), (int8x8_t)vsub_s32(v33, v11), (int8x8_t)__PAIR64__(v7 - v33.i32[1], v7 - v33.i32[0]));
      }
      int32x2_t v34 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11);
      int32x2_t v35 = vabs_s32(vrev64_s32(v34));
      int v36 = v7 - v35.i32[1] - v35.i32[0];
      if (v36 < 0) {
        int32x2_t v34 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v34), (int8x8_t)vsub_s32(v35, v11), (int8x8_t)__PAIR64__(v7 - v35.i32[1], v7 - v35.i32[0]));
      }
      int32x2_t v37 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v19 * (int)v151), v11);
      int32x2_t v38 = vabs_s32(vrev64_s32(v37));
      int v39 = v7 - v38.i32[1] - v38.i32[0];
      if (v39 < 0) {
        int32x2_t v37 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v37), (int8x8_t)vsub_s32(v38, v11), (int8x8_t)__PAIR64__(v7 - v38.i32[1], v7 - v38.i32[0]));
      }
      BOOL v40 = sub_2170A4794((unsigned int *)a1, __b);
      uint64_t v41 = 2;
      if (!v40) {
        uint64_t v41 = 1;
      }
      if (sub_2170A4794((unsigned int *)a1, &__b[v41])) {
        int v42 = 2;
      }
      else {
        int v42 = 0;
      }
      int v43 = v42 | v40;
      if (v43 == 2)
      {
        uint32x2_t v101 = (uint32x2_t)vsub_s32(v34, (int32x2_t)vmvn_s8((int8x8_t)v32));
        double v29 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v101, v101, 0x1FuLL), 1uLL));
        if (v142 + v36 + 1 >= 0) {
          int v102 = v142 + v36 + 1;
        }
        else {
          int v102 = v142 + v36 + 2;
        }
        int v15 = v102 >> 1;
        unsigned int v52 = 1;
      }
      else
      {
        if (v43 == 1)
        {
          double v29 = COERCE_DOUBLE(vsub_s32(vadd_s32(v34, v32), v37));
          int v15 = v36 + v142 - v39;
        }
        else if (v43)
        {
          int64x2_t v103 = vmull_s32(vadd_s32(vsub_s32(v34, (int32x2_t)vmvn_s8((int8x8_t)v32)), v37), vdup_n_s32(0x55555556u));
          double v29 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v103, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v103, 0x3FuLL))));
          int v15 = (v142 + v36 + v39 + 1) / 3;
        }
        else
        {
          double v29 = *(double *)&v147;
          int32x2_t v44 = vzip1_s32(v32, v147);
          int32x2_t v45 = vzip2_s32(v32, v147);
          if (v44.i32[0] * (uint64_t)v44.i32[1] + v15 * (uint64_t)v142 + v45.i32[0] * (uint64_t)v45.i32[1] < 0)
          {
            double v29 = COERCE_DOUBLE(vneg_s32(v147));
            int v15 = -v15;
          }
        }
        unsigned int v52 = 1;
      }
      goto LABEL_109;
    }
    if (v18 == -1 || v9 && (!a3[v17] || !a3[v18]))
    {
      if (v17 == -1 || v9 && !a3[v17])
      {
        BOOL v56 = sub_2170A4794((unsigned int *)a1, &v159);
        double v29 = *(double *)&v147;
        double v57 = COERCE_DOUBLE(vneg_s32(v147));
        if (v56) {
          int v15 = -v15;
        }
        unsigned int v52 = 0;
        if (v56) {
          double v29 = v57;
        }
LABEL_109:
        int v104 = LODWORD(v29);
        int v156 = LODWORD(v29);
        int v105 = HIDWORD(v29);
        int v155 = HIDWORD(v29);
        int32x2_t v106 = vabs_s32(*(int32x2_t *)&v29);
        unsigned int v107 = v106.u32[1];
        if (v15 >= 0) {
          unsigned int v108 = v15;
        }
        else {
          unsigned int v108 = -v15;
        }
        unsigned int v109 = v106.i32[0];
        BOOL v111 = v106.i32[0] < (unsigned __int32)v106.i32[1] || v106.i32[0] < v108;
        if (v111)
        {
          unsigned int v109 = v108;
          int v112 = HIDWORD(v29);
          int v113 = LODWORD(v29);
          if (v106.i32[1] < v108) {
            goto LABEL_123;
          }
          uint64_t v114 = &v155;
          unsigned int v109 = v106.u32[1];
          int v112 = v15;
          int v113 = LODWORD(v29);
        }
        else
        {
          uint64_t v114 = &v156;
          int v112 = HIDWORD(v29);
          int v113 = v15;
        }
        *uint64_t v114 = v15;
LABEL_123:
        int v157 = v113;
        v158[0] = v112;
        v158[1] = v109;
        sub_2170A7A6C((unsigned int *)a1, v26, (uint64_t)&v157, v151, v4, (unsigned char *)(a1 + 4044), (void *)v163 + 15 * v52, (uint64_t)&v152);
        int v116 = v152;
        int v115 = v153;
        if (v152 >= 0) {
          int v117 = v152;
        }
        else {
          int v117 = -v152;
        }
        if (v153 >= 0) {
          int v118 = v153;
        }
        else {
          int v118 = -v153;
        }
        int v7 = v149;
        int v119 = v149 - v117;
        int v120 = v149 - v117 - v118;
        if (v120 < 0)
        {
          int v123 = v149 - v118;
          int v124 = v118 - v149;
          if (v152 >= 0) {
            int v116 = v123;
          }
          else {
            int v116 = v124;
          }
          int v7 = v149;
          int v125 = v117 - v149;
          if (v153 >= 0) {
            int v115 = v119;
          }
          else {
            int v115 = v125;
          }
          if (v111) {
            goto LABEL_131;
          }
        }
        else if (v111)
        {
LABEL_131:
          if (v15 >= 0) {
            int v121 = v120;
          }
          else {
            int v121 = -v120;
          }
          if (v105 < 0) {
            int v120 = -v120;
          }
          if (v107 >= v108) {
            int v122 = v115;
          }
          else {
            int v122 = v121;
          }
          if (v107 >= v108) {
            int v115 = v120;
          }
          goto LABEL_151;
        }
        int v122 = v116;
        if (v104 >= 0) {
          int v116 = v120;
        }
        else {
          int v116 = -v120;
        }
LABEL_151:
        a3 = v145;
        if (v115 >= 0) {
          int v126 = v115;
        }
        else {
          int v126 = -v115;
        }
        if (v116 < 0)
        {
          int v127 = -v116;
        }
        else
        {
          int v126 = v143 - v126;
          int v127 = v116;
        }
        if (v115 >= 0) {
          int v127 = v143 - v127;
        }
        int v128 = v116 + v7;
        int v129 = v115 + v7;
        if (v122 < 0)
        {
          int v128 = v126;
          int v129 = v127;
        }
        *(v10 - 1) = v128;
        int *v10 = v129;
        int v9 = v144;
        goto LABEL_162;
      }
      int32x2_t v46 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      int32x2_t v55 = vabs_s32(vrev64_s32(v46));
      int v48 = v7 - v55.i32[1] - v55.i32[0];
      if (v48 < 0) {
        int32x2_t v46 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v46), (int8x8_t)vsub_s32(v55, v11), (int8x8_t)__PAIR64__(v7 - v55.i32[1], v7 - v55.i32[0]));
      }
      if (sub_2170A4794((unsigned int *)a1, &v160))
      {
        unsigned int v52 = 0;
        int v15 = v48;
        double v29 = *(double *)&v46;
        goto LABEL_109;
      }
    }
    else
    {
      int32x2_t v46 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v17 * (int)v151), v11);
      int32x2_t v47 = vabs_s32(vrev64_s32(v46));
      int v48 = v7 - v47.i32[1] - v47.i32[0];
      if (v48 < 0) {
        int32x2_t v46 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v46), (int8x8_t)vsub_s32(v47, v11), (int8x8_t)__PAIR64__(v7 - v47.i32[1], v7 - v47.i32[0]));
      }
      int32x2_t v49 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v18 * (int)v151), v11);
      int32x2_t v50 = vabs_s32(vrev64_s32(v49));
      int v51 = v7 - v50.i32[1] - v50.i32[0];
      if (v51 < 0) {
        int32x2_t v49 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v49), (int8x8_t)vsub_s32(v50, v11), (int8x8_t)__PAIR64__(v7 - v50.i32[1], v7 - v50.i32[0]));
      }
      if (sub_2170A4794((unsigned int *)a1, &v160))
      {
        unsigned int v52 = 0;
        uint32x2_t v53 = (uint32x2_t)vsub_s32(v49, (int32x2_t)vmvn_s8((int8x8_t)v46));
        double v29 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v53, v53, 0x1FuLL), 1uLL));
        if (v48 + v51 + 1 >= 0) {
          int v54 = v48 + v51 + 1;
        }
        else {
          int v54 = v48 + v51 + 2;
        }
        int v15 = v54 >> 1;
        goto LABEL_109;
      }
    }
    double v29 = *(double *)&v147;
    int32x2_t v58 = vzip1_s32(v46, v147);
    unsigned int v52 = 0;
    int32x2_t v59 = vzip2_s32(v46, v147);
    if (v58.i32[0] * (uint64_t)v58.i32[1] + v15 * (uint64_t)v48 + v59.i32[0] * (uint64_t)v59.i32[1] < 0)
    {
      double v29 = COERCE_DOUBLE(vneg_s32(v147));
      int v15 = -v15;
    }
    goto LABEL_109;
  }
LABEL_163:
  unint64_t v130 = 360;
  do
  {
    unint64_t v131 = (char *)v163 + v130;
    std::string::size_type v132 = *(void **)&v158[v130 / 4];
    if (v132)
    {
      *((void *)v131 - 2) = v132;
      operator delete(v132);
    }
    std::string v133 = (void *)*((void *)v131 - 6);
    if (v133)
    {
      *(void *)&v154[v130] = v133;
      operator delete(v133);
    }
    uint64_t v134 = (char *)v163 + v130;
    long long v135 = *(void **)((char *)&v163[-4] + v130 - 8);
    if (v135)
    {
      *((void *)v134 - 8) = v135;
      operator delete(v135);
    }
    uint64_t v136 = (void *)*((void *)v134 - 12);
    if (v136)
    {
      *(void *)((char *)&v163[-5] + v130 - 8) = v136;
      operator delete(v136);
    }
    uint64_t v137 = (void *)*((void *)v131 - 15);
    if (v137)
    {
      *(void *)((char *)&v163[-7] + v130) = v137;
      operator delete(v137);
    }
    v130 -= 120;
  }
  while (v130);
}

void sub_2170A8CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a31 + i));
  _Unwind_Resume(a1);
}

void sub_2170A8CEC(uint64_t a1, int a2)
{
  unint64_t v4 = a2;
  sub_2170A4C84(a1, a2);
  sub_2170A4C84(a1 + 24, v4);
  sub_2170A4C84(a1 + 48, a2 << 6);
  sub_2170A4C84(a1 + 72, v4);
  sub_21681C000(a1 + 96, v4);
  uint64_t v5 = *(void **)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104) - (void)v5;
  if (v6 >= 1) {
    memset_pattern16(v5, &unk_2174AFAA0, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 != v7) {
    memset_pattern16(*(void **)a1, &unk_2174AFAB0, ((v7 - *(void *)a1 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  }
  uint64_t v8 = *(unsigned char **)(a1 + 24);
  int v9 = *(unsigned char **)(a1 + 32);
  if (v8 != v9) {
    memset_pattern16(v8, &unk_2174AFAB0, ((v9 - v8 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  }
  uint64_t v10 = *(unsigned char **)(a1 + 48);
  int32x2_t v11 = *(unsigned char **)(a1 + 56);
  if (v10 != v11) {
    memset_pattern16(v10, &unk_2174AFAB0, ((v11 - v10 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  }
  int v12 = *(unsigned char **)(a1 + 72);
  uint64_t v13 = *(unsigned char **)(a1 + 80);
  if (v12 != v13)
  {
    memset_pattern16(v12, &unk_2174AFAB0, ((v13 - v12 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
  }
}

uint64_t sub_2170A8E48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_2170A8EBC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 4004);
  int v4 = *(_DWORD *)(a1 + 4008);
  int v5 = ~(-1 << (*(_DWORD *)(a1 + 4020) - 1));
  int v53 = *(_DWORD *)(a1 + 4032);
  sub_2170AE224((void *)(a1 + 1160), (void *)(a1 + 1208), (void *)(a1 + 1184), (uint64_t *)(a1 + 1184), -1431655765 * ((*(void *)(a1 + 1168) - *(void *)(a1 + 1160)) >> 2), (uint64_t *)(a1 + 3968), v5);
  uint64_t v68 = 0;
  long long v67 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  *(_OWORD *)int32x2_t v64 = 0u;
  *(_OWORD *)int32x2_t v61 = 0u;
  *(_OWORD *)int v62 = 0u;
  sub_2170A8CEC((uint64_t)v61, v4);
  __int16 v60 = 0x8000;
  if ((int)v3 >= 1)
  {
    uint64_t v7 = 0;
    int v49 = 2 * v5;
    uint64_t v8 = a3;
    int v9 = (int *)(a2 + 4);
    uint64_t v51 = 4 * v4;
    int v52 = v4;
    uint64_t v50 = 12 * v3;
    while (v53 && !*v8)
    {
LABEL_83:
      v7 += 12;
      ++v8;
      int v9 = (int *)((char *)v9 + v51);
      if (v50 == v7) {
        goto LABEL_84;
      }
    }
    uint64_t v10 = (int *)(*(void *)(a1 + 3968) + v7);
    int v11 = *v10;
    int v12 = v10[1];
    int v13 = v10[2];
    uint64_t v14 = *(int *)(*(void *)(a1 + 1256) + v7);
    if (v14 == -1 || v53 && !a3[v14])
    {
      if (sub_2170A4794((unsigned int *)a1, &v60))
      {
        int v11 = -v11;
        int v12 = -v12;
        int v13 = -v13;
      }
    }
    else
    {
      int v15 = (_DWORD *)(a2 + 4 * (int)v14 * v52);
      int v16 = *v15 - v5;
      int v17 = v15[1] - v5;
      if (v16 >= 0) {
        int v18 = v16;
      }
      else {
        int v18 = -v16;
      }
      if (v17 >= 0) {
        int v19 = v17;
      }
      else {
        int v19 = -v17;
      }
      int v20 = v5 - v18;
      int v21 = v19 - v5;
      if (v16 >= 0) {
        int v21 = v5 - v19;
      }
      int v22 = v18 - v5;
      if (v17 >= 0) {
        int v22 = v20;
      }
      int v23 = v20 - v19;
      if (v23 < 0)
      {
        int v16 = v21;
        int v17 = v22;
      }
      if (v13 * (uint64_t)v23 + v11 * (uint64_t)v16 + v12 * (uint64_t)v17 < 0)
      {
        int v11 = -v11;
        int v12 = -v12;
        int v13 = -v13;
      }
    }
    if (v11 >= 0) {
      unsigned int v24 = v11;
    }
    else {
      unsigned int v24 = -v11;
    }
    if (v12 >= 0) {
      unsigned int v25 = v12;
    }
    else {
      unsigned int v25 = -v12;
    }
    if (v13 >= 0) {
      unsigned int v26 = v13;
    }
    else {
      unsigned int v26 = -v13;
    }
    BOOL v28 = v24 < v25 || v24 < v26;
    if (v28)
    {
      unsigned int v24 = v26;
      int v29 = v12;
      int v30 = v11;
      if (v25 < v26)
      {
LABEL_44:
        v59[0] = v30;
        v59[1] = v29;
        v59[2] = v24;
        sub_2170A7A6C((unsigned int *)a1, v6, (uint64_t)v59, v52, (void *)(a1 + 3920), (unsigned char *)(a1 + 4044), v61, (uint64_t)&v55);
        int v32 = v55;
        int v33 = v56;
        if (v55 >= 0) {
          int v34 = v55;
        }
        else {
          int v34 = -v55;
        }
        if (v56 >= 0) {
          int v35 = v56;
        }
        else {
          int v35 = -v56;
        }
        int v36 = v5 - v34;
        int v37 = v5 - v34 - v35;
        if (v37 < 0)
        {
          int v38 = v5 - v35;
          int v39 = v35 - v5;
          if (v55 >= 0) {
            int v32 = v38;
          }
          else {
            int v32 = v39;
          }
          int v40 = v34 - v5;
          if (v56 >= 0) {
            int v33 = v36;
          }
          else {
            int v33 = v40;
          }
        }
        int v41 = -v37;
        if (v13 >= 0) {
          int v42 = v37;
        }
        else {
          int v42 = -v37;
        }
        if (v12 >= 0) {
          int v41 = v37;
        }
        if (v25 < v26) {
          int v41 = v33;
        }
        else {
          int v42 = v33;
        }
        if (v11 < 0) {
          int v37 = -v37;
        }
        if (v28) {
          int v33 = v41;
        }
        else {
          int v42 = v32;
        }
        if (!v28) {
          int v32 = v37;
        }
        if (v33 >= 0) {
          int v43 = v33;
        }
        else {
          int v43 = -v33;
        }
        if (v32 < 0)
        {
          int v44 = -v32;
        }
        else
        {
          int v43 = v49 - v43;
          int v44 = v32;
        }
        if (v33 >= 0) {
          int v44 = v49 - v44;
        }
        int v45 = v32 + v5;
        int v46 = v33 + v5;
        if (v42 < 0)
        {
          int v45 = v43;
          int v46 = v44;
        }
        *(v9 - 1) = v45;
        *int v9 = v46;
        goto LABEL_83;
      }
      int32x2_t v31 = &v57;
      unsigned int v24 = v25;
      int v29 = v13;
      int v30 = v11;
    }
    else
    {
      int32x2_t v31 = &v58;
      int v29 = v12;
      int v30 = v13;
    }
    *(_DWORD *)int32x2_t v31 = v13;
    goto LABEL_44;
  }
LABEL_84:
  if ((void)v67)
  {
    *((void *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  if (__p[1])
  {
    *(void **)&long long v66 = __p[1];
    operator delete(__p[1]);
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  if (v62[1])
  {
    *(void **)&long long v63 = v62[1];
    operator delete(v62[1]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
}

void sub_2170A926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_2170A8E48((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170A9284(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1;
  uint64_t v6 = 0;
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v130 = a1[1001];
  unint64_t v7 = (int)a1[1002];
  int v128 = a1 + 980;
  int v8 = a1[1008];
  uint64_t v138 = 0;
  memset(v137, 0, sizeof(v137));
  do
  {
    sub_2170A8CEC((uint64_t)v137 + v6, v7);
    v6 += 120;
  }
  while (v6 != 360);
  __int16 v136 = 0x8000;
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(v134, &unk_2174AFAB0, 6uLL);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(v133, v7, __p);
  int v131 = 0;
  sub_2170A4FFC(__p, v7, &v131);
  if ((int)v130 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v117 = v7;
    uint64_t v122 = 4 * v7;
    int v123 = v5 + 1011;
    uint64_t v125 = a3;
    uint64_t v126 = a2;
    int v127 = v5;
    int v124 = v8;
    unint64_t v129 = v7;
    do
    {
      if (v8 && !*(unsigned char *)(a3 + v10)) {
        goto LABEL_103;
      }
      int v11 = (int *)(*((void *)v5 + 157) + 12 * v10);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      uint64_t v14 = v11[2];
      int v15 = (int *)(*((void *)v5 + 160) + 12 * v10);
      uint64_t v16 = v15[2];
      if (v16 != -1
        && (!v8
         || *(unsigned char *)(a3 + v13)
         && *(unsigned char *)(a3 + v12)
         && *(unsigned char *)(a3 + v14)
         && *(unsigned char *)(a3 + *v15)
         && *(unsigned char *)(a3 + v15[1])
         && *(unsigned char *)(a3 + v16)))
      {
        int v118 = *v15;
        int v119 = v15[1];
        unint64_t v17 = v129;
        int v116 = v13;
        int v18 = v5;
        int v19 = (int *)(a2 + 4 * (int)v13 * (int)v129);
        int v120 = v12;
        int v20 = (int *)(a2 + 4 * (int)v12 * (int)v129);
        int v21 = (int *)(a2 + 4 * (int)v14 * (int)v129);
        BOOL v22 = sub_2170A4794(v18, v134);
        uint64_t v23 = 2;
        if (!v22) {
          uint64_t v23 = 1;
        }
        if (sub_2170A4794(v18, &v134[v23])) {
          int v24 = 2;
        }
        else {
          int v24 = 0;
        }
        int v25 = v24 | v22;
        if (v25)
        {
          unsigned int v26 = (int *)(a2 + 4 * v118 * (int)v129);
          int v27 = (int *)(a2 + 4 * v119 * (int)v129);
          BOOL v28 = (int *)(a2 + 4 * (int)v16 * (int)v129);
          if (v25 == 2)
          {
            sub_2170A5790(v19, v20, v21, v129, (int *)(*((void *)v127 + 145) + 12 * v116), (int *)(*((void *)v127 + 145) + 12 * v120), (int *)(*((void *)v127 + 145) + 12 * (int)v14), (int *)(*((void *)v127 + 145) + 12 * v10), (_DWORD *)v133[0]);
            sub_2170A5790(v26, v27, v28, v129, (int *)(*((void *)v127 + 145) + 12 * v118), (int *)(*((void *)v127 + 145) + 12 * v119), (int *)(*((void *)v127 + 145) + 12 * (int)v16), (int *)(*((void *)v127 + 145) + 12 * v10), (_DWORD *)__p[0]);
            unint64_t v17 = v129;
            if ((int)v129 >= 1)
            {
              int32x2_t v75 = (int *)v133[0];
              __int32 v76 = (int *)__p[0];
              uint64_t v77 = v117;
              do
              {
                int v78 = *v76++;
                int v79 = v78 + *v75;
                if (v79 < 0 != __OFADD__(v78, *v75)) {
                  ++v79;
                }
                *v75++ = v79 >> 1;
                --v77;
              }
              while (v77);
            }
          }
          else if (v25 == 1)
          {
            unint64_t v17 = v129;
            if ((int)v129 >= 1)
            {
              int v29 = v133[0];
              uint64_t v30 = v117;
              do
              {
                int v32 = *v26++;
                int v31 = v32;
                int v33 = *v27++;
                int v34 = v33 + v31;
                int v35 = *v28++;
                *v29++ = v34 - v35;
                --v30;
              }
              while (v30);
            }
          }
          else
          {
            unint64_t v17 = v129;
            if (v129 == 2)
            {
              sub_2170A5E8C((unint64_t)v19, v20, v21, (_DWORD *)(*((void *)v127 + 145) + 12 * v116), (_DWORD *)(*((void *)v127 + 145) + 12 * v120), (int *)(*((void *)v127 + 145) + 12 * v10), (int *)v133[0]);
              sub_2170A5E8C((unint64_t)v26, v27, v28, (_DWORD *)(*((void *)v127 + 145) + 12 * v118), (_DWORD *)(*((void *)v127 + 145) + 12 * v119), (int *)(*((void *)v127 + 145) + 12 * v10), (int *)__p[0]);
              int v80 = v133[0];
              double v81 = __p[0];
              int v82 = *((_DWORD *)v133[0] + 1);
              int v83 = *(_DWORD *)__p[0] + *(_DWORD *)v133[0];
              if (v83 < 0 != __OFADD__(*(_DWORD *)__p[0], *(_DWORD *)v133[0])) {
                ++v83;
              }
              *(_DWORD *)v133[0] = v83 >> 1;
              int v84 = v81[1];
              BOOL v66 = __OFADD__(v84, v82);
              int v85 = v84 + v82;
              if (v85 < 0 != v66) {
                ++v85;
              }
              v80[1] = v85 >> 1;
              unsigned int v57 = 2;
              unint64_t v17 = v129;
              goto LABEL_102;
            }
            if ((int)v129 >= 1)
            {
              unint64_t v95 = 0;
              BOOL v96 = (char *)v133[0];
              do
              {
                int v97 = v19[v95 / 4];
                int v98 = v26[v95 / 4];
                BOOL v66 = __OFADD__(v98, v97);
                int v99 = v98 + v97;
                if (v99 < 0 != v66) {
                  ++v99;
                }
                unint64_t v100 = 1431655766 * ((v99 >> 1) - (v21[v95 / 4] + v28[v95 / 4]) + 2 * (v27[v95 / 4] + v20[v95 / 4]));
                *(_DWORD *)&v96[v95] = HIDWORD(v100) + (v100 >> 63);
                v95 += 4;
                unsigned int v57 = 2;
              }
              while (v122 != v95);
              goto LABEL_102;
            }
          }
        }
        else if ((int)v129 >= 1)
        {
          uint64_t v68 = v133[0];
          uint64_t v69 = v117;
          do
          {
            int v71 = *v19++;
            int v70 = v71;
            int v72 = *v20++;
            int v73 = v72 + v70;
            int v74 = *v21++;
            *v68++ = v73 - v74;
            --v69;
          }
          while (v69);
        }
      }
      else
      {
        if (v14 == -1 || v8 && (!*(unsigned char *)(a3 + v13) || !*(unsigned char *)(a3 + v12) || !*(unsigned char *)(a3 + v14)))
        {
          unint64_t v17 = v129;
          if (v12 == -1 || v8 && (!*(unsigned char *)(a3 + v13) || !*(unsigned char *)(a3 + v12)))
          {
            if (v13 == -1 || v8 && !*(unsigned char *)(a3 + v13))
            {
              char v58 = v133[0];
              if ((int)v129 >= 1) {
                bzero(v133[0], v122);
              }
              LOBYTE(v131) = 3;
              sub_2170A7A6C(v5, v9, (uint64_t)v58, v129, v128, &v131, 0, a2 + 4 * v10 * v129);
              goto LABEL_103;
            }
            if ((int)v129 >= 1)
            {
              int v53 = (int *)(a2 + 4 * (int)v13 * (int)v129);
              int v54 = v133[0];
              uint64_t v55 = v117;
              do
              {
                int v56 = *v53++;
                *v54++ = v56;
                --v55;
              }
              while (v55);
            }
            unsigned int v57 = 0;
          }
          else
          {
            int v51 = v12;
            if (v129 == 2)
            {
              BOOL v52 = sub_2170A4794(v5, &v136);
              sub_2170A5C70((int *)(a2 + 8 * v13), (int *)(a2 + 8 * v51), (_DWORD *)(*((void *)v5 + 145) + 12 * (int)v13), (_DWORD *)(*((void *)v5 + 145) + 12 * v51), (int *)(*((void *)v5 + 145) + 12 * v10), v52, (int *)v133[0]);
            }
            else if ((int)v129 >= 1)
            {
              int32x2_t v59 = (int *)(a2 + 4 * (int)v13 * (int)v129);
              __int16 v60 = (int *)(a2 + 4 * (int)v12 * (int)v129);
              int32x2_t v61 = (int *)v133[0];
              uint64_t v62 = v117;
              do
              {
                int v64 = *v59++;
                int v63 = v64;
                int v65 = *v60++;
                BOOL v66 = __OFADD__(v65, v63);
                int v67 = v65 + v63;
                if (v67 < 0 != v66) {
                  ++v67;
                }
                *v61++ = v67 >> 1;
                --v62;
              }
              while (v62);
            }
            unsigned int v57 = 1;
          }
          goto LABEL_102;
        }
        unint64_t v17 = v129;
        int v36 = v13;
        int v37 = (int *)(a2 + 4 * (int)v13 * (int)v129);
        int v121 = v12;
        int v38 = (int *)(a2 + 4 * (int)v12 * (int)v129);
        int v39 = (int *)(a2 + 4 * (int)v14 * (int)v129);
        BOOL v40 = sub_2170A4794(v5, __b);
        uint64_t v41 = 2;
        if (!v40) {
          uint64_t v41 = 1;
        }
        if (sub_2170A4794(v5, &__b[v41])) {
          int v42 = 2;
        }
        else {
          int v42 = 0;
        }
        int v43 = v42 | v40;
        if (v43 == 2)
        {
          sub_2170A5790(v37, v38, v39, v129, (int *)(*((void *)v5 + 145) + 12 * v36), (int *)(*((void *)v5 + 145) + 12 * v121), (int *)(*((void *)v5 + 145) + 12 * (int)v14), (int *)(*((void *)v5 + 145) + 12 * v10), (_DWORD *)v133[0]);
          if ((int)v129 >= 1)
          {
            int v86 = (int *)v133[0];
            uint64_t v87 = v117;
            do
            {
              int v89 = *v37++;
              int v88 = v89;
              int v90 = *v38++;
              int v91 = v90 + v88;
              int v92 = *v39++;
              int v93 = v91 - v92;
              BOOL v66 = __OFADD__(v93, *v86);
              int v94 = v93 + *v86;
              if (v94 < 0 != v66) {
                ++v94;
              }
              *v86++ = v94 >> 1;
              --v87;
            }
            while (v87);
          }
        }
        else if (v43 == 1)
        {
          sub_2170A5790(v37, v38, v39, v129, (int *)(*((void *)v5 + 145) + 12 * v36), (int *)(*((void *)v5 + 145) + 12 * v121), (int *)(*((void *)v5 + 145) + 12 * (int)v14), (int *)(*((void *)v5 + 145) + 12 * v10), (_DWORD *)v133[0]);
        }
        else if (v43)
        {
          if (v129 == 2)
          {
            sub_2170A5E8C(v126 + 8 * v36, (int *)(v126 + 8 * v121), (int *)(v126 + 8 * v14), (_DWORD *)(*((void *)v5 + 145) + 12 * v36), (_DWORD *)(*((void *)v5 + 145) + 12 * v121), (int *)(*((void *)v5 + 145) + 12 * v10), (int *)v133[0]);
          }
          else if ((int)v129 >= 1)
          {
            uint32x2_t v101 = v133[0];
            uint64_t v102 = v117;
            do
            {
              int v104 = *v37++;
              int v103 = v104;
              int v106 = *v38++;
              int v105 = v106;
              int v107 = *v39++;
              *v101++ = v105 + v103 - v107;
              unsigned int v57 = 2;
              --v102;
            }
            while (v102);
            goto LABEL_102;
          }
        }
        else if ((int)v129 >= 1)
        {
          int v44 = v133[0];
          uint64_t v45 = v117;
          do
          {
            int v47 = *v37++;
            int v46 = v47;
            int v48 = *v38++;
            int v49 = v48 + v46;
            int v50 = *v39++;
            *v44++ = v49 - v50;
            --v45;
          }
          while (v45);
        }
      }
      unsigned int v57 = 2;
LABEL_102:
      a2 = v126;
      int v5 = v127;
      sub_2170A7A6C(v127, v9, (uint64_t)v133[0], v17, v128, v123, (void *)v137 + 15 * v57, v126 + 4 * v10 * v17);
      a3 = v125;
      int v8 = v124;
LABEL_103:
      ++v10;
    }
    while (v10 != v130);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v133[0])
  {
    v133[1] = v133[0];
    operator delete(v133[0]);
  }
  unint64_t v108 = 360;
  do
  {
    unsigned int v109 = (char *)v137 + v108;
    long long v110 = v133[v108 / 8 + 2];
    if (v110)
    {
      *((void *)v109 - 2) = v110;
      operator delete(v110);
    }
    BOOL v111 = (void *)*((void *)v109 - 6);
    if (v111)
    {
      v133[v108 / 8] = v111;
      operator delete(v111);
    }
    int v112 = (char *)v137 + v108;
    int v113 = *(void **)((char *)&v137[-4] + v108 - 8);
    if (v113)
    {
      *((void *)v112 - 8) = v113;
      operator delete(v113);
    }
    uint64_t v114 = (void *)*((void *)v112 - 12);
    if (v114)
    {
      *(void *)((char *)&v137[-5] + v108 - 8) = v114;
      operator delete(v114);
    }
    int v115 = (void *)*((void *)v109 - 15);
    if (v115)
    {
      *(void *)((char *)&v137[-7] + v108) = v115;
      operator delete(v115);
    }
    v108 -= 120;
  }
  while (v108);
}

void sub_2170A9B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a33 + i));
  _Unwind_Resume(a1);
}

void sub_2170A9BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v50 = *(unsigned int *)(a1 + 4004);
  unint64_t v6 = *(int *)(a1 + 4008);
  int v48 = (void *)(a1 + 3920);
  int v7 = *(_DWORD *)(a1 + 4032);
  uint64_t v57 = 0;
  memset(v56, 0, sizeof(v56));
  do
  {
    sub_2170A8CEC((uint64_t)v56 + v5, v6);
    v5 += 120;
  }
  while (v5 != 360);
  __int16 v55 = 0x8000;
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(&v53, v6, __p);
  int v51 = 0;
  sub_2170A4FFC(__p, v6, &v51);
  uint64_t v9 = a3;
  if ((int)v50 >= 1)
  {
    for (uint64_t i = 0; i != v50; ++i)
    {
      if (v7 && !*(unsigned char *)(v9 + i)) {
        continue;
      }
      int v11 = (int *)(*(void *)(a1 + 1256) + 12 * i);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      uint64_t v14 = v11[2];
      int v15 = (int *)(*(void *)(a1 + 1280) + 12 * i);
      uint64_t v16 = v15[2];
      if (v16 != -1
        && ((v18 = *v15, uint64_t v17 = v15[1], !v7)
         || *(unsigned char *)(v9 + v13)
         && *(unsigned char *)(v9 + v12)
         && *(unsigned char *)(v9 + v14)
         && *(unsigned char *)(v9 + v18)
         && *(unsigned char *)(v9 + v17)
         && *(unsigned char *)(v9 + v16)))
      {
        sub_2170A5790((int *)(a2 + 4 * (int)v13 * (int)v6), (int *)(a2 + 4 * (int)v12 * (int)v6), (int *)(a2 + 4 * (int)v14 * (int)v6), v6, (int *)(*(void *)(a1 + 1160) + 12 * (int)v13), (int *)(*(void *)(a1 + 1160) + 12 * (int)v12), (int *)(*(void *)(a1 + 1160) + 12 * (int)v14), (int *)(*(void *)(a1 + 1160) + 12 * i), v53);
        sub_2170A5790((int *)(a2 + 4 * (int)v18 * (int)v6), (int *)(a2 + 4 * (int)v17 * (int)v6), (int *)(a2 + 4 * (int)v16 * (int)v6), v6, (int *)(*(void *)(a1 + 1160) + 12 * (int)v18), (int *)(*(void *)(a1 + 1160) + 12 * (int)v17), (int *)(*(void *)(a1 + 1160) + 12 * (int)v16), (int *)(*(void *)(a1 + 1160) + 12 * i), (_DWORD *)__p[0]);
        if ((int)v6 >= 1)
        {
          int v19 = (int *)v53;
          int v20 = (int *)__p[0];
          uint64_t v21 = v6;
          do
          {
            int v22 = *v20++;
            int v23 = v22 + *v19;
            if (v23 < 0 != __OFADD__(v22, *v19)) {
              ++v23;
            }
            *v19++ = v23 >> 1;
            --v21;
          }
          while (v21);
        }
      }
      else
      {
        if (v14 == -1 || v7 && (!*(unsigned char *)(v9 + v13) || !*(unsigned char *)(v9 + v12) || !*(unsigned char *)(v9 + v14)))
        {
          if (v12 == -1 || v7 && (!*(unsigned char *)(v9 + v13) || !*(unsigned char *)(v9 + v12)))
          {
            if (v13 == -1 || v7 && !*(unsigned char *)(v9 + v13))
            {
              uint64_t v30 = v53;
              if ((int)v6 >= 1) {
                bzero(v53, 4 * v6);
              }
              LOBYTE(v51) = 3;
              sub_2170A7A6C((unsigned int *)a1, v8, (uint64_t)v30, v6, v48, &v51, 0, a2 + 4 * i * v6);
              uint64_t v9 = a3;
              continue;
            }
            if ((int)v6 >= 1)
            {
              unsigned int v26 = (int *)(a2 + 4 * (int)v13 * (int)v6);
              int v27 = v53;
              uint64_t v28 = v6;
              do
              {
                int v29 = *v26++;
                *v27++ = v29;
                --v28;
              }
              while (v28);
            }
            unsigned int v24 = 0;
          }
          else
          {
            if (v6 == 2)
            {
              BOOL v25 = sub_2170A4794((unsigned int *)a1, &v55);
              sub_2170A5C70((int *)(a2 + 8 * v13), (int *)(a2 + 8 * v12), (_DWORD *)(*(void *)(a1 + 1160) + 12 * (int)v13), (_DWORD *)(*(void *)(a1 + 1160) + 12 * (int)v12), (int *)(*(void *)(a1 + 1160) + 12 * i), v25, (int *)v53);
            }
            else if ((int)v6 >= 1)
            {
              int v31 = (int *)(a2 + 4 * (int)v13 * (int)v6);
              int v32 = (int *)(a2 + 4 * (int)v12 * (int)v6);
              int v33 = (int *)v53;
              uint64_t v34 = v6;
              do
              {
                int v36 = *v31++;
                int v35 = v36;
                int v37 = *v32++;
                BOOL v38 = __OFADD__(v37, v35);
                int v39 = v37 + v35;
                if (v39 < 0 != v38) {
                  ++v39;
                }
                *v33++ = v39 >> 1;
                --v34;
              }
              while (v34);
            }
            unsigned int v24 = 1;
          }
          goto LABEL_50;
        }
        sub_2170A5790((int *)(a2 + 4 * (int)v13 * (int)v6), (int *)(a2 + 4 * (int)v12 * (int)v6), (int *)(a2 + 4 * (int)v14 * (int)v6), v6, (int *)(*(void *)(a1 + 1160) + 12 * (int)v13), (int *)(*(void *)(a1 + 1160) + 12 * (int)v12), (int *)(*(void *)(a1 + 1160) + 12 * (int)v14), (int *)(*(void *)(a1 + 1160) + 12 * i), v53);
      }
      unsigned int v24 = 2;
LABEL_50:
      sub_2170A7A6C((unsigned int *)a1, v8, (uint64_t)v53, v6, v48, (unsigned char *)(a1 + 4044), (void *)v56 + 15 * v24, a2 + 4 * i * v6);
      uint64_t v9 = a3;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v53)
  {
    v54[0] = v53;
    operator delete(v53);
  }
  unint64_t v40 = 360;
  do
  {
    uint64_t v41 = (char *)v56 + v40;
    int v42 = (void *)v54[v40 / 8];
    if (v42)
    {
      *((void *)v41 - 2) = v42;
      operator delete(v42);
    }
    int v43 = (void *)*((void *)v41 - 6);
    if (v43)
    {
      __p[v40 / 8 + 2] = v43;
      operator delete(v43);
    }
    int v44 = (char *)v56 + v40;
    uint64_t v45 = *(void **)((char *)&v56[-4] + v40 - 8);
    if (v45)
    {
      *((void *)v44 - 8) = v45;
      operator delete(v45);
    }
    int v46 = (void *)*((void *)v44 - 12);
    if (v46)
    {
      *(void *)((char *)&v56[-5] + v40 - 8) = v46;
      operator delete(v46);
    }
    int v47 = (void *)*((void *)v41 - 15);
    if (v47)
    {
      *(void *)((char *)&v56[-7] + v40) = v47;
      operator delete(v47);
    }
    v40 -= 120;
  }
  while (v40);
}

void sub_2170AA0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a25 + i));
  _Unwind_Resume(a1);
}

void sub_2170AA12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned int *)(a1 + 4004);
  unint64_t v7 = *(int *)(a1 + 4008);
  int v70 = (void *)(a1 + 3920);
  int v71 = *(_DWORD *)(a1 + 4032);
  uint64_t v78 = 0;
  memset(v77, 0, sizeof(v77));
  do
  {
    sub_2170A8CEC((uint64_t)v77 + v5, v7);
    v5 += 120;
  }
  while (v5 != 360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  int v73 = 0;
  sub_2170A4FFC(&__p, v7, &v73);
  int v9 = v71;
  if ((int)v6 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v68 = a3;
    uint64_t v11 = 4 * v7;
    uint64_t v65 = v6;
    uint64_t v69 = a2;
    do
    {
      if (v9 && !*(unsigned char *)(a3 + v10)) {
        goto LABEL_77;
      }
      uint64_t v12 = (int *)(*(void *)(a1 + 1256) + 12 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = v12[2];
      uint64_t v16 = (int *)(*(void *)(a1 + 1280) + 12 * v10);
      uint64_t v17 = v16[2];
      if (v17 != -1
        && (!v9
         || *(unsigned char *)(a3 + v13)
         && *(unsigned char *)(a3 + v14)
         && *(unsigned char *)(a3 + v15)
         && *(unsigned char *)(a3 + *v16)
         && *(unsigned char *)(a3 + v16[1])
         && *(unsigned char *)(a3 + v17)))
      {
        int v66 = *v16;
        int v67 = v16[1];
        BOOL v18 = sub_2170A4794((unsigned int *)a1, __b);
        uint64_t v19 = 2;
        if (!v18) {
          uint64_t v19 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &__b[v19])) {
          int v20 = 2;
        }
        else {
          int v20 = 0;
        }
        int v21 = v13 * v7;
        uint64_t v22 = v69;
        uint64_t v23 = v69 + 4 * v21;
        uint64_t v24 = v69 + 4 * (int)v14 * (int)v7;
        uint64_t v25 = v69 + 4 * (int)v15 * (int)v7;
        int v26 = v20 | v18;
        if (v20 | v18)
        {
          uint64_t v27 = v69 + 4 * v66 * (int)v7;
          uint64_t v28 = v69 + 4 * v67 * (int)v7;
          uint64_t v29 = v69 + 4 * (int)v17 * (int)v7;
          if (v26 == 1)
          {
            uint64_t v30 = (char *)__p;
            a3 = v68;
            uint64_t v6 = v65;
            if ((int)v7 >= 1)
            {
              uint64_t v51 = 0;
              do
              {
                *(_DWORD *)&v30[v51] = *(_DWORD *)(v28 + v51) + *(_DWORD *)(v27 + v51) - *(_DWORD *)(v29 + v51);
                v51 += 4;
              }
              while (v11 != v51);
            }
          }
          else
          {
            a3 = v68;
            uint64_t v6 = v65;
            if (v26 == 2)
            {
              uint64_t v30 = (char *)__p;
              if ((int)v7 >= 1)
              {
                uint64_t v31 = 0;
                do
                {
                  int v32 = *(_DWORD *)(v23 + v31);
                  int v33 = *(_DWORD *)(v27 + v31);
                  BOOL v34 = __OFADD__(v33, v32);
                  int v35 = v33 + v32;
                  if (v35 < 0 != v34) {
                    ++v35;
                  }
                  *(_DWORD *)&v30[v31] = *(_DWORD *)(v28 + v31) + *(_DWORD *)(v24 + v31) - (v35 >> 1);
                  v31 += 4;
                }
                while (v11 != v31);
              }
            }
            else
            {
              uint64_t v30 = (char *)__p;
              if ((int)v7 >= 1)
              {
                uint64_t v52 = 0;
                do
                {
                  int v53 = *(_DWORD *)(v23 + v52);
                  int v54 = *(_DWORD *)(v27 + v52);
                  BOOL v34 = __OFADD__(v54, v53);
                  int v55 = v54 + v53;
                  if (v55 < 0 != v34) {
                    ++v55;
                  }
                  uint64_t v8 = *(unsigned int *)(v29 + v52);
                  unint64_t v56 = 1431655766
                      * ((v55 >> 1)
                       - (*(_DWORD *)(v25 + v52)
                        + (int)v8)
                       + 2 * (*(_DWORD *)(v28 + v52) + *(_DWORD *)(v24 + v52)));
                  *(_DWORD *)&v30[v52] = HIDWORD(v56) + (v56 >> 63);
                  v52 += 4;
                }
                while (v11 != v52);
              }
            }
          }
        }
        else
        {
          uint64_t v30 = (char *)__p;
          if ((int)v7 < 1)
          {
            unsigned int v45 = 2;
            a3 = v68;
            uint64_t v6 = v65;
            goto LABEL_76;
          }
          uint64_t v50 = 0;
          a3 = v68;
          uint64_t v6 = v65;
          do
          {
            *(_DWORD *)&v30[v50] = *(_DWORD *)(v24 + v50) + *(_DWORD *)(v23 + v50) - *(_DWORD *)(v25 + v50);
            v50 += 4;
          }
          while (v11 != v50);
        }
      }
      else
      {
        if (v15 == -1 || v9 && (!*(unsigned char *)(a3 + v13) || !*(unsigned char *)(a3 + v14) || !*(unsigned char *)(a3 + v15)))
        {
          if (v14 == -1 || v9 && (!*(unsigned char *)(a3 + v13) || !*(unsigned char *)(a3 + v14)))
          {
            if (v13 == -1 || v9 && !*(unsigned char *)(a3 + v13))
            {
              int v49 = __p;
              if ((int)v7 >= 1) {
                bzero(__p, 4 * v7);
              }
              LOBYTE(v73) = 3;
              sub_2170A7A6C((unsigned int *)a1, v8, (uint64_t)v49, v7, v70, &v73, 0, v69 + 4 * v10 * v7);
              a3 = v68;
              int v9 = v71;
              goto LABEL_77;
            }
            uint64_t v30 = (char *)__p;
            if ((int)v7 >= 1)
            {
              uint64_t v46 = 0;
              int v47 = v13 * v7;
              uint64_t v22 = v69;
              uint64_t v48 = v69 + 4 * v47;
              do
              {
                *(_DWORD *)&v30[v46] = *(_DWORD *)(v48 + v46);
                v46 += 4;
              }
              while (v11 != v46);
              unsigned int v45 = 0;
              goto LABEL_76;
            }
            unsigned int v45 = 0;
          }
          else
          {
            uint64_t v30 = (char *)__p;
            if ((int)v7 >= 1)
            {
              uint64_t v39 = 0;
              int v40 = v13 * v7;
              uint64_t v22 = v69;
              uint64_t v41 = v69 + 4 * v40;
              do
              {
                int v42 = *(_DWORD *)(v41 + v39);
                int v43 = *(_DWORD *)(v69 + 4 * (int)v14 * (int)v7 + v39);
                BOOL v34 = __OFADD__(v43, v42);
                int v44 = v43 + v42;
                if (v44 < 0 != v34) {
                  ++v44;
                }
                *(_DWORD *)&v30[v39] = v44 >> 1;
                v39 += 4;
              }
              while (v11 != v39);
              unsigned int v45 = 1;
              goto LABEL_76;
            }
            unsigned int v45 = 1;
          }
          goto LABEL_75;
        }
        uint64_t v30 = (char *)__p;
        if ((int)v7 < 1)
        {
          unsigned int v45 = 2;
LABEL_75:
          uint64_t v22 = v69;
          goto LABEL_76;
        }
        uint64_t v36 = 0;
        int v37 = v13 * v7;
        uint64_t v22 = v69;
        uint64_t v38 = v69 + 4 * v37;
        do
        {
          *(_DWORD *)&v30[v36] = *(_DWORD *)(v69 + 4 * (int)v14 * (int)v7 + v36)
                               + *(_DWORD *)(v38 + v36)
                               - *(_DWORD *)(v69 + 4 * (int)v15 * (int)v7 + v36);
          v36 += 4;
        }
        while (v11 != v36);
      }
      unsigned int v45 = 2;
LABEL_76:
      sub_2170A7A6C((unsigned int *)a1, v8, (uint64_t)v30, v7, v70, (unsigned char *)(a1 + 4044), (void *)v77 + 15 * v45, v22 + 4 * v10 * v7);
      int v9 = v71;
LABEL_77:
      ++v10;
    }
    while (v10 != v6);
  }
  if (__p)
  {
    v75[0] = __p;
    operator delete(__p);
  }
  unint64_t v57 = 360;
  do
  {
    uint64_t v58 = (char *)v77 + v57;
    int32x2_t v59 = (void *)v75[v57 / 8];
    if (v59)
    {
      *((void *)v58 - 2) = v59;
      operator delete(v59);
    }
    __int16 v60 = (void *)*((void *)v58 - 6);
    if (v60)
    {
      *(void *)((char *)&v77[-2] + v57 - 8) = v60;
      operator delete(v60);
    }
    int32x2_t v61 = (char *)v77 + v57;
    uint64_t v62 = *(void **)((char *)&v77[-4] + v57 - 8);
    if (v62)
    {
      *((void *)v61 - 8) = v62;
      operator delete(v62);
    }
    int v63 = (void *)*((void *)v61 - 12);
    if (v63)
    {
      *(void *)((char *)&v77[-5] + v57 - 8) = v63;
      operator delete(v63);
    }
    int v64 = (void *)*((void *)v58 - 15);
    if (v64)
    {
      *(void *)((char *)&v77[-7] + v57) = v64;
      operator delete(v64);
    }
    v57 -= 120;
  }
  while (v57);
}

void sub_2170AA720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a23 + i));
  _Unwind_Resume(a1);
}

void sub_2170AA768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned int *)(a1 + 4004);
  unint64_t v8 = *(int *)(a1 + 4008);
  int v9 = (void *)(a1 + 3920);
  uint64_t v10 = *(unsigned int *)(a1 + 4032);
  uint64_t v51 = 0;
  memset(v50, 0, sizeof(v50));
  do
  {
    sub_2170A8CEC((uint64_t)v50 + v6, v8);
    v6 += 120;
  }
  while (v6 != 360);
  int v48 = 0;
  sub_2170A4FFC(__p, v8, &v48);
  if ((int)v7 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (unsigned char *)(a1 + 4044);
    uint64_t v14 = 4 * v8;
    uint64_t v47 = a3;
    while (v10)
    {
      if (*(unsigned char *)(a3 + v12))
      {
        uint64_t v15 = (int *)(*(void *)(a1 + 1256) + 12 * v12);
        int v16 = *v15;
        int v17 = v15[1];
        int v18 = v15[2];
        if (v18 == -1 || !*(unsigned char *)(a3 + v16) || !*(unsigned char *)(a3 + v17) || !*(unsigned char *)(a3 + v18))
        {
          if (v17 == -1 || !*(unsigned char *)(a3 + v16) || !*(unsigned char *)(a3 + v17))
          {
            if (v16 == -1 || !*(unsigned char *)(a3 + v16))
            {
LABEL_34:
              uint64_t v35 = v7;
              uint64_t v36 = v10;
              int v37 = v13;
              uint64_t v38 = __p[0];
              if ((int)v8 >= 1) {
                bzero(__p[0], 4 * v8);
              }
              LOBYTE(v48) = 3;
              sub_2170A7A6C((unsigned int *)a1, v11, (uint64_t)v38, v8, v9, &v48, 0, a2 + 4 * v12 * v8);
              uint64_t v13 = v37;
              uint64_t v10 = v36;
              uint64_t v7 = v35;
              a3 = v47;
              goto LABEL_37;
            }
LABEL_16:
            uint64_t v19 = (char *)__p[0];
            if ((int)v8 >= 1)
            {
              uint64_t v20 = 0;
              uint64_t v21 = a2 + 4 * v16 * (int)v8;
              do
              {
                *(_DWORD *)&v19[v20] = *(_DWORD *)(v21 + v20);
                v20 += 4;
              }
              while (v14 != v20);
            }
            unsigned int v22 = 0;
LABEL_32:
            sub_2170A7A6C((unsigned int *)a1, v11, (uint64_t)v19, v8, v9, v13, (void *)v50 + 15 * v22, a2 + 4 * v12 * v8);
            goto LABEL_37;
          }
LABEL_26:
          uint64_t v19 = (char *)__p[0];
          if ((int)v8 >= 1)
          {
            uint64_t v28 = 0;
            uint64_t v29 = a2 + 4 * v16 * (int)v8;
            uint64_t v30 = a2 + 4 * v17 * (int)v8;
            do
            {
              int v31 = *(_DWORD *)(v29 + v28);
              int v32 = *(_DWORD *)(v30 + v28);
              BOOL v33 = __OFADD__(v32, v31);
              int v34 = v32 + v31;
              if (v34 < 0 != v33) {
                ++v34;
              }
              *(_DWORD *)&v19[v28] = v34 >> 1;
              v28 += 4;
            }
            while (v14 != v28);
          }
          unsigned int v22 = 1;
          goto LABEL_32;
        }
        goto LABEL_21;
      }
LABEL_37:
      if (++v12 == v7) {
        goto LABEL_38;
      }
    }
    uint64_t v23 = (int *)(*(void *)(a1 + 1256) + 12 * v12);
    int v16 = *v23;
    int v17 = v23[1];
    int v18 = v23[2];
    if (v18 == -1)
    {
      if (v17 == -1)
      {
        if (v16 == -1) {
          goto LABEL_34;
        }
        goto LABEL_16;
      }
      goto LABEL_26;
    }
LABEL_21:
    uint64_t v19 = (char *)__p[0];
    if ((int)v8 >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = a2 + 4 * v16 * (int)v8;
      uint64_t v26 = a2 + 4 * v17 * (int)v8;
      uint64_t v27 = a2 + 4 * v18 * (int)v8;
      do
      {
        *(_DWORD *)&v19[v24] = *(_DWORD *)(v26 + v24) + *(_DWORD *)(v25 + v24) - *(_DWORD *)(v27 + v24);
        v24 += 4;
      }
      while (v14 != v24);
    }
    unsigned int v22 = 2;
    goto LABEL_32;
  }
LABEL_38:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v39 = 360;
  do
  {
    int v40 = (char *)v50 + v39;
    uint64_t v41 = __p[v39 / 8];
    if (v41)
    {
      *((void *)v40 - 2) = v41;
      operator delete(v41);
    }
    int v42 = (void *)*((void *)v40 - 6);
    if (v42)
    {
      *(void *)((char *)&v50[-2] + v39 - 8) = v42;
      operator delete(v42);
    }
    int v43 = (char *)v50 + v39;
    int v44 = *(void **)((char *)&v50[-4] + v39 - 8);
    if (v44)
    {
      *((void *)v43 - 8) = v44;
      operator delete(v44);
    }
    unsigned int v45 = (void *)*((void *)v43 - 12);
    if (v45)
    {
      *(void *)((char *)&v50[-5] + v39 - 8) = v45;
      operator delete(v45);
    }
    uint64_t v46 = (void *)*((void *)v40 - 15);
    if (v46)
    {
      *(void *)((char *)&v50[-7] + v39) = v46;
      operator delete(v46);
    }
    v39 -= 120;
  }
  while (v39);
}

void sub_2170AAB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

void sub_2170AAB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned int *)(a1 + 4004);
  unint64_t v8 = *(int *)(a1 + 4008);
  unint64_t v39 = (void *)(a1 + 3920);
  int v9 = *(_DWORD *)(a1 + 4032);
  memset(v42, 0, sizeof(v42));
  do
  {
    sub_2170A8CEC((uint64_t)v42 + v6, v8);
    v6 += 120;
  }
  while (v6 != 240);
  int v40 = 0;
  sub_2170A4FFC(__p, v8, &v40);
  if ((int)v7 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (unsigned char *)(a1 + 4044);
    uint64_t v13 = 4 * v8;
    while (v9)
    {
      if (*(unsigned char *)(a3 + v11))
      {
        uint64_t v14 = (int *)(*(void *)(a1 + 1256) + 12 * v11);
        int v15 = *v14;
        int v16 = v14[1];
        if (v16 == -1 || !*(unsigned char *)(a3 + v15) || !*(unsigned char *)(a3 + v16))
        {
          if (v15 == -1 || !*(unsigned char *)(a3 + v15))
          {
LABEL_25:
            uint64_t v29 = v12;
            uint64_t v30 = __p[0];
            if ((int)v8 >= 1) {
              bzero(__p[0], 4 * v8);
            }
            LOBYTE(v40) = 3;
            sub_2170A7A6C((unsigned int *)a1, v10, (uint64_t)v30, v8, v39, &v40, 0, a2 + 4 * v11 * v8);
            uint64_t v12 = v29;
            goto LABEL_28;
          }
LABEL_12:
          int v17 = (char *)__p[0];
          if ((int)v8 >= 1)
          {
            uint64_t v18 = 0;
            uint64_t v19 = a2 + 4 * v15 * (int)v8;
            do
            {
              *(_DWORD *)&v17[v18] = *(_DWORD *)(v19 + v18);
              v18 += 4;
            }
            while (v13 != v18);
          }
          unsigned int v20 = 0;
LABEL_23:
          sub_2170A7A6C((unsigned int *)a1, v10, (uint64_t)v17, v8, v39, v12, (void *)v42 + 15 * v20, a2 + 4 * v11 * v8);
          goto LABEL_28;
        }
LABEL_17:
        int v17 = (char *)__p[0];
        if ((int)v8 >= 1)
        {
          uint64_t v22 = 0;
          uint64_t v23 = a2 + 4 * v15 * (int)v8;
          uint64_t v24 = a2 + 4 * v16 * (int)v8;
          do
          {
            int v25 = *(_DWORD *)(v23 + v22);
            int v26 = *(_DWORD *)(v24 + v22);
            BOOL v27 = __OFADD__(v26, v25);
            int v28 = v26 + v25;
            if (v28 < 0 != v27) {
              ++v28;
            }
            *(_DWORD *)&v17[v22] = v28 >> 1;
            v22 += 4;
          }
          while (v13 != v22);
        }
        unsigned int v20 = 1;
        goto LABEL_23;
      }
LABEL_28:
      if (++v11 == v7) {
        goto LABEL_29;
      }
    }
    uint64_t v21 = (int *)(*(void *)(a1 + 1256) + 12 * v11);
    int v15 = *v21;
    int v16 = v21[1];
    if (v16 == -1)
    {
      if (v15 == -1) {
        goto LABEL_25;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_29:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  for (uint64_t i = 0; i != -240; i -= 120)
  {
    int v32 = (void *)((char *)v42 + i);
    BOOL v33 = *(void **)((char *)&v42[13] + i + 8);
    if (v33)
    {
      v32[28] = v33;
      operator delete(v33);
    }
    int v34 = (void *)v32[24];
    if (v34)
    {
      *(void *)((char *)&v42[12] + i + 8) = v34;
      operator delete(v34);
    }
    uint64_t v35 = (char *)v42 + i;
    uint64_t v36 = *(void **)((char *)&v42[10] + i + 8);
    if (v36)
    {
      *((void *)v35 + 22) = v36;
      operator delete(v36);
    }
    int v37 = (void *)*((void *)v35 + 18);
    if (v37)
    {
      *(void *)((char *)&v42[9] + i + 8) = v37;
      operator delete(v37);
    }
    uint64_t v38 = (void *)v32[15];
    if (v38)
    {
      *(void *)((char *)&v42[8] + i) = v38;
      operator delete(v38);
    }
  }
}

void sub_2170AAE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  for (uint64_t i = 120; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

int32x2_t sub_2170AAE8C(uint64_t a1, int a2, int32x2_t result)
{
  if (*(_DWORD *)(a1 + 1116) <= a2)
  {
    *(_DWORD *)(a1 + 4384) = 3;
    return result;
  }
  uint64_t v5 = (int *)(*(void *)(a1 + 1256) + 12 * a2);
  int v6 = *v5;
  int v7 = v5[1];
  int v8 = v5[2];
  int v9 = *(_DWORD *)(a1 + 1148);
  if (v9 != 1)
  {
    if (v9 != 2) {
      goto LABEL_17;
    }
    uint64_t v10 = (int *)(*(void *)(a1 + 1280) + 12 * a2);
    int v11 = v10[2];
    if (v11 != -1)
    {
      int v12 = *v10;
      int v66 = v10[1];
      BOOL v13 = sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3672));
      uint64_t v14 = 4;
      if (!v13) {
        uint64_t v14 = 2;
      }
      if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3672 + v14))) {
        int v15 = 2;
      }
      else {
        int v15 = 0;
      }
      int v16 = v15 | v13;
      if (v16 == 2)
      {
        uint64_t v39 = *(void *)(a1 + 1160);
        int v40 = (int32x2_t *)(v39 + 12 * v7);
        uint64_t v41 = (int32x2_t *)(v39 + 12 * v66);
        int v42 = (int32x2_t *)(v39 + 12 * v6);
        uint64_t v43 = (int32x2_t *)(v39 + 12 * v12);
        __int32 v44 = v42[1].i32[0];
        __int32 v45 = v43[1].i32[0];
        BOOL v33 = __OFADD__(v45, v44);
        int v46 = v45 + v44;
        int32x2_t v47 = vadd_s32(*v41, *v40);
        uint32x2_t v48 = (uint32x2_t)vadd_s32(*v43, *v42);
        int32x2_t v49 = vshr_n_s32((int32x2_t)vsra_n_u32(v48, v48, 0x1FuLL), 1uLL);
        if (v46 < 0 != v33) {
          int v50 = v46 + 1;
        }
        else {
          int v50 = v46;
        }
        int32x2_t v67 = vsub_s32(v47, v49);
        int v27 = v41[1].i32[0] + v40[1].i32[0] - (v50 >> 1);
        goto LABEL_34;
      }
      if (v16 == 1)
      {
        uint64_t v51 = *(void *)(a1 + 1160);
        uint64_t v18 = (int32x2_t *)(v51 + 12 * v12);
        uint64_t v19 = (int32x2_t *)(v51 + 12 * v66);
        int v20 = v19[1].i32[0] + v18[1].i32[0];
        uint64_t v21 = (int32x2_t *)(v51 + 12 * v11);
      }
      else
      {
        if (v16)
        {
          uint64_t v52 = *(void *)(a1 + 1160);
          int v53 = (int32x2_t *)(v52 + 12 * v6);
          int v54 = (int32x2_t *)(v52 + 12 * v12);
          __int32 v55 = v53[1].i32[0];
          __int32 v56 = v54[1].i32[0];
          BOOL v33 = __OFADD__(v56, v55);
          int v57 = v56 + v55;
          if (v57 < 0 != v33) {
            ++v57;
          }
          uint64_t v58 = (int32x2_t *)(v52 + 12 * v7);
          int32x2_t v59 = (int32x2_t *)(v52 + 12 * v66);
          __int16 v60 = (int32x2_t *)(v52 + 12 * v8);
          int32x2_t v61 = (int32x2_t *)(v52 + 12 * v11);
          uint32x2_t v62 = (uint32x2_t)vadd_s32(*v54, *v53);
          int32x2_t v63 = vadd_s32(*v59, *v58);
          int64x2_t v64 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v63, v63), (int32x2_t)vsra_n_u32(v62, v62, 0x1FuLL), 1uLL), vadd_s32(*v60, *v61)), vdup_n_s32(0x55555556u));
          int32x2_t v67 = vadd_s32(vshrn_n_s64(v64, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v64, 0x3FuLL)));
          int v27 = (2 * (v59[1].i32[0] + v58[1].i32[0]) + (v57 >> 1) - (v60[1].i32[0] + v61[1].i32[0])) / 3;
          goto LABEL_34;
        }
        uint64_t v17 = *(void *)(a1 + 1160);
        uint64_t v18 = (int32x2_t *)(v17 + 12 * v6);
        uint64_t v19 = (int32x2_t *)(v17 + 12 * v7);
        int v20 = v19[1].i32[0] + v18[1].i32[0];
        uint64_t v21 = (int32x2_t *)(v17 + 12 * v8);
      }
      int32x2_t v67 = vsub_s32(vadd_s32(*v19, *v18), *v21);
      int v27 = v20 - v21[1].i32[0];
LABEL_34:
      unsigned int v22 = 1;
      goto LABEL_35;
    }
  }
  if (v8 != -1)
  {
    unsigned int v22 = 0;
    uint64_t v23 = *(void *)(a1 + 1160);
    uint64_t v24 = (int32x2_t *)(v23 + 12 * v6);
    int v25 = (int32x2_t *)(v23 + 12 * v7);
    int v26 = (int32x2_t *)(v23 + 12 * v8);
    int32x2_t v67 = vsub_s32(vadd_s32(*v25, *v24), *v26);
    int v27 = v25[1].i32[0] + v24[1].i32[0] - v26[1].i32[0];
LABEL_35:
    sub_2170AB274(a1, (unsigned char *)(a1 + 1144), (void *)(a1 + 120 * v22 + 3680), (uint64_t)&v69);
    int32x2_t v36 = v69;
    int v37 = v70;
    int32x2_t v38 = v67;
    goto LABEL_36;
  }
LABEL_17:
  if (v7 != -1)
  {
    unsigned int v22 = 0;
    uint64_t v28 = *(void *)(a1 + 1160);
    uint64_t v29 = (int32x2_t *)(v28 + 12 * v6);
    uint64_t v30 = (int32x2_t *)(v28 + 12 * v7);
    uint32x2_t v31 = (uint32x2_t)vadd_s32(*v30, *v29);
    __int32 v32 = v29[1].i32[0];
    LODWORD(v30) = v30[1].i32[0];
    BOOL v33 = __OFADD__(v30, v32);
    int v34 = v30 + v32;
    int32x2_t v67 = vshr_n_s32((int32x2_t)vsra_n_u32(v31, v31, 0x1FuLL), 1uLL);
    if (v34 < 0 != v33) {
      ++v34;
    }
    int v27 = v34 >> 1;
    goto LABEL_35;
  }
  if (v6 != -1)
  {
    unsigned int v22 = 0;
    uint64_t v35 = *(void *)(a1 + 1160) + 12 * v6;
    int32x2_t v67 = *(int32x2_t *)v35;
    int v27 = *(_DWORD *)(v35 + 8);
    goto LABEL_35;
  }
  if (!*(unsigned char *)(a1 + 1156))
  {
    unsigned int v22 = 0;
    int v27 = 0;
    int32x2_t v67 = 0;
    goto LABEL_35;
  }
  char v68 = 3;
  sub_2170AB274(a1, &v68, 0, (uint64_t)&v69);
  int v27 = 0;
  int32x2_t v36 = v69;
  int v37 = v70;
  int32x2_t v38 = 0;
LABEL_36:
  uint64_t v65 = (int32x2_t *)(*(void *)(a1 + 1160) + 12 * a2);
  uint64_t result = vadd_s32(v36, v38);
  *uint64_t v65 = result;
  v65[1].i32[0] = v37 + v27;
  return result;
}

uint64_t sub_2170AB274@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (unsigned int *)result;
  switch(*a2)
  {
    case 0:
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_2170A4794(v5, (_WORD *)(*a3 + v7));
        if (result)
        {
          BOOL v56 = sub_2170A4794(v5, (_WORD *)(a3[3] + v7));
          uint64_t v10 = (_WORD *)(a3[6] + v8);
          BOOL v11 = sub_2170A4794(v5, v10);
          if (v11) {
            uint64_t v12 = 2;
          }
          else {
            uint64_t v12 = 1;
          }
          if (sub_2170A4794(v5, &v10[v12])) {
            int v13 = 2;
          }
          else {
            int v13 = 0;
          }
          int v14 = v13 | v11;
          if (sub_2170A4794(v5, &v10[v14 + 3])) {
            int v15 = 4;
          }
          else {
            int v15 = 0;
          }
          int v16 = v14 | v15;
          if (sub_2170A4794(v5, &v10[v16 + 7])) {
            int v17 = 8;
          }
          else {
            int v17 = 0;
          }
          int v18 = v16 | v17;
          if (sub_2170A4794(v5, &v10[v18 + 15])) {
            int v19 = 16;
          }
          else {
            int v19 = 0;
          }
          int v20 = v18 | v19;
          uint64_t result = sub_2170A4794(v5, &v10[v20 + 31]);
          if (result) {
            int v21 = 32;
          }
          else {
            int v21 = 0;
          }
          int v22 = v20 | v21;
          if (v22 == 63)
          {
            uint64_t result = sub_2170A4884(v5, *(_DWORD *)(a3[12] + v9), (_WORD *)(a3[9] + v7));
            int v22 = result + 63;
          }
          if (v56) {
            int v23 = v22 + 1;
          }
          else {
            int v23 = ~v22;
          }
        }
        else
        {
          int v23 = 0;
        }
        *(_DWORD *)(a4 + v9) = v23;
        v9 += 4;
        v8 += 128;
        v7 += 2;
      }
      while (v7 != 6);
      return result;
    case 2:
      uint64_t v24 = 0;
      for (uint64_t i = 0; ; i += 4)
      {
        uint64_t v26 = a3[12];
        uint64_t result = sub_2170A4DD4(v5, *(_DWORD *)(v26 + i), (_WORD *)(a3[3] + v24), (_WORD *)(a3[9] + v24));
        unsigned int v27 = (int)result >= 0 ? result : -(int)result;
        int v28 = *(_DWORD *)(v26 + i);
        unsigned int v29 = v27 >> v28;
        if (v28 && v29 == 0) {
          break;
        }
        if (v29 >= 2)
        {
          int v31 = 1;
LABEL_41:
          *(_DWORD *)(v26 + i) = v28 + v31;
        }
        *(_DWORD *)(a4 + i) = result;
        v24 += 2;
        if (v24 == 6) {
          return result;
        }
      }
      int v31 = -1;
      goto LABEL_41;
    case 3:
      for (uint64_t j = 0; j != 3; ++j)
      {
        int v33 = v5[j + 270];
        if (v33 < 1)
        {
          int v35 = 0;
        }
        else
        {
          int v34 = 0;
          int v35 = 0;
          do
          {
            __int16 v57 = 0x8000;
            uint64_t result = sub_2170A4794(v5, &v57);
            v35 += result << v34++;
          }
          while (v33 != v34);
        }
        *(_DWORD *)(a4 + 4 * j) = v35;
      }
      return result;
    case 4:
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      break;
    default:
      return result;
  }
  do
  {
    uint64_t result = sub_2170A4794(v5, (_WORD *)(*a3 + v36));
    if (!result)
    {
      int v55 = 0;
      goto LABEL_80;
    }
    BOOL v39 = sub_2170A4794(v5, (_WORD *)(a3[3] + v36));
    int v40 = (_WORD *)(a3[6] + v37);
    if (sub_2170A4794(v5, v40)) {
      unint64_t v41 = 32;
    }
    else {
      unint64_t v41 = 0;
    }
    if (sub_2170A4794(v5, (_WORD *)((char *)v40 + (v41 >> 4) + 2))) {
      int v42 = 16;
    }
    else {
      int v42 = 0;
    }
    unint64_t v43 = v42 | v41;
    if (sub_2170A4794(v5, (_WORD *)((char *)v40 + (v43 >> 3) + 6))) {
      int v44 = 8;
    }
    else {
      int v44 = 0;
    }
    unint64_t v45 = v43 | v44;
    if (sub_2170A4794(v5, (_WORD *)((char *)v40 + (v45 >> 2) + 14))) {
      int v46 = 4;
    }
    else {
      int v46 = 0;
    }
    unint64_t v47 = v45 | v46;
    if (sub_2170A4794(v5, (_WORD *)((char *)v40 + (v47 >> 1) + 30))) {
      int v48 = 2;
    }
    else {
      int v48 = 0;
    }
    uint64_t v49 = v47 | v48;
    uint64_t result = sub_2170A4794(v5, (_WORD *)((char *)v40 + v49 + 62));
    int v50 = v49 | result;
    if ((v49 | result) == 0x3F)
    {
      uint64_t v51 = a3[12];
      uint64_t result = sub_2170A4884(v5, *(_DWORD *)(v51 + v38), (_WORD *)(a3[9] + v36));
      int v50 = result + 63;
      int v52 = *(_DWORD *)(v51 + v38);
      int v53 = ((int)result + 63) >> v52;
      if (!v52 || v53)
      {
        if (v53 < 2) {
          goto LABEL_77;
        }
        int v54 = 1;
      }
      else
      {
        int v54 = -1;
      }
      *(_DWORD *)(v51 + v38) = v52 + v54;
    }
LABEL_77:
    if (v39) {
      int v55 = v50 + 1;
    }
    else {
      int v55 = ~v50;
    }
LABEL_80:
    *(_DWORD *)(a4 + v38) = v55;
    v38 += 4;
    v37 += 128;
    v36 += 2;
  }
  while (v37 != 384);
  return result;
}

void sub_2170AB688(uint64_t a1, int a2, int a3, int32x2_t a4)
{
  if (a2 == 3 || a2 == 5)
  {
    if (a3 >= 1)
    {
      unint64_t v5 = a3 + 1;
      do
      {
        if (*(_DWORD *)(a1 + 4384)) {
          break;
        }
        if (*(unsigned char *)(*(void *)(a1 + 1352) + (v5 - 2))) {
          a4 = sub_2170AAE8C(a1, *(_DWORD *)(*(void *)(a1 + 1328) + 4 * (v5 - 2)), a4);
        }
        --v5;
      }
      while (v5 > 1);
    }
  }
  else if (a3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3;
    do
    {
      if (*(_DWORD *)(a1 + 4384)) {
        break;
      }
      if (*(unsigned char *)(*(void *)(a1 + 1352) + v6)) {
        a4 = sub_2170AAE8C(a1, *(_DWORD *)(*(void *)(a1 + 1328) + 4 * v6), a4);
      }
      ++v6;
    }
    while (v7 != v6);
  }
}

void sub_2170AB74C(uint64_t a1, int a2, int a3)
{
  if (a3 > 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 4 * a3 - 4;
    do
    {
      uint64_t v8 = (int *)(*(void *)(a1 + 1328) + v6);
      int v9 = *v8;
      int v10 = v8[1];
      if (*(unsigned char *)(a1 + 1154))
      {
        sub_2170AB848(a1, a2, v9, v10);
        if (*(_DWORD *)(a1 + 4384)) {
          return;
        }
      }
      else
      {
        uint64_t v11 = *(void *)(a1 + 1472);
        *(_DWORD *)(v11 + 12 * v9) += 8;
        *(_DWORD *)(v11 + 12 * v10) += 8;
      }
      v6 += 4;
    }
    while (v7 != v6);
  }
  if (a3 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      int v13 = (int *)(*(void *)(a1 + 1472) + 12 * *(int *)(*(void *)(a1 + 1328) + 4 * v12));
      int v14 = (_DWORD *)(a1 + 1496);
      if (*(unsigned char *)(*(void *)(a1 + 1352) + v12)) {
        sub_2170ABC20(v14, v13);
      }
      else {
        sub_2170ABD78(v14, v13);
      }
      ++v12;
    }
    while (a3 != v12);
  }
}

uint64_t sub_2170AB848(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(result + 1160);
  unint64_t v5 = (_DWORD *)(v4 + 12 * a2);
  uint64_t v7 = (int *)(v4 + 12 * a3);
  int v9 = (int *)(v4 + 12 * a4);
  int v10 = *v9;
  int v11 = v9[1];
  int v13 = *v7;
  int v12 = v7[1];
  int v14 = *v9 - *v7;
  int v15 = v11 - v12;
  int v16 = v9[2];
  LODWORD(v9) = v7[2];
  int v17 = v16 - v9;
  int v18 = v5[1];
  int v19 = *v5 - v13;
  int v20 = v18 - v12;
  int v21 = v5[2];
  int v22 = v21 - v9;
  int v23 = *v5 - v10;
  int v24 = v18 - v11;
  int v25 = v21 - v16;
  if (v14 >= 0) {
    unsigned int v26 = v14;
  }
  else {
    unsigned int v26 = -v14;
  }
  if (v15 >= 0) {
    unsigned int v27 = v15;
  }
  else {
    unsigned int v27 = -v15;
  }
  if (v17 >= 0) {
    unsigned int v28 = v17;
  }
  else {
    unsigned int v28 = -v17;
  }
  BOOL v31 = v26 < 0x1000 && v27 < 0x1000 && v28 < 0x1000;
  if (v19 >= 0) {
    unsigned int v32 = v19;
  }
  else {
    unsigned int v32 = -v19;
  }
  if (v20 >= 0) {
    unsigned int v33 = v20;
  }
  else {
    unsigned int v33 = -v20;
  }
  if (v22 >= 0) {
    unsigned int v34 = v22;
  }
  else {
    unsigned int v34 = -v22;
  }
  if (v31 && v32 <= 0xFFF && v33 <= 0xFFF && v34 <= 0xFFF)
  {
    int v35 = v19 * v14 + v20 * v15 + v22 * v17;
    if (v35)
    {
      int v36 = v22 * v15 - v20 * v17;
      if (v36 < 0) {
        int v36 = v20 * v17 - v22 * v15;
      }
      int v37 = v19 * v17 - v22 * v14;
      if (v37 < 0) {
        int v37 = -v37;
      }
      int v38 = v20 * v14 - v19 * v15;
      if (v38 < 0) {
        int v38 = -v38;
      }
      int v39 = v36 + v37;
      if (v37 < v38)
      {
        int v40 = v38;
      }
      else
      {
        int v39 = v36 + v38;
        int v40 = v37;
      }
      BOOL v41 = v36 >= v37 && v36 >= v38;
      if (v41) {
        unsigned int v42 = v37 + v38;
      }
      else {
        unsigned int v42 = v39;
      }
      if (v41) {
        int v43 = v36;
      }
      else {
        int v43 = v40;
      }
      unsigned int v44 = v43 + (v42 >> 2);
      if (v35 < 0) {
        LODWORD(v45) = -16 * v35 / (int)(v44 - v35) + 16;
      }
      else {
        LODWORD(v45) = (int)(16 * v44) / (int)(v44 + v35);
      }
      goto LABEL_77;
    }
LABEL_74:
    LODWORD(v45) = 16;
    goto LABEL_77;
  }
  uint64_t v46 = v20 * (uint64_t)v15 + v19 * (uint64_t)v14 + v22 * (uint64_t)v17;
  if (!v46) {
    goto LABEL_74;
  }
  uint64_t v47 = v22 * (uint64_t)v15 - v20 * (uint64_t)v17;
  if (v47 < 0) {
    uint64_t v47 = v20 * (uint64_t)v17 - v22 * (uint64_t)v15;
  }
  uint64_t v48 = v19 * (uint64_t)v17 - v22 * (uint64_t)v14;
  if (v48 < 0) {
    uint64_t v48 = -v48;
  }
  uint64_t v49 = v20 * (uint64_t)v14 - v19 * (uint64_t)v15;
  if (v49 < 0) {
    uint64_t v49 = -v49;
  }
  uint64_t v50 = v47 + v48;
  if (v48 < (unint64_t)v49)
  {
    uint64_t v51 = v49;
  }
  else
  {
    uint64_t v50 = v47 + v49;
    uint64_t v51 = v48;
  }
  BOOL v52 = v47 >= (unint64_t)v48 && v47 >= (unint64_t)v49;
  if (v52) {
    unint64_t v53 = v48 + v49;
  }
  else {
    unint64_t v53 = v50;
  }
  if (v52) {
    uint64_t v54 = v47;
  }
  else {
    uint64_t v54 = v51;
  }
  uint64_t v45 = v54 + (v53 >> 2);
  if (v46 < 0) {
    LODWORD(v45) = -16 * v46 / (v45 - v46) + 16;
  }
  else {
    uint64_t v45 = 16 * v45 / (v45 + v46);
  }
LABEL_77:
  int v55 = -v14;
  int v56 = -v15;
  int v57 = -v17;
  if (v23 >= 0) {
    unsigned int v58 = v23;
  }
  else {
    unsigned int v58 = -v23;
  }
  BOOL v59 = v58 < 0x1000 && v31;
  if (v24 >= 0) {
    unsigned int v60 = v24;
  }
  else {
    unsigned int v60 = -v24;
  }
  if (v25 >= 0) {
    unsigned int v61 = v25;
  }
  else {
    unsigned int v61 = -v25;
  }
  if (v59 && v60 <= 0xFFF && v61 <= 0xFFF)
  {
    int v62 = v23 * v55 + v24 * v56 + v25 * v57;
    if (v62)
    {
      int v63 = v24 * v17 + v25 * v56;
      if (v63 < 0) {
        int v63 = -v63;
      }
      int v64 = v23 * v57 + v25 * v14;
      if (v64 < 0) {
        int v64 = -v64;
      }
      int v65 = v23 * v15 + v24 * v55;
      if (v65 < 0) {
        int v65 = -v65;
      }
      if (v63 < v64 || v63 < v65)
      {
        unsigned int v66 = v63 + v64;
        if (v64 < v65)
        {
          int v63 = v65;
        }
        else
        {
          unsigned int v66 = v63 + v65;
          int v63 = v64;
        }
      }
      else
      {
        unsigned int v66 = v64 + v65;
      }
      int v78 = v63 + (v66 >> 2);
      if (v62 < 0) {
        LODWORD(v77) = -16 * v62 / (v78 - v62) + 16;
      }
      else {
        LODWORD(v77) = 16 * v78 / (v78 + v62);
      }
      goto LABEL_131;
    }
LABEL_123:
    LODWORD(v77) = 16;
    goto LABEL_131;
  }
  uint64_t v67 = v24 * (uint64_t)v56 + v23 * (uint64_t)v55 + v25 * (uint64_t)v57;
  if (!v67) {
    goto LABEL_123;
  }
  int v68 = -v14;
  uint64_t v69 = v25 * (uint64_t)v56 - v24 * (uint64_t)v57;
  if (v69 < 0) {
    uint64_t v69 = v24 * (uint64_t)v57 - v25 * (uint64_t)v56;
  }
  uint64_t v70 = v23 * (uint64_t)v57 - v25 * (uint64_t)v68;
  if (v70 < 0) {
    uint64_t v70 = -v70;
  }
  uint64_t v71 = v24 * (uint64_t)v68 - v23 * (uint64_t)v56;
  if (v71 < 0) {
    uint64_t v71 = -v71;
  }
  uint64_t v72 = v69 + v70;
  if (v70 < (unint64_t)v71)
  {
    uint64_t v73 = v71;
  }
  else
  {
    uint64_t v72 = v69 + v71;
    uint64_t v73 = v70;
  }
  BOOL v74 = v69 >= (unint64_t)v70 && v69 >= (unint64_t)v71;
  if (v74) {
    unint64_t v75 = v70 + v71;
  }
  else {
    unint64_t v75 = v72;
  }
  if (v74) {
    uint64_t v76 = v69;
  }
  else {
    uint64_t v76 = v73;
  }
  uint64_t v77 = v76 + (v75 >> 2);
  if (v67 < 0) {
    LODWORD(v77) = -16 * v67 / (v77 - v67) + 16;
  }
  else {
    uint64_t v77 = 16 * v77 / (v77 + v67);
  }
LABEL_131:
  uint64_t v79 = *(void *)(result + 1472);
  uint64_t v80 = 12 * a3;
  *(_DWORD *)(v79 + v80) += v45;
  uint64_t v81 = 12 * a4;
  int v82 = *(_DWORD *)(v79 + v81) + v77;
  *(_DWORD *)(v79 + v81) = v82;
  if ((*(_DWORD *)(v79 + v80) & 0x80000000) != 0 || v82 < 0) {
    *(_DWORD *)(result + 4384) = 3;
  }
  return result;
}

void sub_2170ABC20(_DWORD *a1, int *a2)
{
  if (*a2 >= 63) {
    int v4 = 63;
  }
  else {
    int v4 = *a2;
  }
  if (v4 <= a1[1]) {
    int v5 = a1[1];
  }
  else {
    int v5 = v4;
  }
  uint64_t v6 = &a1[6 * v4];
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v8 = (void **)(v6 + 2);
  uint64_t v7 = v9;
  a1[1] = v5;
  int v10 = v8 + 1;
  int v11 = (int **)v8[1];
  uint64_t v12 = ((uint64_t)v11 - v9) >> 3;
  a2[1] = v4;
  a2[2] = v12;
  unint64_t v13 = (unint64_t)v8[2];
  if ((unint64_t)v11 >= v13)
  {
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = v13 - v7;
    uint64_t v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v16 = v12 + 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      int v18 = (char *)sub_21677CB28((uint64_t)(v8 + 2), v17);
    }
    else {
      int v18 = 0;
    }
    int v19 = (int **)&v18[8 * v12];
    int v20 = &v18[8 * v17];
    *int v19 = a2;
    int v14 = v19 + 1;
    int v21 = (char *)*v10;
    int v22 = (char *)*v8;
    if (*v10 != *v8)
    {
      do
      {
        int v23 = (int *)*((void *)v21 - 1);
        v21 -= 8;
        *--int v19 = v23;
      }
      while (v21 != v22);
      int v21 = (char *)*v8;
    }
    *uint64_t v8 = v19;
    _WORD *v10 = v14;
    v8[2] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *int v11 = a2;
    int v14 = v11 + 1;
  }
  _WORD *v10 = v14;
  ++*a1;
  int v24 = &a1[v4];
  unint64_t v25 = (unint64_t)((char *)v14 - (unsigned char *)*v8) >> 3;
  if (v24[386] > (int)v25) {
    LODWORD(v25) = v24[386];
  }
  v24[386] = v25;
}

void sub_2170ABD78(_DWORD *a1, int *a2)
{
  if (sub_2170B1C58(a1, (uint64_t)a2))
  {
    sub_2170ABC20(a1, a2);
  }
}

uint64_t sub_2170ABDC8(uint64_t a1, int a2, int a3, int *a4, _DWORD *a5, int *a6, int *a7)
{
  int v14 = *a6;
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 16 * a3 + 3414)))
  {
    char v15 = 0;
    char v16 = 0;
    char v17 = 0;
    int v18 = 0;
    int v19 = 0;
    int v20 = 1;
LABEL_3:
    int v21 = 1;
  }
  else
  {
    uint64_t v22 = a1 + 16 * a3;
    uint64_t v23 = v22 + 3414;
    BOOL v24 = sub_2170A4794((unsigned int *)a1, (_WORD *)(v22 + 3416));
    uint64_t v25 = 4;
    if (v24) {
      uint64_t v25 = 6;
    }
    if (sub_2170A4794((unsigned int *)a1, (_WORD *)(v23 + v25))) {
      int v26 = 2;
    }
    else {
      int v26 = 0;
    }
    int v27 = v26 | v24;
    BOOL v28 = sub_2170A4794((unsigned int *)a1, (_WORD *)(v23 + 2 * (v26 | v24 | 4u)));
    int v19 = v27 + 5;
    if (!v28) {
      int v19 = v27 + 1;
    }
    char v15 = 0;
    int v21 = 0;
    char v17 = 0;
    int v20 = 1;
    char v16 = 1;
    int v18 = 1;
    switch(v19)
    {
      case 1:
        break;
      case 2:
        char v15 = 0;
        char v16 = 0;
        char v17 = 0;
        goto LABEL_3;
      case 3:
        int v20 = 0;
        char v16 = 0;
        int v18 = 0;
        goto LABEL_16;
      case 4:
        int v20 = 0;
        char v16 = 0;
LABEL_16:
        char v15 = 1;
        goto LABEL_18;
      case 5:
        char v15 = 0;
        char v16 = 0;
        int v18 = 0;
LABEL_18:
        int v21 = 1;
        goto LABEL_21;
      case 6:
        char v15 = 0;
        int v21 = 0;
        goto LABEL_21;
      case 7:
        int v20 = 0;
        int v21 = 0;
        char v15 = 1;
LABEL_21:
        char v17 = 1;
        break;
      default:
        char v15 = 0;
        char v16 = 0;
        int v19 = 8;
        int v20 = 1;
        int v21 = 1;
        char v17 = 1;
        int v18 = 1;
        break;
    }
  }
  *a4 = v19;
  int v104 = a5;
  int v102 = v21;
  int v103 = v18;
  int v105 = v20;
  char v106 = v16;
  char v107 = v15;
  if (*(unsigned char *)(a1 + 1153) && *(unsigned char *)(a1 + 1152))
  {
    int v29 = *(_DWORD *)(*(void *)(a1 + 1472) + 12 * a2);
    if (v29 <= 19) {
      int v29 = 19;
    }
    unsigned int v30 = v29 - 19;
    unsigned int v109 = v30 >> 1;
    int v110 = 15;
    BOOL v31 = v30 >= 0x1E;
    unsigned int v32 = &v110;
    if (!v31) {
      unsigned int v32 = (int *)&v109;
    }
  }
  else
  {
    int v111 = 7;
    unsigned int v32 = (int *)(*(void *)(a1 + 1424) + 4 * a2);
    if (*v32 >= 7) {
      unsigned int v32 = &v111;
    }
  }
  unsigned int v33 = (_WORD *)(a1 + 6 * *v32 + 3308);
  BOOL v34 = sub_2170A4794((unsigned int *)a1, v33);
  uint64_t v35 = 2;
  if (!v34) {
    uint64_t v35 = 1;
  }
  if (sub_2170A4794((unsigned int *)a1, &v33[v35])) {
    int v36 = 2;
  }
  else {
    int v36 = 0;
  }
  int v37 = v36 | v34;
  if ((v36 | v34) != 3)
  {
LABEL_39:
    int v39 = *a6;
    if (v37 >= *(_DWORD *)(a1 + 1120) - *a6) {
      goto LABEL_65;
    }
    unint64_t v100 = (unsigned int *)a4;
    int v101 = a2;
    int v40 = v37 + 1;
    int v98 = v14;
    int v99 = a7;
    switch(*(_DWORD *)(a1 + 1132))
    {
      case 0:
        uint64_t v41 = *(void *)(a1 + 1208);
        int v42 = v40;
        do
        {
          *(_DWORD *)(v41 + 4 * v39 + 4) = *(_DWORD *)(v41 + 4 * v39) + 3;
          int v39 = *a6 + 1;
          *a6 = v39;
          --v42;
        }
        while (v42);
        int v43 = v40;
        break;
      case 1:
        uint64_t v44 = *(void *)(a1 + 1208);
        int v45 = v40;
        do
        {
          *(_DWORD *)(v44 + 4 * v39 + 4) = *(_DWORD *)(v44 + 4 * v39) + 4;
          int v39 = *a6 + 1;
          *a6 = v39;
          --v45;
        }
        while (v45);
        int v43 = 2 * v40;
        break;
      case 2:
        int v43 = 0;
        do
        {
          if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3406))) {
            int v46 = 4;
          }
          else {
            int v46 = 3;
          }
          uint64_t v47 = (_DWORD *)(*(void *)(a1 + 1208) + 4 * *a6);
          v47[1] = *v47 + v46;
          ++*a6;
          int v43 = v43 + v46 - 2;
          --v40;
        }
        while (v40);
        break;
      case 3:
        int v43 = 0;
        do
        {
          BOOL v48 = sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3406));
          if (v48) {
            uint64_t v49 = 4;
          }
          else {
            uint64_t v49 = 2;
          }
          if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + v49 + 3406))) {
            int v50 = 2;
          }
          else {
            int v50 = 0;
          }
          int v51 = v50 | v48;
          if (v51 == 3) {
            int v51 = sub_2170A4884((unsigned int *)a1, 0, (_WORD *)(a1 + 3412)) + 3;
          }
          BOOL v52 = (_DWORD *)(*(void *)(a1 + 1208) + 4 * *a6);
          v52[1] = v51 + *v52 + 3;
          ++*a6;
          v43 += v51 + 1;
          --v40;
        }
        while (v40);
        break;
      default:
        goto LABEL_65;
    }
    if (v43 <= 0 || v43 > *(_DWORD *)(a1 + 1124)) {
      goto LABEL_65;
    }
    unint64_t v54 = (v43 + 1);
    int v56 = *(_DWORD *)(a1 + 1116);
    uint64_t v57 = a1 + 1328;
    unsigned int v58 = (char **)(a1 + 1352);
    sub_21681C000(a1 + 1328, v54);
    BOOL v59 = *(char **)(a1 + 1352);
    unint64_t v60 = *(void *)(a1 + 1360) - (void)v59;
    if (v54 <= v60)
    {
      int v61 = v101;
      if (v54 < v60) {
        *(void *)(a1 + 1360) = &v59[v54];
      }
    }
    else
    {
      sub_217077494((unint64_t *)(a1 + 1352), v54 - v60);
      BOOL v59 = *v58;
      int v61 = v101;
    }
    *BOOL v59 = v107;
    *(unsigned char *)(*(void *)(a1 + 1352) + v43) = v106;
    uint64_t v62 = v43;
    int v63 = *(_DWORD **)(a1 + 1328);
    uint64_t v64 = *(void *)(a1 + 1448);
    int v108 = *(_DWORD *)(v64 + 16 * v61);
    if (v17)
    {
      int v65 = v56;
      if (!v105) {
        goto LABEL_79;
      }
      if (*(unsigned char *)(a1 + 1152)) {
        int v66 = sub_2170B16DC(a1, v61 - 1);
      }
      else {
        int v66 = v61 - 1 + sub_2170A4DD4((unsigned int *)a1, 0, (_WORD *)(a1 + 3530), (_WORD *)(a1 + 3532));
      }
    }
    else
    {
      int v66 = *(_DWORD *)(v64 + 16 * v61 + 4);
      int v65 = v56;
    }
    _DWORD *v63 = v66;
LABEL_79:
    if (v43 >= 2)
    {
      if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3534)))
      {
        for (uint64_t i = 1; i != v43; (*v58)[i++] = 1)
          ;
      }
      else if (v54 == 3)
      {
        *(unsigned char *)(*(void *)(a1 + 1352) + 1) = 0;
        if (*(unsigned char *)(a1 + 1152)) {
          int v68 = sub_2170B16DC(a1, v65);
        }
        else {
          int v68 = v65 - sub_2170A4884((unsigned int *)a1, 0, (_WORD *)(a1 + 3532));
        }
        *(_DWORD *)(*(void *)v57 + 4) = v68;
      }
      else
      {
        uint64_t v69 = 1;
        do
        {
          *(unsigned char *)(*(void *)(a1 + 1352) + v69) = sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3494));
          if (!*(unsigned char *)(*(void *)(a1 + 1352) + v69))
          {
            if (*(unsigned char *)(a1 + 1152)) {
              int v70 = sub_2170B16DC(a1, v65);
            }
            else {
              int v70 = v65 - sub_2170A4884((unsigned int *)a1, 0, (_WORD *)(a1 + 3532));
            }
            *(_DWORD *)(*(void *)v57 + 4 * v69) = v70;
          }
          ++v69;
        }
        while (v62 != v69);
      }
    }
    if (*(_DWORD *)(a1 + 4384)) {
      return 0xFFFFFFFFLL;
    }
    int v71 = v98;
    if (v103)
    {
      if (!v102)
      {
LABEL_106:
        unint64_t v53 = (_DWORD *)(a1 + 4384);
        if (*v100 == 3 || *v100 == 5)
        {
          uint64_t v72 = *v58;
          uint64_t v73 = v62;
          BOOL v74 = v99;
          do
          {
            if (v72[v73])
            {
              int v75 = (*v104)++;
              *(_DWORD *)(*(void *)v57 + 4 * v73) = v75;
            }
          }
          while (v73-- > 0);
        }
        else
        {
          uint64_t v77 = 0;
          int v78 = *v58;
          BOOL v74 = v99;
          do
          {
            if (v78[v77])
            {
              int v79 = (*v104)++;
              *(_DWORD *)(*(void *)v57 + 4 * v77) = v79;
            }
            ++v77;
          }
          while (v54 != v77);
        }
        uint64_t v80 = *(int **)(a1 + 1328);
        unint64_t v81 = v54;
        while (1)
        {
          int v83 = *v80++;
          int v82 = v83;
          if (v83 < 0 || v82 >= (int)((*(void *)(a1 + 1456) - *(void *)(a1 + 1448)) >> 4)) {
            goto LABEL_66;
          }
          if (!--v81)
          {
            sub_2170B18A0((void *)a1, v61, *v100, v54);
            if (*(unsigned char *)(a1 + 1152)) {
              BOOL v84 = *(unsigned char *)(a1 + 1153) == 0;
            }
            else {
              BOOL v84 = 1;
            }
            int v85 = 0;
            for (uint64_t j = (int *)(*(void *)(a1 + 1328) + 4); ; ++j)
            {
              int v87 = *(j - 1);
              int v88 = *j;
              if (!v85)
              {
                uint64_t v89 = *v74;
                if ((int)v89 + 2 > *(_DWORD *)(a1 + 1124)) {
                  goto LABEL_66;
                }
                int v85 = *(_DWORD *)(*(void *)(a1 + 1208) + 4 * (v71 + 1))
                    - *(_DWORD *)(*(void *)(a1 + 1208) + 4 * v71)
                    - 2;
                *BOOL v74 = v89 + 1;
                uint64_t v90 = *(void *)(a1 + 1184);
                *(_DWORD *)(v90 + 4 * v89) = v61;
                uint64_t v91 = *v74;
                *BOOL v74 = v91 + 1;
                *(_DWORD *)(v90 + 4 * v91) = v87;
                ++v71;
              }
              uint64_t v92 = *v74;
              if ((int)v92 >= *(_DWORD *)(a1 + 1124)) {
                break;
              }
              uint64_t v93 = v87;
              *BOOL v74 = v92 + 1;
              *(_DWORD *)(*(void *)(a1 + 1184) + 4 * v92) = v88;
              uint64_t v94 = *(void *)(a1 + 1448);
              uint64_t v95 = v94 + 16 * v88;
              *(_DWORD *)(v95 + 4) = v87;
              *(_DWORD *)(v95 + 8) = v61;
              BOOL v96 = (_DWORD *)(v94 + 16 * v87);
              _DWORD *v96 = v88;
              void v96[3] = v61;
              if (v84)
              {
                uint64_t v97 = *(void *)(a1 + 1424);
                ++*(_DWORD *)(v97 + 4 * v93);
                ++*(_DWORD *)(v97 + 4 * v88);
              }
              --v85;
              if (!--v62) {
                return v54;
              }
            }
            goto LABEL_66;
          }
        }
      }
      if (*(unsigned char *)(a1 + 1152)) {
        int v108 = sub_2170B16DC(a1, v61 + 1);
      }
      else {
        int v108 = v61 + 1 + sub_2170A4DD4((unsigned int *)a1, 0, (_WORD *)(a1 + 3530), (_WORD *)(a1 + 3532));
      }
      int v71 = v98;
    }
    v63[v62] = v108;
    goto LABEL_106;
  }
  int v38 = sub_2170A4884((unsigned int *)a1, 0, (_WORD *)(a1 + 3404));
  if (v38 >= -3)
  {
    int v37 = v38 + 3;
    goto LABEL_39;
  }
LABEL_65:
  unint64_t v53 = (_DWORD *)(a1 + 4384);
LABEL_66:
  *unint64_t v53 = 3;
  return 0xFFFFFFFFLL;
}